{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/BlueLake/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/giteement/gitee.oauthcallback.js","path":"giteement/gitee.oauthcallback.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/giteement/giteement.css","path":"giteement/giteement.css","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/giteement/giteement.min.js","path":"giteement/giteement.min.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/js/search.json.js","path":"js/search.json.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/iconfont/iconfont.eot","path":"css/iconfont/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/iconfont/iconfont.svg","path":"css/iconfont/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/iconfont/iconfont.ttf","path":"css/iconfont/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/iconfont/iconfont.woff","path":"css/iconfont/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/iconfont/iconfont.woff2","path":"css/iconfont/iconfont.woff2","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/images/alipay-pay.jpg","path":"css/images/alipay-pay.jpg","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/images/banner-dark.jpg","path":"css/images/banner-dark.jpg","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/images/alipay.jpg","path":"css/images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/images/wechat-pay.jpg","path":"css/images/wechat-pay.jpg","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/images/wechat.jpg","path":"css/images/wechat.jpg","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/localshare/css/share.styl","path":"localshare/css/share.styl","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/localshare/fonts/iconfont.eot","path":"localshare/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/localshare/fonts/iconfont.svg","path":"localshare/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/localshare/fonts/iconfont.ttf","path":"localshare/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/localshare/fonts/iconfont.woff","path":"localshare/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/localshare/js/qrcode.js","path":"localshare/js/qrcode.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/localshare/js/social-share.js","path":"localshare/js/social-share.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/一些有用的工具.md","hash":"ac143359fd76da1e9049cdd360dec7dae19943c8","modified":1709708898526},{"_id":"source/_posts/第11期：Tcpdump.md","hash":"4729b679d602eb0375270cf1ea3911ef07b4646f","modified":1709708118347},{"_id":"source/_posts/第12期：curl.md","hash":"18a7d155c4b2ef29603b52b4c592e2912a5a61c8","modified":1709708118347},{"_id":"source/_posts/第13期：cron.md","hash":"25d625900b92b91d5cfdd8a86635c8c579703ef8","modified":1709708118348},{"_id":"source/_posts/第14期：linux-jq.md","hash":"0fb851fe4fdfb4dd6db11b8ba3197bf5120618fc","modified":1709708118350},{"_id":"source/_posts/第15期：LDAP.md","hash":"fcff8c2b780883d7d3932be5d6bf579369067884","modified":1709708118350},{"_id":"source/_posts/第16期：grep.md","hash":"fa3962df92b774dae5ac1148baeb8e3933887d34","modified":1709708118351},{"_id":"source/_posts/第18期：linux性能.md","hash":"519d8605ff1b3ea6f34cceba4ee826ee513701c8","modified":1709708118352},{"_id":"source/_posts/第17期：ssh.md","hash":"ff3add55cf809cb3d717dafccaa94415fbebb1a6","modified":1709708118351},{"_id":"source/_posts/第19期：Mysql.md","hash":"9315e9f688078f6c0ec93c68efac2bc33e5968c0","modified":1709708118352},{"_id":"source/_posts/第20期：Jenkins.md","hash":"d921afcda68916703a6580226bbfc8015e70f90f","modified":1709708118353},{"_id":"source/_posts/第21期：正则表达式.md","hash":"5299f150c965e1119d467e64e1ad43f1416e3eb7","modified":1709708118353},{"_id":"source/_posts/第22期：rsync.md","hash":"56035af1bf495abb749a3d90e1e574c9336e959d","modified":1709708118354},{"_id":"source/_posts/第23期：GIT.md","hash":"54245661e5a8870b66e075ed6ecfa8db36ef9f1c","modified":1709708118354},{"_id":"source/_posts/第24期：DOCKER.md","hash":"83599656a3942aa8a45988cb118b0779edd686e1","modified":1709708118355},{"_id":"source/_posts/第25期：supervisor.md","hash":"df3a923612c7d6c9b25c312bde09daf8483476d1","modified":1709708118355},{"_id":"source/_posts/第26期：ansible.md","hash":"07d729f2796c5a20b6f479545aaaa8e1fc6b5fbe","modified":1709708118356},{"_id":"source/_posts/第27期：镜像源.md","hash":"116fe14e650324937a74c2225235d0264a021702","modified":1709708118356},{"_id":"source/_posts/第28期：网络.md","hash":"e2a417d612a162bbf56dc1d3b76fa006d03024bc","modified":1709708118357},{"_id":"source/_posts/第29期：PHP-FPM.md","hash":"e5acba99a0849ffaf57da4a868bc6f8cc93dff1f","modified":1709708118359},{"_id":"source/_posts/第30期：Python.md","hash":"04dee55e7d59acb0c404326ab0831b8c0cd317bf","modified":1709708118360},{"_id":"source/_posts/第31期：Golang.md","hash":"55a5e06bab4dc3cc86978aed033230fbc9735c6a","modified":1709708118360},{"_id":"source/_posts/第32期：Java.md","hash":"738f1012f958b157f46a5f2d2b38a4b6b50961b1","modified":1709708118361},{"_id":"source/_posts/第33期：工具集.md","hash":"f01d2795853d33a6e8effdbafe5a8508b1874b19","modified":1709708118361},{"_id":"source/_posts/第34期：LVM.md","hash":"826995984b4ccbb50aac2d8d66936b6cff862257","modified":1709708118362},{"_id":"source/_posts/第35期：TELNET.md","hash":"87edbd8af3231b4c93492edac46ba19ea39ee39d","modified":1709708118362},{"_id":"source/_posts/第36期：Redis.md","hash":"ade8e27021e09ee650bd5c891eda423e403adad0","modified":1709708118362},{"_id":"source/_posts/第37期：操作系统-性能优化.md","hash":"ac791dde603e3af5d67b2eb4eadd68d649d21f9b","modified":1709708118363},{"_id":"source/_posts/第38期：linux日志切割.md","hash":"7981811f9f22b7ecd6d41b7b2df9224be66d2b14","modified":1709708118363},{"_id":"source/_posts/第39期：strace.md","hash":"6deabb442e272c4b3168412723658057ce17af79","modified":1709708118365},{"_id":"source/_posts/第40期：Maven.md","hash":"fba15ce7ba6cbd638bcb0563f969f0ea63be9cef","modified":1709708118366},{"_id":"source/_posts/第41期：sed.md","hash":"07a48fcd4c5234754bf003d7dfbc9634133e8756","modified":1709708118366},{"_id":"source/_posts/第42期：xargs.md","hash":"8d7a63b02573c565583e35b2c99a590e67a930c4","modified":1709708118367},{"_id":"source/_posts/第43期：rabbitmq.md","hash":"a0bfbb2792d5c7a58b8b8b515320b0e0e04a7013","modified":1709708118367},{"_id":"source/_posts/第一期：使用hexo搭建个人博客页面.md","hash":"e9609ffcc7483d51531ffba71e8a17f562a7a147","modified":1709708118384},{"_id":"source/_posts/第三期：Python学习.md","hash":"64629e912de79a701bba33db38621a2bbcec2b99","modified":1709708118387},{"_id":"source/_posts/第七期：dns.md","hash":"4b5451e89974c5eebbea5076456804c1322bbbe5","modified":1709708118385},{"_id":"source/_posts/第九期：K8s.md","hash":"91e0a70f65e49bdce0ef9b76f767b6b455a05458","modified":1709708118388},{"_id":"source/_posts/第二期-hexo-github部署个人博客.md","hash":"4cda1f8baa638042ce28f9e64d2a0ef1dfb8575a","modified":1709708118388},{"_id":"source/_posts/第五期：CDN.md","hash":"b4c1a4385d0022c1070a8d5b37cd7483bc7072ef","modified":1709708118389},{"_id":"source/_posts/第八期：shell.md","hash":"582e8c7215cef0f1a32ec52c4595182e03123671","modified":1709708118389},{"_id":"source/_posts/第六期：Nginx.md","hash":"34e773ce7c8da1db7d77a087e336d9bc7e3e29a3","modified":1709708118390},{"_id":"source/_posts/第十期：VIM.md","hash":"242b01152f36af7f84e53342001fd92ef1230f86","modified":1709708118390},{"_id":"source/_posts/第四期：AI工具集合汇总.md","hash":"47df78651badca5549e35bdf098f3ac3cd9d6e44","modified":1709708118391},{"_id":"source/_posts/运维命令.md","hash":"b6135d6158ce338c1bd10a8570f00ecbc0683aa4","modified":1709708602578},{"_id":"themes/BlueLake/.gitignore","hash":"49f574312f050162fef2ac80f72b5a9c136c62a8","modified":1709708118391},{"_id":"themes/BlueLake/LICENSE","hash":"4c3927c82d0aa4fac5cdf945e07afe5e24335891","modified":1709708118391},{"_id":"themes/BlueLake/README.md","hash":"cdbc633e4c88dbd25851f2ecaa3c968150178f49","modified":1709708118392},{"_id":"themes/BlueLake/_config.yml","hash":"2edee763632578769240ab3d982eee54e05b56bb","modified":1709708118392},{"_id":"themes/BlueLake/package.json","hash":"d8780159f11aac366285889372ccdb007095da07","modified":1709708118419},{"_id":"themes/BlueLake/languages/de-DE.yml","hash":"12d3ec934c9afa32aef174c6c7113e605a3a0b39","modified":1709708118394},{"_id":"themes/BlueLake/languages/en.yml","hash":"96f429d32c0857e956aebfe0c28883afd9163a49","modified":1709708118397},{"_id":"themes/BlueLake/languages/fr-FR.yml","hash":"e52b9716f45bb83e7c06898f7802df8cbed109e3","modified":1709708118398},{"_id":"themes/BlueLake/languages/es-ES.yml","hash":"e28a412b9b98e74bdf79b77f244a4c4be412a83a","modified":1709708118397},{"_id":"themes/BlueLake/languages/ko.yml","hash":"dc110fdf5663fe510c30c6b4e6a057726b4841d0","modified":1709708118398},{"_id":"themes/BlueLake/languages/tr.yml","hash":"4f9f0c58d01cb74309c1913b01123aae80c82ec1","modified":1709708118400},{"_id":"themes/BlueLake/languages/zh-CN.yml","hash":"44b818febd84b2a2d07264ad2aa10d6bbad03ab4","modified":1709708118400},{"_id":"themes/BlueLake/languages/zh-TW.yml","hash":"757b269ca1a9b7b0745c15ece40d4354e4f792dd","modified":1709708118401},{"_id":"themes/BlueLake/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1709708118416},{"_id":"themes/BlueLake/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1709708118416},{"_id":"themes/BlueLake/layout/index.ejs","hash":"e64b89e7c769e9b43cf6dd6d4bdd2f7ba03a4df9","modified":1709708118416},{"_id":"themes/BlueLake/layout/layout.ejs","hash":"0ff64fb4c4ab14af7fe597ea78265d1f09cb11eb","modified":1709708118416},{"_id":"themes/BlueLake/layout/page.ejs","hash":"cc86a83b9edfa0ec21a1d6a1c99e0f772a064ed9","modified":1709708118418},{"_id":"themes/BlueLake/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1709708118418},{"_id":"themes/BlueLake/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1709708118419},{"_id":"themes/BlueLake/source/favicon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1709708118444},{"_id":"themes/BlueLake/layout/_partial/about.ejs","hash":"bedc6c126375b2bccdf8d17f59de7149f306f327","modified":1709708118401},{"_id":"themes/BlueLake/layout/_partial/after-footer.ejs","hash":"c0b8d95d827c6a797bb4d563506d9cbc9717099b","modified":1709708118402},{"_id":"themes/BlueLake/layout/_partial/archive-post.ejs","hash":"8565a0fcd38eff73af75e80f93f176ab8d9c08b9","modified":1709708118402},{"_id":"themes/BlueLake/layout/_partial/archive.ejs","hash":"4744116ed807129594fbf172b9919a2831070591","modified":1709708118402},{"_id":"themes/BlueLake/layout/_partial/article.ejs","hash":"5a70569d2017794b5252abffc7b08cc52c4deef4","modified":1709708118405},{"_id":"themes/BlueLake/layout/_partial/baidu-analytics.ejs","hash":"c6c911f0796aaf1cddc7098ee21e5dc6206e1157","modified":1709708118405},{"_id":"themes/BlueLake/layout/_partial/commonts-script.ejs","hash":"d019f9f6380076008f58e758f44d8883f8f656bb","modified":1709708118405},{"_id":"themes/BlueLake/layout/_partial/footer.ejs","hash":"274285e1cfb82d4f77bb1089720f4cf3b78c3964","modified":1709708118406},{"_id":"themes/BlueLake/layout/_partial/gauges-analytics.ejs","hash":"165008f72ed77f0da879d132563d763369d26472","modified":1709708118406},{"_id":"themes/BlueLake/layout/_partial/google-analytics.ejs","hash":"9fc18f1fd5bec16f8a3d30b0ce38458485c398b3","modified":1709708118406},{"_id":"themes/BlueLake/layout/_partial/head.ejs","hash":"b412b842c97500972642b70131a788aaa823419d","modified":1709708118406},{"_id":"themes/BlueLake/layout/_partial/header.ejs","hash":"d59761b90a19171084eaf2b47cc01ff43dc05562","modified":1709708118407},{"_id":"themes/BlueLake/layout/_partial/pagination.ejs","hash":"c6f279e9bf3e20c2990b22ddbcbd3fed27c5b5bb","modified":1709708118407},{"_id":"themes/BlueLake/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1709708118412},{"_id":"themes/BlueLake/layout/_widget/archive.ejs","hash":"ec2d9bf37b9bb613524b702d49c3234f82cbf96f","modified":1709708118413},{"_id":"themes/BlueLake/layout/_widget/category.ejs","hash":"85d5afdfefb18b2b1a88ef074746cbf109658a6c","modified":1709708118413},{"_id":"themes/BlueLake/layout/_widget/links.ejs","hash":"7364dd89d65ab5d10ea748b208eb3323ef9906f8","modified":1709708118413},{"_id":"themes/BlueLake/layout/_widget/recent_posts.ejs","hash":"598c278442022a08b8e1809b77714779bb8a0d81","modified":1709708118413},{"_id":"themes/BlueLake/layout/_widget/tag.ejs","hash":"feea59d6e9d122895ce3ed2cc4a5ee505e6e336e","modified":1709708118414},{"_id":"themes/BlueLake/layout/_widget/tagcloud.ejs","hash":"658c68f624bce479a81a2db8b017b14180ce3f8a","modified":1709708118415},{"_id":"themes/BlueLake/source/css/_extend.styl","hash":"64875ec77cc31a1225a5992a5d507bf98be14b04","modified":1709708118419},{"_id":"themes/BlueLake/source/css/_variables.styl","hash":"868e13f24ebbaf99067a18e45f5f58b4b4a5cf8c","modified":1709708118427},{"_id":"themes/BlueLake/source/css/style.styl","hash":"60206b021bd3f4364b7376a04bacbcf9ce868029","modified":1709708118442},{"_id":"themes/BlueLake/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1709708118442},{"_id":"themes/BlueLake/source/giteement/gitee.oauthcallback.js","hash":"e00dcbf30010e33fb6d633dfa09f077b2b33b032","modified":1709708118445},{"_id":"themes/BlueLake/source/giteement/giteement.css","hash":"8e6ee0547d7c3eda5a4b96fefc3b89103dccb9d1","modified":1709708118445},{"_id":"themes/BlueLake/source/js/script.js","hash":"1b05856e32423ad8fc50bc7f4e0aac4ae39f814c","modified":1709708118454},{"_id":"themes/BlueLake/source/js/search.json.js","hash":"ed5f817a6a2eff541e15d85a6dd8a8df83bff334","modified":1709708118454},{"_id":"themes/BlueLake/layout/_partial/post/category.ejs","hash":"d6c174fe0fe9ec611620860f9685415b78cb889a","modified":1709708118407},{"_id":"themes/BlueLake/layout/_partial/post/comments-count.ejs","hash":"e776617c998b8d83987faf3148ae715909c6db62","modified":1709708118407},{"_id":"themes/BlueLake/layout/_partial/post/comments.ejs","hash":"8ccf3390fdb05089ea2def9e140ae7ad95236243","modified":1709708118408},{"_id":"themes/BlueLake/layout/_partial/post/date.ejs","hash":"603367b4eddaedd0c74fc976ef8a0a0cbfe2fa34","modified":1709708118408},{"_id":"themes/BlueLake/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1709708118408},{"_id":"themes/BlueLake/layout/_partial/post/nav.ejs","hash":"f8054c6ec9d8a2fd48d66c96500639847fe02293","modified":1709708118410},{"_id":"themes/BlueLake/layout/_partial/post/reward.ejs","hash":"1e7e6e5602db81efb6e3d0bd0ee17aa395247075","modified":1709708118410},{"_id":"themes/BlueLake/layout/_partial/post/share.ejs","hash":"d862f8a5df4635e570bb8f62c3935c0ae3b7751c","modified":1709708118411},{"_id":"themes/BlueLake/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1709708118411},{"_id":"themes/BlueLake/layout/_partial/post/title.ejs","hash":"dacc884b56f24b31d85936327424b4f9edd9200a","modified":1709708118411},{"_id":"themes/BlueLake/layout/_partial/post/toc.ejs","hash":"1c40a8c5359f555745d78da24c9529cc26580340","modified":1709708118412},{"_id":"themes/BlueLake/layout/_partial/post/views-count.ejs","hash":"088c45b29e4cc040d87571dd525f9c9d1a07adb6","modified":1709708118412},{"_id":"themes/BlueLake/source/css/_partial/about.styl","hash":"460f43046ae5e89786165475582153cea051a8de","modified":1709708118420},{"_id":"themes/BlueLake/source/css/_partial/archive.styl","hash":"53c95e8c4e761e45d0c430f8972d1a5c3519b596","modified":1709708118420},{"_id":"themes/BlueLake/source/css/_partial/article.styl","hash":"5a043bf3c4f9a517b8846bb12957c83f68e43d76","modified":1709708118421},{"_id":"themes/BlueLake/source/css/_partial/comment.styl","hash":"38db346eb7f5d6cc1e78b59225bb33ea1ee16baf","modified":1709708118422},{"_id":"themes/BlueLake/source/css/_partial/header.styl","hash":"68582a0e1c222850f5ffc0a541baa2c717be38a5","modified":1709708118424},{"_id":"themes/BlueLake/source/css/_partial/footer.styl","hash":"698afe02aa930fdcc18ef981e0343bb99085dd57","modified":1709708118423},{"_id":"themes/BlueLake/source/css/_partial/highlight.styl","hash":"4fd02b470e68f74e3fa5e97092cdc5ea0a2d0199","modified":1709708118424},{"_id":"themes/BlueLake/source/css/_partial/iconfont.styl","hash":"fb68b181802859322a938490331017c1ad99f23d","modified":1709708118424},{"_id":"themes/BlueLake/source/css/_partial/pagination.styl","hash":"df15c94b90650f3b7e1018514a98c82575f7de1d","modified":1709708118425},{"_id":"themes/BlueLake/source/css/_partial/reward.styl","hash":"e970dff8c3132f061d04bf001aad3e4ef5824599","modified":1709708118425},{"_id":"themes/BlueLake/source/css/_partial/sidebar-aside.styl","hash":"c2320472d5345d99be9850bd8e0dc64dbece6a96","modified":1709708118425},{"_id":"themes/BlueLake/source/css/_partial/sidebar-bottom.styl","hash":"6aab4e0ee81c4407bed9ccb60335d1022f819aca","modified":1709708118426},{"_id":"themes/BlueLake/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1709708118426},{"_id":"themes/BlueLake/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1709708118427},{"_id":"themes/BlueLake/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1709708118427},{"_id":"themes/BlueLake/source/css/iconfont/iconfont.eot","hash":"d79ff9e8325c9c0d2db4ee6dadd2f82799169783","modified":1709708118430},{"_id":"themes/BlueLake/source/css/iconfont/iconfont.svg","hash":"f9d7bf99db7d73faf2fef3891537630ea4f998ae","modified":1709708118430},{"_id":"themes/BlueLake/source/css/iconfont/iconfont.ttf","hash":"655ead66c5702e6e4a214c1473c78e450c49bfd7","modified":1709708118431},{"_id":"themes/BlueLake/source/css/iconfont/iconfont.woff","hash":"29e34038a63a5a810f3af4a9c15dc1476d97fc93","modified":1709708118431},{"_id":"themes/BlueLake/source/css/iconfont/iconfont.woff2","hash":"09f1ae7849a0649f0bb8f46e128c97fcb59e3a4c","modified":1709708118433},{"_id":"themes/BlueLake/source/css/images/alipay-pay.jpg","hash":"c1cdd36471a1197e31ee6309e979d1fb63daeb25","modified":1709708118434},{"_id":"themes/BlueLake/source/css/images/alipay.jpg","hash":"cfafbfa86d3223e5a7aa6025d4e78d26bdcf02af","modified":1709708118435},{"_id":"themes/BlueLake/source/css/images/wechat-pay.jpg","hash":"35f0f9859918d7b67d0a3279b110550667d97e8c","modified":1709708118441},{"_id":"themes/BlueLake/source/css/images/wechat.jpg","hash":"3a3f7518da72f35fbd8d0e3e3afa3018c4a434b2","modified":1709708118441},{"_id":"themes/BlueLake/source/localshare/css/share.styl","hash":"3a521a56eb06cb0ad08662d5e696c7950f456356","modified":1709708118457},{"_id":"themes/BlueLake/source/localshare/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1709708118458},{"_id":"themes/BlueLake/source/localshare/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1709708118458},{"_id":"themes/BlueLake/source/localshare/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1709708118459},{"_id":"themes/BlueLake/source/localshare/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1709708118459},{"_id":"themes/BlueLake/source/localshare/js/qrcode.js","hash":"962ad9cb87afa140a644178e5f3c53e2514ea1e5","modified":1709708118460},{"_id":"themes/BlueLake/source/localshare/js/social-share.js","hash":"fe73d3b1c63a498f18f885fc83d631c2b63535e7","modified":1709708118461},{"_id":"themes/BlueLake/source/fancybox/jquery.fancybox.min.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":1709708118443},{"_id":"themes/BlueLake/source/js/jquery-3.4.1.min.js","hash":"b15f7cfa79519756dff1ad22553fd0ed09024343","modified":1709708118454},{"_id":"themes/BlueLake/source/css/images/banner.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1709708118438},{"_id":"themes/BlueLake/source/css/images/banner-dark.jpg","hash":"0d2c406f1a9b3b74d6defda398239b0113737787","modified":1709708118437},{"_id":"themes/BlueLake/source/giteement/giteement.min.js","hash":"12ff917ec7d6b89a70356ebe4198bdf82d3a70eb","modified":1709708118451},{"_id":"public/2023/05/26/第43期：rabbitmq/index.html","hash":"983ac1fbbd24fd8f7991aac0eef8d53c413c298a","modified":1709708923767},{"_id":"public/2023/05/26/第42期：xargs/index.html","hash":"a32393147f885ebde095358ec8b91ecf7bee8f48","modified":1709708923767},{"_id":"public/2023/05/26/第41期：sed/index.html","hash":"baacf423607f1f71369383ca3b4be5a6f4a5f574","modified":1709708923767},{"_id":"public/2023/05/25/第39期：strace/index.html","hash":"03a0bb27f2eec78c39ddaaf8962c8bcda7dfdacf","modified":1709708923767},{"_id":"public/2023/05/22/第35期：TELNET/index.html","hash":"e8c750fcc1c02701324bf4376c0f37bd3c792e96","modified":1709708923767},{"_id":"public/2023/05/22/第34期：LVM/index.html","hash":"d1a4b979df02884258cc6033c39006298d1fdeed","modified":1709708923767},{"_id":"public/2023/05/22/第33期：工具集/index.html","hash":"36d6c32a63156d84c1640997814ffff647da2ef4","modified":1709708923767},{"_id":"public/2023/05/22/第32期：Java/index.html","hash":"d32da0bd0314c5c41822901cdb0e7aac9f791f1c","modified":1709708923767},{"_id":"public/2023/05/22/第27期：镜像源/index.html","hash":"88ecbb0c6193b1765d0258999c56305252f99b23","modified":1709708923767},{"_id":"public/2023/05/22/第25期：supervisor/index.html","hash":"e9edb812c01cb3901ab2721a848fa20b05301d2d","modified":1709708923767},{"_id":"public/2023/05/22/第23期：GIT/index.html","hash":"a9088f1c660af33488e776607f85692b56f9b40a","modified":1709708923767},{"_id":"public/2023/05/22/第22期：rsync/index.html","hash":"0bb25d79e97f99a79b28699f60f3e97414b0ee06","modified":1709708923767},{"_id":"public/2023/05/22/第21期：正则表达式/index.html","hash":"4a79774fd8b7a0991a2e0bc2e2914b2c7b409503","modified":1709708923767},{"_id":"public/2023/05/22/第18期：linux性能/index.html","hash":"0e3ecbf47fbf5ae07eaeb27698d3705a081e85fa","modified":1709708923767},{"_id":"public/2023/05/22/第17期：ssh/index.html","hash":"a8bf7ecc87774230de349333f96a32cc42b4d65c","modified":1709708923767},{"_id":"public/2023/05/22/第16期：grep/index.html","hash":"9021fa46e90b02a400286d6b83e89d0af3039b0e","modified":1709708923767},{"_id":"public/2023/05/22/第14期：linux-jq/index.html","hash":"970528ffcbf7cfa819b9c4a2d2c810089f6d3e1d","modified":1709708923767},{"_id":"public/2023/05/21/第13期：cron/index.html","hash":"8bafa15fcdcf5854bd830241d1a9bce277f0200a","modified":1709708923767},{"_id":"public/2023/05/21/第12期：curl/index.html","hash":"5321a5758049a78390ec4127c79ebf1f452a43b6","modified":1709708923767},{"_id":"public/2023/05/21/第11期：Tcpdump/index.html","hash":"7496fe7ac77e94545fa12c03bab53ba68412dabf","modified":1709708923767},{"_id":"public/2023/05/20/第十期：VIM/index.html","hash":"31cd142c6ca057575382ab66ca55f5c39e53098e","modified":1709708923767},{"_id":"public/2023/05/20/第九期：K8s/index.html","hash":"f06c0941f70daea9809fa3d29f6c39a8c4c8edf5","modified":1709708923767},{"_id":"public/2023/05/20/第五期：CDN/index.html","hash":"e45904cbf59b99a07a4d436e6480615384545787","modified":1709708923767},{"_id":"public/2023/05/18/第四期：AI工具集合汇总/index.html","hash":"a191ac2392f4f1532925c911b412ba4d6ed5ca95","modified":1709708923767},{"_id":"public/2023/05/18/第三期：Python学习/index.html","hash":"6a108dbbf3ea849ab3c4c50e14d4cedcdc82caeb","modified":1709708923767},{"_id":"public/2023/05/18/第二期-hexo-github部署个人博客/index.html","hash":"b69d7dc67cb9750f0c3101d42c410332bec42c66","modified":1709708923767},{"_id":"public/2023/05/18/第一期：使用hexo搭建个人博客页面/index.html","hash":"d8ee6a1537a4f198a622e834318d6175a1c583d7","modified":1709708923767},{"_id":"public/archives/index.html","hash":"fec1fd01b97a68068bd114de774633404cf73a16","modified":1709708923767},{"_id":"public/archives/page/2/index.html","hash":"e3c1f96098fcb32d727177604a8b886bb3d946f3","modified":1709708923767},{"_id":"public/archives/page/3/index.html","hash":"a21442ff53222c59788cc5616c10695dea152b06","modified":1709708923767},{"_id":"public/archives/page/4/index.html","hash":"676635b1aa64a1d1317f7008a3c5ab131d16f7ac","modified":1709708923767},{"_id":"public/archives/page/5/index.html","hash":"309e0f46b62ed7faa48597933526874e5eeaf89a","modified":1709708923767},{"_id":"public/archives/2023/index.html","hash":"bc134438bfa27f930b2d74f3f377694f50540ca2","modified":1709708923767},{"_id":"public/archives/2023/page/2/index.html","hash":"95c9873b186afbe9e2aa6f47275fbfab86ed0119","modified":1709708923767},{"_id":"public/archives/2023/page/3/index.html","hash":"e406001bff4ef58a1d5618e7d686b75c51e36785","modified":1709708923767},{"_id":"public/archives/2023/page/4/index.html","hash":"25209154566a7d0655e9b3fc57a94d860e66447e","modified":1709708923767},{"_id":"public/archives/2023/page/5/index.html","hash":"d3f47692f67bb1d1f54f15e4f60abe0f283da084","modified":1709708923767},{"_id":"public/archives/2023/05/index.html","hash":"0e9588266668933b227df39a22c910bb4f1be848","modified":1709708923767},{"_id":"public/archives/2023/05/page/2/index.html","hash":"176bcf257056b8bd8b3eb22f689845f4690f6912","modified":1709708923767},{"_id":"public/archives/2023/05/page/3/index.html","hash":"09d93fb2651ef8209f5974ddfb064964d0a060cc","modified":1709708923767},{"_id":"public/archives/2023/05/page/4/index.html","hash":"b536e73e6f97bb21303efde3d4fd1efb78a76301","modified":1709708923767},{"_id":"public/archives/2023/05/page/5/index.html","hash":"1927e35cdd6f5029a40f3b2a73b203493d373f92","modified":1709708923767},{"_id":"public/archives/2024/index.html","hash":"15e776ee4fc6cfd13e3b4e3f75348c6da7a5175a","modified":1709708923767},{"_id":"public/archives/2024/03/index.html","hash":"fcf5112543209ce47efcd1384dd56127dd0a10ea","modified":1709708923767},{"_id":"public/2024/03/06/运维命令/index.html","hash":"56a9e7e2eff1c58f95d2b9168494c34ebd1a82b5","modified":1709708923767},{"_id":"public/2024/03/06/一些有用的工具/index.html","hash":"ae3c3dec76e44f0c54ffe353bfa4c55ad8f95d6c","modified":1709708923767},{"_id":"public/2023/05/26/第40期：Maven/index.html","hash":"ade76d67fc2d05c323a5fca86baac9bcdae21e30","modified":1709708923767},{"_id":"public/2023/05/25/第38期：linux日志切割/index.html","hash":"34a947e3dfaba374ccc8b0f8909832d8654d498a","modified":1709708923767},{"_id":"public/2023/05/25/第37期：操作系统-性能优化/index.html","hash":"3c9a363915adbde305170fef5cd9c26261f7ac86","modified":1709708923767},{"_id":"public/2023/05/22/第36期：Redis/index.html","hash":"3a2cf3bc92565ee32b87559f12ba48942011806e","modified":1709708923767},{"_id":"public/2023/05/22/第31期：Golang/index.html","hash":"056dc20280d6a901e6aee364a1387f558b20d35b","modified":1709708923767},{"_id":"public/2023/05/22/第30期：Python/index.html","hash":"7611ace254f7e98801eae8fde6219be81c275188","modified":1709708923767},{"_id":"public/2023/05/22/第29期：PHP-FPM/index.html","hash":"b92b8b8b577a466bc4414f7f7fa1e65ac80a4d92","modified":1709708923767},{"_id":"public/2023/05/22/第28期：网络/index.html","hash":"221ab26193971c8b42a72cfaa36a5b1862a7f6ad","modified":1709708923767},{"_id":"public/2023/05/22/第26期：ansible/index.html","hash":"5e49fe4342d421fbdd927cbf05d10f77e4b6dfdd","modified":1709708923767},{"_id":"public/2023/05/22/第24期：DOCKER/index.html","hash":"dbdae898ed9fbd0161091dfaa977950c36ce14b4","modified":1709708923767},{"_id":"public/2023/05/22/第20期：Jenkins/index.html","hash":"e75a318b3a116f915ca7c0614ec4cf338699fd31","modified":1709708923767},{"_id":"public/2023/05/22/第19期：Mysql/index.html","hash":"e56f93dd49c404616e61a57db25daef429ea2b77","modified":1709708923767},{"_id":"public/2023/05/22/第15期：LDAP/index.html","hash":"6f75502cec22c1926af878f76738718b9f200581","modified":1709708923767},{"_id":"public/2023/05/20/第八期：shell/index.html","hash":"36c70d235772fa54a643e2de32a51d7fb575b09e","modified":1709708923767},{"_id":"public/2023/05/20/第七期：dns/index.html","hash":"238c6887b3bb438bf89baa45698cf672ff40452c","modified":1709708923767},{"_id":"public/2023/05/20/第六期：Nginx/index.html","hash":"8d64c659c1ffa6d0ace0616f5f70cb1a251715fb","modified":1709708923767},{"_id":"public/index.html","hash":"1476f47bb90b94b57031f8dba4771b0136f41a89","modified":1709708923767},{"_id":"public/page/2/index.html","hash":"2c4a74240bd4f8973fbb985747831f322635b0d4","modified":1709708923767},{"_id":"public/page/3/index.html","hash":"b880d481646be4ebb1d075a12acb2df8eaad9c56","modified":1709708923767},{"_id":"public/page/4/index.html","hash":"96ecee2476fab1cae61c8d81b3ff8447207847d7","modified":1709708923767},{"_id":"public/page/5/index.html","hash":"88c3ece5eb7451fd581527e868efd616c3873c41","modified":1709708923767},{"_id":"public/css/iconfont/iconfont.eot","hash":"d79ff9e8325c9c0d2db4ee6dadd2f82799169783","modified":1709708923767},{"_id":"public/favicon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1709708923767},{"_id":"public/css/iconfont/iconfont.svg","hash":"f9d7bf99db7d73faf2fef3891537630ea4f998ae","modified":1709708923767},{"_id":"public/css/iconfont/iconfont.ttf","hash":"655ead66c5702e6e4a214c1473c78e450c49bfd7","modified":1709708923767},{"_id":"public/css/iconfont/iconfont.woff","hash":"29e34038a63a5a810f3af4a9c15dc1476d97fc93","modified":1709708923767},{"_id":"public/css/iconfont/iconfont.woff2","hash":"09f1ae7849a0649f0bb8f46e128c97fcb59e3a4c","modified":1709708923767},{"_id":"public/css/images/alipay-pay.jpg","hash":"c1cdd36471a1197e31ee6309e979d1fb63daeb25","modified":1709708923767},{"_id":"public/css/images/alipay.jpg","hash":"cfafbfa86d3223e5a7aa6025d4e78d26bdcf02af","modified":1709708923767},{"_id":"public/css/images/wechat-pay.jpg","hash":"35f0f9859918d7b67d0a3279b110550667d97e8c","modified":1709708923767},{"_id":"public/css/images/wechat.jpg","hash":"3a3f7518da72f35fbd8d0e3e3afa3018c4a434b2","modified":1709708923767},{"_id":"public/localshare/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1709708923767},{"_id":"public/localshare/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1709708923767},{"_id":"public/localshare/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1709708923767},{"_id":"public/localshare/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1709708923767},{"_id":"public/css/images/banner.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1709708923767},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1709708923767},{"_id":"public/giteement/gitee.oauthcallback.js","hash":"f24dc1fd8de0dc44b8d70df83f7c82fd2f3fc710","modified":1709708923767},{"_id":"public/js/script.js","hash":"b9441363ff8fe829d90295ea947960338a1a020a","modified":1709708923767},{"_id":"public/js/search.json.js","hash":"ec601a6db4c68a7d9c2d440951c6e26ebfbc1f3a","modified":1709708923767},{"_id":"public/localshare/css/share.css","hash":"34f53537ebcf2757b35a15a4a9473f2352486372","modified":1709708923767},{"_id":"public/localshare/js/social-share.js","hash":"9bfe34fe7691833e90815c5c862545bde581cf29","modified":1709708923767},{"_id":"public/css/style.css","hash":"630f6c6d9a995cc8fd64c967608ba1d715a841fd","modified":1709708923767},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1709708923767},{"_id":"public/giteement/giteement.css","hash":"887ad901816c2427b1715444f72ae94f6146e9f7","modified":1709708923767},{"_id":"public/giteement/giteement.min.js","hash":"922687138ef42d0c77ff6a1c6d3d85ab6c743466","modified":1709708923767},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1709708923767},{"_id":"public/localshare/js/qrcode.js","hash":"9caa0d9a9ba4409a3f77540a1b15a7617aeb28e8","modified":1709708923767},{"_id":"public/css/images/banner-dark.jpg","hash":"0d2c406f1a9b3b74d6defda398239b0113737787","modified":1709708923767}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"一些有用的工具","date":"2024-03-06T07:00:53.000Z","_content":"\n\n## 生成logo\nhttps://logomakerr.ai/\n\n## 工具列表\n```\n剪辑 工具使用讲解 知识课程讲解 影视讲解 更多项目 vpn/周刊/\n鼠标键盘显示：https://github.com/mulaRahul/keyviz\n自建手机照片和视频备份服务 https://github.com/immich-app/immich\n视频剪辑工具：https://github.com/mifi/lossless-cut\nB站视频下载工具：https://github.com/leiurayer/downkyi\n本地媒体资源库管理： https://github.com/jellyfin/jellyfin\nyoutube下载器：[YoutubeDownloader](https://github.com/Tyrrrz/YoutubeDownloader)\ngpt4模型体验，需要登陆：https://www.yeschat.ai/zh-CN\n跨平台文件传送软件，不需要互联网连接，依靠共享 Wifi 分享文件：https://localsend.org/#/\n私藏英语工具文章：https://sspai.com/post/80086\n免费gpt：https://chatgptdemo.info/chat/    https://promptboom.com/PowerChat/PowerChatTalk\n免费图片搜索引擎，现在还提供免费音乐和视频下载，可以用于商业用途，适合作为视频的背景音乐和素材：https://pixabay.com/\n图片和音频的搜索引擎,自由使用，不用付费：https://openverse.org/\n测速网站：https://test.ustc.edu.cn/\n剪辑视频，自动生成字幕：https://github.com/mli/autocut\n数据库教程：https://www.sjkjc.com/\nk8s博客：https://www.soulchild.cn/\n运维侃侃：https://www.yuque.com/sanye-ia8oj/hmoxce\ntcpdump：https://mp.weixin.qq.com/s/wqSh8H79wLH6vyDtgges1A\n分享了许多系统工具软件下载：https://sysin.org/\njenkins pipeline：https://zhangzhuo.ltd/articles/2022/06/04/1654333399919.html\n\n一个 Chrome 插件，可以将 YouTube 视频的英文语音，转成中文语音：https://www.youtube-dubbing.com/\n浏览器广告拦截：https://github.com/gorhill/uBlock\n生成excel公式：https://github.com/weijunext/smart-excel-ai\n生成节日祝福个性视频 https://shotstack.io/learn/how-to-build-1000-personalised-videos/\n提升照片分辨率 https://github.com/Djdefrag/QualityScaler\n图片搜索引擎https://openverse.org/\nai作图搜索https://lexica.art/\n课程教学 支持web和移动端在线练习 https://github.com/chenqiaorui/PlayEdu\n关于产品的思考 https://produck.zhubai.love/\n设计所有资源：https://github.com/bradtraversy/design-resources-for-developers\n翻墙工具：https://github.com/Dreamacro/clash\n实时换脸：https://github.com/iperov/DeepFaceLive\naws指导：https://github.com/open-guides/og-aws\nHtml 和 CSS 图文教程：https://internetingishard.netlify.app/html-and-css/\n临时邮件接收：https://email.ml/\n键盘打字记单词：https://github.com/RealKai42/qwerty-learner\n桌面视频播放器：https://github.com/Hunlongyu/ZY-Player\n免费的编程中文书籍索引：https://github.com/justjavac/free-programming-books-zh_CN\n提高英语技能：https://github.com/byoungd/English-level-up-tips\nKubernetes 中文指南：https://jimmysong.io/kubernetes-handbook/\nKubernetes：https://zhangzhuo.ltd/tags/kubernetes\n运维实践指南：https://billwang139967.gitbooks.io/op_practice_book/content/\n小程序资源汇总：https://github.com/justjavac/awesome-wechat-weapp\n外语视频转成中文视频：https://www.youtube-dubbing.com/（英文语音转成中文）\n免费的文生图网站：https://sdxlturbo.ai/\n英语音频转成文本的在线工具：https://huggingface.co/spaces/Xenova/whisper-web\n让 Mac 电脑具备 Windows 的 alt + tab 键的功能：https://github.com/lwouis/alt-tab-macos\n免费接码平台：https://iyideng.fun/welfare/best-domestic-platform-for-receiving-captcha-free-of-charge.html\nes同步工具：https://github.com/elasticsearch-dump/elasticsearch-dump\n完全基于本地构建的 GPT，可以将本地知识库作为问答的原料：https://github.com/PromtEngineer/localGPT\nopenldap 介绍和使用：https://outmanzzq.github.io/2020/05/12/openldap/\nsiteground: [wordpress-docker-compose](https://github.com/nezhar/wordpress-docker-compose/tree/master)\n[wordpress中文官网](https://cn.wordpress.org/)\n插件：\n- WP Statistics 统计访问量\n- WP-Optimize 提高网站性能\n- WP Super Cache 生成静态文件缓存\n- site kit 用于分析人们如何找到和使用您的站点\n- WooCommerce 电子商务插件\n```\n","source":"_posts/一些有用的工具.md","raw":"---\ntitle: 一些有用的工具\ndate: 2024-03-06 15:00:53\ntags:\n---\n\n\n## 生成logo\nhttps://logomakerr.ai/\n\n## 工具列表\n```\n剪辑 工具使用讲解 知识课程讲解 影视讲解 更多项目 vpn/周刊/\n鼠标键盘显示：https://github.com/mulaRahul/keyviz\n自建手机照片和视频备份服务 https://github.com/immich-app/immich\n视频剪辑工具：https://github.com/mifi/lossless-cut\nB站视频下载工具：https://github.com/leiurayer/downkyi\n本地媒体资源库管理： https://github.com/jellyfin/jellyfin\nyoutube下载器：[YoutubeDownloader](https://github.com/Tyrrrz/YoutubeDownloader)\ngpt4模型体验，需要登陆：https://www.yeschat.ai/zh-CN\n跨平台文件传送软件，不需要互联网连接，依靠共享 Wifi 分享文件：https://localsend.org/#/\n私藏英语工具文章：https://sspai.com/post/80086\n免费gpt：https://chatgptdemo.info/chat/    https://promptboom.com/PowerChat/PowerChatTalk\n免费图片搜索引擎，现在还提供免费音乐和视频下载，可以用于商业用途，适合作为视频的背景音乐和素材：https://pixabay.com/\n图片和音频的搜索引擎,自由使用，不用付费：https://openverse.org/\n测速网站：https://test.ustc.edu.cn/\n剪辑视频，自动生成字幕：https://github.com/mli/autocut\n数据库教程：https://www.sjkjc.com/\nk8s博客：https://www.soulchild.cn/\n运维侃侃：https://www.yuque.com/sanye-ia8oj/hmoxce\ntcpdump：https://mp.weixin.qq.com/s/wqSh8H79wLH6vyDtgges1A\n分享了许多系统工具软件下载：https://sysin.org/\njenkins pipeline：https://zhangzhuo.ltd/articles/2022/06/04/1654333399919.html\n\n一个 Chrome 插件，可以将 YouTube 视频的英文语音，转成中文语音：https://www.youtube-dubbing.com/\n浏览器广告拦截：https://github.com/gorhill/uBlock\n生成excel公式：https://github.com/weijunext/smart-excel-ai\n生成节日祝福个性视频 https://shotstack.io/learn/how-to-build-1000-personalised-videos/\n提升照片分辨率 https://github.com/Djdefrag/QualityScaler\n图片搜索引擎https://openverse.org/\nai作图搜索https://lexica.art/\n课程教学 支持web和移动端在线练习 https://github.com/chenqiaorui/PlayEdu\n关于产品的思考 https://produck.zhubai.love/\n设计所有资源：https://github.com/bradtraversy/design-resources-for-developers\n翻墙工具：https://github.com/Dreamacro/clash\n实时换脸：https://github.com/iperov/DeepFaceLive\naws指导：https://github.com/open-guides/og-aws\nHtml 和 CSS 图文教程：https://internetingishard.netlify.app/html-and-css/\n临时邮件接收：https://email.ml/\n键盘打字记单词：https://github.com/RealKai42/qwerty-learner\n桌面视频播放器：https://github.com/Hunlongyu/ZY-Player\n免费的编程中文书籍索引：https://github.com/justjavac/free-programming-books-zh_CN\n提高英语技能：https://github.com/byoungd/English-level-up-tips\nKubernetes 中文指南：https://jimmysong.io/kubernetes-handbook/\nKubernetes：https://zhangzhuo.ltd/tags/kubernetes\n运维实践指南：https://billwang139967.gitbooks.io/op_practice_book/content/\n小程序资源汇总：https://github.com/justjavac/awesome-wechat-weapp\n外语视频转成中文视频：https://www.youtube-dubbing.com/（英文语音转成中文）\n免费的文生图网站：https://sdxlturbo.ai/\n英语音频转成文本的在线工具：https://huggingface.co/spaces/Xenova/whisper-web\n让 Mac 电脑具备 Windows 的 alt + tab 键的功能：https://github.com/lwouis/alt-tab-macos\n免费接码平台：https://iyideng.fun/welfare/best-domestic-platform-for-receiving-captcha-free-of-charge.html\nes同步工具：https://github.com/elasticsearch-dump/elasticsearch-dump\n完全基于本地构建的 GPT，可以将本地知识库作为问答的原料：https://github.com/PromtEngineer/localGPT\nopenldap 介绍和使用：https://outmanzzq.github.io/2020/05/12/openldap/\nsiteground: [wordpress-docker-compose](https://github.com/nezhar/wordpress-docker-compose/tree/master)\n[wordpress中文官网](https://cn.wordpress.org/)\n插件：\n- WP Statistics 统计访问量\n- WP-Optimize 提高网站性能\n- WP Super Cache 生成静态文件缓存\n- site kit 用于分析人们如何找到和使用您的站点\n- WooCommerce 电子商务插件\n```\n","slug":"一些有用的工具","published":1,"updated":"2024-03-06T07:08:18.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt5y00009klnaxna5o6k","content":"<h2 id=\"生成logo\"><a href=\"#生成logo\" class=\"headerlink\" title=\"生成logo\"></a>生成logo</h2><p><a href=\"https://logomakerr.ai/\">https://logomakerr.ai/</a></p>\n<h2 id=\"工具列表\"><a href=\"#工具列表\" class=\"headerlink\" title=\"工具列表\"></a>工具列表</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">剪辑 工具使用讲解 知识课程讲解 影视讲解 更多项目 vpn/周刊/</span><br><span class=\"line\">鼠标键盘显示：https://github.com/mulaRahul/keyviz</span><br><span class=\"line\">自建手机照片和视频备份服务 https://github.com/immich-app/immich</span><br><span class=\"line\">视频剪辑工具：https://github.com/mifi/lossless-cut</span><br><span class=\"line\">B站视频下载工具：https://github.com/leiurayer/downkyi</span><br><span class=\"line\">本地媒体资源库管理： https://github.com/jellyfin/jellyfin</span><br><span class=\"line\">youtube下载器：[YoutubeDownloader](https://github.com/Tyrrrz/YoutubeDownloader)</span><br><span class=\"line\">gpt4模型体验，需要登陆：https://www.yeschat.ai/zh-CN</span><br><span class=\"line\">跨平台文件传送软件，不需要互联网连接，依靠共享 Wifi 分享文件：https://localsend.org/#/</span><br><span class=\"line\">私藏英语工具文章：https://sspai.com/post/80086</span><br><span class=\"line\">免费gpt：https://chatgptdemo.info/chat/    https://promptboom.com/PowerChat/PowerChatTalk</span><br><span class=\"line\">免费图片搜索引擎，现在还提供免费音乐和视频下载，可以用于商业用途，适合作为视频的背景音乐和素材：https://pixabay.com/</span><br><span class=\"line\">图片和音频的搜索引擎,自由使用，不用付费：https://openverse.org/</span><br><span class=\"line\">测速网站：https://test.ustc.edu.cn/</span><br><span class=\"line\">剪辑视频，自动生成字幕：https://github.com/mli/autocut</span><br><span class=\"line\">数据库教程：https://www.sjkjc.com/</span><br><span class=\"line\">k8s博客：https://www.soulchild.cn/</span><br><span class=\"line\">运维侃侃：https://www.yuque.com/sanye-ia8oj/hmoxce</span><br><span class=\"line\">tcpdump：https://mp.weixin.qq.com/s/wqSh8H79wLH6vyDtgges1A</span><br><span class=\"line\">分享了许多系统工具软件下载：https://sysin.org/</span><br><span class=\"line\">jenkins pipeline：https://zhangzhuo.ltd/articles/2022/06/04/1654333399919.html</span><br><span class=\"line\"></span><br><span class=\"line\">一个 Chrome 插件，可以将 YouTube 视频的英文语音，转成中文语音：https://www.youtube-dubbing.com/</span><br><span class=\"line\">浏览器广告拦截：https://github.com/gorhill/uBlock</span><br><span class=\"line\">生成excel公式：https://github.com/weijunext/smart-excel-ai</span><br><span class=\"line\">生成节日祝福个性视频 https://shotstack.io/learn/how-to-build-1000-personalised-videos/</span><br><span class=\"line\">提升照片分辨率 https://github.com/Djdefrag/QualityScaler</span><br><span class=\"line\">图片搜索引擎https://openverse.org/</span><br><span class=\"line\">ai作图搜索https://lexica.art/</span><br><span class=\"line\">课程教学 支持web和移动端在线练习 https://github.com/chenqiaorui/PlayEdu</span><br><span class=\"line\">关于产品的思考 https://produck.zhubai.love/</span><br><span class=\"line\">设计所有资源：https://github.com/bradtraversy/design-resources-for-developers</span><br><span class=\"line\">翻墙工具：https://github.com/Dreamacro/clash</span><br><span class=\"line\">实时换脸：https://github.com/iperov/DeepFaceLive</span><br><span class=\"line\">aws指导：https://github.com/open-guides/og-aws</span><br><span class=\"line\">Html 和 CSS 图文教程：https://internetingishard.netlify.app/html-and-css/</span><br><span class=\"line\">临时邮件接收：https://email.ml/</span><br><span class=\"line\">键盘打字记单词：https://github.com/RealKai42/qwerty-learner</span><br><span class=\"line\">桌面视频播放器：https://github.com/Hunlongyu/ZY-Player</span><br><span class=\"line\">免费的编程中文书籍索引：https://github.com/justjavac/free-programming-books-zh_CN</span><br><span class=\"line\">提高英语技能：https://github.com/byoungd/English-level-up-tips</span><br><span class=\"line\">Kubernetes 中文指南：https://jimmysong.io/kubernetes-handbook/</span><br><span class=\"line\">Kubernetes：https://zhangzhuo.ltd/tags/kubernetes</span><br><span class=\"line\">运维实践指南：https://billwang139967.gitbooks.io/op_practice_book/content/</span><br><span class=\"line\">小程序资源汇总：https://github.com/justjavac/awesome-wechat-weapp</span><br><span class=\"line\">外语视频转成中文视频：https://www.youtube-dubbing.com/（英文语音转成中文）</span><br><span class=\"line\">免费的文生图网站：https://sdxlturbo.ai/</span><br><span class=\"line\">英语音频转成文本的在线工具：https://huggingface.co/spaces/Xenova/whisper-web</span><br><span class=\"line\">让 Mac 电脑具备 Windows 的 alt + tab 键的功能：https://github.com/lwouis/alt-tab-macos</span><br><span class=\"line\">免费接码平台：https://iyideng.fun/welfare/best-domestic-platform-for-receiving-captcha-free-of-charge.html</span><br><span class=\"line\">es同步工具：https://github.com/elasticsearch-dump/elasticsearch-dump</span><br><span class=\"line\">完全基于本地构建的 GPT，可以将本地知识库作为问答的原料：https://github.com/PromtEngineer/localGPT</span><br><span class=\"line\">openldap 介绍和使用：https://outmanzzq.github.io/2020/05/12/openldap/</span><br><span class=\"line\">siteground: [wordpress-docker-compose](https://github.com/nezhar/wordpress-docker-compose/tree/master)</span><br><span class=\"line\">[wordpress中文官网](https://cn.wordpress.org/)</span><br><span class=\"line\">插件：</span><br><span class=\"line\">- WP Statistics 统计访问量</span><br><span class=\"line\">- WP-Optimize 提高网站性能</span><br><span class=\"line\">- WP Super Cache 生成静态文件缓存</span><br><span class=\"line\">- site kit 用于分析人们如何找到和使用您的站点</span><br><span class=\"line\">- WooCommerce 电子商务插件</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"生成logo\"><a href=\"#生成logo\" class=\"headerlink\" title=\"生成logo\"></a>生成logo</h2><p><a href=\"https://logomakerr.ai/\">https://logomakerr.ai/</a></p>\n<h2 id=\"工具列表\"><a href=\"#工具列表\" class=\"headerlink\" title=\"工具列表\"></a>工具列表</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">剪辑 工具使用讲解 知识课程讲解 影视讲解 更多项目 vpn/周刊/</span><br><span class=\"line\">鼠标键盘显示：https://github.com/mulaRahul/keyviz</span><br><span class=\"line\">自建手机照片和视频备份服务 https://github.com/immich-app/immich</span><br><span class=\"line\">视频剪辑工具：https://github.com/mifi/lossless-cut</span><br><span class=\"line\">B站视频下载工具：https://github.com/leiurayer/downkyi</span><br><span class=\"line\">本地媒体资源库管理： https://github.com/jellyfin/jellyfin</span><br><span class=\"line\">youtube下载器：[YoutubeDownloader](https://github.com/Tyrrrz/YoutubeDownloader)</span><br><span class=\"line\">gpt4模型体验，需要登陆：https://www.yeschat.ai/zh-CN</span><br><span class=\"line\">跨平台文件传送软件，不需要互联网连接，依靠共享 Wifi 分享文件：https://localsend.org/#/</span><br><span class=\"line\">私藏英语工具文章：https://sspai.com/post/80086</span><br><span class=\"line\">免费gpt：https://chatgptdemo.info/chat/    https://promptboom.com/PowerChat/PowerChatTalk</span><br><span class=\"line\">免费图片搜索引擎，现在还提供免费音乐和视频下载，可以用于商业用途，适合作为视频的背景音乐和素材：https://pixabay.com/</span><br><span class=\"line\">图片和音频的搜索引擎,自由使用，不用付费：https://openverse.org/</span><br><span class=\"line\">测速网站：https://test.ustc.edu.cn/</span><br><span class=\"line\">剪辑视频，自动生成字幕：https://github.com/mli/autocut</span><br><span class=\"line\">数据库教程：https://www.sjkjc.com/</span><br><span class=\"line\">k8s博客：https://www.soulchild.cn/</span><br><span class=\"line\">运维侃侃：https://www.yuque.com/sanye-ia8oj/hmoxce</span><br><span class=\"line\">tcpdump：https://mp.weixin.qq.com/s/wqSh8H79wLH6vyDtgges1A</span><br><span class=\"line\">分享了许多系统工具软件下载：https://sysin.org/</span><br><span class=\"line\">jenkins pipeline：https://zhangzhuo.ltd/articles/2022/06/04/1654333399919.html</span><br><span class=\"line\"></span><br><span class=\"line\">一个 Chrome 插件，可以将 YouTube 视频的英文语音，转成中文语音：https://www.youtube-dubbing.com/</span><br><span class=\"line\">浏览器广告拦截：https://github.com/gorhill/uBlock</span><br><span class=\"line\">生成excel公式：https://github.com/weijunext/smart-excel-ai</span><br><span class=\"line\">生成节日祝福个性视频 https://shotstack.io/learn/how-to-build-1000-personalised-videos/</span><br><span class=\"line\">提升照片分辨率 https://github.com/Djdefrag/QualityScaler</span><br><span class=\"line\">图片搜索引擎https://openverse.org/</span><br><span class=\"line\">ai作图搜索https://lexica.art/</span><br><span class=\"line\">课程教学 支持web和移动端在线练习 https://github.com/chenqiaorui/PlayEdu</span><br><span class=\"line\">关于产品的思考 https://produck.zhubai.love/</span><br><span class=\"line\">设计所有资源：https://github.com/bradtraversy/design-resources-for-developers</span><br><span class=\"line\">翻墙工具：https://github.com/Dreamacro/clash</span><br><span class=\"line\">实时换脸：https://github.com/iperov/DeepFaceLive</span><br><span class=\"line\">aws指导：https://github.com/open-guides/og-aws</span><br><span class=\"line\">Html 和 CSS 图文教程：https://internetingishard.netlify.app/html-and-css/</span><br><span class=\"line\">临时邮件接收：https://email.ml/</span><br><span class=\"line\">键盘打字记单词：https://github.com/RealKai42/qwerty-learner</span><br><span class=\"line\">桌面视频播放器：https://github.com/Hunlongyu/ZY-Player</span><br><span class=\"line\">免费的编程中文书籍索引：https://github.com/justjavac/free-programming-books-zh_CN</span><br><span class=\"line\">提高英语技能：https://github.com/byoungd/English-level-up-tips</span><br><span class=\"line\">Kubernetes 中文指南：https://jimmysong.io/kubernetes-handbook/</span><br><span class=\"line\">Kubernetes：https://zhangzhuo.ltd/tags/kubernetes</span><br><span class=\"line\">运维实践指南：https://billwang139967.gitbooks.io/op_practice_book/content/</span><br><span class=\"line\">小程序资源汇总：https://github.com/justjavac/awesome-wechat-weapp</span><br><span class=\"line\">外语视频转成中文视频：https://www.youtube-dubbing.com/（英文语音转成中文）</span><br><span class=\"line\">免费的文生图网站：https://sdxlturbo.ai/</span><br><span class=\"line\">英语音频转成文本的在线工具：https://huggingface.co/spaces/Xenova/whisper-web</span><br><span class=\"line\">让 Mac 电脑具备 Windows 的 alt + tab 键的功能：https://github.com/lwouis/alt-tab-macos</span><br><span class=\"line\">免费接码平台：https://iyideng.fun/welfare/best-domestic-platform-for-receiving-captcha-free-of-charge.html</span><br><span class=\"line\">es同步工具：https://github.com/elasticsearch-dump/elasticsearch-dump</span><br><span class=\"line\">完全基于本地构建的 GPT，可以将本地知识库作为问答的原料：https://github.com/PromtEngineer/localGPT</span><br><span class=\"line\">openldap 介绍和使用：https://outmanzzq.github.io/2020/05/12/openldap/</span><br><span class=\"line\">siteground: [wordpress-docker-compose](https://github.com/nezhar/wordpress-docker-compose/tree/master)</span><br><span class=\"line\">[wordpress中文官网](https://cn.wordpress.org/)</span><br><span class=\"line\">插件：</span><br><span class=\"line\">- WP Statistics 统计访问量</span><br><span class=\"line\">- WP-Optimize 提高网站性能</span><br><span class=\"line\">- WP Super Cache 生成静态文件缓存</span><br><span class=\"line\">- site kit 用于分析人们如何找到和使用您的站点</span><br><span class=\"line\">- WooCommerce 电子商务插件</span><br></pre></td></tr></table></figure>\n"},{"title":"第11期：Tcpdump","date":"2023-05-20T16:40:50.000Z","_content":"### 常用命令\n```\n# tcpdump 抓指定post请求并存放到文件\nnohup tcpdump -s 0 -A -vv 'tcp[((tcp[12:1] & 0xf0) >> 2):4] = 0x504f5354' | grep -C 100 \"/api/screenshot\" >> file.log &\n```\n\n### TCP\n```\n三次握手：\n1.张三发送一个数据包，设置SYN=1，表明想要建立连接，设置seq=x来注释第一个字节包编号；\n2.李四收到了，发送一个数据包，设置ACK=1，表明他收到了数据包，设置ack=x+1，期待收到下一个数据包；同时，他想要建立通信连接，设置seq=y；\n3.张三设置ack=y+1给李四，表明自己收到了李四的包。\n```\n#### wireshark过滤规则\n```\nip.src == 192.168.1.189 # 根据源ip匹配\nip.dst == 192.168.1.189 # 根据目的ip匹配\nip.addr == 192.168.1.189 # 根据源或目的ip匹配\n\nhttp # 根据协议匹配\n\ntcp.port == 80 # 根据端口匹配\n\nhttp.response.code==200 # 根据状态码匹配\n\nhttp.request==1 # 匹配所有请求包\n\nhttp.response==1 # 匹配所有相应包\nhttp.request.method==GET # 匹配GET请求\n```\n#### tcpdump抓包分析https\n案例设计：\n```\n在centos7机器上，执行`tcpdump -i any -vvv tcp -w /tmp/json.pcap`监听tcp请求;\n\ncentos7新起一个窗口，执行`curl https://json.im/`\n\n切换回tcpdump的窗口，`ctrl + c` 停止监听。\n\n执行`tcpdump -r /tmp/json.pcap`查看pcap包 或者使用`wireshark`查看。\n```\n说明：\n- `tcpdump -i any -vvv tcp -w /tmp/json.pcap` 中 `-i any`监听所有网口；`-vvv`获取更多详细信息；`tcp`抓取tcp请求。\n\n- 由于抓取的是https协议，报文数据全是被加密的。\n","source":"_posts/第11期：Tcpdump.md","raw":"---\ntitle: 第11期：Tcpdump\ndate: 2023-05-21 00:40:50\ntags:\n---\n### 常用命令\n```\n# tcpdump 抓指定post请求并存放到文件\nnohup tcpdump -s 0 -A -vv 'tcp[((tcp[12:1] & 0xf0) >> 2):4] = 0x504f5354' | grep -C 100 \"/api/screenshot\" >> file.log &\n```\n\n### TCP\n```\n三次握手：\n1.张三发送一个数据包，设置SYN=1，表明想要建立连接，设置seq=x来注释第一个字节包编号；\n2.李四收到了，发送一个数据包，设置ACK=1，表明他收到了数据包，设置ack=x+1，期待收到下一个数据包；同时，他想要建立通信连接，设置seq=y；\n3.张三设置ack=y+1给李四，表明自己收到了李四的包。\n```\n#### wireshark过滤规则\n```\nip.src == 192.168.1.189 # 根据源ip匹配\nip.dst == 192.168.1.189 # 根据目的ip匹配\nip.addr == 192.168.1.189 # 根据源或目的ip匹配\n\nhttp # 根据协议匹配\n\ntcp.port == 80 # 根据端口匹配\n\nhttp.response.code==200 # 根据状态码匹配\n\nhttp.request==1 # 匹配所有请求包\n\nhttp.response==1 # 匹配所有相应包\nhttp.request.method==GET # 匹配GET请求\n```\n#### tcpdump抓包分析https\n案例设计：\n```\n在centos7机器上，执行`tcpdump -i any -vvv tcp -w /tmp/json.pcap`监听tcp请求;\n\ncentos7新起一个窗口，执行`curl https://json.im/`\n\n切换回tcpdump的窗口，`ctrl + c` 停止监听。\n\n执行`tcpdump -r /tmp/json.pcap`查看pcap包 或者使用`wireshark`查看。\n```\n说明：\n- `tcpdump -i any -vvv tcp -w /tmp/json.pcap` 中 `-i any`监听所有网口；`-vvv`获取更多详细信息；`tcp`抓取tcp请求。\n\n- 由于抓取的是https协议，报文数据全是被加密的。\n","slug":"第11期：Tcpdump","published":1,"updated":"2024-03-06T06:55:18.347Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt6600019klndnbpbjbg","content":"<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># tcpdump 抓指定post请求并存放到文件</span><br><span class=\"line\">nohup tcpdump -s 0 -A -vv &#x27;tcp[((tcp[12:1] &amp; 0xf0) &gt;&gt; 2):4] = 0x504f5354&#x27; | grep -C 100 &quot;/api/screenshot&quot; &gt;&gt; file.log &amp;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">三次握手：</span><br><span class=\"line\">1.张三发送一个数据包，设置SYN=1，表明想要建立连接，设置seq=x来注释第一个字节包编号；</span><br><span class=\"line\">2.李四收到了，发送一个数据包，设置ACK=1，表明他收到了数据包，设置ack=x+1，期待收到下一个数据包；同时，他想要建立通信连接，设置seq=y；</span><br><span class=\"line\">3.张三设置ack=y+1给李四，表明自己收到了李四的包。</span><br></pre></td></tr></table></figure>\n<h4 id=\"wireshark过滤规则\"><a href=\"#wireshark过滤规则\" class=\"headerlink\" title=\"wireshark过滤规则\"></a>wireshark过滤规则</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip.src == 192.168.1.189 # 根据源ip匹配</span><br><span class=\"line\">ip.dst == 192.168.1.189 # 根据目的ip匹配</span><br><span class=\"line\">ip.addr == 192.168.1.189 # 根据源或目的ip匹配</span><br><span class=\"line\"></span><br><span class=\"line\">http # 根据协议匹配</span><br><span class=\"line\"></span><br><span class=\"line\">tcp.port == 80 # 根据端口匹配</span><br><span class=\"line\"></span><br><span class=\"line\">http.response.code==200 # 根据状态码匹配</span><br><span class=\"line\"></span><br><span class=\"line\">http.request==1 # 匹配所有请求包</span><br><span class=\"line\"></span><br><span class=\"line\">http.response==1 # 匹配所有相应包</span><br><span class=\"line\">http.request.method==GET # 匹配GET请求</span><br></pre></td></tr></table></figure>\n<h4 id=\"tcpdump抓包分析https\"><a href=\"#tcpdump抓包分析https\" class=\"headerlink\" title=\"tcpdump抓包分析https\"></a>tcpdump抓包分析https</h4><p>案例设计：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在centos7机器上，执行`tcpdump -i any -vvv tcp -w /tmp/json.pcap`监听tcp请求;</span><br><span class=\"line\"></span><br><span class=\"line\">centos7新起一个窗口，执行`curl https://json.im/`</span><br><span class=\"line\"></span><br><span class=\"line\">切换回tcpdump的窗口，`ctrl + c` 停止监听。</span><br><span class=\"line\"></span><br><span class=\"line\">执行`tcpdump -r /tmp/json.pcap`查看pcap包 或者使用`wireshark`查看。</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><p><code>tcpdump -i any -vvv tcp -w /tmp/json.pcap</code> 中 <code>-i any</code>监听所有网口；<code>-vvv</code>获取更多详细信息；<code>tcp</code>抓取tcp请求。</p>\n</li>\n<li><p>由于抓取的是https协议，报文数据全是被加密的。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># tcpdump 抓指定post请求并存放到文件</span><br><span class=\"line\">nohup tcpdump -s 0 -A -vv &#x27;tcp[((tcp[12:1] &amp; 0xf0) &gt;&gt; 2):4] = 0x504f5354&#x27; | grep -C 100 &quot;/api/screenshot&quot; &gt;&gt; file.log &amp;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">三次握手：</span><br><span class=\"line\">1.张三发送一个数据包，设置SYN=1，表明想要建立连接，设置seq=x来注释第一个字节包编号；</span><br><span class=\"line\">2.李四收到了，发送一个数据包，设置ACK=1，表明他收到了数据包，设置ack=x+1，期待收到下一个数据包；同时，他想要建立通信连接，设置seq=y；</span><br><span class=\"line\">3.张三设置ack=y+1给李四，表明自己收到了李四的包。</span><br></pre></td></tr></table></figure>\n<h4 id=\"wireshark过滤规则\"><a href=\"#wireshark过滤规则\" class=\"headerlink\" title=\"wireshark过滤规则\"></a>wireshark过滤规则</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip.src == 192.168.1.189 # 根据源ip匹配</span><br><span class=\"line\">ip.dst == 192.168.1.189 # 根据目的ip匹配</span><br><span class=\"line\">ip.addr == 192.168.1.189 # 根据源或目的ip匹配</span><br><span class=\"line\"></span><br><span class=\"line\">http # 根据协议匹配</span><br><span class=\"line\"></span><br><span class=\"line\">tcp.port == 80 # 根据端口匹配</span><br><span class=\"line\"></span><br><span class=\"line\">http.response.code==200 # 根据状态码匹配</span><br><span class=\"line\"></span><br><span class=\"line\">http.request==1 # 匹配所有请求包</span><br><span class=\"line\"></span><br><span class=\"line\">http.response==1 # 匹配所有相应包</span><br><span class=\"line\">http.request.method==GET # 匹配GET请求</span><br></pre></td></tr></table></figure>\n<h4 id=\"tcpdump抓包分析https\"><a href=\"#tcpdump抓包分析https\" class=\"headerlink\" title=\"tcpdump抓包分析https\"></a>tcpdump抓包分析https</h4><p>案例设计：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在centos7机器上，执行`tcpdump -i any -vvv tcp -w /tmp/json.pcap`监听tcp请求;</span><br><span class=\"line\"></span><br><span class=\"line\">centos7新起一个窗口，执行`curl https://json.im/`</span><br><span class=\"line\"></span><br><span class=\"line\">切换回tcpdump的窗口，`ctrl + c` 停止监听。</span><br><span class=\"line\"></span><br><span class=\"line\">执行`tcpdump -r /tmp/json.pcap`查看pcap包 或者使用`wireshark`查看。</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><p><code>tcpdump -i any -vvv tcp -w /tmp/json.pcap</code> 中 <code>-i any</code>监听所有网口；<code>-vvv</code>获取更多详细信息；<code>tcp</code>抓取tcp请求。</p>\n</li>\n<li><p>由于抓取的是https协议，报文数据全是被加密的。</p>\n</li>\n</ul>\n"},{"title":"第12期：curl","date":"2023-05-21T01:10:59.000Z","_content":"### 常用命令\n```\n# 携带refer\ncurl -so /dev/null -v 'https://example.com/web/home/feature_3_bg.png' -H 'referer: http://servicewechat.com/'\n```\n","source":"_posts/第12期：curl.md","raw":"---\ntitle: 第12期：curl\ndate: 2023-05-21 09:10:59\ntags:\n---\n### 常用命令\n```\n# 携带refer\ncurl -so /dev/null -v 'https://example.com/web/home/feature_3_bg.png' -H 'referer: http://servicewechat.com/'\n```\n","slug":"第12期：curl","published":1,"updated":"2024-03-06T06:55:18.347Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt6a00029kln15a3gn8o","content":"<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 携带refer</span><br><span class=\"line\">curl -so /dev/null -v &#x27;https://example.com/web/home/feature_3_bg.png&#x27; -H &#x27;referer: http://servicewechat.com/&#x27;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 携带refer</span><br><span class=\"line\">curl -so /dev/null -v &#x27;https://example.com/web/home/feature_3_bg.png&#x27; -H &#x27;referer: http://servicewechat.com/&#x27;</span><br></pre></td></tr></table></figure>\n"},{"title":"第13期：cron","date":"2023-05-21T07:55:49.000Z","_content":"### 常用示例\ncrontab -e 打开配置文件\n-l # 显示当前用户的定时任务内容\n-r # 删除用户/var/spool/cron/ 定时任务\n```\n*/1 * * * * /usr/sbin/chroot --userspec=nobody.nobody / sh -c \"echo 'nobody' > /tmp/nobody.log \"\n```\n\n### cron表达式验证\n```\nhttps://www.iamwawa.cn/crontab.html\n```","source":"_posts/第13期：cron.md","raw":"---\ntitle: 第13期：cron\ndate: 2023-05-21 15:55:49\ntags:\n---\n### 常用示例\ncrontab -e 打开配置文件\n-l # 显示当前用户的定时任务内容\n-r # 删除用户/var/spool/cron/ 定时任务\n```\n*/1 * * * * /usr/sbin/chroot --userspec=nobody.nobody / sh -c \"echo 'nobody' > /tmp/nobody.log \"\n```\n\n### cron表达式验证\n```\nhttps://www.iamwawa.cn/crontab.html\n```","slug":"第13期：cron","published":1,"updated":"2024-03-06T06:55:18.348Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt6b00039klnfqif3g0d","content":"<h3 id=\"常用示例\"><a href=\"#常用示例\" class=\"headerlink\" title=\"常用示例\"></a>常用示例</h3><p>crontab -e 打开配置文件<br>-l # 显示当前用户的定时任务内容<br>-r # 删除用户&#x2F;var&#x2F;spool&#x2F;cron&#x2F; 定时任务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*/1 * * * * /usr/sbin/chroot --userspec=nobody.nobody / sh -c &quot;echo &#x27;nobody&#x27; &gt; /tmp/nobody.log &quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"cron表达式验证\"><a href=\"#cron表达式验证\" class=\"headerlink\" title=\"cron表达式验证\"></a>cron表达式验证</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.iamwawa.cn/crontab.html</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"常用示例\"><a href=\"#常用示例\" class=\"headerlink\" title=\"常用示例\"></a>常用示例</h3><p>crontab -e 打开配置文件<br>-l # 显示当前用户的定时任务内容<br>-r # 删除用户&#x2F;var&#x2F;spool&#x2F;cron&#x2F; 定时任务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*/1 * * * * /usr/sbin/chroot --userspec=nobody.nobody / sh -c &quot;echo &#x27;nobody&#x27; &gt; /tmp/nobody.log &quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"cron表达式验证\"><a href=\"#cron表达式验证\" class=\"headerlink\" title=\"cron表达式验证\"></a>cron表达式验证</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.iamwawa.cn/crontab.html</span><br></pre></td></tr></table></figure>"},{"title":"第14期：linux-jq","date":"2023-05-22T02:07:10.000Z","_content":"#### jq简介\njq，用来处理json数据的工具。\n\n#### jq安装使用\ncentos安装\n```\nyum install -y jq\n```\n\n使用\n```\n# 获取一个键的值\necho '{\"name\":\"ricky\", \"age\":18}' |jq '.name'\n\n# 获取数组数据\necho '[{\"name\": \"flolunsa\", \"age\": 12}, {\"name\": \"ricky\", \"age\": 27}]' | jq .[0]\necho '[{\"name\":\"JSON\", \"good\":true}, {\"name\":\"XML\", \"good\":false1}]' | jq '.[1]' # false不能写成false1\n\n# 同时获取多个key的值\necho '{\"name\":\"ricky\", \"age\":18}' |jq '.name, .age'\n```\n\n#### 定义一个json\n```\n# 错误例子: 使用单引号\n{\n \"url\": 'https://www.examples.com'\n}\n\n# 错误使用非十进制数据，json只能使用十进制 \n{\n  \"foo\": 0x123\n}\n\n# 正确例子\n# 定义对象\n{  \n  \"bar\": \"nisha\",\n  composition: {\n    \"a\": 1,\n    \"name\": \"ricky\"\n  }  \n}\n\n```\n参考：https://stedolan.github.io/jq/tutorial/\n","source":"_posts/第14期：linux-jq.md","raw":"---\ntitle: 第14期：linux-jq\ndate: 2023-05-22 10:07:10\ntags:\n---\n#### jq简介\njq，用来处理json数据的工具。\n\n#### jq安装使用\ncentos安装\n```\nyum install -y jq\n```\n\n使用\n```\n# 获取一个键的值\necho '{\"name\":\"ricky\", \"age\":18}' |jq '.name'\n\n# 获取数组数据\necho '[{\"name\": \"flolunsa\", \"age\": 12}, {\"name\": \"ricky\", \"age\": 27}]' | jq .[0]\necho '[{\"name\":\"JSON\", \"good\":true}, {\"name\":\"XML\", \"good\":false1}]' | jq '.[1]' # false不能写成false1\n\n# 同时获取多个key的值\necho '{\"name\":\"ricky\", \"age\":18}' |jq '.name, .age'\n```\n\n#### 定义一个json\n```\n# 错误例子: 使用单引号\n{\n \"url\": 'https://www.examples.com'\n}\n\n# 错误使用非十进制数据，json只能使用十进制 \n{\n  \"foo\": 0x123\n}\n\n# 正确例子\n# 定义对象\n{  \n  \"bar\": \"nisha\",\n  composition: {\n    \"a\": 1,\n    \"name\": \"ricky\"\n  }  \n}\n\n```\n参考：https://stedolan.github.io/jq/tutorial/\n","slug":"第14期：linux-jq","published":1,"updated":"2024-03-06T06:55:18.350Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt6d00049klnf2hu3sfj","content":"<h4 id=\"jq简介\"><a href=\"#jq简介\" class=\"headerlink\" title=\"jq简介\"></a>jq简介</h4><p>jq，用来处理json数据的工具。</p>\n<h4 id=\"jq安装使用\"><a href=\"#jq安装使用\" class=\"headerlink\" title=\"jq安装使用\"></a>jq安装使用</h4><p>centos安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y jq</span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 获取一个键的值</span><br><span class=\"line\">echo &#x27;&#123;&quot;name&quot;:&quot;ricky&quot;, &quot;age&quot;:18&#125;&#x27; |jq &#x27;.name&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\"># 获取数组数据</span><br><span class=\"line\">echo &#x27;[&#123;&quot;name&quot;: &quot;flolunsa&quot;, &quot;age&quot;: 12&#125;, &#123;&quot;name&quot;: &quot;ricky&quot;, &quot;age&quot;: 27&#125;]&#x27; | jq .[0]</span><br><span class=\"line\">echo &#x27;[&#123;&quot;name&quot;:&quot;JSON&quot;, &quot;good&quot;:true&#125;, &#123;&quot;name&quot;:&quot;XML&quot;, &quot;good&quot;:false1&#125;]&#x27; | jq &#x27;.[1]&#x27; # false不能写成false1</span><br><span class=\"line\"></span><br><span class=\"line\"># 同时获取多个key的值</span><br><span class=\"line\">echo &#x27;&#123;&quot;name&quot;:&quot;ricky&quot;, &quot;age&quot;:18&#125;&#x27; |jq &#x27;.name, .age&#x27;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"定义一个json\"><a href=\"#定义一个json\" class=\"headerlink\" title=\"定义一个json\"></a>定义一个json</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 错误例子: 使用单引号</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> &quot;url&quot;: &#x27;https://www.examples.com&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 错误使用非十进制数据，json只能使用十进制 </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;foo&quot;: 0x123</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 正确例子</span><br><span class=\"line\"># 定义对象</span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">  &quot;bar&quot;: &quot;nisha&quot;,</span><br><span class=\"line\">  composition: &#123;</span><br><span class=\"line\">    &quot;a&quot;: 1,</span><br><span class=\"line\">    &quot;name&quot;: &quot;ricky&quot;</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://stedolan.github.io/jq/tutorial/\">https://stedolan.github.io/jq/tutorial/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"jq简介\"><a href=\"#jq简介\" class=\"headerlink\" title=\"jq简介\"></a>jq简介</h4><p>jq，用来处理json数据的工具。</p>\n<h4 id=\"jq安装使用\"><a href=\"#jq安装使用\" class=\"headerlink\" title=\"jq安装使用\"></a>jq安装使用</h4><p>centos安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y jq</span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 获取一个键的值</span><br><span class=\"line\">echo &#x27;&#123;&quot;name&quot;:&quot;ricky&quot;, &quot;age&quot;:18&#125;&#x27; |jq &#x27;.name&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\"># 获取数组数据</span><br><span class=\"line\">echo &#x27;[&#123;&quot;name&quot;: &quot;flolunsa&quot;, &quot;age&quot;: 12&#125;, &#123;&quot;name&quot;: &quot;ricky&quot;, &quot;age&quot;: 27&#125;]&#x27; | jq .[0]</span><br><span class=\"line\">echo &#x27;[&#123;&quot;name&quot;:&quot;JSON&quot;, &quot;good&quot;:true&#125;, &#123;&quot;name&quot;:&quot;XML&quot;, &quot;good&quot;:false1&#125;]&#x27; | jq &#x27;.[1]&#x27; # false不能写成false1</span><br><span class=\"line\"></span><br><span class=\"line\"># 同时获取多个key的值</span><br><span class=\"line\">echo &#x27;&#123;&quot;name&quot;:&quot;ricky&quot;, &quot;age&quot;:18&#125;&#x27; |jq &#x27;.name, .age&#x27;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"定义一个json\"><a href=\"#定义一个json\" class=\"headerlink\" title=\"定义一个json\"></a>定义一个json</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 错误例子: 使用单引号</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> &quot;url&quot;: &#x27;https://www.examples.com&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 错误使用非十进制数据，json只能使用十进制 </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;foo&quot;: 0x123</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 正确例子</span><br><span class=\"line\"># 定义对象</span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">  &quot;bar&quot;: &quot;nisha&quot;,</span><br><span class=\"line\">  composition: &#123;</span><br><span class=\"line\">    &quot;a&quot;: 1,</span><br><span class=\"line\">    &quot;name&quot;: &quot;ricky&quot;</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://stedolan.github.io/jq/tutorial/\">https://stedolan.github.io/jq/tutorial/</a></p>\n"},{"title":"第15期：LDAP","date":"2023-05-22T02:11:20.000Z","_content":"#### LDAP简介\nLDAP(Lightweight Directory Access Protocol)轻量级目录访问协议，用于用户管理的统一认证服务。\n\n解决的痛点：比如说公司有多个系统有不同套用户密码，但接入开源的openldap之后，就可以共享同一套认证密码。\n#### LDAP原理\n目录是一个搜索查询、树结构数据库，ldap是一套由目录加协议组成的认证系统。\n\n目录树组成成分：\n- `dn` -- Distinguished Name 一条记录的具体位置，如dn:\"uid=er.xiong,ou=OA,dc=xiongchumo,dc=com\"表示熊出没公司OA组的熊二\n- `dc` -- Domain component 域名部分，一条记录可包含多个dc\n- `ou` -- Organization Unit 组织单元，一条记录所属组织 \n- `uid` -- user id 用户id\n- `sn` -- Surname 姓，如“许”\n- `cn` -- Common Name，公共名称，一条记录的名称\n- `rdn` -- 相对辨别名，类似于文件系统中的相对路径，它是与目录树结构无关的部分，如“uid=tom”或“cn= Thomas Johansson”\n\n#### openldap安装使用\nldap只是一套协议，openldap是基于这套协议的实现。\n\n安装机器：centos7\n\nyum安装openldap\n```\nyum -y install openldap compat-openldap openldap-clients openldap-servers openldap-devel\n```\n说明：\n- openldap 它是openldap客户端和服务端的公共库\n- compat-openldap openldap兼容性库\n- openldap-clients 启动服务和设置\n- openldap-servers 启动服务和设置\n- openldap-devel 工具包，可选择安装\n- openldap-servers-sql 支持sql模块，可选择安装\n- migrationtools 通过migrationtools实现OpenLDAP用户及用户组的添加，导入系统账户，可进行选择性安装\n\n相关目录\n```\n/etc/openldap/slapd.d/ # 存放配置文件\n```\n\n服务管理命令\n```\nservice slapd start # 启动openldap服务\nslapd -VV # 查看版本\n```\n#### 示例说明：添加管理员密码\n生成管理员密码\n```\nslappasswd -s 123456 # {SSHA}XoEOHoalUAXb7dNiirKs7yFl/1/N/QYF\n```\n\n创建目录并添加修改管理员密码的ldif文件\n```\nmkdir /opt/ldap-workspace\ntouch changepwd.ldif\n\n# 文件内容如下：\ndn: olcDatabase={0}config,cn=config\nchangetype: modify\nadd: olcRootPW\nolcRootPW: {SSHA}XoEOHoalUAXb7dNiirKs7yFl/1/N/QYF\n```\n说明：\n- 第一行表将要变更配置的文件：/etc/openldap/slapd.d/cn=config/olcDatabase={0}config.ldif\n- 第二行表修改类型\n- 第三行表要添加的配置项是olcRootPW\n- 第四行是加配置项值\n\n执行changepwd文件\n```\nldapadd -Y EXTERNAL -H ldapi:/// -f changepwd.ldif\n```\n\n结果\n```\ncat /etc/openldap/slapd.d/cn\\=config/olcDatabase\\=\\{0\\}config.ldif，新增了一个olcRootPW项\n```\n参考：https://www.cnblogs.com/swordfall/p/12119010.html\n\nhttps://www.cnblogs.com/wilburxu/p/9174353.html\n\nhttps://www.jianshu.com/p/7e4d99f6baaf\n\n\n#### 部署生产环境可用的openldap\n```\n# 安装启动\nyum install -y openldap-clients openldap-servers\n\ncp /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG\n\nchown ldap:ldap /var/lib/ldap/DB_CONFIG\n\nsystemctl start slapd\n\nsystemctl enable slapd\n\n# 导入预设模式\nfind /etc/openldap/schema/ -name \"*.ldif\" -exec ldapadd -Y EXTERNAL -H ldapi:/// -D \"cn=config\" -f {} \\; \n\n# 设置管理用户root密码：\n```\nslappasswd -s 123456 # 生成加密密码\n\nchrootpwd.ldif # -H 指定ldap服务器地址；\n```\n\n# 设置域名cn=admin,dc=emog,dc=com对olcDatabase={1}monitor等文件有存取权限\n\nmkdir -p /etc/openldap/init_ldif # init_ldif当作工作区目录\ncd /etc/openldap/init_ldif\n\nldapmodify -Y EXTERNAL -H ldapi:/// -f chdomain.ldif # chdomain.ldif文件在后面的说明处。\n\n# 创建emog根域名，并在其下设置admin用户管理整个根组织，再创建两个组织：Group和People。\n\nldapadd -x -D cn=admin,dc=emog,dc=com -W -f addOrg.ldif\n\n# UI连接管理 LdapAdmin: http://www.ldapadmin.org/download/ldapadmin.html\nHost: 192.168.1.146  Port: 389  Version: 3\nBase: dc=emog,dc=com\nUsername: cn=admin,dc=emog,dc=com\nPassword: 123456\n\n# 新建用户\n右击 ou=People 目录新建用户\n仅配置sn: chenxiaoming,\ncn: chenxiaoming,\nhomeDirectory为 /\n\n# 新建Group\n右击 ou=Group 目录新建Organizational Unit类型，名为Jenkins，再在Jenkins下新建group类型，名为jenkins-users，这时候有一个属性`member`可配置为`\tcn=lisi,ou=People,dc=emog,dc=com`，代表lisi这个人归属于Jenkins-users这个group下面。\n\n# 至此，配置完成了。\n```\n说明：\n- chrootpwd.ldif文件内容：\n```\ndn: olcDatabase={2}hdb,cn=config\nchangetype: modify\nreplace: olcRootPW\nolcRootPW: {SSHA}mMZx/2fkVQDpjnQELwYlILXVW/ybXnMy\n```\n\n- chdomain.ldif文件内容：\n```\ndn: olcDatabase={1}monitor,cn=config\nchangetype: modify\nreplace: olcAccess\nolcAccess: {0}to * by dn.base=\"gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth\"  read by dn.base=\"cn=admin,dc=emog,dc=com\" read by * none\n\ndn: olcDatabase={2}hdb,cn=config\nchangetype: modify\nreplace: olcSuffix\nolcSuffix: dc=emog,dc=com\n\ndn: olcDatabase={2}hdb,cn=config\nchangetype: modify\nreplace: olcRootDN\nolcRootDN: cn=admin,dc=emog,dc=com\n\ndn: olcDatabase={2}hdb,cn=config\nchangetype: modify\nadd: olcAccess\nolcAccess: {0}to attrs=userPassword,shadowLastChange by dn=\"cn=admin,dc=emog,dc=com\" write by anonymous auth by self write by * none\nolcAccess: {1}to dn.base=\"\" by * read\nolcAccess: {2}to * by dn=\"cn=admin,dc=emog,dc=com\" write by * read\n\n```\n- add-org.ldif文件内容：\n```\ndn: dc=emog,dc=com\ndc: emog\nobjectClass: top\nobjectClass: domain\no: emog\n\ndn: cn=admin,dc=emog,dc=com\nobjectClass: organizationalRole\ncn: admin\ndescription: LDAP admin\n\ndn: ou=Group,dc=emog,dc=com\nou: Group\nobjectClass: organizationalUnit\n\ndn: ou=People,dc=emog,dc=com\nou: People\nobjectClass: organizationalUnit\n```\n\n#### gitea接入openldap\n前提：\ngitea和openldap部署好了。\n\n[gitea安装](../Git/gitea.md)\n\n接入步骤\n1. 浏览器登入gitea，点击右侧的个人头像-管理后台-认证源-添加认证源\n2. 认证类型(LDAP (via BindDN))-认证名称(allsd11-openldap)-安全协议(Unencrypted)-主机(192.168.31.87)-端口(389)-用户搜索基准(ou=People,dc=emog,dc=com)-用户过滤规则((&(objectclass=top)(cn=%s)))-勾选 从Bind DN中拉去属性信息，该认证源已经启用。\n\n说明：\n- 因为没有用TLS证书，所以选Unencrypted\n- 其他选项默认不动即可\n\n#### jenkins接入openldap\n\n1. 登录jenkins-系统管理-全局安全配置-安全域(LDAP)\n2. 开始配置LDAP：Server(192.168.31.87:389)-roo DN(dc=emog,dc=com)-勾选Allow blank rootDN-User search base(ou=People)-User search filter(cn={0})-Group search base(ou=Jenkins,ou=Group)-点选Search for LDAP groups containing user-Manager DN(cn=admin,dc=emog,dc=com)-Manager Password\n(123456)-保存\n\n说明：\n- `root DN`的设置是会后面的`User search base`和`Group search base`服务的，如`User search base`设置成ou=People，认证的时候就会到`ou=People,dc=emog,dc=com`下面查找用户。\n- 其他选项没有提及的就保持不动。\n\n3. 配置完成后，点击`保存`退出。点击`全局安全配置`进入，可以点击`Testing LDAP settings`测试。接着往下，看到`授权策略`，点击`Add user`添加用户，User name是你早早就设置在`ou=People`下面的用户才行，如`zhangsan` ，最后勾选那些\"Read\"等权限。最好规划一个administer用户，因为系统认证方式的admin已经不能用了。\n\n4. 登录：使用`zhangsan`用户就可以登录jenkins了。\n\n参考：https://blog.csdn.net/GX_1_11_real/article/details/109511636\n\n#### 遇到问题\n- 1.jenkins认证方式修改成ldap认证后，原来系统认证用户admin使用不了了，怎么办？\n```\n编辑/var/lib/jenkins/config.xml文件\n\n把：\n<securityRealm class=...>\n  ....    \n</securityRealm>\n\n替换成系统用户认证：\n\n<securityRealm class=\"hudson.security.HudsonPrivateSecurityRealm\">\n  <disableSignup>false</disableSignup>\n  <enableCaptcha>false</enableCaptcha>\n</securityRealm>\n\n最后，重启：systemctl restart jenkins\n```\n\n##### 其他参考文章\nhttps://zhuanlan.zhihu.com/p/32732045\nhttps://blog.csdn.net/GX_1_11_real/article/details/108577999\n","source":"_posts/第15期：LDAP.md","raw":"---\ntitle: 第15期：LDAP\ndate: 2023-05-22 10:11:20\ntags:\n---\n#### LDAP简介\nLDAP(Lightweight Directory Access Protocol)轻量级目录访问协议，用于用户管理的统一认证服务。\n\n解决的痛点：比如说公司有多个系统有不同套用户密码，但接入开源的openldap之后，就可以共享同一套认证密码。\n#### LDAP原理\n目录是一个搜索查询、树结构数据库，ldap是一套由目录加协议组成的认证系统。\n\n目录树组成成分：\n- `dn` -- Distinguished Name 一条记录的具体位置，如dn:\"uid=er.xiong,ou=OA,dc=xiongchumo,dc=com\"表示熊出没公司OA组的熊二\n- `dc` -- Domain component 域名部分，一条记录可包含多个dc\n- `ou` -- Organization Unit 组织单元，一条记录所属组织 \n- `uid` -- user id 用户id\n- `sn` -- Surname 姓，如“许”\n- `cn` -- Common Name，公共名称，一条记录的名称\n- `rdn` -- 相对辨别名，类似于文件系统中的相对路径，它是与目录树结构无关的部分，如“uid=tom”或“cn= Thomas Johansson”\n\n#### openldap安装使用\nldap只是一套协议，openldap是基于这套协议的实现。\n\n安装机器：centos7\n\nyum安装openldap\n```\nyum -y install openldap compat-openldap openldap-clients openldap-servers openldap-devel\n```\n说明：\n- openldap 它是openldap客户端和服务端的公共库\n- compat-openldap openldap兼容性库\n- openldap-clients 启动服务和设置\n- openldap-servers 启动服务和设置\n- openldap-devel 工具包，可选择安装\n- openldap-servers-sql 支持sql模块，可选择安装\n- migrationtools 通过migrationtools实现OpenLDAP用户及用户组的添加，导入系统账户，可进行选择性安装\n\n相关目录\n```\n/etc/openldap/slapd.d/ # 存放配置文件\n```\n\n服务管理命令\n```\nservice slapd start # 启动openldap服务\nslapd -VV # 查看版本\n```\n#### 示例说明：添加管理员密码\n生成管理员密码\n```\nslappasswd -s 123456 # {SSHA}XoEOHoalUAXb7dNiirKs7yFl/1/N/QYF\n```\n\n创建目录并添加修改管理员密码的ldif文件\n```\nmkdir /opt/ldap-workspace\ntouch changepwd.ldif\n\n# 文件内容如下：\ndn: olcDatabase={0}config,cn=config\nchangetype: modify\nadd: olcRootPW\nolcRootPW: {SSHA}XoEOHoalUAXb7dNiirKs7yFl/1/N/QYF\n```\n说明：\n- 第一行表将要变更配置的文件：/etc/openldap/slapd.d/cn=config/olcDatabase={0}config.ldif\n- 第二行表修改类型\n- 第三行表要添加的配置项是olcRootPW\n- 第四行是加配置项值\n\n执行changepwd文件\n```\nldapadd -Y EXTERNAL -H ldapi:/// -f changepwd.ldif\n```\n\n结果\n```\ncat /etc/openldap/slapd.d/cn\\=config/olcDatabase\\=\\{0\\}config.ldif，新增了一个olcRootPW项\n```\n参考：https://www.cnblogs.com/swordfall/p/12119010.html\n\nhttps://www.cnblogs.com/wilburxu/p/9174353.html\n\nhttps://www.jianshu.com/p/7e4d99f6baaf\n\n\n#### 部署生产环境可用的openldap\n```\n# 安装启动\nyum install -y openldap-clients openldap-servers\n\ncp /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG\n\nchown ldap:ldap /var/lib/ldap/DB_CONFIG\n\nsystemctl start slapd\n\nsystemctl enable slapd\n\n# 导入预设模式\nfind /etc/openldap/schema/ -name \"*.ldif\" -exec ldapadd -Y EXTERNAL -H ldapi:/// -D \"cn=config\" -f {} \\; \n\n# 设置管理用户root密码：\n```\nslappasswd -s 123456 # 生成加密密码\n\nchrootpwd.ldif # -H 指定ldap服务器地址；\n```\n\n# 设置域名cn=admin,dc=emog,dc=com对olcDatabase={1}monitor等文件有存取权限\n\nmkdir -p /etc/openldap/init_ldif # init_ldif当作工作区目录\ncd /etc/openldap/init_ldif\n\nldapmodify -Y EXTERNAL -H ldapi:/// -f chdomain.ldif # chdomain.ldif文件在后面的说明处。\n\n# 创建emog根域名，并在其下设置admin用户管理整个根组织，再创建两个组织：Group和People。\n\nldapadd -x -D cn=admin,dc=emog,dc=com -W -f addOrg.ldif\n\n# UI连接管理 LdapAdmin: http://www.ldapadmin.org/download/ldapadmin.html\nHost: 192.168.1.146  Port: 389  Version: 3\nBase: dc=emog,dc=com\nUsername: cn=admin,dc=emog,dc=com\nPassword: 123456\n\n# 新建用户\n右击 ou=People 目录新建用户\n仅配置sn: chenxiaoming,\ncn: chenxiaoming,\nhomeDirectory为 /\n\n# 新建Group\n右击 ou=Group 目录新建Organizational Unit类型，名为Jenkins，再在Jenkins下新建group类型，名为jenkins-users，这时候有一个属性`member`可配置为`\tcn=lisi,ou=People,dc=emog,dc=com`，代表lisi这个人归属于Jenkins-users这个group下面。\n\n# 至此，配置完成了。\n```\n说明：\n- chrootpwd.ldif文件内容：\n```\ndn: olcDatabase={2}hdb,cn=config\nchangetype: modify\nreplace: olcRootPW\nolcRootPW: {SSHA}mMZx/2fkVQDpjnQELwYlILXVW/ybXnMy\n```\n\n- chdomain.ldif文件内容：\n```\ndn: olcDatabase={1}monitor,cn=config\nchangetype: modify\nreplace: olcAccess\nolcAccess: {0}to * by dn.base=\"gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth\"  read by dn.base=\"cn=admin,dc=emog,dc=com\" read by * none\n\ndn: olcDatabase={2}hdb,cn=config\nchangetype: modify\nreplace: olcSuffix\nolcSuffix: dc=emog,dc=com\n\ndn: olcDatabase={2}hdb,cn=config\nchangetype: modify\nreplace: olcRootDN\nolcRootDN: cn=admin,dc=emog,dc=com\n\ndn: olcDatabase={2}hdb,cn=config\nchangetype: modify\nadd: olcAccess\nolcAccess: {0}to attrs=userPassword,shadowLastChange by dn=\"cn=admin,dc=emog,dc=com\" write by anonymous auth by self write by * none\nolcAccess: {1}to dn.base=\"\" by * read\nolcAccess: {2}to * by dn=\"cn=admin,dc=emog,dc=com\" write by * read\n\n```\n- add-org.ldif文件内容：\n```\ndn: dc=emog,dc=com\ndc: emog\nobjectClass: top\nobjectClass: domain\no: emog\n\ndn: cn=admin,dc=emog,dc=com\nobjectClass: organizationalRole\ncn: admin\ndescription: LDAP admin\n\ndn: ou=Group,dc=emog,dc=com\nou: Group\nobjectClass: organizationalUnit\n\ndn: ou=People,dc=emog,dc=com\nou: People\nobjectClass: organizationalUnit\n```\n\n#### gitea接入openldap\n前提：\ngitea和openldap部署好了。\n\n[gitea安装](../Git/gitea.md)\n\n接入步骤\n1. 浏览器登入gitea，点击右侧的个人头像-管理后台-认证源-添加认证源\n2. 认证类型(LDAP (via BindDN))-认证名称(allsd11-openldap)-安全协议(Unencrypted)-主机(192.168.31.87)-端口(389)-用户搜索基准(ou=People,dc=emog,dc=com)-用户过滤规则((&(objectclass=top)(cn=%s)))-勾选 从Bind DN中拉去属性信息，该认证源已经启用。\n\n说明：\n- 因为没有用TLS证书，所以选Unencrypted\n- 其他选项默认不动即可\n\n#### jenkins接入openldap\n\n1. 登录jenkins-系统管理-全局安全配置-安全域(LDAP)\n2. 开始配置LDAP：Server(192.168.31.87:389)-roo DN(dc=emog,dc=com)-勾选Allow blank rootDN-User search base(ou=People)-User search filter(cn={0})-Group search base(ou=Jenkins,ou=Group)-点选Search for LDAP groups containing user-Manager DN(cn=admin,dc=emog,dc=com)-Manager Password\n(123456)-保存\n\n说明：\n- `root DN`的设置是会后面的`User search base`和`Group search base`服务的，如`User search base`设置成ou=People，认证的时候就会到`ou=People,dc=emog,dc=com`下面查找用户。\n- 其他选项没有提及的就保持不动。\n\n3. 配置完成后，点击`保存`退出。点击`全局安全配置`进入，可以点击`Testing LDAP settings`测试。接着往下，看到`授权策略`，点击`Add user`添加用户，User name是你早早就设置在`ou=People`下面的用户才行，如`zhangsan` ，最后勾选那些\"Read\"等权限。最好规划一个administer用户，因为系统认证方式的admin已经不能用了。\n\n4. 登录：使用`zhangsan`用户就可以登录jenkins了。\n\n参考：https://blog.csdn.net/GX_1_11_real/article/details/109511636\n\n#### 遇到问题\n- 1.jenkins认证方式修改成ldap认证后，原来系统认证用户admin使用不了了，怎么办？\n```\n编辑/var/lib/jenkins/config.xml文件\n\n把：\n<securityRealm class=...>\n  ....    \n</securityRealm>\n\n替换成系统用户认证：\n\n<securityRealm class=\"hudson.security.HudsonPrivateSecurityRealm\">\n  <disableSignup>false</disableSignup>\n  <enableCaptcha>false</enableCaptcha>\n</securityRealm>\n\n最后，重启：systemctl restart jenkins\n```\n\n##### 其他参考文章\nhttps://zhuanlan.zhihu.com/p/32732045\nhttps://blog.csdn.net/GX_1_11_real/article/details/108577999\n","slug":"第15期：LDAP","published":1,"updated":"2024-03-06T06:55:18.350Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt6e00059kln55rc6ab3","content":"<h4 id=\"LDAP简介\"><a href=\"#LDAP简介\" class=\"headerlink\" title=\"LDAP简介\"></a>LDAP简介</h4><p>LDAP(Lightweight Directory Access Protocol)轻量级目录访问协议，用于用户管理的统一认证服务。</p>\n<p>解决的痛点：比如说公司有多个系统有不同套用户密码，但接入开源的openldap之后，就可以共享同一套认证密码。</p>\n<h4 id=\"LDAP原理\"><a href=\"#LDAP原理\" class=\"headerlink\" title=\"LDAP原理\"></a>LDAP原理</h4><p>目录是一个搜索查询、树结构数据库，ldap是一套由目录加协议组成的认证系统。</p>\n<p>目录树组成成分：</p>\n<ul>\n<li><code>dn</code> – Distinguished Name 一条记录的具体位置，如dn:”uid&#x3D;er.xiong,ou&#x3D;OA,dc&#x3D;xiongchumo,dc&#x3D;com”表示熊出没公司OA组的熊二</li>\n<li><code>dc</code> – Domain component 域名部分，一条记录可包含多个dc</li>\n<li><code>ou</code> – Organization Unit 组织单元，一条记录所属组织 </li>\n<li><code>uid</code> – user id 用户id</li>\n<li><code>sn</code> – Surname 姓，如“许”</li>\n<li><code>cn</code> – Common Name，公共名称，一条记录的名称</li>\n<li><code>rdn</code> – 相对辨别名，类似于文件系统中的相对路径，它是与目录树结构无关的部分，如“uid&#x3D;tom”或“cn&#x3D; Thomas Johansson”</li>\n</ul>\n<h4 id=\"openldap安装使用\"><a href=\"#openldap安装使用\" class=\"headerlink\" title=\"openldap安装使用\"></a>openldap安装使用</h4><p>ldap只是一套协议，openldap是基于这套协议的实现。</p>\n<p>安装机器：centos7</p>\n<p>yum安装openldap</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install openldap compat-openldap openldap-clients openldap-servers openldap-devel</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li>openldap 它是openldap客户端和服务端的公共库</li>\n<li>compat-openldap openldap兼容性库</li>\n<li>openldap-clients 启动服务和设置</li>\n<li>openldap-servers 启动服务和设置</li>\n<li>openldap-devel 工具包，可选择安装</li>\n<li>openldap-servers-sql 支持sql模块，可选择安装</li>\n<li>migrationtools 通过migrationtools实现OpenLDAP用户及用户组的添加，导入系统账户，可进行选择性安装</li>\n</ul>\n<p>相关目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/openldap/slapd.d/ # 存放配置文件</span><br></pre></td></tr></table></figure>\n\n<p>服务管理命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service slapd start # 启动openldap服务</span><br><span class=\"line\">slapd -VV # 查看版本</span><br></pre></td></tr></table></figure>\n<h4 id=\"示例说明：添加管理员密码\"><a href=\"#示例说明：添加管理员密码\" class=\"headerlink\" title=\"示例说明：添加管理员密码\"></a>示例说明：添加管理员密码</h4><p>生成管理员密码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">slappasswd -s 123456 # &#123;SSHA&#125;XoEOHoalUAXb7dNiirKs7yFl/1/N/QYF</span><br></pre></td></tr></table></figure>\n\n<p>创建目录并添加修改管理员密码的ldif文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /opt/ldap-workspace</span><br><span class=\"line\">touch changepwd.ldif</span><br><span class=\"line\"></span><br><span class=\"line\"># 文件内容如下：</span><br><span class=\"line\">dn: olcDatabase=&#123;0&#125;config,cn=config</span><br><span class=\"line\">changetype: modify</span><br><span class=\"line\">add: olcRootPW</span><br><span class=\"line\">olcRootPW: &#123;SSHA&#125;XoEOHoalUAXb7dNiirKs7yFl/1/N/QYF</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li>第一行表将要变更配置的文件：&#x2F;etc&#x2F;openldap&#x2F;slapd.d&#x2F;cn&#x3D;config&#x2F;olcDatabase&#x3D;{0}config.ldif</li>\n<li>第二行表修改类型</li>\n<li>第三行表要添加的配置项是olcRootPW</li>\n<li>第四行是加配置项值</li>\n</ul>\n<p>执行changepwd文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ldapadd -Y EXTERNAL -H ldapi:/// -f changepwd.ldif</span><br></pre></td></tr></table></figure>\n\n<p>结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/openldap/slapd.d/cn\\=config/olcDatabase\\=\\&#123;0\\&#125;config.ldif，新增了一个olcRootPW项</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://www.cnblogs.com/swordfall/p/12119010.html\">https://www.cnblogs.com/swordfall/p/12119010.html</a></p>\n<p><a href=\"https://www.cnblogs.com/wilburxu/p/9174353.html\">https://www.cnblogs.com/wilburxu/p/9174353.html</a></p>\n<p><a href=\"https://www.jianshu.com/p/7e4d99f6baaf\">https://www.jianshu.com/p/7e4d99f6baaf</a></p>\n<h4 id=\"部署生产环境可用的openldap\"><a href=\"#部署生产环境可用的openldap\" class=\"headerlink\" title=\"部署生产环境可用的openldap\"></a>部署生产环境可用的openldap</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装启动</span><br><span class=\"line\">yum install -y openldap-clients openldap-servers</span><br><span class=\"line\"></span><br><span class=\"line\">cp /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG</span><br><span class=\"line\"></span><br><span class=\"line\">chown ldap:ldap /var/lib/ldap/DB_CONFIG</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl start slapd</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl enable slapd</span><br><span class=\"line\"></span><br><span class=\"line\"># 导入预设模式</span><br><span class=\"line\">find /etc/openldap/schema/ -name &quot;*.ldif&quot; -exec ldapadd -Y EXTERNAL -H ldapi:/// -D &quot;cn=config&quot; -f &#123;&#125; \\; </span><br><span class=\"line\"></span><br><span class=\"line\"># 设置管理用户root密码：</span><br></pre></td></tr></table></figure>\n<p>slappasswd -s 123456 # 生成加密密码</p>\n<p>chrootpwd.ldif # -H 指定ldap服务器地址；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># 设置域名cn=admin,dc=emog,dc=com对olcDatabase=&#123;1&#125;monitor等文件有存取权限</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p /etc/openldap/init_ldif # init_ldif当作工作区目录</span><br><span class=\"line\">cd /etc/openldap/init_ldif</span><br><span class=\"line\"></span><br><span class=\"line\">ldapmodify -Y EXTERNAL -H ldapi:/// -f chdomain.ldif # chdomain.ldif文件在后面的说明处。</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建emog根域名，并在其下设置admin用户管理整个根组织，再创建两个组织：Group和People。</span><br><span class=\"line\"></span><br><span class=\"line\">ldapadd -x -D cn=admin,dc=emog,dc=com -W -f addOrg.ldif</span><br><span class=\"line\"></span><br><span class=\"line\"># UI连接管理 LdapAdmin: http://www.ldapadmin.org/download/ldapadmin.html</span><br><span class=\"line\">Host: 192.168.1.146  Port: 389  Version: 3</span><br><span class=\"line\">Base: dc=emog,dc=com</span><br><span class=\"line\">Username: cn=admin,dc=emog,dc=com</span><br><span class=\"line\">Password: 123456</span><br><span class=\"line\"></span><br><span class=\"line\"># 新建用户</span><br><span class=\"line\">右击 ou=People 目录新建用户</span><br><span class=\"line\">仅配置sn: chenxiaoming,</span><br><span class=\"line\">cn: chenxiaoming,</span><br><span class=\"line\">homeDirectory为 /</span><br><span class=\"line\"></span><br><span class=\"line\"># 新建Group</span><br><span class=\"line\">右击 ou=Group 目录新建Organizational Unit类型，名为Jenkins，再在Jenkins下新建group类型，名为jenkins-users，这时候有一个属性`member`可配置为`\tcn=lisi,ou=People,dc=emog,dc=com`，代表lisi这个人归属于Jenkins-users这个group下面。</span><br><span class=\"line\"></span><br><span class=\"line\"># 至此，配置完成了。</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><p>chrootpwd.ldif文件内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class=\"line\">changetype: modify</span><br><span class=\"line\">replace: olcRootPW</span><br><span class=\"line\">olcRootPW: &#123;SSHA&#125;mMZx/2fkVQDpjnQELwYlILXVW/ybXnMy</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>chdomain.ldif文件内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dn: olcDatabase=&#123;1&#125;monitor,cn=config</span><br><span class=\"line\">changetype: modify</span><br><span class=\"line\">replace: olcAccess</span><br><span class=\"line\">olcAccess: &#123;0&#125;to * by dn.base=&quot;gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth&quot;  read by dn.base=&quot;cn=admin,dc=emog,dc=com&quot; read by * none</span><br><span class=\"line\"></span><br><span class=\"line\">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class=\"line\">changetype: modify</span><br><span class=\"line\">replace: olcSuffix</span><br><span class=\"line\">olcSuffix: dc=emog,dc=com</span><br><span class=\"line\"></span><br><span class=\"line\">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class=\"line\">changetype: modify</span><br><span class=\"line\">replace: olcRootDN</span><br><span class=\"line\">olcRootDN: cn=admin,dc=emog,dc=com</span><br><span class=\"line\"></span><br><span class=\"line\">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class=\"line\">changetype: modify</span><br><span class=\"line\">add: olcAccess</span><br><span class=\"line\">olcAccess: &#123;0&#125;to attrs=userPassword,shadowLastChange by dn=&quot;cn=admin,dc=emog,dc=com&quot; write by anonymous auth by self write by * none</span><br><span class=\"line\">olcAccess: &#123;1&#125;to dn.base=&quot;&quot; by * read</span><br><span class=\"line\">olcAccess: &#123;2&#125;to * by dn=&quot;cn=admin,dc=emog,dc=com&quot; write by * read</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>add-org.ldif文件内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dn: dc=emog,dc=com</span><br><span class=\"line\">dc: emog</span><br><span class=\"line\">objectClass: top</span><br><span class=\"line\">objectClass: domain</span><br><span class=\"line\">o: emog</span><br><span class=\"line\"></span><br><span class=\"line\">dn: cn=admin,dc=emog,dc=com</span><br><span class=\"line\">objectClass: organizationalRole</span><br><span class=\"line\">cn: admin</span><br><span class=\"line\">description: LDAP admin</span><br><span class=\"line\"></span><br><span class=\"line\">dn: ou=Group,dc=emog,dc=com</span><br><span class=\"line\">ou: Group</span><br><span class=\"line\">objectClass: organizationalUnit</span><br><span class=\"line\"></span><br><span class=\"line\">dn: ou=People,dc=emog,dc=com</span><br><span class=\"line\">ou: People</span><br><span class=\"line\">objectClass: organizationalUnit</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"gitea接入openldap\"><a href=\"#gitea接入openldap\" class=\"headerlink\" title=\"gitea接入openldap\"></a>gitea接入openldap</h4><p>前提：<br>gitea和openldap部署好了。</p>\n<p><a href=\"../Git/gitea.md\">gitea安装</a></p>\n<p>接入步骤</p>\n<ol>\n<li>浏览器登入gitea，点击右侧的个人头像-管理后台-认证源-添加认证源</li>\n<li>认证类型(LDAP (via BindDN))-认证名称(allsd11-openldap)-安全协议(Unencrypted)-主机(192.168.31.87)-端口(389)-用户搜索基准(ou&#x3D;People,dc&#x3D;emog,dc&#x3D;com)-用户过滤规则((&amp;(objectclass&#x3D;top)(cn&#x3D;%s)))-勾选 从Bind DN中拉去属性信息，该认证源已经启用。</li>\n</ol>\n<p>说明：</p>\n<ul>\n<li>因为没有用TLS证书，所以选Unencrypted</li>\n<li>其他选项默认不动即可</li>\n</ul>\n<h4 id=\"jenkins接入openldap\"><a href=\"#jenkins接入openldap\" class=\"headerlink\" title=\"jenkins接入openldap\"></a>jenkins接入openldap</h4><ol>\n<li>登录jenkins-系统管理-全局安全配置-安全域(LDAP)</li>\n<li>开始配置LDAP：Server(192.168.31.87:389)-roo DN(dc&#x3D;emog,dc&#x3D;com)-勾选Allow blank rootDN-User search base(ou&#x3D;People)-User search filter(cn&#x3D;{0})-Group search base(ou&#x3D;Jenkins,ou&#x3D;Group)-点选Search for LDAP groups containing user-Manager DN(cn&#x3D;admin,dc&#x3D;emog,dc&#x3D;com)-Manager Password<br>(123456)-保存</li>\n</ol>\n<p>说明：</p>\n<ul>\n<li><code>root DN</code>的设置是会后面的<code>User search base</code>和<code>Group search base</code>服务的，如<code>User search base</code>设置成ou&#x3D;People，认证的时候就会到<code>ou=People,dc=emog,dc=com</code>下面查找用户。</li>\n<li>其他选项没有提及的就保持不动。</li>\n</ul>\n<ol start=\"3\">\n<li><p>配置完成后，点击<code>保存</code>退出。点击<code>全局安全配置</code>进入，可以点击<code>Testing LDAP settings</code>测试。接着往下，看到<code>授权策略</code>，点击<code>Add user</code>添加用户，User name是你早早就设置在<code>ou=People</code>下面的用户才行，如<code>zhangsan</code> ，最后勾选那些”Read”等权限。最好规划一个administer用户，因为系统认证方式的admin已经不能用了。</p>\n</li>\n<li><p>登录：使用<code>zhangsan</code>用户就可以登录jenkins了。</p>\n</li>\n</ol>\n<p>参考：<a href=\"https://blog.csdn.net/GX_1_11_real/article/details/109511636\">https://blog.csdn.net/GX_1_11_real/article/details/109511636</a></p>\n<h4 id=\"遇到问题\"><a href=\"#遇到问题\" class=\"headerlink\" title=\"遇到问题\"></a>遇到问题</h4><ul>\n<li>1.jenkins认证方式修改成ldap认证后，原来系统认证用户admin使用不了了，怎么办？<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编辑/var/lib/jenkins/config.xml文件</span><br><span class=\"line\"></span><br><span class=\"line\">把：</span><br><span class=\"line\">&lt;securityRealm class=...&gt;</span><br><span class=\"line\">  ....    </span><br><span class=\"line\">&lt;/securityRealm&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">替换成系统用户认证：</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;securityRealm class=&quot;hudson.security.HudsonPrivateSecurityRealm&quot;&gt;</span><br><span class=\"line\">  &lt;disableSignup&gt;false&lt;/disableSignup&gt;</span><br><span class=\"line\">  &lt;enableCaptcha&gt;false&lt;/enableCaptcha&gt;</span><br><span class=\"line\">&lt;/securityRealm&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">最后，重启：systemctl restart jenkins</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"其他参考文章\"><a href=\"#其他参考文章\" class=\"headerlink\" title=\"其他参考文章\"></a>其他参考文章</h5><p><a href=\"https://zhuanlan.zhihu.com/p/32732045\">https://zhuanlan.zhihu.com/p/32732045</a><br><a href=\"https://blog.csdn.net/GX_1_11_real/article/details/108577999\">https://blog.csdn.net/GX_1_11_real/article/details/108577999</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"LDAP简介\"><a href=\"#LDAP简介\" class=\"headerlink\" title=\"LDAP简介\"></a>LDAP简介</h4><p>LDAP(Lightweight Directory Access Protocol)轻量级目录访问协议，用于用户管理的统一认证服务。</p>\n<p>解决的痛点：比如说公司有多个系统有不同套用户密码，但接入开源的openldap之后，就可以共享同一套认证密码。</p>\n<h4 id=\"LDAP原理\"><a href=\"#LDAP原理\" class=\"headerlink\" title=\"LDAP原理\"></a>LDAP原理</h4><p>目录是一个搜索查询、树结构数据库，ldap是一套由目录加协议组成的认证系统。</p>\n<p>目录树组成成分：</p>\n<ul>\n<li><code>dn</code> – Distinguished Name 一条记录的具体位置，如dn:”uid&#x3D;er.xiong,ou&#x3D;OA,dc&#x3D;xiongchumo,dc&#x3D;com”表示熊出没公司OA组的熊二</li>\n<li><code>dc</code> – Domain component 域名部分，一条记录可包含多个dc</li>\n<li><code>ou</code> – Organization Unit 组织单元，一条记录所属组织 </li>\n<li><code>uid</code> – user id 用户id</li>\n<li><code>sn</code> – Surname 姓，如“许”</li>\n<li><code>cn</code> – Common Name，公共名称，一条记录的名称</li>\n<li><code>rdn</code> – 相对辨别名，类似于文件系统中的相对路径，它是与目录树结构无关的部分，如“uid&#x3D;tom”或“cn&#x3D; Thomas Johansson”</li>\n</ul>\n<h4 id=\"openldap安装使用\"><a href=\"#openldap安装使用\" class=\"headerlink\" title=\"openldap安装使用\"></a>openldap安装使用</h4><p>ldap只是一套协议，openldap是基于这套协议的实现。</p>\n<p>安装机器：centos7</p>\n<p>yum安装openldap</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install openldap compat-openldap openldap-clients openldap-servers openldap-devel</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li>openldap 它是openldap客户端和服务端的公共库</li>\n<li>compat-openldap openldap兼容性库</li>\n<li>openldap-clients 启动服务和设置</li>\n<li>openldap-servers 启动服务和设置</li>\n<li>openldap-devel 工具包，可选择安装</li>\n<li>openldap-servers-sql 支持sql模块，可选择安装</li>\n<li>migrationtools 通过migrationtools实现OpenLDAP用户及用户组的添加，导入系统账户，可进行选择性安装</li>\n</ul>\n<p>相关目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/openldap/slapd.d/ # 存放配置文件</span><br></pre></td></tr></table></figure>\n\n<p>服务管理命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service slapd start # 启动openldap服务</span><br><span class=\"line\">slapd -VV # 查看版本</span><br></pre></td></tr></table></figure>\n<h4 id=\"示例说明：添加管理员密码\"><a href=\"#示例说明：添加管理员密码\" class=\"headerlink\" title=\"示例说明：添加管理员密码\"></a>示例说明：添加管理员密码</h4><p>生成管理员密码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">slappasswd -s 123456 # &#123;SSHA&#125;XoEOHoalUAXb7dNiirKs7yFl/1/N/QYF</span><br></pre></td></tr></table></figure>\n\n<p>创建目录并添加修改管理员密码的ldif文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /opt/ldap-workspace</span><br><span class=\"line\">touch changepwd.ldif</span><br><span class=\"line\"></span><br><span class=\"line\"># 文件内容如下：</span><br><span class=\"line\">dn: olcDatabase=&#123;0&#125;config,cn=config</span><br><span class=\"line\">changetype: modify</span><br><span class=\"line\">add: olcRootPW</span><br><span class=\"line\">olcRootPW: &#123;SSHA&#125;XoEOHoalUAXb7dNiirKs7yFl/1/N/QYF</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li>第一行表将要变更配置的文件：&#x2F;etc&#x2F;openldap&#x2F;slapd.d&#x2F;cn&#x3D;config&#x2F;olcDatabase&#x3D;{0}config.ldif</li>\n<li>第二行表修改类型</li>\n<li>第三行表要添加的配置项是olcRootPW</li>\n<li>第四行是加配置项值</li>\n</ul>\n<p>执行changepwd文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ldapadd -Y EXTERNAL -H ldapi:/// -f changepwd.ldif</span><br></pre></td></tr></table></figure>\n\n<p>结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/openldap/slapd.d/cn\\=config/olcDatabase\\=\\&#123;0\\&#125;config.ldif，新增了一个olcRootPW项</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://www.cnblogs.com/swordfall/p/12119010.html\">https://www.cnblogs.com/swordfall/p/12119010.html</a></p>\n<p><a href=\"https://www.cnblogs.com/wilburxu/p/9174353.html\">https://www.cnblogs.com/wilburxu/p/9174353.html</a></p>\n<p><a href=\"https://www.jianshu.com/p/7e4d99f6baaf\">https://www.jianshu.com/p/7e4d99f6baaf</a></p>\n<h4 id=\"部署生产环境可用的openldap\"><a href=\"#部署生产环境可用的openldap\" class=\"headerlink\" title=\"部署生产环境可用的openldap\"></a>部署生产环境可用的openldap</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装启动</span><br><span class=\"line\">yum install -y openldap-clients openldap-servers</span><br><span class=\"line\"></span><br><span class=\"line\">cp /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG</span><br><span class=\"line\"></span><br><span class=\"line\">chown ldap:ldap /var/lib/ldap/DB_CONFIG</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl start slapd</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl enable slapd</span><br><span class=\"line\"></span><br><span class=\"line\"># 导入预设模式</span><br><span class=\"line\">find /etc/openldap/schema/ -name &quot;*.ldif&quot; -exec ldapadd -Y EXTERNAL -H ldapi:/// -D &quot;cn=config&quot; -f &#123;&#125; \\; </span><br><span class=\"line\"></span><br><span class=\"line\"># 设置管理用户root密码：</span><br></pre></td></tr></table></figure>\n<p>slappasswd -s 123456 # 生成加密密码</p>\n<p>chrootpwd.ldif # -H 指定ldap服务器地址；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># 设置域名cn=admin,dc=emog,dc=com对olcDatabase=&#123;1&#125;monitor等文件有存取权限</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p /etc/openldap/init_ldif # init_ldif当作工作区目录</span><br><span class=\"line\">cd /etc/openldap/init_ldif</span><br><span class=\"line\"></span><br><span class=\"line\">ldapmodify -Y EXTERNAL -H ldapi:/// -f chdomain.ldif # chdomain.ldif文件在后面的说明处。</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建emog根域名，并在其下设置admin用户管理整个根组织，再创建两个组织：Group和People。</span><br><span class=\"line\"></span><br><span class=\"line\">ldapadd -x -D cn=admin,dc=emog,dc=com -W -f addOrg.ldif</span><br><span class=\"line\"></span><br><span class=\"line\"># UI连接管理 LdapAdmin: http://www.ldapadmin.org/download/ldapadmin.html</span><br><span class=\"line\">Host: 192.168.1.146  Port: 389  Version: 3</span><br><span class=\"line\">Base: dc=emog,dc=com</span><br><span class=\"line\">Username: cn=admin,dc=emog,dc=com</span><br><span class=\"line\">Password: 123456</span><br><span class=\"line\"></span><br><span class=\"line\"># 新建用户</span><br><span class=\"line\">右击 ou=People 目录新建用户</span><br><span class=\"line\">仅配置sn: chenxiaoming,</span><br><span class=\"line\">cn: chenxiaoming,</span><br><span class=\"line\">homeDirectory为 /</span><br><span class=\"line\"></span><br><span class=\"line\"># 新建Group</span><br><span class=\"line\">右击 ou=Group 目录新建Organizational Unit类型，名为Jenkins，再在Jenkins下新建group类型，名为jenkins-users，这时候有一个属性`member`可配置为`\tcn=lisi,ou=People,dc=emog,dc=com`，代表lisi这个人归属于Jenkins-users这个group下面。</span><br><span class=\"line\"></span><br><span class=\"line\"># 至此，配置完成了。</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><p>chrootpwd.ldif文件内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class=\"line\">changetype: modify</span><br><span class=\"line\">replace: olcRootPW</span><br><span class=\"line\">olcRootPW: &#123;SSHA&#125;mMZx/2fkVQDpjnQELwYlILXVW/ybXnMy</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>chdomain.ldif文件内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dn: olcDatabase=&#123;1&#125;monitor,cn=config</span><br><span class=\"line\">changetype: modify</span><br><span class=\"line\">replace: olcAccess</span><br><span class=\"line\">olcAccess: &#123;0&#125;to * by dn.base=&quot;gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth&quot;  read by dn.base=&quot;cn=admin,dc=emog,dc=com&quot; read by * none</span><br><span class=\"line\"></span><br><span class=\"line\">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class=\"line\">changetype: modify</span><br><span class=\"line\">replace: olcSuffix</span><br><span class=\"line\">olcSuffix: dc=emog,dc=com</span><br><span class=\"line\"></span><br><span class=\"line\">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class=\"line\">changetype: modify</span><br><span class=\"line\">replace: olcRootDN</span><br><span class=\"line\">olcRootDN: cn=admin,dc=emog,dc=com</span><br><span class=\"line\"></span><br><span class=\"line\">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class=\"line\">changetype: modify</span><br><span class=\"line\">add: olcAccess</span><br><span class=\"line\">olcAccess: &#123;0&#125;to attrs=userPassword,shadowLastChange by dn=&quot;cn=admin,dc=emog,dc=com&quot; write by anonymous auth by self write by * none</span><br><span class=\"line\">olcAccess: &#123;1&#125;to dn.base=&quot;&quot; by * read</span><br><span class=\"line\">olcAccess: &#123;2&#125;to * by dn=&quot;cn=admin,dc=emog,dc=com&quot; write by * read</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>add-org.ldif文件内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dn: dc=emog,dc=com</span><br><span class=\"line\">dc: emog</span><br><span class=\"line\">objectClass: top</span><br><span class=\"line\">objectClass: domain</span><br><span class=\"line\">o: emog</span><br><span class=\"line\"></span><br><span class=\"line\">dn: cn=admin,dc=emog,dc=com</span><br><span class=\"line\">objectClass: organizationalRole</span><br><span class=\"line\">cn: admin</span><br><span class=\"line\">description: LDAP admin</span><br><span class=\"line\"></span><br><span class=\"line\">dn: ou=Group,dc=emog,dc=com</span><br><span class=\"line\">ou: Group</span><br><span class=\"line\">objectClass: organizationalUnit</span><br><span class=\"line\"></span><br><span class=\"line\">dn: ou=People,dc=emog,dc=com</span><br><span class=\"line\">ou: People</span><br><span class=\"line\">objectClass: organizationalUnit</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"gitea接入openldap\"><a href=\"#gitea接入openldap\" class=\"headerlink\" title=\"gitea接入openldap\"></a>gitea接入openldap</h4><p>前提：<br>gitea和openldap部署好了。</p>\n<p><a href=\"../Git/gitea.md\">gitea安装</a></p>\n<p>接入步骤</p>\n<ol>\n<li>浏览器登入gitea，点击右侧的个人头像-管理后台-认证源-添加认证源</li>\n<li>认证类型(LDAP (via BindDN))-认证名称(allsd11-openldap)-安全协议(Unencrypted)-主机(192.168.31.87)-端口(389)-用户搜索基准(ou&#x3D;People,dc&#x3D;emog,dc&#x3D;com)-用户过滤规则((&amp;(objectclass&#x3D;top)(cn&#x3D;%s)))-勾选 从Bind DN中拉去属性信息，该认证源已经启用。</li>\n</ol>\n<p>说明：</p>\n<ul>\n<li>因为没有用TLS证书，所以选Unencrypted</li>\n<li>其他选项默认不动即可</li>\n</ul>\n<h4 id=\"jenkins接入openldap\"><a href=\"#jenkins接入openldap\" class=\"headerlink\" title=\"jenkins接入openldap\"></a>jenkins接入openldap</h4><ol>\n<li>登录jenkins-系统管理-全局安全配置-安全域(LDAP)</li>\n<li>开始配置LDAP：Server(192.168.31.87:389)-roo DN(dc&#x3D;emog,dc&#x3D;com)-勾选Allow blank rootDN-User search base(ou&#x3D;People)-User search filter(cn&#x3D;{0})-Group search base(ou&#x3D;Jenkins,ou&#x3D;Group)-点选Search for LDAP groups containing user-Manager DN(cn&#x3D;admin,dc&#x3D;emog,dc&#x3D;com)-Manager Password<br>(123456)-保存</li>\n</ol>\n<p>说明：</p>\n<ul>\n<li><code>root DN</code>的设置是会后面的<code>User search base</code>和<code>Group search base</code>服务的，如<code>User search base</code>设置成ou&#x3D;People，认证的时候就会到<code>ou=People,dc=emog,dc=com</code>下面查找用户。</li>\n<li>其他选项没有提及的就保持不动。</li>\n</ul>\n<ol start=\"3\">\n<li><p>配置完成后，点击<code>保存</code>退出。点击<code>全局安全配置</code>进入，可以点击<code>Testing LDAP settings</code>测试。接着往下，看到<code>授权策略</code>，点击<code>Add user</code>添加用户，User name是你早早就设置在<code>ou=People</code>下面的用户才行，如<code>zhangsan</code> ，最后勾选那些”Read”等权限。最好规划一个administer用户，因为系统认证方式的admin已经不能用了。</p>\n</li>\n<li><p>登录：使用<code>zhangsan</code>用户就可以登录jenkins了。</p>\n</li>\n</ol>\n<p>参考：<a href=\"https://blog.csdn.net/GX_1_11_real/article/details/109511636\">https://blog.csdn.net/GX_1_11_real/article/details/109511636</a></p>\n<h4 id=\"遇到问题\"><a href=\"#遇到问题\" class=\"headerlink\" title=\"遇到问题\"></a>遇到问题</h4><ul>\n<li>1.jenkins认证方式修改成ldap认证后，原来系统认证用户admin使用不了了，怎么办？<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编辑/var/lib/jenkins/config.xml文件</span><br><span class=\"line\"></span><br><span class=\"line\">把：</span><br><span class=\"line\">&lt;securityRealm class=...&gt;</span><br><span class=\"line\">  ....    </span><br><span class=\"line\">&lt;/securityRealm&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">替换成系统用户认证：</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;securityRealm class=&quot;hudson.security.HudsonPrivateSecurityRealm&quot;&gt;</span><br><span class=\"line\">  &lt;disableSignup&gt;false&lt;/disableSignup&gt;</span><br><span class=\"line\">  &lt;enableCaptcha&gt;false&lt;/enableCaptcha&gt;</span><br><span class=\"line\">&lt;/securityRealm&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">最后，重启：systemctl restart jenkins</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"其他参考文章\"><a href=\"#其他参考文章\" class=\"headerlink\" title=\"其他参考文章\"></a>其他参考文章</h5><p><a href=\"https://zhuanlan.zhihu.com/p/32732045\">https://zhuanlan.zhihu.com/p/32732045</a><br><a href=\"https://blog.csdn.net/GX_1_11_real/article/details/108577999\">https://blog.csdn.net/GX_1_11_real/article/details/108577999</a></p>\n"},{"title":"第16期：grep","date":"2023-05-22T02:12:57.000Z","_content":"例子：grep\n```\ngrep \"ricky\" test.log   # 只取选中的字符所在行\ngrep -v \"ricky\" test.log  # 取不选中的行\ngrep -r \"ricky\" ./*   # 递归查找当前目录及子目录下的ricky\ngrep -e \"rick*\" test.log  # 开启正则匹配模式\ngrep -w 'ricky' txt                          # 精确匹配字符串，-w只会匹配单独存在的ricky，如文本里存在arickya不会被匹配到，但a ricky a 会\n```","source":"_posts/第16期：grep.md","raw":"---\ntitle: 第16期：grep\ndate: 2023-05-22 10:12:57\ntags:\n---\n例子：grep\n```\ngrep \"ricky\" test.log   # 只取选中的字符所在行\ngrep -v \"ricky\" test.log  # 取不选中的行\ngrep -r \"ricky\" ./*   # 递归查找当前目录及子目录下的ricky\ngrep -e \"rick*\" test.log  # 开启正则匹配模式\ngrep -w 'ricky' txt                          # 精确匹配字符串，-w只会匹配单独存在的ricky，如文本里存在arickya不会被匹配到，但a ricky a 会\n```","slug":"第16期：grep","published":1,"updated":"2024-03-06T06:55:18.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt6f00069kln68zqcb8y","content":"<p>例子：grep</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep &quot;ricky&quot; test.log   # 只取选中的字符所在行</span><br><span class=\"line\">grep -v &quot;ricky&quot; test.log  # 取不选中的行</span><br><span class=\"line\">grep -r &quot;ricky&quot; ./*   # 递归查找当前目录及子目录下的ricky</span><br><span class=\"line\">grep -e &quot;rick*&quot; test.log  # 开启正则匹配模式</span><br><span class=\"line\">grep -w &#x27;ricky&#x27; txt                          # 精确匹配字符串，-w只会匹配单独存在的ricky，如文本里存在arickya不会被匹配到，但a ricky a 会</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>例子：grep</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep &quot;ricky&quot; test.log   # 只取选中的字符所在行</span><br><span class=\"line\">grep -v &quot;ricky&quot; test.log  # 取不选中的行</span><br><span class=\"line\">grep -r &quot;ricky&quot; ./*   # 递归查找当前目录及子目录下的ricky</span><br><span class=\"line\">grep -e &quot;rick*&quot; test.log  # 开启正则匹配模式</span><br><span class=\"line\">grep -w &#x27;ricky&#x27; txt                          # 精确匹配字符串，-w只会匹配单独存在的ricky，如文本里存在arickya不会被匹配到，但a ricky a 会</span><br></pre></td></tr></table></figure>"},{"title":"第17期：ssh","date":"2023-05-22T02:14:20.000Z","_content":"#### SSH-远程连接工具\n```\nssh root@192.168.1.2 -p 22\nssh-keygen # 生成`id_rsa.pub`和 `id_rsa.private`\n/etc/ssh/sshd_config # 配置文件入口，可以修改端口等\nsystemctl status sshd # 服务管理","source":"_posts/第17期：ssh.md","raw":"---\ntitle: 第17期：ssh\ndate: 2023-05-22 10:14:20\ntags:\n---\n#### SSH-远程连接工具\n```\nssh root@192.168.1.2 -p 22\nssh-keygen # 生成`id_rsa.pub`和 `id_rsa.private`\n/etc/ssh/sshd_config # 配置文件入口，可以修改端口等\nsystemctl status sshd # 服务管理","slug":"第17期：ssh","published":1,"updated":"2024-03-06T06:55:18.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt6g00079klnac5har75","content":"<h4 id=\"SSH-远程连接工具\"><a href=\"#SSH-远程连接工具\" class=\"headerlink\" title=\"SSH-远程连接工具\"></a>SSH-远程连接工具</h4><pre><code>ssh root@192.168.1.2 -p 22\nssh-keygen # 生成`id_rsa.pub`和 `id_rsa.private`\n/etc/ssh/sshd_config # 配置文件入口，可以修改端口等\nsystemctl status sshd # 服务管理\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"SSH-远程连接工具\"><a href=\"#SSH-远程连接工具\" class=\"headerlink\" title=\"SSH-远程连接工具\"></a>SSH-远程连接工具</h4><pre><code>ssh root@192.168.1.2 -p 22\nssh-keygen # 生成`id_rsa.pub`和 `id_rsa.private`\n/etc/ssh/sshd_config # 配置文件入口，可以修改端口等\nsystemctl status sshd # 服务管理\n</code></pre>\n"},{"title":"第18期：linux性能","date":"2023-05-22T02:15:30.000Z","_content":"##### 一、什么是性能问题？\n```\n突然有一天，公司开发在夜里打电话给你，“现在有很多用户说系统弹出一个错误，系统繁忙”之类的。\n开发同事一看接口返回500，看了后端日志好像没有特别明显的报错信息。\n\n这时，你赶忙上服务器看下nginx日志，好家伙，一看nginx日志发现后发现接口请求过了60s还没有响应。\n`top`看一下服务器资源，用户空间的cpu使用率100%，是哪些进程呢？php-fpm。里面发生了什么？我不知道啊？\n唉，重启服务能解决90%的问题，那就重启看看吧。果然，重启后用户反馈正常了。害，暂时是没有问题了，那下次再来一次怎么办？...无后续\n```\n\n看，cpu100%这类问题就归属性能问题。\n\n##### 研究性能问题需要学习操作系统主要组件原理\nCPU性能、内存、磁盘IO性能、网络\n\n衡量性能的指标：\n并发（吞吐）、响应快（时延）\n\n##### 二、CPU性能篇\n\n##### 什么是平均负载\n看一个例子：`uptime`\n```\n$ uptime\n02:34:03 up 2 days, 20:14,  1 user,  load average: 0.63, 0.83, 0.88\n```\n说明：\n- `02:34:03` 当前时间\n- `up 2 days, 20:14` 系统从开机后运行的时长\n- `1 user` 正在登录的用户数\n- `load average: 0.63, 0.83, 0.88` 最近1分钟、5分钟、15分钟的平均负载(Load average)\n\n`平均负载`是指单位时间内，系统处于可运行(Running或ready)和不可中断(blocked)的进程数。结合最近1分钟、5分钟、15分钟的平均负载，我们可以全面了解cpu的使用情况。像了解一天早中晚的气候变化。\n\nRunning是指正在使用cpu；Ready是指代码(指令)已经加载到了内存，等cpu来执行指令；\n\n不可中断是指进程在使用cpu，突然需要进行磁盘IO(读写)的长时间操作，先不用cpu，等IO操作完毕再回来使用cpu。\n\n一般而言，平均负载超过cpu核数70%就要检查cpu的使用情况，考虑是否优化。\n\n查看cpu核数\n```\ngrep 'model name' /proc/cpuinfo|wc -l\n```\n\n##### 什么是CPU使用率\ncpu使用率衡量了单位时间cpu的繁忙程度。\n\n对于I/O密集型进程，平均负载就高，但cpu却不繁忙，也就是cpu使用率不高。\n\n看一个例子：`top`\n```\n$ top\ntop - 11:15:27 up 40 days, 51 min,  1 user,  load average: 0.32, 0.27, 0.26\nTasks: 356 total,   1 running, 355 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  4.2 us,  5.6 sy,  0.0 ni, 90.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\nMiB Mem :   7777.8 total,    281.6 free,   4394.8 used,   3101.3 buff/cache\nMiB Swap:   2048.0 total,    580.2 free,   1467.8 used.   3015.1 avail Mem \n\n    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                                                                                                 \n3811294 root      20   0   15440   4540   3768 R  20.0   0.1   0:00.03 top                                                                                                                     \n    682 avahi     20   0   10524   5696   3120 S   6.7   0.1 110:29.16 avahi-daemon                                                                                                            \n   7726 root      20   0  750872  21192   5772 S   6.7   0.3 259:56.50 travel-api  \n```\n说明：\n- `%Cpu(s)` 比如说有4个cpu，%Cpu(s)代表这4个的平均使用率。\n\n  cpu = 用户空间使用率(us) + 内核空间使用率(sy) + 空闲(id)\n\n  `ni` 用户空间通过改变进程优先级占用的cpu百分比\n\n  `wa` 等待io操作占用的cpu百分比\n\n  `hi/si` 硬/软中断进行cpu上下文切换占用的百分比\n\n- `RES` 使用的真实物理内存（KB）\n- `%CPU` 一个cpu的使用率，毕竟一个进程只占用一个cpu\n- `TIME+` 累计使用cpu时间\n\n附top使用快捷键说明：\n- `shift + m` # 按照内存使用率排序，shift m 等价于大写M\n- `shift + p` # 按照cpu使用率排序\n- `c` # 显示命令全路径\n- `F` # 挑选你要选择展示的列，按下空格选中，* 代表会展示的列(列会出现在最后)，按q退出。\n    可以展示进程使用哪一个cpu\n- 按`1` # 展示每个cpu的使用情况\n","source":"_posts/第18期：linux性能.md","raw":"---\ntitle: 第18期：linux性能\ndate: 2023-05-22 10:15:30\ntags:\n---\n##### 一、什么是性能问题？\n```\n突然有一天，公司开发在夜里打电话给你，“现在有很多用户说系统弹出一个错误，系统繁忙”之类的。\n开发同事一看接口返回500，看了后端日志好像没有特别明显的报错信息。\n\n这时，你赶忙上服务器看下nginx日志，好家伙，一看nginx日志发现后发现接口请求过了60s还没有响应。\n`top`看一下服务器资源，用户空间的cpu使用率100%，是哪些进程呢？php-fpm。里面发生了什么？我不知道啊？\n唉，重启服务能解决90%的问题，那就重启看看吧。果然，重启后用户反馈正常了。害，暂时是没有问题了，那下次再来一次怎么办？...无后续\n```\n\n看，cpu100%这类问题就归属性能问题。\n\n##### 研究性能问题需要学习操作系统主要组件原理\nCPU性能、内存、磁盘IO性能、网络\n\n衡量性能的指标：\n并发（吞吐）、响应快（时延）\n\n##### 二、CPU性能篇\n\n##### 什么是平均负载\n看一个例子：`uptime`\n```\n$ uptime\n02:34:03 up 2 days, 20:14,  1 user,  load average: 0.63, 0.83, 0.88\n```\n说明：\n- `02:34:03` 当前时间\n- `up 2 days, 20:14` 系统从开机后运行的时长\n- `1 user` 正在登录的用户数\n- `load average: 0.63, 0.83, 0.88` 最近1分钟、5分钟、15分钟的平均负载(Load average)\n\n`平均负载`是指单位时间内，系统处于可运行(Running或ready)和不可中断(blocked)的进程数。结合最近1分钟、5分钟、15分钟的平均负载，我们可以全面了解cpu的使用情况。像了解一天早中晚的气候变化。\n\nRunning是指正在使用cpu；Ready是指代码(指令)已经加载到了内存，等cpu来执行指令；\n\n不可中断是指进程在使用cpu，突然需要进行磁盘IO(读写)的长时间操作，先不用cpu，等IO操作完毕再回来使用cpu。\n\n一般而言，平均负载超过cpu核数70%就要检查cpu的使用情况，考虑是否优化。\n\n查看cpu核数\n```\ngrep 'model name' /proc/cpuinfo|wc -l\n```\n\n##### 什么是CPU使用率\ncpu使用率衡量了单位时间cpu的繁忙程度。\n\n对于I/O密集型进程，平均负载就高，但cpu却不繁忙，也就是cpu使用率不高。\n\n看一个例子：`top`\n```\n$ top\ntop - 11:15:27 up 40 days, 51 min,  1 user,  load average: 0.32, 0.27, 0.26\nTasks: 356 total,   1 running, 355 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  4.2 us,  5.6 sy,  0.0 ni, 90.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\nMiB Mem :   7777.8 total,    281.6 free,   4394.8 used,   3101.3 buff/cache\nMiB Swap:   2048.0 total,    580.2 free,   1467.8 used.   3015.1 avail Mem \n\n    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                                                                                                 \n3811294 root      20   0   15440   4540   3768 R  20.0   0.1   0:00.03 top                                                                                                                     \n    682 avahi     20   0   10524   5696   3120 S   6.7   0.1 110:29.16 avahi-daemon                                                                                                            \n   7726 root      20   0  750872  21192   5772 S   6.7   0.3 259:56.50 travel-api  \n```\n说明：\n- `%Cpu(s)` 比如说有4个cpu，%Cpu(s)代表这4个的平均使用率。\n\n  cpu = 用户空间使用率(us) + 内核空间使用率(sy) + 空闲(id)\n\n  `ni` 用户空间通过改变进程优先级占用的cpu百分比\n\n  `wa` 等待io操作占用的cpu百分比\n\n  `hi/si` 硬/软中断进行cpu上下文切换占用的百分比\n\n- `RES` 使用的真实物理内存（KB）\n- `%CPU` 一个cpu的使用率，毕竟一个进程只占用一个cpu\n- `TIME+` 累计使用cpu时间\n\n附top使用快捷键说明：\n- `shift + m` # 按照内存使用率排序，shift m 等价于大写M\n- `shift + p` # 按照cpu使用率排序\n- `c` # 显示命令全路径\n- `F` # 挑选你要选择展示的列，按下空格选中，* 代表会展示的列(列会出现在最后)，按q退出。\n    可以展示进程使用哪一个cpu\n- 按`1` # 展示每个cpu的使用情况\n","slug":"第18期：linux性能","published":1,"updated":"2024-03-06T06:55:18.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt6h00089kln0x7ueczk","content":"<h5 id=\"一、什么是性能问题？\"><a href=\"#一、什么是性能问题？\" class=\"headerlink\" title=\"一、什么是性能问题？\"></a>一、什么是性能问题？</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">突然有一天，公司开发在夜里打电话给你，“现在有很多用户说系统弹出一个错误，系统繁忙”之类的。</span><br><span class=\"line\">开发同事一看接口返回500，看了后端日志好像没有特别明显的报错信息。</span><br><span class=\"line\"></span><br><span class=\"line\">这时，你赶忙上服务器看下nginx日志，好家伙，一看nginx日志发现后发现接口请求过了60s还没有响应。</span><br><span class=\"line\">`top`看一下服务器资源，用户空间的cpu使用率100%，是哪些进程呢？php-fpm。里面发生了什么？我不知道啊？</span><br><span class=\"line\">唉，重启服务能解决90%的问题，那就重启看看吧。果然，重启后用户反馈正常了。害，暂时是没有问题了，那下次再来一次怎么办？...无后续</span><br></pre></td></tr></table></figure>\n\n<p>看，cpu100%这类问题就归属性能问题。</p>\n<h5 id=\"研究性能问题需要学习操作系统主要组件原理\"><a href=\"#研究性能问题需要学习操作系统主要组件原理\" class=\"headerlink\" title=\"研究性能问题需要学习操作系统主要组件原理\"></a>研究性能问题需要学习操作系统主要组件原理</h5><p>CPU性能、内存、磁盘IO性能、网络</p>\n<p>衡量性能的指标：<br>并发（吞吐）、响应快（时延）</p>\n<h5 id=\"二、CPU性能篇\"><a href=\"#二、CPU性能篇\" class=\"headerlink\" title=\"二、CPU性能篇\"></a>二、CPU性能篇</h5><h5 id=\"什么是平均负载\"><a href=\"#什么是平均负载\" class=\"headerlink\" title=\"什么是平均负载\"></a>什么是平均负载</h5><p>看一个例子：<code>uptime</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ uptime</span><br><span class=\"line\">02:34:03 up 2 days, 20:14,  1 user,  load average: 0.63, 0.83, 0.88</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><code>02:34:03</code> 当前时间</li>\n<li><code>up 2 days, 20:14</code> 系统从开机后运行的时长</li>\n<li><code>1 user</code> 正在登录的用户数</li>\n<li><code>load average: 0.63, 0.83, 0.88</code> 最近1分钟、5分钟、15分钟的平均负载(Load average)</li>\n</ul>\n<p><code>平均负载</code>是指单位时间内，系统处于可运行(Running或ready)和不可中断(blocked)的进程数。结合最近1分钟、5分钟、15分钟的平均负载，我们可以全面了解cpu的使用情况。像了解一天早中晚的气候变化。</p>\n<p>Running是指正在使用cpu；Ready是指代码(指令)已经加载到了内存，等cpu来执行指令；</p>\n<p>不可中断是指进程在使用cpu，突然需要进行磁盘IO(读写)的长时间操作，先不用cpu，等IO操作完毕再回来使用cpu。</p>\n<p>一般而言，平均负载超过cpu核数70%就要检查cpu的使用情况，考虑是否优化。</p>\n<p>查看cpu核数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep &#x27;model name&#x27; /proc/cpuinfo|wc -l</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"什么是CPU使用率\"><a href=\"#什么是CPU使用率\" class=\"headerlink\" title=\"什么是CPU使用率\"></a>什么是CPU使用率</h5><p>cpu使用率衡量了单位时间cpu的繁忙程度。</p>\n<p>对于I&#x2F;O密集型进程，平均负载就高，但cpu却不繁忙，也就是cpu使用率不高。</p>\n<p>看一个例子：<code>top</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ top</span><br><span class=\"line\">top - 11:15:27 up 40 days, 51 min,  1 user,  load average: 0.32, 0.27, 0.26</span><br><span class=\"line\">Tasks: 356 total,   1 running, 355 sleeping,   0 stopped,   0 zombie</span><br><span class=\"line\">%Cpu(s):  4.2 us,  5.6 sy,  0.0 ni, 90.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class=\"line\">MiB Mem :   7777.8 total,    281.6 free,   4394.8 used,   3101.3 buff/cache</span><br><span class=\"line\">MiB Swap:   2048.0 total,    580.2 free,   1467.8 used.   3015.1 avail Mem </span><br><span class=\"line\"></span><br><span class=\"line\">    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                                                                                                 </span><br><span class=\"line\">3811294 root      20   0   15440   4540   3768 R  20.0   0.1   0:00.03 top                                                                                                                     </span><br><span class=\"line\">    682 avahi     20   0   10524   5696   3120 S   6.7   0.1 110:29.16 avahi-daemon                                                                                                            </span><br><span class=\"line\">   7726 root      20   0  750872  21192   5772 S   6.7   0.3 259:56.50 travel-api  </span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><p><code>%Cpu(s)</code> 比如说有4个cpu，%Cpu(s)代表这4个的平均使用率。</p>\n<p>cpu &#x3D; 用户空间使用率(us) + 内核空间使用率(sy) + 空闲(id)</p>\n<p><code>ni</code> 用户空间通过改变进程优先级占用的cpu百分比</p>\n<p><code>wa</code> 等待io操作占用的cpu百分比</p>\n<p><code>hi/si</code> 硬&#x2F;软中断进行cpu上下文切换占用的百分比</p>\n</li>\n<li><p><code>RES</code> 使用的真实物理内存（KB）</p>\n</li>\n<li><p><code>%CPU</code> 一个cpu的使用率，毕竟一个进程只占用一个cpu</p>\n</li>\n<li><p><code>TIME+</code> 累计使用cpu时间</p>\n</li>\n</ul>\n<p>附top使用快捷键说明：</p>\n<ul>\n<li><code>shift + m</code> # 按照内存使用率排序，shift m 等价于大写M</li>\n<li><code>shift + p</code> # 按照cpu使用率排序</li>\n<li><code>c</code> # 显示命令全路径</li>\n<li><code>F</code> # 挑选你要选择展示的列，按下空格选中，* 代表会展示的列(列会出现在最后)，按q退出。<br>  可以展示进程使用哪一个cpu</li>\n<li>按<code>1</code> # 展示每个cpu的使用情况</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"一、什么是性能问题？\"><a href=\"#一、什么是性能问题？\" class=\"headerlink\" title=\"一、什么是性能问题？\"></a>一、什么是性能问题？</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">突然有一天，公司开发在夜里打电话给你，“现在有很多用户说系统弹出一个错误，系统繁忙”之类的。</span><br><span class=\"line\">开发同事一看接口返回500，看了后端日志好像没有特别明显的报错信息。</span><br><span class=\"line\"></span><br><span class=\"line\">这时，你赶忙上服务器看下nginx日志，好家伙，一看nginx日志发现后发现接口请求过了60s还没有响应。</span><br><span class=\"line\">`top`看一下服务器资源，用户空间的cpu使用率100%，是哪些进程呢？php-fpm。里面发生了什么？我不知道啊？</span><br><span class=\"line\">唉，重启服务能解决90%的问题，那就重启看看吧。果然，重启后用户反馈正常了。害，暂时是没有问题了，那下次再来一次怎么办？...无后续</span><br></pre></td></tr></table></figure>\n\n<p>看，cpu100%这类问题就归属性能问题。</p>\n<h5 id=\"研究性能问题需要学习操作系统主要组件原理\"><a href=\"#研究性能问题需要学习操作系统主要组件原理\" class=\"headerlink\" title=\"研究性能问题需要学习操作系统主要组件原理\"></a>研究性能问题需要学习操作系统主要组件原理</h5><p>CPU性能、内存、磁盘IO性能、网络</p>\n<p>衡量性能的指标：<br>并发（吞吐）、响应快（时延）</p>\n<h5 id=\"二、CPU性能篇\"><a href=\"#二、CPU性能篇\" class=\"headerlink\" title=\"二、CPU性能篇\"></a>二、CPU性能篇</h5><h5 id=\"什么是平均负载\"><a href=\"#什么是平均负载\" class=\"headerlink\" title=\"什么是平均负载\"></a>什么是平均负载</h5><p>看一个例子：<code>uptime</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ uptime</span><br><span class=\"line\">02:34:03 up 2 days, 20:14,  1 user,  load average: 0.63, 0.83, 0.88</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><code>02:34:03</code> 当前时间</li>\n<li><code>up 2 days, 20:14</code> 系统从开机后运行的时长</li>\n<li><code>1 user</code> 正在登录的用户数</li>\n<li><code>load average: 0.63, 0.83, 0.88</code> 最近1分钟、5分钟、15分钟的平均负载(Load average)</li>\n</ul>\n<p><code>平均负载</code>是指单位时间内，系统处于可运行(Running或ready)和不可中断(blocked)的进程数。结合最近1分钟、5分钟、15分钟的平均负载，我们可以全面了解cpu的使用情况。像了解一天早中晚的气候变化。</p>\n<p>Running是指正在使用cpu；Ready是指代码(指令)已经加载到了内存，等cpu来执行指令；</p>\n<p>不可中断是指进程在使用cpu，突然需要进行磁盘IO(读写)的长时间操作，先不用cpu，等IO操作完毕再回来使用cpu。</p>\n<p>一般而言，平均负载超过cpu核数70%就要检查cpu的使用情况，考虑是否优化。</p>\n<p>查看cpu核数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep &#x27;model name&#x27; /proc/cpuinfo|wc -l</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"什么是CPU使用率\"><a href=\"#什么是CPU使用率\" class=\"headerlink\" title=\"什么是CPU使用率\"></a>什么是CPU使用率</h5><p>cpu使用率衡量了单位时间cpu的繁忙程度。</p>\n<p>对于I&#x2F;O密集型进程，平均负载就高，但cpu却不繁忙，也就是cpu使用率不高。</p>\n<p>看一个例子：<code>top</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ top</span><br><span class=\"line\">top - 11:15:27 up 40 days, 51 min,  1 user,  load average: 0.32, 0.27, 0.26</span><br><span class=\"line\">Tasks: 356 total,   1 running, 355 sleeping,   0 stopped,   0 zombie</span><br><span class=\"line\">%Cpu(s):  4.2 us,  5.6 sy,  0.0 ni, 90.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class=\"line\">MiB Mem :   7777.8 total,    281.6 free,   4394.8 used,   3101.3 buff/cache</span><br><span class=\"line\">MiB Swap:   2048.0 total,    580.2 free,   1467.8 used.   3015.1 avail Mem </span><br><span class=\"line\"></span><br><span class=\"line\">    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                                                                                                 </span><br><span class=\"line\">3811294 root      20   0   15440   4540   3768 R  20.0   0.1   0:00.03 top                                                                                                                     </span><br><span class=\"line\">    682 avahi     20   0   10524   5696   3120 S   6.7   0.1 110:29.16 avahi-daemon                                                                                                            </span><br><span class=\"line\">   7726 root      20   0  750872  21192   5772 S   6.7   0.3 259:56.50 travel-api  </span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><p><code>%Cpu(s)</code> 比如说有4个cpu，%Cpu(s)代表这4个的平均使用率。</p>\n<p>cpu &#x3D; 用户空间使用率(us) + 内核空间使用率(sy) + 空闲(id)</p>\n<p><code>ni</code> 用户空间通过改变进程优先级占用的cpu百分比</p>\n<p><code>wa</code> 等待io操作占用的cpu百分比</p>\n<p><code>hi/si</code> 硬&#x2F;软中断进行cpu上下文切换占用的百分比</p>\n</li>\n<li><p><code>RES</code> 使用的真实物理内存（KB）</p>\n</li>\n<li><p><code>%CPU</code> 一个cpu的使用率，毕竟一个进程只占用一个cpu</p>\n</li>\n<li><p><code>TIME+</code> 累计使用cpu时间</p>\n</li>\n</ul>\n<p>附top使用快捷键说明：</p>\n<ul>\n<li><code>shift + m</code> # 按照内存使用率排序，shift m 等价于大写M</li>\n<li><code>shift + p</code> # 按照cpu使用率排序</li>\n<li><code>c</code> # 显示命令全路径</li>\n<li><code>F</code> # 挑选你要选择展示的列，按下空格选中，* 代表会展示的列(列会出现在最后)，按q退出。<br>  可以展示进程使用哪一个cpu</li>\n<li>按<code>1</code> # 展示每个cpu的使用情况</li>\n</ul>\n"},{"title":"第19期：Mysql","date":"2023-05-22T04:40:52.000Z","_content":"#### 连接数据库\nmysql -h127.0.0.1 -P3306 -uroot -prootpassword\n\n#### 查看数据库\nshow databases;\n\n#### 选择数据库\nuse test;\n\n### 表结构系列操作\n#### 添加字段\nALTER TABLE user\nADD age int(3); \n\n#### 创建索引\nCREATE INDEX idx_name\nON user (name);\n\n### 数据系列操作\n#### 插入\nINSERT INTO user\nVALUES (10, 'root', 'root', 'xxxx@163.com');\n\n#### 更新\nUPDATE user\nSET username='robot', password='robot'\nWHERE username = 'root';\n\n#### 删除\nDELETE FROM user\nWHERE username = 'robot'; // 删除行\n\nTRUNCATE TABLE user; // 清空表\n\n#### 查询\nSELECT * FROM mytable LIMIT 0, 5;\n\n### MySQL 主从复制原理\n```\nmysql主从复制可以实现负载，读写分离，master主要负责写，node负责读。\n\n主从复制类型：\n- 主从同步：master和node都写完才通知用户\n- 主从异步：master一写完就通知用户\n- 主从半同步：master和任一个node写完就通知用户\n\n主从复制原理：\n- master需开启了二进制日志跟踪，node服务器通知master：我现在读到了最新的更新位置，然后封锁继续等待master更新通知。\n\n主从复制具体过程：\n1/ node启动2个线程，一个IO，另一个sql线程；\n2/ IO线程去请求master的binlog日志，且将binlog写到redo log(中继日志)；master特地开了一个log dump进程传输binlog。\n3/ node的sql进程用来读redo log，解析成insert等具体操作执行。\n\n```\n## Mysql主备搭建\n```\nmkdir /soft && mkdir /soft/mysql/\ncd /soft/mysql/\n\nwget https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.20-linux-glibc2.12-x86_64.tar.xz\n\ntar -xvJf mysql-8.0.20-linux-glibc2.12-x86_64.tar.xz\nmv mysql-8.0.20-linux-glibc2.12-x86_64 mysql8.0\n\n# 卸载内核自带maridb\nrpm -qa | grep mariadb\nrpm -e --nodeps mariadb-libs-5.5.56-2.el7.x86_64\n\ncd mysql8.0 && mkdir data\n\n# 配置环境变量\nvi /etc/profile\n\nexport PATH=$PATH:/soft/mysql/mysql8.0/bin:/soft/mysql/mysql8.0/lib\nsource /etc/profile\n\n# 创建用户和用户组\ngroupadd mysql\nuseradd -g mysql mysql\nchown -R mysql.mysql /soft/mysql/mysql8.0\n\n# 初始化mysql并获临时密码\ncd /soft/mysql/mysql8.0/bin\n./mysqld --user=mysql --basedir=/soft/mysql/mysql8.0 --datadir=/soft/mysql/mysql8.0/data/ --initialize\n\n# mysql启动默认读取/etc/my.cnf\n\n[mysqld]\nbasedir=/soft/mysql/mysql8.0\ndatadir=/soft/mysql/mysql8.0/data\n\nport=3306\nsocket=/tmp/mysql.sock\ncharacter-set-server=UTF8MB4\n\n# 编辑启动模板\ncd /soft/mysql/mysql8.0\nvi support-files/mysql.server\n\nbasedir=\ndatadir=\n  \n  替换成：\n\nbasedir=/soft/mysql/mysql8.0\ndatadir=/soft/mysql/mysql8.0/data\n\n# 通过启动脚本启动服务\n[root@localhost]# ./support-files/mysql.server start\nStarting MySQL.Logging to '/soft/mysql/mysql8.0/data/localhost.localdomain.err'.\n.. SUCCESS!\n\n# 查看进程\nps aux | grep mysql\n\n# 临时密码登录并修改密码\nmysql -uroot -p\n\nmysql> show databases;\nERROR 1820 (HY000): You must reset your password using ALTER USER ...\n\nalter user 'root'@'localhost' identified with mysql_native_password by '123456';\n\n# 自制mysql启动服务\n./support-files/mysql.server stop\n\ncp -a ./support-files/mysql.server /etc/init.d/mysql\n\nchmod +x /etc/init.d/mysql\n\n# 通过系统etc目录下的启动文件创建系统服务\n[root@localhost]# chkconfig --add mysql\n\nservice mysql status\n\n# 设置能远程root连接\nmysql> use mysql;\n\n# 直接通过update修改系统用户表\nmysql> update user set host=\"%\" where user=\"root\";\n\n# 刷新一下所有用户的权限信息\nmysql> flush privileges;\n\n\nchange master to master_host='192.168.31.87',\n       master_user='ricky',\n       master_password='123456',\n       master_port=3306,\n       master_log_file='mysql-bin-log.000005',\n       master_log_pos=3339;\n\n# 创建用户，@指明任意客户端可登录\ncreate user 'ricky'@'%' identified with mysql_native_password by '123456';\n```\n### 会话连接\n```\n# 查看客户端连接状态，客户端如果太长时间没动静，连接器就会自动将它断开。这个时间是由参数 wait_timeout 控制的，默认值是 8 小时。\nshow processlist;\n```\n### 授权\n```\nGRANT SELECT, INSERT ON test.user TO 'pig'@'%';\nGRANT ALL ON *.* TO 'pig'@'%';\nGRANT ALL ON maindataplus.* TO 'pig'@'%';\n\n# 让用户可以授权\nGRANT privileges ON databasename.tablename TO 'username'@'host' WITH GRANT OPTION;\n\n# 撤销授权\nREVOKE privilege ON databasename.tablename FROM 'username'@'host';\n```\n\n### 更改用户密码\n```\nSET PASSWORD FOR 'username'@'host' = PASSWORD('newpassword');\n```\n\n### 备份与恢复\n```\nmysqldump 将数据库中的数据备份成一个文本文件，表的结构和表中的数据将存储在生成的文本文件中。\n\n# 备份\nmysqldump -u <username> -p <database> [<table1> <table2> ...] > backup.sql\n\n# 恢复\nmysql -u <username> -p <database> < backup.sql\n```\n\n### 参考\n```\nhttps://juejin.cn/post/6844904021497479176\n```","source":"_posts/第19期：Mysql.md","raw":"---\ntitle: 第19期：Mysql\ndate: 2023-05-22 12:40:52\ntags:\n---\n#### 连接数据库\nmysql -h127.0.0.1 -P3306 -uroot -prootpassword\n\n#### 查看数据库\nshow databases;\n\n#### 选择数据库\nuse test;\n\n### 表结构系列操作\n#### 添加字段\nALTER TABLE user\nADD age int(3); \n\n#### 创建索引\nCREATE INDEX idx_name\nON user (name);\n\n### 数据系列操作\n#### 插入\nINSERT INTO user\nVALUES (10, 'root', 'root', 'xxxx@163.com');\n\n#### 更新\nUPDATE user\nSET username='robot', password='robot'\nWHERE username = 'root';\n\n#### 删除\nDELETE FROM user\nWHERE username = 'robot'; // 删除行\n\nTRUNCATE TABLE user; // 清空表\n\n#### 查询\nSELECT * FROM mytable LIMIT 0, 5;\n\n### MySQL 主从复制原理\n```\nmysql主从复制可以实现负载，读写分离，master主要负责写，node负责读。\n\n主从复制类型：\n- 主从同步：master和node都写完才通知用户\n- 主从异步：master一写完就通知用户\n- 主从半同步：master和任一个node写完就通知用户\n\n主从复制原理：\n- master需开启了二进制日志跟踪，node服务器通知master：我现在读到了最新的更新位置，然后封锁继续等待master更新通知。\n\n主从复制具体过程：\n1/ node启动2个线程，一个IO，另一个sql线程；\n2/ IO线程去请求master的binlog日志，且将binlog写到redo log(中继日志)；master特地开了一个log dump进程传输binlog。\n3/ node的sql进程用来读redo log，解析成insert等具体操作执行。\n\n```\n## Mysql主备搭建\n```\nmkdir /soft && mkdir /soft/mysql/\ncd /soft/mysql/\n\nwget https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.20-linux-glibc2.12-x86_64.tar.xz\n\ntar -xvJf mysql-8.0.20-linux-glibc2.12-x86_64.tar.xz\nmv mysql-8.0.20-linux-glibc2.12-x86_64 mysql8.0\n\n# 卸载内核自带maridb\nrpm -qa | grep mariadb\nrpm -e --nodeps mariadb-libs-5.5.56-2.el7.x86_64\n\ncd mysql8.0 && mkdir data\n\n# 配置环境变量\nvi /etc/profile\n\nexport PATH=$PATH:/soft/mysql/mysql8.0/bin:/soft/mysql/mysql8.0/lib\nsource /etc/profile\n\n# 创建用户和用户组\ngroupadd mysql\nuseradd -g mysql mysql\nchown -R mysql.mysql /soft/mysql/mysql8.0\n\n# 初始化mysql并获临时密码\ncd /soft/mysql/mysql8.0/bin\n./mysqld --user=mysql --basedir=/soft/mysql/mysql8.0 --datadir=/soft/mysql/mysql8.0/data/ --initialize\n\n# mysql启动默认读取/etc/my.cnf\n\n[mysqld]\nbasedir=/soft/mysql/mysql8.0\ndatadir=/soft/mysql/mysql8.0/data\n\nport=3306\nsocket=/tmp/mysql.sock\ncharacter-set-server=UTF8MB4\n\n# 编辑启动模板\ncd /soft/mysql/mysql8.0\nvi support-files/mysql.server\n\nbasedir=\ndatadir=\n  \n  替换成：\n\nbasedir=/soft/mysql/mysql8.0\ndatadir=/soft/mysql/mysql8.0/data\n\n# 通过启动脚本启动服务\n[root@localhost]# ./support-files/mysql.server start\nStarting MySQL.Logging to '/soft/mysql/mysql8.0/data/localhost.localdomain.err'.\n.. SUCCESS!\n\n# 查看进程\nps aux | grep mysql\n\n# 临时密码登录并修改密码\nmysql -uroot -p\n\nmysql> show databases;\nERROR 1820 (HY000): You must reset your password using ALTER USER ...\n\nalter user 'root'@'localhost' identified with mysql_native_password by '123456';\n\n# 自制mysql启动服务\n./support-files/mysql.server stop\n\ncp -a ./support-files/mysql.server /etc/init.d/mysql\n\nchmod +x /etc/init.d/mysql\n\n# 通过系统etc目录下的启动文件创建系统服务\n[root@localhost]# chkconfig --add mysql\n\nservice mysql status\n\n# 设置能远程root连接\nmysql> use mysql;\n\n# 直接通过update修改系统用户表\nmysql> update user set host=\"%\" where user=\"root\";\n\n# 刷新一下所有用户的权限信息\nmysql> flush privileges;\n\n\nchange master to master_host='192.168.31.87',\n       master_user='ricky',\n       master_password='123456',\n       master_port=3306,\n       master_log_file='mysql-bin-log.000005',\n       master_log_pos=3339;\n\n# 创建用户，@指明任意客户端可登录\ncreate user 'ricky'@'%' identified with mysql_native_password by '123456';\n```\n### 会话连接\n```\n# 查看客户端连接状态，客户端如果太长时间没动静，连接器就会自动将它断开。这个时间是由参数 wait_timeout 控制的，默认值是 8 小时。\nshow processlist;\n```\n### 授权\n```\nGRANT SELECT, INSERT ON test.user TO 'pig'@'%';\nGRANT ALL ON *.* TO 'pig'@'%';\nGRANT ALL ON maindataplus.* TO 'pig'@'%';\n\n# 让用户可以授权\nGRANT privileges ON databasename.tablename TO 'username'@'host' WITH GRANT OPTION;\n\n# 撤销授权\nREVOKE privilege ON databasename.tablename FROM 'username'@'host';\n```\n\n### 更改用户密码\n```\nSET PASSWORD FOR 'username'@'host' = PASSWORD('newpassword');\n```\n\n### 备份与恢复\n```\nmysqldump 将数据库中的数据备份成一个文本文件，表的结构和表中的数据将存储在生成的文本文件中。\n\n# 备份\nmysqldump -u <username> -p <database> [<table1> <table2> ...] > backup.sql\n\n# 恢复\nmysql -u <username> -p <database> < backup.sql\n```\n\n### 参考\n```\nhttps://juejin.cn/post/6844904021497479176\n```","slug":"第19期：Mysql","published":1,"updated":"2024-03-06T06:55:18.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt6i00099kln930222dw","content":"<h4 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h4><p>mysql -h127.0.0.1 -P3306 -uroot -prootpassword</p>\n<h4 id=\"查看数据库\"><a href=\"#查看数据库\" class=\"headerlink\" title=\"查看数据库\"></a>查看数据库</h4><p>show databases;</p>\n<h4 id=\"选择数据库\"><a href=\"#选择数据库\" class=\"headerlink\" title=\"选择数据库\"></a>选择数据库</h4><p>use test;</p>\n<h3 id=\"表结构系列操作\"><a href=\"#表结构系列操作\" class=\"headerlink\" title=\"表结构系列操作\"></a>表结构系列操作</h3><h4 id=\"添加字段\"><a href=\"#添加字段\" class=\"headerlink\" title=\"添加字段\"></a>添加字段</h4><p>ALTER TABLE user<br>ADD age int(3); </p>\n<h4 id=\"创建索引\"><a href=\"#创建索引\" class=\"headerlink\" title=\"创建索引\"></a>创建索引</h4><p>CREATE INDEX idx_name<br>ON user (name);</p>\n<h3 id=\"数据系列操作\"><a href=\"#数据系列操作\" class=\"headerlink\" title=\"数据系列操作\"></a>数据系列操作</h3><h4 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a>插入</h4><p>INSERT INTO user<br>VALUES (10, ‘root’, ‘root’, ‘<a href=\"mailto:&#x78;&#120;&#120;&#120;&#x40;&#49;&#x36;&#51;&#46;&#x63;&#x6f;&#x6d;\">&#x78;&#120;&#120;&#120;&#x40;&#49;&#x36;&#51;&#46;&#x63;&#x6f;&#x6d;</a>‘);</p>\n<h4 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h4><p>UPDATE user<br>SET username&#x3D;’robot’, password&#x3D;’robot’<br>WHERE username &#x3D; ‘root’;</p>\n<h4 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h4><p>DELETE FROM user<br>WHERE username &#x3D; ‘robot’; &#x2F;&#x2F; 删除行</p>\n<p>TRUNCATE TABLE user; &#x2F;&#x2F; 清空表</p>\n<h4 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h4><p>SELECT * FROM mytable LIMIT 0, 5;</p>\n<h3 id=\"MySQL-主从复制原理\"><a href=\"#MySQL-主从复制原理\" class=\"headerlink\" title=\"MySQL 主从复制原理\"></a>MySQL 主从复制原理</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql主从复制可以实现负载，读写分离，master主要负责写，node负责读。</span><br><span class=\"line\"></span><br><span class=\"line\">主从复制类型：</span><br><span class=\"line\">- 主从同步：master和node都写完才通知用户</span><br><span class=\"line\">- 主从异步：master一写完就通知用户</span><br><span class=\"line\">- 主从半同步：master和任一个node写完就通知用户</span><br><span class=\"line\"></span><br><span class=\"line\">主从复制原理：</span><br><span class=\"line\">- master需开启了二进制日志跟踪，node服务器通知master：我现在读到了最新的更新位置，然后封锁继续等待master更新通知。</span><br><span class=\"line\"></span><br><span class=\"line\">主从复制具体过程：</span><br><span class=\"line\">1/ node启动2个线程，一个IO，另一个sql线程；</span><br><span class=\"line\">2/ IO线程去请求master的binlog日志，且将binlog写到redo log(中继日志)；master特地开了一个log dump进程传输binlog。</span><br><span class=\"line\">3/ node的sql进程用来读redo log，解析成insert等具体操作执行。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"Mysql主备搭建\"><a href=\"#Mysql主备搭建\" class=\"headerlink\" title=\"Mysql主备搭建\"></a>Mysql主备搭建</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /soft &amp;&amp; mkdir /soft/mysql/</span><br><span class=\"line\">cd /soft/mysql/</span><br><span class=\"line\"></span><br><span class=\"line\">wget https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.20-linux-glibc2.12-x86_64.tar.xz</span><br><span class=\"line\"></span><br><span class=\"line\">tar -xvJf mysql-8.0.20-linux-glibc2.12-x86_64.tar.xz</span><br><span class=\"line\">mv mysql-8.0.20-linux-glibc2.12-x86_64 mysql8.0</span><br><span class=\"line\"></span><br><span class=\"line\"># 卸载内核自带maridb</span><br><span class=\"line\">rpm -qa | grep mariadb</span><br><span class=\"line\">rpm -e --nodeps mariadb-libs-5.5.56-2.el7.x86_64</span><br><span class=\"line\"></span><br><span class=\"line\">cd mysql8.0 &amp;&amp; mkdir data</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置环境变量</span><br><span class=\"line\">vi /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">export PATH=$PATH:/soft/mysql/mysql8.0/bin:/soft/mysql/mysql8.0/lib</span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建用户和用户组</span><br><span class=\"line\">groupadd mysql</span><br><span class=\"line\">useradd -g mysql mysql</span><br><span class=\"line\">chown -R mysql.mysql /soft/mysql/mysql8.0</span><br><span class=\"line\"></span><br><span class=\"line\"># 初始化mysql并获临时密码</span><br><span class=\"line\">cd /soft/mysql/mysql8.0/bin</span><br><span class=\"line\">./mysqld --user=mysql --basedir=/soft/mysql/mysql8.0 --datadir=/soft/mysql/mysql8.0/data/ --initialize</span><br><span class=\"line\"></span><br><span class=\"line\"># mysql启动默认读取/etc/my.cnf</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">basedir=/soft/mysql/mysql8.0</span><br><span class=\"line\">datadir=/soft/mysql/mysql8.0/data</span><br><span class=\"line\"></span><br><span class=\"line\">port=3306</span><br><span class=\"line\">socket=/tmp/mysql.sock</span><br><span class=\"line\">character-set-server=UTF8MB4</span><br><span class=\"line\"></span><br><span class=\"line\"># 编辑启动模板</span><br><span class=\"line\">cd /soft/mysql/mysql8.0</span><br><span class=\"line\">vi support-files/mysql.server</span><br><span class=\"line\"></span><br><span class=\"line\">basedir=</span><br><span class=\"line\">datadir=</span><br><span class=\"line\">  </span><br><span class=\"line\">  替换成：</span><br><span class=\"line\"></span><br><span class=\"line\">basedir=/soft/mysql/mysql8.0</span><br><span class=\"line\">datadir=/soft/mysql/mysql8.0/data</span><br><span class=\"line\"></span><br><span class=\"line\"># 通过启动脚本启动服务</span><br><span class=\"line\">[root@localhost]# ./support-files/mysql.server start</span><br><span class=\"line\">Starting MySQL.Logging to &#x27;/soft/mysql/mysql8.0/data/localhost.localdomain.err&#x27;.</span><br><span class=\"line\">.. SUCCESS!</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看进程</span><br><span class=\"line\">ps aux | grep mysql</span><br><span class=\"line\"></span><br><span class=\"line\"># 临时密码登录并修改密码</span><br><span class=\"line\">mysql -uroot -p</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; show databases;</span><br><span class=\"line\">ERROR 1820 (HY000): You must reset your password using ALTER USER ...</span><br><span class=\"line\"></span><br><span class=\"line\">alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified with mysql_native_password by &#x27;123456&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\"># 自制mysql启动服务</span><br><span class=\"line\">./support-files/mysql.server stop</span><br><span class=\"line\"></span><br><span class=\"line\">cp -a ./support-files/mysql.server /etc/init.d/mysql</span><br><span class=\"line\"></span><br><span class=\"line\">chmod +x /etc/init.d/mysql</span><br><span class=\"line\"></span><br><span class=\"line\"># 通过系统etc目录下的启动文件创建系统服务</span><br><span class=\"line\">[root@localhost]# chkconfig --add mysql</span><br><span class=\"line\"></span><br><span class=\"line\">service mysql status</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置能远程root连接</span><br><span class=\"line\">mysql&gt; use mysql;</span><br><span class=\"line\"></span><br><span class=\"line\"># 直接通过update修改系统用户表</span><br><span class=\"line\">mysql&gt; update user set host=&quot;%&quot; where user=&quot;root&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\"># 刷新一下所有用户的权限信息</span><br><span class=\"line\">mysql&gt; flush privileges;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">change master to master_host=&#x27;192.168.31.87&#x27;,</span><br><span class=\"line\">       master_user=&#x27;ricky&#x27;,</span><br><span class=\"line\">       master_password=&#x27;123456&#x27;,</span><br><span class=\"line\">       master_port=3306,</span><br><span class=\"line\">       master_log_file=&#x27;mysql-bin-log.000005&#x27;,</span><br><span class=\"line\">       master_log_pos=3339;</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建用户，@指明任意客户端可登录</span><br><span class=\"line\">create user &#x27;ricky&#x27;@&#x27;%&#x27; identified with mysql_native_password by &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"会话连接\"><a href=\"#会话连接\" class=\"headerlink\" title=\"会话连接\"></a>会话连接</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看客户端连接状态，客户端如果太长时间没动静，连接器就会自动将它断开。这个时间是由参数 wait_timeout 控制的，默认值是 8 小时。</span><br><span class=\"line\">show processlist;</span><br></pre></td></tr></table></figure>\n<h3 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRANT SELECT, INSERT ON test.user TO &#x27;pig&#x27;@&#x27;%&#x27;;</span><br><span class=\"line\">GRANT ALL ON *.* TO &#x27;pig&#x27;@&#x27;%&#x27;;</span><br><span class=\"line\">GRANT ALL ON maindataplus.* TO &#x27;pig&#x27;@&#x27;%&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\"># 让用户可以授权</span><br><span class=\"line\">GRANT privileges ON databasename.tablename TO &#x27;username&#x27;@&#x27;host&#x27; WITH GRANT OPTION;</span><br><span class=\"line\"></span><br><span class=\"line\"># 撤销授权</span><br><span class=\"line\">REVOKE privilege ON databasename.tablename FROM &#x27;username&#x27;@&#x27;host&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"更改用户密码\"><a href=\"#更改用户密码\" class=\"headerlink\" title=\"更改用户密码\"></a>更改用户密码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET PASSWORD FOR &#x27;username&#x27;@&#x27;host&#x27; = PASSWORD(&#x27;newpassword&#x27;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"备份与恢复\"><a href=\"#备份与恢复\" class=\"headerlink\" title=\"备份与恢复\"></a>备份与恢复</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump 将数据库中的数据备份成一个文本文件，表的结构和表中的数据将存储在生成的文本文件中。</span><br><span class=\"line\"></span><br><span class=\"line\"># 备份</span><br><span class=\"line\">mysqldump -u &lt;username&gt; -p &lt;database&gt; [&lt;table1&gt; &lt;table2&gt; ...] &gt; backup.sql</span><br><span class=\"line\"></span><br><span class=\"line\"># 恢复</span><br><span class=\"line\">mysql -u &lt;username&gt; -p &lt;database&gt; &lt; backup.sql</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://juejin.cn/post/6844904021497479176</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h4><p>mysql -h127.0.0.1 -P3306 -uroot -prootpassword</p>\n<h4 id=\"查看数据库\"><a href=\"#查看数据库\" class=\"headerlink\" title=\"查看数据库\"></a>查看数据库</h4><p>show databases;</p>\n<h4 id=\"选择数据库\"><a href=\"#选择数据库\" class=\"headerlink\" title=\"选择数据库\"></a>选择数据库</h4><p>use test;</p>\n<h3 id=\"表结构系列操作\"><a href=\"#表结构系列操作\" class=\"headerlink\" title=\"表结构系列操作\"></a>表结构系列操作</h3><h4 id=\"添加字段\"><a href=\"#添加字段\" class=\"headerlink\" title=\"添加字段\"></a>添加字段</h4><p>ALTER TABLE user<br>ADD age int(3); </p>\n<h4 id=\"创建索引\"><a href=\"#创建索引\" class=\"headerlink\" title=\"创建索引\"></a>创建索引</h4><p>CREATE INDEX idx_name<br>ON user (name);</p>\n<h3 id=\"数据系列操作\"><a href=\"#数据系列操作\" class=\"headerlink\" title=\"数据系列操作\"></a>数据系列操作</h3><h4 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a>插入</h4><p>INSERT INTO user<br>VALUES (10, ‘root’, ‘root’, ‘<a href=\"mailto:&#x78;&#120;&#120;&#120;&#x40;&#49;&#x36;&#51;&#46;&#x63;&#x6f;&#x6d;\">&#x78;&#120;&#120;&#120;&#x40;&#49;&#x36;&#51;&#46;&#x63;&#x6f;&#x6d;</a>‘);</p>\n<h4 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h4><p>UPDATE user<br>SET username&#x3D;’robot’, password&#x3D;’robot’<br>WHERE username &#x3D; ‘root’;</p>\n<h4 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h4><p>DELETE FROM user<br>WHERE username &#x3D; ‘robot’; &#x2F;&#x2F; 删除行</p>\n<p>TRUNCATE TABLE user; &#x2F;&#x2F; 清空表</p>\n<h4 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h4><p>SELECT * FROM mytable LIMIT 0, 5;</p>\n<h3 id=\"MySQL-主从复制原理\"><a href=\"#MySQL-主从复制原理\" class=\"headerlink\" title=\"MySQL 主从复制原理\"></a>MySQL 主从复制原理</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql主从复制可以实现负载，读写分离，master主要负责写，node负责读。</span><br><span class=\"line\"></span><br><span class=\"line\">主从复制类型：</span><br><span class=\"line\">- 主从同步：master和node都写完才通知用户</span><br><span class=\"line\">- 主从异步：master一写完就通知用户</span><br><span class=\"line\">- 主从半同步：master和任一个node写完就通知用户</span><br><span class=\"line\"></span><br><span class=\"line\">主从复制原理：</span><br><span class=\"line\">- master需开启了二进制日志跟踪，node服务器通知master：我现在读到了最新的更新位置，然后封锁继续等待master更新通知。</span><br><span class=\"line\"></span><br><span class=\"line\">主从复制具体过程：</span><br><span class=\"line\">1/ node启动2个线程，一个IO，另一个sql线程；</span><br><span class=\"line\">2/ IO线程去请求master的binlog日志，且将binlog写到redo log(中继日志)；master特地开了一个log dump进程传输binlog。</span><br><span class=\"line\">3/ node的sql进程用来读redo log，解析成insert等具体操作执行。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"Mysql主备搭建\"><a href=\"#Mysql主备搭建\" class=\"headerlink\" title=\"Mysql主备搭建\"></a>Mysql主备搭建</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /soft &amp;&amp; mkdir /soft/mysql/</span><br><span class=\"line\">cd /soft/mysql/</span><br><span class=\"line\"></span><br><span class=\"line\">wget https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.20-linux-glibc2.12-x86_64.tar.xz</span><br><span class=\"line\"></span><br><span class=\"line\">tar -xvJf mysql-8.0.20-linux-glibc2.12-x86_64.tar.xz</span><br><span class=\"line\">mv mysql-8.0.20-linux-glibc2.12-x86_64 mysql8.0</span><br><span class=\"line\"></span><br><span class=\"line\"># 卸载内核自带maridb</span><br><span class=\"line\">rpm -qa | grep mariadb</span><br><span class=\"line\">rpm -e --nodeps mariadb-libs-5.5.56-2.el7.x86_64</span><br><span class=\"line\"></span><br><span class=\"line\">cd mysql8.0 &amp;&amp; mkdir data</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置环境变量</span><br><span class=\"line\">vi /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">export PATH=$PATH:/soft/mysql/mysql8.0/bin:/soft/mysql/mysql8.0/lib</span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建用户和用户组</span><br><span class=\"line\">groupadd mysql</span><br><span class=\"line\">useradd -g mysql mysql</span><br><span class=\"line\">chown -R mysql.mysql /soft/mysql/mysql8.0</span><br><span class=\"line\"></span><br><span class=\"line\"># 初始化mysql并获临时密码</span><br><span class=\"line\">cd /soft/mysql/mysql8.0/bin</span><br><span class=\"line\">./mysqld --user=mysql --basedir=/soft/mysql/mysql8.0 --datadir=/soft/mysql/mysql8.0/data/ --initialize</span><br><span class=\"line\"></span><br><span class=\"line\"># mysql启动默认读取/etc/my.cnf</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">basedir=/soft/mysql/mysql8.0</span><br><span class=\"line\">datadir=/soft/mysql/mysql8.0/data</span><br><span class=\"line\"></span><br><span class=\"line\">port=3306</span><br><span class=\"line\">socket=/tmp/mysql.sock</span><br><span class=\"line\">character-set-server=UTF8MB4</span><br><span class=\"line\"></span><br><span class=\"line\"># 编辑启动模板</span><br><span class=\"line\">cd /soft/mysql/mysql8.0</span><br><span class=\"line\">vi support-files/mysql.server</span><br><span class=\"line\"></span><br><span class=\"line\">basedir=</span><br><span class=\"line\">datadir=</span><br><span class=\"line\">  </span><br><span class=\"line\">  替换成：</span><br><span class=\"line\"></span><br><span class=\"line\">basedir=/soft/mysql/mysql8.0</span><br><span class=\"line\">datadir=/soft/mysql/mysql8.0/data</span><br><span class=\"line\"></span><br><span class=\"line\"># 通过启动脚本启动服务</span><br><span class=\"line\">[root@localhost]# ./support-files/mysql.server start</span><br><span class=\"line\">Starting MySQL.Logging to &#x27;/soft/mysql/mysql8.0/data/localhost.localdomain.err&#x27;.</span><br><span class=\"line\">.. SUCCESS!</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看进程</span><br><span class=\"line\">ps aux | grep mysql</span><br><span class=\"line\"></span><br><span class=\"line\"># 临时密码登录并修改密码</span><br><span class=\"line\">mysql -uroot -p</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; show databases;</span><br><span class=\"line\">ERROR 1820 (HY000): You must reset your password using ALTER USER ...</span><br><span class=\"line\"></span><br><span class=\"line\">alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified with mysql_native_password by &#x27;123456&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\"># 自制mysql启动服务</span><br><span class=\"line\">./support-files/mysql.server stop</span><br><span class=\"line\"></span><br><span class=\"line\">cp -a ./support-files/mysql.server /etc/init.d/mysql</span><br><span class=\"line\"></span><br><span class=\"line\">chmod +x /etc/init.d/mysql</span><br><span class=\"line\"></span><br><span class=\"line\"># 通过系统etc目录下的启动文件创建系统服务</span><br><span class=\"line\">[root@localhost]# chkconfig --add mysql</span><br><span class=\"line\"></span><br><span class=\"line\">service mysql status</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置能远程root连接</span><br><span class=\"line\">mysql&gt; use mysql;</span><br><span class=\"line\"></span><br><span class=\"line\"># 直接通过update修改系统用户表</span><br><span class=\"line\">mysql&gt; update user set host=&quot;%&quot; where user=&quot;root&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\"># 刷新一下所有用户的权限信息</span><br><span class=\"line\">mysql&gt; flush privileges;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">change master to master_host=&#x27;192.168.31.87&#x27;,</span><br><span class=\"line\">       master_user=&#x27;ricky&#x27;,</span><br><span class=\"line\">       master_password=&#x27;123456&#x27;,</span><br><span class=\"line\">       master_port=3306,</span><br><span class=\"line\">       master_log_file=&#x27;mysql-bin-log.000005&#x27;,</span><br><span class=\"line\">       master_log_pos=3339;</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建用户，@指明任意客户端可登录</span><br><span class=\"line\">create user &#x27;ricky&#x27;@&#x27;%&#x27; identified with mysql_native_password by &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"会话连接\"><a href=\"#会话连接\" class=\"headerlink\" title=\"会话连接\"></a>会话连接</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看客户端连接状态，客户端如果太长时间没动静，连接器就会自动将它断开。这个时间是由参数 wait_timeout 控制的，默认值是 8 小时。</span><br><span class=\"line\">show processlist;</span><br></pre></td></tr></table></figure>\n<h3 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRANT SELECT, INSERT ON test.user TO &#x27;pig&#x27;@&#x27;%&#x27;;</span><br><span class=\"line\">GRANT ALL ON *.* TO &#x27;pig&#x27;@&#x27;%&#x27;;</span><br><span class=\"line\">GRANT ALL ON maindataplus.* TO &#x27;pig&#x27;@&#x27;%&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\"># 让用户可以授权</span><br><span class=\"line\">GRANT privileges ON databasename.tablename TO &#x27;username&#x27;@&#x27;host&#x27; WITH GRANT OPTION;</span><br><span class=\"line\"></span><br><span class=\"line\"># 撤销授权</span><br><span class=\"line\">REVOKE privilege ON databasename.tablename FROM &#x27;username&#x27;@&#x27;host&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"更改用户密码\"><a href=\"#更改用户密码\" class=\"headerlink\" title=\"更改用户密码\"></a>更改用户密码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET PASSWORD FOR &#x27;username&#x27;@&#x27;host&#x27; = PASSWORD(&#x27;newpassword&#x27;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"备份与恢复\"><a href=\"#备份与恢复\" class=\"headerlink\" title=\"备份与恢复\"></a>备份与恢复</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump 将数据库中的数据备份成一个文本文件，表的结构和表中的数据将存储在生成的文本文件中。</span><br><span class=\"line\"></span><br><span class=\"line\"># 备份</span><br><span class=\"line\">mysqldump -u &lt;username&gt; -p &lt;database&gt; [&lt;table1&gt; &lt;table2&gt; ...] &gt; backup.sql</span><br><span class=\"line\"></span><br><span class=\"line\"># 恢复</span><br><span class=\"line\">mysql -u &lt;username&gt; -p &lt;database&gt; &lt; backup.sql</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://juejin.cn/post/6844904021497479176</span><br></pre></td></tr></table></figure>"},{"title":"第20期：Jenkins","date":"2023-05-22T06:38:13.000Z","_content":"#### Jenkins简介\n开源的基于Java的提供可持续化集成服务的平台\n\n#### install jenkins on centos7\njava11安装\n```\nyum install java-11-openjdk-devel\n```\n说明：使用jdk8可能启动不了jenkins\n\n添加安装Jenkins的yum源\n```\ncurl --silent --location http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo | sudo tee /etc/yum.repos.d/jenkins.repo\n```\n\n导入仓库密钥\n```\nrpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key\n```\n\n安装jenkins最新稳定版\n```\nyum install jenkins\n```\n\n服务管理\n```\nsystemctl start jenkins\n```\n说明：\n- 越新版本的jenkins可能需要的jdk版本越高，jdk11适配jdk8却不一定\n\n开放8080端口\n```\nfirewall-cmd --permanent --zone=public --add-port=8080/tcp\nfirewall-cmd --reload\n```\n\n设置Jenkins\n```\nhttp://your_ip_or_domain:8080\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword # 获取临时密码\n```\n\n选择`Install suggested plugins box`后继续，创建admin用户。\n\njenkins工作目录：\n```\n/var/lib/jenkins/\n/var/lib/jenkins/config.xml # 配置文件\n```\n#### jenkins重置密码\n```\n编辑/var/lib/jenkins/users/admin_491010919283058211/config.xml  # admin_491010919283058211需要根据你的实际文件名调整\n\n# 替换<passwordHash>成下列内容：\n<passwordHash>#jbcrypt:$2a$10$ltzg1Kwtef0ymmNAqR8JR.961lHdnrsoFsE.huZ.G4r1AiIaENRC6</passwordHash>\n```\n说明：\n- `#jbcrypt:$2a$10$ltzg1Kwtef0ymmNAqR8JR.961lHdnrsoFsE.huZ.G4r1AiIaENRC6`是hash加密`123456`后的值。\n#### 部署java项目实践\n配置JDK\n```\nManage Jenkins - Global Tool Configuration - JDK（不选择自动安装）- 配置name和JAVA_HOME为`/usr/local/java/jdk1.8.0_351` - 保存\n```\n说明：\n- 若选择自动安装需要设置oracle账号密码\n- 手动安装jdk8步骤\n  mkdir /usr/local/java\n  tar -xzvf jdk-8u351-linux-x64.tar.gz (jdk-8u351-linux-x64.tar.gz包自行到java官网下载)，解压后生成目录`jdk1.8.0_351`\n\n  \n配置MAVEN\n```\nAdd Maven - 命名 - Install Automatically - 选择版本3.8.6 - 保存\n```\n\n安装插件 Maven Integration，具体步骤：\n```\nManage Jenkins - Manage Plugins - 可选插件 - 搜索maven - 安装Maven Integration\n```\n\n安装完后，创建一个项目：\n```\nnew Item - 命名emog-test - 选择构建一个maven项目 - 保存\n```\n\n进入project：emog-test\n```\n点击配置 - 设置git：git@192.168.31.87:alias/emog.git\n```\n\nPre Steps\n选择`执行shell`\n```\nmvn clean install\n\nnum=`ls target/emog*.jar | wc -l`\n\n[[ $num -ne 1 ]] && { echo \"num is not equal 1\"; exit 1; }\necho \"continue\"\njar_path=`ls target/emog*.jar`\njar=`basename \"$jar_path\"`\n\n\n\\cp -fp target/$jar /opt/emog/jar\n\\cp -fp /opt/emog/jar/$jar /opt/emog/emog.jar\n\ncd /opt/emog && sh restart.sh\n```\n说明：restart.sh内容\n```\nworkspace=/opt/emog\ncd $workspace\npid=`ps aux|grep \"java -jar emog.jar\"|grep -v grep|awk '{print $2}'`\n\nif [[ $pid ]];then\n  kill $pid && nohup java -jar emog.jar &\nelse\n  nohup java -jar emog.jar &\nfi\n```\n说明：`su jenkins`非登录用户没有bash环境，可以使用`su -s /bin/bash jenkins`以jenkin身份进入。\n\n### 设置邮件模板\n```\n <hr/>\n      Project：$PROJECT_NAME<br/><hr/>\n\n      No.：#$BUILD_NUMBER<br/><hr/>\n\n      GIT：${GIT_REVISION}<br/><hr/>\n\n      Status：$BUILD_STATUS<br/><hr/>\n\n      User：${CAUSE}<br/><hr/>\n\n      Console：<a href=\"$BUILD_URL\">$BUILD_URL</a><br/><hr/>\n \n      Console Logs：<a href=\"${BUILD_URL}console\">${BUILD_URL}console</a><br/><hr/>\n\n      ${JELLY_SCRIPT,template=\"html\"}<br/><hr/>\n```\n\n","source":"_posts/第20期：Jenkins.md","raw":"---\ntitle: 第20期：Jenkins\ndate: 2023-05-22 14:38:13\ntags:\n---\n#### Jenkins简介\n开源的基于Java的提供可持续化集成服务的平台\n\n#### install jenkins on centos7\njava11安装\n```\nyum install java-11-openjdk-devel\n```\n说明：使用jdk8可能启动不了jenkins\n\n添加安装Jenkins的yum源\n```\ncurl --silent --location http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo | sudo tee /etc/yum.repos.d/jenkins.repo\n```\n\n导入仓库密钥\n```\nrpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key\n```\n\n安装jenkins最新稳定版\n```\nyum install jenkins\n```\n\n服务管理\n```\nsystemctl start jenkins\n```\n说明：\n- 越新版本的jenkins可能需要的jdk版本越高，jdk11适配jdk8却不一定\n\n开放8080端口\n```\nfirewall-cmd --permanent --zone=public --add-port=8080/tcp\nfirewall-cmd --reload\n```\n\n设置Jenkins\n```\nhttp://your_ip_or_domain:8080\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword # 获取临时密码\n```\n\n选择`Install suggested plugins box`后继续，创建admin用户。\n\njenkins工作目录：\n```\n/var/lib/jenkins/\n/var/lib/jenkins/config.xml # 配置文件\n```\n#### jenkins重置密码\n```\n编辑/var/lib/jenkins/users/admin_491010919283058211/config.xml  # admin_491010919283058211需要根据你的实际文件名调整\n\n# 替换<passwordHash>成下列内容：\n<passwordHash>#jbcrypt:$2a$10$ltzg1Kwtef0ymmNAqR8JR.961lHdnrsoFsE.huZ.G4r1AiIaENRC6</passwordHash>\n```\n说明：\n- `#jbcrypt:$2a$10$ltzg1Kwtef0ymmNAqR8JR.961lHdnrsoFsE.huZ.G4r1AiIaENRC6`是hash加密`123456`后的值。\n#### 部署java项目实践\n配置JDK\n```\nManage Jenkins - Global Tool Configuration - JDK（不选择自动安装）- 配置name和JAVA_HOME为`/usr/local/java/jdk1.8.0_351` - 保存\n```\n说明：\n- 若选择自动安装需要设置oracle账号密码\n- 手动安装jdk8步骤\n  mkdir /usr/local/java\n  tar -xzvf jdk-8u351-linux-x64.tar.gz (jdk-8u351-linux-x64.tar.gz包自行到java官网下载)，解压后生成目录`jdk1.8.0_351`\n\n  \n配置MAVEN\n```\nAdd Maven - 命名 - Install Automatically - 选择版本3.8.6 - 保存\n```\n\n安装插件 Maven Integration，具体步骤：\n```\nManage Jenkins - Manage Plugins - 可选插件 - 搜索maven - 安装Maven Integration\n```\n\n安装完后，创建一个项目：\n```\nnew Item - 命名emog-test - 选择构建一个maven项目 - 保存\n```\n\n进入project：emog-test\n```\n点击配置 - 设置git：git@192.168.31.87:alias/emog.git\n```\n\nPre Steps\n选择`执行shell`\n```\nmvn clean install\n\nnum=`ls target/emog*.jar | wc -l`\n\n[[ $num -ne 1 ]] && { echo \"num is not equal 1\"; exit 1; }\necho \"continue\"\njar_path=`ls target/emog*.jar`\njar=`basename \"$jar_path\"`\n\n\n\\cp -fp target/$jar /opt/emog/jar\n\\cp -fp /opt/emog/jar/$jar /opt/emog/emog.jar\n\ncd /opt/emog && sh restart.sh\n```\n说明：restart.sh内容\n```\nworkspace=/opt/emog\ncd $workspace\npid=`ps aux|grep \"java -jar emog.jar\"|grep -v grep|awk '{print $2}'`\n\nif [[ $pid ]];then\n  kill $pid && nohup java -jar emog.jar &\nelse\n  nohup java -jar emog.jar &\nfi\n```\n说明：`su jenkins`非登录用户没有bash环境，可以使用`su -s /bin/bash jenkins`以jenkin身份进入。\n\n### 设置邮件模板\n```\n <hr/>\n      Project：$PROJECT_NAME<br/><hr/>\n\n      No.：#$BUILD_NUMBER<br/><hr/>\n\n      GIT：${GIT_REVISION}<br/><hr/>\n\n      Status：$BUILD_STATUS<br/><hr/>\n\n      User：${CAUSE}<br/><hr/>\n\n      Console：<a href=\"$BUILD_URL\">$BUILD_URL</a><br/><hr/>\n \n      Console Logs：<a href=\"${BUILD_URL}console\">${BUILD_URL}console</a><br/><hr/>\n\n      ${JELLY_SCRIPT,template=\"html\"}<br/><hr/>\n```\n\n","slug":"第20期：Jenkins","published":1,"updated":"2024-03-06T06:55:18.353Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt6j000a9kln2xpi3ece","content":"<h4 id=\"Jenkins简介\"><a href=\"#Jenkins简介\" class=\"headerlink\" title=\"Jenkins简介\"></a>Jenkins简介</h4><p>开源的基于Java的提供可持续化集成服务的平台</p>\n<h4 id=\"install-jenkins-on-centos7\"><a href=\"#install-jenkins-on-centos7\" class=\"headerlink\" title=\"install jenkins on centos7\"></a>install jenkins on centos7</h4><p>java11安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install java-11-openjdk-devel</span><br></pre></td></tr></table></figure>\n<p>说明：使用jdk8可能启动不了jenkins</p>\n<p>添加安装Jenkins的yum源</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --silent --location http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo | sudo tee /etc/yum.repos.d/jenkins.repo</span><br></pre></td></tr></table></figure>\n\n<p>导入仓库密钥</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key</span><br></pre></td></tr></table></figure>\n\n<p>安装jenkins最新稳定版</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install jenkins</span><br></pre></td></tr></table></figure>\n\n<p>服务管理</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start jenkins</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li>越新版本的jenkins可能需要的jdk版本越高，jdk11适配jdk8却不一定</li>\n</ul>\n<p>开放8080端口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --permanent --zone=public --add-port=8080/tcp</span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n\n<p>设置Jenkins</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://your_ip_or_domain:8080</span><br><span class=\"line\">sudo cat /var/lib/jenkins/secrets/initialAdminPassword # 获取临时密码</span><br></pre></td></tr></table></figure>\n\n<p>选择<code>Install suggested plugins box</code>后继续，创建admin用户。</p>\n<p>jenkins工作目录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/var/lib/jenkins/</span><br><span class=\"line\">/var/lib/jenkins/config.xml # 配置文件</span><br></pre></td></tr></table></figure>\n<h4 id=\"jenkins重置密码\"><a href=\"#jenkins重置密码\" class=\"headerlink\" title=\"jenkins重置密码\"></a>jenkins重置密码</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编辑/var/lib/jenkins/users/admin_491010919283058211/config.xml  # admin_491010919283058211需要根据你的实际文件名调整</span><br><span class=\"line\"></span><br><span class=\"line\"># 替换&lt;passwordHash&gt;成下列内容：</span><br><span class=\"line\">&lt;passwordHash&gt;#jbcrypt:$2a$10$ltzg1Kwtef0ymmNAqR8JR.961lHdnrsoFsE.huZ.G4r1AiIaENRC6&lt;/passwordHash&gt;</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><code>#jbcrypt:$2a$10$ltzg1Kwtef0ymmNAqR8JR.961lHdnrsoFsE.huZ.G4r1AiIaENRC6</code>是hash加密<code>123456</code>后的值。</li>\n</ul>\n<h4 id=\"部署java项目实践\"><a href=\"#部署java项目实践\" class=\"headerlink\" title=\"部署java项目实践\"></a>部署java项目实践</h4><p>配置JDK</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manage Jenkins - Global Tool Configuration - JDK（不选择自动安装）- 配置name和JAVA_HOME为`/usr/local/java/jdk1.8.0_351` - 保存</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li>若选择自动安装需要设置oracle账号密码</li>\n<li>手动安装jdk8步骤<br>mkdir &#x2F;usr&#x2F;local&#x2F;java<br>tar -xzvf jdk-8u351-linux-x64.tar.gz (jdk-8u351-linux-x64.tar.gz包自行到java官网下载)，解压后生成目录<code>jdk1.8.0_351</code></li>\n</ul>\n<p>配置MAVEN</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Add Maven - 命名 - Install Automatically - 选择版本3.8.6 - 保存</span><br></pre></td></tr></table></figure>\n\n<p>安装插件 Maven Integration，具体步骤：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manage Jenkins - Manage Plugins - 可选插件 - 搜索maven - 安装Maven Integration</span><br></pre></td></tr></table></figure>\n\n<p>安装完后，创建一个项目：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Item - 命名emog-test - 选择构建一个maven项目 - 保存</span><br></pre></td></tr></table></figure>\n\n<p>进入project：emog-test</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">点击配置 - 设置git：git@192.168.31.87:alias/emog.git</span><br></pre></td></tr></table></figure>\n\n<p>Pre Steps<br>选择<code>执行shell</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean install</span><br><span class=\"line\"></span><br><span class=\"line\">num=`ls target/emog*.jar | wc -l`</span><br><span class=\"line\"></span><br><span class=\"line\">[[ $num -ne 1 ]] &amp;&amp; &#123; echo &quot;num is not equal 1&quot;; exit 1; &#125;</span><br><span class=\"line\">echo &quot;continue&quot;</span><br><span class=\"line\">jar_path=`ls target/emog*.jar`</span><br><span class=\"line\">jar=`basename &quot;$jar_path&quot;`</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\\cp -fp target/$jar /opt/emog/jar</span><br><span class=\"line\">\\cp -fp /opt/emog/jar/$jar /opt/emog/emog.jar</span><br><span class=\"line\"></span><br><span class=\"line\">cd /opt/emog &amp;&amp; sh restart.sh</span><br></pre></td></tr></table></figure>\n<p>说明：restart.sh内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">workspace=/opt/emog</span><br><span class=\"line\">cd $workspace</span><br><span class=\"line\">pid=`ps aux|grep &quot;java -jar emog.jar&quot;|grep -v grep|awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ $pid ]];then</span><br><span class=\"line\">  kill $pid &amp;&amp; nohup java -jar emog.jar &amp;</span><br><span class=\"line\">else</span><br><span class=\"line\">  nohup java -jar emog.jar &amp;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<p>说明：<code>su jenkins</code>非登录用户没有bash环境，可以使用<code>su -s /bin/bash jenkins</code>以jenkin身份进入。</p>\n<h3 id=\"设置邮件模板\"><a href=\"#设置邮件模板\" class=\"headerlink\" title=\"设置邮件模板\"></a>设置邮件模板</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;hr/&gt;</span><br><span class=\"line\">     Project：$PROJECT_NAME&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     No.：#$BUILD_NUMBER&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     GIT：$&#123;GIT_REVISION&#125;&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     Status：$BUILD_STATUS&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     User：$&#123;CAUSE&#125;&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     Console：&lt;a href=&quot;$BUILD_URL&quot;&gt;$BUILD_URL&lt;/a&gt;&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     Console Logs：&lt;a href=&quot;$&#123;BUILD_URL&#125;console&quot;&gt;$&#123;BUILD_URL&#125;console&lt;/a&gt;&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     $&#123;JELLY_SCRIPT,template=&quot;html&quot;&#125;&lt;br/&gt;&lt;hr/&gt;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Jenkins简介\"><a href=\"#Jenkins简介\" class=\"headerlink\" title=\"Jenkins简介\"></a>Jenkins简介</h4><p>开源的基于Java的提供可持续化集成服务的平台</p>\n<h4 id=\"install-jenkins-on-centos7\"><a href=\"#install-jenkins-on-centos7\" class=\"headerlink\" title=\"install jenkins on centos7\"></a>install jenkins on centos7</h4><p>java11安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install java-11-openjdk-devel</span><br></pre></td></tr></table></figure>\n<p>说明：使用jdk8可能启动不了jenkins</p>\n<p>添加安装Jenkins的yum源</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --silent --location http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo | sudo tee /etc/yum.repos.d/jenkins.repo</span><br></pre></td></tr></table></figure>\n\n<p>导入仓库密钥</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key</span><br></pre></td></tr></table></figure>\n\n<p>安装jenkins最新稳定版</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install jenkins</span><br></pre></td></tr></table></figure>\n\n<p>服务管理</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start jenkins</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li>越新版本的jenkins可能需要的jdk版本越高，jdk11适配jdk8却不一定</li>\n</ul>\n<p>开放8080端口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --permanent --zone=public --add-port=8080/tcp</span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n\n<p>设置Jenkins</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://your_ip_or_domain:8080</span><br><span class=\"line\">sudo cat /var/lib/jenkins/secrets/initialAdminPassword # 获取临时密码</span><br></pre></td></tr></table></figure>\n\n<p>选择<code>Install suggested plugins box</code>后继续，创建admin用户。</p>\n<p>jenkins工作目录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/var/lib/jenkins/</span><br><span class=\"line\">/var/lib/jenkins/config.xml # 配置文件</span><br></pre></td></tr></table></figure>\n<h4 id=\"jenkins重置密码\"><a href=\"#jenkins重置密码\" class=\"headerlink\" title=\"jenkins重置密码\"></a>jenkins重置密码</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编辑/var/lib/jenkins/users/admin_491010919283058211/config.xml  # admin_491010919283058211需要根据你的实际文件名调整</span><br><span class=\"line\"></span><br><span class=\"line\"># 替换&lt;passwordHash&gt;成下列内容：</span><br><span class=\"line\">&lt;passwordHash&gt;#jbcrypt:$2a$10$ltzg1Kwtef0ymmNAqR8JR.961lHdnrsoFsE.huZ.G4r1AiIaENRC6&lt;/passwordHash&gt;</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><code>#jbcrypt:$2a$10$ltzg1Kwtef0ymmNAqR8JR.961lHdnrsoFsE.huZ.G4r1AiIaENRC6</code>是hash加密<code>123456</code>后的值。</li>\n</ul>\n<h4 id=\"部署java项目实践\"><a href=\"#部署java项目实践\" class=\"headerlink\" title=\"部署java项目实践\"></a>部署java项目实践</h4><p>配置JDK</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manage Jenkins - Global Tool Configuration - JDK（不选择自动安装）- 配置name和JAVA_HOME为`/usr/local/java/jdk1.8.0_351` - 保存</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li>若选择自动安装需要设置oracle账号密码</li>\n<li>手动安装jdk8步骤<br>mkdir &#x2F;usr&#x2F;local&#x2F;java<br>tar -xzvf jdk-8u351-linux-x64.tar.gz (jdk-8u351-linux-x64.tar.gz包自行到java官网下载)，解压后生成目录<code>jdk1.8.0_351</code></li>\n</ul>\n<p>配置MAVEN</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Add Maven - 命名 - Install Automatically - 选择版本3.8.6 - 保存</span><br></pre></td></tr></table></figure>\n\n<p>安装插件 Maven Integration，具体步骤：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manage Jenkins - Manage Plugins - 可选插件 - 搜索maven - 安装Maven Integration</span><br></pre></td></tr></table></figure>\n\n<p>安装完后，创建一个项目：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Item - 命名emog-test - 选择构建一个maven项目 - 保存</span><br></pre></td></tr></table></figure>\n\n<p>进入project：emog-test</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">点击配置 - 设置git：git@192.168.31.87:alias/emog.git</span><br></pre></td></tr></table></figure>\n\n<p>Pre Steps<br>选择<code>执行shell</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean install</span><br><span class=\"line\"></span><br><span class=\"line\">num=`ls target/emog*.jar | wc -l`</span><br><span class=\"line\"></span><br><span class=\"line\">[[ $num -ne 1 ]] &amp;&amp; &#123; echo &quot;num is not equal 1&quot;; exit 1; &#125;</span><br><span class=\"line\">echo &quot;continue&quot;</span><br><span class=\"line\">jar_path=`ls target/emog*.jar`</span><br><span class=\"line\">jar=`basename &quot;$jar_path&quot;`</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\\cp -fp target/$jar /opt/emog/jar</span><br><span class=\"line\">\\cp -fp /opt/emog/jar/$jar /opt/emog/emog.jar</span><br><span class=\"line\"></span><br><span class=\"line\">cd /opt/emog &amp;&amp; sh restart.sh</span><br></pre></td></tr></table></figure>\n<p>说明：restart.sh内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">workspace=/opt/emog</span><br><span class=\"line\">cd $workspace</span><br><span class=\"line\">pid=`ps aux|grep &quot;java -jar emog.jar&quot;|grep -v grep|awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ $pid ]];then</span><br><span class=\"line\">  kill $pid &amp;&amp; nohup java -jar emog.jar &amp;</span><br><span class=\"line\">else</span><br><span class=\"line\">  nohup java -jar emog.jar &amp;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<p>说明：<code>su jenkins</code>非登录用户没有bash环境，可以使用<code>su -s /bin/bash jenkins</code>以jenkin身份进入。</p>\n<h3 id=\"设置邮件模板\"><a href=\"#设置邮件模板\" class=\"headerlink\" title=\"设置邮件模板\"></a>设置邮件模板</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;hr/&gt;</span><br><span class=\"line\">     Project：$PROJECT_NAME&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     No.：#$BUILD_NUMBER&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     GIT：$&#123;GIT_REVISION&#125;&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     Status：$BUILD_STATUS&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     User：$&#123;CAUSE&#125;&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     Console：&lt;a href=&quot;$BUILD_URL&quot;&gt;$BUILD_URL&lt;/a&gt;&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     Console Logs：&lt;a href=&quot;$&#123;BUILD_URL&#125;console&quot;&gt;$&#123;BUILD_URL&#125;console&lt;/a&gt;&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     $&#123;JELLY_SCRIPT,template=&quot;html&quot;&#125;&lt;br/&gt;&lt;hr/&gt;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"第21期：正则表达式","date":"2023-05-22T06:46:28.000Z","_content":"##### 非获取捕获\n场景：你想截取以str1字符串开头的内容，就可以用到非获取捕获\n```\ne.g.1\n[root@ricky ~]# echo \"recmaintarget.js123\"|grep -o -P '(?<=rec).*js' \nmaintarget.js\n\ne.g.2\n[root@ricky ~]# echo \"recmaintarget.jstt\"|grep -o -P '(?<=rec).*(?=tt)' \nmaintarget.js","source":"_posts/第21期：正则表达式.md","raw":"---\ntitle: 第21期：正则表达式\ndate: 2023-05-22 14:46:28\ntags:\n---\n##### 非获取捕获\n场景：你想截取以str1字符串开头的内容，就可以用到非获取捕获\n```\ne.g.1\n[root@ricky ~]# echo \"recmaintarget.js123\"|grep -o -P '(?<=rec).*js' \nmaintarget.js\n\ne.g.2\n[root@ricky ~]# echo \"recmaintarget.jstt\"|grep -o -P '(?<=rec).*(?=tt)' \nmaintarget.js","slug":"第21期：正则表达式","published":1,"updated":"2024-03-06T06:55:18.353Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt6l000b9kln9njk1i4x","content":"<h5 id=\"非获取捕获\"><a href=\"#非获取捕获\" class=\"headerlink\" title=\"非获取捕获\"></a>非获取捕获</h5><p>场景：你想截取以str1字符串开头的内容，就可以用到非获取捕获</p>\n<pre><code>e.g.1\n[root@ricky ~]# echo &quot;recmaintarget.js123&quot;|grep -o -P &#39;(?&lt;=rec).*js&#39; \nmaintarget.js\n\ne.g.2\n[root@ricky ~]# echo &quot;recmaintarget.jstt&quot;|grep -o -P &#39;(?&lt;=rec).*(?=tt)&#39; \nmaintarget.js\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"非获取捕获\"><a href=\"#非获取捕获\" class=\"headerlink\" title=\"非获取捕获\"></a>非获取捕获</h5><p>场景：你想截取以str1字符串开头的内容，就可以用到非获取捕获</p>\n<pre><code>e.g.1\n[root@ricky ~]# echo &quot;recmaintarget.js123&quot;|grep -o -P &#39;(?&lt;=rec).*js&#39; \nmaintarget.js\n\ne.g.2\n[root@ricky ~]# echo &quot;recmaintarget.jstt&quot;|grep -o -P &#39;(?&lt;=rec).*(?=tt)&#39; \nmaintarget.js\n</code></pre>\n"},{"title":"第22期：rsync","date":"2023-05-22T07:19:22.000Z","_content":"##### rsync \nremote sync: 远程同步工具，可以说本地复制或主机间复制。第一次复制是全部，第二次是同步有差别的文件。\n\n##### 使用\n-a  # 归档模式，文件递归传输\n-v  # 详细模式输出\n-z  # 对备份的文件传输时进行压缩\n###### 本地复制\n```\nrsync -a remotesync /opt # 把remotesync(包括remotesync)复制到/opt目录下；如果remotesync写成remotesync/，结果是remotesync下面所有文件都被复制到/opt下\n```\n\n###### 本地复制到远程机器\nrsync -avz remotesync root@192.168.31.166:/opt/test\n\n###### 远程复制到本机\nrsync -avz root@192.168.31.166:/opt/test/test.log /opt\n\n参考：http://www.ruanyifeng.com/blog/2020/08/rsync.html\n","source":"_posts/第22期：rsync.md","raw":"---\ntitle: 第22期：rsync\ndate: 2023-05-22 15:19:22\ntags:\n---\n##### rsync \nremote sync: 远程同步工具，可以说本地复制或主机间复制。第一次复制是全部，第二次是同步有差别的文件。\n\n##### 使用\n-a  # 归档模式，文件递归传输\n-v  # 详细模式输出\n-z  # 对备份的文件传输时进行压缩\n###### 本地复制\n```\nrsync -a remotesync /opt # 把remotesync(包括remotesync)复制到/opt目录下；如果remotesync写成remotesync/，结果是remotesync下面所有文件都被复制到/opt下\n```\n\n###### 本地复制到远程机器\nrsync -avz remotesync root@192.168.31.166:/opt/test\n\n###### 远程复制到本机\nrsync -avz root@192.168.31.166:/opt/test/test.log /opt\n\n参考：http://www.ruanyifeng.com/blog/2020/08/rsync.html\n","slug":"第22期：rsync","published":1,"updated":"2024-03-06T06:55:18.354Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt6l000c9kln8jc24lz9","content":"<h5 id=\"rsync\"><a href=\"#rsync\" class=\"headerlink\" title=\"rsync\"></a>rsync</h5><p>remote sync: 远程同步工具，可以说本地复制或主机间复制。第一次复制是全部，第二次是同步有差别的文件。</p>\n<h5 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h5><p>-a  # 归档模式，文件递归传输<br>-v  # 详细模式输出<br>-z  # 对备份的文件传输时进行压缩</p>\n<h6 id=\"本地复制\"><a href=\"#本地复制\" class=\"headerlink\" title=\"本地复制\"></a>本地复制</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rsync -a remotesync /opt # 把remotesync(包括remotesync)复制到/opt目录下；如果remotesync写成remotesync/，结果是remotesync下面所有文件都被复制到/opt下</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"本地复制到远程机器\"><a href=\"#本地复制到远程机器\" class=\"headerlink\" title=\"本地复制到远程机器\"></a>本地复制到远程机器</h6><p>rsync -avz remotesync <a href=\"mailto:&#114;&#x6f;&#x6f;&#116;&#x40;&#49;&#57;&#50;&#46;&#49;&#54;&#x38;&#x2e;&#51;&#49;&#46;&#x31;&#x36;&#x36;\">&#114;&#x6f;&#x6f;&#116;&#x40;&#49;&#57;&#50;&#46;&#49;&#54;&#x38;&#x2e;&#51;&#49;&#46;&#x31;&#x36;&#x36;</a>:&#x2F;opt&#x2F;test</p>\n<h6 id=\"远程复制到本机\"><a href=\"#远程复制到本机\" class=\"headerlink\" title=\"远程复制到本机\"></a>远程复制到本机</h6><p>rsync -avz <a href=\"mailto:&#x72;&#x6f;&#x6f;&#x74;&#64;&#49;&#57;&#50;&#x2e;&#x31;&#54;&#56;&#x2e;&#51;&#x31;&#x2e;&#x31;&#x36;&#x36;\">&#x72;&#x6f;&#x6f;&#x74;&#64;&#49;&#57;&#50;&#x2e;&#x31;&#54;&#56;&#x2e;&#51;&#x31;&#x2e;&#x31;&#x36;&#x36;</a>:&#x2F;opt&#x2F;test&#x2F;test.log &#x2F;opt</p>\n<p>参考：<a href=\"http://www.ruanyifeng.com/blog/2020/08/rsync.html\">http://www.ruanyifeng.com/blog/2020/08/rsync.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"rsync\"><a href=\"#rsync\" class=\"headerlink\" title=\"rsync\"></a>rsync</h5><p>remote sync: 远程同步工具，可以说本地复制或主机间复制。第一次复制是全部，第二次是同步有差别的文件。</p>\n<h5 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h5><p>-a  # 归档模式，文件递归传输<br>-v  # 详细模式输出<br>-z  # 对备份的文件传输时进行压缩</p>\n<h6 id=\"本地复制\"><a href=\"#本地复制\" class=\"headerlink\" title=\"本地复制\"></a>本地复制</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rsync -a remotesync /opt # 把remotesync(包括remotesync)复制到/opt目录下；如果remotesync写成remotesync/，结果是remotesync下面所有文件都被复制到/opt下</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"本地复制到远程机器\"><a href=\"#本地复制到远程机器\" class=\"headerlink\" title=\"本地复制到远程机器\"></a>本地复制到远程机器</h6><p>rsync -avz remotesync <a href=\"mailto:&#114;&#x6f;&#x6f;&#116;&#x40;&#49;&#57;&#50;&#46;&#49;&#54;&#x38;&#x2e;&#51;&#49;&#46;&#x31;&#x36;&#x36;\">&#114;&#x6f;&#x6f;&#116;&#x40;&#49;&#57;&#50;&#46;&#49;&#54;&#x38;&#x2e;&#51;&#49;&#46;&#x31;&#x36;&#x36;</a>:&#x2F;opt&#x2F;test</p>\n<h6 id=\"远程复制到本机\"><a href=\"#远程复制到本机\" class=\"headerlink\" title=\"远程复制到本机\"></a>远程复制到本机</h6><p>rsync -avz <a href=\"mailto:&#x72;&#x6f;&#x6f;&#x74;&#64;&#49;&#57;&#50;&#x2e;&#x31;&#54;&#56;&#x2e;&#51;&#x31;&#x2e;&#x31;&#x36;&#x36;\">&#x72;&#x6f;&#x6f;&#x74;&#64;&#49;&#57;&#50;&#x2e;&#x31;&#54;&#56;&#x2e;&#51;&#x31;&#x2e;&#x31;&#x36;&#x36;</a>:&#x2F;opt&#x2F;test&#x2F;test.log &#x2F;opt</p>\n<p>参考：<a href=\"http://www.ruanyifeng.com/blog/2020/08/rsync.html\">http://www.ruanyifeng.com/blog/2020/08/rsync.html</a></p>\n"},{"title":"第23期：GIT","date":"2023-05-22T07:34:40.000Z","_content":"### git命令\n```\ngit config --list # 查看当前配置\ngit config user.name \"username\" # 配置当个仓库用户名\ngit config --global user.name \"username\" # 设置全局用户名\ngit config --global user.email  useremail@qq.com # 设置全局邮箱\n```","source":"_posts/第23期：GIT.md","raw":"---\ntitle: 第23期：GIT\ndate: 2023-05-22 15:34:40\ntags:\n---\n### git命令\n```\ngit config --list # 查看当前配置\ngit config user.name \"username\" # 配置当个仓库用户名\ngit config --global user.name \"username\" # 设置全局用户名\ngit config --global user.email  useremail@qq.com # 设置全局邮箱\n```","slug":"第23期：GIT","published":1,"updated":"2024-03-06T06:55:18.354Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt6m000d9klngq6g2h2w","content":"<h3 id=\"git命令\"><a href=\"#git命令\" class=\"headerlink\" title=\"git命令\"></a>git命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --list # 查看当前配置</span><br><span class=\"line\">git config user.name &quot;username&quot; # 配置当个仓库用户名</span><br><span class=\"line\">git config --global user.name &quot;username&quot; # 设置全局用户名</span><br><span class=\"line\">git config --global user.email  useremail@qq.com # 设置全局邮箱</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"git命令\"><a href=\"#git命令\" class=\"headerlink\" title=\"git命令\"></a>git命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --list # 查看当前配置</span><br><span class=\"line\">git config user.name &quot;username&quot; # 配置当个仓库用户名</span><br><span class=\"line\">git config --global user.name &quot;username&quot; # 设置全局用户名</span><br><span class=\"line\">git config --global user.email  useremail@qq.com # 设置全局邮箱</span><br></pre></td></tr></table></figure>"},{"title":"第24期：DOCKER","date":"2023-05-22T07:36:59.000Z","_content":"#### 安装docker-ce\n```\n# 安装一些必要的系统工具\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n\n# 添加源信息\n# docker 官方源\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n# 阿里云源\nsudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n\n# 安装前可以先更新 yum 缓存：\nsudo yum makecache fast\n# 安装 Docker-ce\nsudo yum install docker-ce\n\n# 如果你想安装特定 docker-ce 版本，先列出 repo 中可用版本，然后选择安装\n$ yum list docker-ce --showduplicates | sort -r\n# docker-ce.x86_64       18.06.1.ce-3.el7              docker-ce-stable\n# docker-ce.x86_64       18.06.1.ce-3.el7              @docker-ce-stable\n# docker-ce.x86_64       18.06.0.ce-3.el7              docker-ce-stable\n# docker-ce.x86_64       18.03.1.ce-1.el7.centos       docker-ce-stable\n# docker-ce.x86_64       18.03.0.ce-1.el7.centos       docker-ce-stable\n# docker-ce.x86_64       17.12.1.ce-1.el7.centos       docker-ce-stable\n# 选择版本安装\n$ sudo yum install docker-ce-<VERSION STRING>\n\n# 选择安装 docker-ce-18.06.1.ce\n$ sudo yum install docker-ce-18.06.1.ce\n\n# 启动 Docker 后台服务\nsudo systemctl start docker\n\n# 通过运行 hello-world 镜像，验证是否正确安装了 docker\ndocker run hello-world\n```\n\n#### 命令介绍\n```\n$ docker --help\n\n管理命令:\n  container   管理容器\n  image       管理镜像\n  network     管理网络\n命令：\n  attach      介入到一个正在运行的容器\n  build       根据 Dockerfile 构建一个镜像\n  commit      根据容器的更改创建一个新的镜像\n  cp          在本地文件系统与容器中复制 文件/文件夹\n  create      创建一个新容器\n  exec        在容器中执行一条命令\n  images      列出镜像\n  kill        杀死一个或多个正在运行的容器    \n  logs        取得容器的日志\n  pause       暂停一个或多个容器的所有进程\n  ps          列出所有容器\n  pull        拉取一个镜像或仓库到 registry\n  push        推送一个镜像或仓库到 registry\n  rename      重命名一个容器\n  restart     重新启动一个或多个容器\n  rm          删除一个或多个容器\n  rmi         删除一个或多个镜像\n  run         在一个新的容器中执行一条命令\n  search      在 Docker Hub 中搜索镜像\n  start       启动一个或多个已经停止运行的容器\n  stats       显示一个容器的实时资源占用\n  stop        停止一个或多个正在运行的容器\n  tag         为镜像创建一个新的标签\n  top         显示一个容器内的所有进程\n  unpause     恢复一个或多个容器内所有被暂停的进程\n```\n\n#### 镜像管理\n```\ndocker pull centos:latest  # 从docker.io中下载centos镜像到本地\ndocker images              # 查看已下载的镜像\ndocker rmi [image_id]      # 删除镜像，指定镜像id\n\n# 删除所有镜像\n# none 默认为 docker.io\ndocker rmi $(docker images | grep none | awk '{print $3}' | sort -r)\n\n# 连接进行进入命令行模式，exit命令退出。\ndocker run -t -i nginx:latest /bin/bash\n```\n\n##### 通过容器创建镜像\n两种方式：\n1.从已经创建的容器中更新镜像，并且提交这个镜像\n2.使用 Dockerfile 指令来创建一个新的镜像\n\n```\n# 第一种\ndocker commit -m=\"First Docker\" -a=\"wcjiang\" a6b0a6cfdacf wcjiang/nginx:v1.2.1\n\n\n# 第二种\ntouch Dockerfile .dockerignore\n```\n.dockerignoren内容（用于忽略加入镜像的内容）\n```\n.git\nnode_modules\nnpm-debug.log\n```\nDockerfile内容\n```\nFROM node:8.4\nCOPY . /app\nWORKDIR /app\nRUN npm install --registry=https://registry.npm.taobao.org\nEXPOSE 3000\n```\n##### 创建镜像\ndocker build -t koa-demo .\n\n##### 发布镜像\ndocker tag wcjiang/nginx:v1.2.1 wcjiang/nginx-test:lastest\ndocker login\ndocker push wcjiang/nginx-test:lastest\n\n##### 镜像安装软件\n```\n# 第一次需要运行这个命令，确保源的索引是最新的\n# 同步 /etc/apt/sources.list 和 /etc/apt/sources.list.d 中列出的源的索引\napt-get update\n# 做过上面更新同步之后，可以运行下面的命令了\napt-get install vim\n```\n\n##### 容器管理\n```\n# 列出本机正在运行的容器\ndocker container ls\n# 列出本机所有容器，包括终止运行的容器\ndocker container ls --all\ndocker start [containerID/Names] # 启动容器\ndocker stop [containerID/Names]  # 停止容器\ndocker rm [containerID/Names]    # 删除容器\ndocker logs [containerID/Names]  # 查看日志\ndocker exec -it [containerID/Names] /bin/bash  # 进入容器\n\n# 从正在运行的 Docker 容器里面，将文件拷贝到本机，注意后面有个【点】拷贝到当前目录\ndocker container cp [containID]:[/path/to/file] .\n\ndocker run centos echo \"hello world\"  # 在docker容器中运行hello world!\ndocker run centos yum install -y wget # 在docker容器中，安装wget软件\ndocker ps                             # 列出包括未运行的容器\ndocker ps -a                          # 查看所有容器(包括正在运行和已停止的)\ndocker logs my-nginx                  # 查看 my-nginx 容器日志\n\ndocker run -i -t centos /bin/bash     # 启动一个容器\ndocker inspect centos                 # 检查运行中的镜像\ndocker commit 8bd centos              # 保存对容器的修改\ndocker commit -m \"n changed\" my-nginx my-nginx-image # 使用已经存在的容器创建一个镜像\ndocker inspect -f {{.State.Pid}} 44fc0f0582d9        # 获取id为 44fc0f0582d9 的PID进程编号\n# 下载指定版本容器镜像\ndocker pull gitlab/gitlab-ce:11.2.3-ce.0\n```\n\n##### 文件拷贝\n```\n从主机复制到容器 sudo docker cp host_path containerID:container_path\n从容器复制到主机 sudo docker cp containerID:container_path host_path\n```\n\n##### Docker私有仓库搭建\n```\nHarbor 还有 humpback 和 rancher\n```\n\n##### 临时运行服务\n```\ndocker run -d \\\n  -p 5000:5000 \\\n  --restart=always \\\n  --name registry \\\n  registry:2\n\n或者\n\n# ctrl+c退出自动删除容器\ndocker run --rm \\\n    --name asynqmon \\\n    -p 8080:8080 \\\n    hibiken/asynqmon\n\n# 自定义存储位置\ndocker run -d \\\n  -p 5000:5000 \\\n  --restart=always \\\n  --name registry \\\n  -v $HOME/_docker/registry:/var/lib/registry \\\n  registry:2\n\ndocker run -d -p 5000:5000 --restart=always --name registry \\\n    -v `pwd`/config.yml:/etc/docker/registry/config.yml \\\n    registry:2\n```\n\n\n##### 使用docker实战\n```\n-d, --detach=false      # 指定容器运行于前台还是后台，默认为false   \n-i, --interactive=false # 打开STDIN，用于控制台交互  \n-t, --tty=false         # 分配tty设备，该可以支持终端登录，默认为false  \n-u, --user=\"\"           # 指定容器的用户  \n-a, --attach=[]         # 登录容器（必须是以docker run -d启动的容器）\n-w, --workdir=\"\"        # 指定容器的工作目录 \n-c, --cpu-shares=0      # 设置容器CPU权重，在CPU共享场景使用  \n-e, --env=[]            # 指定环境变量，容器中可以使用该环境变量  \n-m, --memory=\"\"         # 指定容器的内存上限  \n-P, --publish-all=false # 指定容器暴露的端口  \n-p, --publish=[]        # 指定容器暴露的端口 \n-h, --hostname=\"\"       # 指定容器的主机名  \n-v, --volume=[]         # 给容器挂载存储卷，挂载到容器的某个目录  \n--volumes-from=[]       # 给容器挂载其他容器上的卷，挂载到容器的某个目录\n--cap-add=[]            # 添加权限，权限清单详见：http://linux.die.net/man/7/capabilities  \n--cap-drop=[]           # 删除权限，权限清单详见：http://linux.die.net/man/7/capabilities  \n--cidfile=\"\"            # 运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法  \n--cpuset=\"\"             # 设置容器可以使用哪些CPU，此参数可以用来容器独占CPU  \n--device=[]             # 添加主机设备给容器，相当于设备直通  \n--dns=[]                # 指定容器的dns服务器  \n--dns-search=[]         # 指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件  \n--entrypoint=\"\"         # 覆盖image的入口点  \n--env-file=[]           # 指定环境变量文件，文件格式为每行一个环境变量  \n--expose=[]             # 指定容器暴露的端口，即修改镜像的暴露端口  \n--link=[]               # 指定容器间的关联，使用其他容器的IP、env等信息  \n--lxc-conf=[]           # 指定容器的配置文件，只有在指定--exec-driver=lxc时使用  \n--name=\"\"               # 指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字  \n--net=\"bridge\"          # 容器网络设置:\n                            # bridge 使用docker daemon指定的网桥     \n                            # host \t//容器使用主机的网络  \n                            # container:NAME_or_ID  >//使用其他容器的网路，共享IP和PORT等网络资源  \n                            # none 容器使用自己的网络（类似--net=bridge），但是不进行配置 \n--privileged=false      # 指定容器是否为特权容器，特权容器拥有所有的capabilities  \n--restart=\"no\"          # 指定容器停止后的重启策略:\n                            # no：容器退出时不重启  \n                            # on-failure：容器故障退出（返回值非零）时重启 \n                            # always：容器退出时总是重启  \n--rm=false              # 指定容器停止后自动删除容器(不支持以docker run -d启动的容器)  \n--sig-proxy=true        # 设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理\n```\n\n参考：https://raw.githack.com/jaywcjlove/docker-tutorial/7a41060/index.html\n","source":"_posts/第24期：DOCKER.md","raw":"---\ntitle: 第24期：DOCKER\ndate: 2023-05-22 15:36:59\ntags:\n---\n#### 安装docker-ce\n```\n# 安装一些必要的系统工具\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n\n# 添加源信息\n# docker 官方源\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n# 阿里云源\nsudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n\n# 安装前可以先更新 yum 缓存：\nsudo yum makecache fast\n# 安装 Docker-ce\nsudo yum install docker-ce\n\n# 如果你想安装特定 docker-ce 版本，先列出 repo 中可用版本，然后选择安装\n$ yum list docker-ce --showduplicates | sort -r\n# docker-ce.x86_64       18.06.1.ce-3.el7              docker-ce-stable\n# docker-ce.x86_64       18.06.1.ce-3.el7              @docker-ce-stable\n# docker-ce.x86_64       18.06.0.ce-3.el7              docker-ce-stable\n# docker-ce.x86_64       18.03.1.ce-1.el7.centos       docker-ce-stable\n# docker-ce.x86_64       18.03.0.ce-1.el7.centos       docker-ce-stable\n# docker-ce.x86_64       17.12.1.ce-1.el7.centos       docker-ce-stable\n# 选择版本安装\n$ sudo yum install docker-ce-<VERSION STRING>\n\n# 选择安装 docker-ce-18.06.1.ce\n$ sudo yum install docker-ce-18.06.1.ce\n\n# 启动 Docker 后台服务\nsudo systemctl start docker\n\n# 通过运行 hello-world 镜像，验证是否正确安装了 docker\ndocker run hello-world\n```\n\n#### 命令介绍\n```\n$ docker --help\n\n管理命令:\n  container   管理容器\n  image       管理镜像\n  network     管理网络\n命令：\n  attach      介入到一个正在运行的容器\n  build       根据 Dockerfile 构建一个镜像\n  commit      根据容器的更改创建一个新的镜像\n  cp          在本地文件系统与容器中复制 文件/文件夹\n  create      创建一个新容器\n  exec        在容器中执行一条命令\n  images      列出镜像\n  kill        杀死一个或多个正在运行的容器    \n  logs        取得容器的日志\n  pause       暂停一个或多个容器的所有进程\n  ps          列出所有容器\n  pull        拉取一个镜像或仓库到 registry\n  push        推送一个镜像或仓库到 registry\n  rename      重命名一个容器\n  restart     重新启动一个或多个容器\n  rm          删除一个或多个容器\n  rmi         删除一个或多个镜像\n  run         在一个新的容器中执行一条命令\n  search      在 Docker Hub 中搜索镜像\n  start       启动一个或多个已经停止运行的容器\n  stats       显示一个容器的实时资源占用\n  stop        停止一个或多个正在运行的容器\n  tag         为镜像创建一个新的标签\n  top         显示一个容器内的所有进程\n  unpause     恢复一个或多个容器内所有被暂停的进程\n```\n\n#### 镜像管理\n```\ndocker pull centos:latest  # 从docker.io中下载centos镜像到本地\ndocker images              # 查看已下载的镜像\ndocker rmi [image_id]      # 删除镜像，指定镜像id\n\n# 删除所有镜像\n# none 默认为 docker.io\ndocker rmi $(docker images | grep none | awk '{print $3}' | sort -r)\n\n# 连接进行进入命令行模式，exit命令退出。\ndocker run -t -i nginx:latest /bin/bash\n```\n\n##### 通过容器创建镜像\n两种方式：\n1.从已经创建的容器中更新镜像，并且提交这个镜像\n2.使用 Dockerfile 指令来创建一个新的镜像\n\n```\n# 第一种\ndocker commit -m=\"First Docker\" -a=\"wcjiang\" a6b0a6cfdacf wcjiang/nginx:v1.2.1\n\n\n# 第二种\ntouch Dockerfile .dockerignore\n```\n.dockerignoren内容（用于忽略加入镜像的内容）\n```\n.git\nnode_modules\nnpm-debug.log\n```\nDockerfile内容\n```\nFROM node:8.4\nCOPY . /app\nWORKDIR /app\nRUN npm install --registry=https://registry.npm.taobao.org\nEXPOSE 3000\n```\n##### 创建镜像\ndocker build -t koa-demo .\n\n##### 发布镜像\ndocker tag wcjiang/nginx:v1.2.1 wcjiang/nginx-test:lastest\ndocker login\ndocker push wcjiang/nginx-test:lastest\n\n##### 镜像安装软件\n```\n# 第一次需要运行这个命令，确保源的索引是最新的\n# 同步 /etc/apt/sources.list 和 /etc/apt/sources.list.d 中列出的源的索引\napt-get update\n# 做过上面更新同步之后，可以运行下面的命令了\napt-get install vim\n```\n\n##### 容器管理\n```\n# 列出本机正在运行的容器\ndocker container ls\n# 列出本机所有容器，包括终止运行的容器\ndocker container ls --all\ndocker start [containerID/Names] # 启动容器\ndocker stop [containerID/Names]  # 停止容器\ndocker rm [containerID/Names]    # 删除容器\ndocker logs [containerID/Names]  # 查看日志\ndocker exec -it [containerID/Names] /bin/bash  # 进入容器\n\n# 从正在运行的 Docker 容器里面，将文件拷贝到本机，注意后面有个【点】拷贝到当前目录\ndocker container cp [containID]:[/path/to/file] .\n\ndocker run centos echo \"hello world\"  # 在docker容器中运行hello world!\ndocker run centos yum install -y wget # 在docker容器中，安装wget软件\ndocker ps                             # 列出包括未运行的容器\ndocker ps -a                          # 查看所有容器(包括正在运行和已停止的)\ndocker logs my-nginx                  # 查看 my-nginx 容器日志\n\ndocker run -i -t centos /bin/bash     # 启动一个容器\ndocker inspect centos                 # 检查运行中的镜像\ndocker commit 8bd centos              # 保存对容器的修改\ndocker commit -m \"n changed\" my-nginx my-nginx-image # 使用已经存在的容器创建一个镜像\ndocker inspect -f {{.State.Pid}} 44fc0f0582d9        # 获取id为 44fc0f0582d9 的PID进程编号\n# 下载指定版本容器镜像\ndocker pull gitlab/gitlab-ce:11.2.3-ce.0\n```\n\n##### 文件拷贝\n```\n从主机复制到容器 sudo docker cp host_path containerID:container_path\n从容器复制到主机 sudo docker cp containerID:container_path host_path\n```\n\n##### Docker私有仓库搭建\n```\nHarbor 还有 humpback 和 rancher\n```\n\n##### 临时运行服务\n```\ndocker run -d \\\n  -p 5000:5000 \\\n  --restart=always \\\n  --name registry \\\n  registry:2\n\n或者\n\n# ctrl+c退出自动删除容器\ndocker run --rm \\\n    --name asynqmon \\\n    -p 8080:8080 \\\n    hibiken/asynqmon\n\n# 自定义存储位置\ndocker run -d \\\n  -p 5000:5000 \\\n  --restart=always \\\n  --name registry \\\n  -v $HOME/_docker/registry:/var/lib/registry \\\n  registry:2\n\ndocker run -d -p 5000:5000 --restart=always --name registry \\\n    -v `pwd`/config.yml:/etc/docker/registry/config.yml \\\n    registry:2\n```\n\n\n##### 使用docker实战\n```\n-d, --detach=false      # 指定容器运行于前台还是后台，默认为false   \n-i, --interactive=false # 打开STDIN，用于控制台交互  \n-t, --tty=false         # 分配tty设备，该可以支持终端登录，默认为false  \n-u, --user=\"\"           # 指定容器的用户  \n-a, --attach=[]         # 登录容器（必须是以docker run -d启动的容器）\n-w, --workdir=\"\"        # 指定容器的工作目录 \n-c, --cpu-shares=0      # 设置容器CPU权重，在CPU共享场景使用  \n-e, --env=[]            # 指定环境变量，容器中可以使用该环境变量  \n-m, --memory=\"\"         # 指定容器的内存上限  \n-P, --publish-all=false # 指定容器暴露的端口  \n-p, --publish=[]        # 指定容器暴露的端口 \n-h, --hostname=\"\"       # 指定容器的主机名  \n-v, --volume=[]         # 给容器挂载存储卷，挂载到容器的某个目录  \n--volumes-from=[]       # 给容器挂载其他容器上的卷，挂载到容器的某个目录\n--cap-add=[]            # 添加权限，权限清单详见：http://linux.die.net/man/7/capabilities  \n--cap-drop=[]           # 删除权限，权限清单详见：http://linux.die.net/man/7/capabilities  \n--cidfile=\"\"            # 运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法  \n--cpuset=\"\"             # 设置容器可以使用哪些CPU，此参数可以用来容器独占CPU  \n--device=[]             # 添加主机设备给容器，相当于设备直通  \n--dns=[]                # 指定容器的dns服务器  \n--dns-search=[]         # 指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件  \n--entrypoint=\"\"         # 覆盖image的入口点  \n--env-file=[]           # 指定环境变量文件，文件格式为每行一个环境变量  \n--expose=[]             # 指定容器暴露的端口，即修改镜像的暴露端口  \n--link=[]               # 指定容器间的关联，使用其他容器的IP、env等信息  \n--lxc-conf=[]           # 指定容器的配置文件，只有在指定--exec-driver=lxc时使用  \n--name=\"\"               # 指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字  \n--net=\"bridge\"          # 容器网络设置:\n                            # bridge 使用docker daemon指定的网桥     \n                            # host \t//容器使用主机的网络  \n                            # container:NAME_or_ID  >//使用其他容器的网路，共享IP和PORT等网络资源  \n                            # none 容器使用自己的网络（类似--net=bridge），但是不进行配置 \n--privileged=false      # 指定容器是否为特权容器，特权容器拥有所有的capabilities  \n--restart=\"no\"          # 指定容器停止后的重启策略:\n                            # no：容器退出时不重启  \n                            # on-failure：容器故障退出（返回值非零）时重启 \n                            # always：容器退出时总是重启  \n--rm=false              # 指定容器停止后自动删除容器(不支持以docker run -d启动的容器)  \n--sig-proxy=true        # 设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理\n```\n\n参考：https://raw.githack.com/jaywcjlove/docker-tutorial/7a41060/index.html\n","slug":"第24期：DOCKER","published":1,"updated":"2024-03-06T06:55:18.355Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt6n000e9kln5soqar3g","content":"<h4 id=\"安装docker-ce\"><a href=\"#安装docker-ce\" class=\"headerlink\" title=\"安装docker-ce\"></a>安装docker-ce</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装一些必要的系统工具</span><br><span class=\"line\">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加源信息</span><br><span class=\"line\"># docker 官方源</span><br><span class=\"line\">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\"># 阿里云源</span><br><span class=\"line\">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装前可以先更新 yum 缓存：</span><br><span class=\"line\">sudo yum makecache fast</span><br><span class=\"line\"># 安装 Docker-ce</span><br><span class=\"line\">sudo yum install docker-ce</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果你想安装特定 docker-ce 版本，先列出 repo 中可用版本，然后选择安装</span><br><span class=\"line\">$ yum list docker-ce --showduplicates | sort -r</span><br><span class=\"line\"># docker-ce.x86_64       18.06.1.ce-3.el7              docker-ce-stable</span><br><span class=\"line\"># docker-ce.x86_64       18.06.1.ce-3.el7              @docker-ce-stable</span><br><span class=\"line\"># docker-ce.x86_64       18.06.0.ce-3.el7              docker-ce-stable</span><br><span class=\"line\"># docker-ce.x86_64       18.03.1.ce-1.el7.centos       docker-ce-stable</span><br><span class=\"line\"># docker-ce.x86_64       18.03.0.ce-1.el7.centos       docker-ce-stable</span><br><span class=\"line\"># docker-ce.x86_64       17.12.1.ce-1.el7.centos       docker-ce-stable</span><br><span class=\"line\"># 选择版本安装</span><br><span class=\"line\">$ sudo yum install docker-ce-&lt;VERSION STRING&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 选择安装 docker-ce-18.06.1.ce</span><br><span class=\"line\">$ sudo yum install docker-ce-18.06.1.ce</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动 Docker 后台服务</span><br><span class=\"line\">sudo systemctl start docker</span><br><span class=\"line\"></span><br><span class=\"line\"># 通过运行 hello-world 镜像，验证是否正确安装了 docker</span><br><span class=\"line\">docker run hello-world</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"命令介绍\"><a href=\"#命令介绍\" class=\"headerlink\" title=\"命令介绍\"></a>命令介绍</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker --help</span><br><span class=\"line\"></span><br><span class=\"line\">管理命令:</span><br><span class=\"line\">  container   管理容器</span><br><span class=\"line\">  image       管理镜像</span><br><span class=\"line\">  network     管理网络</span><br><span class=\"line\">命令：</span><br><span class=\"line\">  attach      介入到一个正在运行的容器</span><br><span class=\"line\">  build       根据 Dockerfile 构建一个镜像</span><br><span class=\"line\">  commit      根据容器的更改创建一个新的镜像</span><br><span class=\"line\">  cp          在本地文件系统与容器中复制 文件/文件夹</span><br><span class=\"line\">  create      创建一个新容器</span><br><span class=\"line\">  exec        在容器中执行一条命令</span><br><span class=\"line\">  images      列出镜像</span><br><span class=\"line\">  kill        杀死一个或多个正在运行的容器    </span><br><span class=\"line\">  logs        取得容器的日志</span><br><span class=\"line\">  pause       暂停一个或多个容器的所有进程</span><br><span class=\"line\">  ps          列出所有容器</span><br><span class=\"line\">  pull        拉取一个镜像或仓库到 registry</span><br><span class=\"line\">  push        推送一个镜像或仓库到 registry</span><br><span class=\"line\">  rename      重命名一个容器</span><br><span class=\"line\">  restart     重新启动一个或多个容器</span><br><span class=\"line\">  rm          删除一个或多个容器</span><br><span class=\"line\">  rmi         删除一个或多个镜像</span><br><span class=\"line\">  run         在一个新的容器中执行一条命令</span><br><span class=\"line\">  search      在 Docker Hub 中搜索镜像</span><br><span class=\"line\">  start       启动一个或多个已经停止运行的容器</span><br><span class=\"line\">  stats       显示一个容器的实时资源占用</span><br><span class=\"line\">  stop        停止一个或多个正在运行的容器</span><br><span class=\"line\">  tag         为镜像创建一个新的标签</span><br><span class=\"line\">  top         显示一个容器内的所有进程</span><br><span class=\"line\">  unpause     恢复一个或多个容器内所有被暂停的进程</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"镜像管理\"><a href=\"#镜像管理\" class=\"headerlink\" title=\"镜像管理\"></a>镜像管理</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull centos:latest  # 从docker.io中下载centos镜像到本地</span><br><span class=\"line\">docker images              # 查看已下载的镜像</span><br><span class=\"line\">docker rmi [image_id]      # 删除镜像，指定镜像id</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除所有镜像</span><br><span class=\"line\"># none 默认为 docker.io</span><br><span class=\"line\">docker rmi $(docker images | grep none | awk &#x27;&#123;print $3&#125;&#x27; | sort -r)</span><br><span class=\"line\"></span><br><span class=\"line\"># 连接进行进入命令行模式，exit命令退出。</span><br><span class=\"line\">docker run -t -i nginx:latest /bin/bash</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"通过容器创建镜像\"><a href=\"#通过容器创建镜像\" class=\"headerlink\" title=\"通过容器创建镜像\"></a>通过容器创建镜像</h5><p>两种方式：<br>1.从已经创建的容器中更新镜像，并且提交这个镜像<br>2.使用 Dockerfile 指令来创建一个新的镜像</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 第一种</span><br><span class=\"line\">docker commit -m=&quot;First Docker&quot; -a=&quot;wcjiang&quot; a6b0a6cfdacf wcjiang/nginx:v1.2.1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 第二种</span><br><span class=\"line\">touch Dockerfile .dockerignore</span><br></pre></td></tr></table></figure>\n<p>.dockerignoren内容（用于忽略加入镜像的内容）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.git</span><br><span class=\"line\">node_modules</span><br><span class=\"line\">npm-debug.log</span><br></pre></td></tr></table></figure>\n<p>Dockerfile内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM node:8.4</span><br><span class=\"line\">COPY . /app</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">RUN npm install --registry=https://registry.npm.taobao.org</span><br><span class=\"line\">EXPOSE 3000</span><br></pre></td></tr></table></figure>\n<h5 id=\"创建镜像\"><a href=\"#创建镜像\" class=\"headerlink\" title=\"创建镜像\"></a>创建镜像</h5><p>docker build -t koa-demo .</p>\n<h5 id=\"发布镜像\"><a href=\"#发布镜像\" class=\"headerlink\" title=\"发布镜像\"></a>发布镜像</h5><p>docker tag wcjiang&#x2F;nginx:v1.2.1 wcjiang&#x2F;nginx-test:lastest<br>docker login<br>docker push wcjiang&#x2F;nginx-test:lastest</p>\n<h5 id=\"镜像安装软件\"><a href=\"#镜像安装软件\" class=\"headerlink\" title=\"镜像安装软件\"></a>镜像安装软件</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 第一次需要运行这个命令，确保源的索引是最新的</span><br><span class=\"line\"># 同步 /etc/apt/sources.list 和 /etc/apt/sources.list.d 中列出的源的索引</span><br><span class=\"line\">apt-get update</span><br><span class=\"line\"># 做过上面更新同步之后，可以运行下面的命令了</span><br><span class=\"line\">apt-get install vim</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"容器管理\"><a href=\"#容器管理\" class=\"headerlink\" title=\"容器管理\"></a>容器管理</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 列出本机正在运行的容器</span><br><span class=\"line\">docker container ls</span><br><span class=\"line\"># 列出本机所有容器，包括终止运行的容器</span><br><span class=\"line\">docker container ls --all</span><br><span class=\"line\">docker start [containerID/Names] # 启动容器</span><br><span class=\"line\">docker stop [containerID/Names]  # 停止容器</span><br><span class=\"line\">docker rm [containerID/Names]    # 删除容器</span><br><span class=\"line\">docker logs [containerID/Names]  # 查看日志</span><br><span class=\"line\">docker exec -it [containerID/Names] /bin/bash  # 进入容器</span><br><span class=\"line\"></span><br><span class=\"line\"># 从正在运行的 Docker 容器里面，将文件拷贝到本机，注意后面有个【点】拷贝到当前目录</span><br><span class=\"line\">docker container cp [containID]:[/path/to/file] .</span><br><span class=\"line\"></span><br><span class=\"line\">docker run centos echo &quot;hello world&quot;  # 在docker容器中运行hello world!</span><br><span class=\"line\">docker run centos yum install -y wget # 在docker容器中，安装wget软件</span><br><span class=\"line\">docker ps                             # 列出包括未运行的容器</span><br><span class=\"line\">docker ps -a                          # 查看所有容器(包括正在运行和已停止的)</span><br><span class=\"line\">docker logs my-nginx                  # 查看 my-nginx 容器日志</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -i -t centos /bin/bash     # 启动一个容器</span><br><span class=\"line\">docker inspect centos                 # 检查运行中的镜像</span><br><span class=\"line\">docker commit 8bd centos              # 保存对容器的修改</span><br><span class=\"line\">docker commit -m &quot;n changed&quot; my-nginx my-nginx-image # 使用已经存在的容器创建一个镜像</span><br><span class=\"line\">docker inspect -f &#123;&#123;.State.Pid&#125;&#125; 44fc0f0582d9        # 获取id为 44fc0f0582d9 的PID进程编号</span><br><span class=\"line\"># 下载指定版本容器镜像</span><br><span class=\"line\">docker pull gitlab/gitlab-ce:11.2.3-ce.0</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"文件拷贝\"><a href=\"#文件拷贝\" class=\"headerlink\" title=\"文件拷贝\"></a>文件拷贝</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">从主机复制到容器 sudo docker cp host_path containerID:container_path</span><br><span class=\"line\">从容器复制到主机 sudo docker cp containerID:container_path host_path</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Docker私有仓库搭建\"><a href=\"#Docker私有仓库搭建\" class=\"headerlink\" title=\"Docker私有仓库搭建\"></a>Docker私有仓库搭建</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Harbor 还有 humpback 和 rancher</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"临时运行服务\"><a href=\"#临时运行服务\" class=\"headerlink\" title=\"临时运行服务\"></a>临时运行服务</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  -p 5000:5000 \\</span><br><span class=\"line\">  --restart=always \\</span><br><span class=\"line\">  --name registry \\</span><br><span class=\"line\">  registry:2</span><br><span class=\"line\"></span><br><span class=\"line\">或者</span><br><span class=\"line\"></span><br><span class=\"line\"># ctrl+c退出自动删除容器</span><br><span class=\"line\">docker run --rm \\</span><br><span class=\"line\">    --name asynqmon \\</span><br><span class=\"line\">    -p 8080:8080 \\</span><br><span class=\"line\">    hibiken/asynqmon</span><br><span class=\"line\"></span><br><span class=\"line\"># 自定义存储位置</span><br><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  -p 5000:5000 \\</span><br><span class=\"line\">  --restart=always \\</span><br><span class=\"line\">  --name registry \\</span><br><span class=\"line\">  -v $HOME/_docker/registry:/var/lib/registry \\</span><br><span class=\"line\">  registry:2</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d -p 5000:5000 --restart=always --name registry \\</span><br><span class=\"line\">    -v `pwd`/config.yml:/etc/docker/registry/config.yml \\</span><br><span class=\"line\">    registry:2</span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"使用docker实战\"><a href=\"#使用docker实战\" class=\"headerlink\" title=\"使用docker实战\"></a>使用docker实战</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-d, --detach=false      # 指定容器运行于前台还是后台，默认为false   </span><br><span class=\"line\">-i, --interactive=false # 打开STDIN，用于控制台交互  </span><br><span class=\"line\">-t, --tty=false         # 分配tty设备，该可以支持终端登录，默认为false  </span><br><span class=\"line\">-u, --user=&quot;&quot;           # 指定容器的用户  </span><br><span class=\"line\">-a, --attach=[]         # 登录容器（必须是以docker run -d启动的容器）</span><br><span class=\"line\">-w, --workdir=&quot;&quot;        # 指定容器的工作目录 </span><br><span class=\"line\">-c, --cpu-shares=0      # 设置容器CPU权重，在CPU共享场景使用  </span><br><span class=\"line\">-e, --env=[]            # 指定环境变量，容器中可以使用该环境变量  </span><br><span class=\"line\">-m, --memory=&quot;&quot;         # 指定容器的内存上限  </span><br><span class=\"line\">-P, --publish-all=false # 指定容器暴露的端口  </span><br><span class=\"line\">-p, --publish=[]        # 指定容器暴露的端口 </span><br><span class=\"line\">-h, --hostname=&quot;&quot;       # 指定容器的主机名  </span><br><span class=\"line\">-v, --volume=[]         # 给容器挂载存储卷，挂载到容器的某个目录  </span><br><span class=\"line\">--volumes-from=[]       # 给容器挂载其他容器上的卷，挂载到容器的某个目录</span><br><span class=\"line\">--cap-add=[]            # 添加权限，权限清单详见：http://linux.die.net/man/7/capabilities  </span><br><span class=\"line\">--cap-drop=[]           # 删除权限，权限清单详见：http://linux.die.net/man/7/capabilities  </span><br><span class=\"line\">--cidfile=&quot;&quot;            # 运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法  </span><br><span class=\"line\">--cpuset=&quot;&quot;             # 设置容器可以使用哪些CPU，此参数可以用来容器独占CPU  </span><br><span class=\"line\">--device=[]             # 添加主机设备给容器，相当于设备直通  </span><br><span class=\"line\">--dns=[]                # 指定容器的dns服务器  </span><br><span class=\"line\">--dns-search=[]         # 指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件  </span><br><span class=\"line\">--entrypoint=&quot;&quot;         # 覆盖image的入口点  </span><br><span class=\"line\">--env-file=[]           # 指定环境变量文件，文件格式为每行一个环境变量  </span><br><span class=\"line\">--expose=[]             # 指定容器暴露的端口，即修改镜像的暴露端口  </span><br><span class=\"line\">--link=[]               # 指定容器间的关联，使用其他容器的IP、env等信息  </span><br><span class=\"line\">--lxc-conf=[]           # 指定容器的配置文件，只有在指定--exec-driver=lxc时使用  </span><br><span class=\"line\">--name=&quot;&quot;               # 指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字  </span><br><span class=\"line\">--net=&quot;bridge&quot;          # 容器网络设置:</span><br><span class=\"line\">                            # bridge 使用docker daemon指定的网桥     </span><br><span class=\"line\">                            # host \t//容器使用主机的网络  </span><br><span class=\"line\">                            # container:NAME_or_ID  &gt;//使用其他容器的网路，共享IP和PORT等网络资源  </span><br><span class=\"line\">                            # none 容器使用自己的网络（类似--net=bridge），但是不进行配置 </span><br><span class=\"line\">--privileged=false      # 指定容器是否为特权容器，特权容器拥有所有的capabilities  </span><br><span class=\"line\">--restart=&quot;no&quot;          # 指定容器停止后的重启策略:</span><br><span class=\"line\">                            # no：容器退出时不重启  </span><br><span class=\"line\">                            # on-failure：容器故障退出（返回值非零）时重启 </span><br><span class=\"line\">                            # always：容器退出时总是重启  </span><br><span class=\"line\">--rm=false              # 指定容器停止后自动删除容器(不支持以docker run -d启动的容器)  </span><br><span class=\"line\">--sig-proxy=true        # 设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理</span><br></pre></td></tr></table></figure>\n\n<p>参考：<a href=\"https://raw.githack.com/jaywcjlove/docker-tutorial/7a41060/index.html\">https://raw.githack.com/jaywcjlove/docker-tutorial/7a41060/index.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"安装docker-ce\"><a href=\"#安装docker-ce\" class=\"headerlink\" title=\"安装docker-ce\"></a>安装docker-ce</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装一些必要的系统工具</span><br><span class=\"line\">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加源信息</span><br><span class=\"line\"># docker 官方源</span><br><span class=\"line\">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\"># 阿里云源</span><br><span class=\"line\">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装前可以先更新 yum 缓存：</span><br><span class=\"line\">sudo yum makecache fast</span><br><span class=\"line\"># 安装 Docker-ce</span><br><span class=\"line\">sudo yum install docker-ce</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果你想安装特定 docker-ce 版本，先列出 repo 中可用版本，然后选择安装</span><br><span class=\"line\">$ yum list docker-ce --showduplicates | sort -r</span><br><span class=\"line\"># docker-ce.x86_64       18.06.1.ce-3.el7              docker-ce-stable</span><br><span class=\"line\"># docker-ce.x86_64       18.06.1.ce-3.el7              @docker-ce-stable</span><br><span class=\"line\"># docker-ce.x86_64       18.06.0.ce-3.el7              docker-ce-stable</span><br><span class=\"line\"># docker-ce.x86_64       18.03.1.ce-1.el7.centos       docker-ce-stable</span><br><span class=\"line\"># docker-ce.x86_64       18.03.0.ce-1.el7.centos       docker-ce-stable</span><br><span class=\"line\"># docker-ce.x86_64       17.12.1.ce-1.el7.centos       docker-ce-stable</span><br><span class=\"line\"># 选择版本安装</span><br><span class=\"line\">$ sudo yum install docker-ce-&lt;VERSION STRING&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 选择安装 docker-ce-18.06.1.ce</span><br><span class=\"line\">$ sudo yum install docker-ce-18.06.1.ce</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动 Docker 后台服务</span><br><span class=\"line\">sudo systemctl start docker</span><br><span class=\"line\"></span><br><span class=\"line\"># 通过运行 hello-world 镜像，验证是否正确安装了 docker</span><br><span class=\"line\">docker run hello-world</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"命令介绍\"><a href=\"#命令介绍\" class=\"headerlink\" title=\"命令介绍\"></a>命令介绍</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker --help</span><br><span class=\"line\"></span><br><span class=\"line\">管理命令:</span><br><span class=\"line\">  container   管理容器</span><br><span class=\"line\">  image       管理镜像</span><br><span class=\"line\">  network     管理网络</span><br><span class=\"line\">命令：</span><br><span class=\"line\">  attach      介入到一个正在运行的容器</span><br><span class=\"line\">  build       根据 Dockerfile 构建一个镜像</span><br><span class=\"line\">  commit      根据容器的更改创建一个新的镜像</span><br><span class=\"line\">  cp          在本地文件系统与容器中复制 文件/文件夹</span><br><span class=\"line\">  create      创建一个新容器</span><br><span class=\"line\">  exec        在容器中执行一条命令</span><br><span class=\"line\">  images      列出镜像</span><br><span class=\"line\">  kill        杀死一个或多个正在运行的容器    </span><br><span class=\"line\">  logs        取得容器的日志</span><br><span class=\"line\">  pause       暂停一个或多个容器的所有进程</span><br><span class=\"line\">  ps          列出所有容器</span><br><span class=\"line\">  pull        拉取一个镜像或仓库到 registry</span><br><span class=\"line\">  push        推送一个镜像或仓库到 registry</span><br><span class=\"line\">  rename      重命名一个容器</span><br><span class=\"line\">  restart     重新启动一个或多个容器</span><br><span class=\"line\">  rm          删除一个或多个容器</span><br><span class=\"line\">  rmi         删除一个或多个镜像</span><br><span class=\"line\">  run         在一个新的容器中执行一条命令</span><br><span class=\"line\">  search      在 Docker Hub 中搜索镜像</span><br><span class=\"line\">  start       启动一个或多个已经停止运行的容器</span><br><span class=\"line\">  stats       显示一个容器的实时资源占用</span><br><span class=\"line\">  stop        停止一个或多个正在运行的容器</span><br><span class=\"line\">  tag         为镜像创建一个新的标签</span><br><span class=\"line\">  top         显示一个容器内的所有进程</span><br><span class=\"line\">  unpause     恢复一个或多个容器内所有被暂停的进程</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"镜像管理\"><a href=\"#镜像管理\" class=\"headerlink\" title=\"镜像管理\"></a>镜像管理</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull centos:latest  # 从docker.io中下载centos镜像到本地</span><br><span class=\"line\">docker images              # 查看已下载的镜像</span><br><span class=\"line\">docker rmi [image_id]      # 删除镜像，指定镜像id</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除所有镜像</span><br><span class=\"line\"># none 默认为 docker.io</span><br><span class=\"line\">docker rmi $(docker images | grep none | awk &#x27;&#123;print $3&#125;&#x27; | sort -r)</span><br><span class=\"line\"></span><br><span class=\"line\"># 连接进行进入命令行模式，exit命令退出。</span><br><span class=\"line\">docker run -t -i nginx:latest /bin/bash</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"通过容器创建镜像\"><a href=\"#通过容器创建镜像\" class=\"headerlink\" title=\"通过容器创建镜像\"></a>通过容器创建镜像</h5><p>两种方式：<br>1.从已经创建的容器中更新镜像，并且提交这个镜像<br>2.使用 Dockerfile 指令来创建一个新的镜像</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 第一种</span><br><span class=\"line\">docker commit -m=&quot;First Docker&quot; -a=&quot;wcjiang&quot; a6b0a6cfdacf wcjiang/nginx:v1.2.1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 第二种</span><br><span class=\"line\">touch Dockerfile .dockerignore</span><br></pre></td></tr></table></figure>\n<p>.dockerignoren内容（用于忽略加入镜像的内容）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.git</span><br><span class=\"line\">node_modules</span><br><span class=\"line\">npm-debug.log</span><br></pre></td></tr></table></figure>\n<p>Dockerfile内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM node:8.4</span><br><span class=\"line\">COPY . /app</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">RUN npm install --registry=https://registry.npm.taobao.org</span><br><span class=\"line\">EXPOSE 3000</span><br></pre></td></tr></table></figure>\n<h5 id=\"创建镜像\"><a href=\"#创建镜像\" class=\"headerlink\" title=\"创建镜像\"></a>创建镜像</h5><p>docker build -t koa-demo .</p>\n<h5 id=\"发布镜像\"><a href=\"#发布镜像\" class=\"headerlink\" title=\"发布镜像\"></a>发布镜像</h5><p>docker tag wcjiang&#x2F;nginx:v1.2.1 wcjiang&#x2F;nginx-test:lastest<br>docker login<br>docker push wcjiang&#x2F;nginx-test:lastest</p>\n<h5 id=\"镜像安装软件\"><a href=\"#镜像安装软件\" class=\"headerlink\" title=\"镜像安装软件\"></a>镜像安装软件</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 第一次需要运行这个命令，确保源的索引是最新的</span><br><span class=\"line\"># 同步 /etc/apt/sources.list 和 /etc/apt/sources.list.d 中列出的源的索引</span><br><span class=\"line\">apt-get update</span><br><span class=\"line\"># 做过上面更新同步之后，可以运行下面的命令了</span><br><span class=\"line\">apt-get install vim</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"容器管理\"><a href=\"#容器管理\" class=\"headerlink\" title=\"容器管理\"></a>容器管理</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 列出本机正在运行的容器</span><br><span class=\"line\">docker container ls</span><br><span class=\"line\"># 列出本机所有容器，包括终止运行的容器</span><br><span class=\"line\">docker container ls --all</span><br><span class=\"line\">docker start [containerID/Names] # 启动容器</span><br><span class=\"line\">docker stop [containerID/Names]  # 停止容器</span><br><span class=\"line\">docker rm [containerID/Names]    # 删除容器</span><br><span class=\"line\">docker logs [containerID/Names]  # 查看日志</span><br><span class=\"line\">docker exec -it [containerID/Names] /bin/bash  # 进入容器</span><br><span class=\"line\"></span><br><span class=\"line\"># 从正在运行的 Docker 容器里面，将文件拷贝到本机，注意后面有个【点】拷贝到当前目录</span><br><span class=\"line\">docker container cp [containID]:[/path/to/file] .</span><br><span class=\"line\"></span><br><span class=\"line\">docker run centos echo &quot;hello world&quot;  # 在docker容器中运行hello world!</span><br><span class=\"line\">docker run centos yum install -y wget # 在docker容器中，安装wget软件</span><br><span class=\"line\">docker ps                             # 列出包括未运行的容器</span><br><span class=\"line\">docker ps -a                          # 查看所有容器(包括正在运行和已停止的)</span><br><span class=\"line\">docker logs my-nginx                  # 查看 my-nginx 容器日志</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -i -t centos /bin/bash     # 启动一个容器</span><br><span class=\"line\">docker inspect centos                 # 检查运行中的镜像</span><br><span class=\"line\">docker commit 8bd centos              # 保存对容器的修改</span><br><span class=\"line\">docker commit -m &quot;n changed&quot; my-nginx my-nginx-image # 使用已经存在的容器创建一个镜像</span><br><span class=\"line\">docker inspect -f &#123;&#123;.State.Pid&#125;&#125; 44fc0f0582d9        # 获取id为 44fc0f0582d9 的PID进程编号</span><br><span class=\"line\"># 下载指定版本容器镜像</span><br><span class=\"line\">docker pull gitlab/gitlab-ce:11.2.3-ce.0</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"文件拷贝\"><a href=\"#文件拷贝\" class=\"headerlink\" title=\"文件拷贝\"></a>文件拷贝</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">从主机复制到容器 sudo docker cp host_path containerID:container_path</span><br><span class=\"line\">从容器复制到主机 sudo docker cp containerID:container_path host_path</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Docker私有仓库搭建\"><a href=\"#Docker私有仓库搭建\" class=\"headerlink\" title=\"Docker私有仓库搭建\"></a>Docker私有仓库搭建</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Harbor 还有 humpback 和 rancher</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"临时运行服务\"><a href=\"#临时运行服务\" class=\"headerlink\" title=\"临时运行服务\"></a>临时运行服务</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  -p 5000:5000 \\</span><br><span class=\"line\">  --restart=always \\</span><br><span class=\"line\">  --name registry \\</span><br><span class=\"line\">  registry:2</span><br><span class=\"line\"></span><br><span class=\"line\">或者</span><br><span class=\"line\"></span><br><span class=\"line\"># ctrl+c退出自动删除容器</span><br><span class=\"line\">docker run --rm \\</span><br><span class=\"line\">    --name asynqmon \\</span><br><span class=\"line\">    -p 8080:8080 \\</span><br><span class=\"line\">    hibiken/asynqmon</span><br><span class=\"line\"></span><br><span class=\"line\"># 自定义存储位置</span><br><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  -p 5000:5000 \\</span><br><span class=\"line\">  --restart=always \\</span><br><span class=\"line\">  --name registry \\</span><br><span class=\"line\">  -v $HOME/_docker/registry:/var/lib/registry \\</span><br><span class=\"line\">  registry:2</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d -p 5000:5000 --restart=always --name registry \\</span><br><span class=\"line\">    -v `pwd`/config.yml:/etc/docker/registry/config.yml \\</span><br><span class=\"line\">    registry:2</span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"使用docker实战\"><a href=\"#使用docker实战\" class=\"headerlink\" title=\"使用docker实战\"></a>使用docker实战</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-d, --detach=false      # 指定容器运行于前台还是后台，默认为false   </span><br><span class=\"line\">-i, --interactive=false # 打开STDIN，用于控制台交互  </span><br><span class=\"line\">-t, --tty=false         # 分配tty设备，该可以支持终端登录，默认为false  </span><br><span class=\"line\">-u, --user=&quot;&quot;           # 指定容器的用户  </span><br><span class=\"line\">-a, --attach=[]         # 登录容器（必须是以docker run -d启动的容器）</span><br><span class=\"line\">-w, --workdir=&quot;&quot;        # 指定容器的工作目录 </span><br><span class=\"line\">-c, --cpu-shares=0      # 设置容器CPU权重，在CPU共享场景使用  </span><br><span class=\"line\">-e, --env=[]            # 指定环境变量，容器中可以使用该环境变量  </span><br><span class=\"line\">-m, --memory=&quot;&quot;         # 指定容器的内存上限  </span><br><span class=\"line\">-P, --publish-all=false # 指定容器暴露的端口  </span><br><span class=\"line\">-p, --publish=[]        # 指定容器暴露的端口 </span><br><span class=\"line\">-h, --hostname=&quot;&quot;       # 指定容器的主机名  </span><br><span class=\"line\">-v, --volume=[]         # 给容器挂载存储卷，挂载到容器的某个目录  </span><br><span class=\"line\">--volumes-from=[]       # 给容器挂载其他容器上的卷，挂载到容器的某个目录</span><br><span class=\"line\">--cap-add=[]            # 添加权限，权限清单详见：http://linux.die.net/man/7/capabilities  </span><br><span class=\"line\">--cap-drop=[]           # 删除权限，权限清单详见：http://linux.die.net/man/7/capabilities  </span><br><span class=\"line\">--cidfile=&quot;&quot;            # 运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法  </span><br><span class=\"line\">--cpuset=&quot;&quot;             # 设置容器可以使用哪些CPU，此参数可以用来容器独占CPU  </span><br><span class=\"line\">--device=[]             # 添加主机设备给容器，相当于设备直通  </span><br><span class=\"line\">--dns=[]                # 指定容器的dns服务器  </span><br><span class=\"line\">--dns-search=[]         # 指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件  </span><br><span class=\"line\">--entrypoint=&quot;&quot;         # 覆盖image的入口点  </span><br><span class=\"line\">--env-file=[]           # 指定环境变量文件，文件格式为每行一个环境变量  </span><br><span class=\"line\">--expose=[]             # 指定容器暴露的端口，即修改镜像的暴露端口  </span><br><span class=\"line\">--link=[]               # 指定容器间的关联，使用其他容器的IP、env等信息  </span><br><span class=\"line\">--lxc-conf=[]           # 指定容器的配置文件，只有在指定--exec-driver=lxc时使用  </span><br><span class=\"line\">--name=&quot;&quot;               # 指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字  </span><br><span class=\"line\">--net=&quot;bridge&quot;          # 容器网络设置:</span><br><span class=\"line\">                            # bridge 使用docker daemon指定的网桥     </span><br><span class=\"line\">                            # host \t//容器使用主机的网络  </span><br><span class=\"line\">                            # container:NAME_or_ID  &gt;//使用其他容器的网路，共享IP和PORT等网络资源  </span><br><span class=\"line\">                            # none 容器使用自己的网络（类似--net=bridge），但是不进行配置 </span><br><span class=\"line\">--privileged=false      # 指定容器是否为特权容器，特权容器拥有所有的capabilities  </span><br><span class=\"line\">--restart=&quot;no&quot;          # 指定容器停止后的重启策略:</span><br><span class=\"line\">                            # no：容器退出时不重启  </span><br><span class=\"line\">                            # on-failure：容器故障退出（返回值非零）时重启 </span><br><span class=\"line\">                            # always：容器退出时总是重启  </span><br><span class=\"line\">--rm=false              # 指定容器停止后自动删除容器(不支持以docker run -d启动的容器)  </span><br><span class=\"line\">--sig-proxy=true        # 设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理</span><br></pre></td></tr></table></figure>\n\n<p>参考：<a href=\"https://raw.githack.com/jaywcjlove/docker-tutorial/7a41060/index.html\">https://raw.githack.com/jaywcjlove/docker-tutorial/7a41060/index.html</a></p>\n"},{"title":"第25期：supervisor","date":"2023-05-22T07:38:25.000Z","_content":"#### supervisor启动查找supervisord.conf配置文件顺序\n```\n$CWD/supervisord.conf -> $CWD/etc/supervisord.conf -> /etc/supervisord.conf     # 优先级由高到低\n\nsupervisord -c /etc/supervisord.conf\nsupervisorctl -c /etc/supervisord.conf # 直接指定\n```\n\n#### supervisor作用？\n集中管理子进程\n\n#### supervisor的组件\n```\nsupervisord          # supervisor的服务端\nsupervisorctl        # supervisor的客户端\n```\n\n##### 配置文件详解\n```\n[unix_http_server]            \nfile=/tmp/supervisor.sock   ; socket文件作用：supervisorctl与supervisord(服务端)通信\n;chmod=0700                 ; socket文件权限\n;username=user              ; 使用supervisorctl时候的认证用户，默认不认证\n;password=123\n\n[supervisord]               ; 定义supervisord服务端运行时的参数\nlogfile=/tmp/supervisord.log; 定义supervisord主进程\nlogfile_maxbytes=50MB       ; 设置文件最大；超过50M则生成新的文件\npidfile=/tmp/supervisord.pid; pid文件\nnodaemon=false              ; 以守护进程运行\n\n[supervisorctl]              ;这个主要是针对supervisorctl的一些配置  \nserverurl=unix:///tmp/supervisor.sock ; 这个是supervisorctl本地连接supervisord的时候，本地UNIX socket路径，注意这个是和前面的[unix_http_server]对应的；默认值就是unix:///tmp/supervisor.sock\n\n[program:create_elastic_index]             \ncommand                 = /opt/php/bin/php /data/website/clou/artisan queue:work --queue=create_elastic_index --tries=3 --daemon    ;  command不能是后台进程\ndirectory               = /data/website/cloer-v2                                                                                    ; 进程运行前会切换到此目录\nprocess_name            = %(program_name)s_%(process_num)s\npriority                = 999            ; 进程启动优先级，优先级低的先启动\nnumprocs                = 2\nautostart               = true\nautorestart             = true            ; 如果为unexpected，只有当进程的退出码不在下面的exitcodes里面定义的退出码时才会被重启；true表进程只要挂掉就无条件重启。\n;exitcodes              = 0,2\nstdout_logfile          = /data/website/cloudedr-v2/storage/logs/supervisor-clip_crdex.log\nstdout_logfile_maxbytes = 10MB\nstderr_logfile          = /data/website/cloudeder-v2/storage/logs/supervisor-clip_crdex.log\nstderr_logfile_maxbytes = 10MB\numask=002\nuser=nobody\n```","source":"_posts/第25期：supervisor.md","raw":"---\ntitle: 第25期：supervisor\ndate: 2023-05-22 15:38:25\ntags:\n---\n#### supervisor启动查找supervisord.conf配置文件顺序\n```\n$CWD/supervisord.conf -> $CWD/etc/supervisord.conf -> /etc/supervisord.conf     # 优先级由高到低\n\nsupervisord -c /etc/supervisord.conf\nsupervisorctl -c /etc/supervisord.conf # 直接指定\n```\n\n#### supervisor作用？\n集中管理子进程\n\n#### supervisor的组件\n```\nsupervisord          # supervisor的服务端\nsupervisorctl        # supervisor的客户端\n```\n\n##### 配置文件详解\n```\n[unix_http_server]            \nfile=/tmp/supervisor.sock   ; socket文件作用：supervisorctl与supervisord(服务端)通信\n;chmod=0700                 ; socket文件权限\n;username=user              ; 使用supervisorctl时候的认证用户，默认不认证\n;password=123\n\n[supervisord]               ; 定义supervisord服务端运行时的参数\nlogfile=/tmp/supervisord.log; 定义supervisord主进程\nlogfile_maxbytes=50MB       ; 设置文件最大；超过50M则生成新的文件\npidfile=/tmp/supervisord.pid; pid文件\nnodaemon=false              ; 以守护进程运行\n\n[supervisorctl]              ;这个主要是针对supervisorctl的一些配置  \nserverurl=unix:///tmp/supervisor.sock ; 这个是supervisorctl本地连接supervisord的时候，本地UNIX socket路径，注意这个是和前面的[unix_http_server]对应的；默认值就是unix:///tmp/supervisor.sock\n\n[program:create_elastic_index]             \ncommand                 = /opt/php/bin/php /data/website/clou/artisan queue:work --queue=create_elastic_index --tries=3 --daemon    ;  command不能是后台进程\ndirectory               = /data/website/cloer-v2                                                                                    ; 进程运行前会切换到此目录\nprocess_name            = %(program_name)s_%(process_num)s\npriority                = 999            ; 进程启动优先级，优先级低的先启动\nnumprocs                = 2\nautostart               = true\nautorestart             = true            ; 如果为unexpected，只有当进程的退出码不在下面的exitcodes里面定义的退出码时才会被重启；true表进程只要挂掉就无条件重启。\n;exitcodes              = 0,2\nstdout_logfile          = /data/website/cloudedr-v2/storage/logs/supervisor-clip_crdex.log\nstdout_logfile_maxbytes = 10MB\nstderr_logfile          = /data/website/cloudeder-v2/storage/logs/supervisor-clip_crdex.log\nstderr_logfile_maxbytes = 10MB\numask=002\nuser=nobody\n```","slug":"第25期：supervisor","published":1,"updated":"2024-03-06T06:55:18.355Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt6o000f9kln2scce7cc","content":"<h4 id=\"supervisor启动查找supervisord-conf配置文件顺序\"><a href=\"#supervisor启动查找supervisord-conf配置文件顺序\" class=\"headerlink\" title=\"supervisor启动查找supervisord.conf配置文件顺序\"></a>supervisor启动查找supervisord.conf配置文件顺序</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$CWD/supervisord.conf -&gt; $CWD/etc/supervisord.conf -&gt; /etc/supervisord.conf     # 优先级由高到低</span><br><span class=\"line\"></span><br><span class=\"line\">supervisord -c /etc/supervisord.conf</span><br><span class=\"line\">supervisorctl -c /etc/supervisord.conf # 直接指定</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"supervisor作用？\"><a href=\"#supervisor作用？\" class=\"headerlink\" title=\"supervisor作用？\"></a>supervisor作用？</h4><p>集中管理子进程</p>\n<h4 id=\"supervisor的组件\"><a href=\"#supervisor的组件\" class=\"headerlink\" title=\"supervisor的组件\"></a>supervisor的组件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisord          # supervisor的服务端</span><br><span class=\"line\">supervisorctl        # supervisor的客户端</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"配置文件详解\"><a href=\"#配置文件详解\" class=\"headerlink\" title=\"配置文件详解\"></a>配置文件详解</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[unix_http_server]            </span><br><span class=\"line\">file=/tmp/supervisor.sock   ; socket文件作用：supervisorctl与supervisord(服务端)通信</span><br><span class=\"line\">;chmod=0700                 ; socket文件权限</span><br><span class=\"line\">;username=user              ; 使用supervisorctl时候的认证用户，默认不认证</span><br><span class=\"line\">;password=123</span><br><span class=\"line\"></span><br><span class=\"line\">[supervisord]               ; 定义supervisord服务端运行时的参数</span><br><span class=\"line\">logfile=/tmp/supervisord.log; 定义supervisord主进程</span><br><span class=\"line\">logfile_maxbytes=50MB       ; 设置文件最大；超过50M则生成新的文件</span><br><span class=\"line\">pidfile=/tmp/supervisord.pid; pid文件</span><br><span class=\"line\">nodaemon=false              ; 以守护进程运行</span><br><span class=\"line\"></span><br><span class=\"line\">[supervisorctl]              ;这个主要是针对supervisorctl的一些配置  </span><br><span class=\"line\">serverurl=unix:///tmp/supervisor.sock ; 这个是supervisorctl本地连接supervisord的时候，本地UNIX socket路径，注意这个是和前面的[unix_http_server]对应的；默认值就是unix:///tmp/supervisor.sock</span><br><span class=\"line\"></span><br><span class=\"line\">[program:create_elastic_index]             </span><br><span class=\"line\">command                 = /opt/php/bin/php /data/website/clou/artisan queue:work --queue=create_elastic_index --tries=3 --daemon    ;  command不能是后台进程</span><br><span class=\"line\">directory               = /data/website/cloer-v2                                                                                    ; 进程运行前会切换到此目录</span><br><span class=\"line\">process_name            = %(program_name)s_%(process_num)s</span><br><span class=\"line\">priority                = 999            ; 进程启动优先级，优先级低的先启动</span><br><span class=\"line\">numprocs                = 2</span><br><span class=\"line\">autostart               = true</span><br><span class=\"line\">autorestart             = true            ; 如果为unexpected，只有当进程的退出码不在下面的exitcodes里面定义的退出码时才会被重启；true表进程只要挂掉就无条件重启。</span><br><span class=\"line\">;exitcodes              = 0,2</span><br><span class=\"line\">stdout_logfile          = /data/website/cloudedr-v2/storage/logs/supervisor-clip_crdex.log</span><br><span class=\"line\">stdout_logfile_maxbytes = 10MB</span><br><span class=\"line\">stderr_logfile          = /data/website/cloudeder-v2/storage/logs/supervisor-clip_crdex.log</span><br><span class=\"line\">stderr_logfile_maxbytes = 10MB</span><br><span class=\"line\">umask=002</span><br><span class=\"line\">user=nobody</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"supervisor启动查找supervisord-conf配置文件顺序\"><a href=\"#supervisor启动查找supervisord-conf配置文件顺序\" class=\"headerlink\" title=\"supervisor启动查找supervisord.conf配置文件顺序\"></a>supervisor启动查找supervisord.conf配置文件顺序</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$CWD/supervisord.conf -&gt; $CWD/etc/supervisord.conf -&gt; /etc/supervisord.conf     # 优先级由高到低</span><br><span class=\"line\"></span><br><span class=\"line\">supervisord -c /etc/supervisord.conf</span><br><span class=\"line\">supervisorctl -c /etc/supervisord.conf # 直接指定</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"supervisor作用？\"><a href=\"#supervisor作用？\" class=\"headerlink\" title=\"supervisor作用？\"></a>supervisor作用？</h4><p>集中管理子进程</p>\n<h4 id=\"supervisor的组件\"><a href=\"#supervisor的组件\" class=\"headerlink\" title=\"supervisor的组件\"></a>supervisor的组件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisord          # supervisor的服务端</span><br><span class=\"line\">supervisorctl        # supervisor的客户端</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"配置文件详解\"><a href=\"#配置文件详解\" class=\"headerlink\" title=\"配置文件详解\"></a>配置文件详解</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[unix_http_server]            </span><br><span class=\"line\">file=/tmp/supervisor.sock   ; socket文件作用：supervisorctl与supervisord(服务端)通信</span><br><span class=\"line\">;chmod=0700                 ; socket文件权限</span><br><span class=\"line\">;username=user              ; 使用supervisorctl时候的认证用户，默认不认证</span><br><span class=\"line\">;password=123</span><br><span class=\"line\"></span><br><span class=\"line\">[supervisord]               ; 定义supervisord服务端运行时的参数</span><br><span class=\"line\">logfile=/tmp/supervisord.log; 定义supervisord主进程</span><br><span class=\"line\">logfile_maxbytes=50MB       ; 设置文件最大；超过50M则生成新的文件</span><br><span class=\"line\">pidfile=/tmp/supervisord.pid; pid文件</span><br><span class=\"line\">nodaemon=false              ; 以守护进程运行</span><br><span class=\"line\"></span><br><span class=\"line\">[supervisorctl]              ;这个主要是针对supervisorctl的一些配置  </span><br><span class=\"line\">serverurl=unix:///tmp/supervisor.sock ; 这个是supervisorctl本地连接supervisord的时候，本地UNIX socket路径，注意这个是和前面的[unix_http_server]对应的；默认值就是unix:///tmp/supervisor.sock</span><br><span class=\"line\"></span><br><span class=\"line\">[program:create_elastic_index]             </span><br><span class=\"line\">command                 = /opt/php/bin/php /data/website/clou/artisan queue:work --queue=create_elastic_index --tries=3 --daemon    ;  command不能是后台进程</span><br><span class=\"line\">directory               = /data/website/cloer-v2                                                                                    ; 进程运行前会切换到此目录</span><br><span class=\"line\">process_name            = %(program_name)s_%(process_num)s</span><br><span class=\"line\">priority                = 999            ; 进程启动优先级，优先级低的先启动</span><br><span class=\"line\">numprocs                = 2</span><br><span class=\"line\">autostart               = true</span><br><span class=\"line\">autorestart             = true            ; 如果为unexpected，只有当进程的退出码不在下面的exitcodes里面定义的退出码时才会被重启；true表进程只要挂掉就无条件重启。</span><br><span class=\"line\">;exitcodes              = 0,2</span><br><span class=\"line\">stdout_logfile          = /data/website/cloudedr-v2/storage/logs/supervisor-clip_crdex.log</span><br><span class=\"line\">stdout_logfile_maxbytes = 10MB</span><br><span class=\"line\">stderr_logfile          = /data/website/cloudeder-v2/storage/logs/supervisor-clip_crdex.log</span><br><span class=\"line\">stderr_logfile_maxbytes = 10MB</span><br><span class=\"line\">umask=002</span><br><span class=\"line\">user=nobody</span><br></pre></td></tr></table></figure>"},{"title":"第26期：ansible","date":"2023-05-22T08:30:48.000Z","_content":"#### ansible介绍\nansible，就是通过ssh登录到远程主机执行命令的工具。\n\n#### centos 安装ansible和配置\n```\nyum install ansible -y\n```\n\n配置Ansible管理节点和主机的连接，在管理节点执行：\n```\nssh-keygen\nssh-copy-id root@ip # 复制Ansible管理节点的公钥到远程主机，这样它登录到远程主机就不用密码了。\n```\n\n设置远程主机地址的配置文件默认在`/etc/ansible/hosts`\n```\n# 不限定组的写法\n192.168.31.166\n\n# 命名一个组：web，一个组内可以设置多个远程主机节点\n[web]\n192.168.31.167\n```\n\n#### ansible命令\n```\nansible all -m ping # 检查ansible能否ping通管理主机，all表示hosts文件内写的所有主机\nansible all -a \"ls /opt/zz\" # 在所有主机下执行命令\nansible web -m copy -a \"src=/etc/hosts dest=/tmp/hosts\" # 拷贝文件到web组的/tmp/hosts\nansible web -m yum -a \"name=acme state=present\" # 在web组安装acme\nansible all -m user -a \"name=foo password=<crypted password here>\" # 添加用户\nansible web -m service -a \"name=httpd state=started\" # 启动web组的httpd服务\nansible all -m setup # 查看远程主机的全部系统信息\n```\n#### ansible 脚本编排 之ansible-playbook\nansible脚本名字叫playbook，以yml或yaml形式书写。\n\n执行脚本playbook命令\n```\nansible-playbook deploy.yml\n```\n\n#### ansible-playbook.yml书写注意\n- 文件名以`yml`或`yaml`结尾\n- 以`---`开头表示文件开头\n- `#` 表示注释\n- 都是以`-`加空格再写内容\n- hosts, variables, roles tasks等对象都是以`:`分割，冒号后要加一个空格\n- 执行脚本文件输出绿色代表成功，红色为失败\n\n核心的对象元素\n```\nhosts 主机组，如- hosts: node1\ntasks 任务列表\n```\n#### ansible-playbook使用\n```\nansible-playbook -i hosts deploy.yml\n```\n说明:\n- 命令后加选项 `--syntax-check` 可以检查语法，如 `ansible-playbook deploy.yml --syntax-check`\n- `--start-at=\"Install kubelet, kubeadm and kubectl\"`从指定任务开始执行\n\n##### 示例1：安装软件\n编辑ansible-demo.yaml\n```\n---\n- hosts: all\n  tasks:\n  - name: Install docker and its dependecies\n    yum: name=docker-ce state=present\n```\n\n在ansible-demo.yaml同级目录下，新建hosts文件，内容：\n```\n[masters]\nmaster ansible_host=192.168.1.146 ansible_user=root\n\n[workers]\nworker1 ansible_host=192.168.1.180 ansible_user=root\nworker2 ansible_host=192.168.1.181 ansible_user=root\n```\n\n执行：`ansible-playbook -i hosts ansible-demo.yaml` # -i 指定host文件\n\n- 问：`yum: name=docker-ce state=present`可以替换成`shell: yum install docker-ce -y`?\n\n- 答：不好，建议使用yum模块而不是yum命令。yum命令可能进行重新安装升级版本。yum模块的`state=present`代表如果安装的软件存在则不进行安装，如果不存在则安装。\n\n##### 示例1.2：安装软件-安装多个软件\n- name: Install required dependiences\n    yum: name={{ item }} state=present\n    with_items:\n      - yum-utils\n      - device-mapper-persistent-data\n      - lvm2\n\n##### 示例2：复制文件-将ansible管理节点的文件通过ansible复制到hosts列表机器\n编辑ansible-demo.yaml\n```\n---\n- hosts: masters # 代表只操纵masters组下的机器\n  tasks:\n  - name: copy file to masters\n    copy: \n      src: /opt/ansible-demo/hosts\n      dest: /tmp/hosts\n```\n执行：`ansible-playbook -i hosts ansible-demo.yaml`\n\n##### 示例3：重启服务-重启masters组的kubelet服务\n编辑ansible-demo.yaml\n```\n---\n- hosts: masters # 代表只操纵masters组下的机器\n  tasks:\n  - name: Restart kubelet\n    service:\n      name: kubelet\n      state: restarted\n```\n\n##### 示例4：执行shell-执行单条shell命令\n编辑ansible-demo.yaml\n```\n---\n- hosts: masters \n  tasks:\n  - name: Add docker repo /etc/yum.repos.d\n    shell: yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n```\n##### 示例5：执行shell-执行多条shell命令\n编辑ansible-demo.yaml\n```\n---\n- hosts: masters \n  tasks:\n  - name: set bridge filter rules\n    shell: |\n      cat << EOF > /etc/sysctl.d/99-kubernetes-cri.conf\n      net.bridge.bridge-nf-call-ip6tables = 1\n      net.bridge.bridge-nf-call-iptables = 1\n      net.ipv4.ip_forward = 1\n      user.max_user_namespaces=28633\n      EOF\n      sysctl -p /etc/sysctl.d/99-kubernetes-cri.conf\n```\n\n##### 示例6：执行shell-执行多条shell命令\n编辑ansible-demo.yaml\n```\n---\n- hosts: masters \n  tasks:\n  - name: set bridge filter rules\n    shell: |\n      cat << EOF > /etc/sysctl.d/99-kubernetes-cri.conf\n      net.bridge.bridge-nf-call-ip6tables = 1\n      net.bridge.bridge-nf-call-iptables = 1\n      net.ipv4.ip_forward = 1\n      user.max_user_namespaces=28633\n      EOF\n      sysctl -p /etc/sysctl.d/99-kubernetes-cri.conf\n```\n\n##### 示例7：保留结果-将命令执行后输出的内容保存到一个变量内 + 打印 + 输出到文件\n编辑ansible-demo.yaml\n```\n---\n- hosts: masters \n  tasks:\n  - name: Extract the join command\n    become: true\n    command: \"kubeadm token create --print-join-command\"\n    register: join_command # 存储变量\n  - name: show join command\n    debug:\n      var: join_command  # 打印变量\n  - name: Save kubeadm join command for cluster\n    local_action: copy content={{ join_command.stdout_lines | last | trim }} dest=command.txt # 将join_command的内容处理后输出到文件并保存在当前主机的执行目录下\n```\n\n#### expect\n```\n# 输入密码后，ssh远程执行命令\n#!/bin/bash\n  \n[ -e /bin/expect ] || { apt update; apt install -y expect > /dev/null 2>&1; }\n\npasswd='testing123'\n\n/usr/bin/expect <<-EOF\n\nset time 30\n\nspawn ssh root@192.168.1.181 echo \"rickyccc\" > /tmp/a.log\nexpect {\n\"*yes/no\" { semd \"yes\\r\"; exp_continue }\n\"*password:\" { send \"$passwd\\r\" }\n}\n\nexpect eof\nEOF\n====================================================================\n\n# 分发公钥到多个节点机器\n# 编写host文件\n192.168.1.180 root testing123\n192.168.1.181 root testing123\n\n# 编写脚本\n#!/bin/bash\n\nif [ ! -f ~/.ssh/id_rsa ];then\n ssh-keygen -t rsa -P \"\" -f ~/.ssh/id_rsa\nelse\n echo \"id_rsa has created ...\"\nfi\n\nwhile read line\n  do\n    ip=`echo $line | cut -d \" \" -f 1`\n    user=`echo $line | cut -d \" \" -f 2`\n    passwd=`echo $line | cut -d \" \" -f 3`\n\n\texpect <<EOF\n      set timeout 10\n      spawn ssh-copy-id $user@$ip\n      expect {\n        \"yes/no\" { send \"yes\\n\";exp_continue }\n        \"password\" { send \"$passwd\\n\" }\n      }\n     expect \"password\" { send \"$passwd\\n\" }\nEOF\n  done < host\n```\n参考：\nhttps://austinsnerdythings.com/2022/04/25/deploying-a-kubernetes-cluster-within-proxmox-using-ansible/\n\nhttps://getansible.com/README","source":"_posts/第26期：ansible.md","raw":"---\ntitle: 第26期：ansible\ndate: 2023-05-22 16:30:48\ntags:\n---\n#### ansible介绍\nansible，就是通过ssh登录到远程主机执行命令的工具。\n\n#### centos 安装ansible和配置\n```\nyum install ansible -y\n```\n\n配置Ansible管理节点和主机的连接，在管理节点执行：\n```\nssh-keygen\nssh-copy-id root@ip # 复制Ansible管理节点的公钥到远程主机，这样它登录到远程主机就不用密码了。\n```\n\n设置远程主机地址的配置文件默认在`/etc/ansible/hosts`\n```\n# 不限定组的写法\n192.168.31.166\n\n# 命名一个组：web，一个组内可以设置多个远程主机节点\n[web]\n192.168.31.167\n```\n\n#### ansible命令\n```\nansible all -m ping # 检查ansible能否ping通管理主机，all表示hosts文件内写的所有主机\nansible all -a \"ls /opt/zz\" # 在所有主机下执行命令\nansible web -m copy -a \"src=/etc/hosts dest=/tmp/hosts\" # 拷贝文件到web组的/tmp/hosts\nansible web -m yum -a \"name=acme state=present\" # 在web组安装acme\nansible all -m user -a \"name=foo password=<crypted password here>\" # 添加用户\nansible web -m service -a \"name=httpd state=started\" # 启动web组的httpd服务\nansible all -m setup # 查看远程主机的全部系统信息\n```\n#### ansible 脚本编排 之ansible-playbook\nansible脚本名字叫playbook，以yml或yaml形式书写。\n\n执行脚本playbook命令\n```\nansible-playbook deploy.yml\n```\n\n#### ansible-playbook.yml书写注意\n- 文件名以`yml`或`yaml`结尾\n- 以`---`开头表示文件开头\n- `#` 表示注释\n- 都是以`-`加空格再写内容\n- hosts, variables, roles tasks等对象都是以`:`分割，冒号后要加一个空格\n- 执行脚本文件输出绿色代表成功，红色为失败\n\n核心的对象元素\n```\nhosts 主机组，如- hosts: node1\ntasks 任务列表\n```\n#### ansible-playbook使用\n```\nansible-playbook -i hosts deploy.yml\n```\n说明:\n- 命令后加选项 `--syntax-check` 可以检查语法，如 `ansible-playbook deploy.yml --syntax-check`\n- `--start-at=\"Install kubelet, kubeadm and kubectl\"`从指定任务开始执行\n\n##### 示例1：安装软件\n编辑ansible-demo.yaml\n```\n---\n- hosts: all\n  tasks:\n  - name: Install docker and its dependecies\n    yum: name=docker-ce state=present\n```\n\n在ansible-demo.yaml同级目录下，新建hosts文件，内容：\n```\n[masters]\nmaster ansible_host=192.168.1.146 ansible_user=root\n\n[workers]\nworker1 ansible_host=192.168.1.180 ansible_user=root\nworker2 ansible_host=192.168.1.181 ansible_user=root\n```\n\n执行：`ansible-playbook -i hosts ansible-demo.yaml` # -i 指定host文件\n\n- 问：`yum: name=docker-ce state=present`可以替换成`shell: yum install docker-ce -y`?\n\n- 答：不好，建议使用yum模块而不是yum命令。yum命令可能进行重新安装升级版本。yum模块的`state=present`代表如果安装的软件存在则不进行安装，如果不存在则安装。\n\n##### 示例1.2：安装软件-安装多个软件\n- name: Install required dependiences\n    yum: name={{ item }} state=present\n    with_items:\n      - yum-utils\n      - device-mapper-persistent-data\n      - lvm2\n\n##### 示例2：复制文件-将ansible管理节点的文件通过ansible复制到hosts列表机器\n编辑ansible-demo.yaml\n```\n---\n- hosts: masters # 代表只操纵masters组下的机器\n  tasks:\n  - name: copy file to masters\n    copy: \n      src: /opt/ansible-demo/hosts\n      dest: /tmp/hosts\n```\n执行：`ansible-playbook -i hosts ansible-demo.yaml`\n\n##### 示例3：重启服务-重启masters组的kubelet服务\n编辑ansible-demo.yaml\n```\n---\n- hosts: masters # 代表只操纵masters组下的机器\n  tasks:\n  - name: Restart kubelet\n    service:\n      name: kubelet\n      state: restarted\n```\n\n##### 示例4：执行shell-执行单条shell命令\n编辑ansible-demo.yaml\n```\n---\n- hosts: masters \n  tasks:\n  - name: Add docker repo /etc/yum.repos.d\n    shell: yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n```\n##### 示例5：执行shell-执行多条shell命令\n编辑ansible-demo.yaml\n```\n---\n- hosts: masters \n  tasks:\n  - name: set bridge filter rules\n    shell: |\n      cat << EOF > /etc/sysctl.d/99-kubernetes-cri.conf\n      net.bridge.bridge-nf-call-ip6tables = 1\n      net.bridge.bridge-nf-call-iptables = 1\n      net.ipv4.ip_forward = 1\n      user.max_user_namespaces=28633\n      EOF\n      sysctl -p /etc/sysctl.d/99-kubernetes-cri.conf\n```\n\n##### 示例6：执行shell-执行多条shell命令\n编辑ansible-demo.yaml\n```\n---\n- hosts: masters \n  tasks:\n  - name: set bridge filter rules\n    shell: |\n      cat << EOF > /etc/sysctl.d/99-kubernetes-cri.conf\n      net.bridge.bridge-nf-call-ip6tables = 1\n      net.bridge.bridge-nf-call-iptables = 1\n      net.ipv4.ip_forward = 1\n      user.max_user_namespaces=28633\n      EOF\n      sysctl -p /etc/sysctl.d/99-kubernetes-cri.conf\n```\n\n##### 示例7：保留结果-将命令执行后输出的内容保存到一个变量内 + 打印 + 输出到文件\n编辑ansible-demo.yaml\n```\n---\n- hosts: masters \n  tasks:\n  - name: Extract the join command\n    become: true\n    command: \"kubeadm token create --print-join-command\"\n    register: join_command # 存储变量\n  - name: show join command\n    debug:\n      var: join_command  # 打印变量\n  - name: Save kubeadm join command for cluster\n    local_action: copy content={{ join_command.stdout_lines | last | trim }} dest=command.txt # 将join_command的内容处理后输出到文件并保存在当前主机的执行目录下\n```\n\n#### expect\n```\n# 输入密码后，ssh远程执行命令\n#!/bin/bash\n  \n[ -e /bin/expect ] || { apt update; apt install -y expect > /dev/null 2>&1; }\n\npasswd='testing123'\n\n/usr/bin/expect <<-EOF\n\nset time 30\n\nspawn ssh root@192.168.1.181 echo \"rickyccc\" > /tmp/a.log\nexpect {\n\"*yes/no\" { semd \"yes\\r\"; exp_continue }\n\"*password:\" { send \"$passwd\\r\" }\n}\n\nexpect eof\nEOF\n====================================================================\n\n# 分发公钥到多个节点机器\n# 编写host文件\n192.168.1.180 root testing123\n192.168.1.181 root testing123\n\n# 编写脚本\n#!/bin/bash\n\nif [ ! -f ~/.ssh/id_rsa ];then\n ssh-keygen -t rsa -P \"\" -f ~/.ssh/id_rsa\nelse\n echo \"id_rsa has created ...\"\nfi\n\nwhile read line\n  do\n    ip=`echo $line | cut -d \" \" -f 1`\n    user=`echo $line | cut -d \" \" -f 2`\n    passwd=`echo $line | cut -d \" \" -f 3`\n\n\texpect <<EOF\n      set timeout 10\n      spawn ssh-copy-id $user@$ip\n      expect {\n        \"yes/no\" { send \"yes\\n\";exp_continue }\n        \"password\" { send \"$passwd\\n\" }\n      }\n     expect \"password\" { send \"$passwd\\n\" }\nEOF\n  done < host\n```\n参考：\nhttps://austinsnerdythings.com/2022/04/25/deploying-a-kubernetes-cluster-within-proxmox-using-ansible/\n\nhttps://getansible.com/README","slug":"第26期：ansible","published":1,"updated":"2024-03-06T06:55:18.356Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt6p000g9kln004qfig6","content":"<h4 id=\"ansible介绍\"><a href=\"#ansible介绍\" class=\"headerlink\" title=\"ansible介绍\"></a>ansible介绍</h4><p>ansible，就是通过ssh登录到远程主机执行命令的工具。</p>\n<h4 id=\"centos-安装ansible和配置\"><a href=\"#centos-安装ansible和配置\" class=\"headerlink\" title=\"centos 安装ansible和配置\"></a>centos 安装ansible和配置</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install ansible -y</span><br></pre></td></tr></table></figure>\n\n<p>配置Ansible管理节点和主机的连接，在管理节点执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen</span><br><span class=\"line\">ssh-copy-id root@ip # 复制Ansible管理节点的公钥到远程主机，这样它登录到远程主机就不用密码了。</span><br></pre></td></tr></table></figure>\n\n<p>设置远程主机地址的配置文件默认在<code>/etc/ansible/hosts</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 不限定组的写法</span><br><span class=\"line\">192.168.31.166</span><br><span class=\"line\"></span><br><span class=\"line\"># 命名一个组：web，一个组内可以设置多个远程主机节点</span><br><span class=\"line\">[web]</span><br><span class=\"line\">192.168.31.167</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ansible命令\"><a href=\"#ansible命令\" class=\"headerlink\" title=\"ansible命令\"></a>ansible命令</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible all -m ping # 检查ansible能否ping通管理主机，all表示hosts文件内写的所有主机</span><br><span class=\"line\">ansible all -a &quot;ls /opt/zz&quot; # 在所有主机下执行命令</span><br><span class=\"line\">ansible web -m copy -a &quot;src=/etc/hosts dest=/tmp/hosts&quot; # 拷贝文件到web组的/tmp/hosts</span><br><span class=\"line\">ansible web -m yum -a &quot;name=acme state=present&quot; # 在web组安装acme</span><br><span class=\"line\">ansible all -m user -a &quot;name=foo password=&lt;crypted password here&gt;&quot; # 添加用户</span><br><span class=\"line\">ansible web -m service -a &quot;name=httpd state=started&quot; # 启动web组的httpd服务</span><br><span class=\"line\">ansible all -m setup # 查看远程主机的全部系统信息</span><br></pre></td></tr></table></figure>\n<h4 id=\"ansible-脚本编排-之ansible-playbook\"><a href=\"#ansible-脚本编排-之ansible-playbook\" class=\"headerlink\" title=\"ansible 脚本编排 之ansible-playbook\"></a>ansible 脚本编排 之ansible-playbook</h4><p>ansible脚本名字叫playbook，以yml或yaml形式书写。</p>\n<p>执行脚本playbook命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible-playbook deploy.yml</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ansible-playbook-yml书写注意\"><a href=\"#ansible-playbook-yml书写注意\" class=\"headerlink\" title=\"ansible-playbook.yml书写注意\"></a>ansible-playbook.yml书写注意</h4><ul>\n<li>文件名以<code>yml</code>或<code>yaml</code>结尾</li>\n<li>以<code>---</code>开头表示文件开头</li>\n<li><code>#</code> 表示注释</li>\n<li>都是以<code>-</code>加空格再写内容</li>\n<li>hosts, variables, roles tasks等对象都是以<code>:</code>分割，冒号后要加一个空格</li>\n<li>执行脚本文件输出绿色代表成功，红色为失败</li>\n</ul>\n<p>核心的对象元素</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hosts 主机组，如- hosts: node1</span><br><span class=\"line\">tasks 任务列表</span><br></pre></td></tr></table></figure>\n<h4 id=\"ansible-playbook使用\"><a href=\"#ansible-playbook使用\" class=\"headerlink\" title=\"ansible-playbook使用\"></a>ansible-playbook使用</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible-playbook -i hosts deploy.yml</span><br></pre></td></tr></table></figure>\n<p>说明:</p>\n<ul>\n<li>命令后加选项 <code>--syntax-check</code> 可以检查语法，如 <code>ansible-playbook deploy.yml --syntax-check</code></li>\n<li><code>--start-at=&quot;Install kubelet, kubeadm and kubectl&quot;</code>从指定任务开始执行</li>\n</ul>\n<h5 id=\"示例1：安装软件\"><a href=\"#示例1：安装软件\" class=\"headerlink\" title=\"示例1：安装软件\"></a>示例1：安装软件</h5><p>编辑ansible-demo.yaml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">- hosts: all</span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">  - name: Install docker and its dependecies</span><br><span class=\"line\">    yum: name=docker-ce state=present</span><br></pre></td></tr></table></figure>\n\n<p>在ansible-demo.yaml同级目录下，新建hosts文件，内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[masters]</span><br><span class=\"line\">master ansible_host=192.168.1.146 ansible_user=root</span><br><span class=\"line\"></span><br><span class=\"line\">[workers]</span><br><span class=\"line\">worker1 ansible_host=192.168.1.180 ansible_user=root</span><br><span class=\"line\">worker2 ansible_host=192.168.1.181 ansible_user=root</span><br></pre></td></tr></table></figure>\n\n<p>执行：<code>ansible-playbook -i hosts ansible-demo.yaml</code> # -i 指定host文件</p>\n<ul>\n<li><p>问：<code>yum: name=docker-ce state=present</code>可以替换成<code>shell: yum install docker-ce -y</code>?</p>\n</li>\n<li><p>答：不好，建议使用yum模块而不是yum命令。yum命令可能进行重新安装升级版本。yum模块的<code>state=present</code>代表如果安装的软件存在则不进行安装，如果不存在则安装。</p>\n</li>\n</ul>\n<h5 id=\"示例1-2：安装软件-安装多个软件\"><a href=\"#示例1-2：安装软件-安装多个软件\" class=\"headerlink\" title=\"示例1.2：安装软件-安装多个软件\"></a>示例1.2：安装软件-安装多个软件</h5><ul>\n<li>name: Install required dependiences<br>  yum: name&#x3D; state&#x3D;present<br>  with_items:<br>- yum-utils<br>- device-mapper-persistent-data<br>- lvm2</li>\n</ul>\n<h5 id=\"示例2：复制文件-将ansible管理节点的文件通过ansible复制到hosts列表机器\"><a href=\"#示例2：复制文件-将ansible管理节点的文件通过ansible复制到hosts列表机器\" class=\"headerlink\" title=\"示例2：复制文件-将ansible管理节点的文件通过ansible复制到hosts列表机器\"></a>示例2：复制文件-将ansible管理节点的文件通过ansible复制到hosts列表机器</h5><p>编辑ansible-demo.yaml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">- hosts: masters # 代表只操纵masters组下的机器</span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">  - name: copy file to masters</span><br><span class=\"line\">    copy: </span><br><span class=\"line\">      src: /opt/ansible-demo/hosts</span><br><span class=\"line\">      dest: /tmp/hosts</span><br></pre></td></tr></table></figure>\n<p>执行：<code>ansible-playbook -i hosts ansible-demo.yaml</code></p>\n<h5 id=\"示例3：重启服务-重启masters组的kubelet服务\"><a href=\"#示例3：重启服务-重启masters组的kubelet服务\" class=\"headerlink\" title=\"示例3：重启服务-重启masters组的kubelet服务\"></a>示例3：重启服务-重启masters组的kubelet服务</h5><p>编辑ansible-demo.yaml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">- hosts: masters # 代表只操纵masters组下的机器</span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">  - name: Restart kubelet</span><br><span class=\"line\">    service:</span><br><span class=\"line\">      name: kubelet</span><br><span class=\"line\">      state: restarted</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"示例4：执行shell-执行单条shell命令\"><a href=\"#示例4：执行shell-执行单条shell命令\" class=\"headerlink\" title=\"示例4：执行shell-执行单条shell命令\"></a>示例4：执行shell-执行单条shell命令</h5><p>编辑ansible-demo.yaml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">- hosts: masters </span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">  - name: Add docker repo /etc/yum.repos.d</span><br><span class=\"line\">    shell: yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n<h5 id=\"示例5：执行shell-执行多条shell命令\"><a href=\"#示例5：执行shell-执行多条shell命令\" class=\"headerlink\" title=\"示例5：执行shell-执行多条shell命令\"></a>示例5：执行shell-执行多条shell命令</h5><p>编辑ansible-demo.yaml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">- hosts: masters </span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">  - name: set bridge filter rules</span><br><span class=\"line\">    shell: |</span><br><span class=\"line\">      cat &lt;&lt; EOF &gt; /etc/sysctl.d/99-kubernetes-cri.conf</span><br><span class=\"line\">      net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class=\"line\">      net.bridge.bridge-nf-call-iptables = 1</span><br><span class=\"line\">      net.ipv4.ip_forward = 1</span><br><span class=\"line\">      user.max_user_namespaces=28633</span><br><span class=\"line\">      EOF</span><br><span class=\"line\">      sysctl -p /etc/sysctl.d/99-kubernetes-cri.conf</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"示例6：执行shell-执行多条shell命令\"><a href=\"#示例6：执行shell-执行多条shell命令\" class=\"headerlink\" title=\"示例6：执行shell-执行多条shell命令\"></a>示例6：执行shell-执行多条shell命令</h5><p>编辑ansible-demo.yaml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">- hosts: masters </span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">  - name: set bridge filter rules</span><br><span class=\"line\">    shell: |</span><br><span class=\"line\">      cat &lt;&lt; EOF &gt; /etc/sysctl.d/99-kubernetes-cri.conf</span><br><span class=\"line\">      net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class=\"line\">      net.bridge.bridge-nf-call-iptables = 1</span><br><span class=\"line\">      net.ipv4.ip_forward = 1</span><br><span class=\"line\">      user.max_user_namespaces=28633</span><br><span class=\"line\">      EOF</span><br><span class=\"line\">      sysctl -p /etc/sysctl.d/99-kubernetes-cri.conf</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"示例7：保留结果-将命令执行后输出的内容保存到一个变量内-打印-输出到文件\"><a href=\"#示例7：保留结果-将命令执行后输出的内容保存到一个变量内-打印-输出到文件\" class=\"headerlink\" title=\"示例7：保留结果-将命令执行后输出的内容保存到一个变量内 + 打印 + 输出到文件\"></a>示例7：保留结果-将命令执行后输出的内容保存到一个变量内 + 打印 + 输出到文件</h5><p>编辑ansible-demo.yaml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">- hosts: masters </span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">  - name: Extract the join command</span><br><span class=\"line\">    become: true</span><br><span class=\"line\">    command: &quot;kubeadm token create --print-join-command&quot;</span><br><span class=\"line\">    register: join_command # 存储变量</span><br><span class=\"line\">  - name: show join command</span><br><span class=\"line\">    debug:</span><br><span class=\"line\">      var: join_command  # 打印变量</span><br><span class=\"line\">  - name: Save kubeadm join command for cluster</span><br><span class=\"line\">    local_action: copy content=&#123;&#123; join_command.stdout_lines | last | trim &#125;&#125; dest=command.txt # 将join_command的内容处理后输出到文件并保存在当前主机的执行目录下</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"expect\"><a href=\"#expect\" class=\"headerlink\" title=\"expect\"></a>expect</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 输入密码后，ssh远程执行命令</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">  </span><br><span class=\"line\">[ -e /bin/expect ] || &#123; apt update; apt install -y expect &gt; /dev/null 2&gt;&amp;1; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">passwd=&#x27;testing123&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/bin/expect &lt;&lt;-EOF</span><br><span class=\"line\"></span><br><span class=\"line\">set time 30</span><br><span class=\"line\"></span><br><span class=\"line\">spawn ssh root@192.168.1.181 echo &quot;rickyccc&quot; &gt; /tmp/a.log</span><br><span class=\"line\">expect &#123;</span><br><span class=\"line\">&quot;*yes/no&quot; &#123; semd &quot;yes\\r&quot;; exp_continue &#125;</span><br><span class=\"line\">&quot;*password:&quot; &#123; send &quot;$passwd\\r&quot; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">expect eof</span><br><span class=\"line\">EOF</span><br><span class=\"line\">====================================================================</span><br><span class=\"line\"></span><br><span class=\"line\"># 分发公钥到多个节点机器</span><br><span class=\"line\"># 编写host文件</span><br><span class=\"line\">192.168.1.180 root testing123</span><br><span class=\"line\">192.168.1.181 root testing123</span><br><span class=\"line\"></span><br><span class=\"line\"># 编写脚本</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">if [ ! -f ~/.ssh/id_rsa ];then</span><br><span class=\"line\"> ssh-keygen -t rsa -P &quot;&quot; -f ~/.ssh/id_rsa</span><br><span class=\"line\">else</span><br><span class=\"line\"> echo &quot;id_rsa has created ...&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">while read line</span><br><span class=\"line\">  do</span><br><span class=\"line\">    ip=`echo $line | cut -d &quot; &quot; -f 1`</span><br><span class=\"line\">    user=`echo $line | cut -d &quot; &quot; -f 2`</span><br><span class=\"line\">    passwd=`echo $line | cut -d &quot; &quot; -f 3`</span><br><span class=\"line\"></span><br><span class=\"line\">\texpect &lt;&lt;EOF</span><br><span class=\"line\">      set timeout 10</span><br><span class=\"line\">      spawn ssh-copy-id $user@$ip</span><br><span class=\"line\">      expect &#123;</span><br><span class=\"line\">        &quot;yes/no&quot; &#123; send &quot;yes\\n&quot;;exp_continue &#125;</span><br><span class=\"line\">        &quot;password&quot; &#123; send &quot;$passwd\\n&quot; &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">     expect &quot;password&quot; &#123; send &quot;$passwd\\n&quot; &#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">  done &lt; host</span><br></pre></td></tr></table></figure>\n<p>参考：<br><a href=\"https://austinsnerdythings.com/2022/04/25/deploying-a-kubernetes-cluster-within-proxmox-using-ansible/\">https://austinsnerdythings.com/2022/04/25/deploying-a-kubernetes-cluster-within-proxmox-using-ansible/</a></p>\n<p><a href=\"https://getansible.com/README\">https://getansible.com/README</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"ansible介绍\"><a href=\"#ansible介绍\" class=\"headerlink\" title=\"ansible介绍\"></a>ansible介绍</h4><p>ansible，就是通过ssh登录到远程主机执行命令的工具。</p>\n<h4 id=\"centos-安装ansible和配置\"><a href=\"#centos-安装ansible和配置\" class=\"headerlink\" title=\"centos 安装ansible和配置\"></a>centos 安装ansible和配置</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install ansible -y</span><br></pre></td></tr></table></figure>\n\n<p>配置Ansible管理节点和主机的连接，在管理节点执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen</span><br><span class=\"line\">ssh-copy-id root@ip # 复制Ansible管理节点的公钥到远程主机，这样它登录到远程主机就不用密码了。</span><br></pre></td></tr></table></figure>\n\n<p>设置远程主机地址的配置文件默认在<code>/etc/ansible/hosts</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 不限定组的写法</span><br><span class=\"line\">192.168.31.166</span><br><span class=\"line\"></span><br><span class=\"line\"># 命名一个组：web，一个组内可以设置多个远程主机节点</span><br><span class=\"line\">[web]</span><br><span class=\"line\">192.168.31.167</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ansible命令\"><a href=\"#ansible命令\" class=\"headerlink\" title=\"ansible命令\"></a>ansible命令</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible all -m ping # 检查ansible能否ping通管理主机，all表示hosts文件内写的所有主机</span><br><span class=\"line\">ansible all -a &quot;ls /opt/zz&quot; # 在所有主机下执行命令</span><br><span class=\"line\">ansible web -m copy -a &quot;src=/etc/hosts dest=/tmp/hosts&quot; # 拷贝文件到web组的/tmp/hosts</span><br><span class=\"line\">ansible web -m yum -a &quot;name=acme state=present&quot; # 在web组安装acme</span><br><span class=\"line\">ansible all -m user -a &quot;name=foo password=&lt;crypted password here&gt;&quot; # 添加用户</span><br><span class=\"line\">ansible web -m service -a &quot;name=httpd state=started&quot; # 启动web组的httpd服务</span><br><span class=\"line\">ansible all -m setup # 查看远程主机的全部系统信息</span><br></pre></td></tr></table></figure>\n<h4 id=\"ansible-脚本编排-之ansible-playbook\"><a href=\"#ansible-脚本编排-之ansible-playbook\" class=\"headerlink\" title=\"ansible 脚本编排 之ansible-playbook\"></a>ansible 脚本编排 之ansible-playbook</h4><p>ansible脚本名字叫playbook，以yml或yaml形式书写。</p>\n<p>执行脚本playbook命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible-playbook deploy.yml</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ansible-playbook-yml书写注意\"><a href=\"#ansible-playbook-yml书写注意\" class=\"headerlink\" title=\"ansible-playbook.yml书写注意\"></a>ansible-playbook.yml书写注意</h4><ul>\n<li>文件名以<code>yml</code>或<code>yaml</code>结尾</li>\n<li>以<code>---</code>开头表示文件开头</li>\n<li><code>#</code> 表示注释</li>\n<li>都是以<code>-</code>加空格再写内容</li>\n<li>hosts, variables, roles tasks等对象都是以<code>:</code>分割，冒号后要加一个空格</li>\n<li>执行脚本文件输出绿色代表成功，红色为失败</li>\n</ul>\n<p>核心的对象元素</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hosts 主机组，如- hosts: node1</span><br><span class=\"line\">tasks 任务列表</span><br></pre></td></tr></table></figure>\n<h4 id=\"ansible-playbook使用\"><a href=\"#ansible-playbook使用\" class=\"headerlink\" title=\"ansible-playbook使用\"></a>ansible-playbook使用</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible-playbook -i hosts deploy.yml</span><br></pre></td></tr></table></figure>\n<p>说明:</p>\n<ul>\n<li>命令后加选项 <code>--syntax-check</code> 可以检查语法，如 <code>ansible-playbook deploy.yml --syntax-check</code></li>\n<li><code>--start-at=&quot;Install kubelet, kubeadm and kubectl&quot;</code>从指定任务开始执行</li>\n</ul>\n<h5 id=\"示例1：安装软件\"><a href=\"#示例1：安装软件\" class=\"headerlink\" title=\"示例1：安装软件\"></a>示例1：安装软件</h5><p>编辑ansible-demo.yaml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">- hosts: all</span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">  - name: Install docker and its dependecies</span><br><span class=\"line\">    yum: name=docker-ce state=present</span><br></pre></td></tr></table></figure>\n\n<p>在ansible-demo.yaml同级目录下，新建hosts文件，内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[masters]</span><br><span class=\"line\">master ansible_host=192.168.1.146 ansible_user=root</span><br><span class=\"line\"></span><br><span class=\"line\">[workers]</span><br><span class=\"line\">worker1 ansible_host=192.168.1.180 ansible_user=root</span><br><span class=\"line\">worker2 ansible_host=192.168.1.181 ansible_user=root</span><br></pre></td></tr></table></figure>\n\n<p>执行：<code>ansible-playbook -i hosts ansible-demo.yaml</code> # -i 指定host文件</p>\n<ul>\n<li><p>问：<code>yum: name=docker-ce state=present</code>可以替换成<code>shell: yum install docker-ce -y</code>?</p>\n</li>\n<li><p>答：不好，建议使用yum模块而不是yum命令。yum命令可能进行重新安装升级版本。yum模块的<code>state=present</code>代表如果安装的软件存在则不进行安装，如果不存在则安装。</p>\n</li>\n</ul>\n<h5 id=\"示例1-2：安装软件-安装多个软件\"><a href=\"#示例1-2：安装软件-安装多个软件\" class=\"headerlink\" title=\"示例1.2：安装软件-安装多个软件\"></a>示例1.2：安装软件-安装多个软件</h5><ul>\n<li>name: Install required dependiences<br>  yum: name&#x3D; state&#x3D;present<br>  with_items:<br>- yum-utils<br>- device-mapper-persistent-data<br>- lvm2</li>\n</ul>\n<h5 id=\"示例2：复制文件-将ansible管理节点的文件通过ansible复制到hosts列表机器\"><a href=\"#示例2：复制文件-将ansible管理节点的文件通过ansible复制到hosts列表机器\" class=\"headerlink\" title=\"示例2：复制文件-将ansible管理节点的文件通过ansible复制到hosts列表机器\"></a>示例2：复制文件-将ansible管理节点的文件通过ansible复制到hosts列表机器</h5><p>编辑ansible-demo.yaml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">- hosts: masters # 代表只操纵masters组下的机器</span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">  - name: copy file to masters</span><br><span class=\"line\">    copy: </span><br><span class=\"line\">      src: /opt/ansible-demo/hosts</span><br><span class=\"line\">      dest: /tmp/hosts</span><br></pre></td></tr></table></figure>\n<p>执行：<code>ansible-playbook -i hosts ansible-demo.yaml</code></p>\n<h5 id=\"示例3：重启服务-重启masters组的kubelet服务\"><a href=\"#示例3：重启服务-重启masters组的kubelet服务\" class=\"headerlink\" title=\"示例3：重启服务-重启masters组的kubelet服务\"></a>示例3：重启服务-重启masters组的kubelet服务</h5><p>编辑ansible-demo.yaml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">- hosts: masters # 代表只操纵masters组下的机器</span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">  - name: Restart kubelet</span><br><span class=\"line\">    service:</span><br><span class=\"line\">      name: kubelet</span><br><span class=\"line\">      state: restarted</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"示例4：执行shell-执行单条shell命令\"><a href=\"#示例4：执行shell-执行单条shell命令\" class=\"headerlink\" title=\"示例4：执行shell-执行单条shell命令\"></a>示例4：执行shell-执行单条shell命令</h5><p>编辑ansible-demo.yaml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">- hosts: masters </span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">  - name: Add docker repo /etc/yum.repos.d</span><br><span class=\"line\">    shell: yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n<h5 id=\"示例5：执行shell-执行多条shell命令\"><a href=\"#示例5：执行shell-执行多条shell命令\" class=\"headerlink\" title=\"示例5：执行shell-执行多条shell命令\"></a>示例5：执行shell-执行多条shell命令</h5><p>编辑ansible-demo.yaml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">- hosts: masters </span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">  - name: set bridge filter rules</span><br><span class=\"line\">    shell: |</span><br><span class=\"line\">      cat &lt;&lt; EOF &gt; /etc/sysctl.d/99-kubernetes-cri.conf</span><br><span class=\"line\">      net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class=\"line\">      net.bridge.bridge-nf-call-iptables = 1</span><br><span class=\"line\">      net.ipv4.ip_forward = 1</span><br><span class=\"line\">      user.max_user_namespaces=28633</span><br><span class=\"line\">      EOF</span><br><span class=\"line\">      sysctl -p /etc/sysctl.d/99-kubernetes-cri.conf</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"示例6：执行shell-执行多条shell命令\"><a href=\"#示例6：执行shell-执行多条shell命令\" class=\"headerlink\" title=\"示例6：执行shell-执行多条shell命令\"></a>示例6：执行shell-执行多条shell命令</h5><p>编辑ansible-demo.yaml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">- hosts: masters </span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">  - name: set bridge filter rules</span><br><span class=\"line\">    shell: |</span><br><span class=\"line\">      cat &lt;&lt; EOF &gt; /etc/sysctl.d/99-kubernetes-cri.conf</span><br><span class=\"line\">      net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class=\"line\">      net.bridge.bridge-nf-call-iptables = 1</span><br><span class=\"line\">      net.ipv4.ip_forward = 1</span><br><span class=\"line\">      user.max_user_namespaces=28633</span><br><span class=\"line\">      EOF</span><br><span class=\"line\">      sysctl -p /etc/sysctl.d/99-kubernetes-cri.conf</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"示例7：保留结果-将命令执行后输出的内容保存到一个变量内-打印-输出到文件\"><a href=\"#示例7：保留结果-将命令执行后输出的内容保存到一个变量内-打印-输出到文件\" class=\"headerlink\" title=\"示例7：保留结果-将命令执行后输出的内容保存到一个变量内 + 打印 + 输出到文件\"></a>示例7：保留结果-将命令执行后输出的内容保存到一个变量内 + 打印 + 输出到文件</h5><p>编辑ansible-demo.yaml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">- hosts: masters </span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">  - name: Extract the join command</span><br><span class=\"line\">    become: true</span><br><span class=\"line\">    command: &quot;kubeadm token create --print-join-command&quot;</span><br><span class=\"line\">    register: join_command # 存储变量</span><br><span class=\"line\">  - name: show join command</span><br><span class=\"line\">    debug:</span><br><span class=\"line\">      var: join_command  # 打印变量</span><br><span class=\"line\">  - name: Save kubeadm join command for cluster</span><br><span class=\"line\">    local_action: copy content=&#123;&#123; join_command.stdout_lines | last | trim &#125;&#125; dest=command.txt # 将join_command的内容处理后输出到文件并保存在当前主机的执行目录下</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"expect\"><a href=\"#expect\" class=\"headerlink\" title=\"expect\"></a>expect</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 输入密码后，ssh远程执行命令</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">  </span><br><span class=\"line\">[ -e /bin/expect ] || &#123; apt update; apt install -y expect &gt; /dev/null 2&gt;&amp;1; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">passwd=&#x27;testing123&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/bin/expect &lt;&lt;-EOF</span><br><span class=\"line\"></span><br><span class=\"line\">set time 30</span><br><span class=\"line\"></span><br><span class=\"line\">spawn ssh root@192.168.1.181 echo &quot;rickyccc&quot; &gt; /tmp/a.log</span><br><span class=\"line\">expect &#123;</span><br><span class=\"line\">&quot;*yes/no&quot; &#123; semd &quot;yes\\r&quot;; exp_continue &#125;</span><br><span class=\"line\">&quot;*password:&quot; &#123; send &quot;$passwd\\r&quot; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">expect eof</span><br><span class=\"line\">EOF</span><br><span class=\"line\">====================================================================</span><br><span class=\"line\"></span><br><span class=\"line\"># 分发公钥到多个节点机器</span><br><span class=\"line\"># 编写host文件</span><br><span class=\"line\">192.168.1.180 root testing123</span><br><span class=\"line\">192.168.1.181 root testing123</span><br><span class=\"line\"></span><br><span class=\"line\"># 编写脚本</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">if [ ! -f ~/.ssh/id_rsa ];then</span><br><span class=\"line\"> ssh-keygen -t rsa -P &quot;&quot; -f ~/.ssh/id_rsa</span><br><span class=\"line\">else</span><br><span class=\"line\"> echo &quot;id_rsa has created ...&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">while read line</span><br><span class=\"line\">  do</span><br><span class=\"line\">    ip=`echo $line | cut -d &quot; &quot; -f 1`</span><br><span class=\"line\">    user=`echo $line | cut -d &quot; &quot; -f 2`</span><br><span class=\"line\">    passwd=`echo $line | cut -d &quot; &quot; -f 3`</span><br><span class=\"line\"></span><br><span class=\"line\">\texpect &lt;&lt;EOF</span><br><span class=\"line\">      set timeout 10</span><br><span class=\"line\">      spawn ssh-copy-id $user@$ip</span><br><span class=\"line\">      expect &#123;</span><br><span class=\"line\">        &quot;yes/no&quot; &#123; send &quot;yes\\n&quot;;exp_continue &#125;</span><br><span class=\"line\">        &quot;password&quot; &#123; send &quot;$passwd\\n&quot; &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">     expect &quot;password&quot; &#123; send &quot;$passwd\\n&quot; &#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">  done &lt; host</span><br></pre></td></tr></table></figure>\n<p>参考：<br><a href=\"https://austinsnerdythings.com/2022/04/25/deploying-a-kubernetes-cluster-within-proxmox-using-ansible/\">https://austinsnerdythings.com/2022/04/25/deploying-a-kubernetes-cluster-within-proxmox-using-ansible/</a></p>\n<p><a href=\"https://getansible.com/README\">https://getansible.com/README</a></p>\n"},{"title":"第27期：镜像源","date":"2023-05-22T08:34:34.000Z","_content":"#### Debian更换阿里云软件源\n备份\n```\ncp /etc/apt/sources.list /etc/apt/sources.list.bak\n```\n\n修改\nvim /etc/apt/sources.list\n```\ndeb http://mirrors.aliyun.com/debian/ bullseye main non-free contrib\n\ndeb-src http://mirrors.aliyun.com/debian/ bullseye main non-free contrib\n\ndeb http://mirrors.aliyun.com/debian-security/ bullseye-security main\n\ndeb-src http://mirrors.aliyun.com/debian-security/ bullseye-security main\n\ndeb http://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib\n\ndeb-src http://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib\n\ndeb http://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib\n\ndeb-src http://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib\n```\n\n更新\n```\napt-get update\n```\n# 配置阿里云pip源\n```\ncd ~\nmkdir .pip\ncd .pip\ntouch pip.conf\nvi pip.conf\n\n[global]\nindex-url = https://mirrors.aliyun.com/pypi/simple/\n[install]\ntrusted-host=mirrors.aliyun.com\n```\n#### Centos7更换成aliyun步骤\n```\n# 备份\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\n\n# 下载\nyum install -y wget\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n\n或者\n\ncurl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n\n# 更改/etc/yum.repos.d/CentOS-Base.repo\n所有http替换成https\n\n# 更新镜像源\nyum clean all # 清除缓存\nyum makecache # 生成缓存\n```","source":"_posts/第27期：镜像源.md","raw":"---\ntitle: 第27期：镜像源\ndate: 2023-05-22 16:34:34\ntags:\n---\n#### Debian更换阿里云软件源\n备份\n```\ncp /etc/apt/sources.list /etc/apt/sources.list.bak\n```\n\n修改\nvim /etc/apt/sources.list\n```\ndeb http://mirrors.aliyun.com/debian/ bullseye main non-free contrib\n\ndeb-src http://mirrors.aliyun.com/debian/ bullseye main non-free contrib\n\ndeb http://mirrors.aliyun.com/debian-security/ bullseye-security main\n\ndeb-src http://mirrors.aliyun.com/debian-security/ bullseye-security main\n\ndeb http://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib\n\ndeb-src http://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib\n\ndeb http://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib\n\ndeb-src http://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib\n```\n\n更新\n```\napt-get update\n```\n# 配置阿里云pip源\n```\ncd ~\nmkdir .pip\ncd .pip\ntouch pip.conf\nvi pip.conf\n\n[global]\nindex-url = https://mirrors.aliyun.com/pypi/simple/\n[install]\ntrusted-host=mirrors.aliyun.com\n```\n#### Centos7更换成aliyun步骤\n```\n# 备份\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\n\n# 下载\nyum install -y wget\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n\n或者\n\ncurl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n\n# 更改/etc/yum.repos.d/CentOS-Base.repo\n所有http替换成https\n\n# 更新镜像源\nyum clean all # 清除缓存\nyum makecache # 生成缓存\n```","slug":"第27期：镜像源","published":1,"updated":"2024-03-06T06:55:18.356Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt6q000h9klnbbbe9qph","content":"<h4 id=\"Debian更换阿里云软件源\"><a href=\"#Debian更换阿里云软件源\" class=\"headerlink\" title=\"Debian更换阿里云软件源\"></a>Debian更换阿里云软件源</h4><p>备份</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure>\n\n<p>修改<br>vim &#x2F;etc&#x2F;apt&#x2F;sources.list</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb http://mirrors.aliyun.com/debian/ bullseye main non-free contrib</span><br><span class=\"line\"></span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/debian/ bullseye main non-free contrib</span><br><span class=\"line\"></span><br><span class=\"line\">deb http://mirrors.aliyun.com/debian-security/ bullseye-security main</span><br><span class=\"line\"></span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/debian-security/ bullseye-security main</span><br><span class=\"line\"></span><br><span class=\"line\">deb http://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib</span><br><span class=\"line\"></span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib</span><br><span class=\"line\"></span><br><span class=\"line\">deb http://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib</span><br><span class=\"line\"></span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib</span><br></pre></td></tr></table></figure>\n\n<p>更新</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br></pre></td></tr></table></figure>\n<h1 id=\"配置阿里云pip源\"><a href=\"#配置阿里云pip源\" class=\"headerlink\" title=\"配置阿里云pip源\"></a>配置阿里云pip源</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~</span><br><span class=\"line\">mkdir .pip</span><br><span class=\"line\">cd .pip</span><br><span class=\"line\">touch pip.conf</span><br><span class=\"line\">vi pip.conf</span><br><span class=\"line\"></span><br><span class=\"line\">[global]</span><br><span class=\"line\">index-url = https://mirrors.aliyun.com/pypi/simple/</span><br><span class=\"line\">[install]</span><br><span class=\"line\">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure>\n<h4 id=\"Centos7更换成aliyun步骤\"><a href=\"#Centos7更换成aliyun步骤\" class=\"headerlink\" title=\"Centos7更换成aliyun步骤\"></a>Centos7更换成aliyun步骤</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 备份</span><br><span class=\"line\">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class=\"line\"></span><br><span class=\"line\"># 下载</span><br><span class=\"line\">yum install -y wget</span><br><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class=\"line\"></span><br><span class=\"line\">或者</span><br><span class=\"line\"></span><br><span class=\"line\">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class=\"line\"></span><br><span class=\"line\"># 更改/etc/yum.repos.d/CentOS-Base.repo</span><br><span class=\"line\">所有http替换成https</span><br><span class=\"line\"></span><br><span class=\"line\"># 更新镜像源</span><br><span class=\"line\">yum clean all # 清除缓存</span><br><span class=\"line\">yum makecache # 生成缓存</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Debian更换阿里云软件源\"><a href=\"#Debian更换阿里云软件源\" class=\"headerlink\" title=\"Debian更换阿里云软件源\"></a>Debian更换阿里云软件源</h4><p>备份</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure>\n\n<p>修改<br>vim &#x2F;etc&#x2F;apt&#x2F;sources.list</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb http://mirrors.aliyun.com/debian/ bullseye main non-free contrib</span><br><span class=\"line\"></span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/debian/ bullseye main non-free contrib</span><br><span class=\"line\"></span><br><span class=\"line\">deb http://mirrors.aliyun.com/debian-security/ bullseye-security main</span><br><span class=\"line\"></span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/debian-security/ bullseye-security main</span><br><span class=\"line\"></span><br><span class=\"line\">deb http://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib</span><br><span class=\"line\"></span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib</span><br><span class=\"line\"></span><br><span class=\"line\">deb http://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib</span><br><span class=\"line\"></span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib</span><br></pre></td></tr></table></figure>\n\n<p>更新</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br></pre></td></tr></table></figure>\n<h1 id=\"配置阿里云pip源\"><a href=\"#配置阿里云pip源\" class=\"headerlink\" title=\"配置阿里云pip源\"></a>配置阿里云pip源</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~</span><br><span class=\"line\">mkdir .pip</span><br><span class=\"line\">cd .pip</span><br><span class=\"line\">touch pip.conf</span><br><span class=\"line\">vi pip.conf</span><br><span class=\"line\"></span><br><span class=\"line\">[global]</span><br><span class=\"line\">index-url = https://mirrors.aliyun.com/pypi/simple/</span><br><span class=\"line\">[install]</span><br><span class=\"line\">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure>\n<h4 id=\"Centos7更换成aliyun步骤\"><a href=\"#Centos7更换成aliyun步骤\" class=\"headerlink\" title=\"Centos7更换成aliyun步骤\"></a>Centos7更换成aliyun步骤</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 备份</span><br><span class=\"line\">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class=\"line\"></span><br><span class=\"line\"># 下载</span><br><span class=\"line\">yum install -y wget</span><br><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class=\"line\"></span><br><span class=\"line\">或者</span><br><span class=\"line\"></span><br><span class=\"line\">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class=\"line\"></span><br><span class=\"line\"># 更改/etc/yum.repos.d/CentOS-Base.repo</span><br><span class=\"line\">所有http替换成https</span><br><span class=\"line\"></span><br><span class=\"line\"># 更新镜像源</span><br><span class=\"line\">yum clean all # 清除缓存</span><br><span class=\"line\">yum makecache # 生成缓存</span><br></pre></td></tr></table></figure>"},{"title":"第28期：网络","date":"2023-05-22T08:56:03.000Z","_content":"##### 两个主机怎么相连？\n没有互联网之前，电脑都是单机运行的，没有网卡，没有协议栈，没有网线，数据传输主要通过光盘，软盘等介质。\n\n##### 网线来了\n\npc1-网口  ---------网线------------ 网口-pc2     \n\nNote：\n其中`网线`承载bit流，作为物理介质。`网卡`将字节转换成bit流，反之。还用到协议栈，实现通信中数据的解析，流控制，地址寻址等。\n\n##### 网线不够长怎么办？\n随着距离变长，信号损耗导致数据丢失，便用到了`中继器`放大信号。\n\n##### 中继器只有2个口，这个时候有第三台电脑加进来，怎么办？\n集线器：多口中继器，但是从一个口出来的数据发同时发往其他口，导致数据泛滥，带宽利用率低，无法隔绝各自的环境。\n\n###### 隔绝环境，用网桥\n网桥，记录了每台主机的mac地址，根据mac地址来分发数据，但接口比较少，怎么办？交换机来了。\n\n##### 交换机\n交换机，记录了每台主机的mac地址，接口多，能进行vlan隔离。一般用于局域网。\n想通信更远，怎么办？路由器来了。\n\n布线麻烦怎么办？AC/AP来了\n不够安全怎么办？防火墙来了\n网络拥堵怎么办？流量控制来了  \n\n##### OSI七层模型\n应用层: 开发者将通信模型定制成协议。\n表示层：制定双方数据交换格式。如Content-Type：application/json; charset=utf-8\n会话层: 管理会话连接，由应用程序的请求和响应组成。\n传输层：端口，实现报文数据传递。\n网络层：路由器，ip寻址。\n数据链路层：交换机，mac寻址，数据差错检测。\n物理层：网线，二进制流传输。\n\n##### 常见问题\n##### 1.为什么有了ip还需要mac地址？\n-简而言之，标识网络中的一台计算机，比较常用的就是IP地址和MAC地址，但计算机的IP地址可由用户自行更改，管理起来就相对困难，而MAC地址不可更改，所以一般会把IP地址和MAC地址组合起来使用。\n-那只使用MAC地址不用IP地址行不行呢？不行的！因为最早就是MAC地址先出现的，并且当时并不用IP地址，只用MAC地址，后来随着网络中的设备越来越多，整个路由过程越来越复杂，便出现了子网的概念。对于目的地址在其他子网的数据包，路由只需要将数据包送到那个子网即可。\n-那为什么要用IP地址呢？是因为IP地址是和地域相关的，对于同一个子网上的设备，IP地址的前缀都是一样的，这样路由器通过IP地址的前缀就知道设备在在哪个子网上了，而只用MAC地址的话，路由器则需要记住每个MAC地址在哪个子网，这需要路由器有极大的存储空间，是无法实现的。\n-IP地址可以比作为地址，MAC地址为收件人，在一次通信过程中，两者是缺一不可的。\n\n##### 2.交换机有什么作用？\n交换机通过广播形式发送arp每台设备的mac地址。\narp 即 Address Resolution Protocol，地址解析协议，是根据ip获取设备的mac地址。\n\n##### 3.同一网段为什么能通信？\n如果同一网段，一般只运用到二层的mac地址的转发，2个相同网段的主机pc1和pc2，当pc1 ping pc2的时候，会先发送arp包，请求pc2的mac地址来进行二层封装，因为他们同一网段，所以能够获得arp回应，有了mac地址就能进行二层源mac和目的mac的封装，封装好了就能通讯。记住二层转发是基于mac的，三层才会基于ip。\n\n\n##### 4.直连网络需要ip地址？\n如果两台机器互相知道其MAC地址可以直接交流，前提是互相知道彼此的MAC地址，如果不认识，就要通过arp广播（正向ARP: 通过IP地址获取MAC地址）找到mac地址。\n\n局域网内部的主机互联互通只需要MAC地址，而不需要IP地址，IP地址的作用是不同局域网的互联互通。\n\n### 安全\n##### DDos\nDistributed Denial of Service 分布式拒绝服务\n\n肉鸡大量访问目标网站，目标网站被消耗带宽、服务器资源，导致无法正常处理其他用户请求。\n\n##### DNS劫持\n假设运营商的DNS服务器被侵入了，用户的请求经过运营商DNS解析后被指向带有广告的ip网站去。\n\n##### DNS查询攻击\nDNS Query Flood Attack: 攻击方法是通过操纵大量傀儡机器，发送海量的域名查询请求，当每秒域名查询请求次数超过DNS服务器可承载的能力时，则会造成解析域名超时从而直接影响业务的可用性\n\n##### SQL注入\nSQL注入：利用现有应用程序，可以将恶意的SQL命令注入到后台数据库引擎中并执行。也可以通过在Web表单中输入恶意SQL语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行SQL语句\n\n举例：假设后端有一个漏洞，sql逻辑是通过拼接方式执行sql。\nselect * from car where (carNum = $web1 \n\n前端被恶意传入变量值web1: 'ZU_006',0,0);DROP DATABASE TABLE='car'\n\n这就会导致表会被删除。\n##### 跨站脚本攻击\n手段1：黑客发送一个带有恶意XSS脚本的链接给小白用户，小白点了链接，页面加载执行了恶意XSS脚本，这段脚本可以盗取小白的登录信息然后发给黑客。\n手段2: 黑客预先将恶意XSS脚本注入到攻击网站的数据库(假设目标网站存在漏洞能被注入脚本)，其他用户刚好加载到带有恶意XSS脚本的目标页面，XSS脚本偷偷将用户的登录信息发给黑客。\n\n##### 重定向攻击\n一种常用的攻击手段是\"钓鱼\"。钓鱼攻击者通常会发送给受害者一个合法链接，当您访问链接时，会被导向一个非法网站，从而达到骗取用户信任、窃取用户资料的目的。为防止这种行为，我们必须对所有的重定向操作进行审核，以避免重定向到一个危险的地方。常见解决方案是白名单，将合法的要重定向的URL添加到白名单中，非白名单上的域名重定向时拒绝。第二种解决方案是重定向token，在合法的URL上加上token，重定向时进行验证。\n\n","source":"_posts/第28期：网络.md","raw":"---\ntitle: 第28期：网络\ndate: 2023-05-22 16:56:03\ntags:\n---\n##### 两个主机怎么相连？\n没有互联网之前，电脑都是单机运行的，没有网卡，没有协议栈，没有网线，数据传输主要通过光盘，软盘等介质。\n\n##### 网线来了\n\npc1-网口  ---------网线------------ 网口-pc2     \n\nNote：\n其中`网线`承载bit流，作为物理介质。`网卡`将字节转换成bit流，反之。还用到协议栈，实现通信中数据的解析，流控制，地址寻址等。\n\n##### 网线不够长怎么办？\n随着距离变长，信号损耗导致数据丢失，便用到了`中继器`放大信号。\n\n##### 中继器只有2个口，这个时候有第三台电脑加进来，怎么办？\n集线器：多口中继器，但是从一个口出来的数据发同时发往其他口，导致数据泛滥，带宽利用率低，无法隔绝各自的环境。\n\n###### 隔绝环境，用网桥\n网桥，记录了每台主机的mac地址，根据mac地址来分发数据，但接口比较少，怎么办？交换机来了。\n\n##### 交换机\n交换机，记录了每台主机的mac地址，接口多，能进行vlan隔离。一般用于局域网。\n想通信更远，怎么办？路由器来了。\n\n布线麻烦怎么办？AC/AP来了\n不够安全怎么办？防火墙来了\n网络拥堵怎么办？流量控制来了  \n\n##### OSI七层模型\n应用层: 开发者将通信模型定制成协议。\n表示层：制定双方数据交换格式。如Content-Type：application/json; charset=utf-8\n会话层: 管理会话连接，由应用程序的请求和响应组成。\n传输层：端口，实现报文数据传递。\n网络层：路由器，ip寻址。\n数据链路层：交换机，mac寻址，数据差错检测。\n物理层：网线，二进制流传输。\n\n##### 常见问题\n##### 1.为什么有了ip还需要mac地址？\n-简而言之，标识网络中的一台计算机，比较常用的就是IP地址和MAC地址，但计算机的IP地址可由用户自行更改，管理起来就相对困难，而MAC地址不可更改，所以一般会把IP地址和MAC地址组合起来使用。\n-那只使用MAC地址不用IP地址行不行呢？不行的！因为最早就是MAC地址先出现的，并且当时并不用IP地址，只用MAC地址，后来随着网络中的设备越来越多，整个路由过程越来越复杂，便出现了子网的概念。对于目的地址在其他子网的数据包，路由只需要将数据包送到那个子网即可。\n-那为什么要用IP地址呢？是因为IP地址是和地域相关的，对于同一个子网上的设备，IP地址的前缀都是一样的，这样路由器通过IP地址的前缀就知道设备在在哪个子网上了，而只用MAC地址的话，路由器则需要记住每个MAC地址在哪个子网，这需要路由器有极大的存储空间，是无法实现的。\n-IP地址可以比作为地址，MAC地址为收件人，在一次通信过程中，两者是缺一不可的。\n\n##### 2.交换机有什么作用？\n交换机通过广播形式发送arp每台设备的mac地址。\narp 即 Address Resolution Protocol，地址解析协议，是根据ip获取设备的mac地址。\n\n##### 3.同一网段为什么能通信？\n如果同一网段，一般只运用到二层的mac地址的转发，2个相同网段的主机pc1和pc2，当pc1 ping pc2的时候，会先发送arp包，请求pc2的mac地址来进行二层封装，因为他们同一网段，所以能够获得arp回应，有了mac地址就能进行二层源mac和目的mac的封装，封装好了就能通讯。记住二层转发是基于mac的，三层才会基于ip。\n\n\n##### 4.直连网络需要ip地址？\n如果两台机器互相知道其MAC地址可以直接交流，前提是互相知道彼此的MAC地址，如果不认识，就要通过arp广播（正向ARP: 通过IP地址获取MAC地址）找到mac地址。\n\n局域网内部的主机互联互通只需要MAC地址，而不需要IP地址，IP地址的作用是不同局域网的互联互通。\n\n### 安全\n##### DDos\nDistributed Denial of Service 分布式拒绝服务\n\n肉鸡大量访问目标网站，目标网站被消耗带宽、服务器资源，导致无法正常处理其他用户请求。\n\n##### DNS劫持\n假设运营商的DNS服务器被侵入了，用户的请求经过运营商DNS解析后被指向带有广告的ip网站去。\n\n##### DNS查询攻击\nDNS Query Flood Attack: 攻击方法是通过操纵大量傀儡机器，发送海量的域名查询请求，当每秒域名查询请求次数超过DNS服务器可承载的能力时，则会造成解析域名超时从而直接影响业务的可用性\n\n##### SQL注入\nSQL注入：利用现有应用程序，可以将恶意的SQL命令注入到后台数据库引擎中并执行。也可以通过在Web表单中输入恶意SQL语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行SQL语句\n\n举例：假设后端有一个漏洞，sql逻辑是通过拼接方式执行sql。\nselect * from car where (carNum = $web1 \n\n前端被恶意传入变量值web1: 'ZU_006',0,0);DROP DATABASE TABLE='car'\n\n这就会导致表会被删除。\n##### 跨站脚本攻击\n手段1：黑客发送一个带有恶意XSS脚本的链接给小白用户，小白点了链接，页面加载执行了恶意XSS脚本，这段脚本可以盗取小白的登录信息然后发给黑客。\n手段2: 黑客预先将恶意XSS脚本注入到攻击网站的数据库(假设目标网站存在漏洞能被注入脚本)，其他用户刚好加载到带有恶意XSS脚本的目标页面，XSS脚本偷偷将用户的登录信息发给黑客。\n\n##### 重定向攻击\n一种常用的攻击手段是\"钓鱼\"。钓鱼攻击者通常会发送给受害者一个合法链接，当您访问链接时，会被导向一个非法网站，从而达到骗取用户信任、窃取用户资料的目的。为防止这种行为，我们必须对所有的重定向操作进行审核，以避免重定向到一个危险的地方。常见解决方案是白名单，将合法的要重定向的URL添加到白名单中，非白名单上的域名重定向时拒绝。第二种解决方案是重定向token，在合法的URL上加上token，重定向时进行验证。\n\n","slug":"第28期：网络","published":1,"updated":"2024-03-06T06:55:18.357Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt6q000i9kln3ids2p7u","content":"<h5 id=\"两个主机怎么相连？\"><a href=\"#两个主机怎么相连？\" class=\"headerlink\" title=\"两个主机怎么相连？\"></a>两个主机怎么相连？</h5><p>没有互联网之前，电脑都是单机运行的，没有网卡，没有协议栈，没有网线，数据传输主要通过光盘，软盘等介质。</p>\n<h5 id=\"网线来了\"><a href=\"#网线来了\" class=\"headerlink\" title=\"网线来了\"></a>网线来了</h5><p>pc1-网口  ———网线———— 网口-pc2     </p>\n<p>Note：<br>其中<code>网线</code>承载bit流，作为物理介质。<code>网卡</code>将字节转换成bit流，反之。还用到协议栈，实现通信中数据的解析，流控制，地址寻址等。</p>\n<h5 id=\"网线不够长怎么办？\"><a href=\"#网线不够长怎么办？\" class=\"headerlink\" title=\"网线不够长怎么办？\"></a>网线不够长怎么办？</h5><p>随着距离变长，信号损耗导致数据丢失，便用到了<code>中继器</code>放大信号。</p>\n<h5 id=\"中继器只有2个口，这个时候有第三台电脑加进来，怎么办？\"><a href=\"#中继器只有2个口，这个时候有第三台电脑加进来，怎么办？\" class=\"headerlink\" title=\"中继器只有2个口，这个时候有第三台电脑加进来，怎么办？\"></a>中继器只有2个口，这个时候有第三台电脑加进来，怎么办？</h5><p>集线器：多口中继器，但是从一个口出来的数据发同时发往其他口，导致数据泛滥，带宽利用率低，无法隔绝各自的环境。</p>\n<h6 id=\"隔绝环境，用网桥\"><a href=\"#隔绝环境，用网桥\" class=\"headerlink\" title=\"隔绝环境，用网桥\"></a>隔绝环境，用网桥</h6><p>网桥，记录了每台主机的mac地址，根据mac地址来分发数据，但接口比较少，怎么办？交换机来了。</p>\n<h5 id=\"交换机\"><a href=\"#交换机\" class=\"headerlink\" title=\"交换机\"></a>交换机</h5><p>交换机，记录了每台主机的mac地址，接口多，能进行vlan隔离。一般用于局域网。<br>想通信更远，怎么办？路由器来了。</p>\n<p>布线麻烦怎么办？AC&#x2F;AP来了<br>不够安全怎么办？防火墙来了<br>网络拥堵怎么办？流量控制来了  </p>\n<h5 id=\"OSI七层模型\"><a href=\"#OSI七层模型\" class=\"headerlink\" title=\"OSI七层模型\"></a>OSI七层模型</h5><p>应用层: 开发者将通信模型定制成协议。<br>表示层：制定双方数据交换格式。如Content-Type：application&#x2F;json; charset&#x3D;utf-8<br>会话层: 管理会话连接，由应用程序的请求和响应组成。<br>传输层：端口，实现报文数据传递。<br>网络层：路由器，ip寻址。<br>数据链路层：交换机，mac寻址，数据差错检测。<br>物理层：网线，二进制流传输。</p>\n<h5 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h5><h5 id=\"1-为什么有了ip还需要mac地址？\"><a href=\"#1-为什么有了ip还需要mac地址？\" class=\"headerlink\" title=\"1.为什么有了ip还需要mac地址？\"></a>1.为什么有了ip还需要mac地址？</h5><p>-简而言之，标识网络中的一台计算机，比较常用的就是IP地址和MAC地址，但计算机的IP地址可由用户自行更改，管理起来就相对困难，而MAC地址不可更改，所以一般会把IP地址和MAC地址组合起来使用。<br>-那只使用MAC地址不用IP地址行不行呢？不行的！因为最早就是MAC地址先出现的，并且当时并不用IP地址，只用MAC地址，后来随着网络中的设备越来越多，整个路由过程越来越复杂，便出现了子网的概念。对于目的地址在其他子网的数据包，路由只需要将数据包送到那个子网即可。<br>-那为什么要用IP地址呢？是因为IP地址是和地域相关的，对于同一个子网上的设备，IP地址的前缀都是一样的，这样路由器通过IP地址的前缀就知道设备在在哪个子网上了，而只用MAC地址的话，路由器则需要记住每个MAC地址在哪个子网，这需要路由器有极大的存储空间，是无法实现的。<br>-IP地址可以比作为地址，MAC地址为收件人，在一次通信过程中，两者是缺一不可的。</p>\n<h5 id=\"2-交换机有什么作用？\"><a href=\"#2-交换机有什么作用？\" class=\"headerlink\" title=\"2.交换机有什么作用？\"></a>2.交换机有什么作用？</h5><p>交换机通过广播形式发送arp每台设备的mac地址。<br>arp 即 Address Resolution Protocol，地址解析协议，是根据ip获取设备的mac地址。</p>\n<h5 id=\"3-同一网段为什么能通信？\"><a href=\"#3-同一网段为什么能通信？\" class=\"headerlink\" title=\"3.同一网段为什么能通信？\"></a>3.同一网段为什么能通信？</h5><p>如果同一网段，一般只运用到二层的mac地址的转发，2个相同网段的主机pc1和pc2，当pc1 ping pc2的时候，会先发送arp包，请求pc2的mac地址来进行二层封装，因为他们同一网段，所以能够获得arp回应，有了mac地址就能进行二层源mac和目的mac的封装，封装好了就能通讯。记住二层转发是基于mac的，三层才会基于ip。</p>\n<h5 id=\"4-直连网络需要ip地址？\"><a href=\"#4-直连网络需要ip地址？\" class=\"headerlink\" title=\"4.直连网络需要ip地址？\"></a>4.直连网络需要ip地址？</h5><p>如果两台机器互相知道其MAC地址可以直接交流，前提是互相知道彼此的MAC地址，如果不认识，就要通过arp广播（正向ARP: 通过IP地址获取MAC地址）找到mac地址。</p>\n<p>局域网内部的主机互联互通只需要MAC地址，而不需要IP地址，IP地址的作用是不同局域网的互联互通。</p>\n<h3 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h3><h5 id=\"DDos\"><a href=\"#DDos\" class=\"headerlink\" title=\"DDos\"></a>DDos</h5><p>Distributed Denial of Service 分布式拒绝服务</p>\n<p>肉鸡大量访问目标网站，目标网站被消耗带宽、服务器资源，导致无法正常处理其他用户请求。</p>\n<h5 id=\"DNS劫持\"><a href=\"#DNS劫持\" class=\"headerlink\" title=\"DNS劫持\"></a>DNS劫持</h5><p>假设运营商的DNS服务器被侵入了，用户的请求经过运营商DNS解析后被指向带有广告的ip网站去。</p>\n<h5 id=\"DNS查询攻击\"><a href=\"#DNS查询攻击\" class=\"headerlink\" title=\"DNS查询攻击\"></a>DNS查询攻击</h5><p>DNS Query Flood Attack: 攻击方法是通过操纵大量傀儡机器，发送海量的域名查询请求，当每秒域名查询请求次数超过DNS服务器可承载的能力时，则会造成解析域名超时从而直接影响业务的可用性</p>\n<h5 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h5><p>SQL注入：利用现有应用程序，可以将恶意的SQL命令注入到后台数据库引擎中并执行。也可以通过在Web表单中输入恶意SQL语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行SQL语句</p>\n<p>举例：假设后端有一个漏洞，sql逻辑是通过拼接方式执行sql。<br>select * from car where (carNum &#x3D; $web1 </p>\n<p>前端被恶意传入变量值web1: ‘ZU_006’,0,0);DROP DATABASE TABLE&#x3D;’car’</p>\n<p>这就会导致表会被删除。</p>\n<h5 id=\"跨站脚本攻击\"><a href=\"#跨站脚本攻击\" class=\"headerlink\" title=\"跨站脚本攻击\"></a>跨站脚本攻击</h5><p>手段1：黑客发送一个带有恶意XSS脚本的链接给小白用户，小白点了链接，页面加载执行了恶意XSS脚本，这段脚本可以盗取小白的登录信息然后发给黑客。<br>手段2: 黑客预先将恶意XSS脚本注入到攻击网站的数据库(假设目标网站存在漏洞能被注入脚本)，其他用户刚好加载到带有恶意XSS脚本的目标页面，XSS脚本偷偷将用户的登录信息发给黑客。</p>\n<h5 id=\"重定向攻击\"><a href=\"#重定向攻击\" class=\"headerlink\" title=\"重定向攻击\"></a>重定向攻击</h5><p>一种常用的攻击手段是”钓鱼”。钓鱼攻击者通常会发送给受害者一个合法链接，当您访问链接时，会被导向一个非法网站，从而达到骗取用户信任、窃取用户资料的目的。为防止这种行为，我们必须对所有的重定向操作进行审核，以避免重定向到一个危险的地方。常见解决方案是白名单，将合法的要重定向的URL添加到白名单中，非白名单上的域名重定向时拒绝。第二种解决方案是重定向token，在合法的URL上加上token，重定向时进行验证。</p>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"两个主机怎么相连？\"><a href=\"#两个主机怎么相连？\" class=\"headerlink\" title=\"两个主机怎么相连？\"></a>两个主机怎么相连？</h5><p>没有互联网之前，电脑都是单机运行的，没有网卡，没有协议栈，没有网线，数据传输主要通过光盘，软盘等介质。</p>\n<h5 id=\"网线来了\"><a href=\"#网线来了\" class=\"headerlink\" title=\"网线来了\"></a>网线来了</h5><p>pc1-网口  ———网线———— 网口-pc2     </p>\n<p>Note：<br>其中<code>网线</code>承载bit流，作为物理介质。<code>网卡</code>将字节转换成bit流，反之。还用到协议栈，实现通信中数据的解析，流控制，地址寻址等。</p>\n<h5 id=\"网线不够长怎么办？\"><a href=\"#网线不够长怎么办？\" class=\"headerlink\" title=\"网线不够长怎么办？\"></a>网线不够长怎么办？</h5><p>随着距离变长，信号损耗导致数据丢失，便用到了<code>中继器</code>放大信号。</p>\n<h5 id=\"中继器只有2个口，这个时候有第三台电脑加进来，怎么办？\"><a href=\"#中继器只有2个口，这个时候有第三台电脑加进来，怎么办？\" class=\"headerlink\" title=\"中继器只有2个口，这个时候有第三台电脑加进来，怎么办？\"></a>中继器只有2个口，这个时候有第三台电脑加进来，怎么办？</h5><p>集线器：多口中继器，但是从一个口出来的数据发同时发往其他口，导致数据泛滥，带宽利用率低，无法隔绝各自的环境。</p>\n<h6 id=\"隔绝环境，用网桥\"><a href=\"#隔绝环境，用网桥\" class=\"headerlink\" title=\"隔绝环境，用网桥\"></a>隔绝环境，用网桥</h6><p>网桥，记录了每台主机的mac地址，根据mac地址来分发数据，但接口比较少，怎么办？交换机来了。</p>\n<h5 id=\"交换机\"><a href=\"#交换机\" class=\"headerlink\" title=\"交换机\"></a>交换机</h5><p>交换机，记录了每台主机的mac地址，接口多，能进行vlan隔离。一般用于局域网。<br>想通信更远，怎么办？路由器来了。</p>\n<p>布线麻烦怎么办？AC&#x2F;AP来了<br>不够安全怎么办？防火墙来了<br>网络拥堵怎么办？流量控制来了  </p>\n<h5 id=\"OSI七层模型\"><a href=\"#OSI七层模型\" class=\"headerlink\" title=\"OSI七层模型\"></a>OSI七层模型</h5><p>应用层: 开发者将通信模型定制成协议。<br>表示层：制定双方数据交换格式。如Content-Type：application&#x2F;json; charset&#x3D;utf-8<br>会话层: 管理会话连接，由应用程序的请求和响应组成。<br>传输层：端口，实现报文数据传递。<br>网络层：路由器，ip寻址。<br>数据链路层：交换机，mac寻址，数据差错检测。<br>物理层：网线，二进制流传输。</p>\n<h5 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h5><h5 id=\"1-为什么有了ip还需要mac地址？\"><a href=\"#1-为什么有了ip还需要mac地址？\" class=\"headerlink\" title=\"1.为什么有了ip还需要mac地址？\"></a>1.为什么有了ip还需要mac地址？</h5><p>-简而言之，标识网络中的一台计算机，比较常用的就是IP地址和MAC地址，但计算机的IP地址可由用户自行更改，管理起来就相对困难，而MAC地址不可更改，所以一般会把IP地址和MAC地址组合起来使用。<br>-那只使用MAC地址不用IP地址行不行呢？不行的！因为最早就是MAC地址先出现的，并且当时并不用IP地址，只用MAC地址，后来随着网络中的设备越来越多，整个路由过程越来越复杂，便出现了子网的概念。对于目的地址在其他子网的数据包，路由只需要将数据包送到那个子网即可。<br>-那为什么要用IP地址呢？是因为IP地址是和地域相关的，对于同一个子网上的设备，IP地址的前缀都是一样的，这样路由器通过IP地址的前缀就知道设备在在哪个子网上了，而只用MAC地址的话，路由器则需要记住每个MAC地址在哪个子网，这需要路由器有极大的存储空间，是无法实现的。<br>-IP地址可以比作为地址，MAC地址为收件人，在一次通信过程中，两者是缺一不可的。</p>\n<h5 id=\"2-交换机有什么作用？\"><a href=\"#2-交换机有什么作用？\" class=\"headerlink\" title=\"2.交换机有什么作用？\"></a>2.交换机有什么作用？</h5><p>交换机通过广播形式发送arp每台设备的mac地址。<br>arp 即 Address Resolution Protocol，地址解析协议，是根据ip获取设备的mac地址。</p>\n<h5 id=\"3-同一网段为什么能通信？\"><a href=\"#3-同一网段为什么能通信？\" class=\"headerlink\" title=\"3.同一网段为什么能通信？\"></a>3.同一网段为什么能通信？</h5><p>如果同一网段，一般只运用到二层的mac地址的转发，2个相同网段的主机pc1和pc2，当pc1 ping pc2的时候，会先发送arp包，请求pc2的mac地址来进行二层封装，因为他们同一网段，所以能够获得arp回应，有了mac地址就能进行二层源mac和目的mac的封装，封装好了就能通讯。记住二层转发是基于mac的，三层才会基于ip。</p>\n<h5 id=\"4-直连网络需要ip地址？\"><a href=\"#4-直连网络需要ip地址？\" class=\"headerlink\" title=\"4.直连网络需要ip地址？\"></a>4.直连网络需要ip地址？</h5><p>如果两台机器互相知道其MAC地址可以直接交流，前提是互相知道彼此的MAC地址，如果不认识，就要通过arp广播（正向ARP: 通过IP地址获取MAC地址）找到mac地址。</p>\n<p>局域网内部的主机互联互通只需要MAC地址，而不需要IP地址，IP地址的作用是不同局域网的互联互通。</p>\n<h3 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h3><h5 id=\"DDos\"><a href=\"#DDos\" class=\"headerlink\" title=\"DDos\"></a>DDos</h5><p>Distributed Denial of Service 分布式拒绝服务</p>\n<p>肉鸡大量访问目标网站，目标网站被消耗带宽、服务器资源，导致无法正常处理其他用户请求。</p>\n<h5 id=\"DNS劫持\"><a href=\"#DNS劫持\" class=\"headerlink\" title=\"DNS劫持\"></a>DNS劫持</h5><p>假设运营商的DNS服务器被侵入了，用户的请求经过运营商DNS解析后被指向带有广告的ip网站去。</p>\n<h5 id=\"DNS查询攻击\"><a href=\"#DNS查询攻击\" class=\"headerlink\" title=\"DNS查询攻击\"></a>DNS查询攻击</h5><p>DNS Query Flood Attack: 攻击方法是通过操纵大量傀儡机器，发送海量的域名查询请求，当每秒域名查询请求次数超过DNS服务器可承载的能力时，则会造成解析域名超时从而直接影响业务的可用性</p>\n<h5 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h5><p>SQL注入：利用现有应用程序，可以将恶意的SQL命令注入到后台数据库引擎中并执行。也可以通过在Web表单中输入恶意SQL语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行SQL语句</p>\n<p>举例：假设后端有一个漏洞，sql逻辑是通过拼接方式执行sql。<br>select * from car where (carNum &#x3D; $web1 </p>\n<p>前端被恶意传入变量值web1: ‘ZU_006’,0,0);DROP DATABASE TABLE&#x3D;’car’</p>\n<p>这就会导致表会被删除。</p>\n<h5 id=\"跨站脚本攻击\"><a href=\"#跨站脚本攻击\" class=\"headerlink\" title=\"跨站脚本攻击\"></a>跨站脚本攻击</h5><p>手段1：黑客发送一个带有恶意XSS脚本的链接给小白用户，小白点了链接，页面加载执行了恶意XSS脚本，这段脚本可以盗取小白的登录信息然后发给黑客。<br>手段2: 黑客预先将恶意XSS脚本注入到攻击网站的数据库(假设目标网站存在漏洞能被注入脚本)，其他用户刚好加载到带有恶意XSS脚本的目标页面，XSS脚本偷偷将用户的登录信息发给黑客。</p>\n<h5 id=\"重定向攻击\"><a href=\"#重定向攻击\" class=\"headerlink\" title=\"重定向攻击\"></a>重定向攻击</h5><p>一种常用的攻击手段是”钓鱼”。钓鱼攻击者通常会发送给受害者一个合法链接，当您访问链接时，会被导向一个非法网站，从而达到骗取用户信任、窃取用户资料的目的。为防止这种行为，我们必须对所有的重定向操作进行审核，以避免重定向到一个危险的地方。常见解决方案是白名单，将合法的要重定向的URL添加到白名单中，非白名单上的域名重定向时拒绝。第二种解决方案是重定向token，在合法的URL上加上token，重定向时进行验证。</p>\n"},{"title":"第29期：PHP-FPM","date":"2023-05-22T09:02:04.000Z","_content":"#### 服务管理\nsystemctl status php7.4-fpm # /etc/init.d下可查看服务名称\n\n##### 重启fpm\nps aux|grep php-fpm|grep pool|awk '{print $2}'|xargs -I {} kill {}   # 重启子进程\nkill -USR2 master进程id    # 表示重启php-fpm，其中USR2表示重载所有worker并解决载入配置和二进制模块\n\n##### php.ini配置文件\nphp --ini 查看php配置目录及php.ini文件位置\nmemory_limit 只是限制了每个 PHP 进程的内存占用上限，而不是为每个进程分配了固定的内存\n\n##### 查看PHP-FPM在机器上的平均内存占用\n```\nps --no-headers -o \"rss,cmd\" -C php-fpm | awk '{ sum+=$1 } END { printf (\"%d%s\\n\", sum/NR/1024,\"M\") }'\n```\nNote：NR表行数\n\n\n##### php-fpm配置文件\n```\n1.配置文件路径：/opt/php-7.3.11/etc/php-fpm.d/www.default.conf\n2.配置文件内容详解：\n[www]\nuser = nobody               #进程的发起用户和用户组，用户user是必须设置，group不是  nobody 任意用户\ngroup = nobody\n\nlisten = [::]:9000          #监听ip和端口，[::] 代表任意ip\nchdir = /app                #在程序启动时将会改变到指定的位置(这个是相对路径，相对当前路径或chroot后的“/”目录)　\n\npm = dynamic                #选择进程池管理器如何控制子进程的数量  \n#static： 对于子进程的开启数路给定一个锁定的值(pm.max_children) \n#dynamic: 子进程的数目为动态的，它的数目基于下面的指令的值(以下为dynamic适用参数)\npm.max_children = 16        #同一时刻能够存货的最大子进程的数量\npm.start_servers = 4        #在启动时启动的子进程数量\npm.min_spare_servers = 2    #处于空闲\"idle\"状态的最小子进程，如果空闲进程数量小于这个值，那么相应的子进程会被创建\npm.max_spare_servers = 16   #最大空闲子进程数量，空闲子进程数量超过这个值，那么相应的子进程会被杀掉。\ncatch_workers_output = Yes  #将worker的标准输出和错误输出重定向到主要的错误日志记录中，如果没有设置，根据FastCGI的指定，将会被重定向到/dev/null上\n```\n#### 参考\nhttps://www.php.net/manual/zh/install.fpm.configuration.php\n\n### PHP\n#### PHP安装\ncenots7安装php7.4\n\n下载php包\n\n[php官网](https://www.php.net/downloads.php)\n\n```\nwget https://www.php.net/distributions/php-7.4.29.tar.gz\n```\n\n解压\n```\ntar -xvf php-7.4.29.tar.gz\n```\n切换到目录\n```\ncd php-7.4.29\n```\n\n提前安装依赖工具：\n```\nyum -y install libxml2-devel openssl-devel sqlite-devel libcurl-devel libicu-devel gcc-c++ oniguruma oniguruma-devel libxslt-devel libpng-devel libjpeg-devel freetype-devel\n```\n说明：\n- 若出现`package not found`错误，那就可能需要更换yum源。\n\n配置安装模块\n```\n./configure  \\\n--prefix=/opt/php/php  \\\n--with-config-file-path=/opt/php/php/etc  \\\n--enable-fpm  \\\n--enable-gd  \\\n--with-external-gd  \\\n--with-fpm-user=nginx  \\\n--with-fpm-group=nginx  \\\n--enable-inline-optimization  \\\n--disable-debug  \\\n--disable-rpath  \\\n--enable-shared  \\\n--enable-soap  \\\n--with-libxml \\\n--with-xmlrpc  \\\n--with-openssl  \\\n--with-external-pcre \\\n--with-sqlite3  \\\n--with-zlib  \\\n--enable-bcmath  \\\n--with-iconv  \\\n--with-bz2  \\\n--enable-calendar  \\\n--with-curl  \\\n--with-cdb  \\\n--enable-dom  \\\n--enable-exif  \\\n--enable-fileinfo  \\\n--enable-filter  \\\n--enable-ftp \\\n--with-openssl-dir \\\n--with-jpeg \\\n--with-zlib-dir \\\n--with-freetype \\\n--enable-gd-jis-conv \\\n--with-gettext \\\n--with-gmp \\\n--with-mhash \\\n--enable-json \\\n--enable-mbstring \\\n--enable-mbregex \\\n--enable-pdo \\\n--with-mysqli=mysqlnd \\\n--with-pdo-mysql=mysqlnd \\\n--with-pdo-sqlite \\\n--with-readline \\\n--enable-session \\\n--enable-shmop \\\n--enable-simplexml \\\n--enable-sockets \\\n--enable-sysvmsg \\\n--enable-sysvsem \\\n--enable-sysvshm \\\n--with-xsl \\\n--with-zip \\\n--enable-mysqlnd-compression-support \\\n--with-pear \\\n--enable-opcache\n```\n说明：\n- `--prefix=/opt/php/php` 指定php的安装位置\n- `--enable-fpm` 加上这个选项，编译安装后的目录才会有fpm\n\n- 若遇到` (libpcre2-8 >= 10.30) were not met`问题，是因为模块`--with-external-pcre --with-pcre-jit`用到了`pcre2`\n\n  若包不可下载，可前往`http://www.pcre.org/`下载\n\n安装配置pcre2:\n```\nhttps://sourceforge.net/projects/pcre/files/pcre2/10.34/pcre2-10.34.tar.bz2/download\n\ntar xjvf pcre2-10.34.tar.bz2\n\ncd pcre2-10.34\n\n./configure\n\nmake && make install\n\nexport PKG_CONFIG_PATH=/usr/local/lib/pkgconfig/\n```\n\n- 若遇到`(libcurl >= 7.15.5) were not met`\n```\nyum install libcurl-devel\n```\n说明：若遇到`libcurl-devel` not found，可能需要添加yun源:\n```\ncd /etc/yum.repos.d\nyum clean all # 清除缓存\nwget http://mirrors.163.com/.help/CentOS7-Base-163.repo\n\nsed -i 's/$releasever/7/g' ./CentOS7-Base-163.repo # 替换成7\nyum makecache # 建立索引目录\nyum install libcurl-devel\n```\n- 若遇到`No package 'gdlib' found`\n```\nwget https://github.com/libgd/libgd/releases/download/gd-2.2.5/libgd-2.2.5.tar.gz\ntar zxvf libgd-2.2.5.tar.gz\ncd libgd-2.2.5\n./configure \nmake\nmake install\n\n```\n\n- 若遇到`GNU MP Library version 4.2 or greater required`，则：\n```\nyum -y install gmp-devel\n```\n\n- 若遇到`No package 'libzip' found`，则：\n```\nwget https://libzip.org/download/libzip-1.2.0.tar.gz\ntar -zxvf libzip-1.2.0.tar.gz\ncd libzip-1.2.0\n./configure\nmake && make install\n\n```\n\n配置完成会看到以下界面\n```\n...\nThank you for using PHP.\n...\n```\n编译和安装\n```\nmake && make install\n```\n\n安装完成目录结构\n```\n$ cd /opt/php/php\n$ tree . -L 1\n\n├── bin\n├── etc\n├── include\n├── lib\n├── php\n├── sbin\n└── var\n```\n编辑`/etc/profile`，文件末尾添加\n```\nPATH=$PATH:/opt/php/php/bin\nexport PATH\n```\n\n`source /etc/profile`后即可使用`php -v`等命令\n\n安装之后的目录没有`php.ini`，从之前用来安装php的源码包的根目录拷贝`php.ini-production`到`/opt/php/php/etc`目录，改名：\n```\nmv php.ini-production php.ini\n```\n\nphp命令\n```\nphp --ini # 查看ini位置\nphp -v # 查看版本\n\n$ php -a # 交互式运行php\nphp > $a = 5;\nphp > echo $a;\n\n```\n\n给php-fpm建个软链\n```\nln -s /opt/php/php/sbin/php-fpm /usr/sbin/php-fpm\n```\n\n配置php-fpm.conf文件\n```\ncd /opt/php/php/etc\nmv php-fpm.conf.default php-fpm.conf\n```\n配置www.conf文件\n```\ncd /opt/php/php/etc/php-fpm.d\nmv www.conf.default www.conf\n```\n启动php-fpm服务\n```\nphp-fpm\n```\n","source":"_posts/第29期：PHP-FPM.md","raw":"---\ntitle: 第29期：PHP-FPM\ndate: 2023-05-22 17:02:04\ntags:\n---\n#### 服务管理\nsystemctl status php7.4-fpm # /etc/init.d下可查看服务名称\n\n##### 重启fpm\nps aux|grep php-fpm|grep pool|awk '{print $2}'|xargs -I {} kill {}   # 重启子进程\nkill -USR2 master进程id    # 表示重启php-fpm，其中USR2表示重载所有worker并解决载入配置和二进制模块\n\n##### php.ini配置文件\nphp --ini 查看php配置目录及php.ini文件位置\nmemory_limit 只是限制了每个 PHP 进程的内存占用上限，而不是为每个进程分配了固定的内存\n\n##### 查看PHP-FPM在机器上的平均内存占用\n```\nps --no-headers -o \"rss,cmd\" -C php-fpm | awk '{ sum+=$1 } END { printf (\"%d%s\\n\", sum/NR/1024,\"M\") }'\n```\nNote：NR表行数\n\n\n##### php-fpm配置文件\n```\n1.配置文件路径：/opt/php-7.3.11/etc/php-fpm.d/www.default.conf\n2.配置文件内容详解：\n[www]\nuser = nobody               #进程的发起用户和用户组，用户user是必须设置，group不是  nobody 任意用户\ngroup = nobody\n\nlisten = [::]:9000          #监听ip和端口，[::] 代表任意ip\nchdir = /app                #在程序启动时将会改变到指定的位置(这个是相对路径，相对当前路径或chroot后的“/”目录)　\n\npm = dynamic                #选择进程池管理器如何控制子进程的数量  \n#static： 对于子进程的开启数路给定一个锁定的值(pm.max_children) \n#dynamic: 子进程的数目为动态的，它的数目基于下面的指令的值(以下为dynamic适用参数)\npm.max_children = 16        #同一时刻能够存货的最大子进程的数量\npm.start_servers = 4        #在启动时启动的子进程数量\npm.min_spare_servers = 2    #处于空闲\"idle\"状态的最小子进程，如果空闲进程数量小于这个值，那么相应的子进程会被创建\npm.max_spare_servers = 16   #最大空闲子进程数量，空闲子进程数量超过这个值，那么相应的子进程会被杀掉。\ncatch_workers_output = Yes  #将worker的标准输出和错误输出重定向到主要的错误日志记录中，如果没有设置，根据FastCGI的指定，将会被重定向到/dev/null上\n```\n#### 参考\nhttps://www.php.net/manual/zh/install.fpm.configuration.php\n\n### PHP\n#### PHP安装\ncenots7安装php7.4\n\n下载php包\n\n[php官网](https://www.php.net/downloads.php)\n\n```\nwget https://www.php.net/distributions/php-7.4.29.tar.gz\n```\n\n解压\n```\ntar -xvf php-7.4.29.tar.gz\n```\n切换到目录\n```\ncd php-7.4.29\n```\n\n提前安装依赖工具：\n```\nyum -y install libxml2-devel openssl-devel sqlite-devel libcurl-devel libicu-devel gcc-c++ oniguruma oniguruma-devel libxslt-devel libpng-devel libjpeg-devel freetype-devel\n```\n说明：\n- 若出现`package not found`错误，那就可能需要更换yum源。\n\n配置安装模块\n```\n./configure  \\\n--prefix=/opt/php/php  \\\n--with-config-file-path=/opt/php/php/etc  \\\n--enable-fpm  \\\n--enable-gd  \\\n--with-external-gd  \\\n--with-fpm-user=nginx  \\\n--with-fpm-group=nginx  \\\n--enable-inline-optimization  \\\n--disable-debug  \\\n--disable-rpath  \\\n--enable-shared  \\\n--enable-soap  \\\n--with-libxml \\\n--with-xmlrpc  \\\n--with-openssl  \\\n--with-external-pcre \\\n--with-sqlite3  \\\n--with-zlib  \\\n--enable-bcmath  \\\n--with-iconv  \\\n--with-bz2  \\\n--enable-calendar  \\\n--with-curl  \\\n--with-cdb  \\\n--enable-dom  \\\n--enable-exif  \\\n--enable-fileinfo  \\\n--enable-filter  \\\n--enable-ftp \\\n--with-openssl-dir \\\n--with-jpeg \\\n--with-zlib-dir \\\n--with-freetype \\\n--enable-gd-jis-conv \\\n--with-gettext \\\n--with-gmp \\\n--with-mhash \\\n--enable-json \\\n--enable-mbstring \\\n--enable-mbregex \\\n--enable-pdo \\\n--with-mysqli=mysqlnd \\\n--with-pdo-mysql=mysqlnd \\\n--with-pdo-sqlite \\\n--with-readline \\\n--enable-session \\\n--enable-shmop \\\n--enable-simplexml \\\n--enable-sockets \\\n--enable-sysvmsg \\\n--enable-sysvsem \\\n--enable-sysvshm \\\n--with-xsl \\\n--with-zip \\\n--enable-mysqlnd-compression-support \\\n--with-pear \\\n--enable-opcache\n```\n说明：\n- `--prefix=/opt/php/php` 指定php的安装位置\n- `--enable-fpm` 加上这个选项，编译安装后的目录才会有fpm\n\n- 若遇到` (libpcre2-8 >= 10.30) were not met`问题，是因为模块`--with-external-pcre --with-pcre-jit`用到了`pcre2`\n\n  若包不可下载，可前往`http://www.pcre.org/`下载\n\n安装配置pcre2:\n```\nhttps://sourceforge.net/projects/pcre/files/pcre2/10.34/pcre2-10.34.tar.bz2/download\n\ntar xjvf pcre2-10.34.tar.bz2\n\ncd pcre2-10.34\n\n./configure\n\nmake && make install\n\nexport PKG_CONFIG_PATH=/usr/local/lib/pkgconfig/\n```\n\n- 若遇到`(libcurl >= 7.15.5) were not met`\n```\nyum install libcurl-devel\n```\n说明：若遇到`libcurl-devel` not found，可能需要添加yun源:\n```\ncd /etc/yum.repos.d\nyum clean all # 清除缓存\nwget http://mirrors.163.com/.help/CentOS7-Base-163.repo\n\nsed -i 's/$releasever/7/g' ./CentOS7-Base-163.repo # 替换成7\nyum makecache # 建立索引目录\nyum install libcurl-devel\n```\n- 若遇到`No package 'gdlib' found`\n```\nwget https://github.com/libgd/libgd/releases/download/gd-2.2.5/libgd-2.2.5.tar.gz\ntar zxvf libgd-2.2.5.tar.gz\ncd libgd-2.2.5\n./configure \nmake\nmake install\n\n```\n\n- 若遇到`GNU MP Library version 4.2 or greater required`，则：\n```\nyum -y install gmp-devel\n```\n\n- 若遇到`No package 'libzip' found`，则：\n```\nwget https://libzip.org/download/libzip-1.2.0.tar.gz\ntar -zxvf libzip-1.2.0.tar.gz\ncd libzip-1.2.0\n./configure\nmake && make install\n\n```\n\n配置完成会看到以下界面\n```\n...\nThank you for using PHP.\n...\n```\n编译和安装\n```\nmake && make install\n```\n\n安装完成目录结构\n```\n$ cd /opt/php/php\n$ tree . -L 1\n\n├── bin\n├── etc\n├── include\n├── lib\n├── php\n├── sbin\n└── var\n```\n编辑`/etc/profile`，文件末尾添加\n```\nPATH=$PATH:/opt/php/php/bin\nexport PATH\n```\n\n`source /etc/profile`后即可使用`php -v`等命令\n\n安装之后的目录没有`php.ini`，从之前用来安装php的源码包的根目录拷贝`php.ini-production`到`/opt/php/php/etc`目录，改名：\n```\nmv php.ini-production php.ini\n```\n\nphp命令\n```\nphp --ini # 查看ini位置\nphp -v # 查看版本\n\n$ php -a # 交互式运行php\nphp > $a = 5;\nphp > echo $a;\n\n```\n\n给php-fpm建个软链\n```\nln -s /opt/php/php/sbin/php-fpm /usr/sbin/php-fpm\n```\n\n配置php-fpm.conf文件\n```\ncd /opt/php/php/etc\nmv php-fpm.conf.default php-fpm.conf\n```\n配置www.conf文件\n```\ncd /opt/php/php/etc/php-fpm.d\nmv www.conf.default www.conf\n```\n启动php-fpm服务\n```\nphp-fpm\n```\n","slug":"第29期：PHP-FPM","published":1,"updated":"2024-03-06T06:55:18.359Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt6r000j9kln4txx0mjk","content":"<h4 id=\"服务管理\"><a href=\"#服务管理\" class=\"headerlink\" title=\"服务管理\"></a>服务管理</h4><p>systemctl status php7.4-fpm # &#x2F;etc&#x2F;init.d下可查看服务名称</p>\n<h5 id=\"重启fpm\"><a href=\"#重启fpm\" class=\"headerlink\" title=\"重启fpm\"></a>重启fpm</h5><p>ps aux|grep php-fpm|grep pool|awk ‘{print $2}’|xargs -I {} kill {}   # 重启子进程<br>kill -USR2 master进程id    # 表示重启php-fpm，其中USR2表示重载所有worker并解决载入配置和二进制模块</p>\n<h5 id=\"php-ini配置文件\"><a href=\"#php-ini配置文件\" class=\"headerlink\" title=\"php.ini配置文件\"></a>php.ini配置文件</h5><p>php –ini 查看php配置目录及php.ini文件位置<br>memory_limit 只是限制了每个 PHP 进程的内存占用上限，而不是为每个进程分配了固定的内存</p>\n<h5 id=\"查看PHP-FPM在机器上的平均内存占用\"><a href=\"#查看PHP-FPM在机器上的平均内存占用\" class=\"headerlink\" title=\"查看PHP-FPM在机器上的平均内存占用\"></a>查看PHP-FPM在机器上的平均内存占用</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps --no-headers -o &quot;rss,cmd&quot; -C php-fpm | awk &#x27;&#123; sum+=$1 &#125; END &#123; printf (&quot;%d%s\\n&quot;, sum/NR/1024,&quot;M&quot;) &#125;&#x27;</span><br></pre></td></tr></table></figure>\n<p>Note：NR表行数</p>\n<h5 id=\"php-fpm配置文件\"><a href=\"#php-fpm配置文件\" class=\"headerlink\" title=\"php-fpm配置文件\"></a>php-fpm配置文件</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.配置文件路径：/opt/php-7.3.11/etc/php-fpm.d/www.default.conf</span><br><span class=\"line\">2.配置文件内容详解：</span><br><span class=\"line\">[www]</span><br><span class=\"line\">user = nobody               #进程的发起用户和用户组，用户user是必须设置，group不是  nobody 任意用户</span><br><span class=\"line\">group = nobody</span><br><span class=\"line\"></span><br><span class=\"line\">listen = [::]:9000          #监听ip和端口，[::] 代表任意ip</span><br><span class=\"line\">chdir = /app                #在程序启动时将会改变到指定的位置(这个是相对路径，相对当前路径或chroot后的“/”目录)　</span><br><span class=\"line\"></span><br><span class=\"line\">pm = dynamic                #选择进程池管理器如何控制子进程的数量  </span><br><span class=\"line\">#static： 对于子进程的开启数路给定一个锁定的值(pm.max_children) </span><br><span class=\"line\">#dynamic: 子进程的数目为动态的，它的数目基于下面的指令的值(以下为dynamic适用参数)</span><br><span class=\"line\">pm.max_children = 16        #同一时刻能够存货的最大子进程的数量</span><br><span class=\"line\">pm.start_servers = 4        #在启动时启动的子进程数量</span><br><span class=\"line\">pm.min_spare_servers = 2    #处于空闲&quot;idle&quot;状态的最小子进程，如果空闲进程数量小于这个值，那么相应的子进程会被创建</span><br><span class=\"line\">pm.max_spare_servers = 16   #最大空闲子进程数量，空闲子进程数量超过这个值，那么相应的子进程会被杀掉。</span><br><span class=\"line\">catch_workers_output = Yes  #将worker的标准输出和错误输出重定向到主要的错误日志记录中，如果没有设置，根据FastCGI的指定，将会被重定向到/dev/null上</span><br></pre></td></tr></table></figure>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p><a href=\"https://www.php.net/manual/zh/install.fpm.configuration.php\">https://www.php.net/manual/zh/install.fpm.configuration.php</a></p>\n<h3 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h3><h4 id=\"PHP安装\"><a href=\"#PHP安装\" class=\"headerlink\" title=\"PHP安装\"></a>PHP安装</h4><p>cenots7安装php7.4</p>\n<p>下载php包</p>\n<p><a href=\"https://www.php.net/downloads.php\">php官网</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.php.net/distributions/php-7.4.29.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>解压</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xvf php-7.4.29.tar.gz</span><br></pre></td></tr></table></figure>\n<p>切换到目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd php-7.4.29</span><br></pre></td></tr></table></figure>\n\n<p>提前安装依赖工具：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install libxml2-devel openssl-devel sqlite-devel libcurl-devel libicu-devel gcc-c++ oniguruma oniguruma-devel libxslt-devel libpng-devel libjpeg-devel freetype-devel</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li>若出现<code>package not found</code>错误，那就可能需要更换yum源。</li>\n</ul>\n<p>配置安装模块</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure  \\</span><br><span class=\"line\">--prefix=/opt/php/php  \\</span><br><span class=\"line\">--with-config-file-path=/opt/php/php/etc  \\</span><br><span class=\"line\">--enable-fpm  \\</span><br><span class=\"line\">--enable-gd  \\</span><br><span class=\"line\">--with-external-gd  \\</span><br><span class=\"line\">--with-fpm-user=nginx  \\</span><br><span class=\"line\">--with-fpm-group=nginx  \\</span><br><span class=\"line\">--enable-inline-optimization  \\</span><br><span class=\"line\">--disable-debug  \\</span><br><span class=\"line\">--disable-rpath  \\</span><br><span class=\"line\">--enable-shared  \\</span><br><span class=\"line\">--enable-soap  \\</span><br><span class=\"line\">--with-libxml \\</span><br><span class=\"line\">--with-xmlrpc  \\</span><br><span class=\"line\">--with-openssl  \\</span><br><span class=\"line\">--with-external-pcre \\</span><br><span class=\"line\">--with-sqlite3  \\</span><br><span class=\"line\">--with-zlib  \\</span><br><span class=\"line\">--enable-bcmath  \\</span><br><span class=\"line\">--with-iconv  \\</span><br><span class=\"line\">--with-bz2  \\</span><br><span class=\"line\">--enable-calendar  \\</span><br><span class=\"line\">--with-curl  \\</span><br><span class=\"line\">--with-cdb  \\</span><br><span class=\"line\">--enable-dom  \\</span><br><span class=\"line\">--enable-exif  \\</span><br><span class=\"line\">--enable-fileinfo  \\</span><br><span class=\"line\">--enable-filter  \\</span><br><span class=\"line\">--enable-ftp \\</span><br><span class=\"line\">--with-openssl-dir \\</span><br><span class=\"line\">--with-jpeg \\</span><br><span class=\"line\">--with-zlib-dir \\</span><br><span class=\"line\">--with-freetype \\</span><br><span class=\"line\">--enable-gd-jis-conv \\</span><br><span class=\"line\">--with-gettext \\</span><br><span class=\"line\">--with-gmp \\</span><br><span class=\"line\">--with-mhash \\</span><br><span class=\"line\">--enable-json \\</span><br><span class=\"line\">--enable-mbstring \\</span><br><span class=\"line\">--enable-mbregex \\</span><br><span class=\"line\">--enable-pdo \\</span><br><span class=\"line\">--with-mysqli=mysqlnd \\</span><br><span class=\"line\">--with-pdo-mysql=mysqlnd \\</span><br><span class=\"line\">--with-pdo-sqlite \\</span><br><span class=\"line\">--with-readline \\</span><br><span class=\"line\">--enable-session \\</span><br><span class=\"line\">--enable-shmop \\</span><br><span class=\"line\">--enable-simplexml \\</span><br><span class=\"line\">--enable-sockets \\</span><br><span class=\"line\">--enable-sysvmsg \\</span><br><span class=\"line\">--enable-sysvsem \\</span><br><span class=\"line\">--enable-sysvshm \\</span><br><span class=\"line\">--with-xsl \\</span><br><span class=\"line\">--with-zip \\</span><br><span class=\"line\">--enable-mysqlnd-compression-support \\</span><br><span class=\"line\">--with-pear \\</span><br><span class=\"line\">--enable-opcache</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><p><code>--prefix=/opt/php/php</code> 指定php的安装位置</p>\n</li>\n<li><p><code>--enable-fpm</code> 加上这个选项，编译安装后的目录才会有fpm</p>\n</li>\n<li><p>若遇到<code> (libpcre2-8 &gt;= 10.30) were not met</code>问题，是因为模块<code>--with-external-pcre --with-pcre-jit</code>用到了<code>pcre2</code></p>\n<p>若包不可下载，可前往<code>http://www.pcre.org/</code>下载</p>\n</li>\n</ul>\n<p>安装配置pcre2:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://sourceforge.net/projects/pcre/files/pcre2/10.34/pcre2-10.34.tar.bz2/download</span><br><span class=\"line\"></span><br><span class=\"line\">tar xjvf pcre2-10.34.tar.bz2</span><br><span class=\"line\"></span><br><span class=\"line\">cd pcre2-10.34</span><br><span class=\"line\"></span><br><span class=\"line\">./configure</span><br><span class=\"line\"></span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\"></span><br><span class=\"line\">export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig/</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>若遇到<code>(libcurl &gt;= 7.15.5) were not met</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install libcurl-devel</span><br></pre></td></tr></table></figure>\n<p>说明：若遇到<code>libcurl-devel</code> not found，可能需要添加yun源:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/yum.repos.d</span><br><span class=\"line\">yum clean all # 清除缓存</span><br><span class=\"line\">wget http://mirrors.163.com/.help/CentOS7-Base-163.repo</span><br><span class=\"line\"></span><br><span class=\"line\">sed -i &#x27;s/$releasever/7/g&#x27; ./CentOS7-Base-163.repo # 替换成7</span><br><span class=\"line\">yum makecache # 建立索引目录</span><br><span class=\"line\">yum install libcurl-devel</span><br></pre></td></tr></table></figure></li>\n<li><p>若遇到<code>No package &#39;gdlib&#39; found</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/libgd/libgd/releases/download/gd-2.2.5/libgd-2.2.5.tar.gz</span><br><span class=\"line\">tar zxvf libgd-2.2.5.tar.gz</span><br><span class=\"line\">cd libgd-2.2.5</span><br><span class=\"line\">./configure </span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>若遇到<code>GNU MP Library version 4.2 or greater required</code>，则：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gmp-devel</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>若遇到<code>No package &#39;libzip&#39; found</code>，则：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://libzip.org/download/libzip-1.2.0.tar.gz</span><br><span class=\"line\">tar -zxvf libzip-1.2.0.tar.gz</span><br><span class=\"line\">cd libzip-1.2.0</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>配置完成会看到以下界面</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">Thank you for using PHP.</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>编译和安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<p>安装完成目录结构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd /opt/php/php</span><br><span class=\"line\">$ tree . -L 1</span><br><span class=\"line\"></span><br><span class=\"line\">├── bin</span><br><span class=\"line\">├── etc</span><br><span class=\"line\">├── include</span><br><span class=\"line\">├── lib</span><br><span class=\"line\">├── php</span><br><span class=\"line\">├── sbin</span><br><span class=\"line\">└── var</span><br></pre></td></tr></table></figure>\n<p>编辑<code>/etc/profile</code>，文件末尾添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PATH=$PATH:/opt/php/php/bin</span><br><span class=\"line\">export PATH</span><br></pre></td></tr></table></figure>\n\n<p><code>source /etc/profile</code>后即可使用<code>php -v</code>等命令</p>\n<p>安装之后的目录没有<code>php.ini</code>，从之前用来安装php的源码包的根目录拷贝<code>php.ini-production</code>到<code>/opt/php/php/etc</code>目录，改名：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv php.ini-production php.ini</span><br></pre></td></tr></table></figure>\n\n<p>php命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php --ini # 查看ini位置</span><br><span class=\"line\">php -v # 查看版本</span><br><span class=\"line\"></span><br><span class=\"line\">$ php -a # 交互式运行php</span><br><span class=\"line\">php &gt; $a = 5;</span><br><span class=\"line\">php &gt; echo $a;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>给php-fpm建个软链</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /opt/php/php/sbin/php-fpm /usr/sbin/php-fpm</span><br></pre></td></tr></table></figure>\n\n<p>配置php-fpm.conf文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/php/php/etc</span><br><span class=\"line\">mv php-fpm.conf.default php-fpm.conf</span><br></pre></td></tr></table></figure>\n<p>配置<a href=\"http://www.conf文件/\">www.conf文件</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/php/php/etc/php-fpm.d</span><br><span class=\"line\">mv www.conf.default www.conf</span><br></pre></td></tr></table></figure>\n<p>启动php-fpm服务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php-fpm</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"服务管理\"><a href=\"#服务管理\" class=\"headerlink\" title=\"服务管理\"></a>服务管理</h4><p>systemctl status php7.4-fpm # &#x2F;etc&#x2F;init.d下可查看服务名称</p>\n<h5 id=\"重启fpm\"><a href=\"#重启fpm\" class=\"headerlink\" title=\"重启fpm\"></a>重启fpm</h5><p>ps aux|grep php-fpm|grep pool|awk ‘{print $2}’|xargs -I {} kill {}   # 重启子进程<br>kill -USR2 master进程id    # 表示重启php-fpm，其中USR2表示重载所有worker并解决载入配置和二进制模块</p>\n<h5 id=\"php-ini配置文件\"><a href=\"#php-ini配置文件\" class=\"headerlink\" title=\"php.ini配置文件\"></a>php.ini配置文件</h5><p>php –ini 查看php配置目录及php.ini文件位置<br>memory_limit 只是限制了每个 PHP 进程的内存占用上限，而不是为每个进程分配了固定的内存</p>\n<h5 id=\"查看PHP-FPM在机器上的平均内存占用\"><a href=\"#查看PHP-FPM在机器上的平均内存占用\" class=\"headerlink\" title=\"查看PHP-FPM在机器上的平均内存占用\"></a>查看PHP-FPM在机器上的平均内存占用</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps --no-headers -o &quot;rss,cmd&quot; -C php-fpm | awk &#x27;&#123; sum+=$1 &#125; END &#123; printf (&quot;%d%s\\n&quot;, sum/NR/1024,&quot;M&quot;) &#125;&#x27;</span><br></pre></td></tr></table></figure>\n<p>Note：NR表行数</p>\n<h5 id=\"php-fpm配置文件\"><a href=\"#php-fpm配置文件\" class=\"headerlink\" title=\"php-fpm配置文件\"></a>php-fpm配置文件</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.配置文件路径：/opt/php-7.3.11/etc/php-fpm.d/www.default.conf</span><br><span class=\"line\">2.配置文件内容详解：</span><br><span class=\"line\">[www]</span><br><span class=\"line\">user = nobody               #进程的发起用户和用户组，用户user是必须设置，group不是  nobody 任意用户</span><br><span class=\"line\">group = nobody</span><br><span class=\"line\"></span><br><span class=\"line\">listen = [::]:9000          #监听ip和端口，[::] 代表任意ip</span><br><span class=\"line\">chdir = /app                #在程序启动时将会改变到指定的位置(这个是相对路径，相对当前路径或chroot后的“/”目录)　</span><br><span class=\"line\"></span><br><span class=\"line\">pm = dynamic                #选择进程池管理器如何控制子进程的数量  </span><br><span class=\"line\">#static： 对于子进程的开启数路给定一个锁定的值(pm.max_children) </span><br><span class=\"line\">#dynamic: 子进程的数目为动态的，它的数目基于下面的指令的值(以下为dynamic适用参数)</span><br><span class=\"line\">pm.max_children = 16        #同一时刻能够存货的最大子进程的数量</span><br><span class=\"line\">pm.start_servers = 4        #在启动时启动的子进程数量</span><br><span class=\"line\">pm.min_spare_servers = 2    #处于空闲&quot;idle&quot;状态的最小子进程，如果空闲进程数量小于这个值，那么相应的子进程会被创建</span><br><span class=\"line\">pm.max_spare_servers = 16   #最大空闲子进程数量，空闲子进程数量超过这个值，那么相应的子进程会被杀掉。</span><br><span class=\"line\">catch_workers_output = Yes  #将worker的标准输出和错误输出重定向到主要的错误日志记录中，如果没有设置，根据FastCGI的指定，将会被重定向到/dev/null上</span><br></pre></td></tr></table></figure>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p><a href=\"https://www.php.net/manual/zh/install.fpm.configuration.php\">https://www.php.net/manual/zh/install.fpm.configuration.php</a></p>\n<h3 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h3><h4 id=\"PHP安装\"><a href=\"#PHP安装\" class=\"headerlink\" title=\"PHP安装\"></a>PHP安装</h4><p>cenots7安装php7.4</p>\n<p>下载php包</p>\n<p><a href=\"https://www.php.net/downloads.php\">php官网</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.php.net/distributions/php-7.4.29.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>解压</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xvf php-7.4.29.tar.gz</span><br></pre></td></tr></table></figure>\n<p>切换到目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd php-7.4.29</span><br></pre></td></tr></table></figure>\n\n<p>提前安装依赖工具：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install libxml2-devel openssl-devel sqlite-devel libcurl-devel libicu-devel gcc-c++ oniguruma oniguruma-devel libxslt-devel libpng-devel libjpeg-devel freetype-devel</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li>若出现<code>package not found</code>错误，那就可能需要更换yum源。</li>\n</ul>\n<p>配置安装模块</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure  \\</span><br><span class=\"line\">--prefix=/opt/php/php  \\</span><br><span class=\"line\">--with-config-file-path=/opt/php/php/etc  \\</span><br><span class=\"line\">--enable-fpm  \\</span><br><span class=\"line\">--enable-gd  \\</span><br><span class=\"line\">--with-external-gd  \\</span><br><span class=\"line\">--with-fpm-user=nginx  \\</span><br><span class=\"line\">--with-fpm-group=nginx  \\</span><br><span class=\"line\">--enable-inline-optimization  \\</span><br><span class=\"line\">--disable-debug  \\</span><br><span class=\"line\">--disable-rpath  \\</span><br><span class=\"line\">--enable-shared  \\</span><br><span class=\"line\">--enable-soap  \\</span><br><span class=\"line\">--with-libxml \\</span><br><span class=\"line\">--with-xmlrpc  \\</span><br><span class=\"line\">--with-openssl  \\</span><br><span class=\"line\">--with-external-pcre \\</span><br><span class=\"line\">--with-sqlite3  \\</span><br><span class=\"line\">--with-zlib  \\</span><br><span class=\"line\">--enable-bcmath  \\</span><br><span class=\"line\">--with-iconv  \\</span><br><span class=\"line\">--with-bz2  \\</span><br><span class=\"line\">--enable-calendar  \\</span><br><span class=\"line\">--with-curl  \\</span><br><span class=\"line\">--with-cdb  \\</span><br><span class=\"line\">--enable-dom  \\</span><br><span class=\"line\">--enable-exif  \\</span><br><span class=\"line\">--enable-fileinfo  \\</span><br><span class=\"line\">--enable-filter  \\</span><br><span class=\"line\">--enable-ftp \\</span><br><span class=\"line\">--with-openssl-dir \\</span><br><span class=\"line\">--with-jpeg \\</span><br><span class=\"line\">--with-zlib-dir \\</span><br><span class=\"line\">--with-freetype \\</span><br><span class=\"line\">--enable-gd-jis-conv \\</span><br><span class=\"line\">--with-gettext \\</span><br><span class=\"line\">--with-gmp \\</span><br><span class=\"line\">--with-mhash \\</span><br><span class=\"line\">--enable-json \\</span><br><span class=\"line\">--enable-mbstring \\</span><br><span class=\"line\">--enable-mbregex \\</span><br><span class=\"line\">--enable-pdo \\</span><br><span class=\"line\">--with-mysqli=mysqlnd \\</span><br><span class=\"line\">--with-pdo-mysql=mysqlnd \\</span><br><span class=\"line\">--with-pdo-sqlite \\</span><br><span class=\"line\">--with-readline \\</span><br><span class=\"line\">--enable-session \\</span><br><span class=\"line\">--enable-shmop \\</span><br><span class=\"line\">--enable-simplexml \\</span><br><span class=\"line\">--enable-sockets \\</span><br><span class=\"line\">--enable-sysvmsg \\</span><br><span class=\"line\">--enable-sysvsem \\</span><br><span class=\"line\">--enable-sysvshm \\</span><br><span class=\"line\">--with-xsl \\</span><br><span class=\"line\">--with-zip \\</span><br><span class=\"line\">--enable-mysqlnd-compression-support \\</span><br><span class=\"line\">--with-pear \\</span><br><span class=\"line\">--enable-opcache</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><p><code>--prefix=/opt/php/php</code> 指定php的安装位置</p>\n</li>\n<li><p><code>--enable-fpm</code> 加上这个选项，编译安装后的目录才会有fpm</p>\n</li>\n<li><p>若遇到<code> (libpcre2-8 &gt;= 10.30) were not met</code>问题，是因为模块<code>--with-external-pcre --with-pcre-jit</code>用到了<code>pcre2</code></p>\n<p>若包不可下载，可前往<code>http://www.pcre.org/</code>下载</p>\n</li>\n</ul>\n<p>安装配置pcre2:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://sourceforge.net/projects/pcre/files/pcre2/10.34/pcre2-10.34.tar.bz2/download</span><br><span class=\"line\"></span><br><span class=\"line\">tar xjvf pcre2-10.34.tar.bz2</span><br><span class=\"line\"></span><br><span class=\"line\">cd pcre2-10.34</span><br><span class=\"line\"></span><br><span class=\"line\">./configure</span><br><span class=\"line\"></span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\"></span><br><span class=\"line\">export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig/</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>若遇到<code>(libcurl &gt;= 7.15.5) were not met</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install libcurl-devel</span><br></pre></td></tr></table></figure>\n<p>说明：若遇到<code>libcurl-devel</code> not found，可能需要添加yun源:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/yum.repos.d</span><br><span class=\"line\">yum clean all # 清除缓存</span><br><span class=\"line\">wget http://mirrors.163.com/.help/CentOS7-Base-163.repo</span><br><span class=\"line\"></span><br><span class=\"line\">sed -i &#x27;s/$releasever/7/g&#x27; ./CentOS7-Base-163.repo # 替换成7</span><br><span class=\"line\">yum makecache # 建立索引目录</span><br><span class=\"line\">yum install libcurl-devel</span><br></pre></td></tr></table></figure></li>\n<li><p>若遇到<code>No package &#39;gdlib&#39; found</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/libgd/libgd/releases/download/gd-2.2.5/libgd-2.2.5.tar.gz</span><br><span class=\"line\">tar zxvf libgd-2.2.5.tar.gz</span><br><span class=\"line\">cd libgd-2.2.5</span><br><span class=\"line\">./configure </span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>若遇到<code>GNU MP Library version 4.2 or greater required</code>，则：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gmp-devel</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>若遇到<code>No package &#39;libzip&#39; found</code>，则：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://libzip.org/download/libzip-1.2.0.tar.gz</span><br><span class=\"line\">tar -zxvf libzip-1.2.0.tar.gz</span><br><span class=\"line\">cd libzip-1.2.0</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>配置完成会看到以下界面</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">Thank you for using PHP.</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>编译和安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<p>安装完成目录结构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd /opt/php/php</span><br><span class=\"line\">$ tree . -L 1</span><br><span class=\"line\"></span><br><span class=\"line\">├── bin</span><br><span class=\"line\">├── etc</span><br><span class=\"line\">├── include</span><br><span class=\"line\">├── lib</span><br><span class=\"line\">├── php</span><br><span class=\"line\">├── sbin</span><br><span class=\"line\">└── var</span><br></pre></td></tr></table></figure>\n<p>编辑<code>/etc/profile</code>，文件末尾添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PATH=$PATH:/opt/php/php/bin</span><br><span class=\"line\">export PATH</span><br></pre></td></tr></table></figure>\n\n<p><code>source /etc/profile</code>后即可使用<code>php -v</code>等命令</p>\n<p>安装之后的目录没有<code>php.ini</code>，从之前用来安装php的源码包的根目录拷贝<code>php.ini-production</code>到<code>/opt/php/php/etc</code>目录，改名：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv php.ini-production php.ini</span><br></pre></td></tr></table></figure>\n\n<p>php命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php --ini # 查看ini位置</span><br><span class=\"line\">php -v # 查看版本</span><br><span class=\"line\"></span><br><span class=\"line\">$ php -a # 交互式运行php</span><br><span class=\"line\">php &gt; $a = 5;</span><br><span class=\"line\">php &gt; echo $a;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>给php-fpm建个软链</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /opt/php/php/sbin/php-fpm /usr/sbin/php-fpm</span><br></pre></td></tr></table></figure>\n\n<p>配置php-fpm.conf文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/php/php/etc</span><br><span class=\"line\">mv php-fpm.conf.default php-fpm.conf</span><br></pre></td></tr></table></figure>\n<p>配置<a href=\"http://www.conf文件/\">www.conf文件</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/php/php/etc/php-fpm.d</span><br><span class=\"line\">mv www.conf.default www.conf</span><br></pre></td></tr></table></figure>\n<p>启动php-fpm服务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php-fpm</span><br></pre></td></tr></table></figure>\n"},{"title":"第30期：Python","date":"2023-05-22T09:03:52.000Z","_content":"##### 1.6.1 缩进\n错误：\n```\na = 1\n b = 2\n```\n\n正确：\n```\na = 1\nb = 1\n```\n\n##### 1.6.2 print 打印函数\n```\nprint(\"hello\")\n```\n\npython3 可以这么写:\n```\nprint \"Hello world\"\n```\n##### 1.6.3 数学运算\n```\na = 1\nb = 2\nsurface = a * b \n\na * b * b  等价于 a * b**2\n\n```\n##### 1.6.4 String\n3种表示方法\n```\nmessage = 'hello'\nmessage = \"hello\"\nmessage = \"\"\"hello world\"\"\"  or message = '''hello world'''   # 可以表示多行字符\n```\n\n##### 1.6.5 print(2)\na = \"world\"\nb = \"tony\"\nprint(\"hello %s\" % a)  # 打印hello world\nprint(\"hello %s and %s\" % (a,b))\n\n##### 1.6.6 module 模块\n```\n# 导入整个模块\nimport math     # 等价于导入整个文件(模块)，接着就可以用所有的变量和函数。\nmath.pi\n```\n\n```\n# 选择性地导入\nfrom math import pi\nsurface = pi * R**2\n```\n\n```\n# 导入所有\nfrom math import * # 这种导入可能会覆盖自定义的变量\n```\n##### 1.6.6 Function 函数\n```\nfrom math import pi\ndef compute_surface(radius, pi=math.pi):\n    return pi* radius * radius\n```\n##### 1.6.7 list 列表 \n长度可变\n```\na = [1, 2]\nprint(a[0])\n\nb = a  # 数组复制\nprint(b[0])\n```\n\n##### 1.6.8 Tuples 数组\n长度不变\n```\na = (1,2)\nprint(a[0])\n```\n\n##### 1.6.9 Dicts 字典\n可变键值对\n```\na = {'key1': [1, 'e', '2'], 'key2': 2}\nprint(a['key2'])\n```\n##### Slicing 切割\n```\na = [1, 2, 3, 4] 等价 a = range(0,4)\na[0]       # 1\na[-1]      # 等价于a[3]\n\n```\n\n##### 1.6.10 for & if  遍历和判断\n```\na = [1, 2, 3]\nfor i in a:\n    if i == 1:\n        print (\"i 是 1\")\n    elif i == 2:\n        print (\"i = %s\" % i)\n    else:\n        print (\"i is 3\")\n\n```\n##### 1.6.11 类初始化函数\n```\nclass Test():\n    def __init__(self):\n        print(\"you are a bad boy\")\n\nTest()\n```\n例子2：带参\nclass Test():\n    def __init__(self, arg1, arg2=2):\n        self.arg1 = arg1\n        self.__arg2 = arg2\n\nc1 = Test(1)\nc2 = Test(2, arg2=3)\n\n##### 1.6.12 Exception 异常处理\n```\ntry:\n    1/0\nexcept Exception as e:\n    print(\"1不能除以0\")\n    print(e)\n    print(\"pass is ignore your error\")\n    pass  \nfinally:\n    print(\"final\")\n```\n\n##### 1.6.13 lambda 匿名函数\n```\nfrom math import pi\n  \nf = lambda r: pi * r\nprint(f(2))\n```\n其中r表参数，f调用lambda函数\n\n例子2：\n```\nlambda x,y: return x**y \n```\n使用两个参数\n\n##### 1.6.14 boolean \n```\na = False\nb = True\n\na == b  # False\n```\n\n更多基础知识参考：https://thomas-cokelaer.info/tutorials/python/basics.html\n","source":"_posts/第30期：Python.md","raw":"---\ntitle: 第30期：Python\ndate: 2023-05-22 17:03:52\ntags:\n---\n##### 1.6.1 缩进\n错误：\n```\na = 1\n b = 2\n```\n\n正确：\n```\na = 1\nb = 1\n```\n\n##### 1.6.2 print 打印函数\n```\nprint(\"hello\")\n```\n\npython3 可以这么写:\n```\nprint \"Hello world\"\n```\n##### 1.6.3 数学运算\n```\na = 1\nb = 2\nsurface = a * b \n\na * b * b  等价于 a * b**2\n\n```\n##### 1.6.4 String\n3种表示方法\n```\nmessage = 'hello'\nmessage = \"hello\"\nmessage = \"\"\"hello world\"\"\"  or message = '''hello world'''   # 可以表示多行字符\n```\n\n##### 1.6.5 print(2)\na = \"world\"\nb = \"tony\"\nprint(\"hello %s\" % a)  # 打印hello world\nprint(\"hello %s and %s\" % (a,b))\n\n##### 1.6.6 module 模块\n```\n# 导入整个模块\nimport math     # 等价于导入整个文件(模块)，接着就可以用所有的变量和函数。\nmath.pi\n```\n\n```\n# 选择性地导入\nfrom math import pi\nsurface = pi * R**2\n```\n\n```\n# 导入所有\nfrom math import * # 这种导入可能会覆盖自定义的变量\n```\n##### 1.6.6 Function 函数\n```\nfrom math import pi\ndef compute_surface(radius, pi=math.pi):\n    return pi* radius * radius\n```\n##### 1.6.7 list 列表 \n长度可变\n```\na = [1, 2]\nprint(a[0])\n\nb = a  # 数组复制\nprint(b[0])\n```\n\n##### 1.6.8 Tuples 数组\n长度不变\n```\na = (1,2)\nprint(a[0])\n```\n\n##### 1.6.9 Dicts 字典\n可变键值对\n```\na = {'key1': [1, 'e', '2'], 'key2': 2}\nprint(a['key2'])\n```\n##### Slicing 切割\n```\na = [1, 2, 3, 4] 等价 a = range(0,4)\na[0]       # 1\na[-1]      # 等价于a[3]\n\n```\n\n##### 1.6.10 for & if  遍历和判断\n```\na = [1, 2, 3]\nfor i in a:\n    if i == 1:\n        print (\"i 是 1\")\n    elif i == 2:\n        print (\"i = %s\" % i)\n    else:\n        print (\"i is 3\")\n\n```\n##### 1.6.11 类初始化函数\n```\nclass Test():\n    def __init__(self):\n        print(\"you are a bad boy\")\n\nTest()\n```\n例子2：带参\nclass Test():\n    def __init__(self, arg1, arg2=2):\n        self.arg1 = arg1\n        self.__arg2 = arg2\n\nc1 = Test(1)\nc2 = Test(2, arg2=3)\n\n##### 1.6.12 Exception 异常处理\n```\ntry:\n    1/0\nexcept Exception as e:\n    print(\"1不能除以0\")\n    print(e)\n    print(\"pass is ignore your error\")\n    pass  \nfinally:\n    print(\"final\")\n```\n\n##### 1.6.13 lambda 匿名函数\n```\nfrom math import pi\n  \nf = lambda r: pi * r\nprint(f(2))\n```\n其中r表参数，f调用lambda函数\n\n例子2：\n```\nlambda x,y: return x**y \n```\n使用两个参数\n\n##### 1.6.14 boolean \n```\na = False\nb = True\n\na == b  # False\n```\n\n更多基础知识参考：https://thomas-cokelaer.info/tutorials/python/basics.html\n","slug":"第30期：Python","published":1,"updated":"2024-03-06T06:55:18.360Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt6t000k9klnecri6tjv","content":"<h5 id=\"1-6-1-缩进\"><a href=\"#1-6-1-缩进\" class=\"headerlink\" title=\"1.6.1 缩进\"></a>1.6.1 缩进</h5><p>错误：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = 1</span><br><span class=\"line\"> b = 2</span><br></pre></td></tr></table></figure>\n\n<p>正确：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = 1</span><br><span class=\"line\">b = 1</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-6-2-print-打印函数\"><a href=\"#1-6-2-print-打印函数\" class=\"headerlink\" title=\"1.6.2 print 打印函数\"></a>1.6.2 print 打印函数</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(&quot;hello&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>python3 可以这么写:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print &quot;Hello world&quot;</span><br></pre></td></tr></table></figure>\n<h5 id=\"1-6-3-数学运算\"><a href=\"#1-6-3-数学运算\" class=\"headerlink\" title=\"1.6.3 数学运算\"></a>1.6.3 数学运算</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = 1</span><br><span class=\"line\">b = 2</span><br><span class=\"line\">surface = a * b </span><br><span class=\"line\"></span><br><span class=\"line\">a * b * b  等价于 a * b**2</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"1-6-4-String\"><a href=\"#1-6-4-String\" class=\"headerlink\" title=\"1.6.4 String\"></a>1.6.4 String</h5><p>3种表示方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message = &#x27;hello&#x27;</span><br><span class=\"line\">message = &quot;hello&quot;</span><br><span class=\"line\">message = &quot;&quot;&quot;hello world&quot;&quot;&quot;  or message = &#x27;&#x27;&#x27;hello world&#x27;&#x27;&#x27;   # 可以表示多行字符</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-6-5-print-2\"><a href=\"#1-6-5-print-2\" class=\"headerlink\" title=\"1.6.5 print(2)\"></a>1.6.5 print(2)</h5><p>a &#x3D; “world”<br>b &#x3D; “tony”<br>print(“hello %s” % a)  # 打印hello world<br>print(“hello %s and %s” % (a,b))</p>\n<h5 id=\"1-6-6-module-模块\"><a href=\"#1-6-6-module-模块\" class=\"headerlink\" title=\"1.6.6 module 模块\"></a>1.6.6 module 模块</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 导入整个模块</span><br><span class=\"line\">import math     # 等价于导入整个文件(模块)，接着就可以用所有的变量和函数。</span><br><span class=\"line\">math.pi</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 选择性地导入</span><br><span class=\"line\">from math import pi</span><br><span class=\"line\">surface = pi * R**2</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 导入所有</span><br><span class=\"line\">from math import * # 这种导入可能会覆盖自定义的变量</span><br></pre></td></tr></table></figure>\n<h5 id=\"1-6-6-Function-函数\"><a href=\"#1-6-6-Function-函数\" class=\"headerlink\" title=\"1.6.6 Function 函数\"></a>1.6.6 Function 函数</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from math import pi</span><br><span class=\"line\">def compute_surface(radius, pi=math.pi):</span><br><span class=\"line\">    return pi* radius * radius</span><br></pre></td></tr></table></figure>\n<h5 id=\"1-6-7-list-列表\"><a href=\"#1-6-7-list-列表\" class=\"headerlink\" title=\"1.6.7 list 列表\"></a>1.6.7 list 列表</h5><p>长度可变</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [1, 2]</span><br><span class=\"line\">print(a[0])</span><br><span class=\"line\"></span><br><span class=\"line\">b = a  # 数组复制</span><br><span class=\"line\">print(b[0])</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-6-8-Tuples-数组\"><a href=\"#1-6-8-Tuples-数组\" class=\"headerlink\" title=\"1.6.8 Tuples 数组\"></a>1.6.8 Tuples 数组</h5><p>长度不变</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = (1,2)</span><br><span class=\"line\">print(a[0])</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-6-9-Dicts-字典\"><a href=\"#1-6-9-Dicts-字典\" class=\"headerlink\" title=\"1.6.9 Dicts 字典\"></a>1.6.9 Dicts 字典</h5><p>可变键值对</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = &#123;&#x27;key1&#x27;: [1, &#x27;e&#x27;, &#x27;2&#x27;], &#x27;key2&#x27;: 2&#125;</span><br><span class=\"line\">print(a[&#x27;key2&#x27;])</span><br></pre></td></tr></table></figure>\n<h5 id=\"Slicing-切割\"><a href=\"#Slicing-切割\" class=\"headerlink\" title=\"Slicing 切割\"></a>Slicing 切割</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [1, 2, 3, 4] 等价 a = range(0,4)</span><br><span class=\"line\">a[0]       # 1</span><br><span class=\"line\">a[-1]      # 等价于a[3]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-6-10-for-amp-if-遍历和判断\"><a href=\"#1-6-10-for-amp-if-遍历和判断\" class=\"headerlink\" title=\"1.6.10 for &amp; if  遍历和判断\"></a>1.6.10 for &amp; if  遍历和判断</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [1, 2, 3]</span><br><span class=\"line\">for i in a:</span><br><span class=\"line\">    if i == 1:</span><br><span class=\"line\">        print (&quot;i 是 1&quot;)</span><br><span class=\"line\">    elif i == 2:</span><br><span class=\"line\">        print (&quot;i = %s&quot; % i)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print (&quot;i is 3&quot;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"1-6-11-类初始化函数\"><a href=\"#1-6-11-类初始化函数\" class=\"headerlink\" title=\"1.6.11 类初始化函数\"></a>1.6.11 类初始化函数</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Test():</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        print(&quot;you are a bad boy&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">Test()</span><br></pre></td></tr></table></figure>\n<p>例子2：带参<br>class Test():<br>    def <strong>init</strong>(self, arg1, arg2&#x3D;2):<br>        self.arg1 &#x3D; arg1<br>        self.__arg2 &#x3D; arg2</p>\n<p>c1 &#x3D; Test(1)<br>c2 &#x3D; Test(2, arg2&#x3D;3)</p>\n<h5 id=\"1-6-12-Exception-异常处理\"><a href=\"#1-6-12-Exception-异常处理\" class=\"headerlink\" title=\"1.6.12 Exception 异常处理\"></a>1.6.12 Exception 异常处理</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try:</span><br><span class=\"line\">    1/0</span><br><span class=\"line\">except Exception as e:</span><br><span class=\"line\">    print(&quot;1不能除以0&quot;)</span><br><span class=\"line\">    print(e)</span><br><span class=\"line\">    print(&quot;pass is ignore your error&quot;)</span><br><span class=\"line\">    pass  </span><br><span class=\"line\">finally:</span><br><span class=\"line\">    print(&quot;final&quot;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-6-13-lambda-匿名函数\"><a href=\"#1-6-13-lambda-匿名函数\" class=\"headerlink\" title=\"1.6.13 lambda 匿名函数\"></a>1.6.13 lambda 匿名函数</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from math import pi</span><br><span class=\"line\">  </span><br><span class=\"line\">f = lambda r: pi * r</span><br><span class=\"line\">print(f(2))</span><br></pre></td></tr></table></figure>\n<p>其中r表参数，f调用lambda函数</p>\n<p>例子2：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lambda x,y: return x**y </span><br></pre></td></tr></table></figure>\n<p>使用两个参数</p>\n<h5 id=\"1-6-14-boolean\"><a href=\"#1-6-14-boolean\" class=\"headerlink\" title=\"1.6.14 boolean\"></a>1.6.14 boolean</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = False</span><br><span class=\"line\">b = True</span><br><span class=\"line\"></span><br><span class=\"line\">a == b  # False</span><br></pre></td></tr></table></figure>\n\n<p>更多基础知识参考：<a href=\"https://thomas-cokelaer.info/tutorials/python/basics.html\">https://thomas-cokelaer.info/tutorials/python/basics.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"1-6-1-缩进\"><a href=\"#1-6-1-缩进\" class=\"headerlink\" title=\"1.6.1 缩进\"></a>1.6.1 缩进</h5><p>错误：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = 1</span><br><span class=\"line\"> b = 2</span><br></pre></td></tr></table></figure>\n\n<p>正确：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = 1</span><br><span class=\"line\">b = 1</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-6-2-print-打印函数\"><a href=\"#1-6-2-print-打印函数\" class=\"headerlink\" title=\"1.6.2 print 打印函数\"></a>1.6.2 print 打印函数</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(&quot;hello&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>python3 可以这么写:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print &quot;Hello world&quot;</span><br></pre></td></tr></table></figure>\n<h5 id=\"1-6-3-数学运算\"><a href=\"#1-6-3-数学运算\" class=\"headerlink\" title=\"1.6.3 数学运算\"></a>1.6.3 数学运算</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = 1</span><br><span class=\"line\">b = 2</span><br><span class=\"line\">surface = a * b </span><br><span class=\"line\"></span><br><span class=\"line\">a * b * b  等价于 a * b**2</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"1-6-4-String\"><a href=\"#1-6-4-String\" class=\"headerlink\" title=\"1.6.4 String\"></a>1.6.4 String</h5><p>3种表示方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message = &#x27;hello&#x27;</span><br><span class=\"line\">message = &quot;hello&quot;</span><br><span class=\"line\">message = &quot;&quot;&quot;hello world&quot;&quot;&quot;  or message = &#x27;&#x27;&#x27;hello world&#x27;&#x27;&#x27;   # 可以表示多行字符</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-6-5-print-2\"><a href=\"#1-6-5-print-2\" class=\"headerlink\" title=\"1.6.5 print(2)\"></a>1.6.5 print(2)</h5><p>a &#x3D; “world”<br>b &#x3D; “tony”<br>print(“hello %s” % a)  # 打印hello world<br>print(“hello %s and %s” % (a,b))</p>\n<h5 id=\"1-6-6-module-模块\"><a href=\"#1-6-6-module-模块\" class=\"headerlink\" title=\"1.6.6 module 模块\"></a>1.6.6 module 模块</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 导入整个模块</span><br><span class=\"line\">import math     # 等价于导入整个文件(模块)，接着就可以用所有的变量和函数。</span><br><span class=\"line\">math.pi</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 选择性地导入</span><br><span class=\"line\">from math import pi</span><br><span class=\"line\">surface = pi * R**2</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 导入所有</span><br><span class=\"line\">from math import * # 这种导入可能会覆盖自定义的变量</span><br></pre></td></tr></table></figure>\n<h5 id=\"1-6-6-Function-函数\"><a href=\"#1-6-6-Function-函数\" class=\"headerlink\" title=\"1.6.6 Function 函数\"></a>1.6.6 Function 函数</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from math import pi</span><br><span class=\"line\">def compute_surface(radius, pi=math.pi):</span><br><span class=\"line\">    return pi* radius * radius</span><br></pre></td></tr></table></figure>\n<h5 id=\"1-6-7-list-列表\"><a href=\"#1-6-7-list-列表\" class=\"headerlink\" title=\"1.6.7 list 列表\"></a>1.6.7 list 列表</h5><p>长度可变</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [1, 2]</span><br><span class=\"line\">print(a[0])</span><br><span class=\"line\"></span><br><span class=\"line\">b = a  # 数组复制</span><br><span class=\"line\">print(b[0])</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-6-8-Tuples-数组\"><a href=\"#1-6-8-Tuples-数组\" class=\"headerlink\" title=\"1.6.8 Tuples 数组\"></a>1.6.8 Tuples 数组</h5><p>长度不变</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = (1,2)</span><br><span class=\"line\">print(a[0])</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-6-9-Dicts-字典\"><a href=\"#1-6-9-Dicts-字典\" class=\"headerlink\" title=\"1.6.9 Dicts 字典\"></a>1.6.9 Dicts 字典</h5><p>可变键值对</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = &#123;&#x27;key1&#x27;: [1, &#x27;e&#x27;, &#x27;2&#x27;], &#x27;key2&#x27;: 2&#125;</span><br><span class=\"line\">print(a[&#x27;key2&#x27;])</span><br></pre></td></tr></table></figure>\n<h5 id=\"Slicing-切割\"><a href=\"#Slicing-切割\" class=\"headerlink\" title=\"Slicing 切割\"></a>Slicing 切割</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [1, 2, 3, 4] 等价 a = range(0,4)</span><br><span class=\"line\">a[0]       # 1</span><br><span class=\"line\">a[-1]      # 等价于a[3]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-6-10-for-amp-if-遍历和判断\"><a href=\"#1-6-10-for-amp-if-遍历和判断\" class=\"headerlink\" title=\"1.6.10 for &amp; if  遍历和判断\"></a>1.6.10 for &amp; if  遍历和判断</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [1, 2, 3]</span><br><span class=\"line\">for i in a:</span><br><span class=\"line\">    if i == 1:</span><br><span class=\"line\">        print (&quot;i 是 1&quot;)</span><br><span class=\"line\">    elif i == 2:</span><br><span class=\"line\">        print (&quot;i = %s&quot; % i)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print (&quot;i is 3&quot;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"1-6-11-类初始化函数\"><a href=\"#1-6-11-类初始化函数\" class=\"headerlink\" title=\"1.6.11 类初始化函数\"></a>1.6.11 类初始化函数</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Test():</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        print(&quot;you are a bad boy&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">Test()</span><br></pre></td></tr></table></figure>\n<p>例子2：带参<br>class Test():<br>    def <strong>init</strong>(self, arg1, arg2&#x3D;2):<br>        self.arg1 &#x3D; arg1<br>        self.__arg2 &#x3D; arg2</p>\n<p>c1 &#x3D; Test(1)<br>c2 &#x3D; Test(2, arg2&#x3D;3)</p>\n<h5 id=\"1-6-12-Exception-异常处理\"><a href=\"#1-6-12-Exception-异常处理\" class=\"headerlink\" title=\"1.6.12 Exception 异常处理\"></a>1.6.12 Exception 异常处理</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try:</span><br><span class=\"line\">    1/0</span><br><span class=\"line\">except Exception as e:</span><br><span class=\"line\">    print(&quot;1不能除以0&quot;)</span><br><span class=\"line\">    print(e)</span><br><span class=\"line\">    print(&quot;pass is ignore your error&quot;)</span><br><span class=\"line\">    pass  </span><br><span class=\"line\">finally:</span><br><span class=\"line\">    print(&quot;final&quot;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-6-13-lambda-匿名函数\"><a href=\"#1-6-13-lambda-匿名函数\" class=\"headerlink\" title=\"1.6.13 lambda 匿名函数\"></a>1.6.13 lambda 匿名函数</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from math import pi</span><br><span class=\"line\">  </span><br><span class=\"line\">f = lambda r: pi * r</span><br><span class=\"line\">print(f(2))</span><br></pre></td></tr></table></figure>\n<p>其中r表参数，f调用lambda函数</p>\n<p>例子2：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lambda x,y: return x**y </span><br></pre></td></tr></table></figure>\n<p>使用两个参数</p>\n<h5 id=\"1-6-14-boolean\"><a href=\"#1-6-14-boolean\" class=\"headerlink\" title=\"1.6.14 boolean\"></a>1.6.14 boolean</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = False</span><br><span class=\"line\">b = True</span><br><span class=\"line\"></span><br><span class=\"line\">a == b  # False</span><br></pre></td></tr></table></figure>\n\n<p>更多基础知识参考：<a href=\"https://thomas-cokelaer.info/tutorials/python/basics.html\">https://thomas-cokelaer.info/tutorials/python/basics.html</a></p>\n"},{"title":"第31期：Golang","date":"2023-05-22T09:13:36.000Z","_content":"#### 源码安装\n环境：centos7\n\n```\ncd /opt/go\n\nwget https://storage.googleapis.com/golang/go1.18.3.linux-amd64.tar.gz\n\ntar -xzvf go1.18.3.linux-amd64.tar.gz\n\n# 编辑 /etc/profile，添加：\nexport PATH=$PATH:/opt/go/go/bin\n\n保存退出，执行 source /etc/profile\n\ngo version \n```\n\n#### 使用\n```\ncd /opt/go-demo\n\n# vi hello.go\n\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n  fmt.Println(\"hello world\");\n}\n\n执行: go run hello.go // hello world\n\n# := 的用法：左边有一个新变量，且变量不加var\nvar i = 5;\nt := i;\n\n# 标识符\n命名变量名称\n- 不能以数字开头\n\n# 包别名\nimport(\n    ff \"fmt\"\n)\n\nff.Println();\n\n# 布尔值\nvar b bool\nb = true\n\n# 整型\nvar i,j int\nvar i init8 // 8位整型\n\n# 数组\nvar arr [10]int\n\n# 结构类型 struct\n\ntype s struct {\n    X int\n    Y int\n}\n\n# 字符串\nvar s string = \"go\"\n\n# 函数类型\n\n```\n参考：https://github.com/jaywcjlove/golang-tutorial#%E5%AE%89%E8%A3%85go\n#### 基础知识\n#### 变量创建的5种方式\n方式一：\n一行声明一个变量。\n```\n# 这种方式会隐式初始化。如string为空字符串，int为0，float为0.0，bool为false。\nvar <name> <type>，当然可以声明后初始化。\n如：var a string = \"helloworld\"\n```\n说明：helloworld一定要双引号，表示字符串，单引号上rune类型。\n\n方式二：\n同时声明多个变量。\n```\nvar (\n  name string\n  age int\n  gender string\n)\n```\n\n方式三：\n推导声明\n```\n# 编译器根据右值类型推导出左边类型。限制：这种方式只能用于函数内部。\nname := \"helloworld\" \n```\n方式四：\n声明和初始化多个变量。\n```\nname, age := \"ricky\", 11\n```\n\n方式五：\nnew(类型)函数，返回指针类型。变量分为普通变量(数据本身)和指针变量(数据内存地址，通过*接指针变量表示从内存地址取值) \n```\nage := new(int)\n```\n\n#### 整数类型\n共有16种，u开头的是无符号，没有负数。\n\nint8 代表8bit，能表示-128～127之间的数字。\n\n#### 数组\nhttps://golang.iswbm.com/c01/c01_05.html\n\n参考：https://golang.iswbm.com/c01/c01_02.html\n\n### Go命令解释\n- `go build` 编译源码文件以及它们的依赖包\n比如，在`go build`后面不加任何代码文件，它将试图编译当前目录下对应的main.go。Windows系统会生成相应的.exe可执行文件。\n- `go build -o main main.go` 指定编译后的可执行包名称为main\n- `go env` 打印go语言环境变量\n\n说明：\n```\n- GOBIN // 存放可执行文件的目录的绝对路径。\n- GOARCH // 执行环境计算架构\n- GOEXE // 可执行文件后缀\n- GOHOSTOS // 执行环境操作系统\n- GOPATH // 工作区目录的绝对路径。我们需要显式的设置环境变量GOPATH。如果有多个工作区，那么多个工作区的绝对路径之间需要用分隔符分隔。在windows操作系统下，这个分隔符为“;”。在其它操作系统下，这个分隔符为“:”。注意，GOPATH的值不能与GOROOT的值相同。\n\n- GOROOT // Go语言的安装目录的绝对路径。GOROOT会是我们在安装Go语言时第一个碰到Go语言环境变量。它的值指明了Go语言的安装目录的绝对路径。但是，只有在非默认情况下我们才需要显式的设置环境变量GOROOT。这里所说的默认情况是指：在Windows操作系统下我们把Go语言安装到c:\\Go目录下，或者在其它操作系统下我们把Go语言安装到/usr/local/go目录下。另外，当我们不是通过二进制分发包来安装Go语言的时候，也不需要设置环境变量GOROOT的值。比如，在Windows操作系统下，我们可以使用MSI软件包文件来安装Go语言\n```\n- `go install` 编译和安装文件及其依赖包，一定程度上等价于`go build`，但 `go install`可以指定编译后可执行文件的位置。\n\n- `go get` 安装指定依赖。如 `go get -u github.com/chromedp/chromedp`。`-u`表示只会从网络上下载本地不存在的代码包，而不会更新已有的代码包。\n\n- `go run` 编译和运行源码文件，不需要生成可执行文件即可执行。如`go run main.go`\n","source":"_posts/第31期：Golang.md","raw":"---\ntitle: 第31期：Golang\ndate: 2023-05-22 17:13:36\ntags:\n---\n#### 源码安装\n环境：centos7\n\n```\ncd /opt/go\n\nwget https://storage.googleapis.com/golang/go1.18.3.linux-amd64.tar.gz\n\ntar -xzvf go1.18.3.linux-amd64.tar.gz\n\n# 编辑 /etc/profile，添加：\nexport PATH=$PATH:/opt/go/go/bin\n\n保存退出，执行 source /etc/profile\n\ngo version \n```\n\n#### 使用\n```\ncd /opt/go-demo\n\n# vi hello.go\n\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n  fmt.Println(\"hello world\");\n}\n\n执行: go run hello.go // hello world\n\n# := 的用法：左边有一个新变量，且变量不加var\nvar i = 5;\nt := i;\n\n# 标识符\n命名变量名称\n- 不能以数字开头\n\n# 包别名\nimport(\n    ff \"fmt\"\n)\n\nff.Println();\n\n# 布尔值\nvar b bool\nb = true\n\n# 整型\nvar i,j int\nvar i init8 // 8位整型\n\n# 数组\nvar arr [10]int\n\n# 结构类型 struct\n\ntype s struct {\n    X int\n    Y int\n}\n\n# 字符串\nvar s string = \"go\"\n\n# 函数类型\n\n```\n参考：https://github.com/jaywcjlove/golang-tutorial#%E5%AE%89%E8%A3%85go\n#### 基础知识\n#### 变量创建的5种方式\n方式一：\n一行声明一个变量。\n```\n# 这种方式会隐式初始化。如string为空字符串，int为0，float为0.0，bool为false。\nvar <name> <type>，当然可以声明后初始化。\n如：var a string = \"helloworld\"\n```\n说明：helloworld一定要双引号，表示字符串，单引号上rune类型。\n\n方式二：\n同时声明多个变量。\n```\nvar (\n  name string\n  age int\n  gender string\n)\n```\n\n方式三：\n推导声明\n```\n# 编译器根据右值类型推导出左边类型。限制：这种方式只能用于函数内部。\nname := \"helloworld\" \n```\n方式四：\n声明和初始化多个变量。\n```\nname, age := \"ricky\", 11\n```\n\n方式五：\nnew(类型)函数，返回指针类型。变量分为普通变量(数据本身)和指针变量(数据内存地址，通过*接指针变量表示从内存地址取值) \n```\nage := new(int)\n```\n\n#### 整数类型\n共有16种，u开头的是无符号，没有负数。\n\nint8 代表8bit，能表示-128～127之间的数字。\n\n#### 数组\nhttps://golang.iswbm.com/c01/c01_05.html\n\n参考：https://golang.iswbm.com/c01/c01_02.html\n\n### Go命令解释\n- `go build` 编译源码文件以及它们的依赖包\n比如，在`go build`后面不加任何代码文件，它将试图编译当前目录下对应的main.go。Windows系统会生成相应的.exe可执行文件。\n- `go build -o main main.go` 指定编译后的可执行包名称为main\n- `go env` 打印go语言环境变量\n\n说明：\n```\n- GOBIN // 存放可执行文件的目录的绝对路径。\n- GOARCH // 执行环境计算架构\n- GOEXE // 可执行文件后缀\n- GOHOSTOS // 执行环境操作系统\n- GOPATH // 工作区目录的绝对路径。我们需要显式的设置环境变量GOPATH。如果有多个工作区，那么多个工作区的绝对路径之间需要用分隔符分隔。在windows操作系统下，这个分隔符为“;”。在其它操作系统下，这个分隔符为“:”。注意，GOPATH的值不能与GOROOT的值相同。\n\n- GOROOT // Go语言的安装目录的绝对路径。GOROOT会是我们在安装Go语言时第一个碰到Go语言环境变量。它的值指明了Go语言的安装目录的绝对路径。但是，只有在非默认情况下我们才需要显式的设置环境变量GOROOT。这里所说的默认情况是指：在Windows操作系统下我们把Go语言安装到c:\\Go目录下，或者在其它操作系统下我们把Go语言安装到/usr/local/go目录下。另外，当我们不是通过二进制分发包来安装Go语言的时候，也不需要设置环境变量GOROOT的值。比如，在Windows操作系统下，我们可以使用MSI软件包文件来安装Go语言\n```\n- `go install` 编译和安装文件及其依赖包，一定程度上等价于`go build`，但 `go install`可以指定编译后可执行文件的位置。\n\n- `go get` 安装指定依赖。如 `go get -u github.com/chromedp/chromedp`。`-u`表示只会从网络上下载本地不存在的代码包，而不会更新已有的代码包。\n\n- `go run` 编译和运行源码文件，不需要生成可执行文件即可执行。如`go run main.go`\n","slug":"第31期：Golang","published":1,"updated":"2024-03-06T06:55:18.360Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt6v000l9kln93hs8ul1","content":"<h4 id=\"源码安装\"><a href=\"#源码安装\" class=\"headerlink\" title=\"源码安装\"></a>源码安装</h4><p>环境：centos7</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/go</span><br><span class=\"line\"></span><br><span class=\"line\">wget https://storage.googleapis.com/golang/go1.18.3.linux-amd64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">tar -xzvf go1.18.3.linux-amd64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"># 编辑 /etc/profile，添加：</span><br><span class=\"line\">export PATH=$PATH:/opt/go/go/bin</span><br><span class=\"line\"></span><br><span class=\"line\">保存退出，执行 source /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">go version </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/go-demo</span><br><span class=\"line\"></span><br><span class=\"line\"># vi hello.go</span><br><span class=\"line\"></span><br><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">  fmt.Println(&quot;hello world&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">执行: go run hello.go // hello world</span><br><span class=\"line\"></span><br><span class=\"line\"># := 的用法：左边有一个新变量，且变量不加var</span><br><span class=\"line\">var i = 5;</span><br><span class=\"line\">t := i;</span><br><span class=\"line\"></span><br><span class=\"line\"># 标识符</span><br><span class=\"line\">命名变量名称</span><br><span class=\"line\">- 不能以数字开头</span><br><span class=\"line\"></span><br><span class=\"line\"># 包别名</span><br><span class=\"line\">import(</span><br><span class=\"line\">    ff &quot;fmt&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">ff.Println();</span><br><span class=\"line\"></span><br><span class=\"line\"># 布尔值</span><br><span class=\"line\">var b bool</span><br><span class=\"line\">b = true</span><br><span class=\"line\"></span><br><span class=\"line\"># 整型</span><br><span class=\"line\">var i,j int</span><br><span class=\"line\">var i init8 // 8位整型</span><br><span class=\"line\"></span><br><span class=\"line\"># 数组</span><br><span class=\"line\">var arr [10]int</span><br><span class=\"line\"></span><br><span class=\"line\"># 结构类型 struct</span><br><span class=\"line\"></span><br><span class=\"line\">type s struct &#123;</span><br><span class=\"line\">    X int</span><br><span class=\"line\">    Y int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 字符串</span><br><span class=\"line\">var s string = &quot;go&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 函数类型</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://github.com/jaywcjlove/golang-tutorial#%E5%AE%89%E8%A3%85go\">https://github.com/jaywcjlove/golang-tutorial#%E5%AE%89%E8%A3%85go</a></p>\n<h4 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h4><h4 id=\"变量创建的5种方式\"><a href=\"#变量创建的5种方式\" class=\"headerlink\" title=\"变量创建的5种方式\"></a>变量创建的5种方式</h4><p>方式一：<br>一行声明一个变量。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 这种方式会隐式初始化。如string为空字符串，int为0，float为0.0，bool为false。</span><br><span class=\"line\">var &lt;name&gt; &lt;type&gt;，当然可以声明后初始化。</span><br><span class=\"line\">如：var a string = &quot;helloworld&quot;</span><br></pre></td></tr></table></figure>\n<p>说明：helloworld一定要双引号，表示字符串，单引号上rune类型。</p>\n<p>方式二：<br>同时声明多个变量。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var (</span><br><span class=\"line\">  name string</span><br><span class=\"line\">  age int</span><br><span class=\"line\">  gender string</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>方式三：<br>推导声明</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 编译器根据右值类型推导出左边类型。限制：这种方式只能用于函数内部。</span><br><span class=\"line\">name := &quot;helloworld&quot; </span><br></pre></td></tr></table></figure>\n<p>方式四：<br>声明和初始化多个变量。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name, age := &quot;ricky&quot;, 11</span><br></pre></td></tr></table></figure>\n\n<p>方式五：<br>new(类型)函数，返回指针类型。变量分为普通变量(数据本身)和指针变量(数据内存地址，通过*接指针变量表示从内存地址取值) </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age := new(int)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"整数类型\"><a href=\"#整数类型\" class=\"headerlink\" title=\"整数类型\"></a>整数类型</h4><p>共有16种，u开头的是无符号，没有负数。</p>\n<p>int8 代表8bit，能表示-128～127之间的数字。</p>\n<h4 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h4><p><a href=\"https://golang.iswbm.com/c01/c01_05.html\">https://golang.iswbm.com/c01/c01_05.html</a></p>\n<p>参考：<a href=\"https://golang.iswbm.com/c01/c01_02.html\">https://golang.iswbm.com/c01/c01_02.html</a></p>\n<h3 id=\"Go命令解释\"><a href=\"#Go命令解释\" class=\"headerlink\" title=\"Go命令解释\"></a>Go命令解释</h3><ul>\n<li><code>go build</code> 编译源码文件以及它们的依赖包<br>比如，在<code>go build</code>后面不加任何代码文件，它将试图编译当前目录下对应的main.go。Windows系统会生成相应的.exe可执行文件。</li>\n<li><code>go build -o main main.go</code> 指定编译后的可执行包名称为main</li>\n<li><code>go env</code> 打印go语言环境变量</li>\n</ul>\n<p>说明：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- GOBIN // 存放可执行文件的目录的绝对路径。</span><br><span class=\"line\">- GOARCH // 执行环境计算架构</span><br><span class=\"line\">- GOEXE // 可执行文件后缀</span><br><span class=\"line\">- GOHOSTOS // 执行环境操作系统</span><br><span class=\"line\">- GOPATH // 工作区目录的绝对路径。我们需要显式的设置环境变量GOPATH。如果有多个工作区，那么多个工作区的绝对路径之间需要用分隔符分隔。在windows操作系统下，这个分隔符为“;”。在其它操作系统下，这个分隔符为“:”。注意，GOPATH的值不能与GOROOT的值相同。</span><br><span class=\"line\"></span><br><span class=\"line\">- GOROOT // Go语言的安装目录的绝对路径。GOROOT会是我们在安装Go语言时第一个碰到Go语言环境变量。它的值指明了Go语言的安装目录的绝对路径。但是，只有在非默认情况下我们才需要显式的设置环境变量GOROOT。这里所说的默认情况是指：在Windows操作系统下我们把Go语言安装到c:\\Go目录下，或者在其它操作系统下我们把Go语言安装到/usr/local/go目录下。另外，当我们不是通过二进制分发包来安装Go语言的时候，也不需要设置环境变量GOROOT的值。比如，在Windows操作系统下，我们可以使用MSI软件包文件来安装Go语言</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>go install</code> 编译和安装文件及其依赖包，一定程度上等价于<code>go build</code>，但 <code>go install</code>可以指定编译后可执行文件的位置。</p>\n</li>\n<li><p><code>go get</code> 安装指定依赖。如 <code>go get -u github.com/chromedp/chromedp</code>。<code>-u</code>表示只会从网络上下载本地不存在的代码包，而不会更新已有的代码包。</p>\n</li>\n<li><p><code>go run</code> 编译和运行源码文件，不需要生成可执行文件即可执行。如<code>go run main.go</code></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"源码安装\"><a href=\"#源码安装\" class=\"headerlink\" title=\"源码安装\"></a>源码安装</h4><p>环境：centos7</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/go</span><br><span class=\"line\"></span><br><span class=\"line\">wget https://storage.googleapis.com/golang/go1.18.3.linux-amd64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">tar -xzvf go1.18.3.linux-amd64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"># 编辑 /etc/profile，添加：</span><br><span class=\"line\">export PATH=$PATH:/opt/go/go/bin</span><br><span class=\"line\"></span><br><span class=\"line\">保存退出，执行 source /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">go version </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/go-demo</span><br><span class=\"line\"></span><br><span class=\"line\"># vi hello.go</span><br><span class=\"line\"></span><br><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">  fmt.Println(&quot;hello world&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">执行: go run hello.go // hello world</span><br><span class=\"line\"></span><br><span class=\"line\"># := 的用法：左边有一个新变量，且变量不加var</span><br><span class=\"line\">var i = 5;</span><br><span class=\"line\">t := i;</span><br><span class=\"line\"></span><br><span class=\"line\"># 标识符</span><br><span class=\"line\">命名变量名称</span><br><span class=\"line\">- 不能以数字开头</span><br><span class=\"line\"></span><br><span class=\"line\"># 包别名</span><br><span class=\"line\">import(</span><br><span class=\"line\">    ff &quot;fmt&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">ff.Println();</span><br><span class=\"line\"></span><br><span class=\"line\"># 布尔值</span><br><span class=\"line\">var b bool</span><br><span class=\"line\">b = true</span><br><span class=\"line\"></span><br><span class=\"line\"># 整型</span><br><span class=\"line\">var i,j int</span><br><span class=\"line\">var i init8 // 8位整型</span><br><span class=\"line\"></span><br><span class=\"line\"># 数组</span><br><span class=\"line\">var arr [10]int</span><br><span class=\"line\"></span><br><span class=\"line\"># 结构类型 struct</span><br><span class=\"line\"></span><br><span class=\"line\">type s struct &#123;</span><br><span class=\"line\">    X int</span><br><span class=\"line\">    Y int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 字符串</span><br><span class=\"line\">var s string = &quot;go&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 函数类型</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://github.com/jaywcjlove/golang-tutorial#%E5%AE%89%E8%A3%85go\">https://github.com/jaywcjlove/golang-tutorial#%E5%AE%89%E8%A3%85go</a></p>\n<h4 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h4><h4 id=\"变量创建的5种方式\"><a href=\"#变量创建的5种方式\" class=\"headerlink\" title=\"变量创建的5种方式\"></a>变量创建的5种方式</h4><p>方式一：<br>一行声明一个变量。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 这种方式会隐式初始化。如string为空字符串，int为0，float为0.0，bool为false。</span><br><span class=\"line\">var &lt;name&gt; &lt;type&gt;，当然可以声明后初始化。</span><br><span class=\"line\">如：var a string = &quot;helloworld&quot;</span><br></pre></td></tr></table></figure>\n<p>说明：helloworld一定要双引号，表示字符串，单引号上rune类型。</p>\n<p>方式二：<br>同时声明多个变量。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var (</span><br><span class=\"line\">  name string</span><br><span class=\"line\">  age int</span><br><span class=\"line\">  gender string</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>方式三：<br>推导声明</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 编译器根据右值类型推导出左边类型。限制：这种方式只能用于函数内部。</span><br><span class=\"line\">name := &quot;helloworld&quot; </span><br></pre></td></tr></table></figure>\n<p>方式四：<br>声明和初始化多个变量。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name, age := &quot;ricky&quot;, 11</span><br></pre></td></tr></table></figure>\n\n<p>方式五：<br>new(类型)函数，返回指针类型。变量分为普通变量(数据本身)和指针变量(数据内存地址，通过*接指针变量表示从内存地址取值) </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age := new(int)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"整数类型\"><a href=\"#整数类型\" class=\"headerlink\" title=\"整数类型\"></a>整数类型</h4><p>共有16种，u开头的是无符号，没有负数。</p>\n<p>int8 代表8bit，能表示-128～127之间的数字。</p>\n<h4 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h4><p><a href=\"https://golang.iswbm.com/c01/c01_05.html\">https://golang.iswbm.com/c01/c01_05.html</a></p>\n<p>参考：<a href=\"https://golang.iswbm.com/c01/c01_02.html\">https://golang.iswbm.com/c01/c01_02.html</a></p>\n<h3 id=\"Go命令解释\"><a href=\"#Go命令解释\" class=\"headerlink\" title=\"Go命令解释\"></a>Go命令解释</h3><ul>\n<li><code>go build</code> 编译源码文件以及它们的依赖包<br>比如，在<code>go build</code>后面不加任何代码文件，它将试图编译当前目录下对应的main.go。Windows系统会生成相应的.exe可执行文件。</li>\n<li><code>go build -o main main.go</code> 指定编译后的可执行包名称为main</li>\n<li><code>go env</code> 打印go语言环境变量</li>\n</ul>\n<p>说明：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- GOBIN // 存放可执行文件的目录的绝对路径。</span><br><span class=\"line\">- GOARCH // 执行环境计算架构</span><br><span class=\"line\">- GOEXE // 可执行文件后缀</span><br><span class=\"line\">- GOHOSTOS // 执行环境操作系统</span><br><span class=\"line\">- GOPATH // 工作区目录的绝对路径。我们需要显式的设置环境变量GOPATH。如果有多个工作区，那么多个工作区的绝对路径之间需要用分隔符分隔。在windows操作系统下，这个分隔符为“;”。在其它操作系统下，这个分隔符为“:”。注意，GOPATH的值不能与GOROOT的值相同。</span><br><span class=\"line\"></span><br><span class=\"line\">- GOROOT // Go语言的安装目录的绝对路径。GOROOT会是我们在安装Go语言时第一个碰到Go语言环境变量。它的值指明了Go语言的安装目录的绝对路径。但是，只有在非默认情况下我们才需要显式的设置环境变量GOROOT。这里所说的默认情况是指：在Windows操作系统下我们把Go语言安装到c:\\Go目录下，或者在其它操作系统下我们把Go语言安装到/usr/local/go目录下。另外，当我们不是通过二进制分发包来安装Go语言的时候，也不需要设置环境变量GOROOT的值。比如，在Windows操作系统下，我们可以使用MSI软件包文件来安装Go语言</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>go install</code> 编译和安装文件及其依赖包，一定程度上等价于<code>go build</code>，但 <code>go install</code>可以指定编译后可执行文件的位置。</p>\n</li>\n<li><p><code>go get</code> 安装指定依赖。如 <code>go get -u github.com/chromedp/chromedp</code>。<code>-u</code>表示只会从网络上下载本地不存在的代码包，而不会更新已有的代码包。</p>\n</li>\n<li><p><code>go run</code> 编译和运行源码文件，不需要生成可执行文件即可执行。如<code>go run main.go</code></p>\n</li>\n</ul>\n"},{"title":"第32期：Java","date":"2023-05-22T09:14:55.000Z","_content":"#### 安装\n环境: centos7\n\nOpenJDK1.8下载地址：https://jdk.java.net/java-se-ri/8-MR3\n\nOpenJDK9以上版本下载地址：http://jdk.java.net/archive/\n\n安装JDK8\n```\ncd /opt/java\n\nwget https://download.java.net/openjdk/jdk8u42/ri/openjdk-8u42-b03-linux-x64-14_jul_2022.tar.gz\n\ntar -xzvf openjdk-8u42-b03-linux-x64-14_jul_2022.tar.gz\n\nmv java-se-8u42-ri  java8\n\n# vi /etc/profile\n\nexport JAVA_HOME=\"/opt/java/java8\"\nexport JRE_HOME=\"/opt/java/java8/jre\"\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH\nexport PATH=$JAVA_HOME/bin/:$PATH\n\nsource /etc/profile\n\njava -version\n```\n参考：https://blog.csdn.net/zxbfriend/article/details/117842392\n\n#### 使用\n```\ncd /opt/java-demo\nvi HelloWorld.java\n\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}\n\njavac HelloWorld.java # 编译生成.class\njava HelloWorld # 执行\n```\n","source":"_posts/第32期：Java.md","raw":"---\ntitle: 第32期：Java\ndate: 2023-05-22 17:14:55\ntags:\n---\n#### 安装\n环境: centos7\n\nOpenJDK1.8下载地址：https://jdk.java.net/java-se-ri/8-MR3\n\nOpenJDK9以上版本下载地址：http://jdk.java.net/archive/\n\n安装JDK8\n```\ncd /opt/java\n\nwget https://download.java.net/openjdk/jdk8u42/ri/openjdk-8u42-b03-linux-x64-14_jul_2022.tar.gz\n\ntar -xzvf openjdk-8u42-b03-linux-x64-14_jul_2022.tar.gz\n\nmv java-se-8u42-ri  java8\n\n# vi /etc/profile\n\nexport JAVA_HOME=\"/opt/java/java8\"\nexport JRE_HOME=\"/opt/java/java8/jre\"\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH\nexport PATH=$JAVA_HOME/bin/:$PATH\n\nsource /etc/profile\n\njava -version\n```\n参考：https://blog.csdn.net/zxbfriend/article/details/117842392\n\n#### 使用\n```\ncd /opt/java-demo\nvi HelloWorld.java\n\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}\n\njavac HelloWorld.java # 编译生成.class\njava HelloWorld # 执行\n```\n","slug":"第32期：Java","published":1,"updated":"2024-03-06T06:55:18.361Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt6w000m9klna7vdenkx","content":"<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>环境: centos7</p>\n<p>OpenJDK1.8下载地址：<a href=\"https://jdk.java.net/java-se-ri/8-MR3\">https://jdk.java.net/java-se-ri/8-MR3</a></p>\n<p>OpenJDK9以上版本下载地址：<a href=\"http://jdk.java.net/archive/\">http://jdk.java.net/archive/</a></p>\n<p>安装JDK8</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/java</span><br><span class=\"line\"></span><br><span class=\"line\">wget https://download.java.net/openjdk/jdk8u42/ri/openjdk-8u42-b03-linux-x64-14_jul_2022.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">tar -xzvf openjdk-8u42-b03-linux-x64-14_jul_2022.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">mv java-se-8u42-ri  java8</span><br><span class=\"line\"></span><br><span class=\"line\"># vi /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">export JAVA_HOME=&quot;/opt/java/java8&quot;</span><br><span class=\"line\">export JRE_HOME=&quot;/opt/java/java8/jre&quot;</span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin/:$PATH</span><br><span class=\"line\"></span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://blog.csdn.net/zxbfriend/article/details/117842392\">https://blog.csdn.net/zxbfriend/article/details/117842392</a></p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/java-demo</span><br><span class=\"line\">vi HelloWorld.java</span><br><span class=\"line\"></span><br><span class=\"line\">public class HelloWorld &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        System.out.println(&quot;Hello World&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">javac HelloWorld.java # 编译生成.class</span><br><span class=\"line\">java HelloWorld # 执行</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>环境: centos7</p>\n<p>OpenJDK1.8下载地址：<a href=\"https://jdk.java.net/java-se-ri/8-MR3\">https://jdk.java.net/java-se-ri/8-MR3</a></p>\n<p>OpenJDK9以上版本下载地址：<a href=\"http://jdk.java.net/archive/\">http://jdk.java.net/archive/</a></p>\n<p>安装JDK8</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/java</span><br><span class=\"line\"></span><br><span class=\"line\">wget https://download.java.net/openjdk/jdk8u42/ri/openjdk-8u42-b03-linux-x64-14_jul_2022.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">tar -xzvf openjdk-8u42-b03-linux-x64-14_jul_2022.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">mv java-se-8u42-ri  java8</span><br><span class=\"line\"></span><br><span class=\"line\"># vi /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">export JAVA_HOME=&quot;/opt/java/java8&quot;</span><br><span class=\"line\">export JRE_HOME=&quot;/opt/java/java8/jre&quot;</span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin/:$PATH</span><br><span class=\"line\"></span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://blog.csdn.net/zxbfriend/article/details/117842392\">https://blog.csdn.net/zxbfriend/article/details/117842392</a></p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/java-demo</span><br><span class=\"line\">vi HelloWorld.java</span><br><span class=\"line\"></span><br><span class=\"line\">public class HelloWorld &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        System.out.println(&quot;Hello World&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">javac HelloWorld.java # 编译生成.class</span><br><span class=\"line\">java HelloWorld # 执行</span><br></pre></td></tr></table></figure>\n"},{"title":"第33期：工具集","date":"2023-05-22T09:17:37.000Z","_content":"```\n# redis桌面工具\nhttps://github.com/qishibo/AnotherRedisDesktopManager\n\n# termius\nAppStore搜索`termius`，用于macos，功能上类似xshell加xftp，可以传文件和ssh连接。\n\n# 笔画图工具\nLorien\n\n# 开发工具箱\nDevToys  # 支持Base64加解密、URL格式转化，github搜素\n\n# rufus\nu盘制作成操作系统盘\n```\n","source":"_posts/第33期：工具集.md","raw":"---\ntitle: 第33期：工具集\ndate: 2023-05-22 17:17:37\ntags:\n---\n```\n# redis桌面工具\nhttps://github.com/qishibo/AnotherRedisDesktopManager\n\n# termius\nAppStore搜索`termius`，用于macos，功能上类似xshell加xftp，可以传文件和ssh连接。\n\n# 笔画图工具\nLorien\n\n# 开发工具箱\nDevToys  # 支持Base64加解密、URL格式转化，github搜素\n\n# rufus\nu盘制作成操作系统盘\n```\n","slug":"第33期：工具集","published":1,"updated":"2024-03-06T06:55:18.361Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt6x000n9klngg48gtu8","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># redis桌面工具</span><br><span class=\"line\">https://github.com/qishibo/AnotherRedisDesktopManager</span><br><span class=\"line\"></span><br><span class=\"line\"># termius</span><br><span class=\"line\">AppStore搜索`termius`，用于macos，功能上类似xshell加xftp，可以传文件和ssh连接。</span><br><span class=\"line\"></span><br><span class=\"line\"># 笔画图工具</span><br><span class=\"line\">Lorien</span><br><span class=\"line\"></span><br><span class=\"line\"># 开发工具箱</span><br><span class=\"line\">DevToys  # 支持Base64加解密、URL格式转化，github搜素</span><br><span class=\"line\"></span><br><span class=\"line\"># rufus</span><br><span class=\"line\">u盘制作成操作系统盘</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># redis桌面工具</span><br><span class=\"line\">https://github.com/qishibo/AnotherRedisDesktopManager</span><br><span class=\"line\"></span><br><span class=\"line\"># termius</span><br><span class=\"line\">AppStore搜索`termius`，用于macos，功能上类似xshell加xftp，可以传文件和ssh连接。</span><br><span class=\"line\"></span><br><span class=\"line\"># 笔画图工具</span><br><span class=\"line\">Lorien</span><br><span class=\"line\"></span><br><span class=\"line\"># 开发工具箱</span><br><span class=\"line\">DevToys  # 支持Base64加解密、URL格式转化，github搜素</span><br><span class=\"line\"></span><br><span class=\"line\"># rufus</span><br><span class=\"line\">u盘制作成操作系统盘</span><br></pre></td></tr></table></figure>\n"},{"title":"第34期：LVM","date":"2023-05-22T09:33:42.000Z","_content":"#### 应用场景\nlvm能做什么？组装多个物理磁盘，划分逻辑磁盘，逻辑磁盘可以动态扩缩。\n\n#### lvm原理\n```\nlvm(Logic Volume Manage)逻辑卷管理。\n\n# 先分区\n\n`fdisk -l`查看新加的磁盘`/dev/sda`，给它分区：`fdisk /dev/sda`\n\n输入`n`，选择p，起始扇区回车选择默认，终止扇区输入`+10G`容量。\n\n输入`t`，设置id为`8e`，`8e`代表分区类型为linux-lvm。\n\n输入`w`保存配置。\n\n# 安装lvm2\nyum -y install lvm2\n\n# 创建pv(Physical Volume)物理卷\npvcreate /dev/sda1\npvscan # 查看pv\n\n# 创建VG(Volume Group)卷组，把pv加到它下面\nvgcreate vgdata /dev/sda1 # vgdata 是卷组名称 \n\n# 从卷组vgdata中创建lv(Logic Volume)逻辑卷\nlvcreate -L 9G -n lv001 vgdata # 分配9G给逻辑卷lv001，这个lv的目录为/dev/vgdata/lv001\n\n# 格式化lv001的文件系统为ext4\nmkfs -t ext4 /dev/vgdata/lv001\n\n# 创建/data目录，并将/dev/vgdata/lv001挂载到它\nmkdir /data\nmount /dev/vgdata/lv001 /data \n\n# 设置开机自动挂载\n编辑 /etc/fstab，添加一行:\n\n/dev/vgdata/lv001   /data  ext4 defaults 0  0\n\n以上完成就可以使用了。\n\n## 其他操作\n\n```\n参考：https://www.cnblogs.com/large-show/p/16203274.html\n\n### 分区\n应用场景：机器新加了一块磁盘，`df -h`查看，没有看到新加的磁盘。怎么办？\n\n#### 磁盘分区和挂载\n`fdisk -l` 查看当前系统所有磁盘设备。\n\n`fdisk /dev/sdb` 进入交互界面，准备对sdb磁盘进行分区。\n\n指令选项说明: \n```\nm 帮助信息；\nn 新建分区\nd 删除分区\nt 转换系统id，即转换格式\nw 保存信息，将变更写入磁盘。\nq 退出\n```\n\n输入`n`进行分区: p表建立主分区\n\n以上设置仅保存在内存中，输入`w`正式写到磁盘。\n\n说明：\n- 如果出现\"All primary partitions are in use\"，可输入`d`删除分区。\n\n分区完成后，需要格式化磁盘指定文件系统类型，centos7默认为ext4。\n\n`mkfs -t ext4 /dev/sdb1` # 设置分区sdb1的文件系统类型为ext4。\n\n格式化完成后，挂载:\n`mount /dev/sdb1 /mnt/sdb1` # 其中`/mnt/sdb1`是挂载目录，又称为挂载点。\n\n执行`df -h`即可查看到磁盘完成挂载。\n\n但是，系统在重启之后，发现挂载失效了。\n\n`blkid |grep /dev/sda1` # 获取分区的uuid\n\n编辑`/etc/fstab`，加入：\n```\nUUID=ea31269e-1e6b-4aac-8b14-19f4c577ce14 /mnt/sda1       ext4   defaults 0    0\n```\n\n执行`mount -a`加载磁盘挂载。 \n\n##### 参考\nhttps://blog.csdn.net/qq_42761527/article/details/102862813\n\nhttps://www.cnblogs.com/w-wfy/p/8870598.html  # 主分区和扩展分区区别\n","source":"_posts/第34期：LVM.md","raw":"---\ntitle: 第34期：LVM\ndate: 2023-05-22 17:33:42\ntags:\n---\n#### 应用场景\nlvm能做什么？组装多个物理磁盘，划分逻辑磁盘，逻辑磁盘可以动态扩缩。\n\n#### lvm原理\n```\nlvm(Logic Volume Manage)逻辑卷管理。\n\n# 先分区\n\n`fdisk -l`查看新加的磁盘`/dev/sda`，给它分区：`fdisk /dev/sda`\n\n输入`n`，选择p，起始扇区回车选择默认，终止扇区输入`+10G`容量。\n\n输入`t`，设置id为`8e`，`8e`代表分区类型为linux-lvm。\n\n输入`w`保存配置。\n\n# 安装lvm2\nyum -y install lvm2\n\n# 创建pv(Physical Volume)物理卷\npvcreate /dev/sda1\npvscan # 查看pv\n\n# 创建VG(Volume Group)卷组，把pv加到它下面\nvgcreate vgdata /dev/sda1 # vgdata 是卷组名称 \n\n# 从卷组vgdata中创建lv(Logic Volume)逻辑卷\nlvcreate -L 9G -n lv001 vgdata # 分配9G给逻辑卷lv001，这个lv的目录为/dev/vgdata/lv001\n\n# 格式化lv001的文件系统为ext4\nmkfs -t ext4 /dev/vgdata/lv001\n\n# 创建/data目录，并将/dev/vgdata/lv001挂载到它\nmkdir /data\nmount /dev/vgdata/lv001 /data \n\n# 设置开机自动挂载\n编辑 /etc/fstab，添加一行:\n\n/dev/vgdata/lv001   /data  ext4 defaults 0  0\n\n以上完成就可以使用了。\n\n## 其他操作\n\n```\n参考：https://www.cnblogs.com/large-show/p/16203274.html\n\n### 分区\n应用场景：机器新加了一块磁盘，`df -h`查看，没有看到新加的磁盘。怎么办？\n\n#### 磁盘分区和挂载\n`fdisk -l` 查看当前系统所有磁盘设备。\n\n`fdisk /dev/sdb` 进入交互界面，准备对sdb磁盘进行分区。\n\n指令选项说明: \n```\nm 帮助信息；\nn 新建分区\nd 删除分区\nt 转换系统id，即转换格式\nw 保存信息，将变更写入磁盘。\nq 退出\n```\n\n输入`n`进行分区: p表建立主分区\n\n以上设置仅保存在内存中，输入`w`正式写到磁盘。\n\n说明：\n- 如果出现\"All primary partitions are in use\"，可输入`d`删除分区。\n\n分区完成后，需要格式化磁盘指定文件系统类型，centos7默认为ext4。\n\n`mkfs -t ext4 /dev/sdb1` # 设置分区sdb1的文件系统类型为ext4。\n\n格式化完成后，挂载:\n`mount /dev/sdb1 /mnt/sdb1` # 其中`/mnt/sdb1`是挂载目录，又称为挂载点。\n\n执行`df -h`即可查看到磁盘完成挂载。\n\n但是，系统在重启之后，发现挂载失效了。\n\n`blkid |grep /dev/sda1` # 获取分区的uuid\n\n编辑`/etc/fstab`，加入：\n```\nUUID=ea31269e-1e6b-4aac-8b14-19f4c577ce14 /mnt/sda1       ext4   defaults 0    0\n```\n\n执行`mount -a`加载磁盘挂载。 \n\n##### 参考\nhttps://blog.csdn.net/qq_42761527/article/details/102862813\n\nhttps://www.cnblogs.com/w-wfy/p/8870598.html  # 主分区和扩展分区区别\n","slug":"第34期：LVM","published":1,"updated":"2024-03-06T06:55:18.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt6y000o9kln5wjhcxe7","content":"<h4 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4><p>lvm能做什么？组装多个物理磁盘，划分逻辑磁盘，逻辑磁盘可以动态扩缩。</p>\n<h4 id=\"lvm原理\"><a href=\"#lvm原理\" class=\"headerlink\" title=\"lvm原理\"></a>lvm原理</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lvm(Logic Volume Manage)逻辑卷管理。</span><br><span class=\"line\"></span><br><span class=\"line\"># 先分区</span><br><span class=\"line\"></span><br><span class=\"line\">`fdisk -l`查看新加的磁盘`/dev/sda`，给它分区：`fdisk /dev/sda`</span><br><span class=\"line\"></span><br><span class=\"line\">输入`n`，选择p，起始扇区回车选择默认，终止扇区输入`+10G`容量。</span><br><span class=\"line\"></span><br><span class=\"line\">输入`t`，设置id为`8e`，`8e`代表分区类型为linux-lvm。</span><br><span class=\"line\"></span><br><span class=\"line\">输入`w`保存配置。</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装lvm2</span><br><span class=\"line\">yum -y install lvm2</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建pv(Physical Volume)物理卷</span><br><span class=\"line\">pvcreate /dev/sda1</span><br><span class=\"line\">pvscan # 查看pv</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建VG(Volume Group)卷组，把pv加到它下面</span><br><span class=\"line\">vgcreate vgdata /dev/sda1 # vgdata 是卷组名称 </span><br><span class=\"line\"></span><br><span class=\"line\"># 从卷组vgdata中创建lv(Logic Volume)逻辑卷</span><br><span class=\"line\">lvcreate -L 9G -n lv001 vgdata # 分配9G给逻辑卷lv001，这个lv的目录为/dev/vgdata/lv001</span><br><span class=\"line\"></span><br><span class=\"line\"># 格式化lv001的文件系统为ext4</span><br><span class=\"line\">mkfs -t ext4 /dev/vgdata/lv001</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建/data目录，并将/dev/vgdata/lv001挂载到它</span><br><span class=\"line\">mkdir /data</span><br><span class=\"line\">mount /dev/vgdata/lv001 /data </span><br><span class=\"line\"></span><br><span class=\"line\"># 设置开机自动挂载</span><br><span class=\"line\">编辑 /etc/fstab，添加一行:</span><br><span class=\"line\"></span><br><span class=\"line\">/dev/vgdata/lv001   /data  ext4 defaults 0  0</span><br><span class=\"line\"></span><br><span class=\"line\">以上完成就可以使用了。</span><br><span class=\"line\"></span><br><span class=\"line\">## 其他操作</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://www.cnblogs.com/large-show/p/16203274.html\">https://www.cnblogs.com/large-show/p/16203274.html</a></p>\n<h3 id=\"分区\"><a href=\"#分区\" class=\"headerlink\" title=\"分区\"></a>分区</h3><p>应用场景：机器新加了一块磁盘，<code>df -h</code>查看，没有看到新加的磁盘。怎么办？</p>\n<h4 id=\"磁盘分区和挂载\"><a href=\"#磁盘分区和挂载\" class=\"headerlink\" title=\"磁盘分区和挂载\"></a>磁盘分区和挂载</h4><p><code>fdisk -l</code> 查看当前系统所有磁盘设备。</p>\n<p><code>fdisk /dev/sdb</code> 进入交互界面，准备对sdb磁盘进行分区。</p>\n<p>指令选项说明: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m 帮助信息；</span><br><span class=\"line\">n 新建分区</span><br><span class=\"line\">d 删除分区</span><br><span class=\"line\">t 转换系统id，即转换格式</span><br><span class=\"line\">w 保存信息，将变更写入磁盘。</span><br><span class=\"line\">q 退出</span><br></pre></td></tr></table></figure>\n\n<p>输入<code>n</code>进行分区: p表建立主分区</p>\n<p>以上设置仅保存在内存中，输入<code>w</code>正式写到磁盘。</p>\n<p>说明：</p>\n<ul>\n<li>如果出现”All primary partitions are in use”，可输入<code>d</code>删除分区。</li>\n</ul>\n<p>分区完成后，需要格式化磁盘指定文件系统类型，centos7默认为ext4。</p>\n<p><code>mkfs -t ext4 /dev/sdb1</code> # 设置分区sdb1的文件系统类型为ext4。</p>\n<p>格式化完成后，挂载:<br><code>mount /dev/sdb1 /mnt/sdb1</code> # 其中<code>/mnt/sdb1</code>是挂载目录，又称为挂载点。</p>\n<p>执行<code>df -h</code>即可查看到磁盘完成挂载。</p>\n<p>但是，系统在重启之后，发现挂载失效了。</p>\n<p><code>blkid |grep /dev/sda1</code> # 获取分区的uuid</p>\n<p>编辑<code>/etc/fstab</code>，加入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UUID=ea31269e-1e6b-4aac-8b14-19f4c577ce14 /mnt/sda1       ext4   defaults 0    0</span><br></pre></td></tr></table></figure>\n\n<p>执行<code>mount -a</code>加载磁盘挂载。 </p>\n<h5 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h5><p><a href=\"https://blog.csdn.net/qq_42761527/article/details/102862813\">https://blog.csdn.net/qq_42761527/article/details/102862813</a></p>\n<p><a href=\"https://www.cnblogs.com/w-wfy/p/8870598.html\">https://www.cnblogs.com/w-wfy/p/8870598.html</a>  # 主分区和扩展分区区别</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4><p>lvm能做什么？组装多个物理磁盘，划分逻辑磁盘，逻辑磁盘可以动态扩缩。</p>\n<h4 id=\"lvm原理\"><a href=\"#lvm原理\" class=\"headerlink\" title=\"lvm原理\"></a>lvm原理</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lvm(Logic Volume Manage)逻辑卷管理。</span><br><span class=\"line\"></span><br><span class=\"line\"># 先分区</span><br><span class=\"line\"></span><br><span class=\"line\">`fdisk -l`查看新加的磁盘`/dev/sda`，给它分区：`fdisk /dev/sda`</span><br><span class=\"line\"></span><br><span class=\"line\">输入`n`，选择p，起始扇区回车选择默认，终止扇区输入`+10G`容量。</span><br><span class=\"line\"></span><br><span class=\"line\">输入`t`，设置id为`8e`，`8e`代表分区类型为linux-lvm。</span><br><span class=\"line\"></span><br><span class=\"line\">输入`w`保存配置。</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装lvm2</span><br><span class=\"line\">yum -y install lvm2</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建pv(Physical Volume)物理卷</span><br><span class=\"line\">pvcreate /dev/sda1</span><br><span class=\"line\">pvscan # 查看pv</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建VG(Volume Group)卷组，把pv加到它下面</span><br><span class=\"line\">vgcreate vgdata /dev/sda1 # vgdata 是卷组名称 </span><br><span class=\"line\"></span><br><span class=\"line\"># 从卷组vgdata中创建lv(Logic Volume)逻辑卷</span><br><span class=\"line\">lvcreate -L 9G -n lv001 vgdata # 分配9G给逻辑卷lv001，这个lv的目录为/dev/vgdata/lv001</span><br><span class=\"line\"></span><br><span class=\"line\"># 格式化lv001的文件系统为ext4</span><br><span class=\"line\">mkfs -t ext4 /dev/vgdata/lv001</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建/data目录，并将/dev/vgdata/lv001挂载到它</span><br><span class=\"line\">mkdir /data</span><br><span class=\"line\">mount /dev/vgdata/lv001 /data </span><br><span class=\"line\"></span><br><span class=\"line\"># 设置开机自动挂载</span><br><span class=\"line\">编辑 /etc/fstab，添加一行:</span><br><span class=\"line\"></span><br><span class=\"line\">/dev/vgdata/lv001   /data  ext4 defaults 0  0</span><br><span class=\"line\"></span><br><span class=\"line\">以上完成就可以使用了。</span><br><span class=\"line\"></span><br><span class=\"line\">## 其他操作</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://www.cnblogs.com/large-show/p/16203274.html\">https://www.cnblogs.com/large-show/p/16203274.html</a></p>\n<h3 id=\"分区\"><a href=\"#分区\" class=\"headerlink\" title=\"分区\"></a>分区</h3><p>应用场景：机器新加了一块磁盘，<code>df -h</code>查看，没有看到新加的磁盘。怎么办？</p>\n<h4 id=\"磁盘分区和挂载\"><a href=\"#磁盘分区和挂载\" class=\"headerlink\" title=\"磁盘分区和挂载\"></a>磁盘分区和挂载</h4><p><code>fdisk -l</code> 查看当前系统所有磁盘设备。</p>\n<p><code>fdisk /dev/sdb</code> 进入交互界面，准备对sdb磁盘进行分区。</p>\n<p>指令选项说明: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m 帮助信息；</span><br><span class=\"line\">n 新建分区</span><br><span class=\"line\">d 删除分区</span><br><span class=\"line\">t 转换系统id，即转换格式</span><br><span class=\"line\">w 保存信息，将变更写入磁盘。</span><br><span class=\"line\">q 退出</span><br></pre></td></tr></table></figure>\n\n<p>输入<code>n</code>进行分区: p表建立主分区</p>\n<p>以上设置仅保存在内存中，输入<code>w</code>正式写到磁盘。</p>\n<p>说明：</p>\n<ul>\n<li>如果出现”All primary partitions are in use”，可输入<code>d</code>删除分区。</li>\n</ul>\n<p>分区完成后，需要格式化磁盘指定文件系统类型，centos7默认为ext4。</p>\n<p><code>mkfs -t ext4 /dev/sdb1</code> # 设置分区sdb1的文件系统类型为ext4。</p>\n<p>格式化完成后，挂载:<br><code>mount /dev/sdb1 /mnt/sdb1</code> # 其中<code>/mnt/sdb1</code>是挂载目录，又称为挂载点。</p>\n<p>执行<code>df -h</code>即可查看到磁盘完成挂载。</p>\n<p>但是，系统在重启之后，发现挂载失效了。</p>\n<p><code>blkid |grep /dev/sda1</code> # 获取分区的uuid</p>\n<p>编辑<code>/etc/fstab</code>，加入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UUID=ea31269e-1e6b-4aac-8b14-19f4c577ce14 /mnt/sda1       ext4   defaults 0    0</span><br></pre></td></tr></table></figure>\n\n<p>执行<code>mount -a</code>加载磁盘挂载。 </p>\n<h5 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h5><p><a href=\"https://blog.csdn.net/qq_42761527/article/details/102862813\">https://blog.csdn.net/qq_42761527/article/details/102862813</a></p>\n<p><a href=\"https://www.cnblogs.com/w-wfy/p/8870598.html\">https://www.cnblogs.com/w-wfy/p/8870598.html</a>  # 主分区和扩展分区区别</p>\n"},{"title":"第35期：TELNET","date":"2023-05-22T09:35:10.000Z","_content":"#### telnet\n本质是上一个远程登录工具，只不过是明文传输数据。\n\n常用功能：\n- 测试远程端口是否可用\n\ncentos7安装telnet\nyum install -y telnet\n\n如果返回`Connection refused`说明服务端口没有被占用，反之。\n\n测试mysql是否可用\n```\n$ telnet localhost 3306\nTrying ::1...\ntelnet: connect to address ::1: Connection refused\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\nR\n5.5.65-MariaDB/+R<uX;Z?;fp\"Ug%}k\"bKmysql_native_passwordConnection closed by foreign host.\n```\n以上表示mysql服务可连。在`foreign host.`后面输入quit可退出 或在后面输入`info`可查返回细节。\n","source":"_posts/第35期：TELNET.md","raw":"---\ntitle: 第35期：TELNET\ndate: 2023-05-22 17:35:10\ntags:\n---\n#### telnet\n本质是上一个远程登录工具，只不过是明文传输数据。\n\n常用功能：\n- 测试远程端口是否可用\n\ncentos7安装telnet\nyum install -y telnet\n\n如果返回`Connection refused`说明服务端口没有被占用，反之。\n\n测试mysql是否可用\n```\n$ telnet localhost 3306\nTrying ::1...\ntelnet: connect to address ::1: Connection refused\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\nR\n5.5.65-MariaDB/+R<uX;Z?;fp\"Ug%}k\"bKmysql_native_passwordConnection closed by foreign host.\n```\n以上表示mysql服务可连。在`foreign host.`后面输入quit可退出 或在后面输入`info`可查返回细节。\n","slug":"第35期：TELNET","published":1,"updated":"2024-03-06T06:55:18.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt6z000p9klnfv82hjgs","content":"<h4 id=\"telnet\"><a href=\"#telnet\" class=\"headerlink\" title=\"telnet\"></a>telnet</h4><p>本质是上一个远程登录工具，只不过是明文传输数据。</p>\n<p>常用功能：</p>\n<ul>\n<li>测试远程端口是否可用</li>\n</ul>\n<p>centos7安装telnet<br>yum install -y telnet</p>\n<p>如果返回<code>Connection refused</code>说明服务端口没有被占用，反之。</p>\n<p>测试mysql是否可用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ telnet localhost 3306</span><br><span class=\"line\">Trying ::1...</span><br><span class=\"line\">telnet: connect to address ::1: Connection refused</span><br><span class=\"line\">Trying 127.0.0.1...</span><br><span class=\"line\">Connected to localhost.</span><br><span class=\"line\">Escape character is &#x27;^]&#x27;.</span><br><span class=\"line\">R</span><br><span class=\"line\">5.5.65-MariaDB/+R&lt;uX;Z?;fp&quot;Ug%&#125;k&quot;bKmysql_native_passwordConnection closed by foreign host.</span><br></pre></td></tr></table></figure>\n<p>以上表示mysql服务可连。在<code>foreign host.</code>后面输入quit可退出 或在后面输入<code>info</code>可查返回细节。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"telnet\"><a href=\"#telnet\" class=\"headerlink\" title=\"telnet\"></a>telnet</h4><p>本质是上一个远程登录工具，只不过是明文传输数据。</p>\n<p>常用功能：</p>\n<ul>\n<li>测试远程端口是否可用</li>\n</ul>\n<p>centos7安装telnet<br>yum install -y telnet</p>\n<p>如果返回<code>Connection refused</code>说明服务端口没有被占用，反之。</p>\n<p>测试mysql是否可用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ telnet localhost 3306</span><br><span class=\"line\">Trying ::1...</span><br><span class=\"line\">telnet: connect to address ::1: Connection refused</span><br><span class=\"line\">Trying 127.0.0.1...</span><br><span class=\"line\">Connected to localhost.</span><br><span class=\"line\">Escape character is &#x27;^]&#x27;.</span><br><span class=\"line\">R</span><br><span class=\"line\">5.5.65-MariaDB/+R&lt;uX;Z?;fp&quot;Ug%&#125;k&quot;bKmysql_native_passwordConnection closed by foreign host.</span><br></pre></td></tr></table></figure>\n<p>以上表示mysql服务可连。在<code>foreign host.</code>后面输入quit可退出 或在后面输入<code>info</code>可查返回细节。</p>\n"},{"title":"第36期：Redis","date":"2023-05-22T09:41:33.000Z","_content":"### 优缺点\n```\n# 优：\n基于内存的kv数据库，每秒可达到10w次读写操作\n\n# 缺：\n不能存储大容量数据\n```\n#### 大key/热key\n```\n大Key: Key本身的数据量过大：一个String类型的Key，它的值为5 MB; \n      \n      Key中的成员数过多：一个ZSET类型的Key，它的成员数量为10,000个; \n      \n      Key中成员的数据量过大：一个Hash类型的Key，它的成员数量虽然只有1,000个但这些成员的Value（值）总大小为100 MB。\n\n热Key: QPS集中在特定的Key：Redis实例的总QPS（每秒查询率）为10,000，而其中一个Key的每秒访问量达到了7,000。\n       \n      带宽使用率集中在特定的Key：对一个拥有上千个成员且总大小为1 MB的HASH Key每秒发送大量的HGETALL操作请求。\n\n      CPU使用时间占比集中在特定的Key：对一个拥有数万个成员的Key（ZSET类型）每秒发送大量的ZRANGE操作请求。\n```\n\n#### redis-cli安装使用\n```\nLinux\n# 下载安装redis-cli（下载Redis源码文件）\n\nwget https://download.redis.io/releases/redis-6.0.9.tar.gz # more version see https://redis.io/download/?spm=a2c4g.11186623.0.0.10ec3783Qw3pBc\ntar -xzvf redis-6.0.9.tar.gz\n\n# 执行下述命令进入解压后的目录并编译安装Redis源码文件\ncd redis-6.0.9\n\n# 安装\nmake PREFIX=/usr/local/redis install\ncd /usr/local/redis\ncp redis.conf 6379.conf\n\n# 启动\n./bin/redis-server 6379.conf\n\n# 测试\n./bin/redis-cli\n127.0.0.1:6379> ping\nPONG\n\n# 远程连接\nredis-cli -h hostname -p port\n# 密码用户认证\nAUTH testaccount:Rp829dlwa\n```\n#### redis开发运维规范\n```\n1.设计合理的Key中Value的大小，推荐小于10 KB。过大的Value会引发数据倾斜、热点Key、实例流量或CPU性能被占满等问题，应从设计源头上避免此类问题带来的影响。\n2.设计合理的Key名称与长度\n使用可读字符串作为Key名，如果使用Key名拼接库、表和字段名时，推荐使用英文冒号（:）分隔。例如project:user:001。\n长度：推荐Key名的长度不超过128字节（越短越好）。\n```\n### redis基本操作\n```\n# 查看所有key\nkeys * # 不建议在生产环境使用\nkeys h*\n\n# 键数量\ndbsize # 存在大量key的话生产环境禁止使用\n\nexists key # 存在返回1，否则0\n\ndel key # 删除键，返回删除个数，若key不存在返回0\n\nttl key # 键存活时间，若key不存在返回-1\n\nexpire key seconds # 设置过期时间，成功返回1，失败返回0\n\npersist key # 去掉过期时间\n\nmonitor # 实时监控redis请求信息\n\ninfo # 查看节点信息\n```\n### 缓存雪崩\n某一个热点数据过期，一时间请求都到\n了DB导致雪崩。\n\n解决：\n- 1.过期时间避开业务高峰期；\n- 2.热点数据不过期\n\n### 缓存穿透\n接口的参数是redis不存在的，请求打到了DB，db也找不到，肉鸡疯狂发请求导致db崩溃。\n\n解决：\n- ip黑名单和限流\n- 接口参数校验\n\n### 缓存雪崩\n多数key失效，请求到了db导致崩溃\n\n### 淘汰策略\n```\n共8种策略。\n- allkeys-lru  淘汰最少用的key(应用最广泛)\n- no-enviction 禁止驱逐数据，内存满时写数据会报错，默认策略。\n```\n### 删除策略\n```\n- 定时策略，设置key的同时设置时间\n- 惰性删除，过期的key不清除，等访问的时候发现过期就删除。对cpu友好，但内存会累积。\n- 定期删除，每隔100ms检查过期key删除\n\n一般是惰性加定期删除策略。\n```\n\n### 持久化机制\n```\n- RDB 定时持久化\n- AOF 实时持久化\n```","source":"_posts/第36期：Redis.md","raw":"---\ntitle: 第36期：Redis\ndate: 2023-05-22 17:41:33\ntags:\n---\n### 优缺点\n```\n# 优：\n基于内存的kv数据库，每秒可达到10w次读写操作\n\n# 缺：\n不能存储大容量数据\n```\n#### 大key/热key\n```\n大Key: Key本身的数据量过大：一个String类型的Key，它的值为5 MB; \n      \n      Key中的成员数过多：一个ZSET类型的Key，它的成员数量为10,000个; \n      \n      Key中成员的数据量过大：一个Hash类型的Key，它的成员数量虽然只有1,000个但这些成员的Value（值）总大小为100 MB。\n\n热Key: QPS集中在特定的Key：Redis实例的总QPS（每秒查询率）为10,000，而其中一个Key的每秒访问量达到了7,000。\n       \n      带宽使用率集中在特定的Key：对一个拥有上千个成员且总大小为1 MB的HASH Key每秒发送大量的HGETALL操作请求。\n\n      CPU使用时间占比集中在特定的Key：对一个拥有数万个成员的Key（ZSET类型）每秒发送大量的ZRANGE操作请求。\n```\n\n#### redis-cli安装使用\n```\nLinux\n# 下载安装redis-cli（下载Redis源码文件）\n\nwget https://download.redis.io/releases/redis-6.0.9.tar.gz # more version see https://redis.io/download/?spm=a2c4g.11186623.0.0.10ec3783Qw3pBc\ntar -xzvf redis-6.0.9.tar.gz\n\n# 执行下述命令进入解压后的目录并编译安装Redis源码文件\ncd redis-6.0.9\n\n# 安装\nmake PREFIX=/usr/local/redis install\ncd /usr/local/redis\ncp redis.conf 6379.conf\n\n# 启动\n./bin/redis-server 6379.conf\n\n# 测试\n./bin/redis-cli\n127.0.0.1:6379> ping\nPONG\n\n# 远程连接\nredis-cli -h hostname -p port\n# 密码用户认证\nAUTH testaccount:Rp829dlwa\n```\n#### redis开发运维规范\n```\n1.设计合理的Key中Value的大小，推荐小于10 KB。过大的Value会引发数据倾斜、热点Key、实例流量或CPU性能被占满等问题，应从设计源头上避免此类问题带来的影响。\n2.设计合理的Key名称与长度\n使用可读字符串作为Key名，如果使用Key名拼接库、表和字段名时，推荐使用英文冒号（:）分隔。例如project:user:001。\n长度：推荐Key名的长度不超过128字节（越短越好）。\n```\n### redis基本操作\n```\n# 查看所有key\nkeys * # 不建议在生产环境使用\nkeys h*\n\n# 键数量\ndbsize # 存在大量key的话生产环境禁止使用\n\nexists key # 存在返回1，否则0\n\ndel key # 删除键，返回删除个数，若key不存在返回0\n\nttl key # 键存活时间，若key不存在返回-1\n\nexpire key seconds # 设置过期时间，成功返回1，失败返回0\n\npersist key # 去掉过期时间\n\nmonitor # 实时监控redis请求信息\n\ninfo # 查看节点信息\n```\n### 缓存雪崩\n某一个热点数据过期，一时间请求都到\n了DB导致雪崩。\n\n解决：\n- 1.过期时间避开业务高峰期；\n- 2.热点数据不过期\n\n### 缓存穿透\n接口的参数是redis不存在的，请求打到了DB，db也找不到，肉鸡疯狂发请求导致db崩溃。\n\n解决：\n- ip黑名单和限流\n- 接口参数校验\n\n### 缓存雪崩\n多数key失效，请求到了db导致崩溃\n\n### 淘汰策略\n```\n共8种策略。\n- allkeys-lru  淘汰最少用的key(应用最广泛)\n- no-enviction 禁止驱逐数据，内存满时写数据会报错，默认策略。\n```\n### 删除策略\n```\n- 定时策略，设置key的同时设置时间\n- 惰性删除，过期的key不清除，等访问的时候发现过期就删除。对cpu友好，但内存会累积。\n- 定期删除，每隔100ms检查过期key删除\n\n一般是惰性加定期删除策略。\n```\n\n### 持久化机制\n```\n- RDB 定时持久化\n- AOF 实时持久化\n```","slug":"第36期：Redis","published":1,"updated":"2024-03-06T06:55:18.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt70000q9klngpzx3cww","content":"<h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 优：</span><br><span class=\"line\">基于内存的kv数据库，每秒可达到10w次读写操作</span><br><span class=\"line\"></span><br><span class=\"line\"># 缺：</span><br><span class=\"line\">不能存储大容量数据</span><br></pre></td></tr></table></figure>\n<h4 id=\"大key-x2F-热key\"><a href=\"#大key-x2F-热key\" class=\"headerlink\" title=\"大key&#x2F;热key\"></a>大key&#x2F;热key</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">大Key: Key本身的数据量过大：一个String类型的Key，它的值为5 MB; </span><br><span class=\"line\">      </span><br><span class=\"line\">      Key中的成员数过多：一个ZSET类型的Key，它的成员数量为10,000个; </span><br><span class=\"line\">      </span><br><span class=\"line\">      Key中成员的数据量过大：一个Hash类型的Key，它的成员数量虽然只有1,000个但这些成员的Value（值）总大小为100 MB。</span><br><span class=\"line\"></span><br><span class=\"line\">热Key: QPS集中在特定的Key：Redis实例的总QPS（每秒查询率）为10,000，而其中一个Key的每秒访问量达到了7,000。</span><br><span class=\"line\">       </span><br><span class=\"line\">      带宽使用率集中在特定的Key：对一个拥有上千个成员且总大小为1 MB的HASH Key每秒发送大量的HGETALL操作请求。</span><br><span class=\"line\"></span><br><span class=\"line\">      CPU使用时间占比集中在特定的Key：对一个拥有数万个成员的Key（ZSET类型）每秒发送大量的ZRANGE操作请求。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"redis-cli安装使用\"><a href=\"#redis-cli安装使用\" class=\"headerlink\" title=\"redis-cli安装使用\"></a>redis-cli安装使用</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Linux</span><br><span class=\"line\"># 下载安装redis-cli（下载Redis源码文件）</span><br><span class=\"line\"></span><br><span class=\"line\">wget https://download.redis.io/releases/redis-6.0.9.tar.gz # more version see https://redis.io/download/?spm=a2c4g.11186623.0.0.10ec3783Qw3pBc</span><br><span class=\"line\">tar -xzvf redis-6.0.9.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"># 执行下述命令进入解压后的目录并编译安装Redis源码文件</span><br><span class=\"line\">cd redis-6.0.9</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装</span><br><span class=\"line\">make PREFIX=/usr/local/redis install</span><br><span class=\"line\">cd /usr/local/redis</span><br><span class=\"line\">cp redis.conf 6379.conf</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动</span><br><span class=\"line\">./bin/redis-server 6379.conf</span><br><span class=\"line\"></span><br><span class=\"line\"># 测试</span><br><span class=\"line\">./bin/redis-cli</span><br><span class=\"line\">127.0.0.1:6379&gt; ping</span><br><span class=\"line\">PONG</span><br><span class=\"line\"></span><br><span class=\"line\"># 远程连接</span><br><span class=\"line\">redis-cli -h hostname -p port</span><br><span class=\"line\"># 密码用户认证</span><br><span class=\"line\">AUTH testaccount:Rp829dlwa</span><br></pre></td></tr></table></figure>\n<h4 id=\"redis开发运维规范\"><a href=\"#redis开发运维规范\" class=\"headerlink\" title=\"redis开发运维规范\"></a>redis开发运维规范</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.设计合理的Key中Value的大小，推荐小于10 KB。过大的Value会引发数据倾斜、热点Key、实例流量或CPU性能被占满等问题，应从设计源头上避免此类问题带来的影响。</span><br><span class=\"line\">2.设计合理的Key名称与长度</span><br><span class=\"line\">使用可读字符串作为Key名，如果使用Key名拼接库、表和字段名时，推荐使用英文冒号（:）分隔。例如project:user:001。</span><br><span class=\"line\">长度：推荐Key名的长度不超过128字节（越短越好）。</span><br></pre></td></tr></table></figure>\n<h3 id=\"redis基本操作\"><a href=\"#redis基本操作\" class=\"headerlink\" title=\"redis基本操作\"></a>redis基本操作</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看所有key</span><br><span class=\"line\">keys * # 不建议在生产环境使用</span><br><span class=\"line\">keys h*</span><br><span class=\"line\"></span><br><span class=\"line\"># 键数量</span><br><span class=\"line\">dbsize # 存在大量key的话生产环境禁止使用</span><br><span class=\"line\"></span><br><span class=\"line\">exists key # 存在返回1，否则0</span><br><span class=\"line\"></span><br><span class=\"line\">del key # 删除键，返回删除个数，若key不存在返回0</span><br><span class=\"line\"></span><br><span class=\"line\">ttl key # 键存活时间，若key不存在返回-1</span><br><span class=\"line\"></span><br><span class=\"line\">expire key seconds # 设置过期时间，成功返回1，失败返回0</span><br><span class=\"line\"></span><br><span class=\"line\">persist key # 去掉过期时间</span><br><span class=\"line\"></span><br><span class=\"line\">monitor # 实时监控redis请求信息</span><br><span class=\"line\"></span><br><span class=\"line\">info # 查看节点信息</span><br></pre></td></tr></table></figure>\n<h3 id=\"缓存雪崩\"><a href=\"#缓存雪崩\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h3><p>某一个热点数据过期，一时间请求都到<br>了DB导致雪崩。</p>\n<p>解决：</p>\n<ul>\n<li>1.过期时间避开业务高峰期；</li>\n<li>2.热点数据不过期</li>\n</ul>\n<h3 id=\"缓存穿透\"><a href=\"#缓存穿透\" class=\"headerlink\" title=\"缓存穿透\"></a>缓存穿透</h3><p>接口的参数是redis不存在的，请求打到了DB，db也找不到，肉鸡疯狂发请求导致db崩溃。</p>\n<p>解决：</p>\n<ul>\n<li>ip黑名单和限流</li>\n<li>接口参数校验</li>\n</ul>\n<h3 id=\"缓存雪崩-1\"><a href=\"#缓存雪崩-1\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h3><p>多数key失效，请求到了db导致崩溃</p>\n<h3 id=\"淘汰策略\"><a href=\"#淘汰策略\" class=\"headerlink\" title=\"淘汰策略\"></a>淘汰策略</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">共8种策略。</span><br><span class=\"line\">- allkeys-lru  淘汰最少用的key(应用最广泛)</span><br><span class=\"line\">- no-enviction 禁止驱逐数据，内存满时写数据会报错，默认策略。</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除策略\"><a href=\"#删除策略\" class=\"headerlink\" title=\"删除策略\"></a>删除策略</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 定时策略，设置key的同时设置时间</span><br><span class=\"line\">- 惰性删除，过期的key不清除，等访问的时候发现过期就删除。对cpu友好，但内存会累积。</span><br><span class=\"line\">- 定期删除，每隔100ms检查过期key删除</span><br><span class=\"line\"></span><br><span class=\"line\">一般是惰性加定期删除策略。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"持久化机制\"><a href=\"#持久化机制\" class=\"headerlink\" title=\"持久化机制\"></a>持久化机制</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- RDB 定时持久化</span><br><span class=\"line\">- AOF 实时持久化</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 优：</span><br><span class=\"line\">基于内存的kv数据库，每秒可达到10w次读写操作</span><br><span class=\"line\"></span><br><span class=\"line\"># 缺：</span><br><span class=\"line\">不能存储大容量数据</span><br></pre></td></tr></table></figure>\n<h4 id=\"大key-x2F-热key\"><a href=\"#大key-x2F-热key\" class=\"headerlink\" title=\"大key&#x2F;热key\"></a>大key&#x2F;热key</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">大Key: Key本身的数据量过大：一个String类型的Key，它的值为5 MB; </span><br><span class=\"line\">      </span><br><span class=\"line\">      Key中的成员数过多：一个ZSET类型的Key，它的成员数量为10,000个; </span><br><span class=\"line\">      </span><br><span class=\"line\">      Key中成员的数据量过大：一个Hash类型的Key，它的成员数量虽然只有1,000个但这些成员的Value（值）总大小为100 MB。</span><br><span class=\"line\"></span><br><span class=\"line\">热Key: QPS集中在特定的Key：Redis实例的总QPS（每秒查询率）为10,000，而其中一个Key的每秒访问量达到了7,000。</span><br><span class=\"line\">       </span><br><span class=\"line\">      带宽使用率集中在特定的Key：对一个拥有上千个成员且总大小为1 MB的HASH Key每秒发送大量的HGETALL操作请求。</span><br><span class=\"line\"></span><br><span class=\"line\">      CPU使用时间占比集中在特定的Key：对一个拥有数万个成员的Key（ZSET类型）每秒发送大量的ZRANGE操作请求。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"redis-cli安装使用\"><a href=\"#redis-cli安装使用\" class=\"headerlink\" title=\"redis-cli安装使用\"></a>redis-cli安装使用</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Linux</span><br><span class=\"line\"># 下载安装redis-cli（下载Redis源码文件）</span><br><span class=\"line\"></span><br><span class=\"line\">wget https://download.redis.io/releases/redis-6.0.9.tar.gz # more version see https://redis.io/download/?spm=a2c4g.11186623.0.0.10ec3783Qw3pBc</span><br><span class=\"line\">tar -xzvf redis-6.0.9.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"># 执行下述命令进入解压后的目录并编译安装Redis源码文件</span><br><span class=\"line\">cd redis-6.0.9</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装</span><br><span class=\"line\">make PREFIX=/usr/local/redis install</span><br><span class=\"line\">cd /usr/local/redis</span><br><span class=\"line\">cp redis.conf 6379.conf</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动</span><br><span class=\"line\">./bin/redis-server 6379.conf</span><br><span class=\"line\"></span><br><span class=\"line\"># 测试</span><br><span class=\"line\">./bin/redis-cli</span><br><span class=\"line\">127.0.0.1:6379&gt; ping</span><br><span class=\"line\">PONG</span><br><span class=\"line\"></span><br><span class=\"line\"># 远程连接</span><br><span class=\"line\">redis-cli -h hostname -p port</span><br><span class=\"line\"># 密码用户认证</span><br><span class=\"line\">AUTH testaccount:Rp829dlwa</span><br></pre></td></tr></table></figure>\n<h4 id=\"redis开发运维规范\"><a href=\"#redis开发运维规范\" class=\"headerlink\" title=\"redis开发运维规范\"></a>redis开发运维规范</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.设计合理的Key中Value的大小，推荐小于10 KB。过大的Value会引发数据倾斜、热点Key、实例流量或CPU性能被占满等问题，应从设计源头上避免此类问题带来的影响。</span><br><span class=\"line\">2.设计合理的Key名称与长度</span><br><span class=\"line\">使用可读字符串作为Key名，如果使用Key名拼接库、表和字段名时，推荐使用英文冒号（:）分隔。例如project:user:001。</span><br><span class=\"line\">长度：推荐Key名的长度不超过128字节（越短越好）。</span><br></pre></td></tr></table></figure>\n<h3 id=\"redis基本操作\"><a href=\"#redis基本操作\" class=\"headerlink\" title=\"redis基本操作\"></a>redis基本操作</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看所有key</span><br><span class=\"line\">keys * # 不建议在生产环境使用</span><br><span class=\"line\">keys h*</span><br><span class=\"line\"></span><br><span class=\"line\"># 键数量</span><br><span class=\"line\">dbsize # 存在大量key的话生产环境禁止使用</span><br><span class=\"line\"></span><br><span class=\"line\">exists key # 存在返回1，否则0</span><br><span class=\"line\"></span><br><span class=\"line\">del key # 删除键，返回删除个数，若key不存在返回0</span><br><span class=\"line\"></span><br><span class=\"line\">ttl key # 键存活时间，若key不存在返回-1</span><br><span class=\"line\"></span><br><span class=\"line\">expire key seconds # 设置过期时间，成功返回1，失败返回0</span><br><span class=\"line\"></span><br><span class=\"line\">persist key # 去掉过期时间</span><br><span class=\"line\"></span><br><span class=\"line\">monitor # 实时监控redis请求信息</span><br><span class=\"line\"></span><br><span class=\"line\">info # 查看节点信息</span><br></pre></td></tr></table></figure>\n<h3 id=\"缓存雪崩\"><a href=\"#缓存雪崩\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h3><p>某一个热点数据过期，一时间请求都到<br>了DB导致雪崩。</p>\n<p>解决：</p>\n<ul>\n<li>1.过期时间避开业务高峰期；</li>\n<li>2.热点数据不过期</li>\n</ul>\n<h3 id=\"缓存穿透\"><a href=\"#缓存穿透\" class=\"headerlink\" title=\"缓存穿透\"></a>缓存穿透</h3><p>接口的参数是redis不存在的，请求打到了DB，db也找不到，肉鸡疯狂发请求导致db崩溃。</p>\n<p>解决：</p>\n<ul>\n<li>ip黑名单和限流</li>\n<li>接口参数校验</li>\n</ul>\n<h3 id=\"缓存雪崩-1\"><a href=\"#缓存雪崩-1\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h3><p>多数key失效，请求到了db导致崩溃</p>\n<h3 id=\"淘汰策略\"><a href=\"#淘汰策略\" class=\"headerlink\" title=\"淘汰策略\"></a>淘汰策略</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">共8种策略。</span><br><span class=\"line\">- allkeys-lru  淘汰最少用的key(应用最广泛)</span><br><span class=\"line\">- no-enviction 禁止驱逐数据，内存满时写数据会报错，默认策略。</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除策略\"><a href=\"#删除策略\" class=\"headerlink\" title=\"删除策略\"></a>删除策略</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 定时策略，设置key的同时设置时间</span><br><span class=\"line\">- 惰性删除，过期的key不清除，等访问的时候发现过期就删除。对cpu友好，但内存会累积。</span><br><span class=\"line\">- 定期删除，每隔100ms检查过期key删除</span><br><span class=\"line\"></span><br><span class=\"line\">一般是惰性加定期删除策略。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"持久化机制\"><a href=\"#持久化机制\" class=\"headerlink\" title=\"持久化机制\"></a>持久化机制</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- RDB 定时持久化</span><br><span class=\"line\">- AOF 实时持久化</span><br></pre></td></tr></table></figure>"},{"title":"第37期：操作系统&性能优化","date":"2023-05-25T04:19:49.000Z","_content":"##### 书籍\nhttps://pages.cs.wisc.edu/~remzi/OSTEP/Chinese/01.pdf\n\n#### 操作系统学习笔记\n学习方法：首先听课，做笔记，阅读笔记，巩固知识，实践\n\n##### 1.程序运行时发生了什么？\n```\n一个程序运行时在做什么？执行指令。cpu从内存get到一条指令，对其解码然后执行它，比如说两个数相加。完成指令后执行下一条，依此类推，直到程序完成。\n```\n\n问题：如何将硬件资源虚拟化？\n```\n通过操作系统实现，操作系统（也可称之为虚拟机）提供API，利用虚拟机的功能（如访问文件、内存、计算），让用户可以通过软件的形式告诉操作系统做什么。操作系统api称之为系统调用（system call），让应用程序调用。由于操作系统提供了这些调用来运行程序，访问内存、文件等资源，有时也会称操作系统提供了标准库(standard library)。\n```\n##### 2.虚拟化CPU\n虚拟化CPU有什么好处？\n```\n运行多个程序在一个单核cpu机器上，看起来有多个程序`同时`运行。实际上，cpu是在几个程序间不断地切换运行。\n\n可以通过接口的形式去暂停程序或查看程序。\n```\n##### 3.虚拟化内存\n物理内存的模式本质上是一个存满字节的数组。读内存就是读取某个位置上的地址，再读取地址上的值。\n\n再来说说程序运行发生了什么？\n```\n程序运行时，代码数据以某种数据结构被加载到内存，通过指令操作内存上的数据。\n```\n\n场景：当1套代码同时运行2个程序，程序运行的代码逻辑是：分配1个内存，打印其内存地址。结果两个程序打印出来的内存地址是一样的，那么它们是互相覆盖吗？\n\n不会，因为看到的内存地址是虚拟内存地址，映射到实际的物理内存地址是两个不同的地方。\n\n实际上，不同的程序是用到的资源是隔离、互不影响的。\n\n##### 4. 并发\n同一个主程序有两个线程在操纵同一个内存，会发生什么事？\n\n##### 5.持久性\n内存在断电或系统崩溃的时候会丢失数据。持久化数据，通过软件系统和硬件磁盘IO来实现。\n\n软件系统称之为文件系统(file system)。\n\n如何实现持久化数据到文件？\n- 调用open()创建和打开文件\n- write()写入文件\n- close()关闭文件\n\n注意：为防止写时系统崩溃或高效写入，文件系统有写时复制、写入特定数据结构(简单列表或复杂B树)。\n\n##### 6.操作系统的发展历史\n- 早期：只有一些库，操作人员排列任务进行批处理。\n- 为了安全性，如防止一些文件被访问，增加系统调用的概念，通过内核接口形式只暴露出特定硬件的能力，让用户态的应用程序只能有特定权限。\n- 多程序时代，操作系统不应该同时只跑一个任务\n\n##### 关于虚拟化的对话\n虚拟化cpu是抽象出来的概念，比如说有一个桃子，让每个人都看起来像是拥有一个“桃子”而不自知，这便是虚拟化的奥义所在。\n\n##### 7. 抽象：进程\n进程是在运行的程序。进程本身不具备生命周期，它只是磁盘上的一堆数据(字节)，是操作系统让程序真正运行起来。\n\ncpu虚拟化的假象是怎么做到的？\n```\n操作系统通过时分共享技术，允许进程使用一段时间cpu后，切换到另一个进程。操作系统还有不同的算法调度策略，例如哪个进程优先级高，哪个运行时间更长等。\n```\n\n进程的组成成分：\n```\n进程含有内存，内存用于存储代码指令，程序生成的数据也被写入内存，当然，进程也操纵文件系统当它用到文件的时候\n```\n\n与进程相关的系统调用：\n- create() 创建进程\n- destory() 销毁进程\n- status() 进程状态\n\n问：操作系统运行进程(程序)的细节？\n```\n操作系统将代码和静态文件加载到内存中，这个过程需要从磁盘读取字节。程序在运行前会分配运行时栈，用于存放局部变量等。程序运行时，在C语言需要显示分配动态内存堆（heap）用于存放产生的动态数据。\n\n数据结构（如链表、散列表、树和其他有趣的数据结构）需要堆。起初堆会很小。随着程序运行，通过 malloc()库 API 请求更多内存，操作系统可能会参与分配更多内存给进程，以满足这些调用。\n\n操作系统还将执行一些初始化任务，如为每个进程打开标准输入、标准输出、错误三个文件描述符（file descriptor）。\n\n做完初始化任务、分配stack内存这一系列任务后，开始启动进程，即运行main()。\n```\n\n进程状态\n- 运行（running） 进程在使用cpu，意味着cpu在执行指令\n- 就绪（ready） 进程准备好了，但由于某种原因，操作系统决定不在此时运行\n- 阻塞（blocked）进程执行了某种操作，直到发生某个时间才运行。如写文件到磁盘，它就会被阻塞，其他进程可以使用cpu\n\n##### 一、什么是性能问题？\n```\n突然有一天，公司开发在夜里打电话给你，“现在有很多用户说系统弹出一个错误，系统繁忙”之类的。\n开发同事一看接口返回500，看了后端日志好像没有特别明显的报错信息。\n\n这时，你赶忙上服务器看下nginx日志，好家伙，一看nginx日志发现后发现接口请求过了60s还没有响应。\n`top`看一下服务器资源，用户空间的cpu使用率100%，是哪些进程呢？php-fpm。里面发生了什么？我不知道啊？\n唉，重启服务能解决90%的问题，那就重启看看吧。果然，重启后用户反馈正常了。害，暂时是没有问题了，那下次再来一次怎么办？...无后续\n```\n\n看，cpu100%这类问题就归属性能问题。\n\n##### 研究性能问题需要学习操作系统主要组件原理\nCPU性能、内存、磁盘IO性能、网络\n\n衡量性能的指标：\n并发（吞吐）、响应快（时延）\n\n##### 二、CPU性能篇\n\n##### 什么是平均负载\n看一个例子：`uptime`\n```\n$ uptime\n02:34:03 up 2 days, 20:14,  1 user,  load average: 0.63, 0.83, 0.88\n```\n说明：\n- `02:34:03` 当前时间\n- `up 2 days, 20:14` 系统从开机后运行的时长\n- `1 user` 正在登录的用户数\n- `load average: 0.63, 0.83, 0.88` 最近1分钟、5分钟、15分钟的平均负载(Load average)\n\n`平均负载`是指单位时间内，系统处于可运行(Running或ready)和不可中断(blocked)的进程数。结合最近1分钟、5分钟、15分钟的平均负载，我们可以全面了解cpu的使用情况。像了解一天早中晚的气候变化。\n\nRunning是指正在使用cpu；Ready是指代码(指令)已经加载到了内存，等cpu来执行指令；\n\n不可中断是指进程在使用cpu，突然需要进行磁盘IO(读写)的长时间操作，先不用cpu，等IO操作完毕再回来使用cpu。\n\n一般而言，平均负载超过cpu核数70%就要检查cpu的使用情况，考虑是否优化。\n\n查看cpu核数\n```\ngrep 'model name' /proc/cpuinfo|wc -l\n```\n\n##### 什么是CPU使用率\ncpu使用率衡量了单位时间cpu的繁忙程度。\n\n对于I/O密集型进程，平均负载就高，但cpu却不繁忙，也就是cpu使用率不高。\n\n看一个例子：`top`\n```\n$ top\ntop - 11:15:27 up 40 days, 51 min,  1 user,  load average: 0.32, 0.27, 0.26\nTasks: 356 total,   1 running, 355 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  4.2 us,  5.6 sy,  0.0 ni, 90.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\nMiB Mem :   7777.8 total,    281.6 free,   4394.8 used,   3101.3 buff/cache\nMiB Swap:   2048.0 total,    580.2 free,   1467.8 used.   3015.1 avail Mem \n\n    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                                                                                                 \n3811294 root      20   0   15440   4540   3768 R  20.0   0.1   0:00.03 top                                                                                                                     \n    682 avahi     20   0   10524   5696   3120 S   6.7   0.1 110:29.16 avahi-daemon                                                                                                            \n   7726 root      20   0  750872  21192   5772 S   6.7   0.3 259:56.50 travel-api  \n```\n说明：\n- `%Cpu(s)` 比如说有4个cpu，%Cpu(s)代表这4个的平均使用率。\n\n  cpu = 用户空间使用率(us) + 内核空间使用率(sy) + 空闲(id)\n\n  `ni` 用户空间通过改变进程优先级占用的cpu百分比\n\n  `wa` 等待io操作占用的cpu百分比\n\n  `hi/si` 硬/软中断进行cpu上下文切换占用的百分比\n\n- `RES` 使用的真实物理内存（KB）\n- `%CPU` 一个cpu的使用率，毕竟一个进程只占用一个cpu\n- `TIME+` 累计使用cpu时间\n\n附top使用快捷键说明：\n- `shift + m` # 按照内存使用率排序，shift m 等价于大写M\n- `shift + p` # 按照cpu使用率排序\n- `c` # 显示命令全路径\n- `F` # 挑选你要选择展示的列，按下空格选中，* 代表会展示的列(列会出现在最后)，按q退出。\n    可以展示进程使用哪一个cpu\n- 按`1` # 展示每个cpu的使用情况\n\n#### 工具合集\n```\n# 压测\nab -c 100 -n 1000 http://192.168.0.10:10000/   # 一次并发100，共1000\n...\nRequests per second: 87.86 [#/sec] (mean)   # 平均每秒处理87个请求\nTime per request: 1138.229 [ms] (mean)     # 平均1个1.13秒\n...\n\n\n# 根据名称查看进程树\npstree | grep stress\n\n# 监视短时进程\nexecsnoop\n\n# 监视IO\ndstat 1 10 # 每隔1s输出，共10组，关注输出read和writ\npidstat -d -p 4344 1 3 # 指定进程的读写速率\nstrace -p 6082 # 追踪进程\n\n# 模拟网络SYN FLOOD 攻击\nhping3 -S -p 80 -i u100 192.168.0.30 \n说明：\n-S参数表示设置TCP协议的SYN（同步序列号）\n-i u100表示每隔100微秒发送一个网络帧\n\n# 网络\nyum install sysstat\nsar -n DEV 1 # -n DEV 表示显示网络收发的报告，间隔1秒输出一组数据\n\ntcpdump -i eth0 -n tcp port 80 # 抓包，-n不解析协议名和主机名\n\n# 列出cpu个数\nlscpu\n\n# 查看进程父子关系\nyum install -y psmisc\npstree -aps $pid\n\n# 资源优化\n应用角度：吞吐 & 延迟\n系统角度：cpu使用率\n\n# 内存\nfree\n说明：\n- available：未使用内存 + 可回收缓存\n- used：已使用内存，包含共享内存\n- cache/buff：cache是文件内存，buff是磁盘内存\ntop\n说明：\n- VIRT：虚拟内存，进程申请的但还未分配实际物理内存\n- RES: 实际占用的物理内存\n- SHR: 共享内存，一般是公共库、动态链接库\n- %MEM：物理内存占总内存百分比\n\n# 内存泄漏分析\nvmstat 3 # 实时查看内存变动\nyum install bcc\nmemleak -a -p $pid\n\n# Swap\nswapoff -a # 关闭\n\n# IO\ndf -i\n\niostat -d -x 1 # -d -x 显示所有磁盘指标\n说明：\n- r/s 每s向磁盘发送的读请求数\n- rkB/s 每s从磁盘读的数据量\n- %util IO使用量\n\n# 进程io使用情况\npidstat -d 1\n\n# 慢sql场景\n1.接口返回时间长；\nshow full processlist; # 查看所有会话连接\nexplain select * from products where productName='time';\n说明：\n- type为ALL代表全表查询\n- key为null代表无索引建立\n- rows代表扫描行数\n\nCREATE INDEX products_index ON products (productName); # 建立索引，类型为Nomal，products是表名，productName是字段。\n\nexplain select * from user where name=\"小明\"; # type为ref\n\n# 慢redis查询\n# redis持久化还是会用到磁盘\nstrace -f -T -tt -p 9085 # -f表示跟踪子进程和子线程，-T表示显示系统调用的时长，-tt表示显示跟踪时间；-e fdatasync 可以指定函数\n\n# 网络\n应用 - 提供统一接口\n表示 - 数据转换\n会话 - 维护通信连接\n传输 - 加表头成包进行传输\n网络 - 路由\n数据链路 - MAC寻址\n物理 - 物理网络传输帧\n\nMTU - 1500 规定包大小\n\nss -ltnp | head -n 3\n说明：\nRecv，Send-Q 接收(未被程序处理)和发送包队列(未被远端确认)，不为0代表包堆积\nstate有Listening和Established\n\n# 网络吞吐\nsar -n DEV 1\nethtool ens18 | grep Speed # 千兆网卡\n\n# 理解一台机器65536个端口\n对于客户端，确实受限；但对服务端，可以组合客户端ip+端口。\n\n# 测试某台机器tcp吞吐(带宽能力)\nyum install iperf3\n服务器1：iperf3 -s -i 1 -p 10000 # -s表示启动服务端，-i表示汇报间隔，-p表示监听端口\n\n# -c表示启动客户端，192.168.0.30为目标服务器的IP# -b表示目标带宽(单位是bits/s)# -t表示测试时间# -P表示并发数，-p表示目标服务器监听端口\n服务器2：iperf3 -c 192.168.0.30 -b 1G -t 15 -P 2 -p 10000\n\n回服务端看接口：SUM 行就是测试的汇总结果。receiver 表接收，Bandwidth是带宽。\n\n# 压测\nyum install -y httpd-tools\nab -c 1000 -n 10000 http://192.168.0.30/  # -c表示并发请求数为1000，-n表示总的请求数为10000\n说明：\nRequests per second # 平均每个请求花费时间\n第二个Time per request # 实际请求的响应时间 \n\n# 域名\nnslookup time.geekbang.org\n\ndig +trace @114.114.114.114 +nodnssec time.geekbang.org # +trace表示开启跟踪查询# +nodnssec表示禁止DNS安全扩展；@114.114.114.114指定使用的dns服务器\ndns流程查询说明：client(time.geekbang.org) -> 114.114.114.114(可能存在time.geekbang.org缓存) -> NS .org -> m.root-servers.net -> dns9.hichina.com -> ip返回114 DNS服务器。\n\n# 内网域名解析可以通过自建DNS服务器或配置/etc/hosts文件\n# 强制使用https好处：防止dns劫持\n# 抓包\ntcpdump -nn udp port 53 or host 35.190.27.188 \n说明：\n-nn ，表示不解析抓包中的域名（即不反向解析）、协议以及端口号。\nudp port 53 ，表示只显示 UDP 协议的端口号（包括源端口和目的端口）为 53 的包。\nhost 35.190.27.188 ，表示只显示 IP 地址（包括源地址和目的地址）为 35.190.27.188 的包。\nor 表 或\n\n第一条：\n36909+ 表示查询标识值，它也会出现在响应中，加号表示启用递归查询\nA? 表示查询 A 记录。\ngeektime.org. 表示待查询的域名。\n30 表示报文长度。\n\n第二条：\n则是从 114.114.114.114 发送回来的 DNS 响应—-域名 geektime.org. 的 A 记录值为 35.190.27.188。\n\n第三条和第四条，是 ICMP echo request 和 ICMP echo reply，响应包的时间戳 14:02:31.539667，减去请求包的时间戳 14:02:31.508164 ，就可以得到，这次 ICMP 所用时间为 30ms\n\n第5第6条：\n反向地址解析 PTR 请求，只有请求包，却没有应答包。ping -n 可禁止ptr解析。\n\n# tcpdump选项解析\n-A 以ASCII格式显示网络包(不指定则只显示头信息)\n-i 指定网口\n-nn 不反向解析\n-w 保存到文件，以.pcap后缀结尾\n\nhost 主机过滤\nport 端口过滤\ntcp 协议过滤\nand/or/not 逻辑表达\n\n# tcpdump输出格式\n时间戳 协议 源地址.源端口 > 目的地址.目的端口 网络包详细信息\ntcpdump -nn udp port 53 or host 35.190.27.188 -w ping.pcap\n\n# tcpdump & wireshark 抓包 tcp & http案例分析三次握手和四次挥手工作原理\ndig +short example.com93.184.216.34\ntcpdump -nn host 93.184.216.34 -w web.pcap\n\ncurl http://example.com\n\nwireshark中分析：\n由于 HTTP 基于 TCP，所以最先看到的三个包，分别是 TCP 三次握手的包。接下来，中间的才是 HTTP 请求和响应包，而最后的三个包，则是 TCP 连接断开时的三次挥手包。\n\n从菜单栏中，点击 Statistics -> Flow Graph，然后，在弹出的界面中的 Flow type 选择 TCP Flows，可以更清晰的看到，整个过程中 TCP 流的执行过程。\n\n之所以有三个包，是因为服务器端收到客户端的 FIN 后，服务器端同时也要关闭连接，这样就可以把 ACK 和 FIN 合并到一起发送，节省了一个包，变成了“三次挥手”。\n\n而通常情况下，服务器端收到客户端的 FIN 后，很可能还没发送完数据，所以就会先回复客户端一个 ACK 包。稍等一会儿，完成所有数据包的发送后，才会发送 FIN 包。这也就是四次挥手了。\n\n# HTTP分析工具：fiddler\n$ curl -s -w 'Http code: %{http_code}\\nTotal time:%{time_total}s\\n' -o /dev/null http://192.168.0.30/ # 获取状态码和时间\n\n# 模拟ddos攻击\nhping3 -S -p 80 -i u10 192.168.0.30 #  -S参数表示设置TCP协议的SYN（同步序列号），-p表示目的端口为80。-i u10表示每隔10微秒发送一个网络帧\n\ncurl -w 'Http code: %{http_code}\\nTotal time:%{time_total}s\\n' -o /dev/null --connect-timeout 10 http://192.168.0.30 # --connect-timeout表示连接超时时间\n\nsar -n DEV 1 # 观察收发情况\n\ntcpdump -i eth0 -n tcp port 80\n结果：Flags [S] 表示这是一个 SYN 包。大量的 SYN 包表明，这是一个 SYN Flood 攻击。即客户端构造大量的 SYN 包，请求建立 TCP 连接；而服务器收到包后，会向源 IP 发送 SYN+ACK 报文，并等待三次握手的最后一次 ACK 报文，直到超时。\n\nTCP 半开连接的方法，关键在于 SYN_RECEIVED 状态的连接。\nnetstat -n -p | grep SYN_REC # -n表示不解析名字，-p表示显示连接所属进程\n\niptables -I INPUT -s 192.168.0.2 -p tcp -j REJECT # 封ip\niptables -A INPUT -p tcp --syn -m limit --limit 1/s -j ACCEPT # 限制syn并发数为每秒1次\niptables -I INPUT -p tcp --dport 80 --syn -m recent --name SYN_FLOOD --update --seconds 60 --hitcount 10 -j REJECT # 限制单个IP在60秒新建立的连接数为10\n\n# 半开状态的连接数是有限制的\nsysctl net.ipv4.tcp_max_syn_backlog\n\nsysctl -w net.ipv4.tcp_max_syn_backlog=1024 # 增加半开连接容量\n\nsysctl -w net.ipv4.tcp_synack_retries=1 # 减少半开连接重试次数\n\n# 开启 SYN Cookies不维护半开连接状态\nsysctl -w net.ipv4.tcp_syncookies=1\n\n# 持久化保存\n$ cat /etc/sysctl.conf\nnet.ipv4.tcp_syncookies = 1\nnet.ipv4.tcp_synack_retries = 1\nnet.ipv4.tcp_max_syn_backlog = 1024\n\n# 基于一些服务端会禁用icmp，使用hping3 or traceroute 测试延迟\nhping3 -c 3 -S -p 80 baidu.com # -c表示发送3次请求，-S表示设置TCP SYN，-p表示端口号为80\n\ntraceroute --tcp -p 80 -n baidu.com  # --tcp表示使用TCP协议，-p表示端口号，-n表示不对结果中的IP地址执行反向域名解析\n\n# NAT\nSNAT(转换源ip，实现上网)\n192.168.0.2 -> 路由器（NAT网关）转换成公网ip：100.100.100.100 -> 百度\n\nDNAT(暴露内网服务)\nbaidu.com 发回响应包 -> 路由器 -> 公网ip替换成192.168.0.2 -> 192.168.0.2\n\n# NAT实现原理\nLinux 内核提供的 Netfilter ，具体可通过工具iptables或firewalld实现链配置。\n\n对SNAT: iptables -t nat -A POSTROUTING -s 192.168.0.0/16 -j MASQUERADE\n对DNAT: iptables -t nat -A PREROUTING -d 100.100.100.100 -j DNAT --to-destination 192.168.0.2\n\n# 在使用 iptables 配置 NAT 规则时，Linux 需要转发来自其他 IP 的网络包，需开启 Linux 的 IP 转发功能\n查看：sysctl net.ipv4.ip_forward\n开启：sysctl -w net.ipv4.ip_forward=1\n持久化保存：\ncat /etc/sysctl.conf | grep ip_forward\nnet.ipv4.ip_forward=1\n\n# 网络工具合集\nsar # 可查看网络接口、进程、IP地址吞吐量(BPS) \nnetstat或ss # 网络连接\nping或hping3 # 网络延迟\ntraceroute # 查看路由链路\nnslookup或dig # DNS解析\niptables # 防火墙或NAT\ntcpdump & wireshark # 抓包\n\n# 网络优化内核参数设置\n- 增大每个套接字的缓冲区大小 net.core.optmem_max；推荐81920\n- 增大套接字接收缓冲区大小 net.core.rmem_max 和发送缓冲区大小 net.core.wmem_max； 513920/513920\n\n# cat /proc/sys/net/ipv4/tcp_mem 查看配置\n#cat /proc/net/sockstat 查看当前tcp的统计\n#sysctl -w net.ipv4.tcp_mem=新配置 来增大\n```\n\n### mysql慢查询\n```\nshow variables like \"%long%\";   # 查看long_query_time慢查询时间，默认是10s，超过则被记为慢查询并记录到慢查询日志\n\nset global long_query_time=1;  # 设置时间，退出navicat重登即可看到生效\n\nshow variables like \"%slow%\"; # 慢查询slow_query_log是否开启\n\nset global slow_query_log='ON';  # 启动慢查询\n```\n### mysql表名大小写\n```\nshow variables like \"%case%\"; # lower_case_table_names为1表示大小写不敏感。\n```\n### mysql备份种类说明\n```\n1. 全量\n2. 增量\n3. 差异备份\n\n恢复组合：\n1.全量加增量\n    周一的全量+周二到周五之间全部增量，特点：步骤多，时间长。\n\n2.全量加差异\n    周一的全量加周五的差异备份。特点：步骤少，数据量少，时间短。\n```\n","source":"_posts/第37期：操作系统-性能优化.md","raw":"---\ntitle: 第37期：操作系统&性能优化\ndate: 2023-05-25 12:19:49\ntags:\n---\n##### 书籍\nhttps://pages.cs.wisc.edu/~remzi/OSTEP/Chinese/01.pdf\n\n#### 操作系统学习笔记\n学习方法：首先听课，做笔记，阅读笔记，巩固知识，实践\n\n##### 1.程序运行时发生了什么？\n```\n一个程序运行时在做什么？执行指令。cpu从内存get到一条指令，对其解码然后执行它，比如说两个数相加。完成指令后执行下一条，依此类推，直到程序完成。\n```\n\n问题：如何将硬件资源虚拟化？\n```\n通过操作系统实现，操作系统（也可称之为虚拟机）提供API，利用虚拟机的功能（如访问文件、内存、计算），让用户可以通过软件的形式告诉操作系统做什么。操作系统api称之为系统调用（system call），让应用程序调用。由于操作系统提供了这些调用来运行程序，访问内存、文件等资源，有时也会称操作系统提供了标准库(standard library)。\n```\n##### 2.虚拟化CPU\n虚拟化CPU有什么好处？\n```\n运行多个程序在一个单核cpu机器上，看起来有多个程序`同时`运行。实际上，cpu是在几个程序间不断地切换运行。\n\n可以通过接口的形式去暂停程序或查看程序。\n```\n##### 3.虚拟化内存\n物理内存的模式本质上是一个存满字节的数组。读内存就是读取某个位置上的地址，再读取地址上的值。\n\n再来说说程序运行发生了什么？\n```\n程序运行时，代码数据以某种数据结构被加载到内存，通过指令操作内存上的数据。\n```\n\n场景：当1套代码同时运行2个程序，程序运行的代码逻辑是：分配1个内存，打印其内存地址。结果两个程序打印出来的内存地址是一样的，那么它们是互相覆盖吗？\n\n不会，因为看到的内存地址是虚拟内存地址，映射到实际的物理内存地址是两个不同的地方。\n\n实际上，不同的程序是用到的资源是隔离、互不影响的。\n\n##### 4. 并发\n同一个主程序有两个线程在操纵同一个内存，会发生什么事？\n\n##### 5.持久性\n内存在断电或系统崩溃的时候会丢失数据。持久化数据，通过软件系统和硬件磁盘IO来实现。\n\n软件系统称之为文件系统(file system)。\n\n如何实现持久化数据到文件？\n- 调用open()创建和打开文件\n- write()写入文件\n- close()关闭文件\n\n注意：为防止写时系统崩溃或高效写入，文件系统有写时复制、写入特定数据结构(简单列表或复杂B树)。\n\n##### 6.操作系统的发展历史\n- 早期：只有一些库，操作人员排列任务进行批处理。\n- 为了安全性，如防止一些文件被访问，增加系统调用的概念，通过内核接口形式只暴露出特定硬件的能力，让用户态的应用程序只能有特定权限。\n- 多程序时代，操作系统不应该同时只跑一个任务\n\n##### 关于虚拟化的对话\n虚拟化cpu是抽象出来的概念，比如说有一个桃子，让每个人都看起来像是拥有一个“桃子”而不自知，这便是虚拟化的奥义所在。\n\n##### 7. 抽象：进程\n进程是在运行的程序。进程本身不具备生命周期，它只是磁盘上的一堆数据(字节)，是操作系统让程序真正运行起来。\n\ncpu虚拟化的假象是怎么做到的？\n```\n操作系统通过时分共享技术，允许进程使用一段时间cpu后，切换到另一个进程。操作系统还有不同的算法调度策略，例如哪个进程优先级高，哪个运行时间更长等。\n```\n\n进程的组成成分：\n```\n进程含有内存，内存用于存储代码指令，程序生成的数据也被写入内存，当然，进程也操纵文件系统当它用到文件的时候\n```\n\n与进程相关的系统调用：\n- create() 创建进程\n- destory() 销毁进程\n- status() 进程状态\n\n问：操作系统运行进程(程序)的细节？\n```\n操作系统将代码和静态文件加载到内存中，这个过程需要从磁盘读取字节。程序在运行前会分配运行时栈，用于存放局部变量等。程序运行时，在C语言需要显示分配动态内存堆（heap）用于存放产生的动态数据。\n\n数据结构（如链表、散列表、树和其他有趣的数据结构）需要堆。起初堆会很小。随着程序运行，通过 malloc()库 API 请求更多内存，操作系统可能会参与分配更多内存给进程，以满足这些调用。\n\n操作系统还将执行一些初始化任务，如为每个进程打开标准输入、标准输出、错误三个文件描述符（file descriptor）。\n\n做完初始化任务、分配stack内存这一系列任务后，开始启动进程，即运行main()。\n```\n\n进程状态\n- 运行（running） 进程在使用cpu，意味着cpu在执行指令\n- 就绪（ready） 进程准备好了，但由于某种原因，操作系统决定不在此时运行\n- 阻塞（blocked）进程执行了某种操作，直到发生某个时间才运行。如写文件到磁盘，它就会被阻塞，其他进程可以使用cpu\n\n##### 一、什么是性能问题？\n```\n突然有一天，公司开发在夜里打电话给你，“现在有很多用户说系统弹出一个错误，系统繁忙”之类的。\n开发同事一看接口返回500，看了后端日志好像没有特别明显的报错信息。\n\n这时，你赶忙上服务器看下nginx日志，好家伙，一看nginx日志发现后发现接口请求过了60s还没有响应。\n`top`看一下服务器资源，用户空间的cpu使用率100%，是哪些进程呢？php-fpm。里面发生了什么？我不知道啊？\n唉，重启服务能解决90%的问题，那就重启看看吧。果然，重启后用户反馈正常了。害，暂时是没有问题了，那下次再来一次怎么办？...无后续\n```\n\n看，cpu100%这类问题就归属性能问题。\n\n##### 研究性能问题需要学习操作系统主要组件原理\nCPU性能、内存、磁盘IO性能、网络\n\n衡量性能的指标：\n并发（吞吐）、响应快（时延）\n\n##### 二、CPU性能篇\n\n##### 什么是平均负载\n看一个例子：`uptime`\n```\n$ uptime\n02:34:03 up 2 days, 20:14,  1 user,  load average: 0.63, 0.83, 0.88\n```\n说明：\n- `02:34:03` 当前时间\n- `up 2 days, 20:14` 系统从开机后运行的时长\n- `1 user` 正在登录的用户数\n- `load average: 0.63, 0.83, 0.88` 最近1分钟、5分钟、15分钟的平均负载(Load average)\n\n`平均负载`是指单位时间内，系统处于可运行(Running或ready)和不可中断(blocked)的进程数。结合最近1分钟、5分钟、15分钟的平均负载，我们可以全面了解cpu的使用情况。像了解一天早中晚的气候变化。\n\nRunning是指正在使用cpu；Ready是指代码(指令)已经加载到了内存，等cpu来执行指令；\n\n不可中断是指进程在使用cpu，突然需要进行磁盘IO(读写)的长时间操作，先不用cpu，等IO操作完毕再回来使用cpu。\n\n一般而言，平均负载超过cpu核数70%就要检查cpu的使用情况，考虑是否优化。\n\n查看cpu核数\n```\ngrep 'model name' /proc/cpuinfo|wc -l\n```\n\n##### 什么是CPU使用率\ncpu使用率衡量了单位时间cpu的繁忙程度。\n\n对于I/O密集型进程，平均负载就高，但cpu却不繁忙，也就是cpu使用率不高。\n\n看一个例子：`top`\n```\n$ top\ntop - 11:15:27 up 40 days, 51 min,  1 user,  load average: 0.32, 0.27, 0.26\nTasks: 356 total,   1 running, 355 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  4.2 us,  5.6 sy,  0.0 ni, 90.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\nMiB Mem :   7777.8 total,    281.6 free,   4394.8 used,   3101.3 buff/cache\nMiB Swap:   2048.0 total,    580.2 free,   1467.8 used.   3015.1 avail Mem \n\n    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                                                                                                 \n3811294 root      20   0   15440   4540   3768 R  20.0   0.1   0:00.03 top                                                                                                                     \n    682 avahi     20   0   10524   5696   3120 S   6.7   0.1 110:29.16 avahi-daemon                                                                                                            \n   7726 root      20   0  750872  21192   5772 S   6.7   0.3 259:56.50 travel-api  \n```\n说明：\n- `%Cpu(s)` 比如说有4个cpu，%Cpu(s)代表这4个的平均使用率。\n\n  cpu = 用户空间使用率(us) + 内核空间使用率(sy) + 空闲(id)\n\n  `ni` 用户空间通过改变进程优先级占用的cpu百分比\n\n  `wa` 等待io操作占用的cpu百分比\n\n  `hi/si` 硬/软中断进行cpu上下文切换占用的百分比\n\n- `RES` 使用的真实物理内存（KB）\n- `%CPU` 一个cpu的使用率，毕竟一个进程只占用一个cpu\n- `TIME+` 累计使用cpu时间\n\n附top使用快捷键说明：\n- `shift + m` # 按照内存使用率排序，shift m 等价于大写M\n- `shift + p` # 按照cpu使用率排序\n- `c` # 显示命令全路径\n- `F` # 挑选你要选择展示的列，按下空格选中，* 代表会展示的列(列会出现在最后)，按q退出。\n    可以展示进程使用哪一个cpu\n- 按`1` # 展示每个cpu的使用情况\n\n#### 工具合集\n```\n# 压测\nab -c 100 -n 1000 http://192.168.0.10:10000/   # 一次并发100，共1000\n...\nRequests per second: 87.86 [#/sec] (mean)   # 平均每秒处理87个请求\nTime per request: 1138.229 [ms] (mean)     # 平均1个1.13秒\n...\n\n\n# 根据名称查看进程树\npstree | grep stress\n\n# 监视短时进程\nexecsnoop\n\n# 监视IO\ndstat 1 10 # 每隔1s输出，共10组，关注输出read和writ\npidstat -d -p 4344 1 3 # 指定进程的读写速率\nstrace -p 6082 # 追踪进程\n\n# 模拟网络SYN FLOOD 攻击\nhping3 -S -p 80 -i u100 192.168.0.30 \n说明：\n-S参数表示设置TCP协议的SYN（同步序列号）\n-i u100表示每隔100微秒发送一个网络帧\n\n# 网络\nyum install sysstat\nsar -n DEV 1 # -n DEV 表示显示网络收发的报告，间隔1秒输出一组数据\n\ntcpdump -i eth0 -n tcp port 80 # 抓包，-n不解析协议名和主机名\n\n# 列出cpu个数\nlscpu\n\n# 查看进程父子关系\nyum install -y psmisc\npstree -aps $pid\n\n# 资源优化\n应用角度：吞吐 & 延迟\n系统角度：cpu使用率\n\n# 内存\nfree\n说明：\n- available：未使用内存 + 可回收缓存\n- used：已使用内存，包含共享内存\n- cache/buff：cache是文件内存，buff是磁盘内存\ntop\n说明：\n- VIRT：虚拟内存，进程申请的但还未分配实际物理内存\n- RES: 实际占用的物理内存\n- SHR: 共享内存，一般是公共库、动态链接库\n- %MEM：物理内存占总内存百分比\n\n# 内存泄漏分析\nvmstat 3 # 实时查看内存变动\nyum install bcc\nmemleak -a -p $pid\n\n# Swap\nswapoff -a # 关闭\n\n# IO\ndf -i\n\niostat -d -x 1 # -d -x 显示所有磁盘指标\n说明：\n- r/s 每s向磁盘发送的读请求数\n- rkB/s 每s从磁盘读的数据量\n- %util IO使用量\n\n# 进程io使用情况\npidstat -d 1\n\n# 慢sql场景\n1.接口返回时间长；\nshow full processlist; # 查看所有会话连接\nexplain select * from products where productName='time';\n说明：\n- type为ALL代表全表查询\n- key为null代表无索引建立\n- rows代表扫描行数\n\nCREATE INDEX products_index ON products (productName); # 建立索引，类型为Nomal，products是表名，productName是字段。\n\nexplain select * from user where name=\"小明\"; # type为ref\n\n# 慢redis查询\n# redis持久化还是会用到磁盘\nstrace -f -T -tt -p 9085 # -f表示跟踪子进程和子线程，-T表示显示系统调用的时长，-tt表示显示跟踪时间；-e fdatasync 可以指定函数\n\n# 网络\n应用 - 提供统一接口\n表示 - 数据转换\n会话 - 维护通信连接\n传输 - 加表头成包进行传输\n网络 - 路由\n数据链路 - MAC寻址\n物理 - 物理网络传输帧\n\nMTU - 1500 规定包大小\n\nss -ltnp | head -n 3\n说明：\nRecv，Send-Q 接收(未被程序处理)和发送包队列(未被远端确认)，不为0代表包堆积\nstate有Listening和Established\n\n# 网络吞吐\nsar -n DEV 1\nethtool ens18 | grep Speed # 千兆网卡\n\n# 理解一台机器65536个端口\n对于客户端，确实受限；但对服务端，可以组合客户端ip+端口。\n\n# 测试某台机器tcp吞吐(带宽能力)\nyum install iperf3\n服务器1：iperf3 -s -i 1 -p 10000 # -s表示启动服务端，-i表示汇报间隔，-p表示监听端口\n\n# -c表示启动客户端，192.168.0.30为目标服务器的IP# -b表示目标带宽(单位是bits/s)# -t表示测试时间# -P表示并发数，-p表示目标服务器监听端口\n服务器2：iperf3 -c 192.168.0.30 -b 1G -t 15 -P 2 -p 10000\n\n回服务端看接口：SUM 行就是测试的汇总结果。receiver 表接收，Bandwidth是带宽。\n\n# 压测\nyum install -y httpd-tools\nab -c 1000 -n 10000 http://192.168.0.30/  # -c表示并发请求数为1000，-n表示总的请求数为10000\n说明：\nRequests per second # 平均每个请求花费时间\n第二个Time per request # 实际请求的响应时间 \n\n# 域名\nnslookup time.geekbang.org\n\ndig +trace @114.114.114.114 +nodnssec time.geekbang.org # +trace表示开启跟踪查询# +nodnssec表示禁止DNS安全扩展；@114.114.114.114指定使用的dns服务器\ndns流程查询说明：client(time.geekbang.org) -> 114.114.114.114(可能存在time.geekbang.org缓存) -> NS .org -> m.root-servers.net -> dns9.hichina.com -> ip返回114 DNS服务器。\n\n# 内网域名解析可以通过自建DNS服务器或配置/etc/hosts文件\n# 强制使用https好处：防止dns劫持\n# 抓包\ntcpdump -nn udp port 53 or host 35.190.27.188 \n说明：\n-nn ，表示不解析抓包中的域名（即不反向解析）、协议以及端口号。\nudp port 53 ，表示只显示 UDP 协议的端口号（包括源端口和目的端口）为 53 的包。\nhost 35.190.27.188 ，表示只显示 IP 地址（包括源地址和目的地址）为 35.190.27.188 的包。\nor 表 或\n\n第一条：\n36909+ 表示查询标识值，它也会出现在响应中，加号表示启用递归查询\nA? 表示查询 A 记录。\ngeektime.org. 表示待查询的域名。\n30 表示报文长度。\n\n第二条：\n则是从 114.114.114.114 发送回来的 DNS 响应—-域名 geektime.org. 的 A 记录值为 35.190.27.188。\n\n第三条和第四条，是 ICMP echo request 和 ICMP echo reply，响应包的时间戳 14:02:31.539667，减去请求包的时间戳 14:02:31.508164 ，就可以得到，这次 ICMP 所用时间为 30ms\n\n第5第6条：\n反向地址解析 PTR 请求，只有请求包，却没有应答包。ping -n 可禁止ptr解析。\n\n# tcpdump选项解析\n-A 以ASCII格式显示网络包(不指定则只显示头信息)\n-i 指定网口\n-nn 不反向解析\n-w 保存到文件，以.pcap后缀结尾\n\nhost 主机过滤\nport 端口过滤\ntcp 协议过滤\nand/or/not 逻辑表达\n\n# tcpdump输出格式\n时间戳 协议 源地址.源端口 > 目的地址.目的端口 网络包详细信息\ntcpdump -nn udp port 53 or host 35.190.27.188 -w ping.pcap\n\n# tcpdump & wireshark 抓包 tcp & http案例分析三次握手和四次挥手工作原理\ndig +short example.com93.184.216.34\ntcpdump -nn host 93.184.216.34 -w web.pcap\n\ncurl http://example.com\n\nwireshark中分析：\n由于 HTTP 基于 TCP，所以最先看到的三个包，分别是 TCP 三次握手的包。接下来，中间的才是 HTTP 请求和响应包，而最后的三个包，则是 TCP 连接断开时的三次挥手包。\n\n从菜单栏中，点击 Statistics -> Flow Graph，然后，在弹出的界面中的 Flow type 选择 TCP Flows，可以更清晰的看到，整个过程中 TCP 流的执行过程。\n\n之所以有三个包，是因为服务器端收到客户端的 FIN 后，服务器端同时也要关闭连接，这样就可以把 ACK 和 FIN 合并到一起发送，节省了一个包，变成了“三次挥手”。\n\n而通常情况下，服务器端收到客户端的 FIN 后，很可能还没发送完数据，所以就会先回复客户端一个 ACK 包。稍等一会儿，完成所有数据包的发送后，才会发送 FIN 包。这也就是四次挥手了。\n\n# HTTP分析工具：fiddler\n$ curl -s -w 'Http code: %{http_code}\\nTotal time:%{time_total}s\\n' -o /dev/null http://192.168.0.30/ # 获取状态码和时间\n\n# 模拟ddos攻击\nhping3 -S -p 80 -i u10 192.168.0.30 #  -S参数表示设置TCP协议的SYN（同步序列号），-p表示目的端口为80。-i u10表示每隔10微秒发送一个网络帧\n\ncurl -w 'Http code: %{http_code}\\nTotal time:%{time_total}s\\n' -o /dev/null --connect-timeout 10 http://192.168.0.30 # --connect-timeout表示连接超时时间\n\nsar -n DEV 1 # 观察收发情况\n\ntcpdump -i eth0 -n tcp port 80\n结果：Flags [S] 表示这是一个 SYN 包。大量的 SYN 包表明，这是一个 SYN Flood 攻击。即客户端构造大量的 SYN 包，请求建立 TCP 连接；而服务器收到包后，会向源 IP 发送 SYN+ACK 报文，并等待三次握手的最后一次 ACK 报文，直到超时。\n\nTCP 半开连接的方法，关键在于 SYN_RECEIVED 状态的连接。\nnetstat -n -p | grep SYN_REC # -n表示不解析名字，-p表示显示连接所属进程\n\niptables -I INPUT -s 192.168.0.2 -p tcp -j REJECT # 封ip\niptables -A INPUT -p tcp --syn -m limit --limit 1/s -j ACCEPT # 限制syn并发数为每秒1次\niptables -I INPUT -p tcp --dport 80 --syn -m recent --name SYN_FLOOD --update --seconds 60 --hitcount 10 -j REJECT # 限制单个IP在60秒新建立的连接数为10\n\n# 半开状态的连接数是有限制的\nsysctl net.ipv4.tcp_max_syn_backlog\n\nsysctl -w net.ipv4.tcp_max_syn_backlog=1024 # 增加半开连接容量\n\nsysctl -w net.ipv4.tcp_synack_retries=1 # 减少半开连接重试次数\n\n# 开启 SYN Cookies不维护半开连接状态\nsysctl -w net.ipv4.tcp_syncookies=1\n\n# 持久化保存\n$ cat /etc/sysctl.conf\nnet.ipv4.tcp_syncookies = 1\nnet.ipv4.tcp_synack_retries = 1\nnet.ipv4.tcp_max_syn_backlog = 1024\n\n# 基于一些服务端会禁用icmp，使用hping3 or traceroute 测试延迟\nhping3 -c 3 -S -p 80 baidu.com # -c表示发送3次请求，-S表示设置TCP SYN，-p表示端口号为80\n\ntraceroute --tcp -p 80 -n baidu.com  # --tcp表示使用TCP协议，-p表示端口号，-n表示不对结果中的IP地址执行反向域名解析\n\n# NAT\nSNAT(转换源ip，实现上网)\n192.168.0.2 -> 路由器（NAT网关）转换成公网ip：100.100.100.100 -> 百度\n\nDNAT(暴露内网服务)\nbaidu.com 发回响应包 -> 路由器 -> 公网ip替换成192.168.0.2 -> 192.168.0.2\n\n# NAT实现原理\nLinux 内核提供的 Netfilter ，具体可通过工具iptables或firewalld实现链配置。\n\n对SNAT: iptables -t nat -A POSTROUTING -s 192.168.0.0/16 -j MASQUERADE\n对DNAT: iptables -t nat -A PREROUTING -d 100.100.100.100 -j DNAT --to-destination 192.168.0.2\n\n# 在使用 iptables 配置 NAT 规则时，Linux 需要转发来自其他 IP 的网络包，需开启 Linux 的 IP 转发功能\n查看：sysctl net.ipv4.ip_forward\n开启：sysctl -w net.ipv4.ip_forward=1\n持久化保存：\ncat /etc/sysctl.conf | grep ip_forward\nnet.ipv4.ip_forward=1\n\n# 网络工具合集\nsar # 可查看网络接口、进程、IP地址吞吐量(BPS) \nnetstat或ss # 网络连接\nping或hping3 # 网络延迟\ntraceroute # 查看路由链路\nnslookup或dig # DNS解析\niptables # 防火墙或NAT\ntcpdump & wireshark # 抓包\n\n# 网络优化内核参数设置\n- 增大每个套接字的缓冲区大小 net.core.optmem_max；推荐81920\n- 增大套接字接收缓冲区大小 net.core.rmem_max 和发送缓冲区大小 net.core.wmem_max； 513920/513920\n\n# cat /proc/sys/net/ipv4/tcp_mem 查看配置\n#cat /proc/net/sockstat 查看当前tcp的统计\n#sysctl -w net.ipv4.tcp_mem=新配置 来增大\n```\n\n### mysql慢查询\n```\nshow variables like \"%long%\";   # 查看long_query_time慢查询时间，默认是10s，超过则被记为慢查询并记录到慢查询日志\n\nset global long_query_time=1;  # 设置时间，退出navicat重登即可看到生效\n\nshow variables like \"%slow%\"; # 慢查询slow_query_log是否开启\n\nset global slow_query_log='ON';  # 启动慢查询\n```\n### mysql表名大小写\n```\nshow variables like \"%case%\"; # lower_case_table_names为1表示大小写不敏感。\n```\n### mysql备份种类说明\n```\n1. 全量\n2. 增量\n3. 差异备份\n\n恢复组合：\n1.全量加增量\n    周一的全量+周二到周五之间全部增量，特点：步骤多，时间长。\n\n2.全量加差异\n    周一的全量加周五的差异备份。特点：步骤少，数据量少，时间短。\n```\n","slug":"第37期：操作系统-性能优化","published":1,"updated":"2024-03-06T06:55:18.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt71000r9klngq9f3djh","content":"<h5 id=\"书籍\"><a href=\"#书籍\" class=\"headerlink\" title=\"书籍\"></a>书籍</h5><p><a href=\"https://pages.cs.wisc.edu/~remzi/OSTEP/Chinese/01.pdf\">https://pages.cs.wisc.edu/~remzi/OSTEP/Chinese/01.pdf</a></p>\n<h4 id=\"操作系统学习笔记\"><a href=\"#操作系统学习笔记\" class=\"headerlink\" title=\"操作系统学习笔记\"></a>操作系统学习笔记</h4><p>学习方法：首先听课，做笔记，阅读笔记，巩固知识，实践</p>\n<h5 id=\"1-程序运行时发生了什么？\"><a href=\"#1-程序运行时发生了什么？\" class=\"headerlink\" title=\"1.程序运行时发生了什么？\"></a>1.程序运行时发生了什么？</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个程序运行时在做什么？执行指令。cpu从内存get到一条指令，对其解码然后执行它，比如说两个数相加。完成指令后执行下一条，依此类推，直到程序完成。</span><br></pre></td></tr></table></figure>\n\n<p>问题：如何将硬件资源虚拟化？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通过操作系统实现，操作系统（也可称之为虚拟机）提供API，利用虚拟机的功能（如访问文件、内存、计算），让用户可以通过软件的形式告诉操作系统做什么。操作系统api称之为系统调用（system call），让应用程序调用。由于操作系统提供了这些调用来运行程序，访问内存、文件等资源，有时也会称操作系统提供了标准库(standard library)。</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-虚拟化CPU\"><a href=\"#2-虚拟化CPU\" class=\"headerlink\" title=\"2.虚拟化CPU\"></a>2.虚拟化CPU</h5><p>虚拟化CPU有什么好处？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行多个程序在一个单核cpu机器上，看起来有多个程序`同时`运行。实际上，cpu是在几个程序间不断地切换运行。</span><br><span class=\"line\"></span><br><span class=\"line\">可以通过接口的形式去暂停程序或查看程序。</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-虚拟化内存\"><a href=\"#3-虚拟化内存\" class=\"headerlink\" title=\"3.虚拟化内存\"></a>3.虚拟化内存</h5><p>物理内存的模式本质上是一个存满字节的数组。读内存就是读取某个位置上的地址，再读取地址上的值。</p>\n<p>再来说说程序运行发生了什么？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">程序运行时，代码数据以某种数据结构被加载到内存，通过指令操作内存上的数据。</span><br></pre></td></tr></table></figure>\n\n<p>场景：当1套代码同时运行2个程序，程序运行的代码逻辑是：分配1个内存，打印其内存地址。结果两个程序打印出来的内存地址是一样的，那么它们是互相覆盖吗？</p>\n<p>不会，因为看到的内存地址是虚拟内存地址，映射到实际的物理内存地址是两个不同的地方。</p>\n<p>实际上，不同的程序是用到的资源是隔离、互不影响的。</p>\n<h5 id=\"4-并发\"><a href=\"#4-并发\" class=\"headerlink\" title=\"4. 并发\"></a>4. 并发</h5><p>同一个主程序有两个线程在操纵同一个内存，会发生什么事？</p>\n<h5 id=\"5-持久性\"><a href=\"#5-持久性\" class=\"headerlink\" title=\"5.持久性\"></a>5.持久性</h5><p>内存在断电或系统崩溃的时候会丢失数据。持久化数据，通过软件系统和硬件磁盘IO来实现。</p>\n<p>软件系统称之为文件系统(file system)。</p>\n<p>如何实现持久化数据到文件？</p>\n<ul>\n<li>调用open()创建和打开文件</li>\n<li>write()写入文件</li>\n<li>close()关闭文件</li>\n</ul>\n<p>注意：为防止写时系统崩溃或高效写入，文件系统有写时复制、写入特定数据结构(简单列表或复杂B树)。</p>\n<h5 id=\"6-操作系统的发展历史\"><a href=\"#6-操作系统的发展历史\" class=\"headerlink\" title=\"6.操作系统的发展历史\"></a>6.操作系统的发展历史</h5><ul>\n<li>早期：只有一些库，操作人员排列任务进行批处理。</li>\n<li>为了安全性，如防止一些文件被访问，增加系统调用的概念，通过内核接口形式只暴露出特定硬件的能力，让用户态的应用程序只能有特定权限。</li>\n<li>多程序时代，操作系统不应该同时只跑一个任务</li>\n</ul>\n<h5 id=\"关于虚拟化的对话\"><a href=\"#关于虚拟化的对话\" class=\"headerlink\" title=\"关于虚拟化的对话\"></a>关于虚拟化的对话</h5><p>虚拟化cpu是抽象出来的概念，比如说有一个桃子，让每个人都看起来像是拥有一个“桃子”而不自知，这便是虚拟化的奥义所在。</p>\n<h5 id=\"7-抽象：进程\"><a href=\"#7-抽象：进程\" class=\"headerlink\" title=\"7. 抽象：进程\"></a>7. 抽象：进程</h5><p>进程是在运行的程序。进程本身不具备生命周期，它只是磁盘上的一堆数据(字节)，是操作系统让程序真正运行起来。</p>\n<p>cpu虚拟化的假象是怎么做到的？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">操作系统通过时分共享技术，允许进程使用一段时间cpu后，切换到另一个进程。操作系统还有不同的算法调度策略，例如哪个进程优先级高，哪个运行时间更长等。</span><br></pre></td></tr></table></figure>\n\n<p>进程的组成成分：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">进程含有内存，内存用于存储代码指令，程序生成的数据也被写入内存，当然，进程也操纵文件系统当它用到文件的时候</span><br></pre></td></tr></table></figure>\n\n<p>与进程相关的系统调用：</p>\n<ul>\n<li>create() 创建进程</li>\n<li>destory() 销毁进程</li>\n<li>status() 进程状态</li>\n</ul>\n<p>问：操作系统运行进程(程序)的细节？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">操作系统将代码和静态文件加载到内存中，这个过程需要从磁盘读取字节。程序在运行前会分配运行时栈，用于存放局部变量等。程序运行时，在C语言需要显示分配动态内存堆（heap）用于存放产生的动态数据。</span><br><span class=\"line\"></span><br><span class=\"line\">数据结构（如链表、散列表、树和其他有趣的数据结构）需要堆。起初堆会很小。随着程序运行，通过 malloc()库 API 请求更多内存，操作系统可能会参与分配更多内存给进程，以满足这些调用。</span><br><span class=\"line\"></span><br><span class=\"line\">操作系统还将执行一些初始化任务，如为每个进程打开标准输入、标准输出、错误三个文件描述符（file descriptor）。</span><br><span class=\"line\"></span><br><span class=\"line\">做完初始化任务、分配stack内存这一系列任务后，开始启动进程，即运行main()。</span><br></pre></td></tr></table></figure>\n\n<p>进程状态</p>\n<ul>\n<li>运行（running） 进程在使用cpu，意味着cpu在执行指令</li>\n<li>就绪（ready） 进程准备好了，但由于某种原因，操作系统决定不在此时运行</li>\n<li>阻塞（blocked）进程执行了某种操作，直到发生某个时间才运行。如写文件到磁盘，它就会被阻塞，其他进程可以使用cpu</li>\n</ul>\n<h5 id=\"一、什么是性能问题？\"><a href=\"#一、什么是性能问题？\" class=\"headerlink\" title=\"一、什么是性能问题？\"></a>一、什么是性能问题？</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">突然有一天，公司开发在夜里打电话给你，“现在有很多用户说系统弹出一个错误，系统繁忙”之类的。</span><br><span class=\"line\">开发同事一看接口返回500，看了后端日志好像没有特别明显的报错信息。</span><br><span class=\"line\"></span><br><span class=\"line\">这时，你赶忙上服务器看下nginx日志，好家伙，一看nginx日志发现后发现接口请求过了60s还没有响应。</span><br><span class=\"line\">`top`看一下服务器资源，用户空间的cpu使用率100%，是哪些进程呢？php-fpm。里面发生了什么？我不知道啊？</span><br><span class=\"line\">唉，重启服务能解决90%的问题，那就重启看看吧。果然，重启后用户反馈正常了。害，暂时是没有问题了，那下次再来一次怎么办？...无后续</span><br></pre></td></tr></table></figure>\n\n<p>看，cpu100%这类问题就归属性能问题。</p>\n<h5 id=\"研究性能问题需要学习操作系统主要组件原理\"><a href=\"#研究性能问题需要学习操作系统主要组件原理\" class=\"headerlink\" title=\"研究性能问题需要学习操作系统主要组件原理\"></a>研究性能问题需要学习操作系统主要组件原理</h5><p>CPU性能、内存、磁盘IO性能、网络</p>\n<p>衡量性能的指标：<br>并发（吞吐）、响应快（时延）</p>\n<h5 id=\"二、CPU性能篇\"><a href=\"#二、CPU性能篇\" class=\"headerlink\" title=\"二、CPU性能篇\"></a>二、CPU性能篇</h5><h5 id=\"什么是平均负载\"><a href=\"#什么是平均负载\" class=\"headerlink\" title=\"什么是平均负载\"></a>什么是平均负载</h5><p>看一个例子：<code>uptime</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ uptime</span><br><span class=\"line\">02:34:03 up 2 days, 20:14,  1 user,  load average: 0.63, 0.83, 0.88</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><code>02:34:03</code> 当前时间</li>\n<li><code>up 2 days, 20:14</code> 系统从开机后运行的时长</li>\n<li><code>1 user</code> 正在登录的用户数</li>\n<li><code>load average: 0.63, 0.83, 0.88</code> 最近1分钟、5分钟、15分钟的平均负载(Load average)</li>\n</ul>\n<p><code>平均负载</code>是指单位时间内，系统处于可运行(Running或ready)和不可中断(blocked)的进程数。结合最近1分钟、5分钟、15分钟的平均负载，我们可以全面了解cpu的使用情况。像了解一天早中晚的气候变化。</p>\n<p>Running是指正在使用cpu；Ready是指代码(指令)已经加载到了内存，等cpu来执行指令；</p>\n<p>不可中断是指进程在使用cpu，突然需要进行磁盘IO(读写)的长时间操作，先不用cpu，等IO操作完毕再回来使用cpu。</p>\n<p>一般而言，平均负载超过cpu核数70%就要检查cpu的使用情况，考虑是否优化。</p>\n<p>查看cpu核数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep &#x27;model name&#x27; /proc/cpuinfo|wc -l</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"什么是CPU使用率\"><a href=\"#什么是CPU使用率\" class=\"headerlink\" title=\"什么是CPU使用率\"></a>什么是CPU使用率</h5><p>cpu使用率衡量了单位时间cpu的繁忙程度。</p>\n<p>对于I&#x2F;O密集型进程，平均负载就高，但cpu却不繁忙，也就是cpu使用率不高。</p>\n<p>看一个例子：<code>top</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ top</span><br><span class=\"line\">top - 11:15:27 up 40 days, 51 min,  1 user,  load average: 0.32, 0.27, 0.26</span><br><span class=\"line\">Tasks: 356 total,   1 running, 355 sleeping,   0 stopped,   0 zombie</span><br><span class=\"line\">%Cpu(s):  4.2 us,  5.6 sy,  0.0 ni, 90.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class=\"line\">MiB Mem :   7777.8 total,    281.6 free,   4394.8 used,   3101.3 buff/cache</span><br><span class=\"line\">MiB Swap:   2048.0 total,    580.2 free,   1467.8 used.   3015.1 avail Mem </span><br><span class=\"line\"></span><br><span class=\"line\">    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                                                                                                 </span><br><span class=\"line\">3811294 root      20   0   15440   4540   3768 R  20.0   0.1   0:00.03 top                                                                                                                     </span><br><span class=\"line\">    682 avahi     20   0   10524   5696   3120 S   6.7   0.1 110:29.16 avahi-daemon                                                                                                            </span><br><span class=\"line\">   7726 root      20   0  750872  21192   5772 S   6.7   0.3 259:56.50 travel-api  </span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><p><code>%Cpu(s)</code> 比如说有4个cpu，%Cpu(s)代表这4个的平均使用率。</p>\n<p>cpu &#x3D; 用户空间使用率(us) + 内核空间使用率(sy) + 空闲(id)</p>\n<p><code>ni</code> 用户空间通过改变进程优先级占用的cpu百分比</p>\n<p><code>wa</code> 等待io操作占用的cpu百分比</p>\n<p><code>hi/si</code> 硬&#x2F;软中断进行cpu上下文切换占用的百分比</p>\n</li>\n<li><p><code>RES</code> 使用的真实物理内存（KB）</p>\n</li>\n<li><p><code>%CPU</code> 一个cpu的使用率，毕竟一个进程只占用一个cpu</p>\n</li>\n<li><p><code>TIME+</code> 累计使用cpu时间</p>\n</li>\n</ul>\n<p>附top使用快捷键说明：</p>\n<ul>\n<li><code>shift + m</code> # 按照内存使用率排序，shift m 等价于大写M</li>\n<li><code>shift + p</code> # 按照cpu使用率排序</li>\n<li><code>c</code> # 显示命令全路径</li>\n<li><code>F</code> # 挑选你要选择展示的列，按下空格选中，* 代表会展示的列(列会出现在最后)，按q退出。<br>  可以展示进程使用哪一个cpu</li>\n<li>按<code>1</code> # 展示每个cpu的使用情况</li>\n</ul>\n<h4 id=\"工具合集\"><a href=\"#工具合集\" class=\"headerlink\" title=\"工具合集\"></a>工具合集</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 压测</span><br><span class=\"line\">ab -c 100 -n 1000 http://192.168.0.10:10000/   # 一次并发100，共1000</span><br><span class=\"line\">...</span><br><span class=\"line\">Requests per second: 87.86 [#/sec] (mean)   # 平均每秒处理87个请求</span><br><span class=\"line\">Time per request: 1138.229 [ms] (mean)     # 平均1个1.13秒</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 根据名称查看进程树</span><br><span class=\"line\">pstree | grep stress</span><br><span class=\"line\"></span><br><span class=\"line\"># 监视短时进程</span><br><span class=\"line\">execsnoop</span><br><span class=\"line\"></span><br><span class=\"line\"># 监视IO</span><br><span class=\"line\">dstat 1 10 # 每隔1s输出，共10组，关注输出read和writ</span><br><span class=\"line\">pidstat -d -p 4344 1 3 # 指定进程的读写速率</span><br><span class=\"line\">strace -p 6082 # 追踪进程</span><br><span class=\"line\"></span><br><span class=\"line\"># 模拟网络SYN FLOOD 攻击</span><br><span class=\"line\">hping3 -S -p 80 -i u100 192.168.0.30 </span><br><span class=\"line\">说明：</span><br><span class=\"line\">-S参数表示设置TCP协议的SYN（同步序列号）</span><br><span class=\"line\">-i u100表示每隔100微秒发送一个网络帧</span><br><span class=\"line\"></span><br><span class=\"line\"># 网络</span><br><span class=\"line\">yum install sysstat</span><br><span class=\"line\">sar -n DEV 1 # -n DEV 表示显示网络收发的报告，间隔1秒输出一组数据</span><br><span class=\"line\"></span><br><span class=\"line\">tcpdump -i eth0 -n tcp port 80 # 抓包，-n不解析协议名和主机名</span><br><span class=\"line\"></span><br><span class=\"line\"># 列出cpu个数</span><br><span class=\"line\">lscpu</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看进程父子关系</span><br><span class=\"line\">yum install -y psmisc</span><br><span class=\"line\">pstree -aps $pid</span><br><span class=\"line\"></span><br><span class=\"line\"># 资源优化</span><br><span class=\"line\">应用角度：吞吐 &amp; 延迟</span><br><span class=\"line\">系统角度：cpu使用率</span><br><span class=\"line\"></span><br><span class=\"line\"># 内存</span><br><span class=\"line\">free</span><br><span class=\"line\">说明：</span><br><span class=\"line\">- available：未使用内存 + 可回收缓存</span><br><span class=\"line\">- used：已使用内存，包含共享内存</span><br><span class=\"line\">- cache/buff：cache是文件内存，buff是磁盘内存</span><br><span class=\"line\">top</span><br><span class=\"line\">说明：</span><br><span class=\"line\">- VIRT：虚拟内存，进程申请的但还未分配实际物理内存</span><br><span class=\"line\">- RES: 实际占用的物理内存</span><br><span class=\"line\">- SHR: 共享内存，一般是公共库、动态链接库</span><br><span class=\"line\">- %MEM：物理内存占总内存百分比</span><br><span class=\"line\"></span><br><span class=\"line\"># 内存泄漏分析</span><br><span class=\"line\">vmstat 3 # 实时查看内存变动</span><br><span class=\"line\">yum install bcc</span><br><span class=\"line\">memleak -a -p $pid</span><br><span class=\"line\"></span><br><span class=\"line\"># Swap</span><br><span class=\"line\">swapoff -a # 关闭</span><br><span class=\"line\"></span><br><span class=\"line\"># IO</span><br><span class=\"line\">df -i</span><br><span class=\"line\"></span><br><span class=\"line\">iostat -d -x 1 # -d -x 显示所有磁盘指标</span><br><span class=\"line\">说明：</span><br><span class=\"line\">- r/s 每s向磁盘发送的读请求数</span><br><span class=\"line\">- rkB/s 每s从磁盘读的数据量</span><br><span class=\"line\">- %util IO使用量</span><br><span class=\"line\"></span><br><span class=\"line\"># 进程io使用情况</span><br><span class=\"line\">pidstat -d 1</span><br><span class=\"line\"></span><br><span class=\"line\"># 慢sql场景</span><br><span class=\"line\">1.接口返回时间长；</span><br><span class=\"line\">show full processlist; # 查看所有会话连接</span><br><span class=\"line\">explain select * from products where productName=&#x27;time&#x27;;</span><br><span class=\"line\">说明：</span><br><span class=\"line\">- type为ALL代表全表查询</span><br><span class=\"line\">- key为null代表无索引建立</span><br><span class=\"line\">- rows代表扫描行数</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE INDEX products_index ON products (productName); # 建立索引，类型为Nomal，products是表名，productName是字段。</span><br><span class=\"line\"></span><br><span class=\"line\">explain select * from user where name=&quot;小明&quot;; # type为ref</span><br><span class=\"line\"></span><br><span class=\"line\"># 慢redis查询</span><br><span class=\"line\"># redis持久化还是会用到磁盘</span><br><span class=\"line\">strace -f -T -tt -p 9085 # -f表示跟踪子进程和子线程，-T表示显示系统调用的时长，-tt表示显示跟踪时间；-e fdatasync 可以指定函数</span><br><span class=\"line\"></span><br><span class=\"line\"># 网络</span><br><span class=\"line\">应用 - 提供统一接口</span><br><span class=\"line\">表示 - 数据转换</span><br><span class=\"line\">会话 - 维护通信连接</span><br><span class=\"line\">传输 - 加表头成包进行传输</span><br><span class=\"line\">网络 - 路由</span><br><span class=\"line\">数据链路 - MAC寻址</span><br><span class=\"line\">物理 - 物理网络传输帧</span><br><span class=\"line\"></span><br><span class=\"line\">MTU - 1500 规定包大小</span><br><span class=\"line\"></span><br><span class=\"line\">ss -ltnp | head -n 3</span><br><span class=\"line\">说明：</span><br><span class=\"line\">Recv，Send-Q 接收(未被程序处理)和发送包队列(未被远端确认)，不为0代表包堆积</span><br><span class=\"line\">state有Listening和Established</span><br><span class=\"line\"></span><br><span class=\"line\"># 网络吞吐</span><br><span class=\"line\">sar -n DEV 1</span><br><span class=\"line\">ethtool ens18 | grep Speed # 千兆网卡</span><br><span class=\"line\"></span><br><span class=\"line\"># 理解一台机器65536个端口</span><br><span class=\"line\">对于客户端，确实受限；但对服务端，可以组合客户端ip+端口。</span><br><span class=\"line\"></span><br><span class=\"line\"># 测试某台机器tcp吞吐(带宽能力)</span><br><span class=\"line\">yum install iperf3</span><br><span class=\"line\">服务器1：iperf3 -s -i 1 -p 10000 # -s表示启动服务端，-i表示汇报间隔，-p表示监听端口</span><br><span class=\"line\"></span><br><span class=\"line\"># -c表示启动客户端，192.168.0.30为目标服务器的IP# -b表示目标带宽(单位是bits/s)# -t表示测试时间# -P表示并发数，-p表示目标服务器监听端口</span><br><span class=\"line\">服务器2：iperf3 -c 192.168.0.30 -b 1G -t 15 -P 2 -p 10000</span><br><span class=\"line\"></span><br><span class=\"line\">回服务端看接口：SUM 行就是测试的汇总结果。receiver 表接收，Bandwidth是带宽。</span><br><span class=\"line\"></span><br><span class=\"line\"># 压测</span><br><span class=\"line\">yum install -y httpd-tools</span><br><span class=\"line\">ab -c 1000 -n 10000 http://192.168.0.30/  # -c表示并发请求数为1000，-n表示总的请求数为10000</span><br><span class=\"line\">说明：</span><br><span class=\"line\">Requests per second # 平均每个请求花费时间</span><br><span class=\"line\">第二个Time per request # 实际请求的响应时间 </span><br><span class=\"line\"></span><br><span class=\"line\"># 域名</span><br><span class=\"line\">nslookup time.geekbang.org</span><br><span class=\"line\"></span><br><span class=\"line\">dig +trace @114.114.114.114 +nodnssec time.geekbang.org # +trace表示开启跟踪查询# +nodnssec表示禁止DNS安全扩展；@114.114.114.114指定使用的dns服务器</span><br><span class=\"line\">dns流程查询说明：client(time.geekbang.org) -&gt; 114.114.114.114(可能存在time.geekbang.org缓存) -&gt; NS .org -&gt; m.root-servers.net -&gt; dns9.hichina.com -&gt; ip返回114 DNS服务器。</span><br><span class=\"line\"></span><br><span class=\"line\"># 内网域名解析可以通过自建DNS服务器或配置/etc/hosts文件</span><br><span class=\"line\"># 强制使用https好处：防止dns劫持</span><br><span class=\"line\"># 抓包</span><br><span class=\"line\">tcpdump -nn udp port 53 or host 35.190.27.188 </span><br><span class=\"line\">说明：</span><br><span class=\"line\">-nn ，表示不解析抓包中的域名（即不反向解析）、协议以及端口号。</span><br><span class=\"line\">udp port 53 ，表示只显示 UDP 协议的端口号（包括源端口和目的端口）为 53 的包。</span><br><span class=\"line\">host 35.190.27.188 ，表示只显示 IP 地址（包括源地址和目的地址）为 35.190.27.188 的包。</span><br><span class=\"line\">or 表 或</span><br><span class=\"line\"></span><br><span class=\"line\">第一条：</span><br><span class=\"line\">36909+ 表示查询标识值，它也会出现在响应中，加号表示启用递归查询</span><br><span class=\"line\">A? 表示查询 A 记录。</span><br><span class=\"line\">geektime.org. 表示待查询的域名。</span><br><span class=\"line\">30 表示报文长度。</span><br><span class=\"line\"></span><br><span class=\"line\">第二条：</span><br><span class=\"line\">则是从 114.114.114.114 发送回来的 DNS 响应—-域名 geektime.org. 的 A 记录值为 35.190.27.188。</span><br><span class=\"line\"></span><br><span class=\"line\">第三条和第四条，是 ICMP echo request 和 ICMP echo reply，响应包的时间戳 14:02:31.539667，减去请求包的时间戳 14:02:31.508164 ，就可以得到，这次 ICMP 所用时间为 30ms</span><br><span class=\"line\"></span><br><span class=\"line\">第5第6条：</span><br><span class=\"line\">反向地址解析 PTR 请求，只有请求包，却没有应答包。ping -n 可禁止ptr解析。</span><br><span class=\"line\"></span><br><span class=\"line\"># tcpdump选项解析</span><br><span class=\"line\">-A 以ASCII格式显示网络包(不指定则只显示头信息)</span><br><span class=\"line\">-i 指定网口</span><br><span class=\"line\">-nn 不反向解析</span><br><span class=\"line\">-w 保存到文件，以.pcap后缀结尾</span><br><span class=\"line\"></span><br><span class=\"line\">host 主机过滤</span><br><span class=\"line\">port 端口过滤</span><br><span class=\"line\">tcp 协议过滤</span><br><span class=\"line\">and/or/not 逻辑表达</span><br><span class=\"line\"></span><br><span class=\"line\"># tcpdump输出格式</span><br><span class=\"line\">时间戳 协议 源地址.源端口 &gt; 目的地址.目的端口 网络包详细信息</span><br><span class=\"line\">tcpdump -nn udp port 53 or host 35.190.27.188 -w ping.pcap</span><br><span class=\"line\"></span><br><span class=\"line\"># tcpdump &amp; wireshark 抓包 tcp &amp; http案例分析三次握手和四次挥手工作原理</span><br><span class=\"line\">dig +short example.com93.184.216.34</span><br><span class=\"line\">tcpdump -nn host 93.184.216.34 -w web.pcap</span><br><span class=\"line\"></span><br><span class=\"line\">curl http://example.com</span><br><span class=\"line\"></span><br><span class=\"line\">wireshark中分析：</span><br><span class=\"line\">由于 HTTP 基于 TCP，所以最先看到的三个包，分别是 TCP 三次握手的包。接下来，中间的才是 HTTP 请求和响应包，而最后的三个包，则是 TCP 连接断开时的三次挥手包。</span><br><span class=\"line\"></span><br><span class=\"line\">从菜单栏中，点击 Statistics -&gt; Flow Graph，然后，在弹出的界面中的 Flow type 选择 TCP Flows，可以更清晰的看到，整个过程中 TCP 流的执行过程。</span><br><span class=\"line\"></span><br><span class=\"line\">之所以有三个包，是因为服务器端收到客户端的 FIN 后，服务器端同时也要关闭连接，这样就可以把 ACK 和 FIN 合并到一起发送，节省了一个包，变成了“三次挥手”。</span><br><span class=\"line\"></span><br><span class=\"line\">而通常情况下，服务器端收到客户端的 FIN 后，很可能还没发送完数据，所以就会先回复客户端一个 ACK 包。稍等一会儿，完成所有数据包的发送后，才会发送 FIN 包。这也就是四次挥手了。</span><br><span class=\"line\"></span><br><span class=\"line\"># HTTP分析工具：fiddler</span><br><span class=\"line\">$ curl -s -w &#x27;Http code: %&#123;http_code&#125;\\nTotal time:%&#123;time_total&#125;s\\n&#x27; -o /dev/null http://192.168.0.30/ # 获取状态码和时间</span><br><span class=\"line\"></span><br><span class=\"line\"># 模拟ddos攻击</span><br><span class=\"line\">hping3 -S -p 80 -i u10 192.168.0.30 #  -S参数表示设置TCP协议的SYN（同步序列号），-p表示目的端口为80。-i u10表示每隔10微秒发送一个网络帧</span><br><span class=\"line\"></span><br><span class=\"line\">curl -w &#x27;Http code: %&#123;http_code&#125;\\nTotal time:%&#123;time_total&#125;s\\n&#x27; -o /dev/null --connect-timeout 10 http://192.168.0.30 # --connect-timeout表示连接超时时间</span><br><span class=\"line\"></span><br><span class=\"line\">sar -n DEV 1 # 观察收发情况</span><br><span class=\"line\"></span><br><span class=\"line\">tcpdump -i eth0 -n tcp port 80</span><br><span class=\"line\">结果：Flags [S] 表示这是一个 SYN 包。大量的 SYN 包表明，这是一个 SYN Flood 攻击。即客户端构造大量的 SYN 包，请求建立 TCP 连接；而服务器收到包后，会向源 IP 发送 SYN+ACK 报文，并等待三次握手的最后一次 ACK 报文，直到超时。</span><br><span class=\"line\"></span><br><span class=\"line\">TCP 半开连接的方法，关键在于 SYN_RECEIVED 状态的连接。</span><br><span class=\"line\">netstat -n -p | grep SYN_REC # -n表示不解析名字，-p表示显示连接所属进程</span><br><span class=\"line\"></span><br><span class=\"line\">iptables -I INPUT -s 192.168.0.2 -p tcp -j REJECT # 封ip</span><br><span class=\"line\">iptables -A INPUT -p tcp --syn -m limit --limit 1/s -j ACCEPT # 限制syn并发数为每秒1次</span><br><span class=\"line\">iptables -I INPUT -p tcp --dport 80 --syn -m recent --name SYN_FLOOD --update --seconds 60 --hitcount 10 -j REJECT # 限制单个IP在60秒新建立的连接数为10</span><br><span class=\"line\"></span><br><span class=\"line\"># 半开状态的连接数是有限制的</span><br><span class=\"line\">sysctl net.ipv4.tcp_max_syn_backlog</span><br><span class=\"line\"></span><br><span class=\"line\">sysctl -w net.ipv4.tcp_max_syn_backlog=1024 # 增加半开连接容量</span><br><span class=\"line\"></span><br><span class=\"line\">sysctl -w net.ipv4.tcp_synack_retries=1 # 减少半开连接重试次数</span><br><span class=\"line\"></span><br><span class=\"line\"># 开启 SYN Cookies不维护半开连接状态</span><br><span class=\"line\">sysctl -w net.ipv4.tcp_syncookies=1</span><br><span class=\"line\"></span><br><span class=\"line\"># 持久化保存</span><br><span class=\"line\">$ cat /etc/sysctl.conf</span><br><span class=\"line\">net.ipv4.tcp_syncookies = 1</span><br><span class=\"line\">net.ipv4.tcp_synack_retries = 1</span><br><span class=\"line\">net.ipv4.tcp_max_syn_backlog = 1024</span><br><span class=\"line\"></span><br><span class=\"line\"># 基于一些服务端会禁用icmp，使用hping3 or traceroute 测试延迟</span><br><span class=\"line\">hping3 -c 3 -S -p 80 baidu.com # -c表示发送3次请求，-S表示设置TCP SYN，-p表示端口号为80</span><br><span class=\"line\"></span><br><span class=\"line\">traceroute --tcp -p 80 -n baidu.com  # --tcp表示使用TCP协议，-p表示端口号，-n表示不对结果中的IP地址执行反向域名解析</span><br><span class=\"line\"></span><br><span class=\"line\"># NAT</span><br><span class=\"line\">SNAT(转换源ip，实现上网)</span><br><span class=\"line\">192.168.0.2 -&gt; 路由器（NAT网关）转换成公网ip：100.100.100.100 -&gt; 百度</span><br><span class=\"line\"></span><br><span class=\"line\">DNAT(暴露内网服务)</span><br><span class=\"line\">baidu.com 发回响应包 -&gt; 路由器 -&gt; 公网ip替换成192.168.0.2 -&gt; 192.168.0.2</span><br><span class=\"line\"></span><br><span class=\"line\"># NAT实现原理</span><br><span class=\"line\">Linux 内核提供的 Netfilter ，具体可通过工具iptables或firewalld实现链配置。</span><br><span class=\"line\"></span><br><span class=\"line\">对SNAT: iptables -t nat -A POSTROUTING -s 192.168.0.0/16 -j MASQUERADE</span><br><span class=\"line\">对DNAT: iptables -t nat -A PREROUTING -d 100.100.100.100 -j DNAT --to-destination 192.168.0.2</span><br><span class=\"line\"></span><br><span class=\"line\"># 在使用 iptables 配置 NAT 规则时，Linux 需要转发来自其他 IP 的网络包，需开启 Linux 的 IP 转发功能</span><br><span class=\"line\">查看：sysctl net.ipv4.ip_forward</span><br><span class=\"line\">开启：sysctl -w net.ipv4.ip_forward=1</span><br><span class=\"line\">持久化保存：</span><br><span class=\"line\">cat /etc/sysctl.conf | grep ip_forward</span><br><span class=\"line\">net.ipv4.ip_forward=1</span><br><span class=\"line\"></span><br><span class=\"line\"># 网络工具合集</span><br><span class=\"line\">sar # 可查看网络接口、进程、IP地址吞吐量(BPS) </span><br><span class=\"line\">netstat或ss # 网络连接</span><br><span class=\"line\">ping或hping3 # 网络延迟</span><br><span class=\"line\">traceroute # 查看路由链路</span><br><span class=\"line\">nslookup或dig # DNS解析</span><br><span class=\"line\">iptables # 防火墙或NAT</span><br><span class=\"line\">tcpdump &amp; wireshark # 抓包</span><br><span class=\"line\"></span><br><span class=\"line\"># 网络优化内核参数设置</span><br><span class=\"line\">- 增大每个套接字的缓冲区大小 net.core.optmem_max；推荐81920</span><br><span class=\"line\">- 增大套接字接收缓冲区大小 net.core.rmem_max 和发送缓冲区大小 net.core.wmem_max； 513920/513920</span><br><span class=\"line\"></span><br><span class=\"line\"># cat /proc/sys/net/ipv4/tcp_mem 查看配置</span><br><span class=\"line\">#cat /proc/net/sockstat 查看当前tcp的统计</span><br><span class=\"line\">#sysctl -w net.ipv4.tcp_mem=新配置 来增大</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mysql慢查询\"><a href=\"#mysql慢查询\" class=\"headerlink\" title=\"mysql慢查询\"></a>mysql慢查询</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show variables like &quot;%long%&quot;;   # 查看long_query_time慢查询时间，默认是10s，超过则被记为慢查询并记录到慢查询日志</span><br><span class=\"line\"></span><br><span class=\"line\">set global long_query_time=1;  # 设置时间，退出navicat重登即可看到生效</span><br><span class=\"line\"></span><br><span class=\"line\">show variables like &quot;%slow%&quot;; # 慢查询slow_query_log是否开启</span><br><span class=\"line\"></span><br><span class=\"line\">set global slow_query_log=&#x27;ON&#x27;;  # 启动慢查询</span><br></pre></td></tr></table></figure>\n<h3 id=\"mysql表名大小写\"><a href=\"#mysql表名大小写\" class=\"headerlink\" title=\"mysql表名大小写\"></a>mysql表名大小写</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show variables like &quot;%case%&quot;; # lower_case_table_names为1表示大小写不敏感。</span><br></pre></td></tr></table></figure>\n<h3 id=\"mysql备份种类说明\"><a href=\"#mysql备份种类说明\" class=\"headerlink\" title=\"mysql备份种类说明\"></a>mysql备份种类说明</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 全量</span><br><span class=\"line\">2. 增量</span><br><span class=\"line\">3. 差异备份</span><br><span class=\"line\"></span><br><span class=\"line\">恢复组合：</span><br><span class=\"line\">1.全量加增量</span><br><span class=\"line\">    周一的全量+周二到周五之间全部增量，特点：步骤多，时间长。</span><br><span class=\"line\"></span><br><span class=\"line\">2.全量加差异</span><br><span class=\"line\">    周一的全量加周五的差异备份。特点：步骤少，数据量少，时间短。</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"书籍\"><a href=\"#书籍\" class=\"headerlink\" title=\"书籍\"></a>书籍</h5><p><a href=\"https://pages.cs.wisc.edu/~remzi/OSTEP/Chinese/01.pdf\">https://pages.cs.wisc.edu/~remzi/OSTEP/Chinese/01.pdf</a></p>\n<h4 id=\"操作系统学习笔记\"><a href=\"#操作系统学习笔记\" class=\"headerlink\" title=\"操作系统学习笔记\"></a>操作系统学习笔记</h4><p>学习方法：首先听课，做笔记，阅读笔记，巩固知识，实践</p>\n<h5 id=\"1-程序运行时发生了什么？\"><a href=\"#1-程序运行时发生了什么？\" class=\"headerlink\" title=\"1.程序运行时发生了什么？\"></a>1.程序运行时发生了什么？</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个程序运行时在做什么？执行指令。cpu从内存get到一条指令，对其解码然后执行它，比如说两个数相加。完成指令后执行下一条，依此类推，直到程序完成。</span><br></pre></td></tr></table></figure>\n\n<p>问题：如何将硬件资源虚拟化？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通过操作系统实现，操作系统（也可称之为虚拟机）提供API，利用虚拟机的功能（如访问文件、内存、计算），让用户可以通过软件的形式告诉操作系统做什么。操作系统api称之为系统调用（system call），让应用程序调用。由于操作系统提供了这些调用来运行程序，访问内存、文件等资源，有时也会称操作系统提供了标准库(standard library)。</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-虚拟化CPU\"><a href=\"#2-虚拟化CPU\" class=\"headerlink\" title=\"2.虚拟化CPU\"></a>2.虚拟化CPU</h5><p>虚拟化CPU有什么好处？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行多个程序在一个单核cpu机器上，看起来有多个程序`同时`运行。实际上，cpu是在几个程序间不断地切换运行。</span><br><span class=\"line\"></span><br><span class=\"line\">可以通过接口的形式去暂停程序或查看程序。</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-虚拟化内存\"><a href=\"#3-虚拟化内存\" class=\"headerlink\" title=\"3.虚拟化内存\"></a>3.虚拟化内存</h5><p>物理内存的模式本质上是一个存满字节的数组。读内存就是读取某个位置上的地址，再读取地址上的值。</p>\n<p>再来说说程序运行发生了什么？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">程序运行时，代码数据以某种数据结构被加载到内存，通过指令操作内存上的数据。</span><br></pre></td></tr></table></figure>\n\n<p>场景：当1套代码同时运行2个程序，程序运行的代码逻辑是：分配1个内存，打印其内存地址。结果两个程序打印出来的内存地址是一样的，那么它们是互相覆盖吗？</p>\n<p>不会，因为看到的内存地址是虚拟内存地址，映射到实际的物理内存地址是两个不同的地方。</p>\n<p>实际上，不同的程序是用到的资源是隔离、互不影响的。</p>\n<h5 id=\"4-并发\"><a href=\"#4-并发\" class=\"headerlink\" title=\"4. 并发\"></a>4. 并发</h5><p>同一个主程序有两个线程在操纵同一个内存，会发生什么事？</p>\n<h5 id=\"5-持久性\"><a href=\"#5-持久性\" class=\"headerlink\" title=\"5.持久性\"></a>5.持久性</h5><p>内存在断电或系统崩溃的时候会丢失数据。持久化数据，通过软件系统和硬件磁盘IO来实现。</p>\n<p>软件系统称之为文件系统(file system)。</p>\n<p>如何实现持久化数据到文件？</p>\n<ul>\n<li>调用open()创建和打开文件</li>\n<li>write()写入文件</li>\n<li>close()关闭文件</li>\n</ul>\n<p>注意：为防止写时系统崩溃或高效写入，文件系统有写时复制、写入特定数据结构(简单列表或复杂B树)。</p>\n<h5 id=\"6-操作系统的发展历史\"><a href=\"#6-操作系统的发展历史\" class=\"headerlink\" title=\"6.操作系统的发展历史\"></a>6.操作系统的发展历史</h5><ul>\n<li>早期：只有一些库，操作人员排列任务进行批处理。</li>\n<li>为了安全性，如防止一些文件被访问，增加系统调用的概念，通过内核接口形式只暴露出特定硬件的能力，让用户态的应用程序只能有特定权限。</li>\n<li>多程序时代，操作系统不应该同时只跑一个任务</li>\n</ul>\n<h5 id=\"关于虚拟化的对话\"><a href=\"#关于虚拟化的对话\" class=\"headerlink\" title=\"关于虚拟化的对话\"></a>关于虚拟化的对话</h5><p>虚拟化cpu是抽象出来的概念，比如说有一个桃子，让每个人都看起来像是拥有一个“桃子”而不自知，这便是虚拟化的奥义所在。</p>\n<h5 id=\"7-抽象：进程\"><a href=\"#7-抽象：进程\" class=\"headerlink\" title=\"7. 抽象：进程\"></a>7. 抽象：进程</h5><p>进程是在运行的程序。进程本身不具备生命周期，它只是磁盘上的一堆数据(字节)，是操作系统让程序真正运行起来。</p>\n<p>cpu虚拟化的假象是怎么做到的？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">操作系统通过时分共享技术，允许进程使用一段时间cpu后，切换到另一个进程。操作系统还有不同的算法调度策略，例如哪个进程优先级高，哪个运行时间更长等。</span><br></pre></td></tr></table></figure>\n\n<p>进程的组成成分：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">进程含有内存，内存用于存储代码指令，程序生成的数据也被写入内存，当然，进程也操纵文件系统当它用到文件的时候</span><br></pre></td></tr></table></figure>\n\n<p>与进程相关的系统调用：</p>\n<ul>\n<li>create() 创建进程</li>\n<li>destory() 销毁进程</li>\n<li>status() 进程状态</li>\n</ul>\n<p>问：操作系统运行进程(程序)的细节？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">操作系统将代码和静态文件加载到内存中，这个过程需要从磁盘读取字节。程序在运行前会分配运行时栈，用于存放局部变量等。程序运行时，在C语言需要显示分配动态内存堆（heap）用于存放产生的动态数据。</span><br><span class=\"line\"></span><br><span class=\"line\">数据结构（如链表、散列表、树和其他有趣的数据结构）需要堆。起初堆会很小。随着程序运行，通过 malloc()库 API 请求更多内存，操作系统可能会参与分配更多内存给进程，以满足这些调用。</span><br><span class=\"line\"></span><br><span class=\"line\">操作系统还将执行一些初始化任务，如为每个进程打开标准输入、标准输出、错误三个文件描述符（file descriptor）。</span><br><span class=\"line\"></span><br><span class=\"line\">做完初始化任务、分配stack内存这一系列任务后，开始启动进程，即运行main()。</span><br></pre></td></tr></table></figure>\n\n<p>进程状态</p>\n<ul>\n<li>运行（running） 进程在使用cpu，意味着cpu在执行指令</li>\n<li>就绪（ready） 进程准备好了，但由于某种原因，操作系统决定不在此时运行</li>\n<li>阻塞（blocked）进程执行了某种操作，直到发生某个时间才运行。如写文件到磁盘，它就会被阻塞，其他进程可以使用cpu</li>\n</ul>\n<h5 id=\"一、什么是性能问题？\"><a href=\"#一、什么是性能问题？\" class=\"headerlink\" title=\"一、什么是性能问题？\"></a>一、什么是性能问题？</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">突然有一天，公司开发在夜里打电话给你，“现在有很多用户说系统弹出一个错误，系统繁忙”之类的。</span><br><span class=\"line\">开发同事一看接口返回500，看了后端日志好像没有特别明显的报错信息。</span><br><span class=\"line\"></span><br><span class=\"line\">这时，你赶忙上服务器看下nginx日志，好家伙，一看nginx日志发现后发现接口请求过了60s还没有响应。</span><br><span class=\"line\">`top`看一下服务器资源，用户空间的cpu使用率100%，是哪些进程呢？php-fpm。里面发生了什么？我不知道啊？</span><br><span class=\"line\">唉，重启服务能解决90%的问题，那就重启看看吧。果然，重启后用户反馈正常了。害，暂时是没有问题了，那下次再来一次怎么办？...无后续</span><br></pre></td></tr></table></figure>\n\n<p>看，cpu100%这类问题就归属性能问题。</p>\n<h5 id=\"研究性能问题需要学习操作系统主要组件原理\"><a href=\"#研究性能问题需要学习操作系统主要组件原理\" class=\"headerlink\" title=\"研究性能问题需要学习操作系统主要组件原理\"></a>研究性能问题需要学习操作系统主要组件原理</h5><p>CPU性能、内存、磁盘IO性能、网络</p>\n<p>衡量性能的指标：<br>并发（吞吐）、响应快（时延）</p>\n<h5 id=\"二、CPU性能篇\"><a href=\"#二、CPU性能篇\" class=\"headerlink\" title=\"二、CPU性能篇\"></a>二、CPU性能篇</h5><h5 id=\"什么是平均负载\"><a href=\"#什么是平均负载\" class=\"headerlink\" title=\"什么是平均负载\"></a>什么是平均负载</h5><p>看一个例子：<code>uptime</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ uptime</span><br><span class=\"line\">02:34:03 up 2 days, 20:14,  1 user,  load average: 0.63, 0.83, 0.88</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><code>02:34:03</code> 当前时间</li>\n<li><code>up 2 days, 20:14</code> 系统从开机后运行的时长</li>\n<li><code>1 user</code> 正在登录的用户数</li>\n<li><code>load average: 0.63, 0.83, 0.88</code> 最近1分钟、5分钟、15分钟的平均负载(Load average)</li>\n</ul>\n<p><code>平均负载</code>是指单位时间内，系统处于可运行(Running或ready)和不可中断(blocked)的进程数。结合最近1分钟、5分钟、15分钟的平均负载，我们可以全面了解cpu的使用情况。像了解一天早中晚的气候变化。</p>\n<p>Running是指正在使用cpu；Ready是指代码(指令)已经加载到了内存，等cpu来执行指令；</p>\n<p>不可中断是指进程在使用cpu，突然需要进行磁盘IO(读写)的长时间操作，先不用cpu，等IO操作完毕再回来使用cpu。</p>\n<p>一般而言，平均负载超过cpu核数70%就要检查cpu的使用情况，考虑是否优化。</p>\n<p>查看cpu核数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep &#x27;model name&#x27; /proc/cpuinfo|wc -l</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"什么是CPU使用率\"><a href=\"#什么是CPU使用率\" class=\"headerlink\" title=\"什么是CPU使用率\"></a>什么是CPU使用率</h5><p>cpu使用率衡量了单位时间cpu的繁忙程度。</p>\n<p>对于I&#x2F;O密集型进程，平均负载就高，但cpu却不繁忙，也就是cpu使用率不高。</p>\n<p>看一个例子：<code>top</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ top</span><br><span class=\"line\">top - 11:15:27 up 40 days, 51 min,  1 user,  load average: 0.32, 0.27, 0.26</span><br><span class=\"line\">Tasks: 356 total,   1 running, 355 sleeping,   0 stopped,   0 zombie</span><br><span class=\"line\">%Cpu(s):  4.2 us,  5.6 sy,  0.0 ni, 90.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class=\"line\">MiB Mem :   7777.8 total,    281.6 free,   4394.8 used,   3101.3 buff/cache</span><br><span class=\"line\">MiB Swap:   2048.0 total,    580.2 free,   1467.8 used.   3015.1 avail Mem </span><br><span class=\"line\"></span><br><span class=\"line\">    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                                                                                                 </span><br><span class=\"line\">3811294 root      20   0   15440   4540   3768 R  20.0   0.1   0:00.03 top                                                                                                                     </span><br><span class=\"line\">    682 avahi     20   0   10524   5696   3120 S   6.7   0.1 110:29.16 avahi-daemon                                                                                                            </span><br><span class=\"line\">   7726 root      20   0  750872  21192   5772 S   6.7   0.3 259:56.50 travel-api  </span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><p><code>%Cpu(s)</code> 比如说有4个cpu，%Cpu(s)代表这4个的平均使用率。</p>\n<p>cpu &#x3D; 用户空间使用率(us) + 内核空间使用率(sy) + 空闲(id)</p>\n<p><code>ni</code> 用户空间通过改变进程优先级占用的cpu百分比</p>\n<p><code>wa</code> 等待io操作占用的cpu百分比</p>\n<p><code>hi/si</code> 硬&#x2F;软中断进行cpu上下文切换占用的百分比</p>\n</li>\n<li><p><code>RES</code> 使用的真实物理内存（KB）</p>\n</li>\n<li><p><code>%CPU</code> 一个cpu的使用率，毕竟一个进程只占用一个cpu</p>\n</li>\n<li><p><code>TIME+</code> 累计使用cpu时间</p>\n</li>\n</ul>\n<p>附top使用快捷键说明：</p>\n<ul>\n<li><code>shift + m</code> # 按照内存使用率排序，shift m 等价于大写M</li>\n<li><code>shift + p</code> # 按照cpu使用率排序</li>\n<li><code>c</code> # 显示命令全路径</li>\n<li><code>F</code> # 挑选你要选择展示的列，按下空格选中，* 代表会展示的列(列会出现在最后)，按q退出。<br>  可以展示进程使用哪一个cpu</li>\n<li>按<code>1</code> # 展示每个cpu的使用情况</li>\n</ul>\n<h4 id=\"工具合集\"><a href=\"#工具合集\" class=\"headerlink\" title=\"工具合集\"></a>工具合集</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 压测</span><br><span class=\"line\">ab -c 100 -n 1000 http://192.168.0.10:10000/   # 一次并发100，共1000</span><br><span class=\"line\">...</span><br><span class=\"line\">Requests per second: 87.86 [#/sec] (mean)   # 平均每秒处理87个请求</span><br><span class=\"line\">Time per request: 1138.229 [ms] (mean)     # 平均1个1.13秒</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 根据名称查看进程树</span><br><span class=\"line\">pstree | grep stress</span><br><span class=\"line\"></span><br><span class=\"line\"># 监视短时进程</span><br><span class=\"line\">execsnoop</span><br><span class=\"line\"></span><br><span class=\"line\"># 监视IO</span><br><span class=\"line\">dstat 1 10 # 每隔1s输出，共10组，关注输出read和writ</span><br><span class=\"line\">pidstat -d -p 4344 1 3 # 指定进程的读写速率</span><br><span class=\"line\">strace -p 6082 # 追踪进程</span><br><span class=\"line\"></span><br><span class=\"line\"># 模拟网络SYN FLOOD 攻击</span><br><span class=\"line\">hping3 -S -p 80 -i u100 192.168.0.30 </span><br><span class=\"line\">说明：</span><br><span class=\"line\">-S参数表示设置TCP协议的SYN（同步序列号）</span><br><span class=\"line\">-i u100表示每隔100微秒发送一个网络帧</span><br><span class=\"line\"></span><br><span class=\"line\"># 网络</span><br><span class=\"line\">yum install sysstat</span><br><span class=\"line\">sar -n DEV 1 # -n DEV 表示显示网络收发的报告，间隔1秒输出一组数据</span><br><span class=\"line\"></span><br><span class=\"line\">tcpdump -i eth0 -n tcp port 80 # 抓包，-n不解析协议名和主机名</span><br><span class=\"line\"></span><br><span class=\"line\"># 列出cpu个数</span><br><span class=\"line\">lscpu</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看进程父子关系</span><br><span class=\"line\">yum install -y psmisc</span><br><span class=\"line\">pstree -aps $pid</span><br><span class=\"line\"></span><br><span class=\"line\"># 资源优化</span><br><span class=\"line\">应用角度：吞吐 &amp; 延迟</span><br><span class=\"line\">系统角度：cpu使用率</span><br><span class=\"line\"></span><br><span class=\"line\"># 内存</span><br><span class=\"line\">free</span><br><span class=\"line\">说明：</span><br><span class=\"line\">- available：未使用内存 + 可回收缓存</span><br><span class=\"line\">- used：已使用内存，包含共享内存</span><br><span class=\"line\">- cache/buff：cache是文件内存，buff是磁盘内存</span><br><span class=\"line\">top</span><br><span class=\"line\">说明：</span><br><span class=\"line\">- VIRT：虚拟内存，进程申请的但还未分配实际物理内存</span><br><span class=\"line\">- RES: 实际占用的物理内存</span><br><span class=\"line\">- SHR: 共享内存，一般是公共库、动态链接库</span><br><span class=\"line\">- %MEM：物理内存占总内存百分比</span><br><span class=\"line\"></span><br><span class=\"line\"># 内存泄漏分析</span><br><span class=\"line\">vmstat 3 # 实时查看内存变动</span><br><span class=\"line\">yum install bcc</span><br><span class=\"line\">memleak -a -p $pid</span><br><span class=\"line\"></span><br><span class=\"line\"># Swap</span><br><span class=\"line\">swapoff -a # 关闭</span><br><span class=\"line\"></span><br><span class=\"line\"># IO</span><br><span class=\"line\">df -i</span><br><span class=\"line\"></span><br><span class=\"line\">iostat -d -x 1 # -d -x 显示所有磁盘指标</span><br><span class=\"line\">说明：</span><br><span class=\"line\">- r/s 每s向磁盘发送的读请求数</span><br><span class=\"line\">- rkB/s 每s从磁盘读的数据量</span><br><span class=\"line\">- %util IO使用量</span><br><span class=\"line\"></span><br><span class=\"line\"># 进程io使用情况</span><br><span class=\"line\">pidstat -d 1</span><br><span class=\"line\"></span><br><span class=\"line\"># 慢sql场景</span><br><span class=\"line\">1.接口返回时间长；</span><br><span class=\"line\">show full processlist; # 查看所有会话连接</span><br><span class=\"line\">explain select * from products where productName=&#x27;time&#x27;;</span><br><span class=\"line\">说明：</span><br><span class=\"line\">- type为ALL代表全表查询</span><br><span class=\"line\">- key为null代表无索引建立</span><br><span class=\"line\">- rows代表扫描行数</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE INDEX products_index ON products (productName); # 建立索引，类型为Nomal，products是表名，productName是字段。</span><br><span class=\"line\"></span><br><span class=\"line\">explain select * from user where name=&quot;小明&quot;; # type为ref</span><br><span class=\"line\"></span><br><span class=\"line\"># 慢redis查询</span><br><span class=\"line\"># redis持久化还是会用到磁盘</span><br><span class=\"line\">strace -f -T -tt -p 9085 # -f表示跟踪子进程和子线程，-T表示显示系统调用的时长，-tt表示显示跟踪时间；-e fdatasync 可以指定函数</span><br><span class=\"line\"></span><br><span class=\"line\"># 网络</span><br><span class=\"line\">应用 - 提供统一接口</span><br><span class=\"line\">表示 - 数据转换</span><br><span class=\"line\">会话 - 维护通信连接</span><br><span class=\"line\">传输 - 加表头成包进行传输</span><br><span class=\"line\">网络 - 路由</span><br><span class=\"line\">数据链路 - MAC寻址</span><br><span class=\"line\">物理 - 物理网络传输帧</span><br><span class=\"line\"></span><br><span class=\"line\">MTU - 1500 规定包大小</span><br><span class=\"line\"></span><br><span class=\"line\">ss -ltnp | head -n 3</span><br><span class=\"line\">说明：</span><br><span class=\"line\">Recv，Send-Q 接收(未被程序处理)和发送包队列(未被远端确认)，不为0代表包堆积</span><br><span class=\"line\">state有Listening和Established</span><br><span class=\"line\"></span><br><span class=\"line\"># 网络吞吐</span><br><span class=\"line\">sar -n DEV 1</span><br><span class=\"line\">ethtool ens18 | grep Speed # 千兆网卡</span><br><span class=\"line\"></span><br><span class=\"line\"># 理解一台机器65536个端口</span><br><span class=\"line\">对于客户端，确实受限；但对服务端，可以组合客户端ip+端口。</span><br><span class=\"line\"></span><br><span class=\"line\"># 测试某台机器tcp吞吐(带宽能力)</span><br><span class=\"line\">yum install iperf3</span><br><span class=\"line\">服务器1：iperf3 -s -i 1 -p 10000 # -s表示启动服务端，-i表示汇报间隔，-p表示监听端口</span><br><span class=\"line\"></span><br><span class=\"line\"># -c表示启动客户端，192.168.0.30为目标服务器的IP# -b表示目标带宽(单位是bits/s)# -t表示测试时间# -P表示并发数，-p表示目标服务器监听端口</span><br><span class=\"line\">服务器2：iperf3 -c 192.168.0.30 -b 1G -t 15 -P 2 -p 10000</span><br><span class=\"line\"></span><br><span class=\"line\">回服务端看接口：SUM 行就是测试的汇总结果。receiver 表接收，Bandwidth是带宽。</span><br><span class=\"line\"></span><br><span class=\"line\"># 压测</span><br><span class=\"line\">yum install -y httpd-tools</span><br><span class=\"line\">ab -c 1000 -n 10000 http://192.168.0.30/  # -c表示并发请求数为1000，-n表示总的请求数为10000</span><br><span class=\"line\">说明：</span><br><span class=\"line\">Requests per second # 平均每个请求花费时间</span><br><span class=\"line\">第二个Time per request # 实际请求的响应时间 </span><br><span class=\"line\"></span><br><span class=\"line\"># 域名</span><br><span class=\"line\">nslookup time.geekbang.org</span><br><span class=\"line\"></span><br><span class=\"line\">dig +trace @114.114.114.114 +nodnssec time.geekbang.org # +trace表示开启跟踪查询# +nodnssec表示禁止DNS安全扩展；@114.114.114.114指定使用的dns服务器</span><br><span class=\"line\">dns流程查询说明：client(time.geekbang.org) -&gt; 114.114.114.114(可能存在time.geekbang.org缓存) -&gt; NS .org -&gt; m.root-servers.net -&gt; dns9.hichina.com -&gt; ip返回114 DNS服务器。</span><br><span class=\"line\"></span><br><span class=\"line\"># 内网域名解析可以通过自建DNS服务器或配置/etc/hosts文件</span><br><span class=\"line\"># 强制使用https好处：防止dns劫持</span><br><span class=\"line\"># 抓包</span><br><span class=\"line\">tcpdump -nn udp port 53 or host 35.190.27.188 </span><br><span class=\"line\">说明：</span><br><span class=\"line\">-nn ，表示不解析抓包中的域名（即不反向解析）、协议以及端口号。</span><br><span class=\"line\">udp port 53 ，表示只显示 UDP 协议的端口号（包括源端口和目的端口）为 53 的包。</span><br><span class=\"line\">host 35.190.27.188 ，表示只显示 IP 地址（包括源地址和目的地址）为 35.190.27.188 的包。</span><br><span class=\"line\">or 表 或</span><br><span class=\"line\"></span><br><span class=\"line\">第一条：</span><br><span class=\"line\">36909+ 表示查询标识值，它也会出现在响应中，加号表示启用递归查询</span><br><span class=\"line\">A? 表示查询 A 记录。</span><br><span class=\"line\">geektime.org. 表示待查询的域名。</span><br><span class=\"line\">30 表示报文长度。</span><br><span class=\"line\"></span><br><span class=\"line\">第二条：</span><br><span class=\"line\">则是从 114.114.114.114 发送回来的 DNS 响应—-域名 geektime.org. 的 A 记录值为 35.190.27.188。</span><br><span class=\"line\"></span><br><span class=\"line\">第三条和第四条，是 ICMP echo request 和 ICMP echo reply，响应包的时间戳 14:02:31.539667，减去请求包的时间戳 14:02:31.508164 ，就可以得到，这次 ICMP 所用时间为 30ms</span><br><span class=\"line\"></span><br><span class=\"line\">第5第6条：</span><br><span class=\"line\">反向地址解析 PTR 请求，只有请求包，却没有应答包。ping -n 可禁止ptr解析。</span><br><span class=\"line\"></span><br><span class=\"line\"># tcpdump选项解析</span><br><span class=\"line\">-A 以ASCII格式显示网络包(不指定则只显示头信息)</span><br><span class=\"line\">-i 指定网口</span><br><span class=\"line\">-nn 不反向解析</span><br><span class=\"line\">-w 保存到文件，以.pcap后缀结尾</span><br><span class=\"line\"></span><br><span class=\"line\">host 主机过滤</span><br><span class=\"line\">port 端口过滤</span><br><span class=\"line\">tcp 协议过滤</span><br><span class=\"line\">and/or/not 逻辑表达</span><br><span class=\"line\"></span><br><span class=\"line\"># tcpdump输出格式</span><br><span class=\"line\">时间戳 协议 源地址.源端口 &gt; 目的地址.目的端口 网络包详细信息</span><br><span class=\"line\">tcpdump -nn udp port 53 or host 35.190.27.188 -w ping.pcap</span><br><span class=\"line\"></span><br><span class=\"line\"># tcpdump &amp; wireshark 抓包 tcp &amp; http案例分析三次握手和四次挥手工作原理</span><br><span class=\"line\">dig +short example.com93.184.216.34</span><br><span class=\"line\">tcpdump -nn host 93.184.216.34 -w web.pcap</span><br><span class=\"line\"></span><br><span class=\"line\">curl http://example.com</span><br><span class=\"line\"></span><br><span class=\"line\">wireshark中分析：</span><br><span class=\"line\">由于 HTTP 基于 TCP，所以最先看到的三个包，分别是 TCP 三次握手的包。接下来，中间的才是 HTTP 请求和响应包，而最后的三个包，则是 TCP 连接断开时的三次挥手包。</span><br><span class=\"line\"></span><br><span class=\"line\">从菜单栏中，点击 Statistics -&gt; Flow Graph，然后，在弹出的界面中的 Flow type 选择 TCP Flows，可以更清晰的看到，整个过程中 TCP 流的执行过程。</span><br><span class=\"line\"></span><br><span class=\"line\">之所以有三个包，是因为服务器端收到客户端的 FIN 后，服务器端同时也要关闭连接，这样就可以把 ACK 和 FIN 合并到一起发送，节省了一个包，变成了“三次挥手”。</span><br><span class=\"line\"></span><br><span class=\"line\">而通常情况下，服务器端收到客户端的 FIN 后，很可能还没发送完数据，所以就会先回复客户端一个 ACK 包。稍等一会儿，完成所有数据包的发送后，才会发送 FIN 包。这也就是四次挥手了。</span><br><span class=\"line\"></span><br><span class=\"line\"># HTTP分析工具：fiddler</span><br><span class=\"line\">$ curl -s -w &#x27;Http code: %&#123;http_code&#125;\\nTotal time:%&#123;time_total&#125;s\\n&#x27; -o /dev/null http://192.168.0.30/ # 获取状态码和时间</span><br><span class=\"line\"></span><br><span class=\"line\"># 模拟ddos攻击</span><br><span class=\"line\">hping3 -S -p 80 -i u10 192.168.0.30 #  -S参数表示设置TCP协议的SYN（同步序列号），-p表示目的端口为80。-i u10表示每隔10微秒发送一个网络帧</span><br><span class=\"line\"></span><br><span class=\"line\">curl -w &#x27;Http code: %&#123;http_code&#125;\\nTotal time:%&#123;time_total&#125;s\\n&#x27; -o /dev/null --connect-timeout 10 http://192.168.0.30 # --connect-timeout表示连接超时时间</span><br><span class=\"line\"></span><br><span class=\"line\">sar -n DEV 1 # 观察收发情况</span><br><span class=\"line\"></span><br><span class=\"line\">tcpdump -i eth0 -n tcp port 80</span><br><span class=\"line\">结果：Flags [S] 表示这是一个 SYN 包。大量的 SYN 包表明，这是一个 SYN Flood 攻击。即客户端构造大量的 SYN 包，请求建立 TCP 连接；而服务器收到包后，会向源 IP 发送 SYN+ACK 报文，并等待三次握手的最后一次 ACK 报文，直到超时。</span><br><span class=\"line\"></span><br><span class=\"line\">TCP 半开连接的方法，关键在于 SYN_RECEIVED 状态的连接。</span><br><span class=\"line\">netstat -n -p | grep SYN_REC # -n表示不解析名字，-p表示显示连接所属进程</span><br><span class=\"line\"></span><br><span class=\"line\">iptables -I INPUT -s 192.168.0.2 -p tcp -j REJECT # 封ip</span><br><span class=\"line\">iptables -A INPUT -p tcp --syn -m limit --limit 1/s -j ACCEPT # 限制syn并发数为每秒1次</span><br><span class=\"line\">iptables -I INPUT -p tcp --dport 80 --syn -m recent --name SYN_FLOOD --update --seconds 60 --hitcount 10 -j REJECT # 限制单个IP在60秒新建立的连接数为10</span><br><span class=\"line\"></span><br><span class=\"line\"># 半开状态的连接数是有限制的</span><br><span class=\"line\">sysctl net.ipv4.tcp_max_syn_backlog</span><br><span class=\"line\"></span><br><span class=\"line\">sysctl -w net.ipv4.tcp_max_syn_backlog=1024 # 增加半开连接容量</span><br><span class=\"line\"></span><br><span class=\"line\">sysctl -w net.ipv4.tcp_synack_retries=1 # 减少半开连接重试次数</span><br><span class=\"line\"></span><br><span class=\"line\"># 开启 SYN Cookies不维护半开连接状态</span><br><span class=\"line\">sysctl -w net.ipv4.tcp_syncookies=1</span><br><span class=\"line\"></span><br><span class=\"line\"># 持久化保存</span><br><span class=\"line\">$ cat /etc/sysctl.conf</span><br><span class=\"line\">net.ipv4.tcp_syncookies = 1</span><br><span class=\"line\">net.ipv4.tcp_synack_retries = 1</span><br><span class=\"line\">net.ipv4.tcp_max_syn_backlog = 1024</span><br><span class=\"line\"></span><br><span class=\"line\"># 基于一些服务端会禁用icmp，使用hping3 or traceroute 测试延迟</span><br><span class=\"line\">hping3 -c 3 -S -p 80 baidu.com # -c表示发送3次请求，-S表示设置TCP SYN，-p表示端口号为80</span><br><span class=\"line\"></span><br><span class=\"line\">traceroute --tcp -p 80 -n baidu.com  # --tcp表示使用TCP协议，-p表示端口号，-n表示不对结果中的IP地址执行反向域名解析</span><br><span class=\"line\"></span><br><span class=\"line\"># NAT</span><br><span class=\"line\">SNAT(转换源ip，实现上网)</span><br><span class=\"line\">192.168.0.2 -&gt; 路由器（NAT网关）转换成公网ip：100.100.100.100 -&gt; 百度</span><br><span class=\"line\"></span><br><span class=\"line\">DNAT(暴露内网服务)</span><br><span class=\"line\">baidu.com 发回响应包 -&gt; 路由器 -&gt; 公网ip替换成192.168.0.2 -&gt; 192.168.0.2</span><br><span class=\"line\"></span><br><span class=\"line\"># NAT实现原理</span><br><span class=\"line\">Linux 内核提供的 Netfilter ，具体可通过工具iptables或firewalld实现链配置。</span><br><span class=\"line\"></span><br><span class=\"line\">对SNAT: iptables -t nat -A POSTROUTING -s 192.168.0.0/16 -j MASQUERADE</span><br><span class=\"line\">对DNAT: iptables -t nat -A PREROUTING -d 100.100.100.100 -j DNAT --to-destination 192.168.0.2</span><br><span class=\"line\"></span><br><span class=\"line\"># 在使用 iptables 配置 NAT 规则时，Linux 需要转发来自其他 IP 的网络包，需开启 Linux 的 IP 转发功能</span><br><span class=\"line\">查看：sysctl net.ipv4.ip_forward</span><br><span class=\"line\">开启：sysctl -w net.ipv4.ip_forward=1</span><br><span class=\"line\">持久化保存：</span><br><span class=\"line\">cat /etc/sysctl.conf | grep ip_forward</span><br><span class=\"line\">net.ipv4.ip_forward=1</span><br><span class=\"line\"></span><br><span class=\"line\"># 网络工具合集</span><br><span class=\"line\">sar # 可查看网络接口、进程、IP地址吞吐量(BPS) </span><br><span class=\"line\">netstat或ss # 网络连接</span><br><span class=\"line\">ping或hping3 # 网络延迟</span><br><span class=\"line\">traceroute # 查看路由链路</span><br><span class=\"line\">nslookup或dig # DNS解析</span><br><span class=\"line\">iptables # 防火墙或NAT</span><br><span class=\"line\">tcpdump &amp; wireshark # 抓包</span><br><span class=\"line\"></span><br><span class=\"line\"># 网络优化内核参数设置</span><br><span class=\"line\">- 增大每个套接字的缓冲区大小 net.core.optmem_max；推荐81920</span><br><span class=\"line\">- 增大套接字接收缓冲区大小 net.core.rmem_max 和发送缓冲区大小 net.core.wmem_max； 513920/513920</span><br><span class=\"line\"></span><br><span class=\"line\"># cat /proc/sys/net/ipv4/tcp_mem 查看配置</span><br><span class=\"line\">#cat /proc/net/sockstat 查看当前tcp的统计</span><br><span class=\"line\">#sysctl -w net.ipv4.tcp_mem=新配置 来增大</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mysql慢查询\"><a href=\"#mysql慢查询\" class=\"headerlink\" title=\"mysql慢查询\"></a>mysql慢查询</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show variables like &quot;%long%&quot;;   # 查看long_query_time慢查询时间，默认是10s，超过则被记为慢查询并记录到慢查询日志</span><br><span class=\"line\"></span><br><span class=\"line\">set global long_query_time=1;  # 设置时间，退出navicat重登即可看到生效</span><br><span class=\"line\"></span><br><span class=\"line\">show variables like &quot;%slow%&quot;; # 慢查询slow_query_log是否开启</span><br><span class=\"line\"></span><br><span class=\"line\">set global slow_query_log=&#x27;ON&#x27;;  # 启动慢查询</span><br></pre></td></tr></table></figure>\n<h3 id=\"mysql表名大小写\"><a href=\"#mysql表名大小写\" class=\"headerlink\" title=\"mysql表名大小写\"></a>mysql表名大小写</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show variables like &quot;%case%&quot;; # lower_case_table_names为1表示大小写不敏感。</span><br></pre></td></tr></table></figure>\n<h3 id=\"mysql备份种类说明\"><a href=\"#mysql备份种类说明\" class=\"headerlink\" title=\"mysql备份种类说明\"></a>mysql备份种类说明</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 全量</span><br><span class=\"line\">2. 增量</span><br><span class=\"line\">3. 差异备份</span><br><span class=\"line\"></span><br><span class=\"line\">恢复组合：</span><br><span class=\"line\">1.全量加增量</span><br><span class=\"line\">    周一的全量+周二到周五之间全部增量，特点：步骤多，时间长。</span><br><span class=\"line\"></span><br><span class=\"line\">2.全量加差异</span><br><span class=\"line\">    周一的全量加周五的差异备份。特点：步骤少，数据量少，时间短。</span><br></pre></td></tr></table></figure>\n"},{"title":"第38期：linux日志切割","date":"2023-05-25T04:30:10.000Z","_content":"#### 一、日志切割\n背景：流量大的服务常常会产生很多大文件日志文件，占用磁盘空间，怎么去管理呢？使用日志切割服务logrotate。\n\nlogrotate可以对日志进行截断、压缩、删除旧文件。比如说配置logrotate，让/var/log/nginx每30天轮询，并删除超过60天的日志，此过程完全自动化。\n\n安装logrotate，centos7默认自带\n```\nyum install logrotate\n```\n\n##### 运行原理\nlogrotate的运行依赖`crontab`, 安装logrotate后, 自动在 /etc/cron.daily 目录下添加\nlogrotate 文件\n\n说明：\n- 配置文件：/etc/logrotate.conf，一般不变动\n- 设置独立的轮询配置文件，/etc/logrotate.d\n\n#### 二、实践配置\n创建一个10M的塞满随机二进制数据的文件\n```\ntouch /var/log/log-file\nhead -c 10M < /dev/urandom > /var/log/log-file \n```\n\n配置轮询配置文件\n```\nvim /etc/logrotate.d/log-file\n\n/var/log/log-file {\n    monthly\n    rotate 5\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 644 root root\n    postrotate\n        /usr/bin/killall -HUP rsyslogd\n    endscript\n}\n```\n说明：\n- `monthly` 每月运行一次。其它可用值为'daily'，'weekly'或者'yearly'\n- `rotate 5` 切割后，保留最近的5次切割结果文件\n- `compress` 在轮循任务完成后，已轮循的归档将使用gzip进行压缩\n- `delaycompress` 总是与compress选项一起用，delaycompress选项指示logrotate不要将最近的归档压缩，压缩将在下一次轮循周期进行。这在你或任何软件仍然需要读取最新归档时很有用。\n- `missingok` 在日志轮循期间，任何错误将被忽略，例如“文件无法找到”之类的错误。\n- `notifempty` 如果日志文件为空，轮循不会进行。\n- `create 644 root root` 以指定的权限创建全新的日志文件，同时logrotate也会重命名原始日志文件\n- `postrotate`在所有其它指令完成后，postrotate和endscript里面指定的命令将被执行。在这种情况下，rsyslogd 进程将立即再次读取其配置并继续运行。\n- `size 100k` 日志大小超过 100k 时, 进行切割\n- `olddir /var/log/news/old` 切割后数据放入指定目录 /var/log/news/old\n- `nocompress` 转储文件不压缩\n\n\n配置完成后，载入/etc/lograte.d/log-file\n```\n# 即使轮循条件没有满足，我们也可以通过使用'-f'选项来强制logrotate轮循日志文件，'-v'参数提供了详细的输出\nlogrotate -vf /etc/logrotate.d/log-file \n\nll /var/log/log-file*\n```\n结果:\n-rw-r----- 1 root root   0 Nov 16 14:57 log-file\n-rw-r--r-- 1 root root   3 Nov 16 14:57 log-file.1\n\nlog-file.1没有变成压缩文件是因为设置了delaycompress，后面再观察下个轮询周期到了log-file.1就会变成log-file.2.gz文件，log-file会变成log-file.1，log-file是最新的空文件，`zcat log-file.2.gz`查看压缩内容。\n\nlogrotate自身的日志在`/var/lib/logrotate/`目录下\n\n\n#### 三、logrotate生产应用\nnginx日志轮询\n```\nvi /etc/logrotate.d/nginx\n\n/usr/local/nginx/logs/*.log {\n    daily\n    compress\n    delaycompress\n    rotate 365\n    missingok\n    notifempty\n    dateext\n    sharedscripts\n    postrotate\n      if [ -f /usr/local/nginx/logs/nginx.pid ]; then\n          kill -USR1 `cat /usr/local/nginx/logs/nginx.pid`\n      fi\n    endscript\n}\n```\n接着执行\n```\nlogrotate /etc/logrotate.d/nginx # 载入配置，因为没有达到daily的轮询条件，要到第二天才能看到轮询结果。可'logrotate -vf /etc/logrotate.d/nginx' 强制执行\n```\n\n说明：\n- `dateext` 表示以日期命名轮询文件后缀，如access.log变成access.log-20211116\n- `sharedscripts` 意味着 postrotate 脚本将只运行一次（在旧日志被压缩之后），而不是为每个轮询的日志运行一次\n\n- USR1通常被用来告知应用程序重载配置文件；例如，向Apache HTTP服务器发送一个USR1信号将导致以下步骤的发生：停止接受新的连接，等待当前连接停止，重新载入配置文件，重新打开日志文件，重启服务器，从而实现相对平滑的不关机的更改。\n\n- kill -HUP pid 或者 killall -HUP pName，其中pid指进程id，pName为进程名称。\n如果想要更改配置而不需停止并重新启动服务，可以使用上面两个命令。在对配置文件作必要的更改后，发出该命令以动态更新服务配置。根据约定，当你发送一个挂起信号(信号1或HUP)时，大多数服务器进程(所有常用的进程)都会进行复位操作并重新加载它们的配置文件。\n\n#### 参考\nhttps://www.cnblogs.com/clsn/p/8428257.html\n\nhttps://blog.csdn.net/be5yond/article/details/122211394\n","source":"_posts/第38期：linux日志切割.md","raw":"---\ntitle: 第38期：linux日志切割\ndate: 2023-05-25 12:30:10\ntags:\n---\n#### 一、日志切割\n背景：流量大的服务常常会产生很多大文件日志文件，占用磁盘空间，怎么去管理呢？使用日志切割服务logrotate。\n\nlogrotate可以对日志进行截断、压缩、删除旧文件。比如说配置logrotate，让/var/log/nginx每30天轮询，并删除超过60天的日志，此过程完全自动化。\n\n安装logrotate，centos7默认自带\n```\nyum install logrotate\n```\n\n##### 运行原理\nlogrotate的运行依赖`crontab`, 安装logrotate后, 自动在 /etc/cron.daily 目录下添加\nlogrotate 文件\n\n说明：\n- 配置文件：/etc/logrotate.conf，一般不变动\n- 设置独立的轮询配置文件，/etc/logrotate.d\n\n#### 二、实践配置\n创建一个10M的塞满随机二进制数据的文件\n```\ntouch /var/log/log-file\nhead -c 10M < /dev/urandom > /var/log/log-file \n```\n\n配置轮询配置文件\n```\nvim /etc/logrotate.d/log-file\n\n/var/log/log-file {\n    monthly\n    rotate 5\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 644 root root\n    postrotate\n        /usr/bin/killall -HUP rsyslogd\n    endscript\n}\n```\n说明：\n- `monthly` 每月运行一次。其它可用值为'daily'，'weekly'或者'yearly'\n- `rotate 5` 切割后，保留最近的5次切割结果文件\n- `compress` 在轮循任务完成后，已轮循的归档将使用gzip进行压缩\n- `delaycompress` 总是与compress选项一起用，delaycompress选项指示logrotate不要将最近的归档压缩，压缩将在下一次轮循周期进行。这在你或任何软件仍然需要读取最新归档时很有用。\n- `missingok` 在日志轮循期间，任何错误将被忽略，例如“文件无法找到”之类的错误。\n- `notifempty` 如果日志文件为空，轮循不会进行。\n- `create 644 root root` 以指定的权限创建全新的日志文件，同时logrotate也会重命名原始日志文件\n- `postrotate`在所有其它指令完成后，postrotate和endscript里面指定的命令将被执行。在这种情况下，rsyslogd 进程将立即再次读取其配置并继续运行。\n- `size 100k` 日志大小超过 100k 时, 进行切割\n- `olddir /var/log/news/old` 切割后数据放入指定目录 /var/log/news/old\n- `nocompress` 转储文件不压缩\n\n\n配置完成后，载入/etc/lograte.d/log-file\n```\n# 即使轮循条件没有满足，我们也可以通过使用'-f'选项来强制logrotate轮循日志文件，'-v'参数提供了详细的输出\nlogrotate -vf /etc/logrotate.d/log-file \n\nll /var/log/log-file*\n```\n结果:\n-rw-r----- 1 root root   0 Nov 16 14:57 log-file\n-rw-r--r-- 1 root root   3 Nov 16 14:57 log-file.1\n\nlog-file.1没有变成压缩文件是因为设置了delaycompress，后面再观察下个轮询周期到了log-file.1就会变成log-file.2.gz文件，log-file会变成log-file.1，log-file是最新的空文件，`zcat log-file.2.gz`查看压缩内容。\n\nlogrotate自身的日志在`/var/lib/logrotate/`目录下\n\n\n#### 三、logrotate生产应用\nnginx日志轮询\n```\nvi /etc/logrotate.d/nginx\n\n/usr/local/nginx/logs/*.log {\n    daily\n    compress\n    delaycompress\n    rotate 365\n    missingok\n    notifempty\n    dateext\n    sharedscripts\n    postrotate\n      if [ -f /usr/local/nginx/logs/nginx.pid ]; then\n          kill -USR1 `cat /usr/local/nginx/logs/nginx.pid`\n      fi\n    endscript\n}\n```\n接着执行\n```\nlogrotate /etc/logrotate.d/nginx # 载入配置，因为没有达到daily的轮询条件，要到第二天才能看到轮询结果。可'logrotate -vf /etc/logrotate.d/nginx' 强制执行\n```\n\n说明：\n- `dateext` 表示以日期命名轮询文件后缀，如access.log变成access.log-20211116\n- `sharedscripts` 意味着 postrotate 脚本将只运行一次（在旧日志被压缩之后），而不是为每个轮询的日志运行一次\n\n- USR1通常被用来告知应用程序重载配置文件；例如，向Apache HTTP服务器发送一个USR1信号将导致以下步骤的发生：停止接受新的连接，等待当前连接停止，重新载入配置文件，重新打开日志文件，重启服务器，从而实现相对平滑的不关机的更改。\n\n- kill -HUP pid 或者 killall -HUP pName，其中pid指进程id，pName为进程名称。\n如果想要更改配置而不需停止并重新启动服务，可以使用上面两个命令。在对配置文件作必要的更改后，发出该命令以动态更新服务配置。根据约定，当你发送一个挂起信号(信号1或HUP)时，大多数服务器进程(所有常用的进程)都会进行复位操作并重新加载它们的配置文件。\n\n#### 参考\nhttps://www.cnblogs.com/clsn/p/8428257.html\n\nhttps://blog.csdn.net/be5yond/article/details/122211394\n","slug":"第38期：linux日志切割","published":1,"updated":"2024-03-06T06:55:18.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt72000s9klng6vb6tg8","content":"<h4 id=\"一、日志切割\"><a href=\"#一、日志切割\" class=\"headerlink\" title=\"一、日志切割\"></a>一、日志切割</h4><p>背景：流量大的服务常常会产生很多大文件日志文件，占用磁盘空间，怎么去管理呢？使用日志切割服务logrotate。</p>\n<p>logrotate可以对日志进行截断、压缩、删除旧文件。比如说配置logrotate，让&#x2F;var&#x2F;log&#x2F;nginx每30天轮询，并删除超过60天的日志，此过程完全自动化。</p>\n<p>安装logrotate，centos7默认自带</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install logrotate</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"运行原理\"><a href=\"#运行原理\" class=\"headerlink\" title=\"运行原理\"></a>运行原理</h5><p>logrotate的运行依赖<code>crontab</code>, 安装logrotate后, 自动在 &#x2F;etc&#x2F;cron.daily 目录下添加<br>logrotate 文件</p>\n<p>说明：</p>\n<ul>\n<li>配置文件：&#x2F;etc&#x2F;logrotate.conf，一般不变动</li>\n<li>设置独立的轮询配置文件，&#x2F;etc&#x2F;logrotate.d</li>\n</ul>\n<h4 id=\"二、实践配置\"><a href=\"#二、实践配置\" class=\"headerlink\" title=\"二、实践配置\"></a>二、实践配置</h4><p>创建一个10M的塞满随机二进制数据的文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch /var/log/log-file</span><br><span class=\"line\">head -c 10M &lt; /dev/urandom &gt; /var/log/log-file </span><br></pre></td></tr></table></figure>\n\n<p>配置轮询配置文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/logrotate.d/log-file</span><br><span class=\"line\"></span><br><span class=\"line\">/var/log/log-file &#123;</span><br><span class=\"line\">    monthly</span><br><span class=\"line\">    rotate 5</span><br><span class=\"line\">    compress</span><br><span class=\"line\">    delaycompress</span><br><span class=\"line\">    missingok</span><br><span class=\"line\">    notifempty</span><br><span class=\"line\">    create 644 root root</span><br><span class=\"line\">    postrotate</span><br><span class=\"line\">        /usr/bin/killall -HUP rsyslogd</span><br><span class=\"line\">    endscript</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><code>monthly</code> 每月运行一次。其它可用值为’daily’，’weekly’或者’yearly’</li>\n<li><code>rotate 5</code> 切割后，保留最近的5次切割结果文件</li>\n<li><code>compress</code> 在轮循任务完成后，已轮循的归档将使用gzip进行压缩</li>\n<li><code>delaycompress</code> 总是与compress选项一起用，delaycompress选项指示logrotate不要将最近的归档压缩，压缩将在下一次轮循周期进行。这在你或任何软件仍然需要读取最新归档时很有用。</li>\n<li><code>missingok</code> 在日志轮循期间，任何错误将被忽略，例如“文件无法找到”之类的错误。</li>\n<li><code>notifempty</code> 如果日志文件为空，轮循不会进行。</li>\n<li><code>create 644 root root</code> 以指定的权限创建全新的日志文件，同时logrotate也会重命名原始日志文件</li>\n<li><code>postrotate</code>在所有其它指令完成后，postrotate和endscript里面指定的命令将被执行。在这种情况下，rsyslogd 进程将立即再次读取其配置并继续运行。</li>\n<li><code>size 100k</code> 日志大小超过 100k 时, 进行切割</li>\n<li><code>olddir /var/log/news/old</code> 切割后数据放入指定目录 &#x2F;var&#x2F;log&#x2F;news&#x2F;old</li>\n<li><code>nocompress</code> 转储文件不压缩</li>\n</ul>\n<p>配置完成后，载入&#x2F;etc&#x2F;lograte.d&#x2F;log-file</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 即使轮循条件没有满足，我们也可以通过使用&#x27;-f&#x27;选项来强制logrotate轮循日志文件，&#x27;-v&#x27;参数提供了详细的输出</span><br><span class=\"line\">logrotate -vf /etc/logrotate.d/log-file </span><br><span class=\"line\"></span><br><span class=\"line\">ll /var/log/log-file*</span><br></pre></td></tr></table></figure>\n<p>结果:<br>-rw-r—– 1 root root   0 Nov 16 14:57 log-file<br>-rw-r–r– 1 root root   3 Nov 16 14:57 log-file.1</p>\n<p>log-file.1没有变成压缩文件是因为设置了delaycompress，后面再观察下个轮询周期到了log-file.1就会变成log-file.2.gz文件，log-file会变成log-file.1，log-file是最新的空文件，<code>zcat log-file.2.gz</code>查看压缩内容。</p>\n<p>logrotate自身的日志在<code>/var/lib/logrotate/</code>目录下</p>\n<h4 id=\"三、logrotate生产应用\"><a href=\"#三、logrotate生产应用\" class=\"headerlink\" title=\"三、logrotate生产应用\"></a>三、logrotate生产应用</h4><p>nginx日志轮询</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/logrotate.d/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/local/nginx/logs/*.log &#123;</span><br><span class=\"line\">    daily</span><br><span class=\"line\">    compress</span><br><span class=\"line\">    delaycompress</span><br><span class=\"line\">    rotate 365</span><br><span class=\"line\">    missingok</span><br><span class=\"line\">    notifempty</span><br><span class=\"line\">    dateext</span><br><span class=\"line\">    sharedscripts</span><br><span class=\"line\">    postrotate</span><br><span class=\"line\">      if [ -f /usr/local/nginx/logs/nginx.pid ]; then</span><br><span class=\"line\">          kill -USR1 `cat /usr/local/nginx/logs/nginx.pid`</span><br><span class=\"line\">      fi</span><br><span class=\"line\">    endscript</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接着执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logrotate /etc/logrotate.d/nginx # 载入配置，因为没有达到daily的轮询条件，要到第二天才能看到轮询结果。可&#x27;logrotate -vf /etc/logrotate.d/nginx&#x27; 强制执行</span><br></pre></td></tr></table></figure>\n\n<p>说明：</p>\n<ul>\n<li><p><code>dateext</code> 表示以日期命名轮询文件后缀，如access.log变成access.log-20211116</p>\n</li>\n<li><p><code>sharedscripts</code> 意味着 postrotate 脚本将只运行一次（在旧日志被压缩之后），而不是为每个轮询的日志运行一次</p>\n</li>\n<li><p>USR1通常被用来告知应用程序重载配置文件；例如，向Apache HTTP服务器发送一个USR1信号将导致以下步骤的发生：停止接受新的连接，等待当前连接停止，重新载入配置文件，重新打开日志文件，重启服务器，从而实现相对平滑的不关机的更改。</p>\n</li>\n<li><p>kill -HUP pid 或者 killall -HUP pName，其中pid指进程id，pName为进程名称。<br>如果想要更改配置而不需停止并重新启动服务，可以使用上面两个命令。在对配置文件作必要的更改后，发出该命令以动态更新服务配置。根据约定，当你发送一个挂起信号(信号1或HUP)时，大多数服务器进程(所有常用的进程)都会进行复位操作并重新加载它们的配置文件。</p>\n</li>\n</ul>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p><a href=\"https://www.cnblogs.com/clsn/p/8428257.html\">https://www.cnblogs.com/clsn/p/8428257.html</a></p>\n<p><a href=\"https://blog.csdn.net/be5yond/article/details/122211394\">https://blog.csdn.net/be5yond/article/details/122211394</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一、日志切割\"><a href=\"#一、日志切割\" class=\"headerlink\" title=\"一、日志切割\"></a>一、日志切割</h4><p>背景：流量大的服务常常会产生很多大文件日志文件，占用磁盘空间，怎么去管理呢？使用日志切割服务logrotate。</p>\n<p>logrotate可以对日志进行截断、压缩、删除旧文件。比如说配置logrotate，让&#x2F;var&#x2F;log&#x2F;nginx每30天轮询，并删除超过60天的日志，此过程完全自动化。</p>\n<p>安装logrotate，centos7默认自带</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install logrotate</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"运行原理\"><a href=\"#运行原理\" class=\"headerlink\" title=\"运行原理\"></a>运行原理</h5><p>logrotate的运行依赖<code>crontab</code>, 安装logrotate后, 自动在 &#x2F;etc&#x2F;cron.daily 目录下添加<br>logrotate 文件</p>\n<p>说明：</p>\n<ul>\n<li>配置文件：&#x2F;etc&#x2F;logrotate.conf，一般不变动</li>\n<li>设置独立的轮询配置文件，&#x2F;etc&#x2F;logrotate.d</li>\n</ul>\n<h4 id=\"二、实践配置\"><a href=\"#二、实践配置\" class=\"headerlink\" title=\"二、实践配置\"></a>二、实践配置</h4><p>创建一个10M的塞满随机二进制数据的文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch /var/log/log-file</span><br><span class=\"line\">head -c 10M &lt; /dev/urandom &gt; /var/log/log-file </span><br></pre></td></tr></table></figure>\n\n<p>配置轮询配置文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/logrotate.d/log-file</span><br><span class=\"line\"></span><br><span class=\"line\">/var/log/log-file &#123;</span><br><span class=\"line\">    monthly</span><br><span class=\"line\">    rotate 5</span><br><span class=\"line\">    compress</span><br><span class=\"line\">    delaycompress</span><br><span class=\"line\">    missingok</span><br><span class=\"line\">    notifempty</span><br><span class=\"line\">    create 644 root root</span><br><span class=\"line\">    postrotate</span><br><span class=\"line\">        /usr/bin/killall -HUP rsyslogd</span><br><span class=\"line\">    endscript</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><code>monthly</code> 每月运行一次。其它可用值为’daily’，’weekly’或者’yearly’</li>\n<li><code>rotate 5</code> 切割后，保留最近的5次切割结果文件</li>\n<li><code>compress</code> 在轮循任务完成后，已轮循的归档将使用gzip进行压缩</li>\n<li><code>delaycompress</code> 总是与compress选项一起用，delaycompress选项指示logrotate不要将最近的归档压缩，压缩将在下一次轮循周期进行。这在你或任何软件仍然需要读取最新归档时很有用。</li>\n<li><code>missingok</code> 在日志轮循期间，任何错误将被忽略，例如“文件无法找到”之类的错误。</li>\n<li><code>notifempty</code> 如果日志文件为空，轮循不会进行。</li>\n<li><code>create 644 root root</code> 以指定的权限创建全新的日志文件，同时logrotate也会重命名原始日志文件</li>\n<li><code>postrotate</code>在所有其它指令完成后，postrotate和endscript里面指定的命令将被执行。在这种情况下，rsyslogd 进程将立即再次读取其配置并继续运行。</li>\n<li><code>size 100k</code> 日志大小超过 100k 时, 进行切割</li>\n<li><code>olddir /var/log/news/old</code> 切割后数据放入指定目录 &#x2F;var&#x2F;log&#x2F;news&#x2F;old</li>\n<li><code>nocompress</code> 转储文件不压缩</li>\n</ul>\n<p>配置完成后，载入&#x2F;etc&#x2F;lograte.d&#x2F;log-file</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 即使轮循条件没有满足，我们也可以通过使用&#x27;-f&#x27;选项来强制logrotate轮循日志文件，&#x27;-v&#x27;参数提供了详细的输出</span><br><span class=\"line\">logrotate -vf /etc/logrotate.d/log-file </span><br><span class=\"line\"></span><br><span class=\"line\">ll /var/log/log-file*</span><br></pre></td></tr></table></figure>\n<p>结果:<br>-rw-r—– 1 root root   0 Nov 16 14:57 log-file<br>-rw-r–r– 1 root root   3 Nov 16 14:57 log-file.1</p>\n<p>log-file.1没有变成压缩文件是因为设置了delaycompress，后面再观察下个轮询周期到了log-file.1就会变成log-file.2.gz文件，log-file会变成log-file.1，log-file是最新的空文件，<code>zcat log-file.2.gz</code>查看压缩内容。</p>\n<p>logrotate自身的日志在<code>/var/lib/logrotate/</code>目录下</p>\n<h4 id=\"三、logrotate生产应用\"><a href=\"#三、logrotate生产应用\" class=\"headerlink\" title=\"三、logrotate生产应用\"></a>三、logrotate生产应用</h4><p>nginx日志轮询</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/logrotate.d/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/local/nginx/logs/*.log &#123;</span><br><span class=\"line\">    daily</span><br><span class=\"line\">    compress</span><br><span class=\"line\">    delaycompress</span><br><span class=\"line\">    rotate 365</span><br><span class=\"line\">    missingok</span><br><span class=\"line\">    notifempty</span><br><span class=\"line\">    dateext</span><br><span class=\"line\">    sharedscripts</span><br><span class=\"line\">    postrotate</span><br><span class=\"line\">      if [ -f /usr/local/nginx/logs/nginx.pid ]; then</span><br><span class=\"line\">          kill -USR1 `cat /usr/local/nginx/logs/nginx.pid`</span><br><span class=\"line\">      fi</span><br><span class=\"line\">    endscript</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接着执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logrotate /etc/logrotate.d/nginx # 载入配置，因为没有达到daily的轮询条件，要到第二天才能看到轮询结果。可&#x27;logrotate -vf /etc/logrotate.d/nginx&#x27; 强制执行</span><br></pre></td></tr></table></figure>\n\n<p>说明：</p>\n<ul>\n<li><p><code>dateext</code> 表示以日期命名轮询文件后缀，如access.log变成access.log-20211116</p>\n</li>\n<li><p><code>sharedscripts</code> 意味着 postrotate 脚本将只运行一次（在旧日志被压缩之后），而不是为每个轮询的日志运行一次</p>\n</li>\n<li><p>USR1通常被用来告知应用程序重载配置文件；例如，向Apache HTTP服务器发送一个USR1信号将导致以下步骤的发生：停止接受新的连接，等待当前连接停止，重新载入配置文件，重新打开日志文件，重启服务器，从而实现相对平滑的不关机的更改。</p>\n</li>\n<li><p>kill -HUP pid 或者 killall -HUP pName，其中pid指进程id，pName为进程名称。<br>如果想要更改配置而不需停止并重新启动服务，可以使用上面两个命令。在对配置文件作必要的更改后，发出该命令以动态更新服务配置。根据约定，当你发送一个挂起信号(信号1或HUP)时，大多数服务器进程(所有常用的进程)都会进行复位操作并重新加载它们的配置文件。</p>\n</li>\n</ul>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p><a href=\"https://www.cnblogs.com/clsn/p/8428257.html\">https://www.cnblogs.com/clsn/p/8428257.html</a></p>\n<p><a href=\"https://blog.csdn.net/be5yond/article/details/122211394\">https://blog.csdn.net/be5yond/article/details/122211394</a></p>\n"},{"title":"第39期：strace","date":"2023-05-25T04:34:12.000Z","_content":"#### 介绍\nstrace: 跟踪用户空间的系统调用。系统调用又称系统呼叫（system call）,它是内核提供的一组抽象接口，内核直接运行于硬件之上。\n\nlinux内核目前有300多个系统调用函数，详细列表可用syscalls手册查看。主要分以下几类：\n文件和设备访问类：open，write，read，chmod等\n进程管理类：fork，clone，execve，exit，getpid\n内存管理：brk/mmap/mlock\n网络通信：sendmsg，socket\n\n\n#### strace使用范例\n```\n# 追踪nginx启动打开的文件\nstrace -T -tt -f -e trace=file -o /data/log/strace.log -s 1024 nginx\n\n输出内容：第一列为进程pid 第二列毫秒级别时间(-tt) 最后一列为系统调用时间（-T）\n```\n\n-T 显示系统调用话费时间\n-tt 显示毫秒级别时间\n-e trace=file 只显示与文件访问相关；trace=process 与进程管理相关；trace=ipc只显示与进程间通信相关; network 和网络通信调用相关；desc 和文件描述符相关\n-p 指定追踪进程\n\n进程间通信设计共享内存：ipcs -m # 查看共享内存\n\n##### 总结\n进程异常可通过strace追踪，进程若卡死在用户态strace则不适用。尝试用perf，systemtap，它们可探查内核态。\n\n\n```\nroot@ubuntu:/usr# strace cat /dev/ \nexecve(, [, ], []) = \nbrk()                                  = \naccess(, F_OK)      = - ENOENT (No such file or directory)\nmmap(NULL, , PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -, ) = \naccess(, R_OK)      = - ENOENT (No such file or directory)\n...\nbrk() = \nbrk() = \nfstat(, {st_mode=S_IFCHR|, st_rdev=makedev(, ), ...}) = \nopen(, O_RDONLY) = \nfstat(, {st_mode=S_IFCHR|, st_rdev=makedev(, ), ...}) = \nread(, , ) = \nclose() = \nclose() = \nclose() = \nexit_group() = ?\n```\n解析上面输出：每一行是一次系统调用，等号左边是系统调用函数名，右边是函数返回值。\n\n参考：https://www.cnblogs.com/machangwei-8/p/10388883.html","source":"_posts/第39期：strace.md","raw":"---\ntitle: 第39期：strace\ndate: 2023-05-25 12:34:12\ntags:\n---\n#### 介绍\nstrace: 跟踪用户空间的系统调用。系统调用又称系统呼叫（system call）,它是内核提供的一组抽象接口，内核直接运行于硬件之上。\n\nlinux内核目前有300多个系统调用函数，详细列表可用syscalls手册查看。主要分以下几类：\n文件和设备访问类：open，write，read，chmod等\n进程管理类：fork，clone，execve，exit，getpid\n内存管理：brk/mmap/mlock\n网络通信：sendmsg，socket\n\n\n#### strace使用范例\n```\n# 追踪nginx启动打开的文件\nstrace -T -tt -f -e trace=file -o /data/log/strace.log -s 1024 nginx\n\n输出内容：第一列为进程pid 第二列毫秒级别时间(-tt) 最后一列为系统调用时间（-T）\n```\n\n-T 显示系统调用话费时间\n-tt 显示毫秒级别时间\n-e trace=file 只显示与文件访问相关；trace=process 与进程管理相关；trace=ipc只显示与进程间通信相关; network 和网络通信调用相关；desc 和文件描述符相关\n-p 指定追踪进程\n\n进程间通信设计共享内存：ipcs -m # 查看共享内存\n\n##### 总结\n进程异常可通过strace追踪，进程若卡死在用户态strace则不适用。尝试用perf，systemtap，它们可探查内核态。\n\n\n```\nroot@ubuntu:/usr# strace cat /dev/ \nexecve(, [, ], []) = \nbrk()                                  = \naccess(, F_OK)      = - ENOENT (No such file or directory)\nmmap(NULL, , PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -, ) = \naccess(, R_OK)      = - ENOENT (No such file or directory)\n...\nbrk() = \nbrk() = \nfstat(, {st_mode=S_IFCHR|, st_rdev=makedev(, ), ...}) = \nopen(, O_RDONLY) = \nfstat(, {st_mode=S_IFCHR|, st_rdev=makedev(, ), ...}) = \nread(, , ) = \nclose() = \nclose() = \nclose() = \nexit_group() = ?\n```\n解析上面输出：每一行是一次系统调用，等号左边是系统调用函数名，右边是函数返回值。\n\n参考：https://www.cnblogs.com/machangwei-8/p/10388883.html","slug":"第39期：strace","published":1,"updated":"2024-03-06T06:55:18.365Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt73000t9klnau5l2ie0","content":"<h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><p>strace: 跟踪用户空间的系统调用。系统调用又称系统呼叫（system call）,它是内核提供的一组抽象接口，内核直接运行于硬件之上。</p>\n<p>linux内核目前有300多个系统调用函数，详细列表可用syscalls手册查看。主要分以下几类：<br>文件和设备访问类：open，write，read，chmod等<br>进程管理类：fork，clone，execve，exit，getpid<br>内存管理：brk&#x2F;mmap&#x2F;mlock<br>网络通信：sendmsg，socket</p>\n<h4 id=\"strace使用范例\"><a href=\"#strace使用范例\" class=\"headerlink\" title=\"strace使用范例\"></a>strace使用范例</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 追踪nginx启动打开的文件</span><br><span class=\"line\">strace -T -tt -f -e trace=file -o /data/log/strace.log -s 1024 nginx</span><br><span class=\"line\"></span><br><span class=\"line\">输出内容：第一列为进程pid 第二列毫秒级别时间(-tt) 最后一列为系统调用时间（-T）</span><br></pre></td></tr></table></figure>\n\n<p>-T 显示系统调用话费时间<br>-tt 显示毫秒级别时间<br>-e trace&#x3D;file 只显示与文件访问相关；trace&#x3D;process 与进程管理相关；trace&#x3D;ipc只显示与进程间通信相关; network 和网络通信调用相关；desc 和文件描述符相关<br>-p 指定追踪进程</p>\n<p>进程间通信设计共享内存：ipcs -m # 查看共享内存</p>\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><p>进程异常可通过strace追踪，进程若卡死在用户态strace则不适用。尝试用perf，systemtap，它们可探查内核态。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu:/usr# strace cat /dev/ </span><br><span class=\"line\">execve(, [, ], []) = </span><br><span class=\"line\">brk()                                  = </span><br><span class=\"line\">access(, F_OK)      = - ENOENT (No such file or directory)</span><br><span class=\"line\">mmap(NULL, , PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -, ) = </span><br><span class=\"line\">access(, R_OK)      = - ENOENT (No such file or directory)</span><br><span class=\"line\">...</span><br><span class=\"line\">brk() = </span><br><span class=\"line\">brk() = </span><br><span class=\"line\">fstat(, &#123;st_mode=S_IFCHR|, st_rdev=makedev(, ), ...&#125;) = </span><br><span class=\"line\">open(, O_RDONLY) = </span><br><span class=\"line\">fstat(, &#123;st_mode=S_IFCHR|, st_rdev=makedev(, ), ...&#125;) = </span><br><span class=\"line\">read(, , ) = </span><br><span class=\"line\">close() = </span><br><span class=\"line\">close() = </span><br><span class=\"line\">close() = </span><br><span class=\"line\">exit_group() = ?</span><br></pre></td></tr></table></figure>\n<p>解析上面输出：每一行是一次系统调用，等号左边是系统调用函数名，右边是函数返回值。</p>\n<p>参考：<a href=\"https://www.cnblogs.com/machangwei-8/p/10388883.html\">https://www.cnblogs.com/machangwei-8/p/10388883.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><p>strace: 跟踪用户空间的系统调用。系统调用又称系统呼叫（system call）,它是内核提供的一组抽象接口，内核直接运行于硬件之上。</p>\n<p>linux内核目前有300多个系统调用函数，详细列表可用syscalls手册查看。主要分以下几类：<br>文件和设备访问类：open，write，read，chmod等<br>进程管理类：fork，clone，execve，exit，getpid<br>内存管理：brk&#x2F;mmap&#x2F;mlock<br>网络通信：sendmsg，socket</p>\n<h4 id=\"strace使用范例\"><a href=\"#strace使用范例\" class=\"headerlink\" title=\"strace使用范例\"></a>strace使用范例</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 追踪nginx启动打开的文件</span><br><span class=\"line\">strace -T -tt -f -e trace=file -o /data/log/strace.log -s 1024 nginx</span><br><span class=\"line\"></span><br><span class=\"line\">输出内容：第一列为进程pid 第二列毫秒级别时间(-tt) 最后一列为系统调用时间（-T）</span><br></pre></td></tr></table></figure>\n\n<p>-T 显示系统调用话费时间<br>-tt 显示毫秒级别时间<br>-e trace&#x3D;file 只显示与文件访问相关；trace&#x3D;process 与进程管理相关；trace&#x3D;ipc只显示与进程间通信相关; network 和网络通信调用相关；desc 和文件描述符相关<br>-p 指定追踪进程</p>\n<p>进程间通信设计共享内存：ipcs -m # 查看共享内存</p>\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><p>进程异常可通过strace追踪，进程若卡死在用户态strace则不适用。尝试用perf，systemtap，它们可探查内核态。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu:/usr# strace cat /dev/ </span><br><span class=\"line\">execve(, [, ], []) = </span><br><span class=\"line\">brk()                                  = </span><br><span class=\"line\">access(, F_OK)      = - ENOENT (No such file or directory)</span><br><span class=\"line\">mmap(NULL, , PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -, ) = </span><br><span class=\"line\">access(, R_OK)      = - ENOENT (No such file or directory)</span><br><span class=\"line\">...</span><br><span class=\"line\">brk() = </span><br><span class=\"line\">brk() = </span><br><span class=\"line\">fstat(, &#123;st_mode=S_IFCHR|, st_rdev=makedev(, ), ...&#125;) = </span><br><span class=\"line\">open(, O_RDONLY) = </span><br><span class=\"line\">fstat(, &#123;st_mode=S_IFCHR|, st_rdev=makedev(, ), ...&#125;) = </span><br><span class=\"line\">read(, , ) = </span><br><span class=\"line\">close() = </span><br><span class=\"line\">close() = </span><br><span class=\"line\">close() = </span><br><span class=\"line\">exit_group() = ?</span><br></pre></td></tr></table></figure>\n<p>解析上面输出：每一行是一次系统调用，等号左边是系统调用函数名，右边是函数返回值。</p>\n<p>参考：<a href=\"https://www.cnblogs.com/machangwei-8/p/10388883.html\">https://www.cnblogs.com/machangwei-8/p/10388883.html</a></p>\n"},{"title":"第40期：Maven","date":"2023-05-26T05:07:00.000Z","_content":"### Maven\n#### 属性介绍\n```\n<groupId>   // 团队标志。约定为组织的逆向名称，如org.apache\n<artifactId> // 项目唯一标识符。如tomcat，不要在artifactId包含.\n<packaging>  // 项目打包后的输出，默认为jar，类型为war产生一个web应用。\n```\n\n#### 安装\n环境：centos7\n\n官网地址：https://maven.apache.org/download.cgi\n\n```\ncd /opt/maven\nwget https://dlcdn.apache.org/maven/maven-3/3.8.6/binaries/apache-maven-3.8.6-bin.tar.gz --no-check-certificate\ntar -xzvf apache-maven-3.8.6-bin.tar.gz\nmv apache-maven-3.8.6 maven\n\n# vi /etc/profile，加入\n\nexport PATH=$PATH:/opt/maven/maven/bin\n\n# 执行 source /etc/profile\n\nmvn -v\n```\n\n#### pom.xml介绍\n```\n# <dependences>标签包含的属性标签：\n<groupId> // 项目组织，对应包结构\n<artifactId> // 项目名称，对应根目录\n<version> // jar版本，可以在<properties>中定义\n<scope> // jar包作用范围。可以填写compile，runtime，test，system，provided。\n<dependenceManage> // 依赖声明，包不会被mvn加载，但可以被子pom.xml继承，这样子pom只需要声明<groupId>和<artifactId>，dependenceManage就是用来做版本统一的。\n<properties> // 定义属性，${property}调用\n<properties>\n  <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>  // 指定maven构建时的编码\n  <maven.compiler.source>1.7</maven.compiler.source> // 指定构建时的jdk版本\n  <maven.compiler.target>1.7</maven.compiler.target>\n</properties>\n```\n\n如何寻找jar包？\n\n在 (http://mvnrepository.com/) 搜索关键字，如log4j。\n\n#### 如何一次编译多个project？\n父工程app包含子app1和app2，在app的pom.xml引入两个字module\n```\n<project>\n...\n<modules>\n    <module>app1</module>\n    <module>app2</module>\n  </modules>\n...\n</project>\n```\n#### Maven命令\n```\nmvn compile // 编译项目源码\nmvn test // 使用合适单元测试框架进行测试\nmvn verify // 执行所有检查，验证包是有效的\nmvn install // 安装包到本地仓库\nmvn clean package -Dmaven.test.skip=true // 跳过单元测试\nmvn compile process-resources package # 包含静态资源的编译打包\nmvn clean package -pl com.emog:cpe-app -am -Dmaven.test.skip=true\n```\n\n#### Maven全局配置settings.xml\nsettings.xml存在两个位置\n- ${maven_home}/conf/settings.xml // 全局配置\n- ${home}/.m2/settings.xml // 用户配置\n\npom.xml是本地项目配置\n\n说明：pom.xml > 用户配置 > 全局配置（使用优先级比较）\n\nsettings.xml内容：\n```\n<localRepository>~/.m2/repository</localRepository> // 本地仓库路径配置\n<servers> // 一些包的拉取需要认证，这些信息不适合配在pom\n<mirrors> // 仓库镜像地址\n```\n\n#### 常用问题\n```\n# 执行 mvn package 或 mvn install 时，会自动编译所有单元测试(src/test/java 目录下的代码)，如何跳过这一步？\n  在执行命令的后面，添加命令行参数 -Dmaven.test.skip=true 或者 -DskipTests=true\n\n参考：https://github.com/dunwu/java-tutorial/blob/master/docs/11.%E8%BD%AF%E4%BB%B6/01.%E6%9E%84%E5%BB%BA/01.Maven/04.Maven%E5%AE%9E%E6%88%98%E9%97%AE%E9%A2%98%E5%92%8C%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.md\n```\n\n### 部署 maven 私服 Nexus\n参考：https://github.com/dunwu/java-tutorial/blob/master/docs/11.%E8%BD%AF%E4%BB%B6/01.%E6%9E%84%E5%BB%BA/01.Maven/05.Maven%E6%95%99%E7%A8%8B%E4%B9%8B%E5%8F%91%E5%B8%83jar%E5%88%B0%E7%A7%81%E6%9C%8D%E6%88%96%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93.md","source":"_posts/第40期：Maven.md","raw":"---\ntitle: 第40期：Maven\ndate: 2023-05-26 13:07:00\ntags:\n---\n### Maven\n#### 属性介绍\n```\n<groupId>   // 团队标志。约定为组织的逆向名称，如org.apache\n<artifactId> // 项目唯一标识符。如tomcat，不要在artifactId包含.\n<packaging>  // 项目打包后的输出，默认为jar，类型为war产生一个web应用。\n```\n\n#### 安装\n环境：centos7\n\n官网地址：https://maven.apache.org/download.cgi\n\n```\ncd /opt/maven\nwget https://dlcdn.apache.org/maven/maven-3/3.8.6/binaries/apache-maven-3.8.6-bin.tar.gz --no-check-certificate\ntar -xzvf apache-maven-3.8.6-bin.tar.gz\nmv apache-maven-3.8.6 maven\n\n# vi /etc/profile，加入\n\nexport PATH=$PATH:/opt/maven/maven/bin\n\n# 执行 source /etc/profile\n\nmvn -v\n```\n\n#### pom.xml介绍\n```\n# <dependences>标签包含的属性标签：\n<groupId> // 项目组织，对应包结构\n<artifactId> // 项目名称，对应根目录\n<version> // jar版本，可以在<properties>中定义\n<scope> // jar包作用范围。可以填写compile，runtime，test，system，provided。\n<dependenceManage> // 依赖声明，包不会被mvn加载，但可以被子pom.xml继承，这样子pom只需要声明<groupId>和<artifactId>，dependenceManage就是用来做版本统一的。\n<properties> // 定义属性，${property}调用\n<properties>\n  <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>  // 指定maven构建时的编码\n  <maven.compiler.source>1.7</maven.compiler.source> // 指定构建时的jdk版本\n  <maven.compiler.target>1.7</maven.compiler.target>\n</properties>\n```\n\n如何寻找jar包？\n\n在 (http://mvnrepository.com/) 搜索关键字，如log4j。\n\n#### 如何一次编译多个project？\n父工程app包含子app1和app2，在app的pom.xml引入两个字module\n```\n<project>\n...\n<modules>\n    <module>app1</module>\n    <module>app2</module>\n  </modules>\n...\n</project>\n```\n#### Maven命令\n```\nmvn compile // 编译项目源码\nmvn test // 使用合适单元测试框架进行测试\nmvn verify // 执行所有检查，验证包是有效的\nmvn install // 安装包到本地仓库\nmvn clean package -Dmaven.test.skip=true // 跳过单元测试\nmvn compile process-resources package # 包含静态资源的编译打包\nmvn clean package -pl com.emog:cpe-app -am -Dmaven.test.skip=true\n```\n\n#### Maven全局配置settings.xml\nsettings.xml存在两个位置\n- ${maven_home}/conf/settings.xml // 全局配置\n- ${home}/.m2/settings.xml // 用户配置\n\npom.xml是本地项目配置\n\n说明：pom.xml > 用户配置 > 全局配置（使用优先级比较）\n\nsettings.xml内容：\n```\n<localRepository>~/.m2/repository</localRepository> // 本地仓库路径配置\n<servers> // 一些包的拉取需要认证，这些信息不适合配在pom\n<mirrors> // 仓库镜像地址\n```\n\n#### 常用问题\n```\n# 执行 mvn package 或 mvn install 时，会自动编译所有单元测试(src/test/java 目录下的代码)，如何跳过这一步？\n  在执行命令的后面，添加命令行参数 -Dmaven.test.skip=true 或者 -DskipTests=true\n\n参考：https://github.com/dunwu/java-tutorial/blob/master/docs/11.%E8%BD%AF%E4%BB%B6/01.%E6%9E%84%E5%BB%BA/01.Maven/04.Maven%E5%AE%9E%E6%88%98%E9%97%AE%E9%A2%98%E5%92%8C%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.md\n```\n\n### 部署 maven 私服 Nexus\n参考：https://github.com/dunwu/java-tutorial/blob/master/docs/11.%E8%BD%AF%E4%BB%B6/01.%E6%9E%84%E5%BB%BA/01.Maven/05.Maven%E6%95%99%E7%A8%8B%E4%B9%8B%E5%8F%91%E5%B8%83jar%E5%88%B0%E7%A7%81%E6%9C%8D%E6%88%96%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93.md","slug":"第40期：Maven","published":1,"updated":"2024-03-06T06:55:18.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt74000u9kln7dyf7jdk","content":"<h3 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h3><h4 id=\"属性介绍\"><a href=\"#属性介绍\" class=\"headerlink\" title=\"属性介绍\"></a>属性介绍</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;groupId&gt;   // 团队标志。约定为组织的逆向名称，如org.apache</span><br><span class=\"line\">&lt;artifactId&gt; // 项目唯一标识符。如tomcat，不要在artifactId包含.</span><br><span class=\"line\">&lt;packaging&gt;  // 项目打包后的输出，默认为jar，类型为war产生一个web应用。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>环境：centos7</p>\n<p>官网地址：<a href=\"https://maven.apache.org/download.cgi\">https://maven.apache.org/download.cgi</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/maven</span><br><span class=\"line\">wget https://dlcdn.apache.org/maven/maven-3/3.8.6/binaries/apache-maven-3.8.6-bin.tar.gz --no-check-certificate</span><br><span class=\"line\">tar -xzvf apache-maven-3.8.6-bin.tar.gz</span><br><span class=\"line\">mv apache-maven-3.8.6 maven</span><br><span class=\"line\"></span><br><span class=\"line\"># vi /etc/profile，加入</span><br><span class=\"line\"></span><br><span class=\"line\">export PATH=$PATH:/opt/maven/maven/bin</span><br><span class=\"line\"></span><br><span class=\"line\"># 执行 source /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">mvn -v</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"pom-xml介绍\"><a href=\"#pom-xml介绍\" class=\"headerlink\" title=\"pom.xml介绍\"></a>pom.xml介绍</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># &lt;dependences&gt;标签包含的属性标签：</span><br><span class=\"line\">&lt;groupId&gt; // 项目组织，对应包结构</span><br><span class=\"line\">&lt;artifactId&gt; // 项目名称，对应根目录</span><br><span class=\"line\">&lt;version&gt; // jar版本，可以在&lt;properties&gt;中定义</span><br><span class=\"line\">&lt;scope&gt; // jar包作用范围。可以填写compile，runtime，test，system，provided。</span><br><span class=\"line\">&lt;dependenceManage&gt; // 依赖声明，包不会被mvn加载，但可以被子pom.xml继承，这样子pom只需要声明&lt;groupId&gt;和&lt;artifactId&gt;，dependenceManage就是用来做版本统一的。</span><br><span class=\"line\">&lt;properties&gt; // 定义属性，$&#123;property&#125;调用</span><br><span class=\"line\">&lt;properties&gt;</span><br><span class=\"line\">  &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;  // 指定maven构建时的编码</span><br><span class=\"line\">  &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt; // 指定构建时的jdk版本</span><br><span class=\"line\">  &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt;</span><br><span class=\"line\">&lt;/properties&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如何寻找jar包？</p>\n<p>在 (<a href=\"http://mvnrepository.com/\">http://mvnrepository.com/</a>) 搜索关键字，如log4j。</p>\n<h4 id=\"如何一次编译多个project？\"><a href=\"#如何一次编译多个project？\" class=\"headerlink\" title=\"如何一次编译多个project？\"></a>如何一次编译多个project？</h4><p>父工程app包含子app1和app2，在app的pom.xml引入两个字module</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project&gt;</span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;modules&gt;</span><br><span class=\"line\">    &lt;module&gt;app1&lt;/module&gt;</span><br><span class=\"line\">    &lt;module&gt;app2&lt;/module&gt;</span><br><span class=\"line\">  &lt;/modules&gt;</span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Maven命令\"><a href=\"#Maven命令\" class=\"headerlink\" title=\"Maven命令\"></a>Maven命令</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn compile // 编译项目源码</span><br><span class=\"line\">mvn test // 使用合适单元测试框架进行测试</span><br><span class=\"line\">mvn verify // 执行所有检查，验证包是有效的</span><br><span class=\"line\">mvn install // 安装包到本地仓库</span><br><span class=\"line\">mvn clean package -Dmaven.test.skip=true // 跳过单元测试</span><br><span class=\"line\">mvn compile process-resources package # 包含静态资源的编译打包</span><br><span class=\"line\">mvn clean package -pl com.emog:cpe-app -am -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Maven全局配置settings-xml\"><a href=\"#Maven全局配置settings-xml\" class=\"headerlink\" title=\"Maven全局配置settings.xml\"></a>Maven全局配置settings.xml</h4><p>settings.xml存在两个位置</p>\n<ul>\n<li>${maven_home}&#x2F;conf&#x2F;settings.xml &#x2F;&#x2F; 全局配置</li>\n<li>${home}&#x2F;.m2&#x2F;settings.xml &#x2F;&#x2F; 用户配置</li>\n</ul>\n<p>pom.xml是本地项目配置</p>\n<p>说明：pom.xml &gt; 用户配置 &gt; 全局配置（使用优先级比较）</p>\n<p>settings.xml内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;localRepository&gt;~/.m2/repository&lt;/localRepository&gt; // 本地仓库路径配置</span><br><span class=\"line\">&lt;servers&gt; // 一些包的拉取需要认证，这些信息不适合配在pom</span><br><span class=\"line\">&lt;mirrors&gt; // 仓库镜像地址</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"常用问题\"><a href=\"#常用问题\" class=\"headerlink\" title=\"常用问题\"></a>常用问题</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 执行 mvn package 或 mvn install 时，会自动编译所有单元测试(src/test/java 目录下的代码)，如何跳过这一步？</span><br><span class=\"line\">  在执行命令的后面，添加命令行参数 -Dmaven.test.skip=true 或者 -DskipTests=true</span><br><span class=\"line\"></span><br><span class=\"line\">参考：https://github.com/dunwu/java-tutorial/blob/master/docs/11.%E8%BD%AF%E4%BB%B6/01.%E6%9E%84%E5%BB%BA/01.Maven/04.Maven%E5%AE%9E%E6%88%98%E9%97%AE%E9%A2%98%E5%92%8C%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.md</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署-maven-私服-Nexus\"><a href=\"#部署-maven-私服-Nexus\" class=\"headerlink\" title=\"部署 maven 私服 Nexus\"></a>部署 maven 私服 Nexus</h3><p>参考：<a href=\"https://github.com/dunwu/java-tutorial/blob/master/docs/11.%E8%BD%AF%E4%BB%B6/01.%E6%9E%84%E5%BB%BA/01.Maven/05.Maven%E6%95%99%E7%A8%8B%E4%B9%8B%E5%8F%91%E5%B8%83jar%E5%88%B0%E7%A7%81%E6%9C%8D%E6%88%96%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93.md\">https://github.com/dunwu/java-tutorial/blob/master/docs/11.%E8%BD%AF%E4%BB%B6/01.%E6%9E%84%E5%BB%BA/01.Maven/05.Maven%E6%95%99%E7%A8%8B%E4%B9%8B%E5%8F%91%E5%B8%83jar%E5%88%B0%E7%A7%81%E6%9C%8D%E6%88%96%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93.md</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h3><h4 id=\"属性介绍\"><a href=\"#属性介绍\" class=\"headerlink\" title=\"属性介绍\"></a>属性介绍</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;groupId&gt;   // 团队标志。约定为组织的逆向名称，如org.apache</span><br><span class=\"line\">&lt;artifactId&gt; // 项目唯一标识符。如tomcat，不要在artifactId包含.</span><br><span class=\"line\">&lt;packaging&gt;  // 项目打包后的输出，默认为jar，类型为war产生一个web应用。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>环境：centos7</p>\n<p>官网地址：<a href=\"https://maven.apache.org/download.cgi\">https://maven.apache.org/download.cgi</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/maven</span><br><span class=\"line\">wget https://dlcdn.apache.org/maven/maven-3/3.8.6/binaries/apache-maven-3.8.6-bin.tar.gz --no-check-certificate</span><br><span class=\"line\">tar -xzvf apache-maven-3.8.6-bin.tar.gz</span><br><span class=\"line\">mv apache-maven-3.8.6 maven</span><br><span class=\"line\"></span><br><span class=\"line\"># vi /etc/profile，加入</span><br><span class=\"line\"></span><br><span class=\"line\">export PATH=$PATH:/opt/maven/maven/bin</span><br><span class=\"line\"></span><br><span class=\"line\"># 执行 source /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">mvn -v</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"pom-xml介绍\"><a href=\"#pom-xml介绍\" class=\"headerlink\" title=\"pom.xml介绍\"></a>pom.xml介绍</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># &lt;dependences&gt;标签包含的属性标签：</span><br><span class=\"line\">&lt;groupId&gt; // 项目组织，对应包结构</span><br><span class=\"line\">&lt;artifactId&gt; // 项目名称，对应根目录</span><br><span class=\"line\">&lt;version&gt; // jar版本，可以在&lt;properties&gt;中定义</span><br><span class=\"line\">&lt;scope&gt; // jar包作用范围。可以填写compile，runtime，test，system，provided。</span><br><span class=\"line\">&lt;dependenceManage&gt; // 依赖声明，包不会被mvn加载，但可以被子pom.xml继承，这样子pom只需要声明&lt;groupId&gt;和&lt;artifactId&gt;，dependenceManage就是用来做版本统一的。</span><br><span class=\"line\">&lt;properties&gt; // 定义属性，$&#123;property&#125;调用</span><br><span class=\"line\">&lt;properties&gt;</span><br><span class=\"line\">  &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;  // 指定maven构建时的编码</span><br><span class=\"line\">  &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt; // 指定构建时的jdk版本</span><br><span class=\"line\">  &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt;</span><br><span class=\"line\">&lt;/properties&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如何寻找jar包？</p>\n<p>在 (<a href=\"http://mvnrepository.com/\">http://mvnrepository.com/</a>) 搜索关键字，如log4j。</p>\n<h4 id=\"如何一次编译多个project？\"><a href=\"#如何一次编译多个project？\" class=\"headerlink\" title=\"如何一次编译多个project？\"></a>如何一次编译多个project？</h4><p>父工程app包含子app1和app2，在app的pom.xml引入两个字module</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project&gt;</span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;modules&gt;</span><br><span class=\"line\">    &lt;module&gt;app1&lt;/module&gt;</span><br><span class=\"line\">    &lt;module&gt;app2&lt;/module&gt;</span><br><span class=\"line\">  &lt;/modules&gt;</span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Maven命令\"><a href=\"#Maven命令\" class=\"headerlink\" title=\"Maven命令\"></a>Maven命令</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn compile // 编译项目源码</span><br><span class=\"line\">mvn test // 使用合适单元测试框架进行测试</span><br><span class=\"line\">mvn verify // 执行所有检查，验证包是有效的</span><br><span class=\"line\">mvn install // 安装包到本地仓库</span><br><span class=\"line\">mvn clean package -Dmaven.test.skip=true // 跳过单元测试</span><br><span class=\"line\">mvn compile process-resources package # 包含静态资源的编译打包</span><br><span class=\"line\">mvn clean package -pl com.emog:cpe-app -am -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Maven全局配置settings-xml\"><a href=\"#Maven全局配置settings-xml\" class=\"headerlink\" title=\"Maven全局配置settings.xml\"></a>Maven全局配置settings.xml</h4><p>settings.xml存在两个位置</p>\n<ul>\n<li>${maven_home}&#x2F;conf&#x2F;settings.xml &#x2F;&#x2F; 全局配置</li>\n<li>${home}&#x2F;.m2&#x2F;settings.xml &#x2F;&#x2F; 用户配置</li>\n</ul>\n<p>pom.xml是本地项目配置</p>\n<p>说明：pom.xml &gt; 用户配置 &gt; 全局配置（使用优先级比较）</p>\n<p>settings.xml内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;localRepository&gt;~/.m2/repository&lt;/localRepository&gt; // 本地仓库路径配置</span><br><span class=\"line\">&lt;servers&gt; // 一些包的拉取需要认证，这些信息不适合配在pom</span><br><span class=\"line\">&lt;mirrors&gt; // 仓库镜像地址</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"常用问题\"><a href=\"#常用问题\" class=\"headerlink\" title=\"常用问题\"></a>常用问题</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 执行 mvn package 或 mvn install 时，会自动编译所有单元测试(src/test/java 目录下的代码)，如何跳过这一步？</span><br><span class=\"line\">  在执行命令的后面，添加命令行参数 -Dmaven.test.skip=true 或者 -DskipTests=true</span><br><span class=\"line\"></span><br><span class=\"line\">参考：https://github.com/dunwu/java-tutorial/blob/master/docs/11.%E8%BD%AF%E4%BB%B6/01.%E6%9E%84%E5%BB%BA/01.Maven/04.Maven%E5%AE%9E%E6%88%98%E9%97%AE%E9%A2%98%E5%92%8C%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.md</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署-maven-私服-Nexus\"><a href=\"#部署-maven-私服-Nexus\" class=\"headerlink\" title=\"部署 maven 私服 Nexus\"></a>部署 maven 私服 Nexus</h3><p>参考：<a href=\"https://github.com/dunwu/java-tutorial/blob/master/docs/11.%E8%BD%AF%E4%BB%B6/01.%E6%9E%84%E5%BB%BA/01.Maven/05.Maven%E6%95%99%E7%A8%8B%E4%B9%8B%E5%8F%91%E5%B8%83jar%E5%88%B0%E7%A7%81%E6%9C%8D%E6%88%96%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93.md\">https://github.com/dunwu/java-tutorial/blob/master/docs/11.%E8%BD%AF%E4%BB%B6/01.%E6%9E%84%E5%BB%BA/01.Maven/05.Maven%E6%95%99%E7%A8%8B%E4%B9%8B%E5%8F%91%E5%B8%83jar%E5%88%B0%E7%A7%81%E6%9C%8D%E6%88%96%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93.md</a></p>\n"},{"title":"第41期：sed","date":"2023-05-26T06:35:36.000Z","_content":"### demo\n```\n1. 把文件所有c1的文本变成d1\nsed -i 's/c1/d1/g'\n\n# 当替换字符存在特殊的转义字符，如`\"`，可加`\\`进行防转义\nsed -i -e \"s/sandbox_image = \\\"k8s.gcr.io\\/pause:3.5\\\"/sandbox_image = \\\"registry.aliyuncs.com\\/google_containers\\/pause:3.4.1\\\"/g\" /etc/containerd/config.toml\nsed -i -e \"s/runtime_type = \\\"io.containerd.runc.v2\\\"/runtime_type = \\\"io.containerd.runtime.v1.linux\\\"/g\" /etc/containerd/config.toml\n```\n说明：\n- `-e`表示使用可以在sed中执行多条语句，如`sed -e 's/wang/w/g;s/xu/x/g' user.txt`\n- `-i`表示对文本文件进行字符替换，不加不会实际影响到文本\n- 替换的语句最外部最好加双引号\n- 替换的字符原本存在转义字符需要加\\防止转义","source":"_posts/第41期：sed.md","raw":"---\ntitle: 第41期：sed\ndate: 2023-05-26 14:35:36\ntags:\n---\n### demo\n```\n1. 把文件所有c1的文本变成d1\nsed -i 's/c1/d1/g'\n\n# 当替换字符存在特殊的转义字符，如`\"`，可加`\\`进行防转义\nsed -i -e \"s/sandbox_image = \\\"k8s.gcr.io\\/pause:3.5\\\"/sandbox_image = \\\"registry.aliyuncs.com\\/google_containers\\/pause:3.4.1\\\"/g\" /etc/containerd/config.toml\nsed -i -e \"s/runtime_type = \\\"io.containerd.runc.v2\\\"/runtime_type = \\\"io.containerd.runtime.v1.linux\\\"/g\" /etc/containerd/config.toml\n```\n说明：\n- `-e`表示使用可以在sed中执行多条语句，如`sed -e 's/wang/w/g;s/xu/x/g' user.txt`\n- `-i`表示对文本文件进行字符替换，不加不会实际影响到文本\n- 替换的语句最外部最好加双引号\n- 替换的字符原本存在转义字符需要加\\防止转义","slug":"第41期：sed","published":1,"updated":"2024-03-06T06:55:18.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt75000v9kln00ad8qfr","content":"<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 把文件所有c1的文本变成d1</span><br><span class=\"line\">sed -i &#x27;s/c1/d1/g&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\"># 当替换字符存在特殊的转义字符，如`&quot;`，可加`\\`进行防转义</span><br><span class=\"line\">sed -i -e &quot;s/sandbox_image = \\&quot;k8s.gcr.io\\/pause:3.5\\&quot;/sandbox_image = \\&quot;registry.aliyuncs.com\\/google_containers\\/pause:3.4.1\\&quot;/g&quot; /etc/containerd/config.toml</span><br><span class=\"line\">sed -i -e &quot;s/runtime_type = \\&quot;io.containerd.runc.v2\\&quot;/runtime_type = \\&quot;io.containerd.runtime.v1.linux\\&quot;/g&quot; /etc/containerd/config.toml</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><code>-e</code>表示使用可以在sed中执行多条语句，如<code>sed -e &#39;s/wang/w/g;s/xu/x/g&#39; user.txt</code></li>\n<li><code>-i</code>表示对文本文件进行字符替换，不加不会实际影响到文本</li>\n<li>替换的语句最外部最好加双引号</li>\n<li>替换的字符原本存在转义字符需要加\\防止转义</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 把文件所有c1的文本变成d1</span><br><span class=\"line\">sed -i &#x27;s/c1/d1/g&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\"># 当替换字符存在特殊的转义字符，如`&quot;`，可加`\\`进行防转义</span><br><span class=\"line\">sed -i -e &quot;s/sandbox_image = \\&quot;k8s.gcr.io\\/pause:3.5\\&quot;/sandbox_image = \\&quot;registry.aliyuncs.com\\/google_containers\\/pause:3.4.1\\&quot;/g&quot; /etc/containerd/config.toml</span><br><span class=\"line\">sed -i -e &quot;s/runtime_type = \\&quot;io.containerd.runc.v2\\&quot;/runtime_type = \\&quot;io.containerd.runtime.v1.linux\\&quot;/g&quot; /etc/containerd/config.toml</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><code>-e</code>表示使用可以在sed中执行多条语句，如<code>sed -e &#39;s/wang/w/g;s/xu/x/g&#39; user.txt</code></li>\n<li><code>-i</code>表示对文本文件进行字符替换，不加不会实际影响到文本</li>\n<li>替换的语句最外部最好加双引号</li>\n<li>替换的字符原本存在转义字符需要加\\防止转义</li>\n</ul>\n"},{"title":"第42期：xargs","date":"2023-05-26T06:39:40.000Z","_content":"### xargs作用\n接收管道符传递过来的数据，并将数据作为下一个命令的参数\n\n### 用法\n用法1\n```ps aux|grep code|awk '{ print $2 }'|xargs```\n输出：pid1 pid2          # xargs 等价于 xargs，xargs会把空白和换行替换成空格\n\n用法2\n```ps aux|grep code|awk '{ print $2 }'|xargs -I {} kill {}```\nxargs -I 指定替换字符串为{}，{}代表着管道传递的参数，后面再使用{}会替换成相应参数值。\n","source":"_posts/第42期：xargs.md","raw":"---\ntitle: 第42期：xargs\ndate: 2023-05-26 14:39:40\ntags:\n---\n### xargs作用\n接收管道符传递过来的数据，并将数据作为下一个命令的参数\n\n### 用法\n用法1\n```ps aux|grep code|awk '{ print $2 }'|xargs```\n输出：pid1 pid2          # xargs 等价于 xargs，xargs会把空白和换行替换成空格\n\n用法2\n```ps aux|grep code|awk '{ print $2 }'|xargs -I {} kill {}```\nxargs -I 指定替换字符串为{}，{}代表着管道传递的参数，后面再使用{}会替换成相应参数值。\n","slug":"第42期：xargs","published":1,"updated":"2024-03-06T06:55:18.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt75000w9kln9f1kgevu","content":"<h3 id=\"xargs作用\"><a href=\"#xargs作用\" class=\"headerlink\" title=\"xargs作用\"></a>xargs作用</h3><p>接收管道符传递过来的数据，并将数据作为下一个命令的参数</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p>用法1<br><code>ps aux|grep code|awk &#39;&#123; print $2 &#125;&#39;|xargs</code><br>输出：pid1 pid2          # xargs 等价于 xargs，xargs会把空白和换行替换成空格</p>\n<p>用法2<br><code>ps aux|grep code|awk &#39;&#123; print $2 &#125;&#39;|xargs -I &#123;&#125; kill &#123;&#125;</code><br>xargs -I 指定替换字符串为{}，{}代表着管道传递的参数，后面再使用{}会替换成相应参数值。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"xargs作用\"><a href=\"#xargs作用\" class=\"headerlink\" title=\"xargs作用\"></a>xargs作用</h3><p>接收管道符传递过来的数据，并将数据作为下一个命令的参数</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p>用法1<br><code>ps aux|grep code|awk &#39;&#123; print $2 &#125;&#39;|xargs</code><br>输出：pid1 pid2          # xargs 等价于 xargs，xargs会把空白和换行替换成空格</p>\n<p>用法2<br><code>ps aux|grep code|awk &#39;&#123; print $2 &#125;&#39;|xargs -I &#123;&#125; kill &#123;&#125;</code><br>xargs -I 指定替换字符串为{}，{}代表着管道传递的参数，后面再使用{}会替换成相应参数值。</p>\n"},{"title":"第43期：rabbitmq","date":"2023-05-26T12:58:39.000Z","_content":"### 原理\n```\nProducer(生产者) -> Exchange（交换机）-> Queue（队列）-> Consumer（消费者）\n\n- 交换机，接收生产者发送的消息，并根据路由键发送给指定队列\n- 队列，存储从交换机发来的消息\n```\n参考：https://www.macrozheng.com/mall/reference/rabbitmq_start.html#windows%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85","source":"_posts/第43期：rabbitmq.md","raw":"---\ntitle: 第43期：rabbitmq\ndate: 2023-05-26 20:58:39\ntags:\n---\n### 原理\n```\nProducer(生产者) -> Exchange（交换机）-> Queue（队列）-> Consumer（消费者）\n\n- 交换机，接收生产者发送的消息，并根据路由键发送给指定队列\n- 队列，存储从交换机发来的消息\n```\n参考：https://www.macrozheng.com/mall/reference/rabbitmq_start.html#windows%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85","slug":"第43期：rabbitmq","published":1,"updated":"2024-03-06T06:55:18.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt77000x9klnfuiv8veb","content":"<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Producer(生产者) -&gt; Exchange（交换机）-&gt; Queue（队列）-&gt; Consumer（消费者）</span><br><span class=\"line\"></span><br><span class=\"line\">- 交换机，接收生产者发送的消息，并根据路由键发送给指定队列</span><br><span class=\"line\">- 队列，存储从交换机发来的消息</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://www.macrozheng.com/mall/reference/rabbitmq_start.html#windows%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85\">https://www.macrozheng.com/mall/reference/rabbitmq_start.html#windows%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Producer(生产者) -&gt; Exchange（交换机）-&gt; Queue（队列）-&gt; Consumer（消费者）</span><br><span class=\"line\"></span><br><span class=\"line\">- 交换机，接收生产者发送的消息，并根据路由键发送给指定队列</span><br><span class=\"line\">- 队列，存储从交换机发来的消息</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://www.macrozheng.com/mall/reference/rabbitmq_start.html#windows%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85\">https://www.macrozheng.com/mall/reference/rabbitmq_start.html#windows%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85</a></p>\n"},{"title":"第一期：使用hexo搭建个人博客页面","date":"2023-05-18T02:52:04.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n```\n$ npm install hexo-cli -g\n$ hexo init blog\n$ cd blog\n```\n### 创建页面\n\n``` bash\n$ hexo new \"第一期：使用hexo搭建个人博客页面\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### 运行监听服务\n\n修改页面不需要重启服务，但如果是修改站点配置_config.yaml就需要重启\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### 生成public目录用于部署\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n参考来源\n- [hexojs](https://github.com/hexojs/hexo)\n\n","source":"_posts/第一期：使用hexo搭建个人博客页面.md","raw":"---\ntitle: 第一期：使用hexo搭建个人博客页面\ndate: 2023-05-18 10:52:04\ntags:\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n```\n$ npm install hexo-cli -g\n$ hexo init blog\n$ cd blog\n```\n### 创建页面\n\n``` bash\n$ hexo new \"第一期：使用hexo搭建个人博客页面\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### 运行监听服务\n\n修改页面不需要重启服务，但如果是修改站点配置_config.yaml就需要重启\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### 生成public目录用于部署\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n参考来源\n- [hexojs](https://github.com/hexojs/hexo)\n\n","slug":"第一期：使用hexo搭建个人博客页面","published":1,"updated":"2024-03-06T06:55:18.384Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt77000y9kln3g6s9st2","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br><span class=\"line\">$ hexo init blog</span><br><span class=\"line\">$ cd blog</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建页面\"><a href=\"#创建页面\" class=\"headerlink\" title=\"创建页面\"></a>创建页面</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;第一期：使用hexo搭建个人博客页面&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"运行监听服务\"><a href=\"#运行监听服务\" class=\"headerlink\" title=\"运行监听服务\"></a>运行监听服务</h3><p>修改页面不需要重启服务，但如果是修改站点配置_config.yaml就需要重启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"生成public目录用于部署\"><a href=\"#生成public目录用于部署\" class=\"headerlink\" title=\"生成public目录用于部署\"></a>生成public目录用于部署</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<p>参考来源</p>\n<ul>\n<li><a href=\"https://github.com/hexojs/hexo\">hexojs</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br><span class=\"line\">$ hexo init blog</span><br><span class=\"line\">$ cd blog</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建页面\"><a href=\"#创建页面\" class=\"headerlink\" title=\"创建页面\"></a>创建页面</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;第一期：使用hexo搭建个人博客页面&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"运行监听服务\"><a href=\"#运行监听服务\" class=\"headerlink\" title=\"运行监听服务\"></a>运行监听服务</h3><p>修改页面不需要重启服务，但如果是修改站点配置_config.yaml就需要重启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"生成public目录用于部署\"><a href=\"#生成public目录用于部署\" class=\"headerlink\" title=\"生成public目录用于部署\"></a>生成public目录用于部署</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<p>参考来源</p>\n<ul>\n<li><a href=\"https://github.com/hexojs/hexo\">hexojs</a></li>\n</ul>\n"},{"title":"第三期：Python学习","date":"2023-05-18T06:00:32.000Z","_content":"\n## Python编译器\n\n- linux自带python2.7\n- Windows 可以在Python官网 https://www.python.org/ 下载.exe\n\n## 运行python\n```\npython --version 或 python3 --version\n\npython3 # 进入交互环境，打印python版本\n>>> import sys\n>>> print(sys.version) \n```\n\n## 编辑工具\n\n[Visual Studio Code](https://code.visualstudio.com/)\n\n[PyCharm](https://www.jetbrains.com/pycharm/download/)\n\n## 编写文件及运行\n编辑hello.py\n```\nprint('hello python')\n```\npython hello.py # 执行\n\n## 注释\n```\n\"\"\"\nhello boy\n\nVersion: 0.1\nAuthor: Ricky Chen\n\"\"\"\n\n# hello world\n\nprint('hello')\n```\n\n## 变量\n```\na = 10\nb = 10.23\n\nprint(a + b) # 20.23\n\nc = 3\nprint(a / c) # 除法，3.3333333333333335\nprint(a % c) # 取余，1\n\nd = 'hello, world'\ne = True\n\nprint(type(a)) # 打印变量类型\n```\n\n## 变量类型转换和input使用\n```\n\"\"\"\n输入a，b，转换成正数\n%d表示整数占位符，进行a+b\n\nAuthor: Ricky\n\"\"\"\na = int(input('a = '))\nb = int(input('b = '))\n\nprint('%d + %d = %d' % (a, b, a + b)) # 10 + 3 = 13\nprint('%d / %d = %d' % (a, b, a / b)) # 10 / 3 = 3，本来输出浮点数的，但是被%d转化了\nprint('%d // %d = %d' % (a, b, a // b)) # 10 // 3 = 3\n```\n\n## 赋值运算符\n```\n\"\"\"\n复合赋值运算符\n\"\"\"\na = 5\nb = 2\na += b # 等价 a = a + b\nprint(a) # 7\na *= b # 等价 a = a * b\nprint(a) # 14\n```\nup https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/02.%E8%AF%AD%E8%A8%80%E5%85%83%E7%B4%A0.md","source":"_posts/第三期：Python学习.md","raw":"---\ntitle: 第三期：Python学习\ndate: 2023-05-18 14:00:32\ntags:\n---\n\n## Python编译器\n\n- linux自带python2.7\n- Windows 可以在Python官网 https://www.python.org/ 下载.exe\n\n## 运行python\n```\npython --version 或 python3 --version\n\npython3 # 进入交互环境，打印python版本\n>>> import sys\n>>> print(sys.version) \n```\n\n## 编辑工具\n\n[Visual Studio Code](https://code.visualstudio.com/)\n\n[PyCharm](https://www.jetbrains.com/pycharm/download/)\n\n## 编写文件及运行\n编辑hello.py\n```\nprint('hello python')\n```\npython hello.py # 执行\n\n## 注释\n```\n\"\"\"\nhello boy\n\nVersion: 0.1\nAuthor: Ricky Chen\n\"\"\"\n\n# hello world\n\nprint('hello')\n```\n\n## 变量\n```\na = 10\nb = 10.23\n\nprint(a + b) # 20.23\n\nc = 3\nprint(a / c) # 除法，3.3333333333333335\nprint(a % c) # 取余，1\n\nd = 'hello, world'\ne = True\n\nprint(type(a)) # 打印变量类型\n```\n\n## 变量类型转换和input使用\n```\n\"\"\"\n输入a，b，转换成正数\n%d表示整数占位符，进行a+b\n\nAuthor: Ricky\n\"\"\"\na = int(input('a = '))\nb = int(input('b = '))\n\nprint('%d + %d = %d' % (a, b, a + b)) # 10 + 3 = 13\nprint('%d / %d = %d' % (a, b, a / b)) # 10 / 3 = 3，本来输出浮点数的，但是被%d转化了\nprint('%d // %d = %d' % (a, b, a // b)) # 10 // 3 = 3\n```\n\n## 赋值运算符\n```\n\"\"\"\n复合赋值运算符\n\"\"\"\na = 5\nb = 2\na += b # 等价 a = a + b\nprint(a) # 7\na *= b # 等价 a = a * b\nprint(a) # 14\n```\nup https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/02.%E8%AF%AD%E8%A8%80%E5%85%83%E7%B4%A0.md","slug":"第三期：Python学习","published":1,"updated":"2024-03-06T06:55:18.387Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt78000z9klnhwt1f8rm","content":"<h2 id=\"Python编译器\"><a href=\"#Python编译器\" class=\"headerlink\" title=\"Python编译器\"></a>Python编译器</h2><ul>\n<li>linux自带python2.7</li>\n<li>Windows 可以在Python官网 <a href=\"https://www.python.org/\">https://www.python.org/</a> 下载.exe</li>\n</ul>\n<h2 id=\"运行python\"><a href=\"#运行python\" class=\"headerlink\" title=\"运行python\"></a>运行python</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python --version 或 python3 --version</span><br><span class=\"line\"></span><br><span class=\"line\">python3 # 进入交互环境，打印python版本</span><br><span class=\"line\">&gt;&gt;&gt; import sys</span><br><span class=\"line\">&gt;&gt;&gt; print(sys.version) </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编辑工具\"><a href=\"#编辑工具\" class=\"headerlink\" title=\"编辑工具\"></a>编辑工具</h2><p><a href=\"https://code.visualstudio.com/\">Visual Studio Code</a></p>\n<p><a href=\"https://www.jetbrains.com/pycharm/download/\">PyCharm</a></p>\n<h2 id=\"编写文件及运行\"><a href=\"#编写文件及运行\" class=\"headerlink\" title=\"编写文件及运行\"></a>编写文件及运行</h2><p>编辑hello.py</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(&#x27;hello python&#x27;)</span><br></pre></td></tr></table></figure>\n<p>python hello.py # 执行</p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">hello boy</span><br><span class=\"line\"></span><br><span class=\"line\">Version: 0.1</span><br><span class=\"line\">Author: Ricky Chen</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># hello world</span><br><span class=\"line\"></span><br><span class=\"line\">print(&#x27;hello&#x27;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = 10</span><br><span class=\"line\">b = 10.23</span><br><span class=\"line\"></span><br><span class=\"line\">print(a + b) # 20.23</span><br><span class=\"line\"></span><br><span class=\"line\">c = 3</span><br><span class=\"line\">print(a / c) # 除法，3.3333333333333335</span><br><span class=\"line\">print(a % c) # 取余，1</span><br><span class=\"line\"></span><br><span class=\"line\">d = &#x27;hello, world&#x27;</span><br><span class=\"line\">e = True</span><br><span class=\"line\"></span><br><span class=\"line\">print(type(a)) # 打印变量类型</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变量类型转换和input使用\"><a href=\"#变量类型转换和input使用\" class=\"headerlink\" title=\"变量类型转换和input使用\"></a>变量类型转换和input使用</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">输入a，b，转换成正数</span><br><span class=\"line\">%d表示整数占位符，进行a+b</span><br><span class=\"line\"></span><br><span class=\"line\">Author: Ricky</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">a = int(input(&#x27;a = &#x27;))</span><br><span class=\"line\">b = int(input(&#x27;b = &#x27;))</span><br><span class=\"line\"></span><br><span class=\"line\">print(&#x27;%d + %d = %d&#x27; % (a, b, a + b)) # 10 + 3 = 13</span><br><span class=\"line\">print(&#x27;%d / %d = %d&#x27; % (a, b, a / b)) # 10 / 3 = 3，本来输出浮点数的，但是被%d转化了</span><br><span class=\"line\">print(&#x27;%d // %d = %d&#x27; % (a, b, a // b)) # 10 // 3 = 3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">复合赋值运算符</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">a = 5</span><br><span class=\"line\">b = 2</span><br><span class=\"line\">a += b # 等价 a = a + b</span><br><span class=\"line\">print(a) # 7</span><br><span class=\"line\">a *= b # 等价 a = a * b</span><br><span class=\"line\">print(a) # 14</span><br></pre></td></tr></table></figure>\n<p>up <a href=\"https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/02.%E8%AF%AD%E8%A8%80%E5%85%83%E7%B4%A0.md\">https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/02.%E8%AF%AD%E8%A8%80%E5%85%83%E7%B4%A0.md</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Python编译器\"><a href=\"#Python编译器\" class=\"headerlink\" title=\"Python编译器\"></a>Python编译器</h2><ul>\n<li>linux自带python2.7</li>\n<li>Windows 可以在Python官网 <a href=\"https://www.python.org/\">https://www.python.org/</a> 下载.exe</li>\n</ul>\n<h2 id=\"运行python\"><a href=\"#运行python\" class=\"headerlink\" title=\"运行python\"></a>运行python</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python --version 或 python3 --version</span><br><span class=\"line\"></span><br><span class=\"line\">python3 # 进入交互环境，打印python版本</span><br><span class=\"line\">&gt;&gt;&gt; import sys</span><br><span class=\"line\">&gt;&gt;&gt; print(sys.version) </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编辑工具\"><a href=\"#编辑工具\" class=\"headerlink\" title=\"编辑工具\"></a>编辑工具</h2><p><a href=\"https://code.visualstudio.com/\">Visual Studio Code</a></p>\n<p><a href=\"https://www.jetbrains.com/pycharm/download/\">PyCharm</a></p>\n<h2 id=\"编写文件及运行\"><a href=\"#编写文件及运行\" class=\"headerlink\" title=\"编写文件及运行\"></a>编写文件及运行</h2><p>编辑hello.py</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(&#x27;hello python&#x27;)</span><br></pre></td></tr></table></figure>\n<p>python hello.py # 执行</p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">hello boy</span><br><span class=\"line\"></span><br><span class=\"line\">Version: 0.1</span><br><span class=\"line\">Author: Ricky Chen</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># hello world</span><br><span class=\"line\"></span><br><span class=\"line\">print(&#x27;hello&#x27;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = 10</span><br><span class=\"line\">b = 10.23</span><br><span class=\"line\"></span><br><span class=\"line\">print(a + b) # 20.23</span><br><span class=\"line\"></span><br><span class=\"line\">c = 3</span><br><span class=\"line\">print(a / c) # 除法，3.3333333333333335</span><br><span class=\"line\">print(a % c) # 取余，1</span><br><span class=\"line\"></span><br><span class=\"line\">d = &#x27;hello, world&#x27;</span><br><span class=\"line\">e = True</span><br><span class=\"line\"></span><br><span class=\"line\">print(type(a)) # 打印变量类型</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变量类型转换和input使用\"><a href=\"#变量类型转换和input使用\" class=\"headerlink\" title=\"变量类型转换和input使用\"></a>变量类型转换和input使用</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">输入a，b，转换成正数</span><br><span class=\"line\">%d表示整数占位符，进行a+b</span><br><span class=\"line\"></span><br><span class=\"line\">Author: Ricky</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">a = int(input(&#x27;a = &#x27;))</span><br><span class=\"line\">b = int(input(&#x27;b = &#x27;))</span><br><span class=\"line\"></span><br><span class=\"line\">print(&#x27;%d + %d = %d&#x27; % (a, b, a + b)) # 10 + 3 = 13</span><br><span class=\"line\">print(&#x27;%d / %d = %d&#x27; % (a, b, a / b)) # 10 / 3 = 3，本来输出浮点数的，但是被%d转化了</span><br><span class=\"line\">print(&#x27;%d // %d = %d&#x27; % (a, b, a // b)) # 10 // 3 = 3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">复合赋值运算符</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">a = 5</span><br><span class=\"line\">b = 2</span><br><span class=\"line\">a += b # 等价 a = a + b</span><br><span class=\"line\">print(a) # 7</span><br><span class=\"line\">a *= b # 等价 a = a * b</span><br><span class=\"line\">print(a) # 14</span><br></pre></td></tr></table></figure>\n<p>up <a href=\"https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/02.%E8%AF%AD%E8%A8%80%E5%85%83%E7%B4%A0.md\">https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/02.%E8%AF%AD%E8%A8%80%E5%85%83%E7%B4%A0.md</a></p>\n"},{"title":"第七期：dns","date":"2023-05-19T17:09:12.000Z","_content":"##### DNS分层结构\n- 根DNS服务器：ROOT nameserver。本地域名服务器查不到结果时，则会向它查询顶级域名服务器ip。\n顶级域名服务器：Tld nameserver。负责管理在该域名服务器注册的二级域名，例如.com是顶级域名服务器，向它查询时，可以返回example.com所在的权威域名服务器的ip地址。\n- 权威域名服务器：authoritative nameserver。在特定区域内有唯一性，负责维护域名和ip的对应关系。如云解析DNS。\n- 本地域名服务器：Local DNS。本地域名服务器是响应来自客户端的递归请求，并最终跟踪直到获取到解析结果的DNS服务器。例如用户本机自动分配的DNS、运营商ISP分配的DNS、谷歌8.8.8.8/114公共DNS等。\n\n##### 域名解析过程\n```\nDNS查询的结果通常会在本地域名服务器中进行缓存，如果本地域名服务器中有缓存的情况下，则会跳过如下DNS查询步骤，很快返回解析结果。下面的示例则概述了本地域名服务器没有缓存的情况下，DNS查询所需的8个步骤：\n\n1、用户在Web浏览器中输入“example.com”， 则由 本地域名服务器 开始进行递归查询。\n\n2、本地域名服务器采用迭代查询的方法，向根域名服务器进行查询。\n\n3、根域名服务器告诉本地域名服务器，下一步应该查询的顶级域名服务器.com TLD的IP地址。\n\n4、本地域名服务器向顶级域名服务器.com TLD进行查询。\n\n5、.com TLD服务器告诉本地域名服务器，下一步查询example.com权威域名服务器的IP地址。\n\n6、本地域名服务器向example.com权威域名服务器发送查询。\n\n7、example.com权威域名服务器告诉本地域名服务器所查询的主机IP地址。\n\n8、本地域名服务器最后把查询的IP地址响应给web浏览器。\n\n一旦DNS查询的8个步骤返回了example.com的IP地址，浏览器就能够发出对网页的请求。\n\n9、浏览器向IP地址发出HTTP请求\n\n10、该IP处的web服务器返回要在浏览器中呈现的网页\n```\n### 工具 dig 常用命令\n```\ndig +short time.geekbang.org # 直接输出域名对应A记录\ndig +trace @114.114.114.114 +nodnssec time.geekbang.org # +trace表示开启跟踪查询# +nodnssec表示禁止DNS安全扩展；@114.114.114.114指定使用的dns服务器\n```\n\n### 示例\n```\n$ dig +trace @114.114.114.114 +nodnssec time.geekbang.org\n\n; <<>> DiG 9.10.6 <<>> +trace @114.114.114.114 +nodnssec time.geekbang.org\n; (1 server found)\n;; global options: +cmd\n.                       1791    IN      NS      b.root-servers.net.\n.                       1791    IN      NS      h.root-servers.net.\n.                       1791    IN      NS      m.root-servers.net.\n.                       1791    IN      NS      d.root-servers.net.\n.                       1791    IN      NS      a.root-servers.net.\n.                       1791    IN      NS      e.root-servers.net.\n.                       1791    IN      NS      k.root-servers.net.\n.                       1791    IN      NS      f.root-servers.net.\n.                       1791    IN      NS      i.root-servers.net.\n.                       1791    IN      NS      l.root-servers.net.\n.                       1791    IN      NS      g.root-servers.net.\n.                       1791    IN      NS      j.root-servers.net.\n.                       1791    IN      NS      c.root-servers.net.\n;; Received 251 bytes from 114.114.114.114#53(114.114.114.114) in 30 ms\n\norg.                    172800  IN      NS      a0.org.afilias-nst.info.\norg.                    172800  IN      NS      a2.org.afilias-nst.info.\norg.                    172800  IN      NS      b0.org.afilias-nst.org.\norg.                    172800  IN      NS      b2.org.afilias-nst.org.\norg.                    172800  IN      NS      c0.org.afilias-nst.info.\norg.                    172800  IN      NS      d0.org.afilias-nst.org.\n;; Received 448 bytes from 192.5.5.241#53(f.root-servers.net) in 154 ms\n\ngeekbang.org.           3600    IN      NS      dns9.hichina.com.\ngeekbang.org.           3600    IN      NS      dns10.hichina.com.\n;; Received 96 bytes from 199.19.53.1#53(c0.org.afilias-nst.info) in 188 ms\n\ntime.geekbang.org.      600     IN      A       39.106.233.176\n;; Received 62 bytes from 120.76.107.52#53(dns9.hichina.com) in 9 ms\n```","source":"_posts/第七期：dns.md","raw":"---\ntitle: 第七期：dns\ndate: 2023-05-20 01:09:12\ntags:\n---\n##### DNS分层结构\n- 根DNS服务器：ROOT nameserver。本地域名服务器查不到结果时，则会向它查询顶级域名服务器ip。\n顶级域名服务器：Tld nameserver。负责管理在该域名服务器注册的二级域名，例如.com是顶级域名服务器，向它查询时，可以返回example.com所在的权威域名服务器的ip地址。\n- 权威域名服务器：authoritative nameserver。在特定区域内有唯一性，负责维护域名和ip的对应关系。如云解析DNS。\n- 本地域名服务器：Local DNS。本地域名服务器是响应来自客户端的递归请求，并最终跟踪直到获取到解析结果的DNS服务器。例如用户本机自动分配的DNS、运营商ISP分配的DNS、谷歌8.8.8.8/114公共DNS等。\n\n##### 域名解析过程\n```\nDNS查询的结果通常会在本地域名服务器中进行缓存，如果本地域名服务器中有缓存的情况下，则会跳过如下DNS查询步骤，很快返回解析结果。下面的示例则概述了本地域名服务器没有缓存的情况下，DNS查询所需的8个步骤：\n\n1、用户在Web浏览器中输入“example.com”， 则由 本地域名服务器 开始进行递归查询。\n\n2、本地域名服务器采用迭代查询的方法，向根域名服务器进行查询。\n\n3、根域名服务器告诉本地域名服务器，下一步应该查询的顶级域名服务器.com TLD的IP地址。\n\n4、本地域名服务器向顶级域名服务器.com TLD进行查询。\n\n5、.com TLD服务器告诉本地域名服务器，下一步查询example.com权威域名服务器的IP地址。\n\n6、本地域名服务器向example.com权威域名服务器发送查询。\n\n7、example.com权威域名服务器告诉本地域名服务器所查询的主机IP地址。\n\n8、本地域名服务器最后把查询的IP地址响应给web浏览器。\n\n一旦DNS查询的8个步骤返回了example.com的IP地址，浏览器就能够发出对网页的请求。\n\n9、浏览器向IP地址发出HTTP请求\n\n10、该IP处的web服务器返回要在浏览器中呈现的网页\n```\n### 工具 dig 常用命令\n```\ndig +short time.geekbang.org # 直接输出域名对应A记录\ndig +trace @114.114.114.114 +nodnssec time.geekbang.org # +trace表示开启跟踪查询# +nodnssec表示禁止DNS安全扩展；@114.114.114.114指定使用的dns服务器\n```\n\n### 示例\n```\n$ dig +trace @114.114.114.114 +nodnssec time.geekbang.org\n\n; <<>> DiG 9.10.6 <<>> +trace @114.114.114.114 +nodnssec time.geekbang.org\n; (1 server found)\n;; global options: +cmd\n.                       1791    IN      NS      b.root-servers.net.\n.                       1791    IN      NS      h.root-servers.net.\n.                       1791    IN      NS      m.root-servers.net.\n.                       1791    IN      NS      d.root-servers.net.\n.                       1791    IN      NS      a.root-servers.net.\n.                       1791    IN      NS      e.root-servers.net.\n.                       1791    IN      NS      k.root-servers.net.\n.                       1791    IN      NS      f.root-servers.net.\n.                       1791    IN      NS      i.root-servers.net.\n.                       1791    IN      NS      l.root-servers.net.\n.                       1791    IN      NS      g.root-servers.net.\n.                       1791    IN      NS      j.root-servers.net.\n.                       1791    IN      NS      c.root-servers.net.\n;; Received 251 bytes from 114.114.114.114#53(114.114.114.114) in 30 ms\n\norg.                    172800  IN      NS      a0.org.afilias-nst.info.\norg.                    172800  IN      NS      a2.org.afilias-nst.info.\norg.                    172800  IN      NS      b0.org.afilias-nst.org.\norg.                    172800  IN      NS      b2.org.afilias-nst.org.\norg.                    172800  IN      NS      c0.org.afilias-nst.info.\norg.                    172800  IN      NS      d0.org.afilias-nst.org.\n;; Received 448 bytes from 192.5.5.241#53(f.root-servers.net) in 154 ms\n\ngeekbang.org.           3600    IN      NS      dns9.hichina.com.\ngeekbang.org.           3600    IN      NS      dns10.hichina.com.\n;; Received 96 bytes from 199.19.53.1#53(c0.org.afilias-nst.info) in 188 ms\n\ntime.geekbang.org.      600     IN      A       39.106.233.176\n;; Received 62 bytes from 120.76.107.52#53(dns9.hichina.com) in 9 ms\n```","slug":"第七期：dns","published":1,"updated":"2024-03-06T06:55:18.385Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt7900109kln5vyf47uo","content":"<h5 id=\"DNS分层结构\"><a href=\"#DNS分层结构\" class=\"headerlink\" title=\"DNS分层结构\"></a>DNS分层结构</h5><ul>\n<li>根DNS服务器：ROOT nameserver。本地域名服务器查不到结果时，则会向它查询顶级域名服务器ip。<br>顶级域名服务器：Tld nameserver。负责管理在该域名服务器注册的二级域名，例如.com是顶级域名服务器，向它查询时，可以返回example.com所在的权威域名服务器的ip地址。</li>\n<li>权威域名服务器：authoritative nameserver。在特定区域内有唯一性，负责维护域名和ip的对应关系。如云解析DNS。</li>\n<li>本地域名服务器：Local DNS。本地域名服务器是响应来自客户端的递归请求，并最终跟踪直到获取到解析结果的DNS服务器。例如用户本机自动分配的DNS、运营商ISP分配的DNS、谷歌8.8.8.8&#x2F;114公共DNS等。</li>\n</ul>\n<h5 id=\"域名解析过程\"><a href=\"#域名解析过程\" class=\"headerlink\" title=\"域名解析过程\"></a>域名解析过程</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DNS查询的结果通常会在本地域名服务器中进行缓存，如果本地域名服务器中有缓存的情况下，则会跳过如下DNS查询步骤，很快返回解析结果。下面的示例则概述了本地域名服务器没有缓存的情况下，DNS查询所需的8个步骤：</span><br><span class=\"line\"></span><br><span class=\"line\">1、用户在Web浏览器中输入“example.com”， 则由 本地域名服务器 开始进行递归查询。</span><br><span class=\"line\"></span><br><span class=\"line\">2、本地域名服务器采用迭代查询的方法，向根域名服务器进行查询。</span><br><span class=\"line\"></span><br><span class=\"line\">3、根域名服务器告诉本地域名服务器，下一步应该查询的顶级域名服务器.com TLD的IP地址。</span><br><span class=\"line\"></span><br><span class=\"line\">4、本地域名服务器向顶级域名服务器.com TLD进行查询。</span><br><span class=\"line\"></span><br><span class=\"line\">5、.com TLD服务器告诉本地域名服务器，下一步查询example.com权威域名服务器的IP地址。</span><br><span class=\"line\"></span><br><span class=\"line\">6、本地域名服务器向example.com权威域名服务器发送查询。</span><br><span class=\"line\"></span><br><span class=\"line\">7、example.com权威域名服务器告诉本地域名服务器所查询的主机IP地址。</span><br><span class=\"line\"></span><br><span class=\"line\">8、本地域名服务器最后把查询的IP地址响应给web浏览器。</span><br><span class=\"line\"></span><br><span class=\"line\">一旦DNS查询的8个步骤返回了example.com的IP地址，浏览器就能够发出对网页的请求。</span><br><span class=\"line\"></span><br><span class=\"line\">9、浏览器向IP地址发出HTTP请求</span><br><span class=\"line\"></span><br><span class=\"line\">10、该IP处的web服务器返回要在浏览器中呈现的网页</span><br></pre></td></tr></table></figure>\n<h3 id=\"工具-dig-常用命令\"><a href=\"#工具-dig-常用命令\" class=\"headerlink\" title=\"工具 dig 常用命令\"></a>工具 dig 常用命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dig +short time.geekbang.org # 直接输出域名对应A记录</span><br><span class=\"line\">dig +trace @114.114.114.114 +nodnssec time.geekbang.org # +trace表示开启跟踪查询# +nodnssec表示禁止DNS安全扩展；@114.114.114.114指定使用的dns服务器</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ dig +trace @114.114.114.114 +nodnssec time.geekbang.org</span><br><span class=\"line\"></span><br><span class=\"line\">; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; +trace @114.114.114.114 +nodnssec time.geekbang.org</span><br><span class=\"line\">; (1 server found)</span><br><span class=\"line\">;; global options: +cmd</span><br><span class=\"line\">.                       1791    IN      NS      b.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      h.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      m.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      d.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      a.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      e.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      k.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      f.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      i.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      l.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      g.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      j.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      c.root-servers.net.</span><br><span class=\"line\">;; Received 251 bytes from 114.114.114.114#53(114.114.114.114) in 30 ms</span><br><span class=\"line\"></span><br><span class=\"line\">org.                    172800  IN      NS      a0.org.afilias-nst.info.</span><br><span class=\"line\">org.                    172800  IN      NS      a2.org.afilias-nst.info.</span><br><span class=\"line\">org.                    172800  IN      NS      b0.org.afilias-nst.org.</span><br><span class=\"line\">org.                    172800  IN      NS      b2.org.afilias-nst.org.</span><br><span class=\"line\">org.                    172800  IN      NS      c0.org.afilias-nst.info.</span><br><span class=\"line\">org.                    172800  IN      NS      d0.org.afilias-nst.org.</span><br><span class=\"line\">;; Received 448 bytes from 192.5.5.241#53(f.root-servers.net) in 154 ms</span><br><span class=\"line\"></span><br><span class=\"line\">geekbang.org.           3600    IN      NS      dns9.hichina.com.</span><br><span class=\"line\">geekbang.org.           3600    IN      NS      dns10.hichina.com.</span><br><span class=\"line\">;; Received 96 bytes from 199.19.53.1#53(c0.org.afilias-nst.info) in 188 ms</span><br><span class=\"line\"></span><br><span class=\"line\">time.geekbang.org.      600     IN      A       39.106.233.176</span><br><span class=\"line\">;; Received 62 bytes from 120.76.107.52#53(dns9.hichina.com) in 9 ms</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h5 id=\"DNS分层结构\"><a href=\"#DNS分层结构\" class=\"headerlink\" title=\"DNS分层结构\"></a>DNS分层结构</h5><ul>\n<li>根DNS服务器：ROOT nameserver。本地域名服务器查不到结果时，则会向它查询顶级域名服务器ip。<br>顶级域名服务器：Tld nameserver。负责管理在该域名服务器注册的二级域名，例如.com是顶级域名服务器，向它查询时，可以返回example.com所在的权威域名服务器的ip地址。</li>\n<li>权威域名服务器：authoritative nameserver。在特定区域内有唯一性，负责维护域名和ip的对应关系。如云解析DNS。</li>\n<li>本地域名服务器：Local DNS。本地域名服务器是响应来自客户端的递归请求，并最终跟踪直到获取到解析结果的DNS服务器。例如用户本机自动分配的DNS、运营商ISP分配的DNS、谷歌8.8.8.8&#x2F;114公共DNS等。</li>\n</ul>\n<h5 id=\"域名解析过程\"><a href=\"#域名解析过程\" class=\"headerlink\" title=\"域名解析过程\"></a>域名解析过程</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DNS查询的结果通常会在本地域名服务器中进行缓存，如果本地域名服务器中有缓存的情况下，则会跳过如下DNS查询步骤，很快返回解析结果。下面的示例则概述了本地域名服务器没有缓存的情况下，DNS查询所需的8个步骤：</span><br><span class=\"line\"></span><br><span class=\"line\">1、用户在Web浏览器中输入“example.com”， 则由 本地域名服务器 开始进行递归查询。</span><br><span class=\"line\"></span><br><span class=\"line\">2、本地域名服务器采用迭代查询的方法，向根域名服务器进行查询。</span><br><span class=\"line\"></span><br><span class=\"line\">3、根域名服务器告诉本地域名服务器，下一步应该查询的顶级域名服务器.com TLD的IP地址。</span><br><span class=\"line\"></span><br><span class=\"line\">4、本地域名服务器向顶级域名服务器.com TLD进行查询。</span><br><span class=\"line\"></span><br><span class=\"line\">5、.com TLD服务器告诉本地域名服务器，下一步查询example.com权威域名服务器的IP地址。</span><br><span class=\"line\"></span><br><span class=\"line\">6、本地域名服务器向example.com权威域名服务器发送查询。</span><br><span class=\"line\"></span><br><span class=\"line\">7、example.com权威域名服务器告诉本地域名服务器所查询的主机IP地址。</span><br><span class=\"line\"></span><br><span class=\"line\">8、本地域名服务器最后把查询的IP地址响应给web浏览器。</span><br><span class=\"line\"></span><br><span class=\"line\">一旦DNS查询的8个步骤返回了example.com的IP地址，浏览器就能够发出对网页的请求。</span><br><span class=\"line\"></span><br><span class=\"line\">9、浏览器向IP地址发出HTTP请求</span><br><span class=\"line\"></span><br><span class=\"line\">10、该IP处的web服务器返回要在浏览器中呈现的网页</span><br></pre></td></tr></table></figure>\n<h3 id=\"工具-dig-常用命令\"><a href=\"#工具-dig-常用命令\" class=\"headerlink\" title=\"工具 dig 常用命令\"></a>工具 dig 常用命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dig +short time.geekbang.org # 直接输出域名对应A记录</span><br><span class=\"line\">dig +trace @114.114.114.114 +nodnssec time.geekbang.org # +trace表示开启跟踪查询# +nodnssec表示禁止DNS安全扩展；@114.114.114.114指定使用的dns服务器</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ dig +trace @114.114.114.114 +nodnssec time.geekbang.org</span><br><span class=\"line\"></span><br><span class=\"line\">; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; +trace @114.114.114.114 +nodnssec time.geekbang.org</span><br><span class=\"line\">; (1 server found)</span><br><span class=\"line\">;; global options: +cmd</span><br><span class=\"line\">.                       1791    IN      NS      b.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      h.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      m.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      d.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      a.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      e.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      k.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      f.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      i.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      l.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      g.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      j.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      c.root-servers.net.</span><br><span class=\"line\">;; Received 251 bytes from 114.114.114.114#53(114.114.114.114) in 30 ms</span><br><span class=\"line\"></span><br><span class=\"line\">org.                    172800  IN      NS      a0.org.afilias-nst.info.</span><br><span class=\"line\">org.                    172800  IN      NS      a2.org.afilias-nst.info.</span><br><span class=\"line\">org.                    172800  IN      NS      b0.org.afilias-nst.org.</span><br><span class=\"line\">org.                    172800  IN      NS      b2.org.afilias-nst.org.</span><br><span class=\"line\">org.                    172800  IN      NS      c0.org.afilias-nst.info.</span><br><span class=\"line\">org.                    172800  IN      NS      d0.org.afilias-nst.org.</span><br><span class=\"line\">;; Received 448 bytes from 192.5.5.241#53(f.root-servers.net) in 154 ms</span><br><span class=\"line\"></span><br><span class=\"line\">geekbang.org.           3600    IN      NS      dns9.hichina.com.</span><br><span class=\"line\">geekbang.org.           3600    IN      NS      dns10.hichina.com.</span><br><span class=\"line\">;; Received 96 bytes from 199.19.53.1#53(c0.org.afilias-nst.info) in 188 ms</span><br><span class=\"line\"></span><br><span class=\"line\">time.geekbang.org.      600     IN      A       39.106.233.176</span><br><span class=\"line\">;; Received 62 bytes from 120.76.107.52#53(dns9.hichina.com) in 9 ms</span><br></pre></td></tr></table></figure>"},{"title":"第九期：K8s","date":"2023-05-20T06:43:05.000Z","_content":"### 资源对象\n- 无状态 Deployment\n```\n动态伸缩pod，实现高可用；\n健康检查；\n优雅停止\n```\n\n- 有状态 StatefulSet\n```\npod名称、ip固定\n```\n\n- 守护进程集 DaemonSet\n```\n```\n\n- 服务 Service\n```\n```\n\n- 路由 Ingress\n```\n```\n\n- 配置项 ConfigMap\n```\n```\n\n- 保密字典 Secert\n```\n```\n\n- 存储声明 PersistentVolumeClaim\n```\n```\n\n- 存储卷 PersistentVolume\n```\n```\n\n- 存储类 StorageClass\n```\n```\n### 常用命令\n```\n# 复制pod文件到本地，范例：\nkubectl cp -c supervisord namespace/pod-name-8bf7c9d8-dj2gg:/var/www/html/storage/logs/analysis.log ./analysis-medias.log\n\n# 复制本地文件到pod，范例：\nkubectl cp ./xxbbxg.csv -c php-fpm namespace/pod-name-55967f6dd6-jmrk4:/var/www/html/storage/import/xxbbxg.csv\n\nkubectl exec -ti deployment/cron-release -n=$namespace --container=php-fpm bash # 进入容器\nkubectl rollout restart deployment/$project --namespace=$namespace # 更新deployment\n```\n\n### 组件\n```\nkubelet: 运行在每个node上，负责pod的生命周期\n```","source":"_posts/第九期：K8s.md","raw":"---\ntitle: 第九期：K8s\ndate: 2023-05-20 14:43:05\ntags:\n---\n### 资源对象\n- 无状态 Deployment\n```\n动态伸缩pod，实现高可用；\n健康检查；\n优雅停止\n```\n\n- 有状态 StatefulSet\n```\npod名称、ip固定\n```\n\n- 守护进程集 DaemonSet\n```\n```\n\n- 服务 Service\n```\n```\n\n- 路由 Ingress\n```\n```\n\n- 配置项 ConfigMap\n```\n```\n\n- 保密字典 Secert\n```\n```\n\n- 存储声明 PersistentVolumeClaim\n```\n```\n\n- 存储卷 PersistentVolume\n```\n```\n\n- 存储类 StorageClass\n```\n```\n### 常用命令\n```\n# 复制pod文件到本地，范例：\nkubectl cp -c supervisord namespace/pod-name-8bf7c9d8-dj2gg:/var/www/html/storage/logs/analysis.log ./analysis-medias.log\n\n# 复制本地文件到pod，范例：\nkubectl cp ./xxbbxg.csv -c php-fpm namespace/pod-name-55967f6dd6-jmrk4:/var/www/html/storage/import/xxbbxg.csv\n\nkubectl exec -ti deployment/cron-release -n=$namespace --container=php-fpm bash # 进入容器\nkubectl rollout restart deployment/$project --namespace=$namespace # 更新deployment\n```\n\n### 组件\n```\nkubelet: 运行在每个node上，负责pod的生命周期\n```","slug":"第九期：K8s","published":1,"updated":"2024-03-06T06:55:18.388Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt7a00119kln953paand","content":"<h3 id=\"资源对象\"><a href=\"#资源对象\" class=\"headerlink\" title=\"资源对象\"></a>资源对象</h3><ul>\n<li><p>无状态 Deployment</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">动态伸缩pod，实现高可用；</span><br><span class=\"line\">健康检查；</span><br><span class=\"line\">优雅停止</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>有状态 StatefulSet</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod名称、ip固定</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>守护进程集 DaemonSet</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\">- 服务 Service</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 路由 Ingress</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 配置项 ConfigMap</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 保密字典 Secert</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 存储声明 PersistentVolumeClaim</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 存储卷 PersistentVolume</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 存储类 StorageClass</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 常用命令</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"复制pod文件到本地，范例：\"><a href=\"#复制pod文件到本地，范例：\" class=\"headerlink\" title=\"复制pod文件到本地，范例：\"></a>复制pod文件到本地，范例：</h1><p>kubectl cp -c supervisord namespace&#x2F;pod-name-8bf7c9d8-dj2gg:&#x2F;var&#x2F;www&#x2F;html&#x2F;storage&#x2F;logs&#x2F;analysis.log .&#x2F;analysis-medias.log</p>\n<h1 id=\"复制本地文件到pod，范例：\"><a href=\"#复制本地文件到pod，范例：\" class=\"headerlink\" title=\"复制本地文件到pod，范例：\"></a>复制本地文件到pod，范例：</h1><p>kubectl cp .&#x2F;xxbbxg.csv -c php-fpm namespace&#x2F;pod-name-55967f6dd6-jmrk4:&#x2F;var&#x2F;www&#x2F;html&#x2F;storage&#x2F;import&#x2F;xxbbxg.csv</p>\n<p>kubectl exec -ti deployment&#x2F;cron-release -n&#x3D;$namespace –container&#x3D;php-fpm bash # 进入容器<br>kubectl rollout restart deployment&#x2F;$project –namespace&#x3D;$namespace # 更新deployment</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 组件</span><br></pre></td></tr></table></figure>\n<p>kubelet: 运行在每个node上，负责pod的生命周期<br>&#96;&#96;&#96;</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"资源对象\"><a href=\"#资源对象\" class=\"headerlink\" title=\"资源对象\"></a>资源对象</h3><ul>\n<li><p>无状态 Deployment</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">动态伸缩pod，实现高可用；</span><br><span class=\"line\">健康检查；</span><br><span class=\"line\">优雅停止</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>有状态 StatefulSet</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod名称、ip固定</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>守护进程集 DaemonSet</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\">- 服务 Service</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 路由 Ingress</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 配置项 ConfigMap</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 保密字典 Secert</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 存储声明 PersistentVolumeClaim</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 存储卷 PersistentVolume</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 存储类 StorageClass</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 常用命令</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"复制pod文件到本地，范例：\"><a href=\"#复制pod文件到本地，范例：\" class=\"headerlink\" title=\"复制pod文件到本地，范例：\"></a>复制pod文件到本地，范例：</h1><p>kubectl cp -c supervisord namespace&#x2F;pod-name-8bf7c9d8-dj2gg:&#x2F;var&#x2F;www&#x2F;html&#x2F;storage&#x2F;logs&#x2F;analysis.log .&#x2F;analysis-medias.log</p>\n<h1 id=\"复制本地文件到pod，范例：\"><a href=\"#复制本地文件到pod，范例：\" class=\"headerlink\" title=\"复制本地文件到pod，范例：\"></a>复制本地文件到pod，范例：</h1><p>kubectl cp .&#x2F;xxbbxg.csv -c php-fpm namespace&#x2F;pod-name-55967f6dd6-jmrk4:&#x2F;var&#x2F;www&#x2F;html&#x2F;storage&#x2F;import&#x2F;xxbbxg.csv</p>\n<p>kubectl exec -ti deployment&#x2F;cron-release -n&#x3D;$namespace –container&#x3D;php-fpm bash # 进入容器<br>kubectl rollout restart deployment&#x2F;$project –namespace&#x3D;$namespace # 更新deployment</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 组件</span><br></pre></td></tr></table></figure>\n<p>kubelet: 运行在每个node上，负责pod的生命周期<br>&#96;&#96;&#96;</p>\n"},{"title":"第二期: hexo + github部署个人博客","date":"2023-05-18T04:29:50.000Z","_content":"### github创建项目\n```\n仓库名称: ${username}.github.io # username是github账号名称\n```\n\n### 参考第一期用hexo创建了项目blog，修改站点配置文件_config.yaml\n```\n# Deployment\n## Docs: https://hexo.io/docs/one-command-deployment\ndeploy:\n  type: git\n  repo: https://github.com/chenqiaorui/chenqiaorui.github.io.git\n  branch: master\n```\n### 安装hexo-Git部署插件\n```\nnpm install hexo-deployer-git --save\n```\n\n### 部署到远程仓库chenqiaorui.github.io\n```\nhexo clean # 删除public目录\nhexo g # 创建静态资源public目录\nhexo d # 部署到远程chenqiaorui.github.io项目，部署后要等github部署完成后生效，有时可能有缓存，ctrl+F5强制刷新。\n```\n\n### 绑定域名<可选>\n\n第一步：dns服务器设置别名：mydomain.cn  CNAME chenqiaorui.github.io\n\n第二步: 登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入 mydomain.cn 域名\n\n### 更换主题\n\n将Next主题下载到blog目录的themes主题下的next文件夹中\n```\ngit clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n\n打开站点的_config.yml配置文件，修改主题为next。\n```\ntheme: next\n```\n\nnext主题有很多样式，可以用Pisces、Muse、Mist，在themes/next目录下，打开_config.yaml，配置：\n```\nscheme: Pisces # 选用Pisces样式\n```\n\n（全文完）","source":"_posts/第二期-hexo-github部署个人博客.md","raw":"---\ntitle: '第二期: hexo + github部署个人博客'\ndate: 2023-05-18 12:29:50\ntags:\n---\n### github创建项目\n```\n仓库名称: ${username}.github.io # username是github账号名称\n```\n\n### 参考第一期用hexo创建了项目blog，修改站点配置文件_config.yaml\n```\n# Deployment\n## Docs: https://hexo.io/docs/one-command-deployment\ndeploy:\n  type: git\n  repo: https://github.com/chenqiaorui/chenqiaorui.github.io.git\n  branch: master\n```\n### 安装hexo-Git部署插件\n```\nnpm install hexo-deployer-git --save\n```\n\n### 部署到远程仓库chenqiaorui.github.io\n```\nhexo clean # 删除public目录\nhexo g # 创建静态资源public目录\nhexo d # 部署到远程chenqiaorui.github.io项目，部署后要等github部署完成后生效，有时可能有缓存，ctrl+F5强制刷新。\n```\n\n### 绑定域名<可选>\n\n第一步：dns服务器设置别名：mydomain.cn  CNAME chenqiaorui.github.io\n\n第二步: 登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入 mydomain.cn 域名\n\n### 更换主题\n\n将Next主题下载到blog目录的themes主题下的next文件夹中\n```\ngit clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n\n打开站点的_config.yml配置文件，修改主题为next。\n```\ntheme: next\n```\n\nnext主题有很多样式，可以用Pisces、Muse、Mist，在themes/next目录下，打开_config.yaml，配置：\n```\nscheme: Pisces # 选用Pisces样式\n```\n\n（全文完）","slug":"第二期-hexo-github部署个人博客","published":1,"updated":"2024-03-06T06:55:18.388Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt7a00129kln0fpkh9md","content":"<h3 id=\"github创建项目\"><a href=\"#github创建项目\" class=\"headerlink\" title=\"github创建项目\"></a>github创建项目</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">仓库名称: $&#123;username&#125;.github.io # username是github账号名称</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考第一期用hexo创建了项目blog，修改站点配置文件-config-yaml\"><a href=\"#参考第一期用hexo创建了项目blog，修改站点配置文件-config-yaml\" class=\"headerlink\" title=\"参考第一期用hexo创建了项目blog，修改站点配置文件_config.yaml\"></a>参考第一期用hexo创建了项目blog，修改站点配置文件_config.yaml</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/chenqiaorui/chenqiaorui.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装hexo-Git部署插件\"><a href=\"#安装hexo-Git部署插件\" class=\"headerlink\" title=\"安装hexo-Git部署插件\"></a>安装hexo-Git部署插件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署到远程仓库chenqiaorui-github-io\"><a href=\"#部署到远程仓库chenqiaorui-github-io\" class=\"headerlink\" title=\"部署到远程仓库chenqiaorui.github.io\"></a>部署到远程仓库chenqiaorui.github.io</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean # 删除public目录</span><br><span class=\"line\">hexo g # 创建静态资源public目录</span><br><span class=\"line\">hexo d # 部署到远程chenqiaorui.github.io项目，部署后要等github部署完成后生效，有时可能有缓存，ctrl+F5强制刷新。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"绑定域名-lt-可选-gt\"><a href=\"#绑定域名-lt-可选-gt\" class=\"headerlink\" title=\"绑定域名&lt;可选&gt;\"></a>绑定域名&lt;可选&gt;</h3><p>第一步：dns服务器设置别名：mydomain.cn  CNAME chenqiaorui.github.io</p>\n<p>第二步: 登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入 mydomain.cn 域名</p>\n<h3 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h3><p>将Next主题下载到blog目录的themes主题下的next文件夹中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n\n<p>打开站点的_config.yml配置文件，修改主题为next。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: next</span><br></pre></td></tr></table></figure>\n\n<p>next主题有很多样式，可以用Pisces、Muse、Mist，在themes&#x2F;next目录下，打开_config.yaml，配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scheme: Pisces # 选用Pisces样式</span><br></pre></td></tr></table></figure>\n\n<p>（全文完）</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"github创建项目\"><a href=\"#github创建项目\" class=\"headerlink\" title=\"github创建项目\"></a>github创建项目</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">仓库名称: $&#123;username&#125;.github.io # username是github账号名称</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考第一期用hexo创建了项目blog，修改站点配置文件-config-yaml\"><a href=\"#参考第一期用hexo创建了项目blog，修改站点配置文件-config-yaml\" class=\"headerlink\" title=\"参考第一期用hexo创建了项目blog，修改站点配置文件_config.yaml\"></a>参考第一期用hexo创建了项目blog，修改站点配置文件_config.yaml</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/chenqiaorui/chenqiaorui.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装hexo-Git部署插件\"><a href=\"#安装hexo-Git部署插件\" class=\"headerlink\" title=\"安装hexo-Git部署插件\"></a>安装hexo-Git部署插件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署到远程仓库chenqiaorui-github-io\"><a href=\"#部署到远程仓库chenqiaorui-github-io\" class=\"headerlink\" title=\"部署到远程仓库chenqiaorui.github.io\"></a>部署到远程仓库chenqiaorui.github.io</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean # 删除public目录</span><br><span class=\"line\">hexo g # 创建静态资源public目录</span><br><span class=\"line\">hexo d # 部署到远程chenqiaorui.github.io项目，部署后要等github部署完成后生效，有时可能有缓存，ctrl+F5强制刷新。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"绑定域名-lt-可选-gt\"><a href=\"#绑定域名-lt-可选-gt\" class=\"headerlink\" title=\"绑定域名&lt;可选&gt;\"></a>绑定域名&lt;可选&gt;</h3><p>第一步：dns服务器设置别名：mydomain.cn  CNAME chenqiaorui.github.io</p>\n<p>第二步: 登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入 mydomain.cn 域名</p>\n<h3 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h3><p>将Next主题下载到blog目录的themes主题下的next文件夹中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n\n<p>打开站点的_config.yml配置文件，修改主题为next。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: next</span><br></pre></td></tr></table></figure>\n\n<p>next主题有很多样式，可以用Pisces、Muse、Mist，在themes&#x2F;next目录下，打开_config.yaml，配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scheme: Pisces # 选用Pisces样式</span><br></pre></td></tr></table></figure>\n\n<p>（全文完）</p>\n"},{"title":"第五期：CDN","date":"2023-05-19T16:21:56.000Z","_content":"### CDN介绍\nContent Delivery Network 内容分发网络\n\n原理：自有域名以CNAME方式绑定运营商提供对加速域名，CDN配置目标源站，获取静态资源返回给边缘节点。\n\n以阿里云CDN为例:\n\n- 添加域名\n```\n加速域名  a.example.com（自有域名）\n业务类型  图片小文件\n加速区域  仅中国内地\n\n源站信息（以OSS为例）\n  - 源站类型：oss\n  - 域名：bucket.oss-cn-beijing.aliyun.com\n  - 优先级：主\n  - 端口：80\n```\n- 缓存配置\n可以设置静态文件如png的过期时间，提高命中率\n```\n地址：jpg\n类型：文件后缀名\n过期时间：10分钟\n```\n- 访问控制\n设置防盗链白名单，以实现身份验证（允许空refer）\n```\nlocalhost\na.b.com\n*.example.com\n```\n- 刷新预热\n```\n刷新：删除cdn节点上的缓存数据，重新回源取数据\n预热：从源站取数据存到cdn节点，提升用户体验\n```\n\n","source":"_posts/第五期：CDN.md","raw":"---\ntitle: 第五期：CDN\ndate: 2023-05-20 00:21:56\ntags:\n---\n### CDN介绍\nContent Delivery Network 内容分发网络\n\n原理：自有域名以CNAME方式绑定运营商提供对加速域名，CDN配置目标源站，获取静态资源返回给边缘节点。\n\n以阿里云CDN为例:\n\n- 添加域名\n```\n加速域名  a.example.com（自有域名）\n业务类型  图片小文件\n加速区域  仅中国内地\n\n源站信息（以OSS为例）\n  - 源站类型：oss\n  - 域名：bucket.oss-cn-beijing.aliyun.com\n  - 优先级：主\n  - 端口：80\n```\n- 缓存配置\n可以设置静态文件如png的过期时间，提高命中率\n```\n地址：jpg\n类型：文件后缀名\n过期时间：10分钟\n```\n- 访问控制\n设置防盗链白名单，以实现身份验证（允许空refer）\n```\nlocalhost\na.b.com\n*.example.com\n```\n- 刷新预热\n```\n刷新：删除cdn节点上的缓存数据，重新回源取数据\n预热：从源站取数据存到cdn节点，提升用户体验\n```\n\n","slug":"第五期：CDN","published":1,"updated":"2024-03-06T06:55:18.389Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt7b00139klnco8v6kzf","content":"<h3 id=\"CDN介绍\"><a href=\"#CDN介绍\" class=\"headerlink\" title=\"CDN介绍\"></a>CDN介绍</h3><p>Content Delivery Network 内容分发网络</p>\n<p>原理：自有域名以CNAME方式绑定运营商提供对加速域名，CDN配置目标源站，获取静态资源返回给边缘节点。</p>\n<p>以阿里云CDN为例:</p>\n<ul>\n<li>添加域名<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">加速域名  a.example.com（自有域名）</span><br><span class=\"line\">业务类型  图片小文件</span><br><span class=\"line\">加速区域  仅中国内地</span><br><span class=\"line\"></span><br><span class=\"line\">源站信息（以OSS为例）</span><br><span class=\"line\">  - 源站类型：oss</span><br><span class=\"line\">  - 域名：bucket.oss-cn-beijing.aliyun.com</span><br><span class=\"line\">  - 优先级：主</span><br><span class=\"line\">  - 端口：80</span><br></pre></td></tr></table></figure></li>\n<li>缓存配置<br>可以设置静态文件如png的过期时间，提高命中率<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">地址：jpg</span><br><span class=\"line\">类型：文件后缀名</span><br><span class=\"line\">过期时间：10分钟</span><br></pre></td></tr></table></figure></li>\n<li>访问控制<br>设置防盗链白名单，以实现身份验证（允许空refer）<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost</span><br><span class=\"line\">a.b.com</span><br><span class=\"line\">*.example.com</span><br></pre></td></tr></table></figure></li>\n<li>刷新预热<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">刷新：删除cdn节点上的缓存数据，重新回源取数据</span><br><span class=\"line\">预热：从源站取数据存到cdn节点，提升用户体验</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"CDN介绍\"><a href=\"#CDN介绍\" class=\"headerlink\" title=\"CDN介绍\"></a>CDN介绍</h3><p>Content Delivery Network 内容分发网络</p>\n<p>原理：自有域名以CNAME方式绑定运营商提供对加速域名，CDN配置目标源站，获取静态资源返回给边缘节点。</p>\n<p>以阿里云CDN为例:</p>\n<ul>\n<li>添加域名<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">加速域名  a.example.com（自有域名）</span><br><span class=\"line\">业务类型  图片小文件</span><br><span class=\"line\">加速区域  仅中国内地</span><br><span class=\"line\"></span><br><span class=\"line\">源站信息（以OSS为例）</span><br><span class=\"line\">  - 源站类型：oss</span><br><span class=\"line\">  - 域名：bucket.oss-cn-beijing.aliyun.com</span><br><span class=\"line\">  - 优先级：主</span><br><span class=\"line\">  - 端口：80</span><br></pre></td></tr></table></figure></li>\n<li>缓存配置<br>可以设置静态文件如png的过期时间，提高命中率<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">地址：jpg</span><br><span class=\"line\">类型：文件后缀名</span><br><span class=\"line\">过期时间：10分钟</span><br></pre></td></tr></table></figure></li>\n<li>访问控制<br>设置防盗链白名单，以实现身份验证（允许空refer）<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost</span><br><span class=\"line\">a.b.com</span><br><span class=\"line\">*.example.com</span><br></pre></td></tr></table></figure></li>\n<li>刷新预热<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">刷新：删除cdn节点上的缓存数据，重新回源取数据</span><br><span class=\"line\">预热：从源站取数据存到cdn节点，提升用户体验</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"第八期：shell","date":"2023-05-20T01:27:34.000Z","_content":"##### 数字比较符eq\n```\n只能比较数字，若字符则会被转成数字，如字符0不会等于数字0\n\n-ne // 不等于\n-gt // 大于\n-eq // 等于\n-lt // 小于\n\nif [ 1 -eq 0 ];then\n\techo \"eq\"\nfi\n```\n\n##### 特殊变量\n```\n$0 当前脚本名称\n$n 传递给脚本的第几个参数，如$1获取第一个参数\n$# 传递给脚本的参数个数\n$* 传递给脚本的所有参数\n$? 上个命令的退出状态\n$$ 当前shell的pid\n\n# 示例\ncd /optsafjlajdk\necho $?  // 切换到一个不存在的目录，返回1不正常状态\n```\n\n##### if/else\n```\nbranch_name=\"test\"\n\nif [ ${branch_name} == \"test\" ];then\n\techo \"yes\"\nelse\n\techo \"no\"\nfi\n```\n\n##### case\n```\nenv=$1\ncase $env in\n  release)\n\techo \"release\"\n\twait\n\t;;\n  test)\n\techo \"test\"\n\twait\n\t;;\n  *)\n\techo \"any\"\n\t;;\nesac;\n```\n\n##### 文件表达式\n```\n// -e 文件存在则为真\n// -d 目录存在则为真\n// -s 判断文件是否为空\n\nif [ -s empty.log ];then\n\techo \"not emp\"\nelse\n\techo \"emp\"\nfi\n\nif [ -d test1 ];then\n\techo \"存在\";\nfi\n```\n\n##### 字符串表达式比较\n```\na=\"a\"\nb=\"a\"\nc=\"c\"\nif [ $a = $b -o $a = $c ];then\n        echo \"eq\"\nfi\n\n// Note: $a = $b 不能写成$a=$b\n// -o 表逻辑或\n// -a 表逻辑与\n// ! 表逻辑非，如if [ $a != $c ]\n```\n\n##### for\n```\nfor i in `seq 10`;do\n\techo $i\ndone\n```\n\n##### sh -x 显示执行过程\n```\n例子1：\n如有脚本test.sh，内容:\n\necho \"hello\"\n\n执行sh -x test.sh，结果：\n\n+ echo hell\nhell\n```\n```\n例子2：\necho \"hell\"\n\necho `dirname $PWD`  # 注意这条语句包含多个执行过程，打印结果的时候会有两个+号\n\n执行后，\n+ echo hell\nhell\n++ dirname /opt/test/process\n+ echo /opt/test\n/opt/test\n```\n\n```sh -n``` \n检查脚本语法\n\n```time sh test.sh``` \n脚本执行时间\n\n##### set\nset -e      # 若指令传回值不为0，立即退出脚本\n\n### linux常用命令\n```\nzip -qr yasuo.zip yasuo # -q变不显示压缩信息，-r 表递归压缩下面层级的目录或文件\n\ncat access.log| awk '{print $4}'|sort | uniq -c| sort -nr # 排序\n\n# 查找1天前以.gz结尾的日志，并批量删除\nfind /var/log/nginx/ -name \"*.gz\" -type f -mtime +1|xargs rm -f\n\n## vim技巧\n:set ff # 查看文本格式\n:set binary # 改为unix格式\n```","source":"_posts/第八期：shell.md","raw":"---\ntitle: 第八期：shell\ndate: 2023-05-20 09:27:34\ntags:\n---\n##### 数字比较符eq\n```\n只能比较数字，若字符则会被转成数字，如字符0不会等于数字0\n\n-ne // 不等于\n-gt // 大于\n-eq // 等于\n-lt // 小于\n\nif [ 1 -eq 0 ];then\n\techo \"eq\"\nfi\n```\n\n##### 特殊变量\n```\n$0 当前脚本名称\n$n 传递给脚本的第几个参数，如$1获取第一个参数\n$# 传递给脚本的参数个数\n$* 传递给脚本的所有参数\n$? 上个命令的退出状态\n$$ 当前shell的pid\n\n# 示例\ncd /optsafjlajdk\necho $?  // 切换到一个不存在的目录，返回1不正常状态\n```\n\n##### if/else\n```\nbranch_name=\"test\"\n\nif [ ${branch_name} == \"test\" ];then\n\techo \"yes\"\nelse\n\techo \"no\"\nfi\n```\n\n##### case\n```\nenv=$1\ncase $env in\n  release)\n\techo \"release\"\n\twait\n\t;;\n  test)\n\techo \"test\"\n\twait\n\t;;\n  *)\n\techo \"any\"\n\t;;\nesac;\n```\n\n##### 文件表达式\n```\n// -e 文件存在则为真\n// -d 目录存在则为真\n// -s 判断文件是否为空\n\nif [ -s empty.log ];then\n\techo \"not emp\"\nelse\n\techo \"emp\"\nfi\n\nif [ -d test1 ];then\n\techo \"存在\";\nfi\n```\n\n##### 字符串表达式比较\n```\na=\"a\"\nb=\"a\"\nc=\"c\"\nif [ $a = $b -o $a = $c ];then\n        echo \"eq\"\nfi\n\n// Note: $a = $b 不能写成$a=$b\n// -o 表逻辑或\n// -a 表逻辑与\n// ! 表逻辑非，如if [ $a != $c ]\n```\n\n##### for\n```\nfor i in `seq 10`;do\n\techo $i\ndone\n```\n\n##### sh -x 显示执行过程\n```\n例子1：\n如有脚本test.sh，内容:\n\necho \"hello\"\n\n执行sh -x test.sh，结果：\n\n+ echo hell\nhell\n```\n```\n例子2：\necho \"hell\"\n\necho `dirname $PWD`  # 注意这条语句包含多个执行过程，打印结果的时候会有两个+号\n\n执行后，\n+ echo hell\nhell\n++ dirname /opt/test/process\n+ echo /opt/test\n/opt/test\n```\n\n```sh -n``` \n检查脚本语法\n\n```time sh test.sh``` \n脚本执行时间\n\n##### set\nset -e      # 若指令传回值不为0，立即退出脚本\n\n### linux常用命令\n```\nzip -qr yasuo.zip yasuo # -q变不显示压缩信息，-r 表递归压缩下面层级的目录或文件\n\ncat access.log| awk '{print $4}'|sort | uniq -c| sort -nr # 排序\n\n# 查找1天前以.gz结尾的日志，并批量删除\nfind /var/log/nginx/ -name \"*.gz\" -type f -mtime +1|xargs rm -f\n\n## vim技巧\n:set ff # 查看文本格式\n:set binary # 改为unix格式\n```","slug":"第八期：shell","published":1,"updated":"2024-03-06T06:55:18.389Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt7c00149klnfyjt0bw6","content":"<h5 id=\"数字比较符eq\"><a href=\"#数字比较符eq\" class=\"headerlink\" title=\"数字比较符eq\"></a>数字比较符eq</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">只能比较数字，若字符则会被转成数字，如字符0不会等于数字0</span><br><span class=\"line\"></span><br><span class=\"line\">-ne // 不等于</span><br><span class=\"line\">-gt // 大于</span><br><span class=\"line\">-eq // 等于</span><br><span class=\"line\">-lt // 小于</span><br><span class=\"line\"></span><br><span class=\"line\">if [ 1 -eq 0 ];then</span><br><span class=\"line\">\techo &quot;eq&quot;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"特殊变量\"><a href=\"#特殊变量\" class=\"headerlink\" title=\"特殊变量\"></a>特殊变量</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$0 当前脚本名称</span><br><span class=\"line\">$n 传递给脚本的第几个参数，如$1获取第一个参数</span><br><span class=\"line\">$# 传递给脚本的参数个数</span><br><span class=\"line\">$* 传递给脚本的所有参数</span><br><span class=\"line\">$? 上个命令的退出状态</span><br><span class=\"line\">$$ 当前shell的pid</span><br><span class=\"line\"></span><br><span class=\"line\"># 示例</span><br><span class=\"line\">cd /optsafjlajdk</span><br><span class=\"line\">echo $?  // 切换到一个不存在的目录，返回1不正常状态</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"if-x2F-else\"><a href=\"#if-x2F-else\" class=\"headerlink\" title=\"if&#x2F;else\"></a>if&#x2F;else</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">branch_name=&quot;test&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">if [ $&#123;branch_name&#125; == &quot;test&quot; ];then</span><br><span class=\"line\">\techo &quot;yes&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">\techo &quot;no&quot;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"case\"><a href=\"#case\" class=\"headerlink\" title=\"case\"></a>case</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">env=$1</span><br><span class=\"line\">case $env in</span><br><span class=\"line\">  release)</span><br><span class=\"line\">\techo &quot;release&quot;</span><br><span class=\"line\">\twait</span><br><span class=\"line\">\t;;</span><br><span class=\"line\">  test)</span><br><span class=\"line\">\techo &quot;test&quot;</span><br><span class=\"line\">\twait</span><br><span class=\"line\">\t;;</span><br><span class=\"line\">  *)</span><br><span class=\"line\">\techo &quot;any&quot;</span><br><span class=\"line\">\t;;</span><br><span class=\"line\">esac;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"文件表达式\"><a href=\"#文件表达式\" class=\"headerlink\" title=\"文件表达式\"></a>文件表达式</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// -e 文件存在则为真</span><br><span class=\"line\">// -d 目录存在则为真</span><br><span class=\"line\">// -s 判断文件是否为空</span><br><span class=\"line\"></span><br><span class=\"line\">if [ -s empty.log ];then</span><br><span class=\"line\">\techo &quot;not emp&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">\techo &quot;emp&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [ -d test1 ];then</span><br><span class=\"line\">\techo &quot;存在&quot;;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"字符串表达式比较\"><a href=\"#字符串表达式比较\" class=\"headerlink\" title=\"字符串表达式比较\"></a>字符串表达式比较</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=&quot;a&quot;</span><br><span class=\"line\">b=&quot;a&quot;</span><br><span class=\"line\">c=&quot;c&quot;</span><br><span class=\"line\">if [ $a = $b -o $a = $c ];then</span><br><span class=\"line\">        echo &quot;eq&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">// Note: $a = $b 不能写成$a=$b</span><br><span class=\"line\">// -o 表逻辑或</span><br><span class=\"line\">// -a 表逻辑与</span><br><span class=\"line\">// ! 表逻辑非，如if [ $a != $c ]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"for\"><a href=\"#for\" class=\"headerlink\" title=\"for\"></a>for</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for i in `seq 10`;do</span><br><span class=\"line\">\techo $i</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"sh-x-显示执行过程\"><a href=\"#sh-x-显示执行过程\" class=\"headerlink\" title=\"sh -x 显示执行过程\"></a>sh -x 显示执行过程</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例子1：</span><br><span class=\"line\">如有脚本test.sh，内容:</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;hello&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">执行sh -x test.sh，结果：</span><br><span class=\"line\"></span><br><span class=\"line\">+ echo hell</span><br><span class=\"line\">hell</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例子2：</span><br><span class=\"line\">echo &quot;hell&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">echo `dirname $PWD`  # 注意这条语句包含多个执行过程，打印结果的时候会有两个+号</span><br><span class=\"line\"></span><br><span class=\"line\">执行后，</span><br><span class=\"line\">+ echo hell</span><br><span class=\"line\">hell</span><br><span class=\"line\">++ dirname /opt/test/process</span><br><span class=\"line\">+ echo /opt/test</span><br><span class=\"line\">/opt/test</span><br></pre></td></tr></table></figure>\n\n<p><code>sh -n</code><br>检查脚本语法</p>\n<p><code>time sh test.sh</code><br>脚本执行时间</p>\n<h5 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h5><p>set -e      # 若指令传回值不为0，立即退出脚本</p>\n<h3 id=\"linux常用命令\"><a href=\"#linux常用命令\" class=\"headerlink\" title=\"linux常用命令\"></a>linux常用命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zip -qr yasuo.zip yasuo # -q变不显示压缩信息，-r 表递归压缩下面层级的目录或文件</span><br><span class=\"line\"></span><br><span class=\"line\">cat access.log| awk &#x27;&#123;print $4&#125;&#x27;|sort | uniq -c| sort -nr # 排序</span><br><span class=\"line\"></span><br><span class=\"line\"># 查找1天前以.gz结尾的日志，并批量删除</span><br><span class=\"line\">find /var/log/nginx/ -name &quot;*.gz&quot; -type f -mtime +1|xargs rm -f</span><br><span class=\"line\"></span><br><span class=\"line\">## vim技巧</span><br><span class=\"line\">:set ff # 查看文本格式</span><br><span class=\"line\">:set binary # 改为unix格式</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h5 id=\"数字比较符eq\"><a href=\"#数字比较符eq\" class=\"headerlink\" title=\"数字比较符eq\"></a>数字比较符eq</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">只能比较数字，若字符则会被转成数字，如字符0不会等于数字0</span><br><span class=\"line\"></span><br><span class=\"line\">-ne // 不等于</span><br><span class=\"line\">-gt // 大于</span><br><span class=\"line\">-eq // 等于</span><br><span class=\"line\">-lt // 小于</span><br><span class=\"line\"></span><br><span class=\"line\">if [ 1 -eq 0 ];then</span><br><span class=\"line\">\techo &quot;eq&quot;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"特殊变量\"><a href=\"#特殊变量\" class=\"headerlink\" title=\"特殊变量\"></a>特殊变量</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$0 当前脚本名称</span><br><span class=\"line\">$n 传递给脚本的第几个参数，如$1获取第一个参数</span><br><span class=\"line\">$# 传递给脚本的参数个数</span><br><span class=\"line\">$* 传递给脚本的所有参数</span><br><span class=\"line\">$? 上个命令的退出状态</span><br><span class=\"line\">$$ 当前shell的pid</span><br><span class=\"line\"></span><br><span class=\"line\"># 示例</span><br><span class=\"line\">cd /optsafjlajdk</span><br><span class=\"line\">echo $?  // 切换到一个不存在的目录，返回1不正常状态</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"if-x2F-else\"><a href=\"#if-x2F-else\" class=\"headerlink\" title=\"if&#x2F;else\"></a>if&#x2F;else</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">branch_name=&quot;test&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">if [ $&#123;branch_name&#125; == &quot;test&quot; ];then</span><br><span class=\"line\">\techo &quot;yes&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">\techo &quot;no&quot;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"case\"><a href=\"#case\" class=\"headerlink\" title=\"case\"></a>case</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">env=$1</span><br><span class=\"line\">case $env in</span><br><span class=\"line\">  release)</span><br><span class=\"line\">\techo &quot;release&quot;</span><br><span class=\"line\">\twait</span><br><span class=\"line\">\t;;</span><br><span class=\"line\">  test)</span><br><span class=\"line\">\techo &quot;test&quot;</span><br><span class=\"line\">\twait</span><br><span class=\"line\">\t;;</span><br><span class=\"line\">  *)</span><br><span class=\"line\">\techo &quot;any&quot;</span><br><span class=\"line\">\t;;</span><br><span class=\"line\">esac;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"文件表达式\"><a href=\"#文件表达式\" class=\"headerlink\" title=\"文件表达式\"></a>文件表达式</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// -e 文件存在则为真</span><br><span class=\"line\">// -d 目录存在则为真</span><br><span class=\"line\">// -s 判断文件是否为空</span><br><span class=\"line\"></span><br><span class=\"line\">if [ -s empty.log ];then</span><br><span class=\"line\">\techo &quot;not emp&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">\techo &quot;emp&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [ -d test1 ];then</span><br><span class=\"line\">\techo &quot;存在&quot;;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"字符串表达式比较\"><a href=\"#字符串表达式比较\" class=\"headerlink\" title=\"字符串表达式比较\"></a>字符串表达式比较</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=&quot;a&quot;</span><br><span class=\"line\">b=&quot;a&quot;</span><br><span class=\"line\">c=&quot;c&quot;</span><br><span class=\"line\">if [ $a = $b -o $a = $c ];then</span><br><span class=\"line\">        echo &quot;eq&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">// Note: $a = $b 不能写成$a=$b</span><br><span class=\"line\">// -o 表逻辑或</span><br><span class=\"line\">// -a 表逻辑与</span><br><span class=\"line\">// ! 表逻辑非，如if [ $a != $c ]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"for\"><a href=\"#for\" class=\"headerlink\" title=\"for\"></a>for</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for i in `seq 10`;do</span><br><span class=\"line\">\techo $i</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"sh-x-显示执行过程\"><a href=\"#sh-x-显示执行过程\" class=\"headerlink\" title=\"sh -x 显示执行过程\"></a>sh -x 显示执行过程</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例子1：</span><br><span class=\"line\">如有脚本test.sh，内容:</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;hello&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">执行sh -x test.sh，结果：</span><br><span class=\"line\"></span><br><span class=\"line\">+ echo hell</span><br><span class=\"line\">hell</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例子2：</span><br><span class=\"line\">echo &quot;hell&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">echo `dirname $PWD`  # 注意这条语句包含多个执行过程，打印结果的时候会有两个+号</span><br><span class=\"line\"></span><br><span class=\"line\">执行后，</span><br><span class=\"line\">+ echo hell</span><br><span class=\"line\">hell</span><br><span class=\"line\">++ dirname /opt/test/process</span><br><span class=\"line\">+ echo /opt/test</span><br><span class=\"line\">/opt/test</span><br></pre></td></tr></table></figure>\n\n<p><code>sh -n</code><br>检查脚本语法</p>\n<p><code>time sh test.sh</code><br>脚本执行时间</p>\n<h5 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h5><p>set -e      # 若指令传回值不为0，立即退出脚本</p>\n<h3 id=\"linux常用命令\"><a href=\"#linux常用命令\" class=\"headerlink\" title=\"linux常用命令\"></a>linux常用命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zip -qr yasuo.zip yasuo # -q变不显示压缩信息，-r 表递归压缩下面层级的目录或文件</span><br><span class=\"line\"></span><br><span class=\"line\">cat access.log| awk &#x27;&#123;print $4&#125;&#x27;|sort | uniq -c| sort -nr # 排序</span><br><span class=\"line\"></span><br><span class=\"line\"># 查找1天前以.gz结尾的日志，并批量删除</span><br><span class=\"line\">find /var/log/nginx/ -name &quot;*.gz&quot; -type f -mtime +1|xargs rm -f</span><br><span class=\"line\"></span><br><span class=\"line\">## vim技巧</span><br><span class=\"line\">:set ff # 查看文本格式</span><br><span class=\"line\">:set binary # 改为unix格式</span><br></pre></td></tr></table></figure>"},{"title":"第六期：Nginx","date":"2023-05-19T16:42:05.000Z","_content":"### 服务管理\n```\nnginx # 启动\nnginx -t # 测试配置\nnginx -s reload # 重载配置\n```\n\n### 示例\n```\nserver {\n    listen      88;\n    server_name localhost;\n    charset     utf-8;\n    index       index.html index.htm;\n    access_log  logs/access.log;\n    location / {\n        return 200 \"test conf\";\n    }\n}\n```\n### 重定向（地址会变）\n```\nlocation / {\n    return 302 http://localhost:89/$request_uri;\n}\n\n# redirect.conf\nserver {\n    listen      89;\n    server_name localhost;\n    charset     utf-8;\n    index       index.html index.htm;\n    access_log  logs/access.log;\n    location / {\n        return 200 \"after redirect uri\";\n    }\n}\n\n进行测试：curl -L localhost:88\n返回：after redirect uri\n```\n### 匹配以/api/开头的uri\n```\nlocation ^/api/ {\n  proxy_pass http://loclhost:8090;\n}\n```\n#### 一、centos7安装Nginx\n##### 源码安装\n- [所有nginx版本](http://nginx.org/download/)\n\nwget下载tar.gz包\n```\nwget http://nginx.org/download/nginx-1.20.1.tar.gz\n\n# 解压\ntar xzf nginx-1.20.1.tar.gz\n```\n\n编译\n```\ncd nginx-1.20.1 && ./configure\n```\n注意：`安装报错误的话比如：\"C compiler cc is not found\"，这个就是缺少编译环境，安装一下就可以了 yum -y install gcc make gcc-c++ openssl-devel`\n\n安装\n```\nmake && make install\n```\n说明：\n- nignx会被安装到`/usr/local/nginx`目录下\n\nnginx测试\n```\n$ which nginx\n/usr/bin/nginx\n\nnginx # 启动nginx\nps aux|grep nginx # 查看nginx进程\nnginx -s stop # 停止nginx\n\nnginx -v # nginx 版本\nnginx -t # 测试配置文件\nnginx -s reload # 重载配置\n\n```\n\n防火墙设置\n```\nsystemctl status firewalld # 查看防火墙状态\n```\n\n设置放行端口，编辑`/etc/firewalld/zones/public.xml`文件，在</zone>前面加:\n\n```\n<zone>\n  ...\n  <port port=\"30000-30100\" protocol=\"tcp\"/>\n  <port port=\"80\" protocol=\"tcp\"/>\n</zone>\n```\n说明：\n- 可以设置端口段或单个端口\n\n配完文件后重载`firewall-cmd --reload`，查看被放行的端口\n```\nfirewall-cmd --list-ports \n```\n\n#### 二、配置文件\n查看`/usr/local/nginx/conf/nginx.conf`文件：\n```\nworker_processes  1;\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    gzip  on;\n    server {\n        listen       80;\n        server_name  localhost;\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n    include  vhost/*.conf;\n}\n\n```\n说明：\n- `worker_processes` - work进程数，一般根据cpu核数来设置，可以设为和CPU的数量一样\n- `worker_connections` - 单个work进程可以连的并发连接数，连接数依赖于系统级别的进程可打开文件数，`ulimit -n`可查看\n  \n  `cat /proc/nginx_work_pid/limits` 里面的`Max open files`也可查询。\n\n- `log_format` - 设置nginx日志格式\n- `access_log` - 设置文件存储位置和应用的日志格式\n- `sendfile` - 开启文件高效传输模式\n- `keepalive_timeout` - 客户端和nginx之间建立的tcp长连接维持时间\n- `gzip` - 开启gzip模块，文件被压缩传到客户端，优化传输效率，有效节省带宽。\n- `listen 80` - 监听80端口\n- `root   html;` - 相当于`root /usr/local/nginx/html`\n- `index index.html` - 查找`/usr/local/nginx/html`目录下的index.html文件\n- `include` - 添加配置文件\n\n示例：在vhost下添加配置文件`test.conf`\n```\nserver {\n    listen 80;\n    server_name 192.168.1.189;\n    location /ricky/ {\n\t    return 200 \"im ricky\";\n    }\n}\n```\n注意：\n- server_name指定为本机的ip而不是localhost，因为上一目录nginx.conf配置的localhost\n- 指定访问前缀为/ricky/\n\n检查并重载配置\n```\nnginx -t\nnginx -s reload\n```\n\n访问：curl http://192.168.1.189:80/ricky/  \n注意：\n- 访问的时候`192.168.1.189` 不能写成localhost，不然匹配规则就跑到nginx.conf里面的server去了\n- ricky后面的`/`不可以省略；如果想省略，可以把`location /ricky/`写成`location /ricky`\n  \n  `location /ricky`既会匹配到`http://192.168.1.189:80/ricky`的路由，也会匹配到`http://192.168.1.189:80/rickyadsafaf/a`\n\n  总的来说，nginx先在所有配置文件中匹配端口->再到server_name->具体location(location之间又有优先级的区分)\n\n#### 三、location优先级\n优先级高到低\n- `location = /uri` - 字符 `=` 表示精准匹配（精准匹配优先级最高）\n- `location ^~ /uri` - 字符 `^` 表示以/test开头的路径，`~` 表区分大小写；但是 `~*` 表不区分大小写(带 `~*` 等修饰符优先级次之)\n- `location /url` - 不带修饰符的前缀再次之\n- `location /` - 最后是交给`/`通用匹配。\n\n示例1：比较精准和带修饰符\n```\nserver {\n    listen 80;\n    server_name 192.168.1.189;\n    location = /ricky {\n\t    return 200 \"精准\";\n    }\n\n    location ^~ /ricky {\n\t    return 200 \"修饰符\";\n    }\n}\n\n```\n重载配置并访问：`curl http://192.168.1.189:80/ricky`，输出`精准`\n\n示例2：比较带修饰符和不带修饰符\n```\nserver {\n    listen 80;\n    server_name 192.168.1.189;\n    location ^~ ricky {\n\t    return 200 \"精准\";\n    }\n\n    location / {\n\t    return 200 \"通用\";\n    }\n}\n\n```\n重载配置并访问：`curl http://192.168.1.189:80/ricky`，输出`精准`；访问不在/ricky规则内的就打出`通用`，如`curl http://192.168.1.189:80/ris`\n\n#### nginx不需要后端就可以返回远程用户ip的配置\n配置:\n```\nlocation /ip {\n    default_type text/plain;\n    return 200 $remote_addr;\n}\n```\n访问\n```\n$ curl https://example.com/ip\n192.168.1.187\n```\n\n返回json格式：\n```\n$ curl -s https://example.com/json_ip | jq\n{\n    \"ip\": \"192.168.1.187\"\n}\n```\n### nginx.conf文件详解\n```\n# 定义nginx运行的用户和用户组\nuser www www;\n\n# nginx work进程数，一般与cpu核数一致。\nworker_processes 8;\n\n# 错误日志类型定义\nerror_log /var/log/nginx/error.log info;\n\n# 进程文件\npid /var/run/nginx.pid;\n\n# 1个nginx进程最多能打开的文件描述符数，建议与ulimit -n(系统最大能打开的文件描述符数)一致\nwork_rlimit_nofile 65535;\n\n# \nevents {\n  # 高性能网络io模型\n  use epoll;\n  # 单进程最大连接数\n  work_connections 65535; \n}\n\nhttp {\n  include mime.type; # 文件扩展与文件类型名映射表\n  default_type application/ocetet-stream; # 默认文件类型\n  # charset utf-8; # 默认编码\n  client_header_buffer_size 32; # 上传文件大小限制\n  # 所谓请求报文包含了请求头(如 User-Agent： 或 Accept：)+请求行(GET /index.html HTTP/1.1)+请求body\n  large_client_header_buffers 4 64k; # 设定请求行+请求头不能超过4x64k\n  client_max_body_size 8m;  # 设置body(或上传文件)最大值8m\n  sendfile on; # 开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。\n\n  autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。\n  keepalive_timeout 120; # 长连接超时时间，单位s\n\n  #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度\n  fastcgi_connect_timeout 300;\n  fastcgi_send_timeout 300;\n  fastcgi_read_timeout 300;\n  fastcgi_buffer_size 64k;\n  fastcgi_buffers 4 64k;\n  fastcgi_busy_buffers_size 128k;\n  fastcgi_temp_file_write_size 128k;\n\n  #gzip模块设置\n  gzip on;        #开启gzip压缩输出\n  gzip_min_length 1k; #最小压缩文件大小\n  gzip_buffers 4 16k; #压缩缓冲区\n  gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）开始压缩的http协议版本(可以不设置,目前几乎全是1.1协议)\n  gzip_comp_level 2;   #推荐6压缩级别(级别越高,压的越小,越浪费CPU计算资源)\n  gzip_types text/plain application/x-javascript text/css application/xml;\n  #压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。\n  gzip_vary on;   # 是否传输gzip压缩标志\n  #limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用\n\n  upstream blog.ha97.com {\n    #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。\n    server 192.168.80.121:80 weight=3;\n    server 192.168.80.122:80 weight=2;\n    server 192.168.80.123:80 weight=3;\n  }\n\n  #虚拟主机的配置\n  server\n  {\n      #监听端口\n      listen 80;\n      #域名可以有多个，用空格隔开\n      server_name www.ha97.com ha97.com;\n      index index.html index.htm index.php;\n      root /data/www/ha97;\n      location ~ .*\\.(php|php5)?$\n      {\n      fastcgi_pass 127.0.0.1:9000;\n      fastcgi_index index.php;\n      include fastcgi.conf;\n      }\n      #图片缓存时间设置\n      location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$\n      {\n      expires 10d;\n      }\n      #JS和CSS缓存时间设置\n      location ~ .*\\.(js|css)?$\n      {\n      expires 1h;\n      }\n      #日志格式设定\n      log_format access '$remote_addr - $remote_user [$time_local] \"$request\" '\n      '$status $body_bytes_sent \"$http_referer\" '\n      '\"$http_user_agent\" $http_x_forwarded_for';\n      #定义本虚拟主机的访问日志\n      access_log /var/log/nginx/ha97access.log access;\n\n      #对 \"/\" 启用反向代理\n      location / {\n      proxy_pass http://127.0.0.1:88;\n      proxy_redirect off;\n      proxy_set_header X-Real-IP $remote_addr;\n      #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      #以下是一些反向代理的配置，可选。\n      proxy_set_header Host $host;\n      client_max_body_size 10m; #允许客户端请求的最大单文件字节数\n      client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，\n      proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)\n      proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)\n      proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)\n      proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n      proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置\n      proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）\n      proxy_temp_file_write_size 64k;\n      #设定缓存文件夹大小，大于这个值，将从upstream服务器传\n      }\n\n      #设定查看Nginx状态的地址\n      location /NginxStatus {\n      stub_status on;\n      access_log on;\n      auth_basic \"NginxStatus\";\n      auth_basic_user_file conf/htpasswd;\n      #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。\n      }\n\n      #本地动静分离反向代理配置\n      #所有jsp的页面均交由tomcat或resin处理\n      location ~ .(jsp|jspx|do)?$ {\n      proxy_set_header Host $host;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_pass http://127.0.0.1:8080;\n      }\n      #所有静态文件由nginx直接读取不经过tomcat或resin\n      location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$\n      { expires 15d; }\n      location ~ .*.(js|css)?$\n      { expires 1h; }\n  }\n\n}\n\n\n```\n### 常用nginx配置demo\n\n```\nuser  nginx nginx;\nworker_processes  1;\n\nerror_log  /var/log/nginx/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\npid        /var/run/nginx/nginx.pid;\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #隐藏Nginx版本信息，禁止网站目录浏览\n    server_tokens off;\n    autoindex off;\n    #当FastCGI后端服务器处理请求给出http响应码为4xx和5xx时，就转发给nginx\n    fastcgi_intercept_errors on;\n\n    #关于fastcgi的配置\n    fastcgi_connect_timeout 300;    \n    fastcgi_send_timeout 300;    \n    fastcgi_read_timeout 300;    \n    fastcgi_buffer_size 64k;    \n    fastcgi_buffers 4 64k;    \n    fastcgi_busy_buffers_size 128k;    \n    fastcgi_temp_file_write_size 128k;\n\n    #支持gzip压缩\n    gzip on;\n    gzip_min_length 1k;\n    gzip_buffers 16 64k;\n    gzip_http_version 1.1;\n    gzip_comp_level 6;\n    gzip_types text/plain application/x-javascript text/css application/javascript text/javascript image/jpeg image/gif image/png application/xml application/json;\n    gzip_vary on;\n    gzip_disable \"MSIE [1-6].(?!.*SV1)\";\n\n    #\n    # 重定向所有带www请求到非www的请求\n    #\n    server {\n        listen               *:80;\n        listen               *:443 ssl spdy;\n        server_name www.typecodes.com;\n        # ssl证书配置见文章 https://typecodes.com/web/lnmppositivessl.html\n        ssl_certificate /etc/nginx/ssl/typecodes.crt;\n        # ssl密钥文件见文章 https://typecodes.com/web/lnmppositivessl.html\n        ssl_certificate_key /etc/nginx/ssl/typecodes.key;\n        # 不产生日志\n        access_log off;\n\n        # 访问favicon.ico和robots.txt不跳转（把这两个文件存放在上级目录html中）\n        location ~* ^/(favicon.ico|robots.txt)$ {\n            root html;\n            expires max;\n            log_not_found off;\n            break;\n        }\n\n        location / {\n            return 301 https://typecodes.com$request_uri;\n        }\n    }\n\n    #\n    # 将所有http请求重定向到https\n    #\n    server {\n        listen               *:80;\n        server_name          typecodes.com;\n        # 不产生日志\n        access_log off;\n\n        # 访问favicon.ico和robots.txt不跳转（把这两个文件存放在上级目录html中）\n        location ~* ^/(favicon.ico|robots.txt)$ {\n            root html;\n            expires max;\n            log_not_found off;\n            break;\n        }\n\n        location / {\n            return 301 https://typecodes.com$request_uri;\n        }\n    }\n\n    #\n    # HTTPS server\n    #\n    server {\n        listen               *:443 ssl spdy;\n        server_name typecodes.com;\n\n        # ssl证书配置见文章 https://typecodes.com/web/lnmppositivessl.html\n        ssl_certificate /etc/nginx/ssl/typecodes.crt;\n        # ssl密钥文件见文章 https://typecodes.com/web/lnmppositivessl.html\n        ssl_certificate_key /etc/nginx/ssl/typecodes.key;\n        ssl_session_cache shared:SSL:20m;\n        ssl_session_timeout 10m;\n        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA:!CAMELLIA;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #enables TLSv1, but not SSLv2, SSLv3 which is weak and should no longer be used.\n        ssl_prefer_server_ciphers on;\n        # 开启spdy功能\n        add_header Alternate-Protocol 443:npn-spdy/3.1;\n        # 严格的https访问\n        add_header Strict-Transport-Security \"max-age=31536000; includeSubdomains;\";\n\n        #设置网站根目录\n        root   /usr/share/nginx/html/typecodes;\n        index  index.php index.html;\n\n        charset utf-8;\n\n        #access_log  /var/log/nginx/log/host.access.log  main;\n\n        #设置css/javascript/图片等静态资源的缓存时间\n        location ~ .*\\.(css|js|ico|png|gif|jpg|json|mp3|mp4|flv|swf)(.*) {\n            expires 60d;\n        }\n\n        # include /etc/nginx/default.d/*.conf;\n        # 设置typecho博客的config文章不被访问，保证安全\n        location = /config.inc.php{\n            deny  all;\n        }\n\n        # keep the uploads directory safe by excluding php, php5, html file accessing. Applying to wordpress and typecho.\n        # location ~ .*/uploads/.*\\.(php|php5|html)$ {\n        #   deny  all;\n        # }\n\n        # 设置wordpress和typecho博客中，插件目录无法直接访问php或者html文件\n        location ~ .*/plugins/.*\\.(php|php5|html)$ {\n            deny  all;\n        }\n\n        #Rewrite的伪静态(针对wordpress/typecho)，url地址去掉index.php\n        location / {\n            if (-f $request_filename/index.html){\n                rewrite (.*) $1/index.html break;\n            }\n            if (-f $request_filename/index.php){\n                rewrite (.*) $1/index.php;\n            }\n        if (!-f $request_filename){\n                rewrite (.*) /index.php;\n            }\n        }\n\n        #访问favicon.ico时不产生日志\n        location = /favicon.ico {\n            access_log off;\n        }\n\n        #设置40系列错误的应答文件为40x.html\n        error_page  400 401 402 403 404  /40x.html;\n        location = /40x.html {\n                root   html;\n                index  index.html index.htm;\n        }\n\n        #设置50系列错误的应答文件为50x.html\n        #\n        error_page   500 501 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n            index  index.html index.htm;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # 设置Nginx和php通信机制为tcp的socket模式，而不是直接监听9000端口\n        location  ~ .*\\.php(\\/.*)*$ {\n             fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n             #fastcgi_pass   127.0.0.1:9000;\n             # the better form of fastcgi_pass than before\n             fastcgi_pass   unix:/var/run/php-fpm/php-fpm.sock;\n             fastcgi_index  index.php;\n             fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n             include        fastcgi_params;\n        }\n\n        # deny access to .htaccess files, if Apache's document root\n        # concurs with nginx's one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n}\n```\n","source":"_posts/第六期：Nginx.md","raw":"---\ntitle: 第六期：Nginx\ndate: 2023-05-20 00:42:05\ntags:\n---\n### 服务管理\n```\nnginx # 启动\nnginx -t # 测试配置\nnginx -s reload # 重载配置\n```\n\n### 示例\n```\nserver {\n    listen      88;\n    server_name localhost;\n    charset     utf-8;\n    index       index.html index.htm;\n    access_log  logs/access.log;\n    location / {\n        return 200 \"test conf\";\n    }\n}\n```\n### 重定向（地址会变）\n```\nlocation / {\n    return 302 http://localhost:89/$request_uri;\n}\n\n# redirect.conf\nserver {\n    listen      89;\n    server_name localhost;\n    charset     utf-8;\n    index       index.html index.htm;\n    access_log  logs/access.log;\n    location / {\n        return 200 \"after redirect uri\";\n    }\n}\n\n进行测试：curl -L localhost:88\n返回：after redirect uri\n```\n### 匹配以/api/开头的uri\n```\nlocation ^/api/ {\n  proxy_pass http://loclhost:8090;\n}\n```\n#### 一、centos7安装Nginx\n##### 源码安装\n- [所有nginx版本](http://nginx.org/download/)\n\nwget下载tar.gz包\n```\nwget http://nginx.org/download/nginx-1.20.1.tar.gz\n\n# 解压\ntar xzf nginx-1.20.1.tar.gz\n```\n\n编译\n```\ncd nginx-1.20.1 && ./configure\n```\n注意：`安装报错误的话比如：\"C compiler cc is not found\"，这个就是缺少编译环境，安装一下就可以了 yum -y install gcc make gcc-c++ openssl-devel`\n\n安装\n```\nmake && make install\n```\n说明：\n- nignx会被安装到`/usr/local/nginx`目录下\n\nnginx测试\n```\n$ which nginx\n/usr/bin/nginx\n\nnginx # 启动nginx\nps aux|grep nginx # 查看nginx进程\nnginx -s stop # 停止nginx\n\nnginx -v # nginx 版本\nnginx -t # 测试配置文件\nnginx -s reload # 重载配置\n\n```\n\n防火墙设置\n```\nsystemctl status firewalld # 查看防火墙状态\n```\n\n设置放行端口，编辑`/etc/firewalld/zones/public.xml`文件，在</zone>前面加:\n\n```\n<zone>\n  ...\n  <port port=\"30000-30100\" protocol=\"tcp\"/>\n  <port port=\"80\" protocol=\"tcp\"/>\n</zone>\n```\n说明：\n- 可以设置端口段或单个端口\n\n配完文件后重载`firewall-cmd --reload`，查看被放行的端口\n```\nfirewall-cmd --list-ports \n```\n\n#### 二、配置文件\n查看`/usr/local/nginx/conf/nginx.conf`文件：\n```\nworker_processes  1;\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    gzip  on;\n    server {\n        listen       80;\n        server_name  localhost;\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n    include  vhost/*.conf;\n}\n\n```\n说明：\n- `worker_processes` - work进程数，一般根据cpu核数来设置，可以设为和CPU的数量一样\n- `worker_connections` - 单个work进程可以连的并发连接数，连接数依赖于系统级别的进程可打开文件数，`ulimit -n`可查看\n  \n  `cat /proc/nginx_work_pid/limits` 里面的`Max open files`也可查询。\n\n- `log_format` - 设置nginx日志格式\n- `access_log` - 设置文件存储位置和应用的日志格式\n- `sendfile` - 开启文件高效传输模式\n- `keepalive_timeout` - 客户端和nginx之间建立的tcp长连接维持时间\n- `gzip` - 开启gzip模块，文件被压缩传到客户端，优化传输效率，有效节省带宽。\n- `listen 80` - 监听80端口\n- `root   html;` - 相当于`root /usr/local/nginx/html`\n- `index index.html` - 查找`/usr/local/nginx/html`目录下的index.html文件\n- `include` - 添加配置文件\n\n示例：在vhost下添加配置文件`test.conf`\n```\nserver {\n    listen 80;\n    server_name 192.168.1.189;\n    location /ricky/ {\n\t    return 200 \"im ricky\";\n    }\n}\n```\n注意：\n- server_name指定为本机的ip而不是localhost，因为上一目录nginx.conf配置的localhost\n- 指定访问前缀为/ricky/\n\n检查并重载配置\n```\nnginx -t\nnginx -s reload\n```\n\n访问：curl http://192.168.1.189:80/ricky/  \n注意：\n- 访问的时候`192.168.1.189` 不能写成localhost，不然匹配规则就跑到nginx.conf里面的server去了\n- ricky后面的`/`不可以省略；如果想省略，可以把`location /ricky/`写成`location /ricky`\n  \n  `location /ricky`既会匹配到`http://192.168.1.189:80/ricky`的路由，也会匹配到`http://192.168.1.189:80/rickyadsafaf/a`\n\n  总的来说，nginx先在所有配置文件中匹配端口->再到server_name->具体location(location之间又有优先级的区分)\n\n#### 三、location优先级\n优先级高到低\n- `location = /uri` - 字符 `=` 表示精准匹配（精准匹配优先级最高）\n- `location ^~ /uri` - 字符 `^` 表示以/test开头的路径，`~` 表区分大小写；但是 `~*` 表不区分大小写(带 `~*` 等修饰符优先级次之)\n- `location /url` - 不带修饰符的前缀再次之\n- `location /` - 最后是交给`/`通用匹配。\n\n示例1：比较精准和带修饰符\n```\nserver {\n    listen 80;\n    server_name 192.168.1.189;\n    location = /ricky {\n\t    return 200 \"精准\";\n    }\n\n    location ^~ /ricky {\n\t    return 200 \"修饰符\";\n    }\n}\n\n```\n重载配置并访问：`curl http://192.168.1.189:80/ricky`，输出`精准`\n\n示例2：比较带修饰符和不带修饰符\n```\nserver {\n    listen 80;\n    server_name 192.168.1.189;\n    location ^~ ricky {\n\t    return 200 \"精准\";\n    }\n\n    location / {\n\t    return 200 \"通用\";\n    }\n}\n\n```\n重载配置并访问：`curl http://192.168.1.189:80/ricky`，输出`精准`；访问不在/ricky规则内的就打出`通用`，如`curl http://192.168.1.189:80/ris`\n\n#### nginx不需要后端就可以返回远程用户ip的配置\n配置:\n```\nlocation /ip {\n    default_type text/plain;\n    return 200 $remote_addr;\n}\n```\n访问\n```\n$ curl https://example.com/ip\n192.168.1.187\n```\n\n返回json格式：\n```\n$ curl -s https://example.com/json_ip | jq\n{\n    \"ip\": \"192.168.1.187\"\n}\n```\n### nginx.conf文件详解\n```\n# 定义nginx运行的用户和用户组\nuser www www;\n\n# nginx work进程数，一般与cpu核数一致。\nworker_processes 8;\n\n# 错误日志类型定义\nerror_log /var/log/nginx/error.log info;\n\n# 进程文件\npid /var/run/nginx.pid;\n\n# 1个nginx进程最多能打开的文件描述符数，建议与ulimit -n(系统最大能打开的文件描述符数)一致\nwork_rlimit_nofile 65535;\n\n# \nevents {\n  # 高性能网络io模型\n  use epoll;\n  # 单进程最大连接数\n  work_connections 65535; \n}\n\nhttp {\n  include mime.type; # 文件扩展与文件类型名映射表\n  default_type application/ocetet-stream; # 默认文件类型\n  # charset utf-8; # 默认编码\n  client_header_buffer_size 32; # 上传文件大小限制\n  # 所谓请求报文包含了请求头(如 User-Agent： 或 Accept：)+请求行(GET /index.html HTTP/1.1)+请求body\n  large_client_header_buffers 4 64k; # 设定请求行+请求头不能超过4x64k\n  client_max_body_size 8m;  # 设置body(或上传文件)最大值8m\n  sendfile on; # 开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。\n\n  autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。\n  keepalive_timeout 120; # 长连接超时时间，单位s\n\n  #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度\n  fastcgi_connect_timeout 300;\n  fastcgi_send_timeout 300;\n  fastcgi_read_timeout 300;\n  fastcgi_buffer_size 64k;\n  fastcgi_buffers 4 64k;\n  fastcgi_busy_buffers_size 128k;\n  fastcgi_temp_file_write_size 128k;\n\n  #gzip模块设置\n  gzip on;        #开启gzip压缩输出\n  gzip_min_length 1k; #最小压缩文件大小\n  gzip_buffers 4 16k; #压缩缓冲区\n  gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）开始压缩的http协议版本(可以不设置,目前几乎全是1.1协议)\n  gzip_comp_level 2;   #推荐6压缩级别(级别越高,压的越小,越浪费CPU计算资源)\n  gzip_types text/plain application/x-javascript text/css application/xml;\n  #压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。\n  gzip_vary on;   # 是否传输gzip压缩标志\n  #limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用\n\n  upstream blog.ha97.com {\n    #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。\n    server 192.168.80.121:80 weight=3;\n    server 192.168.80.122:80 weight=2;\n    server 192.168.80.123:80 weight=3;\n  }\n\n  #虚拟主机的配置\n  server\n  {\n      #监听端口\n      listen 80;\n      #域名可以有多个，用空格隔开\n      server_name www.ha97.com ha97.com;\n      index index.html index.htm index.php;\n      root /data/www/ha97;\n      location ~ .*\\.(php|php5)?$\n      {\n      fastcgi_pass 127.0.0.1:9000;\n      fastcgi_index index.php;\n      include fastcgi.conf;\n      }\n      #图片缓存时间设置\n      location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$\n      {\n      expires 10d;\n      }\n      #JS和CSS缓存时间设置\n      location ~ .*\\.(js|css)?$\n      {\n      expires 1h;\n      }\n      #日志格式设定\n      log_format access '$remote_addr - $remote_user [$time_local] \"$request\" '\n      '$status $body_bytes_sent \"$http_referer\" '\n      '\"$http_user_agent\" $http_x_forwarded_for';\n      #定义本虚拟主机的访问日志\n      access_log /var/log/nginx/ha97access.log access;\n\n      #对 \"/\" 启用反向代理\n      location / {\n      proxy_pass http://127.0.0.1:88;\n      proxy_redirect off;\n      proxy_set_header X-Real-IP $remote_addr;\n      #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      #以下是一些反向代理的配置，可选。\n      proxy_set_header Host $host;\n      client_max_body_size 10m; #允许客户端请求的最大单文件字节数\n      client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，\n      proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)\n      proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)\n      proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)\n      proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n      proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置\n      proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）\n      proxy_temp_file_write_size 64k;\n      #设定缓存文件夹大小，大于这个值，将从upstream服务器传\n      }\n\n      #设定查看Nginx状态的地址\n      location /NginxStatus {\n      stub_status on;\n      access_log on;\n      auth_basic \"NginxStatus\";\n      auth_basic_user_file conf/htpasswd;\n      #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。\n      }\n\n      #本地动静分离反向代理配置\n      #所有jsp的页面均交由tomcat或resin处理\n      location ~ .(jsp|jspx|do)?$ {\n      proxy_set_header Host $host;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_pass http://127.0.0.1:8080;\n      }\n      #所有静态文件由nginx直接读取不经过tomcat或resin\n      location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$\n      { expires 15d; }\n      location ~ .*.(js|css)?$\n      { expires 1h; }\n  }\n\n}\n\n\n```\n### 常用nginx配置demo\n\n```\nuser  nginx nginx;\nworker_processes  1;\n\nerror_log  /var/log/nginx/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\npid        /var/run/nginx/nginx.pid;\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #隐藏Nginx版本信息，禁止网站目录浏览\n    server_tokens off;\n    autoindex off;\n    #当FastCGI后端服务器处理请求给出http响应码为4xx和5xx时，就转发给nginx\n    fastcgi_intercept_errors on;\n\n    #关于fastcgi的配置\n    fastcgi_connect_timeout 300;    \n    fastcgi_send_timeout 300;    \n    fastcgi_read_timeout 300;    \n    fastcgi_buffer_size 64k;    \n    fastcgi_buffers 4 64k;    \n    fastcgi_busy_buffers_size 128k;    \n    fastcgi_temp_file_write_size 128k;\n\n    #支持gzip压缩\n    gzip on;\n    gzip_min_length 1k;\n    gzip_buffers 16 64k;\n    gzip_http_version 1.1;\n    gzip_comp_level 6;\n    gzip_types text/plain application/x-javascript text/css application/javascript text/javascript image/jpeg image/gif image/png application/xml application/json;\n    gzip_vary on;\n    gzip_disable \"MSIE [1-6].(?!.*SV1)\";\n\n    #\n    # 重定向所有带www请求到非www的请求\n    #\n    server {\n        listen               *:80;\n        listen               *:443 ssl spdy;\n        server_name www.typecodes.com;\n        # ssl证书配置见文章 https://typecodes.com/web/lnmppositivessl.html\n        ssl_certificate /etc/nginx/ssl/typecodes.crt;\n        # ssl密钥文件见文章 https://typecodes.com/web/lnmppositivessl.html\n        ssl_certificate_key /etc/nginx/ssl/typecodes.key;\n        # 不产生日志\n        access_log off;\n\n        # 访问favicon.ico和robots.txt不跳转（把这两个文件存放在上级目录html中）\n        location ~* ^/(favicon.ico|robots.txt)$ {\n            root html;\n            expires max;\n            log_not_found off;\n            break;\n        }\n\n        location / {\n            return 301 https://typecodes.com$request_uri;\n        }\n    }\n\n    #\n    # 将所有http请求重定向到https\n    #\n    server {\n        listen               *:80;\n        server_name          typecodes.com;\n        # 不产生日志\n        access_log off;\n\n        # 访问favicon.ico和robots.txt不跳转（把这两个文件存放在上级目录html中）\n        location ~* ^/(favicon.ico|robots.txt)$ {\n            root html;\n            expires max;\n            log_not_found off;\n            break;\n        }\n\n        location / {\n            return 301 https://typecodes.com$request_uri;\n        }\n    }\n\n    #\n    # HTTPS server\n    #\n    server {\n        listen               *:443 ssl spdy;\n        server_name typecodes.com;\n\n        # ssl证书配置见文章 https://typecodes.com/web/lnmppositivessl.html\n        ssl_certificate /etc/nginx/ssl/typecodes.crt;\n        # ssl密钥文件见文章 https://typecodes.com/web/lnmppositivessl.html\n        ssl_certificate_key /etc/nginx/ssl/typecodes.key;\n        ssl_session_cache shared:SSL:20m;\n        ssl_session_timeout 10m;\n        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA:!CAMELLIA;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #enables TLSv1, but not SSLv2, SSLv3 which is weak and should no longer be used.\n        ssl_prefer_server_ciphers on;\n        # 开启spdy功能\n        add_header Alternate-Protocol 443:npn-spdy/3.1;\n        # 严格的https访问\n        add_header Strict-Transport-Security \"max-age=31536000; includeSubdomains;\";\n\n        #设置网站根目录\n        root   /usr/share/nginx/html/typecodes;\n        index  index.php index.html;\n\n        charset utf-8;\n\n        #access_log  /var/log/nginx/log/host.access.log  main;\n\n        #设置css/javascript/图片等静态资源的缓存时间\n        location ~ .*\\.(css|js|ico|png|gif|jpg|json|mp3|mp4|flv|swf)(.*) {\n            expires 60d;\n        }\n\n        # include /etc/nginx/default.d/*.conf;\n        # 设置typecho博客的config文章不被访问，保证安全\n        location = /config.inc.php{\n            deny  all;\n        }\n\n        # keep the uploads directory safe by excluding php, php5, html file accessing. Applying to wordpress and typecho.\n        # location ~ .*/uploads/.*\\.(php|php5|html)$ {\n        #   deny  all;\n        # }\n\n        # 设置wordpress和typecho博客中，插件目录无法直接访问php或者html文件\n        location ~ .*/plugins/.*\\.(php|php5|html)$ {\n            deny  all;\n        }\n\n        #Rewrite的伪静态(针对wordpress/typecho)，url地址去掉index.php\n        location / {\n            if (-f $request_filename/index.html){\n                rewrite (.*) $1/index.html break;\n            }\n            if (-f $request_filename/index.php){\n                rewrite (.*) $1/index.php;\n            }\n        if (!-f $request_filename){\n                rewrite (.*) /index.php;\n            }\n        }\n\n        #访问favicon.ico时不产生日志\n        location = /favicon.ico {\n            access_log off;\n        }\n\n        #设置40系列错误的应答文件为40x.html\n        error_page  400 401 402 403 404  /40x.html;\n        location = /40x.html {\n                root   html;\n                index  index.html index.htm;\n        }\n\n        #设置50系列错误的应答文件为50x.html\n        #\n        error_page   500 501 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n            index  index.html index.htm;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # 设置Nginx和php通信机制为tcp的socket模式，而不是直接监听9000端口\n        location  ~ .*\\.php(\\/.*)*$ {\n             fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n             #fastcgi_pass   127.0.0.1:9000;\n             # the better form of fastcgi_pass than before\n             fastcgi_pass   unix:/var/run/php-fpm/php-fpm.sock;\n             fastcgi_index  index.php;\n             fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n             include        fastcgi_params;\n        }\n\n        # deny access to .htaccess files, if Apache's document root\n        # concurs with nginx's one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n}\n```\n","slug":"第六期：Nginx","published":1,"updated":"2024-03-06T06:55:18.390Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt7d00159kln0dn3dx9m","content":"<h3 id=\"服务管理\"><a href=\"#服务管理\" class=\"headerlink\" title=\"服务管理\"></a>服务管理</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx # 启动</span><br><span class=\"line\">nginx -t # 测试配置</span><br><span class=\"line\">nginx -s reload # 重载配置</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      88;</span><br><span class=\"line\">    server_name localhost;</span><br><span class=\"line\">    charset     utf-8;</span><br><span class=\"line\">    index       index.html index.htm;</span><br><span class=\"line\">    access_log  logs/access.log;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        return 200 &quot;test conf&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"重定向（地址会变）\"><a href=\"#重定向（地址会变）\" class=\"headerlink\" title=\"重定向（地址会变）\"></a>重定向（地址会变）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">    return 302 http://localhost:89/$request_uri;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># redirect.conf</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      89;</span><br><span class=\"line\">    server_name localhost;</span><br><span class=\"line\">    charset     utf-8;</span><br><span class=\"line\">    index       index.html index.htm;</span><br><span class=\"line\">    access_log  logs/access.log;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        return 200 &quot;after redirect uri&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">进行测试：curl -L localhost:88</span><br><span class=\"line\">返回：after redirect uri</span><br></pre></td></tr></table></figure>\n<h3 id=\"匹配以-x2F-api-x2F-开头的uri\"><a href=\"#匹配以-x2F-api-x2F-开头的uri\" class=\"headerlink\" title=\"匹配以&#x2F;api&#x2F;开头的uri\"></a>匹配以&#x2F;api&#x2F;开头的uri</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ^/api/ &#123;</span><br><span class=\"line\">  proxy_pass http://loclhost:8090;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"一、centos7安装Nginx\"><a href=\"#一、centos7安装Nginx\" class=\"headerlink\" title=\"一、centos7安装Nginx\"></a>一、centos7安装Nginx</h4><h5 id=\"源码安装\"><a href=\"#源码安装\" class=\"headerlink\" title=\"源码安装\"></a>源码安装</h5><ul>\n<li><a href=\"http://nginx.org/download/\">所有nginx版本</a></li>\n</ul>\n<p>wget下载tar.gz包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://nginx.org/download/nginx-1.20.1.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"># 解压</span><br><span class=\"line\">tar xzf nginx-1.20.1.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>编译</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd nginx-1.20.1 &amp;&amp; ./configure</span><br></pre></td></tr></table></figure>\n<p>注意：<code>安装报错误的话比如：&quot;C compiler cc is not found&quot;，这个就是缺少编译环境，安装一下就可以了 yum -y install gcc make gcc-c++ openssl-devel</code></p>\n<p>安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li>nignx会被安装到<code>/usr/local/nginx</code>目录下</li>\n</ul>\n<p>nginx测试</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ which nginx</span><br><span class=\"line\">/usr/bin/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">nginx # 启动nginx</span><br><span class=\"line\">ps aux|grep nginx # 查看nginx进程</span><br><span class=\"line\">nginx -s stop # 停止nginx</span><br><span class=\"line\"></span><br><span class=\"line\">nginx -v # nginx 版本</span><br><span class=\"line\">nginx -t # 测试配置文件</span><br><span class=\"line\">nginx -s reload # 重载配置</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>防火墙设置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status firewalld # 查看防火墙状态</span><br></pre></td></tr></table></figure>\n\n<p>设置放行端口，编辑<code>/etc/firewalld/zones/public.xml</code>文件，在</zone>前面加:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;zone&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &lt;port port=&quot;30000-30100&quot; protocol=&quot;tcp&quot;/&gt;</span><br><span class=\"line\">  &lt;port port=&quot;80&quot; protocol=&quot;tcp&quot;/&gt;</span><br><span class=\"line\">&lt;/zone&gt;</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li>可以设置端口段或单个端口</li>\n</ul>\n<p>配完文件后重载<code>firewall-cmd --reload</code>，查看被放行的端口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --list-ports </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二、配置文件\"><a href=\"#二、配置文件\" class=\"headerlink\" title=\"二、配置文件\"></a>二、配置文件</h4><p>查看<code>/usr/local/nginx/conf/nginx.conf</code>文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  logs/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #keepalive_timeout  0;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    gzip  on;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    include  vhost/*.conf;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><p><code>worker_processes</code> - work进程数，一般根据cpu核数来设置，可以设为和CPU的数量一样</p>\n</li>\n<li><p><code>worker_connections</code> - 单个work进程可以连的并发连接数，连接数依赖于系统级别的进程可打开文件数，<code>ulimit -n</code>可查看</p>\n<p><code>cat /proc/nginx_work_pid/limits</code> 里面的<code>Max open files</code>也可查询。</p>\n</li>\n<li><p><code>log_format</code> - 设置nginx日志格式</p>\n</li>\n<li><p><code>access_log</code> - 设置文件存储位置和应用的日志格式</p>\n</li>\n<li><p><code>sendfile</code> - 开启文件高效传输模式</p>\n</li>\n<li><p><code>keepalive_timeout</code> - 客户端和nginx之间建立的tcp长连接维持时间</p>\n</li>\n<li><p><code>gzip</code> - 开启gzip模块，文件被压缩传到客户端，优化传输效率，有效节省带宽。</p>\n</li>\n<li><p><code>listen 80</code> - 监听80端口</p>\n</li>\n<li><p><code>root   html;</code> - 相当于<code>root /usr/local/nginx/html</code></p>\n</li>\n<li><p><code>index index.html</code> - 查找<code>/usr/local/nginx/html</code>目录下的index.html文件</p>\n</li>\n<li><p><code>include</code> - 添加配置文件</p>\n</li>\n</ul>\n<p>示例：在vhost下添加配置文件<code>test.conf</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name 192.168.1.189;</span><br><span class=\"line\">    location /ricky/ &#123;</span><br><span class=\"line\">\t    return 200 &quot;im ricky&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ul>\n<li>server_name指定为本机的ip而不是localhost，因为上一目录nginx.conf配置的localhost</li>\n<li>指定访问前缀为&#x2F;ricky&#x2F;</li>\n</ul>\n<p>检查并重载配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<p>访问：curl <a href=\"http://192.168.1.189/ricky/\">http://192.168.1.189:80/ricky/</a><br>注意：</p>\n<ul>\n<li><p>访问的时候<code>192.168.1.189</code> 不能写成localhost，不然匹配规则就跑到nginx.conf里面的server去了</p>\n</li>\n<li><p>ricky后面的<code>/</code>不可以省略；如果想省略，可以把<code>location /ricky/</code>写成<code>location /ricky</code></p>\n<p><code>location /ricky</code>既会匹配到<code>http://192.168.1.189:80/ricky</code>的路由，也会匹配到<code>http://192.168.1.189:80/rickyadsafaf/a</code></p>\n<p>总的来说，nginx先在所有配置文件中匹配端口-&gt;再到server_name-&gt;具体location(location之间又有优先级的区分)</p>\n</li>\n</ul>\n<h4 id=\"三、location优先级\"><a href=\"#三、location优先级\" class=\"headerlink\" title=\"三、location优先级\"></a>三、location优先级</h4><p>优先级高到低</p>\n<ul>\n<li><code>location = /uri</code> - 字符 <code>=</code> 表示精准匹配（精准匹配优先级最高）</li>\n<li><code>location ^~ /uri</code> - 字符 <code>^</code> 表示以&#x2F;test开头的路径，<code>~</code> 表区分大小写；但是 <code>~*</code> 表不区分大小写(带 <code>~*</code> 等修饰符优先级次之)</li>\n<li><code>location /url</code> - 不带修饰符的前缀再次之</li>\n<li><code>location /</code> - 最后是交给<code>/</code>通用匹配。</li>\n</ul>\n<p>示例1：比较精准和带修饰符</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name 192.168.1.189;</span><br><span class=\"line\">    location = /ricky &#123;</span><br><span class=\"line\">\t    return 200 &quot;精准&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ^~ /ricky &#123;</span><br><span class=\"line\">\t    return 200 &quot;修饰符&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>重载配置并访问：<code>curl http://192.168.1.189:80/ricky</code>，输出<code>精准</code></p>\n<p>示例2：比较带修饰符和不带修饰符</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name 192.168.1.189;</span><br><span class=\"line\">    location ^~ ricky &#123;</span><br><span class=\"line\">\t    return 200 &quot;精准&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">\t    return 200 &quot;通用&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>重载配置并访问：<code>curl http://192.168.1.189:80/ricky</code>，输出<code>精准</code>；访问不在&#x2F;ricky规则内的就打出<code>通用</code>，如<code>curl http://192.168.1.189:80/ris</code></p>\n<h4 id=\"nginx不需要后端就可以返回远程用户ip的配置\"><a href=\"#nginx不需要后端就可以返回远程用户ip的配置\" class=\"headerlink\" title=\"nginx不需要后端就可以返回远程用户ip的配置\"></a>nginx不需要后端就可以返回远程用户ip的配置</h4><p>配置:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /ip &#123;</span><br><span class=\"line\">    default_type text/plain;</span><br><span class=\"line\">    return 200 $remote_addr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>访问</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl https://example.com/ip</span><br><span class=\"line\">192.168.1.187</span><br></pre></td></tr></table></figure>\n\n<p>返回json格式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -s https://example.com/json_ip | jq</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;ip&quot;: &quot;192.168.1.187&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"nginx-conf文件详解\"><a href=\"#nginx-conf文件详解\" class=\"headerlink\" title=\"nginx.conf文件详解\"></a>nginx.conf文件详解</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 定义nginx运行的用户和用户组</span><br><span class=\"line\">user www www;</span><br><span class=\"line\"></span><br><span class=\"line\"># nginx work进程数，一般与cpu核数一致。</span><br><span class=\"line\">worker_processes 8;</span><br><span class=\"line\"></span><br><span class=\"line\"># 错误日志类型定义</span><br><span class=\"line\">error_log /var/log/nginx/error.log info;</span><br><span class=\"line\"></span><br><span class=\"line\"># 进程文件</span><br><span class=\"line\">pid /var/run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"># 1个nginx进程最多能打开的文件描述符数，建议与ulimit -n(系统最大能打开的文件描述符数)一致</span><br><span class=\"line\">work_rlimit_nofile 65535;</span><br><span class=\"line\"></span><br><span class=\"line\"># </span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">  # 高性能网络io模型</span><br><span class=\"line\">  use epoll;</span><br><span class=\"line\">  # 单进程最大连接数</span><br><span class=\"line\">  work_connections 65535; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">  include mime.type; # 文件扩展与文件类型名映射表</span><br><span class=\"line\">  default_type application/ocetet-stream; # 默认文件类型</span><br><span class=\"line\">  # charset utf-8; # 默认编码</span><br><span class=\"line\">  client_header_buffer_size 32; # 上传文件大小限制</span><br><span class=\"line\">  # 所谓请求报文包含了请求头(如 User-Agent： 或 Accept：)+请求行(GET /index.html HTTP/1.1)+请求body</span><br><span class=\"line\">  large_client_header_buffers 4 64k; # 设定请求行+请求头不能超过4x64k</span><br><span class=\"line\">  client_max_body_size 8m;  # 设置body(或上传文件)最大值8m</span><br><span class=\"line\">  sendfile on; # 开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span><br><span class=\"line\"></span><br><span class=\"line\">  autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。</span><br><span class=\"line\">  keepalive_timeout 120; # 长连接超时时间，单位s</span><br><span class=\"line\"></span><br><span class=\"line\">  #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度</span><br><span class=\"line\">  fastcgi_connect_timeout 300;</span><br><span class=\"line\">  fastcgi_send_timeout 300;</span><br><span class=\"line\">  fastcgi_read_timeout 300;</span><br><span class=\"line\">  fastcgi_buffer_size 64k;</span><br><span class=\"line\">  fastcgi_buffers 4 64k;</span><br><span class=\"line\">  fastcgi_busy_buffers_size 128k;</span><br><span class=\"line\">  fastcgi_temp_file_write_size 128k;</span><br><span class=\"line\"></span><br><span class=\"line\">  #gzip模块设置</span><br><span class=\"line\">  gzip on;        #开启gzip压缩输出</span><br><span class=\"line\">  gzip_min_length 1k; #最小压缩文件大小</span><br><span class=\"line\">  gzip_buffers 4 16k; #压缩缓冲区</span><br><span class=\"line\">  gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）开始压缩的http协议版本(可以不设置,目前几乎全是1.1协议)</span><br><span class=\"line\">  gzip_comp_level 2;   #推荐6压缩级别(级别越高,压的越小,越浪费CPU计算资源)</span><br><span class=\"line\">  gzip_types text/plain application/x-javascript text/css application/xml;</span><br><span class=\"line\">  #压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span><br><span class=\"line\">  gzip_vary on;   # 是否传输gzip压缩标志</span><br><span class=\"line\">  #limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用</span><br><span class=\"line\"></span><br><span class=\"line\">  upstream blog.ha97.com &#123;</span><br><span class=\"line\">    #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span><br><span class=\"line\">    server 192.168.80.121:80 weight=3;</span><br><span class=\"line\">    server 192.168.80.122:80 weight=2;</span><br><span class=\"line\">    server 192.168.80.123:80 weight=3;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  #虚拟主机的配置</span><br><span class=\"line\">  server</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      #监听端口</span><br><span class=\"line\">      listen 80;</span><br><span class=\"line\">      #域名可以有多个，用空格隔开</span><br><span class=\"line\">      server_name www.ha97.com ha97.com;</span><br><span class=\"line\">      index index.html index.htm index.php;</span><br><span class=\"line\">      root /data/www/ha97;</span><br><span class=\"line\">      location ~ .*\\.(php|php5)?$</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">      fastcgi_pass 127.0.0.1:9000;</span><br><span class=\"line\">      fastcgi_index index.php;</span><br><span class=\"line\">      include fastcgi.conf;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      #图片缓存时间设置</span><br><span class=\"line\">      location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">      expires 10d;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      #JS和CSS缓存时间设置</span><br><span class=\"line\">      location ~ .*\\.(js|css)?$</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">      expires 1h;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      #日志格式设定</span><br><span class=\"line\">      log_format access &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">      &#x27;&quot;$http_user_agent&quot; $http_x_forwarded_for&#x27;;</span><br><span class=\"line\">      #定义本虚拟主机的访问日志</span><br><span class=\"line\">      access_log /var/log/nginx/ha97access.log access;</span><br><span class=\"line\"></span><br><span class=\"line\">      #对 &quot;/&quot; 启用反向代理</span><br><span class=\"line\">      location / &#123;</span><br><span class=\"line\">      proxy_pass http://127.0.0.1:88;</span><br><span class=\"line\">      proxy_redirect off;</span><br><span class=\"line\">      proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">      #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class=\"line\">      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">      #以下是一些反向代理的配置，可选。</span><br><span class=\"line\">      proxy_set_header Host $host;</span><br><span class=\"line\">      client_max_body_size 10m; #允许客户端请求的最大单文件字节数</span><br><span class=\"line\">      client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，</span><br><span class=\"line\">      proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class=\"line\">      proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)</span><br><span class=\"line\">      proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class=\"line\">      proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class=\"line\">      proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置</span><br><span class=\"line\">      proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）</span><br><span class=\"line\">      proxy_temp_file_write_size 64k;</span><br><span class=\"line\">      #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      #设定查看Nginx状态的地址</span><br><span class=\"line\">      location /NginxStatus &#123;</span><br><span class=\"line\">      stub_status on;</span><br><span class=\"line\">      access_log on;</span><br><span class=\"line\">      auth_basic &quot;NginxStatus&quot;;</span><br><span class=\"line\">      auth_basic_user_file conf/htpasswd;</span><br><span class=\"line\">      #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      #本地动静分离反向代理配置</span><br><span class=\"line\">      #所有jsp的页面均交由tomcat或resin处理</span><br><span class=\"line\">      location ~ .(jsp|jspx|do)?$ &#123;</span><br><span class=\"line\">      proxy_set_header Host $host;</span><br><span class=\"line\">      proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">      proxy_pass http://127.0.0.1:8080;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      #所有静态文件由nginx直接读取不经过tomcat或resin</span><br><span class=\"line\">      location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$</span><br><span class=\"line\">      &#123; expires 15d; &#125;</span><br><span class=\"line\">      location ~ .*.(js|css)?$</span><br><span class=\"line\">      &#123; expires 1h; &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"常用nginx配置demo\"><a href=\"#常用nginx配置demo\" class=\"headerlink\" title=\"常用nginx配置demo\"></a>常用nginx配置demo</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user  nginx nginx;</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">error_log  /var/log/nginx/error.log;</span><br><span class=\"line\">#error_log  logs/error.log  notice;</span><br><span class=\"line\">#error_log  logs/error.log  info;</span><br><span class=\"line\"></span><br><span class=\"line\">pid        /var/run/nginx/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #keepalive_timeout  0;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    #隐藏Nginx版本信息，禁止网站目录浏览</span><br><span class=\"line\">    server_tokens off;</span><br><span class=\"line\">    autoindex off;</span><br><span class=\"line\">    #当FastCGI后端服务器处理请求给出http响应码为4xx和5xx时，就转发给nginx</span><br><span class=\"line\">    fastcgi_intercept_errors on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #关于fastcgi的配置</span><br><span class=\"line\">    fastcgi_connect_timeout 300;    </span><br><span class=\"line\">    fastcgi_send_timeout 300;    </span><br><span class=\"line\">    fastcgi_read_timeout 300;    </span><br><span class=\"line\">    fastcgi_buffer_size 64k;    </span><br><span class=\"line\">    fastcgi_buffers 4 64k;    </span><br><span class=\"line\">    fastcgi_busy_buffers_size 128k;    </span><br><span class=\"line\">    fastcgi_temp_file_write_size 128k;</span><br><span class=\"line\"></span><br><span class=\"line\">    #支持gzip压缩</span><br><span class=\"line\">    gzip on;</span><br><span class=\"line\">    gzip_min_length 1k;</span><br><span class=\"line\">    gzip_buffers 16 64k;</span><br><span class=\"line\">    gzip_http_version 1.1;</span><br><span class=\"line\">    gzip_comp_level 6;</span><br><span class=\"line\">    gzip_types text/plain application/x-javascript text/css application/javascript text/javascript image/jpeg image/gif image/png application/xml application/json;</span><br><span class=\"line\">    gzip_vary on;</span><br><span class=\"line\">    gzip_disable &quot;MSIE [1-6].(?!.*SV1)&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    #</span><br><span class=\"line\">    # 重定向所有带www请求到非www的请求</span><br><span class=\"line\">    #</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen               *:80;</span><br><span class=\"line\">        listen               *:443 ssl spdy;</span><br><span class=\"line\">        server_name www.typecodes.com;</span><br><span class=\"line\">        # ssl证书配置见文章 https://typecodes.com/web/lnmppositivessl.html</span><br><span class=\"line\">        ssl_certificate /etc/nginx/ssl/typecodes.crt;</span><br><span class=\"line\">        # ssl密钥文件见文章 https://typecodes.com/web/lnmppositivessl.html</span><br><span class=\"line\">        ssl_certificate_key /etc/nginx/ssl/typecodes.key;</span><br><span class=\"line\">        # 不产生日志</span><br><span class=\"line\">        access_log off;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 访问favicon.ico和robots.txt不跳转（把这两个文件存放在上级目录html中）</span><br><span class=\"line\">        location ~* ^/(favicon.ico|robots.txt)$ &#123;</span><br><span class=\"line\">            root html;</span><br><span class=\"line\">            expires max;</span><br><span class=\"line\">            log_not_found off;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            return 301 https://typecodes.com$request_uri;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    #</span><br><span class=\"line\">    # 将所有http请求重定向到https</span><br><span class=\"line\">    #</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen               *:80;</span><br><span class=\"line\">        server_name          typecodes.com;</span><br><span class=\"line\">        # 不产生日志</span><br><span class=\"line\">        access_log off;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 访问favicon.ico和robots.txt不跳转（把这两个文件存放在上级目录html中）</span><br><span class=\"line\">        location ~* ^/(favicon.ico|robots.txt)$ &#123;</span><br><span class=\"line\">            root html;</span><br><span class=\"line\">            expires max;</span><br><span class=\"line\">            log_not_found off;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            return 301 https://typecodes.com$request_uri;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    #</span><br><span class=\"line\">    # HTTPS server</span><br><span class=\"line\">    #</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen               *:443 ssl spdy;</span><br><span class=\"line\">        server_name typecodes.com;</span><br><span class=\"line\"></span><br><span class=\"line\">        # ssl证书配置见文章 https://typecodes.com/web/lnmppositivessl.html</span><br><span class=\"line\">        ssl_certificate /etc/nginx/ssl/typecodes.crt;</span><br><span class=\"line\">        # ssl密钥文件见文章 https://typecodes.com/web/lnmppositivessl.html</span><br><span class=\"line\">        ssl_certificate_key /etc/nginx/ssl/typecodes.key;</span><br><span class=\"line\">        ssl_session_cache shared:SSL:20m;</span><br><span class=\"line\">        ssl_session_timeout 10m;</span><br><span class=\"line\">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA:!CAMELLIA;</span><br><span class=\"line\">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #enables TLSv1, but not SSLv2, SSLv3 which is weak and should no longer be used.</span><br><span class=\"line\">        ssl_prefer_server_ciphers on;</span><br><span class=\"line\">        # 开启spdy功能</span><br><span class=\"line\">        add_header Alternate-Protocol 443:npn-spdy/3.1;</span><br><span class=\"line\">        # 严格的https访问</span><br><span class=\"line\">        add_header Strict-Transport-Security &quot;max-age=31536000; includeSubdomains;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">        #设置网站根目录</span><br><span class=\"line\">        root   /usr/share/nginx/html/typecodes;</span><br><span class=\"line\">        index  index.php index.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        charset utf-8;</span><br><span class=\"line\"></span><br><span class=\"line\">        #access_log  /var/log/nginx/log/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        #设置css/javascript/图片等静态资源的缓存时间</span><br><span class=\"line\">        location ~ .*\\.(css|js|ico|png|gif|jpg|json|mp3|mp4|flv|swf)(.*) &#123;</span><br><span class=\"line\">            expires 60d;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\">        # 设置typecho博客的config文章不被访问，保证安全</span><br><span class=\"line\">        location = /config.inc.php&#123;</span><br><span class=\"line\">            deny  all;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # keep the uploads directory safe by excluding php, php5, html file accessing. Applying to wordpress and typecho.</span><br><span class=\"line\">        # location ~ .*/uploads/.*\\.(php|php5|html)$ &#123;</span><br><span class=\"line\">        #   deny  all;</span><br><span class=\"line\">        # &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 设置wordpress和typecho博客中，插件目录无法直接访问php或者html文件</span><br><span class=\"line\">        location ~ .*/plugins/.*\\.(php|php5|html)$ &#123;</span><br><span class=\"line\">            deny  all;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #Rewrite的伪静态(针对wordpress/typecho)，url地址去掉index.php</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            if (-f $request_filename/index.html)&#123;</span><br><span class=\"line\">                rewrite (.*) $1/index.html break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (-f $request_filename/index.php)&#123;</span><br><span class=\"line\">                rewrite (.*) $1/index.php;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        if (!-f $request_filename)&#123;</span><br><span class=\"line\">                rewrite (.*) /index.php;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #访问favicon.ico时不产生日志</span><br><span class=\"line\">        location = /favicon.ico &#123;</span><br><span class=\"line\">            access_log off;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #设置40系列错误的应答文件为40x.html</span><br><span class=\"line\">        error_page  400 401 402 403 404  /40x.html;</span><br><span class=\"line\">        location = /40x.html &#123;</span><br><span class=\"line\">                root   html;</span><br><span class=\"line\">                index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #设置50系列错误的应答文件为50x.html</span><br><span class=\"line\">        #</span><br><span class=\"line\">        error_page   500 501 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    proxy_pass   http://127.0.0.1;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 设置Nginx和php通信机制为tcp的socket模式，而不是直接监听9000端口</span><br><span class=\"line\">        location  ~ .*\\.php(\\/.*)*$ &#123;</span><br><span class=\"line\">             fastcgi_split_path_info ^(.+\\.php)(/.+)$;</span><br><span class=\"line\">             #fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">             # the better form of fastcgi_pass than before</span><br><span class=\"line\">             fastcgi_pass   unix:/var/run/php-fpm/php-fpm.sock;</span><br><span class=\"line\">             fastcgi_index  index.php;</span><br><span class=\"line\">             fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class=\"line\">             include        fastcgi_params;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class=\"line\">        # concurs with nginx&#x27;s one</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ /\\.ht &#123;</span><br><span class=\"line\">        #    deny  all;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"服务管理\"><a href=\"#服务管理\" class=\"headerlink\" title=\"服务管理\"></a>服务管理</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx # 启动</span><br><span class=\"line\">nginx -t # 测试配置</span><br><span class=\"line\">nginx -s reload # 重载配置</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      88;</span><br><span class=\"line\">    server_name localhost;</span><br><span class=\"line\">    charset     utf-8;</span><br><span class=\"line\">    index       index.html index.htm;</span><br><span class=\"line\">    access_log  logs/access.log;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        return 200 &quot;test conf&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"重定向（地址会变）\"><a href=\"#重定向（地址会变）\" class=\"headerlink\" title=\"重定向（地址会变）\"></a>重定向（地址会变）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">    return 302 http://localhost:89/$request_uri;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># redirect.conf</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      89;</span><br><span class=\"line\">    server_name localhost;</span><br><span class=\"line\">    charset     utf-8;</span><br><span class=\"line\">    index       index.html index.htm;</span><br><span class=\"line\">    access_log  logs/access.log;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        return 200 &quot;after redirect uri&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">进行测试：curl -L localhost:88</span><br><span class=\"line\">返回：after redirect uri</span><br></pre></td></tr></table></figure>\n<h3 id=\"匹配以-x2F-api-x2F-开头的uri\"><a href=\"#匹配以-x2F-api-x2F-开头的uri\" class=\"headerlink\" title=\"匹配以&#x2F;api&#x2F;开头的uri\"></a>匹配以&#x2F;api&#x2F;开头的uri</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ^/api/ &#123;</span><br><span class=\"line\">  proxy_pass http://loclhost:8090;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"一、centos7安装Nginx\"><a href=\"#一、centos7安装Nginx\" class=\"headerlink\" title=\"一、centos7安装Nginx\"></a>一、centos7安装Nginx</h4><h5 id=\"源码安装\"><a href=\"#源码安装\" class=\"headerlink\" title=\"源码安装\"></a>源码安装</h5><ul>\n<li><a href=\"http://nginx.org/download/\">所有nginx版本</a></li>\n</ul>\n<p>wget下载tar.gz包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://nginx.org/download/nginx-1.20.1.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"># 解压</span><br><span class=\"line\">tar xzf nginx-1.20.1.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>编译</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd nginx-1.20.1 &amp;&amp; ./configure</span><br></pre></td></tr></table></figure>\n<p>注意：<code>安装报错误的话比如：&quot;C compiler cc is not found&quot;，这个就是缺少编译环境，安装一下就可以了 yum -y install gcc make gcc-c++ openssl-devel</code></p>\n<p>安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li>nignx会被安装到<code>/usr/local/nginx</code>目录下</li>\n</ul>\n<p>nginx测试</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ which nginx</span><br><span class=\"line\">/usr/bin/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">nginx # 启动nginx</span><br><span class=\"line\">ps aux|grep nginx # 查看nginx进程</span><br><span class=\"line\">nginx -s stop # 停止nginx</span><br><span class=\"line\"></span><br><span class=\"line\">nginx -v # nginx 版本</span><br><span class=\"line\">nginx -t # 测试配置文件</span><br><span class=\"line\">nginx -s reload # 重载配置</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>防火墙设置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status firewalld # 查看防火墙状态</span><br></pre></td></tr></table></figure>\n\n<p>设置放行端口，编辑<code>/etc/firewalld/zones/public.xml</code>文件，在</zone>前面加:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;zone&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &lt;port port=&quot;30000-30100&quot; protocol=&quot;tcp&quot;/&gt;</span><br><span class=\"line\">  &lt;port port=&quot;80&quot; protocol=&quot;tcp&quot;/&gt;</span><br><span class=\"line\">&lt;/zone&gt;</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li>可以设置端口段或单个端口</li>\n</ul>\n<p>配完文件后重载<code>firewall-cmd --reload</code>，查看被放行的端口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --list-ports </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二、配置文件\"><a href=\"#二、配置文件\" class=\"headerlink\" title=\"二、配置文件\"></a>二、配置文件</h4><p>查看<code>/usr/local/nginx/conf/nginx.conf</code>文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  logs/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #keepalive_timeout  0;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    gzip  on;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    include  vhost/*.conf;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><p><code>worker_processes</code> - work进程数，一般根据cpu核数来设置，可以设为和CPU的数量一样</p>\n</li>\n<li><p><code>worker_connections</code> - 单个work进程可以连的并发连接数，连接数依赖于系统级别的进程可打开文件数，<code>ulimit -n</code>可查看</p>\n<p><code>cat /proc/nginx_work_pid/limits</code> 里面的<code>Max open files</code>也可查询。</p>\n</li>\n<li><p><code>log_format</code> - 设置nginx日志格式</p>\n</li>\n<li><p><code>access_log</code> - 设置文件存储位置和应用的日志格式</p>\n</li>\n<li><p><code>sendfile</code> - 开启文件高效传输模式</p>\n</li>\n<li><p><code>keepalive_timeout</code> - 客户端和nginx之间建立的tcp长连接维持时间</p>\n</li>\n<li><p><code>gzip</code> - 开启gzip模块，文件被压缩传到客户端，优化传输效率，有效节省带宽。</p>\n</li>\n<li><p><code>listen 80</code> - 监听80端口</p>\n</li>\n<li><p><code>root   html;</code> - 相当于<code>root /usr/local/nginx/html</code></p>\n</li>\n<li><p><code>index index.html</code> - 查找<code>/usr/local/nginx/html</code>目录下的index.html文件</p>\n</li>\n<li><p><code>include</code> - 添加配置文件</p>\n</li>\n</ul>\n<p>示例：在vhost下添加配置文件<code>test.conf</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name 192.168.1.189;</span><br><span class=\"line\">    location /ricky/ &#123;</span><br><span class=\"line\">\t    return 200 &quot;im ricky&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ul>\n<li>server_name指定为本机的ip而不是localhost，因为上一目录nginx.conf配置的localhost</li>\n<li>指定访问前缀为&#x2F;ricky&#x2F;</li>\n</ul>\n<p>检查并重载配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<p>访问：curl <a href=\"http://192.168.1.189/ricky/\">http://192.168.1.189:80/ricky/</a><br>注意：</p>\n<ul>\n<li><p>访问的时候<code>192.168.1.189</code> 不能写成localhost，不然匹配规则就跑到nginx.conf里面的server去了</p>\n</li>\n<li><p>ricky后面的<code>/</code>不可以省略；如果想省略，可以把<code>location /ricky/</code>写成<code>location /ricky</code></p>\n<p><code>location /ricky</code>既会匹配到<code>http://192.168.1.189:80/ricky</code>的路由，也会匹配到<code>http://192.168.1.189:80/rickyadsafaf/a</code></p>\n<p>总的来说，nginx先在所有配置文件中匹配端口-&gt;再到server_name-&gt;具体location(location之间又有优先级的区分)</p>\n</li>\n</ul>\n<h4 id=\"三、location优先级\"><a href=\"#三、location优先级\" class=\"headerlink\" title=\"三、location优先级\"></a>三、location优先级</h4><p>优先级高到低</p>\n<ul>\n<li><code>location = /uri</code> - 字符 <code>=</code> 表示精准匹配（精准匹配优先级最高）</li>\n<li><code>location ^~ /uri</code> - 字符 <code>^</code> 表示以&#x2F;test开头的路径，<code>~</code> 表区分大小写；但是 <code>~*</code> 表不区分大小写(带 <code>~*</code> 等修饰符优先级次之)</li>\n<li><code>location /url</code> - 不带修饰符的前缀再次之</li>\n<li><code>location /</code> - 最后是交给<code>/</code>通用匹配。</li>\n</ul>\n<p>示例1：比较精准和带修饰符</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name 192.168.1.189;</span><br><span class=\"line\">    location = /ricky &#123;</span><br><span class=\"line\">\t    return 200 &quot;精准&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ^~ /ricky &#123;</span><br><span class=\"line\">\t    return 200 &quot;修饰符&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>重载配置并访问：<code>curl http://192.168.1.189:80/ricky</code>，输出<code>精准</code></p>\n<p>示例2：比较带修饰符和不带修饰符</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name 192.168.1.189;</span><br><span class=\"line\">    location ^~ ricky &#123;</span><br><span class=\"line\">\t    return 200 &quot;精准&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">\t    return 200 &quot;通用&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>重载配置并访问：<code>curl http://192.168.1.189:80/ricky</code>，输出<code>精准</code>；访问不在&#x2F;ricky规则内的就打出<code>通用</code>，如<code>curl http://192.168.1.189:80/ris</code></p>\n<h4 id=\"nginx不需要后端就可以返回远程用户ip的配置\"><a href=\"#nginx不需要后端就可以返回远程用户ip的配置\" class=\"headerlink\" title=\"nginx不需要后端就可以返回远程用户ip的配置\"></a>nginx不需要后端就可以返回远程用户ip的配置</h4><p>配置:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /ip &#123;</span><br><span class=\"line\">    default_type text/plain;</span><br><span class=\"line\">    return 200 $remote_addr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>访问</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl https://example.com/ip</span><br><span class=\"line\">192.168.1.187</span><br></pre></td></tr></table></figure>\n\n<p>返回json格式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -s https://example.com/json_ip | jq</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;ip&quot;: &quot;192.168.1.187&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"nginx-conf文件详解\"><a href=\"#nginx-conf文件详解\" class=\"headerlink\" title=\"nginx.conf文件详解\"></a>nginx.conf文件详解</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 定义nginx运行的用户和用户组</span><br><span class=\"line\">user www www;</span><br><span class=\"line\"></span><br><span class=\"line\"># nginx work进程数，一般与cpu核数一致。</span><br><span class=\"line\">worker_processes 8;</span><br><span class=\"line\"></span><br><span class=\"line\"># 错误日志类型定义</span><br><span class=\"line\">error_log /var/log/nginx/error.log info;</span><br><span class=\"line\"></span><br><span class=\"line\"># 进程文件</span><br><span class=\"line\">pid /var/run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"># 1个nginx进程最多能打开的文件描述符数，建议与ulimit -n(系统最大能打开的文件描述符数)一致</span><br><span class=\"line\">work_rlimit_nofile 65535;</span><br><span class=\"line\"></span><br><span class=\"line\"># </span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">  # 高性能网络io模型</span><br><span class=\"line\">  use epoll;</span><br><span class=\"line\">  # 单进程最大连接数</span><br><span class=\"line\">  work_connections 65535; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">  include mime.type; # 文件扩展与文件类型名映射表</span><br><span class=\"line\">  default_type application/ocetet-stream; # 默认文件类型</span><br><span class=\"line\">  # charset utf-8; # 默认编码</span><br><span class=\"line\">  client_header_buffer_size 32; # 上传文件大小限制</span><br><span class=\"line\">  # 所谓请求报文包含了请求头(如 User-Agent： 或 Accept：)+请求行(GET /index.html HTTP/1.1)+请求body</span><br><span class=\"line\">  large_client_header_buffers 4 64k; # 设定请求行+请求头不能超过4x64k</span><br><span class=\"line\">  client_max_body_size 8m;  # 设置body(或上传文件)最大值8m</span><br><span class=\"line\">  sendfile on; # 开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span><br><span class=\"line\"></span><br><span class=\"line\">  autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。</span><br><span class=\"line\">  keepalive_timeout 120; # 长连接超时时间，单位s</span><br><span class=\"line\"></span><br><span class=\"line\">  #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度</span><br><span class=\"line\">  fastcgi_connect_timeout 300;</span><br><span class=\"line\">  fastcgi_send_timeout 300;</span><br><span class=\"line\">  fastcgi_read_timeout 300;</span><br><span class=\"line\">  fastcgi_buffer_size 64k;</span><br><span class=\"line\">  fastcgi_buffers 4 64k;</span><br><span class=\"line\">  fastcgi_busy_buffers_size 128k;</span><br><span class=\"line\">  fastcgi_temp_file_write_size 128k;</span><br><span class=\"line\"></span><br><span class=\"line\">  #gzip模块设置</span><br><span class=\"line\">  gzip on;        #开启gzip压缩输出</span><br><span class=\"line\">  gzip_min_length 1k; #最小压缩文件大小</span><br><span class=\"line\">  gzip_buffers 4 16k; #压缩缓冲区</span><br><span class=\"line\">  gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）开始压缩的http协议版本(可以不设置,目前几乎全是1.1协议)</span><br><span class=\"line\">  gzip_comp_level 2;   #推荐6压缩级别(级别越高,压的越小,越浪费CPU计算资源)</span><br><span class=\"line\">  gzip_types text/plain application/x-javascript text/css application/xml;</span><br><span class=\"line\">  #压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span><br><span class=\"line\">  gzip_vary on;   # 是否传输gzip压缩标志</span><br><span class=\"line\">  #limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用</span><br><span class=\"line\"></span><br><span class=\"line\">  upstream blog.ha97.com &#123;</span><br><span class=\"line\">    #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span><br><span class=\"line\">    server 192.168.80.121:80 weight=3;</span><br><span class=\"line\">    server 192.168.80.122:80 weight=2;</span><br><span class=\"line\">    server 192.168.80.123:80 weight=3;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  #虚拟主机的配置</span><br><span class=\"line\">  server</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      #监听端口</span><br><span class=\"line\">      listen 80;</span><br><span class=\"line\">      #域名可以有多个，用空格隔开</span><br><span class=\"line\">      server_name www.ha97.com ha97.com;</span><br><span class=\"line\">      index index.html index.htm index.php;</span><br><span class=\"line\">      root /data/www/ha97;</span><br><span class=\"line\">      location ~ .*\\.(php|php5)?$</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">      fastcgi_pass 127.0.0.1:9000;</span><br><span class=\"line\">      fastcgi_index index.php;</span><br><span class=\"line\">      include fastcgi.conf;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      #图片缓存时间设置</span><br><span class=\"line\">      location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">      expires 10d;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      #JS和CSS缓存时间设置</span><br><span class=\"line\">      location ~ .*\\.(js|css)?$</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">      expires 1h;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      #日志格式设定</span><br><span class=\"line\">      log_format access &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">      &#x27;&quot;$http_user_agent&quot; $http_x_forwarded_for&#x27;;</span><br><span class=\"line\">      #定义本虚拟主机的访问日志</span><br><span class=\"line\">      access_log /var/log/nginx/ha97access.log access;</span><br><span class=\"line\"></span><br><span class=\"line\">      #对 &quot;/&quot; 启用反向代理</span><br><span class=\"line\">      location / &#123;</span><br><span class=\"line\">      proxy_pass http://127.0.0.1:88;</span><br><span class=\"line\">      proxy_redirect off;</span><br><span class=\"line\">      proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">      #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class=\"line\">      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">      #以下是一些反向代理的配置，可选。</span><br><span class=\"line\">      proxy_set_header Host $host;</span><br><span class=\"line\">      client_max_body_size 10m; #允许客户端请求的最大单文件字节数</span><br><span class=\"line\">      client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，</span><br><span class=\"line\">      proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class=\"line\">      proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)</span><br><span class=\"line\">      proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class=\"line\">      proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class=\"line\">      proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置</span><br><span class=\"line\">      proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）</span><br><span class=\"line\">      proxy_temp_file_write_size 64k;</span><br><span class=\"line\">      #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      #设定查看Nginx状态的地址</span><br><span class=\"line\">      location /NginxStatus &#123;</span><br><span class=\"line\">      stub_status on;</span><br><span class=\"line\">      access_log on;</span><br><span class=\"line\">      auth_basic &quot;NginxStatus&quot;;</span><br><span class=\"line\">      auth_basic_user_file conf/htpasswd;</span><br><span class=\"line\">      #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      #本地动静分离反向代理配置</span><br><span class=\"line\">      #所有jsp的页面均交由tomcat或resin处理</span><br><span class=\"line\">      location ~ .(jsp|jspx|do)?$ &#123;</span><br><span class=\"line\">      proxy_set_header Host $host;</span><br><span class=\"line\">      proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">      proxy_pass http://127.0.0.1:8080;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      #所有静态文件由nginx直接读取不经过tomcat或resin</span><br><span class=\"line\">      location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$</span><br><span class=\"line\">      &#123; expires 15d; &#125;</span><br><span class=\"line\">      location ~ .*.(js|css)?$</span><br><span class=\"line\">      &#123; expires 1h; &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"常用nginx配置demo\"><a href=\"#常用nginx配置demo\" class=\"headerlink\" title=\"常用nginx配置demo\"></a>常用nginx配置demo</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user  nginx nginx;</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">error_log  /var/log/nginx/error.log;</span><br><span class=\"line\">#error_log  logs/error.log  notice;</span><br><span class=\"line\">#error_log  logs/error.log  info;</span><br><span class=\"line\"></span><br><span class=\"line\">pid        /var/run/nginx/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #keepalive_timeout  0;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    #隐藏Nginx版本信息，禁止网站目录浏览</span><br><span class=\"line\">    server_tokens off;</span><br><span class=\"line\">    autoindex off;</span><br><span class=\"line\">    #当FastCGI后端服务器处理请求给出http响应码为4xx和5xx时，就转发给nginx</span><br><span class=\"line\">    fastcgi_intercept_errors on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #关于fastcgi的配置</span><br><span class=\"line\">    fastcgi_connect_timeout 300;    </span><br><span class=\"line\">    fastcgi_send_timeout 300;    </span><br><span class=\"line\">    fastcgi_read_timeout 300;    </span><br><span class=\"line\">    fastcgi_buffer_size 64k;    </span><br><span class=\"line\">    fastcgi_buffers 4 64k;    </span><br><span class=\"line\">    fastcgi_busy_buffers_size 128k;    </span><br><span class=\"line\">    fastcgi_temp_file_write_size 128k;</span><br><span class=\"line\"></span><br><span class=\"line\">    #支持gzip压缩</span><br><span class=\"line\">    gzip on;</span><br><span class=\"line\">    gzip_min_length 1k;</span><br><span class=\"line\">    gzip_buffers 16 64k;</span><br><span class=\"line\">    gzip_http_version 1.1;</span><br><span class=\"line\">    gzip_comp_level 6;</span><br><span class=\"line\">    gzip_types text/plain application/x-javascript text/css application/javascript text/javascript image/jpeg image/gif image/png application/xml application/json;</span><br><span class=\"line\">    gzip_vary on;</span><br><span class=\"line\">    gzip_disable &quot;MSIE [1-6].(?!.*SV1)&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    #</span><br><span class=\"line\">    # 重定向所有带www请求到非www的请求</span><br><span class=\"line\">    #</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen               *:80;</span><br><span class=\"line\">        listen               *:443 ssl spdy;</span><br><span class=\"line\">        server_name www.typecodes.com;</span><br><span class=\"line\">        # ssl证书配置见文章 https://typecodes.com/web/lnmppositivessl.html</span><br><span class=\"line\">        ssl_certificate /etc/nginx/ssl/typecodes.crt;</span><br><span class=\"line\">        # ssl密钥文件见文章 https://typecodes.com/web/lnmppositivessl.html</span><br><span class=\"line\">        ssl_certificate_key /etc/nginx/ssl/typecodes.key;</span><br><span class=\"line\">        # 不产生日志</span><br><span class=\"line\">        access_log off;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 访问favicon.ico和robots.txt不跳转（把这两个文件存放在上级目录html中）</span><br><span class=\"line\">        location ~* ^/(favicon.ico|robots.txt)$ &#123;</span><br><span class=\"line\">            root html;</span><br><span class=\"line\">            expires max;</span><br><span class=\"line\">            log_not_found off;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            return 301 https://typecodes.com$request_uri;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    #</span><br><span class=\"line\">    # 将所有http请求重定向到https</span><br><span class=\"line\">    #</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen               *:80;</span><br><span class=\"line\">        server_name          typecodes.com;</span><br><span class=\"line\">        # 不产生日志</span><br><span class=\"line\">        access_log off;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 访问favicon.ico和robots.txt不跳转（把这两个文件存放在上级目录html中）</span><br><span class=\"line\">        location ~* ^/(favicon.ico|robots.txt)$ &#123;</span><br><span class=\"line\">            root html;</span><br><span class=\"line\">            expires max;</span><br><span class=\"line\">            log_not_found off;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            return 301 https://typecodes.com$request_uri;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    #</span><br><span class=\"line\">    # HTTPS server</span><br><span class=\"line\">    #</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen               *:443 ssl spdy;</span><br><span class=\"line\">        server_name typecodes.com;</span><br><span class=\"line\"></span><br><span class=\"line\">        # ssl证书配置见文章 https://typecodes.com/web/lnmppositivessl.html</span><br><span class=\"line\">        ssl_certificate /etc/nginx/ssl/typecodes.crt;</span><br><span class=\"line\">        # ssl密钥文件见文章 https://typecodes.com/web/lnmppositivessl.html</span><br><span class=\"line\">        ssl_certificate_key /etc/nginx/ssl/typecodes.key;</span><br><span class=\"line\">        ssl_session_cache shared:SSL:20m;</span><br><span class=\"line\">        ssl_session_timeout 10m;</span><br><span class=\"line\">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA:!CAMELLIA;</span><br><span class=\"line\">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #enables TLSv1, but not SSLv2, SSLv3 which is weak and should no longer be used.</span><br><span class=\"line\">        ssl_prefer_server_ciphers on;</span><br><span class=\"line\">        # 开启spdy功能</span><br><span class=\"line\">        add_header Alternate-Protocol 443:npn-spdy/3.1;</span><br><span class=\"line\">        # 严格的https访问</span><br><span class=\"line\">        add_header Strict-Transport-Security &quot;max-age=31536000; includeSubdomains;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">        #设置网站根目录</span><br><span class=\"line\">        root   /usr/share/nginx/html/typecodes;</span><br><span class=\"line\">        index  index.php index.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        charset utf-8;</span><br><span class=\"line\"></span><br><span class=\"line\">        #access_log  /var/log/nginx/log/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        #设置css/javascript/图片等静态资源的缓存时间</span><br><span class=\"line\">        location ~ .*\\.(css|js|ico|png|gif|jpg|json|mp3|mp4|flv|swf)(.*) &#123;</span><br><span class=\"line\">            expires 60d;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\">        # 设置typecho博客的config文章不被访问，保证安全</span><br><span class=\"line\">        location = /config.inc.php&#123;</span><br><span class=\"line\">            deny  all;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # keep the uploads directory safe by excluding php, php5, html file accessing. Applying to wordpress and typecho.</span><br><span class=\"line\">        # location ~ .*/uploads/.*\\.(php|php5|html)$ &#123;</span><br><span class=\"line\">        #   deny  all;</span><br><span class=\"line\">        # &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 设置wordpress和typecho博客中，插件目录无法直接访问php或者html文件</span><br><span class=\"line\">        location ~ .*/plugins/.*\\.(php|php5|html)$ &#123;</span><br><span class=\"line\">            deny  all;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #Rewrite的伪静态(针对wordpress/typecho)，url地址去掉index.php</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            if (-f $request_filename/index.html)&#123;</span><br><span class=\"line\">                rewrite (.*) $1/index.html break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (-f $request_filename/index.php)&#123;</span><br><span class=\"line\">                rewrite (.*) $1/index.php;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        if (!-f $request_filename)&#123;</span><br><span class=\"line\">                rewrite (.*) /index.php;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #访问favicon.ico时不产生日志</span><br><span class=\"line\">        location = /favicon.ico &#123;</span><br><span class=\"line\">            access_log off;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #设置40系列错误的应答文件为40x.html</span><br><span class=\"line\">        error_page  400 401 402 403 404  /40x.html;</span><br><span class=\"line\">        location = /40x.html &#123;</span><br><span class=\"line\">                root   html;</span><br><span class=\"line\">                index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #设置50系列错误的应答文件为50x.html</span><br><span class=\"line\">        #</span><br><span class=\"line\">        error_page   500 501 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    proxy_pass   http://127.0.0.1;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 设置Nginx和php通信机制为tcp的socket模式，而不是直接监听9000端口</span><br><span class=\"line\">        location  ~ .*\\.php(\\/.*)*$ &#123;</span><br><span class=\"line\">             fastcgi_split_path_info ^(.+\\.php)(/.+)$;</span><br><span class=\"line\">             #fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">             # the better form of fastcgi_pass than before</span><br><span class=\"line\">             fastcgi_pass   unix:/var/run/php-fpm/php-fpm.sock;</span><br><span class=\"line\">             fastcgi_index  index.php;</span><br><span class=\"line\">             fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class=\"line\">             include        fastcgi_params;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class=\"line\">        # concurs with nginx&#x27;s one</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ /\\.ht &#123;</span><br><span class=\"line\">        #    deny  all;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"第十期：VIM","date":"2023-05-20T10:50:15.000Z","_content":"### 常见命令\n```\n:set ff # 查看文件文本格式\n:set binary # 设置成unix格式\n注释：ctrl+v 根据光标选中要注释的行，按下I，输入#，esc退出编辑。\n取消：ctrl+v 根据光标选中要取消的行，按下s，esc退出编辑。\nctrl+r # 取消撤销\n:set list # 可以显示一些符号，$出现在行结尾，代表换行；^I 代表tab键；空格依旧是空格\n:%s/str/newstr/g       # 全部替换\n```","source":"_posts/第十期：VIM.md","raw":"---\ntitle: 第十期：VIM\ndate: 2023-05-20 18:50:15\ntags:\n---\n### 常见命令\n```\n:set ff # 查看文件文本格式\n:set binary # 设置成unix格式\n注释：ctrl+v 根据光标选中要注释的行，按下I，输入#，esc退出编辑。\n取消：ctrl+v 根据光标选中要取消的行，按下s，esc退出编辑。\nctrl+r # 取消撤销\n:set list # 可以显示一些符号，$出现在行结尾，代表换行；^I 代表tab键；空格依旧是空格\n:%s/str/newstr/g       # 全部替换\n```","slug":"第十期：VIM","published":1,"updated":"2024-03-06T06:55:18.390Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt7d00169kln8ictby2r","content":"<h3 id=\"常见命令\"><a href=\"#常见命令\" class=\"headerlink\" title=\"常见命令\"></a>常见命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:set ff # 查看文件文本格式</span><br><span class=\"line\">:set binary # 设置成unix格式</span><br><span class=\"line\">注释：ctrl+v 根据光标选中要注释的行，按下I，输入#，esc退出编辑。</span><br><span class=\"line\">取消：ctrl+v 根据光标选中要取消的行，按下s，esc退出编辑。</span><br><span class=\"line\">ctrl+r # 取消撤销</span><br><span class=\"line\">:set list # 可以显示一些符号，$出现在行结尾，代表换行；^I 代表tab键；空格依旧是空格</span><br><span class=\"line\">:%s/str/newstr/g       # 全部替换</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"常见命令\"><a href=\"#常见命令\" class=\"headerlink\" title=\"常见命令\"></a>常见命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:set ff # 查看文件文本格式</span><br><span class=\"line\">:set binary # 设置成unix格式</span><br><span class=\"line\">注释：ctrl+v 根据光标选中要注释的行，按下I，输入#，esc退出编辑。</span><br><span class=\"line\">取消：ctrl+v 根据光标选中要取消的行，按下s，esc退出编辑。</span><br><span class=\"line\">ctrl+r # 取消撤销</span><br><span class=\"line\">:set list # 可以显示一些符号，$出现在行结尾，代表换行；^I 代表tab键；空格依旧是空格</span><br><span class=\"line\">:%s/str/newstr/g       # 全部替换</span><br></pre></td></tr></table></figure>"},{"title":"第四期：AI工具集合汇总","date":"2023-05-18T06:40:12.000Z","_content":"\nGPT-DEMO(https://www.gptdemo.net/)\n\n集成chatgpt、bing、Bard的chrome插件(https://chathub.gg/)","source":"_posts/第四期：AI工具集合汇总.md","raw":"---\ntitle: 第四期：AI工具集合汇总\ndate: 2023-05-18 14:40:12\ntags:\n---\n\nGPT-DEMO(https://www.gptdemo.net/)\n\n集成chatgpt、bing、Bard的chrome插件(https://chathub.gg/)","slug":"第四期：AI工具集合汇总","published":1,"updated":"2024-03-06T06:55:18.391Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt7e00179kln7db40bc2","content":"<p>GPT-DEMO(<a href=\"https://www.gptdemo.net/\">https://www.gptdemo.net/</a>)</p>\n<p>集成chatgpt、bing、Bard的chrome插件(<a href=\"https://chathub.gg/\">https://chathub.gg/</a>)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>GPT-DEMO(<a href=\"https://www.gptdemo.net/\">https://www.gptdemo.net/</a>)</p>\n<p>集成chatgpt、bing、Bard的chrome插件(<a href=\"https://chathub.gg/\">https://chathub.gg/</a>)</p>\n"},{"title":"运维命令","date":"2024-03-06T07:03:16.000Z","_content":"```\n1 文件{\n\n    ls -rtl                                    # 按时间倒叙列出所有目录和文件 ll -rt\n    touch file                                 # 创建空白文件\n    rm -rf dirname                             # 不提示删除非空目录(-r:递归删除 -f强制)\n    dos2unix                                   # windows文本转linux文本\n    unix2dos                                   # linux文本转windows文本\n    enca filename                              # 查看编码  安装 yum install -y enca\n    md5sum                                     # 查看md5值\n    ln sourcefile newfile                      # 硬链接\n    ln -s sourcefile newfile                   # 符号连接\n    readlink -f /data                          # 查看连接真实目录\n    cat file | nl |less                        # 查看上下翻页且显示行号  q退出\n    head                                       # 查看文件开头内容\n    head -c 10m                                # 截取文件中10M内容\n    split -C 10M                               # 将文件切割大小为10M -C按行\n    tail -f file                               # 查看结尾 监视日志文件\n    tail -F file                               # 监视日志并重试, 针对文件被mv的情况可以持续读取\n    file                                       # 检查文件类型\n    umask                                      # 更改默认权限\n    uniq                                       # 删除重复的行\n    uniq -c                                    # 重复的行出现次数\n    uniq -u                                    # 只显示不重复行\n    paste a b                                  # 将两个文件合并用tab键分隔开\n    paste -d'+' a b                            # 将两个文件合并指定'+'符号隔开\n    paste -s a                                 # 将多行数据合并到一行用tab键隔开\n    chattr +i /etc/passwd                      # 不得任意改变文件或目录 -i去掉锁 -R递归，lsattr file查看文件锁情况\n    more                                       # 向下分面器\n    locate aaa                                 # 搜索\n    wc -l file                                 # 查看行数\n    cp filename{,.bak}                         # 快速备份一个文件\n    \\cp a b                                    # 拷贝不提示 既不使用别名 cp -i\n    rev                                        # 将行中的字符逆序排列\n    comm -12 2 3                               # 行和行比较匹配\n    echo \"10.45aa\" |cksum                      # 字符串转数字编码，可做校验，也可用于文件校验\n    iconv -f gbk -t utf8 source.txt > new.txt  # 转换编码\n    xxd /boot/grub/stage1                      # 16进制查看\n    hexdump -C /boot/grub/stage1               # 16进制查看\n    rename source new file                     # 重命名 可正则\n    watch -d -n 1 'df; ls -FlAt /path'         # 实时某个目录下查看最新改动过的文件\n    cp -v  /dev/dvd  /rhel4.6.iso9660          # 制作镜像\n    diff suzu.c suzu2.c  > sz.patch            # 制作补丁\n    patch suzu.c < sz.patch                    # 安装补丁\n\n    sort排序{\n\n        -t                                     # 指定排序时所用的栏位分隔字符\n        -n                                     # 依照数值的大小排序\n        -r                                     # 以相反的顺序来排序\n        -f                                     # 排序时，将小写字母视为大写字母\n        -d                                     # 排序时，处理英文字母、数字及空格字符外，忽略其他的字符\n        -c                                     # 检查文件是否已经按照顺序排序\n        -b                                     # 忽略每行前面开始处的空格字符\n        -M                                     # 前面3个字母依照月份的缩写进行排序\n        -k                                     # 指定域\n        -m                                     # 将几个排序好的文件进行合并\n        -T                                     # 指定临时文件目录,默认在/tmp\n        -o                                     # 将排序后的结果存入指定的文        \n\n        sort -n                                # 按数字排序\n        sort -nr                               # 按数字倒叙\n        sort -u                                # 过滤重复行\n        sort -m a.txt c.txt                    # 将两个文件内容整合到一起\n        sort -n -t' ' -k 2 -k 3 a.txt          # 第二域相同，将从第三域进行升降处理\n        sort -n -t':' -k 3r a.txt              # 以:为分割域的第三域进行倒叙排列\n        sort -k 1.3 a.txt                      # 从第三个字母起进行排序\n        sort -t\" \" -k 2n -u  a.txt             # 以第二域进行排序，如果遇到重复的，就删除\n\n    }\n\n    find查找{\n\n        # linux文件无创建时间\n        # Access 使用时间\n        # Modify 内容修改时间\n        # Change 状态改变时间(权限、属主)\n        # 时间默认以24小时为单位,当前时间到向前24小时为0天,向前48-72小时为2天\n        # -and 且 匹配两个条件 参数可以确定时间范围 -mtime +2 -and -mtime -4\n        # -or 或 匹配任意一个条件\n\n        find /etc -name \"*http*\"                                # 按文件名查找\n        find . -type f                                          # 查找某一类型文件\n        find / -perm                                            # 按照文件权限查找\n        find / -user                                            # 按照文件属主查找\n        find / -group                                           # 按照文件所属的组来查找文件\n        find / -atime -n                                        # 文件使用时间在N天以内\n        find / -atime +n                                        # 文件使用时间在N天以前\n        find / -mtime +n                                        # 文件内容改变时间在N天以前\n        find / -ctime +n                                        # 文件状态改变时间在N天前\n        find / -mmin +30                                        # 按分钟查找内容改变\n        find / -size +1000000c -print                           # 查找文件长度大于1M字节的文件\n        find /etc -name \"*passwd*\" -exec grep \"xuesong\" {} \\;   # 按名字查找文件传递给-exec后命令\n        find . -name 't*' -exec basename {} \\;                  # 查找文件名,不取路径\n        find . -type f -name \"err*\" -exec  rename err ERR {} \\; # 批量改名(查找err 替换为 ERR {}文件\n        find path -name *name1* -or -name *name2*               # 查找任意一个关键字\n\n    }\n\n    vim编辑器{\n\n        # 常用配置\n        set smartindent\n        set tabstop=4\n        set shiftwidth=4\n        set expandtab\n        set softtabstop=4\n        set noautoindent\n        set nosmartindent\n        set paste\n        set clipboard=unnamed\n\n        gconf-editor           # 配置编辑器\n        /etc/vimrc             # 配置文件路径\n        vim +24 file           # 打开文件定位到指定行\n        vim file1 file2        # 打开多个文件\n        vim  -r file           # 恢复上次异常关闭的文件 .file.swp \n        vim -O2 file1 file2    # 垂直分屏\n        vim -on file1 file2    # 水平分屏\n        Ctrl+ U                # 向前翻页\n        Ctrl+ D                # 向后翻页\n        Ctrl+ww                # 在窗口间切换\n        Ctrl+w +or-or=         # 增减高度\n        :sp filename           # 上下分割打开新文件\n        :vs filename           # 左右分割打开新文件\n        :set nu                # 打开行号\n        :set nonu              # 取消行号\n        :nohl                  # 取消高亮\n        :set paste             # 取消缩进\n        :set autoindent        # 设置自动缩进\n\t\t:set list              # 显示制表符\n        :set ff                # 查看文本格式\n        :set binary            # 改为unix格式\n        :%s/str/newstr/g       # 全部替换\n        :200                   # 跳转到200  1 文件头\n        G                      # 跳到行尾\n        dd                     # 删除当前行 并复制 可直接p粘贴\n        11111dd                # 删除11111行，可用来清空文件\n        r                      # 替换单个字符\n        R                      # 替换多个字符\n        u                      # 撤销上次操作\n        *                      # 全文匹配当前光标所在字符串\n        $                      # 行尾\n        0                      # 行首\n        X                      # 文档加密\n        v =                    # 自动格式化代码\n        Ctrl+v                 # 可视模式\n        Ctrl+v I ESC           # 多行操作\n        Ctrl+v s ESC           # 批量取消注释\n\n    }\n\n    归档解压缩{\n\n        tar zxvpf gz.tar.gz  dir                         # 解包指定tar.gz中的内容  不指定目录则全解压\n        tar zcvpf /$path/gz.tar.gz *                     # 打包gz 注意*最好用相对路径\n        tar zcf /$path/gz.tar.gz *                       # 打包正确不提示\n        tar ztvpf gz.tar.gz                              # 查看gz\n        tar xvf 1.tar -C dir                             # 解包tar 放到指定目录\n        tar -cvf 1.tar *                                 # 打包tar\n        tar tvf 1.tar                                    # 查看tar\n        tar -rvf 1.tar filename                          # 给tar追加文件\n        tar --exclude=/home/dmtsai --exclude=*.tar -zcvf myfile.tar.gz /home/* /etc      # 打包/home, /etc ，但排除 /home/dmtsai\n        tar -N \"2005/06/01\" -zcvf home.tar.gz /home      # 在 /home 当中，比 2005/06/01 新的文件才备份\n        tar -zcvfh home.tar.gz /home                     # 打包目录中包括连接目录\n        tar zcf - ./ | ssh root@IP \"tar zxf - -C /xxxx\"  # 一边压缩一边解压\n        zgrep str 1.gz                                   # 查看压缩包中文件字符行\n        bzip2  -dv 1.tar.bz2                             # 解压bzip2\n        bzip2 -v 1.tar                                   # bzip2压缩\n        bzcat                                            # 查看bzip2\n        gzip file                                        # 直接压缩文件 # 压缩后源文件消失\n        gunzip file.gz                                   # 直接解压文件 # 解压后源文件消失\n        gzip -r dir/                                     # 递归压缩目录\n        gzip  -r -d dir/                                 # 递归解压目录\n        gzip -dv 1.tar.gz                                # 解压gzip到tar\n        gzip -v 1.tar                                    # 压缩tar到gz\n        unzip zip.zip                                    # 解压zip\n        zip zip.zip *                                    # 压缩zip\n        rar a rar.rar *.jpg                              # 压缩文件为rar包\n        unrar x rar.rar                                  # 解压rar包\n\t\tpigz -9 -p 2 *.log                               # 压缩文件,pigz是gzip升级版，可并行压缩\n\t\tpigz -9 -d *.gz                                  # 解压\n\n    }\n\n    文件ACL权限控制{\n\n        getfacl 1.test                      # 查看文件ACL权限\n        setfacl -R -m u:xuesong:rw- 1.test  # 对文件增加用户的读写权限 -R 递归\n\n    }\n\n    svn{\n\n        --force # 强制覆盖\n        /usr/bin/svn --username user --password passwd co  $Code  ${SvnPath}src/                 # 检出整个项目\n        /usr/bin/svn --username user --password passwd up  $Code  ${SvnPath}src/                 # 更新项目\n        /usr/bin/svn --username user --password passwd export  $Code$File ${SvnPath}src/$File    # 导出个别文件\n        /usr/bin/svn --username user --password passwd export -r 版本号 svn路径 本地路径 --force   # 导出指定版本\n\n    }\n\n    git{\n\t    git push --set-upstream origin develop             # 推送新分支\n\t    git rm -r ./*                                      # 置空分支代码\n        git push origin --delete v2.9                      # 删除远程分支\n        git clone git@10.10.10.10:gittest.git  ./gittest/  # 克隆项目到指定目录\n        git clone  -b develop --depth=1 http://git.a.com/d.git   # 克隆指定分支 克隆一层\n\t\tgit checkout .                                     # 放弃所有文件修改\n\t\tgit checkout -- filename                           # 放弃单个文件修改\n        git status                                         # Show the working tree(工作树) status\n        git log -n 1 --stat                                # 查看最后一次日志文件\n        git branch -a                                      # 列出远程跟踪分支(remote-tracking branches)和本地分支\n        git checkout developing                            # 切换到developing分支\n        git checkout -b release                            # 切换分支没有从当前分支创建\n        git checkout -b release origin/master              # 从远程分支创建本地镜像分支\n        git push origin --delete release                   # 从远端删除分区，服务端有可能设置保护不允许删除\n        git push origin release                            # 把本地分支提交到远程\n        git pull                                           # 更新项目 需要cd到项目目录中\n        git fetch -f -p                                    # 抓取远端代码但不合并到当前\n        git reset --hard origin/master                     # 和远端同步分支\n        git add .                                          # 更新所有文件\n        git commit -m \"gittest up\"                         # 提交操作并添加备注\n        git push                                           # 正式提交到远程git服务器\n        git push [-u origin master]                        # 正式提交到远程git服务器(master分支)\n        git tag [-a] dev-v-0.11.54 [-m 'fix #67']          # 创建tag,名为dev-v-0.11.54,备注fix #67\n        git tag -l dev-v-0.11.54                           # 查看tag(dev-v-0.11.5)\n        git push origin --tags                             # 提交tag\n        git reset --hard                                   # 本地恢复整个项目\n        git rm -r -n --cached  ./img                       # -n执行命令时,不会删除任何文件,而是展示此命令要删除的文件列表预览\n        git rm -r --cached  ./img                          # 执行删除命令 需要commit和push让远程生效\n        git init --bare smc-content-check.git              # 初始化新git项目  需要手动创建此目录并给git用户权限 chown -R git:git smc-content-check.git\n        git config --global credential.helper store        # 记住密码\n        git config [--global] user.name \"your name\"        # 设置你的用户名, 希望在一个特定的项目中使用不同的用户或e-mail地址, 不要--global选项\n        git config [--global] user.email \"your email\"      # 设置你的e-mail地址, 每次Git提交都会使用该信息\n        git config [--global] user.name                    # 查看用户名\n        git config [--global] user.email                   # 查看用户e-mail\n        git config --global --edit                         # 编辑~/.gitconfig(User-specific)配置文件, 值优先级高于/etc/gitconfig(System-wide)\n        git config --edit                                  # 编辑.git/config(Repository specific)配置文件, 值优先级高于~/.gitconfig\n        git cherry-pick  <commit id>                       # 用于把另一个本地分支的commit修改应用到当前分支 需要push到远程\n        git log --pretty=format:'%h: %s' 9378b62..HEAD     # 查看指定范围更新操作 commit id\n        git config --global core.ignorecase false          # 设置全局大小写敏感\n        git ls-remote --heads origin refs/heads/test       # 查看\n        git config pull.rebase false                       # 默认将pull下来的代码与现有的代码进行合并，有可能造成冲突。   \n\n        从远端拉一份新的{\n            # You have not concluded your merge (MERGE_HEAD exists)  git拉取失败\n            git fetch --hard origin/master\n            git reset --hard origin/master\n        }\n\n        删除远程分支并新建{\n            git checkout master\n            git branch -r -d origin/test       # 删除远程分支  但有时候并没有删除 可以尝试使用下面的语句\n            git push origin :test              # 推送一个空分支到远程分支，相当于删除远程分支\n            git branch -d test                 # 删除本地test分支, -D 强制\n            git branch -a |grep test\n            git checkout -b test\n            git push origin test\n\n            git reset --hard origin/test \n        }\n\n        迁移git项目{\n            git branch -r | grep -v '\\->' | while read remote; do git branch --track \"${remote#origin/}\" \"$remote\"; done\n            git fetch --all\n            git pull --all\n            git remote set-url origin git@git.github.cn:server/gw.git\n            git push --all\n        }\n    }\n\n    恢复rm删除的文件{\n\n        # debugfs针对 ext2   # ext3grep针对 ext3   # extundelete针对 ext4\n        df -T   # 首先查看磁盘分区格式\n        umount /data/     # 卸载挂载,数据丢失请首先卸载挂载,或重新挂载只读\n        ext3grep /dev/sdb1 --ls --inode 2         # 记录信息继续查找目录下文件inode信息\n        ext3grep /dev/sdb1 --ls --inode 131081    # 此处是inode\n        ext3grep /dev/sdb1 --restore-inode 49153  # 记录下inode信息开始恢复目录\n\n    }\n\n    openssl{\n\n        openssl rand 15 -base64            # 口令生成\n        openssl sha1 filename              # 哈希算法校验文件\n        openssl md5 filename               # MD5校验文件\n        openssl base64   filename.txt      # base64编码/解码文件(发送邮件附件之类功能会可以使用)\n        openssl base64 -d   filename.bin   # base64编码/解码二进制文件\n        openssl enc -aes-128-cbc   filename.aes-128-cbc                  # 加密文档\n        # 推荐使用的加密算法是bf(Blowfish)和-aes-128-cbc(运行在CBC模式的128位密匙AES加密算法)，加密强度有保障\n        openssl enc -d -aes-128-cbc -in filename.aes-128-cbc > filename  # 解密文档\n\n    }\n\n}\n\n2 软件{\n\n    rpm{\n\n        rpm -ivh lynx          # rpm安装\n        rpm -e lynx            # 卸载包\n        rpm -e lynx --nodeps   # 强制卸载\n        rpm -qa                # 查看所有安装的rpm包\n        rpm -qa | grep lynx    # 查找包是否安装\n        rpm -ql                # 软件包路径\n        rpm -Uvh               # 升级包\n        rpm --test lynx        # 测试\n        rpm -qc                # 软件包配置文档\n        rpm --initdb           # 初始化rpm 数据库\n        rpm --rebuilddb        # 重建rpm数据库  在rpm和yum无响应的情况使用 先 rm -f /var/lib/rpm/__db.00* 在重建\n\n    }\n\n    yum{\n\n        yum list                 # 所有软件列表\n        yum install 包名          # 安装包和依赖包\n        yum -y update            # 升级所有包版本,依赖关系，系统版本内核都升级\n        yum -y update 软件包名    # 升级指定的软件包\n        yum -y upgrade           # 不改变软件设置更新软件，系统版本升级，内核不改变\n        yum search mail          # yum搜索相关包\n        yum grouplist            # 软件包组\n        yum -y groupinstall \"Virtualization\"   # 安装软件包组\n        repoquery -ql gstreamer  # 不安装软件查看包含文件\n        yum clean all            # 清除var下缓存\n\n    }\n\n    yum使用epel源{\n\n        # 包下载地址: http://download.fedoraproject.org/pub/epel   # 选择版本5\\6\\7\n        rpm -Uvh  http://mirrors.hustunique.com/epel//6/x86_64/epel-release-6-8.noarch.rpm\n\n        # 自适配版本\n        yum install epel-release\n\n    }\n\n    自定义yum源{\n\n        find /etc/yum.repos.d -name \"*.repo\" -exec mv {} {}.bak \\;\n\n        vim /etc/yum.repos.d/yum.repo\n        [yum]\n        #http\n        baseurl=http://10.0.0.1/centos5.5\n        #挂载iso\n        #mount -o loop CentOS-5.8-x86_64-bin-DVD-1of2.iso /data/iso/\n        #本地\n        #baseurl=file:///data/iso/\n        enable=1\n\n        #导入key\n        rpm --import  /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-5\n\n    }\n\n    编译{\n\n        源码安装{\n\n            ./configure --help                   # 查看所有编译参数\n            ./configure  --prefix=/usr/local/    # 配置参数\n            make                                 # 编译\n            # make -j 8                          # 多线程编译,速度较快,但有些软件不支持\n            make install                         # 安装包\n            make clean                           # 清除编译结果\n\n        }\n\n        perl程序编译{\n\n            perl Makefile.PL\n            make\n            make test\n            make install\n\n        }\n\n        python程序编译{\n\n            python file.py\n\n            # 源码包编译安装\n            python setup.py build\n            python setup.py install\n\n        }\n\n        编译c程序{\n\n            gcc -g hello.c -o hello\n\n        }\n\n    }\n\n}\n\n3 系统{\n\n    wall                                          # 给其它用户发消息\n    whereis ls                                    # 搜索程序名，而且只搜索二进制文件\n    which                                         # 查找命令是否存在,及存放位置\n    locate                                        # 不是实时查找，查找的结果不精确，但查找速度很快 每天更新 /var/lib/locatedb\n    clear                                         # 清空整个屏幕\n    reset                                         # 重新初始化屏幕\n    cal                                           # 显示月历\n    echo -n 123456 | md5sum                       # md5加密\n    mkpasswd                                      # 随机生成密码   -l位数 -C大小 -c小写 -d数字 -s特殊字符\n    netstat -ntupl | grep port                    # 是否打开了某个端口\n    ntpdate cn.pool.ntp.org                       # 同步时间, pool.ntp.org: public ntp time server for everyone(http://www.pool.ntp.org/zh/)\n\t5 * * * * /usr/sbin/ntpdate 133.100.11.8 133.100.9.2 time.nist.gov time.windows.com\n    tzselect                                      # 选择时区 #+8=(5 9 1 1) # (TZ='Asia/Shanghai'; export TZ)括号内写入 /etc/profile\n    /sbin/hwclock -w                              # 时间保存到硬件\n    /etc/shadow                                   # 账户影子文件\n    LANG=en                                       # 修改语言\n    vim /etc/sysconfig/i18n                       # 修改编码  LANG=\"en_US.UTF-8\"\n    export LC_ALL=C                               # 强制字符集\n    vi /etc/hosts                                 # 查询静态主机名\n    alias                                         # 别名\n    watch uptime                                  # 监测命令动态刷新 监视\n    ipcs -a                                       # 查看Linux系统当前单个共享内存段的最大值\n    ldconfig                                      # 动态链接库管理命令\n    ldd `which cmd`                               # 查看命令的依赖库\n    dist-upgrade                                  # 会改变配置文件,改变旧的依赖关系，改变系统版本\n    /boot/grub/grub.conf                          # grub启动项配置\n    ps -mfL <PID>                                 # 查看指定进程启动的线程 线程数受 max user processes 限制\n    ps uxm |wc -l                                 # 查看当前用户占用的进程数 [包括线程]  max user processes\n    top -p  PID -H                                # 查看指定PID进程及线程\n    lsof |wc -l                                   # 查看当前文件句柄数使用数量  open files\n\tlsof -p pid                                   # 查看进程占用文件\n    lsof |grep /lib                               # 查看加载库文件\n    sysctl -a                                     # 查看当前所有系统内核参数\n    sysctl -p                                     # 修改内核参数/etc/sysctl.conf，让/etc/rc.d/rc.sysinit读取生效\n    strace -p pid                                 # 跟踪系统调用\n    ps -eo \"%p %C  %z  %a\"|sort -k3 -n            # 把进程按内存使用大小排序\n    strace uptime 2>&1|grep open                  # 查看命令打开的相关文件\n    grep Hugepagesize /proc/meminfo               # 内存分页大小\n    mkpasswd -l 8  -C 2 -c 2 -d 4 -s 0            # 随机生成指定类型密码\n    echo 1 > /proc/sys/net/ipv4/tcp_syncookies    # 使TCP SYN Cookie 保护生效  # \"SYN Attack\"是一种拒绝服务的攻击方式\n    grep Swap  /proc/25151/smaps |awk '{a+=$2}END{print a}'    # 查询某pid使用的swap大小\n    redir --lport=33060 --caddr=10.10.10.78 --cport=3306       # 端口映射 yum安装 用supervisor守护\n\t/usr/sbin/chroot --userspec=nobody.nobody / sh -c  \"echo hello > /tmp/chroot.log\" ## 以nobody用户取执行命令\n\n    开机启动脚本顺序{\n\n        /etc/profile\n        /etc/profile.d/*.sh\n        ~/bash_profile\n        ~/.bashrc\n        /etc/bashrc\n\n    }\n\n    进程管理{\n\n        ps -eaf               # 查看所有进程\n        kill -9 PID           # 强制终止某个PID进程\n        kill -15 PID          # 安全退出 需程序内部处理信号\n\t\tkillall nginx         # 杀死nginx这一组进程\n        cmd &                 # 命令后台运行\n        nohup cmd &           # 后台运行不受shell退出影响\n        ctrl+z                # 将前台放入后台(暂停)\n        jobs                  # 查看后台运行程序\n        bg 2                  # 启动后台暂停进程\n        fg 2                  # 调回后台进程\n        pstree                # 进程树\n        vmstat 1 9            # 每隔一秒报告系统性能信息9次\n        sar                   # 查看cpu等状态\n        lsof file             # 显示打开指定文件的所有进程\n        lsof -i:32768         # 查看端口的进程\n        renice +1 180         # 把180号进程的优先级加1\n        exec sh a.sh          # 子进程替换原来程序的pid， 避免supervisor无法强制杀死进程\n\n        ps{\n\n            ps aux |grep -v USER | sort -nk +4 | tail       # 显示消耗内存最多的10个运行中的进程，以内存使用量排序.cpu +3\n            # USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\n            %CPU     # 进程的cpu占用率\n            %MEM     # 进程的内存占用率\n            VSZ      # 进程虚拟大小,单位K(即总占用内存大小,包括真实内存和虚拟内存)\n            RSS      # 进程使用的驻留集大小即实际物理内存大小\n            START    # 进程启动时间和日期\n            占用的虚拟内存大小 = VSZ - RSS\n\n            ps -eo pid,lstart,etime,args         # 查看进程启动时间\n\n        }\n\n        top{\n\n            前五行是系统整体的统计信息。\n            第一行: 任务队列信息，同 uptime 命令的执行结果。内容如下：\n                01:06:48 当前时间\n                up 1:22 系统运行时间，格式为时:分\n                1 user 当前登录用户数\n                load average: 0.06, 0.60, 0.48 系统负载，即任务队列的平均长度。\n                三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值。\n\n            第二、三行:为进程和CPU的信息。当有多个CPU时，这些内容可能会超过两行。内容如下：\n                Tasks: 29 total 进程总数\n                1 running 正在运行的进程数\n                28 sleeping 睡眠的进程数\n                0 stopped 停止的进程数\n                0 zombie 僵尸进程数\n                Cpu(s): 0.3% us 用户空间占用CPU百分比\n                1.0% sy 内核空间占用CPU百分比\n                0.0% ni 用户进程空间内改变过优先级的进程占用CPU百分比\n                98.7% id 空闲CPU百分比\n                0.0% wa 等待输入输出的CPU时间百分比\n                0.0% hi\n                0.0% si\n\n            第四、五行:为内存信息。内容如下：\n                Mem: 191272k total 物理内存总量\n                173656k used 使用的物理内存总量\n                17616k free 空闲内存总量\n                22052k buffers 用作内核缓存的内存量\n                Swap: 192772k total 交换区总量\n                0k used 使用的交换区总量\n                192772k free 空闲交换区总量\n                123988k cached 缓冲的交换区总量。\n                内存中的内容被换出到交换区，而后又被换入到内存，但使用过的交换区尚未被覆盖，\n                该数值即为这些内容已存在于内存中的交换区的大小。\n                相应的内存再次被换出时可不必再对交换区写入。\n\n            进程信息区,各列的含义如下:  # 显示各个进程的详细信息\n\n            序号 列名    含义\n            a   PID      进程id\n            b   PPID     父进程id\n            c   RUSER    Real user name\n            d   UID      进程所有者的用户id\n            e   USER     进程所有者的用户名\n            f   GROUP    进程所有者的组名\n            g   TTY      启动进程的终端名。不是从终端启动的进程则显示为 ?\n            h   PR       优先级\n            i   NI       nice值。负值表示高优先级，正值表示低优先级\n            j   P        最后使用的CPU，仅在多CPU环境下有意义\n            k   %CPU     上次更新到现在的CPU时间占用百分比\n            l   TIME     进程使用的CPU时间总计，单位秒\n            m   TIME+    进程使用的CPU时间总计，单位1/100秒\n            n   %MEM     进程使用的物理内存百分比\n            o   VIRT     进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES\n            p   SWAP     进程使用的虚拟内存中，被换出的大小，单位kb。\n            q   RES      进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA\n            r   CODE     可执行代码占用的物理内存大小，单位kb\n            s   DATA     可执行代码以外的部分(数据段+栈)占用的物理内存大小，单位kb\n            t   SHR      共享内存大小，单位kb\n            u   nFLT     页面错误次数\n            v   nDRT     最后一次写入到现在，被修改过的页面数。\n            w   S        进程状态。\n                D=不可中断的睡眠状态\n                R=运行\n                S=睡眠\n                T=跟踪/停止\n                Z=僵尸进程 父进程在但并不等待子进程\n            x   COMMAND  命令名/命令行\n            y   WCHAN    若该进程在睡眠，则显示睡眠中的系统函数名\n            z   Flags    任务标志，参考 sched.h\n\n        }\n\n        列出正在占用swap的进程{\n\n            #!/bin/bash\n            echo -e \"PID\\t\\tSwap\\t\\tProc_Name\"\n            # 拿出/proc目录下所有以数字为名的目录（进程名是数字才是进程，其他如sys,net等存放的是其他信息）\n            for pid in `ls -l /proc | grep ^d | awk '{ print $9 }'| grep -v [^0-9]`\n            do\n                # 让进程释放swap的方法只有一个：就是重启该进程。或者等其自动释放。放\n                # 如果进程会自动释放，那么我们就不会写脚本来找他了，找他都是因为他没有自动释放。\n                # 所以我们要列出占用swap并需要重启的进程，但是init这个进程是系统里所有进程的祖先进程\n                # 重启init进程意味着重启系统，这是万万不可以的，所以就不必检测他了，以免对系统造成影响。\n                if [ $pid -eq 1 ];then continue;fi\n                grep -q \"Swap\" /proc/$pid/smaps 2>/dev/null\n                if [ $? -eq 0 ];then\n                    swap=$(grep Swap /proc/$pid/smaps \\\n                        | gawk '{ sum+=$2;} END{ print sum }')\n                    proc_name=$(ps aux | grep -w \"$pid\" | grep -v grep \\\n                        | awk '{ for(i=11;i<=NF;i++){ printf(\"%s \",$i); }}')\n                    if [ $swap -gt 0 ];then\n                        echo -e \"${pid}\\t${swap}\\t${proc_name}\"\n                    fi\n                fi\n            done | sort -k2 -n | awk -F'\\t' '{\n                pid[NR]=$1;\n                size[NR]=$2;\n                name[NR]=$3;\n            }\n            END{\n                for(id=1;id<=length(pid);id++)\n                {\n                    if(size[id]<1024)\n                        printf(\"%-10s\\t%15sKB\\t%s\\n\",pid[id],size[id],name[id]);\n                    else if(size[id]<1048576)\n                        printf(\"%-10s\\t%15.2fMB\\t%s\\n\",pid[id],size[id]/1024,name[id]);\n                    else\n                        printf(\"%-10s\\t%15.2fGB\\t%s\\n\",pid[id],size[id]/1048576,name[id]);\n                }\n            }'\n\n        }\n\n        linux操作系统提供的信号{\n\n            kill -l                    # 查看linux提供的信号\n            trap \"echo aaa\"  2 3 15    # shell使用 trap 捕捉退出信号\n\n            # 发送信号一般有两种原因:\n            #   1(被动式)  内核检测到一个系统事件.例如子进程退出会像父进程发送SIGCHLD信号.键盘按下control+c会发送SIGINT信号\n            #   2(主动式)  通过系统调用kill来向指定进程发送信号\n            # 进程结束信号 SIGTERM 和 SIGKILL 的区别:  SIGTERM 比较友好，进程能捕捉这个信号，根据您的需要来关闭程序。在关闭程序之前，您可以结束打开的记录文件和完成正在做的任务。在某些情况下，假如进程正在进行作业而且不能中断，那么进程可以忽略这个SIGTERM信号。\n            # 如果一个进程收到一个SIGUSR1信号，然后执行信号绑定函数，第二个SIGUSR2信号又来了，第一个信号没有被处理完毕的话，第二个信号就会丢弃。\n\n            SIGHUP  1          A     # 终端挂起或者控制进程终止\n            SIGINT  2          A     # 键盘终端进程(如control+c)\n            SIGQUIT 3          C     # 键盘的退出键被按下\n            SIGILL  4          C     # 非法指令\n            SIGABRT 6          C     # 由abort(3)发出的退出指令\n            SIGFPE  8          C     # 浮点异常\n            SIGKILL 9          AEF   # Kill信号  立刻停止\n            SIGSEGV 11         C     # 无效的内存引用\n            SIGPIPE 13         A     # 管道破裂: 写一个没有读端口的管道\n            SIGALRM 14         A     # 闹钟信号 由alarm(2)发出的信号\n            SIGTERM 15         A     # 终止信号,可让程序安全退出 kill -15\n            SIGUSR1 30,10,16   A     # 用户自定义信号1\n            SIGUSR2 31,12,17   A     # 用户自定义信号2\n            SIGCHLD 20,17,18   B     # 子进程结束自动向父进程发送SIGCHLD信号\n            SIGCONT 19,18,25         # 进程继续（曾被停止的进程）\n            SIGSTOP 17,19,23   DEF   # 终止进程\n            SIGTSTP 18,20,24   D     # 控制终端（tty）上按下停止键\n            SIGTTIN 21,21,26   D     # 后台进程企图从控制终端读\n            SIGTTOU 22,22,27   D     # 后台进程企图从控制终端写\n\n            缺省处理动作一项中的字母含义如下:\n                A  缺省的动作是终止进程\n                B  缺省的动作是忽略此信号，将该信号丢弃，不做处理\n                C  缺省的动作是终止进程并进行内核映像转储(dump core),内核映像转储是指将进程数据在内存的映像和进程在内核结构中的部分内容以一定格式转储到文件系统，并且进程退出执行，这样做的好处是为程序员提供了方便，使得他们可以得到进程当时执行时的数据值，允许他们确定转储的原因，并且可以调试他们的程序。\n                D  缺省的动作是停止进程，进入停止状况以后还能重新进行下去，一般是在调试的过程中（例如ptrace系统调用）\n                E  信号不能被捕获\n                F  信号不能被忽略\n        }\n\n        系统性能状态{\n\n            vmstat 1 9\n\n            r      # 等待执行的任务数。当这个值超过了cpu线程数，就会出现cpu瓶颈。\n            b      # 等待IO的进程数量,表示阻塞的进程。\n            swpd   # 虚拟内存已使用的大小，如大于0，表示机器物理内存不足，如不是程序内存泄露，那么该升级内存。\n            free   # 空闲的物理内存的大小\n            buff   # 已用的buff大小，对块设备的读写进行缓冲\n            cache  # cache直接用来记忆我们打开的文件,给文件做缓冲，(把空闲的物理内存的一部分拿来做文件和目录的缓存，是为了提高 程序执行的性能，当程序使用内存时，buffer/cached会很快地被使用。)\n            inact  # 非活跃内存大小，即被标明可回收的内存，区别于free和active -a选项时显示\n            active # 活跃的内存大小 -a选项时显示\n            si   # 每秒从磁盘读入虚拟内存的大小，如果这个值大于0，表示物理内存不够用或者内存泄露，要查找耗内存进程解决掉。\n            so   # 每秒虚拟内存写入磁盘的大小，如果这个值大于0，同上。\n            bi   # 块设备每秒接收的块数量，这里的块设备是指系统上所有的磁盘和其他块设备，默认块大小是1024byte\n            bo   # 块设备每秒发送的块数量，例如读取文件，bo就要大于0。bi和bo一般都要接近0，不然就是IO过于频繁，需要调整。\n            in   # 每秒CPU的中断次数，包括时间中断。in和cs这两个值越大，会看到由内核消耗的cpu时间会越多\n            cs   # 每秒上下文切换次数，例如我们调用系统函数，就要进行上下文切换，线程的切换，也要进程上下文切换，这个值要越小越好，太大了，要考虑调低线程或者进程的数目,例如在apache和nginx这种web服务器中，我们一般做性能测试时会进行几千并发甚至几万并发的测试，选择web服务器的进程可以由进程或者线程的峰值一直下调，压测，直到cs到一个比较小的值，这个进程和线程数就是比较合适的值了。系统调用也是，每次调用系统函数，我们的代码就会进入内核空间，导致上下文切换，这个是很耗资源，也要尽量避免频繁调用系统函数。上下文切换次数过多表示你的CPU大部分浪费在上下文切换，导致CPU干正经事的时间少了，CPU没有充分利用。\n            us   # 用户进程执行消耗cpu时间(user time)  us的值比较高时，说明用户进程消耗的cpu时间多，但是如果长期超过50%的使用，那么我们就该考虑优化程序算法或其他措施\n            sy   # 系统CPU时间，如果太高，表示系统调用时间长，例如是IO操作频繁。\n            id   # 空闲 CPU时间，一般来说，id + us + sy = 100,一般认为id是空闲CPU使用率，us是用户CPU使用率，sy是系统CPU使用率。\n            wt   # 等待IOCPU时间。Wa过高时，说明io等待比较严重，这可能是由于磁盘大量随机访问造成的，也有可能是磁盘的带宽出现瓶颈。\n\n            如果 r 经常大于4，且id经常少于40，表示cpu的负荷很重。\n            如果 pi po 长期不等于0，表示内存不足。\n            如果 b 队列经常大于3，表示io性能不好。\n\n        }\n\n    }\n\n    日志管理{\n\n        history                      # 历时命令默认1000条\n        HISTTIMEFORMAT=\"%Y-%m-%d %H:%M:%S \"   # 让history命令显示具体时间\n        history  -c                  # 清除记录命令\n        cat $HOME/.bash_history      # 历史命令记录文件\n        lastb -a                     # 列出登录系统失败的用户相关信息  清空二进制日志记录文件 echo > /var/log/btmp\n        last                         # 查看登陆过的用户信息  清空二进制日志记录文件 echo > /var/log/wtmp   默认打开乱码\n        who /var/log/wtmp            # 查看登陆过的用户信息\n        lastlog                      # 用户最后登录的时间\n        tail -f /var/log/messages    # 系统日志\n        tail -f /var/log/secure      # ssh日志\n    }\n\t日志切割logrotate{\n\t\t/etc/logrotate.d/  # 配置目录\n\t\t#示例：新建文件/etc/logrotate.d/apisix，配置内容如下：\n\t\t/opt/apisix/logs/*.log {\n\t\t\tdaily           # 日志文件将按日轮循，还可用'weekly'，'monthly'\n\t\t\tcompress        # 在轮循任务完成后，已轮循的归档将使用gzip进行压缩。\n\t\t\tdelaycompress   # 总是与compress选项一起用，delaycompress选项指示logrotate不要将最近的归档压缩，压缩将在下一次轮循周期进行(最近一次不归档)\n\t\t\trotate 365      # 一次将存储365个归档日志。对于第366个归档，时间最久的归档将被删除\n\t\t\tmissingok       # 在日志轮循期间，任何错误将被忽略，例如“文件无法找到”之类的错误\n\t\t\tnotifempty      # 如果日志文件为空，轮循不会进行\n\t\t\tdateext\n\t\t\tsharedscripts\n\t\t\tpostrotate      # postrotate/endscript：在所有其它指令完成后，postrotate和endscript里面指定的命令将被执行。在这种情况下，rsyslogd 进程将立即再次读取其配置并继续运行。\n\t\t\t\tif [ -f /opt/apisix/logs/nginx.pid ]; then\n\t\t\t\t\t#重启nginx服务\n\t\t\t\t\tkill -USR1 `cat /opt/apisix/logs/nginx.pid`\n\t\t\t\tfi\n\t\t\tendscript\n\t\t}\n\t\t\n\t\tlogrotate /etc/logrotate.conf  # 使新配置生效\n\t}\n\n    man{\n        man 2 read   # 查看read函数的文档\n        1 使用者在shell中可以操作的指令或可执行档\n        2 系统核心可呼叫的函数与工具等\n        3 一些常用的函数(function)与函数库(library),大部分是C的函数库(libc)\n        4 装置档案的说明，通常在/dev下的档案\n        5 设定档或者是某些档案的格式\n        6 游戏games\n        7 惯例与协定等，例如linux档案系统、网络协定、ascll code等说明\n        8 系统管理员可用的管理指令\n        9 跟kernel有关的文件\n    }\n\n    selinux{\n\n        sestatus -v                    # 查看selinux状态\n        getenforce                     # 查看selinux模式\n        setenforce 0                   # 设置selinux为宽容模式(可避免阻止一些操作)\n        semanage port -l               # 查看selinux端口限制规则\n        semanage port -a -t http_port_t -p tcp 8000  # 在selinux中注册端口类型\n        vi /etc/selinux/config         # selinux配置文件\n        SELINUX=enfoceing              # 关闭selinux 把其修改为  SELINUX=disabled\n\n    }\n\n    查看剩余内存{\n\n        free -m\n        #-/+ buffers/cache:       6458       1649\n        #6458M为真实使用内存  1649M为真实剩余内存(剩余内存+缓存+缓冲器)\n        #linux会利用所有的剩余内存作为缓存，所以要保证linux运行速度，就需要保证内存的缓存大小\n\n    }\n\n    系统信息{\n\n        uname -a              # 查看Linux内核版本信息\n        cat /proc/version     # 查看内核版本\n        cat /etc/issue        # 查看系统版本\n        lsb_release -a        # 查看系统版本  需安装 centos-release\n        locale -a             # 列出所有语系\n        locale                # 当前环境变量中所有编码\n        hwclock               # 查看时间\n        who                   # 当前在线用户\n        w                     # 当前在线用户\n        whoami                # 查看当前用户名\n        logname               # 查看初始登陆用户名\n        uptime                # 查看服务器启动时间\n        sar -n DEV 1 10       # 查看网卡网速流量\n        dmesg                 # 显示开机信息\n        lsmod                 # 查看内核模块\n\n    }\n\n    硬件信息{\n\n        more /proc/cpuinfo                                       # 查看cpu信息\n        lscpu                                                    # 查看cpu信息\n        cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c    # 查看cpu型号和逻辑核心数\n        getconf LONG_BIT                                         # cpu运行的位数\n        cat /proc/cpuinfo | grep 'physical id' |sort| uniq -c    # 物理cpu个数\n        cat /proc/cpuinfo | grep flags | grep ' lm ' | wc -l     # 结果大于0支持64位\n        cat /proc/cpuinfo|grep flags                             # 查看cpu是否支持虚拟化   pae支持半虚拟化  IntelVT 支持全虚拟化\n        more /proc/meminfo                                       # 查看内存信息\n        dmidecode                                                # 查看全面硬件信息\n        dmidecode | grep \"Product Name\"                          # 查看服务器型号\n        dmidecode | grep -P -A5 \"Memory\\s+Device\" | grep Size | grep -v Range       # 查看内存插槽\n        cat /proc/mdstat                                         # 查看软raid信息\n        cat /proc/scsi/scsi                                      # 查看Dell硬raid信息(IBM、HP需要官方检测工具)\n        lspci                                                    # 查看硬件信息\n        lspci|grep RAID                                          # 查看是否支持raid\n        lspci -vvv |grep Ethernet                                # 查看网卡型号\n        lspci -vvv |grep Kernel|grep driver                      # 查看驱动模块\n        modinfo tg2                                              # 查看驱动版本(驱动模块)\n        ethtool -i em1                                           # 查看网卡驱动版本\n        ethtool em1                                              # 查看网卡带宽\n\n    }\n\n    终端快捷键{\n\n        Ctrl+A        　    # 行前\n        Ctrl+E        　    # 行尾\n        Ctrl+S        　    # 终端锁屏\n        Ctrl+Q        　　  # 解锁屏\n        Ctrl+D      　　    # 退出\n\n    }\n\n    开机启动模式{\n\n        vi /etc/inittab\n        id:3:initdefault:    # 3为多用户命令\n        #ca::ctrlaltdel:/sbin/shutdown -t3 -r now   # 注释此行 禁止 ctrl+alt+del 关闭计算机\n\n    }\n\n    终端提示显示{\n\n        echo $PS1                   # 环境变量控制提示显示\n        PS1='[\\u@ \\H \\w \\A \\@#]\\$'\n        PS1='[\\u@\\h \\W]\\$'\n        export PS1='[\\[\\e[32m\\]\\[\\e[31m\\]\\u@\\[\\e[36m\\]\\h \\w\\[\\e[m\\]]\\$ '     # 高亮显示终端\n\n    }\n\n    定时任务{\n\n        at 5pm + 3 days /bin/ls  # 单次定时任务 指定三天后下午5:00执行/bin/ls\n\n        crontab -e               # 编辑周期任务\n        #分钟  小时    天  月  星期   命令或脚本\n        1,30  1-3/2    *   *   *      命令或脚本  >> file.log 2>&1\n        echo \"40 7 * * 2 /root/sh\">>/var/spool/cron/work    # 普通用户可直接写入定时任务\n        crontab -l                                          # 查看自动周期性任务\n        crontab -r                                          # 删除自动周期性任务\n        cron.deny和cron.allow                               # 禁止或允许用户使用周期任务\n        service crond start|stop|restart                    # 启动自动周期性服务\n        * * * * *  echo \"d\" >>d$(date +\\%Y\\%m\\%d).log       # 让定时任务直接生成带日期的log  需要转义%\n        0 0,6,12 * * * /opt/php/bin/php xxx                 # 每天0，6，12点各执行一次\n    }\n\t\n\n    date{\n\n        星期日[SUN] 星期一[MON] 星期二[TUE] 星期三[WED] 星期四[THU] 星期五[FRI] 星期六[SAT]\n        一月[JAN] 二月[FEB] 三月[MAR] 四月[APR] 五月[MAY] 六月[JUN] 七月[JUL] 八月[AUG] 九月[SEP] 十月[OCT] 十一月[NOV] 十二月[DEC]\n\n        date -s 20091112                     # 设日期\n        date -s 18:30:50                     # 设时间\n        date -d \"7 days ago\" +%Y%m%d         # 7天前日期\n        date -d \"5 minute ago\" +%H:%M        # 5分钟前时间\n        date -d \"1 month ago\" +%Y%m%d        # 一个月前\n        date -d '1 days' +%Y-%m-%d           # 一天后\n        date -d '1 hours' +%H:%M:%S          # 一小时后\n        date +%Y-%m-%d -d '20110902'         # 日期格式转换\n        date +%Y-%m-%d_%X                    # 日期和时间\n        date +%N                             # 纳秒\n        date -d \"2012-08-13 14:00:23\" +%s    # 换算成秒计算(1970年至今的秒数)\n        date -d \"@1363867952\" +%Y-%m-%d-%T   # 将时间戳换算成日期\n        date -d \"1970-01-01 UTC 1363867952 seconds\" +%Y-%m-%d-%T  # 将时间戳换算成日期\n        date -d \"`awk -F. '{print $1}' /proc/uptime` second ago\" +\"%Y-%m-%d %H:%M:%S\"    # 格式化系统启动时间(多少秒前)\n\n    }\n\n    limits.conf{\n\n        ulimit -SHn 65535  # 临时设置文件描述符大小 进程最大打开文件柄数 还有socket最大连接数, 等同配置 nofile\n        ulimit -SHu 65535  # 临时设置用户最大进程数\n        ulimit -a          # 查看\n\n        /etc/security/limits.conf\n\n        # 文件描述符大小  open files\n        # lsof |wc -l   查看当前文件句柄数使用数量\n        * soft nofile 16384         # 设置太大，进程使用过多会把机器拖死\n        * hard nofile 32768\n\n        # 用户最大进程数  max user processes\n        # echo $((`ps uxm |wc -l`-`ps ux |wc -l`))  查看当前用户占用的进程数 [包括线程]\n        user soft nproc 16384\n        user hard nproc 32768\n\n        # 如果/etc/security/limits.d/有配置文件，将会覆盖/etc/security/limits.conf里的配置\n        # 即/etc/security/limits.d/的配置文件里就不要有同样的参量设置\n        /etc/security/limits.d/90-nproc.conf    # centos6.3的默认这个文件会覆盖 limits.conf\n        user soft nproc 16384\n        user hard nproc 32768\n\n        sysctl -p    # 修改配置文件后让系统生效\n\n    }\n\n    随机分配端口范围{\n\n        # 本机连其它端口用的\n        echo \"10000 65535\" > /proc/sys/net/ipv4/ip_local_port_range\n\n    }\n\n    百万长链接设置{\n\n        # 内存消耗需要较大\n        vim /root/.bash_profile\n        # 添加如下2行,退出bash重新登陆\n        # 一个进程不能使用超过NR_OPEN文件描述符\n        echo 20000500 > /proc/sys/fs/nr_open\n        # 当前用户最大文件数\n        ulimit -n 10000000\n\n    }\n\n    core崩溃文件查看{\n\n        gdb  core.13844\n        bt   # 查看函数调用信息(堆栈)\n\n    }\n\n\n    libc.so故障修复{\n\n        # 由于升级glibc导致libc.so不稳定,突然报错,幸好还有未退出的终端\n        grep: error while loading shared libraries: /lib64/libc.so.6: ELF file OS ABI invalid\n\n        # 看看当前系统有多少版本 libc.so\n        ls /lib64/libc-[tab]\n\n        # 更改环境变量指向其他 libc.so 文件测试\n        export LD_PRELOAD=/lib64/libc-2.7.so    # 如果不改变LD_PRELOAD变量,ln不能用,需要使用 /sbin/sln 命令做链接\n\n        # 当前如果好使了，在执行下面强制替换软链接。如不好使，测试其他版本的libc.so文件\n        ln -f -s /lib64/libc-2.7.so /lib64/libc.so.6\n\n    }\n\n    无法分配内存 {\n    \n        fork: Cannot allocate memory\n    \n        # 报错不一定是内存不够用，进程数或者线程数满了也会报这个错误， 可以适当增加 kernel.pid_max 的值，\n        cat /proc/sys/kernel/pid_max  # 默认3.2w\n    \n    }\n\n    sudo{\n\n        echo myPassword | sudo -S ls /tmp  # 直接输入sudo的密码非交互,从标准输入读取密码而不是终端设备\n        visudo                             # sudo命令权限添加  /etc/sudoers\n        用户  别名(可用all)=NOPASSWD:命令1,命令2\n        user  ALL=NOPASSWD:/bin/su         # 免root密码切换root身份\n        wangming linuxfan=NOPASSWD:/sbin/apache start,/sbin/apache restart\n        UserName ALL=(ALL) ALL\n        UserName ALL=(ALL) NOPASSWD: ALL\n        peterli        ALL=(ALL)       NOPASSWD:/sbin/service\n        Defaults requiretty                # sudo不允许后台运行,注释此行既允许\n        Defaults !visiblepw                # sudo不允许远程,去掉!既允许\n\n    }\n\n    grub开机启动项添加{\n\n        vim /etc/grub.conf\n        title ms-dos\n        rootnoverify (hd0,0)\n        chainloader +1\n\n    }\n\n    stty{\n\n        #stty时一个用来改变并打印终端行设置的常用命令\n\n        stty iuclc          # 在命令行下禁止输出大写\n        stty -iuclc         # 恢复输出大写\n        stty olcuc          # 在命令行下禁止输出小写\n        stty -olcuc         # 恢复输出小写\n        stty size           # 打印出终端的行数和列数\n        stty eof \"string\"   # 改变系统默认ctrl+D来表示文件的结束\n        stty -echo          # 禁止回显\n        stty echo           # 打开回显\n        stty -echo;read;stty echo;read  # 测试禁止回显\n        stty igncr          # 忽略回车符\n        stty -igncr         # 恢复回车符\n        stty erase '#'      # 将#设置为退格字符\n        stty erase '^?'     # 恢复退格字符\n\n        定时输入{\n\n            timeout_read(){\n                timeout=$1\n                old_stty_settings=`stty -g`　　# save current settings\n                stty -icanon min 0 time 100　　# set 10seconds,not 100seconds\n                eval read varname　　          # =read $varname\n                stty \"$old_stty_settings\"　　  # recover settings\n            }\n\n            read -t 10 varname    # 更简单的方法就是利用read命令的-t选项\n\n        }\n\n        检测用户按键{\n\n            #!/bin/bash\n            old_tty_settings=$(stty -g)   # 保存老的设置(为什么?).\n            stty -icanon\n            Keypress=$(head -c1)          # 或者使用$(dd bs=1 count=1 2> /dev/null)\n            echo \"Key pressed was \\\"\"$Keypress\"\\\".\"\n            stty \"$old_tty_settings\"      # 恢复老的设置.\n            exit 0\n\n        }\n\n    }\n\n    iptables{\n\n        内建三个表：nat mangle 和 filter\n        filter预设规则表，有INPUT、FORWARD 和 OUTPUT 三个规则链\n        vi /etc/sysconfig/iptables    # 配置文件\n        INPUT    # 进入\n        FORWARD  # 转发\n        OUTPUT   # 出去\n        ACCEPT   # 将封包放行\n        REJECT   # 拦阻该封包\n        DROP     # 丢弃封包不予处理\n        -A       # 在所选择的链(INPUT等)末添加一条或更多规则\n        -D       # 删除一条\n        -E       # 修改\n        -p       # tcp、udp、icmp    0相当于所有all    !取反\n        -P       # 设置缺省策略(与所有链都不匹配强制使用此策略)\n        -s       # IP/掩码    (IP/24)    主机名、网络名和清楚的IP地址 !取反\n        -j       # 目标跳转，立即决定包的命运的专用内建目标\n        -i       # 进入的（网络）接口 [名称] eth0\n        -o       # 输出接口[名称]\n        -m       # 模块\n        --sport  # 源端口\n        --dport  # 目标端口\n\n        iptables -F                        # 将防火墙中的规则条目清除掉  # 注意: iptables -P INPUT ACCEPT\n        iptables-restore < 规则文件        # 导入防火墙规则\n        /etc/init.d/iptables save          # 保存防火墙设置\n        /etc/init.d/iptables restart       # 重启防火墙服务\n        iptables -L -n                     # 查看规则\n        iptables -t nat -nL                # 查看转发\n\n        iptables实例{\n\n            iptables -L INPUT                   # 列出某规则链中的所有规则\n            iptables -X allowed                 # 删除某个规则链 ,不加规则链，清除所有非内建的\n            iptables -Z INPUT                   # 将封包计数器归零\n            iptables -N allowed                 # 定义新的规则链\n            iptables -P INPUT DROP              # 定义过滤政策\n            iptables -A INPUT -s 192.168.1.1    # 比对封包的来源IP   # ! 192.168.0.0/24  ! 反向对比\n            iptables -A INPUT -d 192.168.1.1    # 比对封包的目的地IP\n            iptables -A INPUT -i eth0           # 比对封包是从哪片网卡进入\n            iptables -A FORWARD -o eth0         # 比对封包要从哪片网卡送出 eth+表示所有的网卡\n            iptables -A INPUT -p tcp            # -p ! tcp 排除tcp以外的udp、icmp。-p all所有类型\n            iptables -D INPUT 8                 # 从某个规则链中删除一条规则\n            iptables -D INPUT --dport 80 -j DROP         # 从某个规则链中删除一条规则\n            iptables -R INPUT 8 -s 192.168.0.1 -j DROP   # 取代现行规则\n            iptables -I INPUT 8 --dport 80 -j ACCEPT     # 插入一条规则\n            iptables -A INPUT -i eth0 -j DROP            # 其它情况不允许\n            iptables -A INPUT -p tcp -s IP -j DROP       # 禁止指定IP访问\n            iptables -A INPUT -p tcp -s IP --dport port -j DROP               # 禁止指定IP访问端口\n            iptables -A INPUT -s IP -p tcp --dport port -j ACCEPT             # 允许在IP访问指定端口\n            iptables -A INPUT -p tcp --dport 22 -j DROP                       # 禁止使用某端口\n            iptables -A INPUT -i eth0 -p icmp -m icmp --icmp-type 8 -j DROP   # 禁止icmp端口\n            iptables -A INPUT -i eth0 -p icmp -j DROP                         # 禁止icmp端口\n            iptables -t filter -A INPUT -i eth0 -p tcp --syn -j DROP                  # 阻止所有没有经过你系统授权的TCP连接\n            iptables -A INPUT -f -m limit --limit 100/s --limit-burst 100 -j ACCEPT   # IP包流量限制\n            iptables -A INPUT -i eth0 -s 192.168.62.1/32 -p icmp -m icmp --icmp-type 8 -j ACCEPT  # 除192.168.62.1外，禁止其它人ping我的主机\n            iptables -A INPUT -p tcp -m tcp --dport 80 -m state --state NEW -m recent --update --seconds 5 --hitcount 20 --rttl --name WEB --rsource -j DROP  # 可防御cc攻击(未测试)\n\n        }\n\n        iptables配置实例文件{\n\n            # Generated by iptables-save v1.2.11 on Fri Feb  9 12:10:37 2007\n            *filter\n            :INPUT ACCEPT [637:58967]\n            :FORWARD DROP [0:0]\n            :OUTPUT ACCEPT [5091:1301533]\n            # 允许的IP或IP段访问 建议多个\n            -A INPUT -s 127.0.0.1 -p tcp -j ACCEPT\n            -A INPUT -s 192.168.0.0/255.255.0.0 -p tcp -j ACCEPT\n            # 开放对外开放端口\n            -A INPUT -p tcp --dport 80 -j ACCEPT\n            # 指定某端口针对IP开放\n            -A INPUT -s 192.168.10.37 -p tcp --dport 22 -j ACCEPT\n            # 拒绝所有协议(INPUT允许)\n            -A INPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,PSH,URG RST -j DROP\n            # 允许已建立的或相关连的通行\n            -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\n            # 拒绝ping\n            -A INPUT -p tcp -m tcp -j REJECT --reject-with icmp-port-unreachable\n            COMMIT\n            # Completed on Fri Feb  9 12:10:37 2007\n\n        }\n\n        iptables配置实例{\n\n            # 允许某段IP访问任何端口\n            iptables -A INPUT -s 192.168.0.3/24 -p tcp -j ACCEPT\n            # 设定预设规则 (拒绝所有的数据包，再允许需要的,如只做WEB服务器.还是推荐三个链都是DROP)\n            iptables -P INPUT DROP\n            iptables -P FORWARD DROP\n            iptables -P OUTPUT ACCEPT\n            # 注意: 直接设置这三条会掉线\n            # 开启22端口\n            iptables -A INPUT -p tcp --dport 22 -j ACCEPT\n            # 如果OUTPUT 设置成DROP的，要写上下面一条\n            iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT\n            # 注:不写导致无法SSH.其他的端口一样,OUTPUT设置成DROP的话,也要添加一条链\n            # 如果开启了web服务器,OUTPUT设置成DROP的话,同样也要添加一条链\n            iptables -A OUTPUT -p tcp --sport 80 -j ACCEPT\n            # 做WEB服务器,开启80端口 ,其他同理\n            iptables -A INPUT -p tcp --dport 80 -j ACCEPT\n            # 做邮件服务器,开启25,110端口\n            iptables -A INPUT -p tcp --dport 110 -j ACCEPT\n            iptables -A INPUT -p tcp --dport 25 -j ACCEPT\n            # 允许icmp包通过,允许ping\n            iptables -A OUTPUT -p icmp -j ACCEPT (OUTPUT设置成DROP的话)\n            iptables -A INPUT -p icmp -j ACCEPT  (INPUT设置成DROP的话)\n            # 允许loopback!(不然会导致DNS无法正常关闭等问题)\n            IPTABLES -A INPUT -i lo -p all -j ACCEPT (如果是INPUT DROP)\n            IPTABLES -A OUTPUT -o lo -p all -j ACCEPT(如果是OUTPUT DROP)\n\n        }\n\n        centos6的iptables基本配置{\n            *filter\n            :INPUT ACCEPT [0:0]\n            :FORWARD ACCEPT [0:0]\n            :OUTPUT ACCEPT [0:0]\n            -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\n            -A INPUT -p icmp -j ACCEPT\n            -A INPUT -i lo -j ACCEPT\n            -A INPUT -s 222.186.135.61 -p tcp -j ACCEPT\n            -A INPUT -p tcp  --dport 80 -j ACCEPT\n            -A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT\n            -A INPUT -j REJECT --reject-with icmp-host-prohibited\n            -A INPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,PSH,URG RST -j DROP\n            -A FORWARD -j REJECT --reject-with icmp-host-prohibited\n            COMMIT\n        }\n\n        添加网段转发{\n\n            # 例如通过vpn上网\n            echo 1 > /proc/sys/net/ipv4/ip_forward       # 在内核里打开ip转发功能\n            iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -j MASQUERADE  # 添加网段转发\n            iptables -t nat -A POSTROUTING -s 10.0.0.0/255.0.0.0 -o eth0 -j SNAT --to 192.168.10.158  # 原IP网段经过哪个网卡IP出去\n            iptables -t nat -nL                # 查看转发\n\n        }\n\n        端口映射{\n\n            # 内网通过有外网IP的机器映射端口\n            # 内网主机添加路由\n            route add -net 10.10.20.0 netmask 255.255.255.0 gw 10.10.20.111     # 内网需要添加默认网关，并且网关开启转发\n            # 网关主机\n            echo 1 > /proc/sys/net/ipv4/ip_forward       # 在内核里打开ip转发功能\n            iptables -t nat -A PREROUTING -d 外网IP  -p tcp --dport 9999 -j DNAT --to 10.10.20.55:22    # 进入\n            iptables -t nat -A POSTROUTING -s 10.10.20.0/24 -j SNAT --to 外网IP                         # 转发回去\n            iptables -t nat -nL                # 查看转发\n\n        }\n\n    }\n\n}\n\n4 服务{\n\n    /etc/init.d/sendmail start                   # 启动服务\n    /etc/init.d/sendmail stop                    # 关闭服务\n    /etc/init.d/sendmail status                  # 查看服务当前状态\n    /date/mysql/bin/mysqld_safe --user=mysql &   # 启动mysql后台运行\n    /bin/systemctl restart  mysqld.service       # centos7启动服务\n    vi /etc/rc.d/rc.local                        # 开机启动执行  可用于开机启动脚本\n    /etc/rc.d/rc3.d/S55sshd                      # 开机启动和关机关闭服务连接    # S开机start  K关机stop  55级别 后跟服务名\n    ln -s -f /date/httpd/bin/apachectl /etc/rc.d/rc3.d/S15httpd   # 将启动程序脚本连接到开机启动目录\n    ipvsadm -ln                                  # lvs查看后端负载机并发\n    ipvsadm -C                                   # lvs清除规则\n    xm list                                      # 查看xen虚拟主机列表\n    virsh                                        # 虚拟化(xen\\kvm)管理工具  yum groupinstall Virtual*\n    ./bin/httpd -M                               # 查看httpd加载模块\n    httpd -t -D DUMP_MODULES                     # rpm包httpd查看加载模块\n    echo 内容| /bin/mail -s \"标题\" 收件箱 -f 发件人       # 发送邮件\n    \"`echo \"内容\"|iconv -f utf8 -t gbk`\" | /bin/mail -s \"`echo \"标题\"|iconv -f utf8 -t gbk`\" 收件箱     # 解决邮件乱码\n    /usr/local/nagios/bin/nagios -v /usr/local/nagios/etc/nagios.cfg   # 检测nagios配置文件\n\n    chkconfig{\n\n        chkconfig service on|off|set             # 设置非独立服务启状态\n        chkconfig --level 35   httpd   off       # 让服务不自动启动\n        chkconfig --level 35   httpd   on        # 让服务自动启动 35指的是运行级别\n        chkconfig --list                         # 查看所有服务的启动状态\n        chkconfig --list |grep httpd             # 查看某个服务的启动状态\n        chkconfig –-list [service]               # 查看服务的状态\n\n    }\n\n    systemctl{\n\n        systemctl is-active *.service      # 查看服务是否运行\n        systemctl is-enabled *.service     # 查询服务是否开机启动\n        systemctl mask *.service           # 注销指定服务\n        systemctl unmask cups.service      # 取消注销cups服务\n        systemctl enable *.service         # 开机运行服务\n        systemctl disable *.service        # 取消开机运行\n        systemctl start *.service          # 启动服务\n        systemctl stop *.service           # 停止服务\n        systemctl restart *.service        # 重启服务\n        systemctl reload *.service         # 重新加载服务配置文件\n        systemctl status *.service         # 查询服务运行状态\n        systemctl --failed                 # 显示启动失败的服务\n        systemctl poweroff                 # 系统关机\n        systemctl reboot                   # 重新启动\n        systemctl rescue                   # 强制进入救援模式\n        systemctl emergency                # 强制进入紧急救援模式\n        systemctl list-dependencies        # 查看当前运行级别target(mult-user)启动了哪些服务\n        systemctl list-unit-files          # 查看开机启动的状态\n        journalctl -r -u elasticsearch.service  # 查看日志 r倒序 u服务名\n        /etc/systemd/system/falcon-agent.service\n            [Unit]\n            Description=This is zuiyou monitor agent\n            After=network.target remote-fs.target nss-lookup.target\n\n            [Service]\n            User= root\n            Type=simple\n            PIDFile=/opt/falcon-agent/var/app.pid\n            ExecStartPre=/usr/bin/rm -f /opt/falcon-agent/var/app.pid\n            ExecStart=/opt/falcon-agent/control start\n            ExecReload=/bin/kill -s HUP $MAINPID\n            KillMode=process\n            KillSignal=SIGQUIT\n            TimeoutStopSec=5\n            PrivateTmp=true\n            Restart=always\n            LimitNOFILE=infinity\n\n            [Install]\n            WantedBy=multi-user.target\n\n        systemctl daemon-reload           # 加载配置\n\n    }\n\n\n    nginx{\n\n        yum install -y make gcc  openssl-devel pcre-devel  bzip2-devel libxml2 libxml2-devel curl-devel libmcrypt-devel libjpeg libjpeg-devel libpng libpng-devel openssl\n\n        groupadd nginx\n        useradd nginx -g nginx -M -s /sbin/nologin\n\n        mkdir -p /opt/nginx-tmp\n\n        wget http://labs.frickle.com/files/ngx_cache_purge-1.6.tar.gz\n        tar fxz ngx_cache_purge-1.6.tar.gz\n        # ngx_cache_purge 清除指定url缓存\n        # 假设一个URL为 http://192.168.12.133/test.txt\n        # 通过访问      http://192.168.12.133/purge/test.txt  就可以清除该URL的缓存。\n\n        tar zxvpf nginx-1.4.4.tar.gz\n        cd nginx-1.4.4\n\n        # ./configure --help\n        # --with                 # 默认不加载 需指定编译此参数才使用\n        # --without              # 默认加载，可用此参数禁用\n        # --add-module=path      # 添加模块的路径\n        # --add-module=/opt/ngx_module_upstream_check \\         # nginx 代理状态页面\n        # ngx_module_upstream_check  编译前需要打对应版本补丁 patch -p1 < /opt/nginx_upstream_check_module/check_1.2.6+.patch\n        # --add-module=/opt/ngx_module_memc \\                   # 将请求页面数据存放在 memcached中\n        # --add-module=/opt/ngx_module_lua \\                    # 支持lua脚本 yum install lua-devel lua\n\n        ./configure \\\n        --user=nginx \\\n        --group=nginx \\\n        --prefix=/usr/local/nginx \\\n        --with-http_ssl_module \\\n        --with-http_realip_module \\\n        --with-http_gzip_static_module \\\n        --with-http_stub_status_module \\\n        --add-module=/opt/ngx_cache_purge-1.6 \\\n        --http-client-body-temp-path=/opt/nginx-tmp/client \\\n        --http-proxy-temp-path=/opt/nginx-tmp/proxy \\\n        --http-fastcgi-temp-path=/opt/nginx-tmp/fastcgi \\\n        --http-uwsgi-temp-path=/opt/nginx-tmp/uwsgi \\\n        --http-scgi-temp-path=/opt/nginx-tmp/scgi\n\n        make && make install\n\n        /usr/local/nginx/sbin/nginx –t             # 检查Nginx配置文件 但并不执行\n        /usr/local/nginx/sbin/nginx -t -c /opt/nginx/conf/nginx.conf  # 检查Nginx配置文件\n        /usr/local/nginx/sbin/nginx                # 启动nginx\n        /usr/local/nginx/sbin/nginx -s reload      # 重载配置\n        /usr/local/nginx/sbin/nginx -s stop        # 关闭nginx服务\n\n        # location详解\n\t\t## 匹配顺序：先普通location后正则location\n\t\t- ~ 或 ~* 表正则location       # ~ 区分大小写, ~*不区分大小写\n\t\t- 两种情况下只匹配普通location：当^~或严格匹配(如=a)\n\t\t\n\t\t## 普通location\n\t\t- 越具体越匹配\n\t\t- 匹配最大前缀后还得正则匹配\n\t\t## 正则匹配 \n\t\t- 一匹配到就不再匹配(按顺序)\n    }\n\t\n\t\n    elasticsearch{\n\n        vim /etc/sysctl.conf\n        vm.max_map_count = 262144\n\n        vim /etc/security/limits.conf\n        * soft memlock unlimited\n        * hard memlock unlimited\n        sysctl -p\n\n        curl 'localhost:9200/_cat/health?v'                    # 健康检查\n        curl 'localhost:9200/_cat/nodes?v'                     # 获取集群的节点列表\n        curl 'localhost:9200/_cat/indices?v'                   # 列出所有索引\n        curl 127.0.0.1:9200/indexname -XDELETE                 # 删除索引\n        curl -XGET http://localhost:9200/_cat/shards           # 查看分片\n        curl '127.0.0.1:9200/_cat/indices'                     # 查分片同步  unassigned_shards  # 没同步完成\n\n    }\n\n\n    mysql常用命令{\n\n        # mysql 可视化工具 MySQL Workbench\n\n        mysqlcheck -uroot -p -S mysql.sock --optimize --databases account       # 检查、修复、优化MyISAM表\n        mysqlbinlog slave-relay-bin.000001              # 查看二进制日志\n        mysqladmin -h myhost -u root -p create dbname   # 创建数据库\n\n        flush privileges;             # 刷新\n        show databases;               # 显示所有数据库\n        use dbname;                   # 打开数据库\n        show tables;                  # 显示选中数据库中所有的表\n        desc tables;                  # 查看表结构\n        drop database name;           # 删除数据库\n        drop table name;              # 删除表\n        create database name;         # 创建数据库\n        select column from table;     # 查询\n        show processlist;             # 查看mysql进程\n        show full processlist;        # 显示进程全的语句\n        select user();                # 查看所有用户\n        show slave status\\G;          # 查看主从状态\n        show variables;               # 查看所有参数变量\n        show status;                  # 运行状态\n        show table status             # 查看表的引擎状态\n        show grants for user@'%'                                    # 查看用户权限\n        drop table if exists user                                   # 表存在就删除\n        create table if not exists user                             # 表不存在就创建\n        select host,user,password from user;                        # 查询用户权限 先use mysql\n        create table ka(ka_id varchar(6),qianshu int);              # 创建表\n        show variables like 'character_set_%';                      # 查看系统的字符集和排序方式的设定\n        show variables like '%timeout%';                            # 查看超时相关参数\n        delete from user where user='';                             # 删除空用户\n        delete from user where user='sss' and host='localhost' ;    # 删除用户\n        drop user 'sss'@'localhost';                                # 使用此方法删除用户更为靠谱\n        ALTER TABLE mytable ENGINE = MyISAM ;                       # 改变现有的表使用的存储引擎\n        SHOW TABLE STATUS from  dbname  where Name='tablename';     # 查询表引擎\n        mysql -uroot -p -A -ss -h10.10.10.5 -e \"show databases;\"    # shell中获取数据不带表格 -ss参数\n        CREATE TABLE innodb (id int, title char(20)) ENGINE = INNODB                     # 创建表指定存储引擎的类型(MyISAM或INNODB)\n        grant replication slave on *.* to 'user'@'%' identified by 'pwd';                # 创建主从复制用户\n        ALTER TABLE player ADD INDEX weekcredit_faction_index (weekcredit, faction);     # 添加索引\n        alter table name add column accountid(column)  int(11) NOT NULL(column);         # 插入字段\n        update host set monitor_state='Y',hostname='xuesong' where ip='192.168.1.1';     # 更新数据\n        select * from information_schema.processlist where command!='sleep';             # 查看当前进程\n        select * from atable where name='on' AND t<15 AND host LIKE '10%' limit 1,10;    # 多条件查询\n        show create database ops_deploy;                                                 # 查看数据库编码\n        show create table updatelog;                                                     # 查看数据库表编码\n        alter database ops_deploy CHARACTER SET utf8;                                    # 修改数据库编码\n        alter table `updatelog` default character set utf8;                              # 修改表编码\n        alter table `updatelog` convert to character set utf8;                           # 修改一张表的所有字段的编码格式\n\n        自增表{\n\n            create table xuesong  (id INTEGER  PRIMARY KEY AUTO_INCREMENT, name CHAR(30) NOT NULL, age integer , sex CHAR(15) );  # 创建自增表\n            insert into xuesong(name,age,sex) values(%s,%s,%s)  # 自增插入数据\n\n        }\n\n        登录mysql的命令{\n\n            # 格式： mysql -h 主机地址 -u 用户名 -p 用户密码\n            mysql -h110.110.110.110 -P3306 -uroot -p\n            mysql -uroot -p -S /data1/mysql5/data/mysql.sock -A  --default-character-set=GBK\n\n        }\n\n        shell执行mysql命令{\n\n            mysql -u root -p'123' xuesong < file.sql   # 针对指定库执行sql文件中的语句,好处不需要转义特殊符号,一条语句可以换行.不指定库执行时语句中需要先use\n            mysql -u$username -p$passwd -h$dbhost -P$dbport -A -e \"\n            use $dbname;\n            delete from data where date=('$date1');\n            \"    # 执行多条mysql命令\n            mysql -uroot -p -S mysql.sock -e \"use db;alter table gift add column accountid  int(11) NOT NULL;flush privileges;\"  2>&1 |grep -v Warning    # 不登陆mysql插入字段\n\n        }\n\n\n        mysql字符集相关{\n\n            show variables like '%character%';      # 查看数据库中设置字符集的参数\n            # character_set_client、character_set_connection 以及 character_set_results 这几个参数都是客户端的设置\n            # character_set_system、character_set_server 以及 character_set_database 是指服务器端的设置。\n            # 而对于这三个服务器端的参数来说的优先级是:\n            # 列级字符集 > 表级字符集 > character_set_database > character_set_server > character_set_system\n\n            show global variables like '%char%';                                 #查看RDS实例字符集相关参数设置\n            show global variables like 'coll%';                                  #查看当前会话字符序相关参数设置\n            show character set;                                                  #查看实例支持的字符集\n            show collation;                                                      #查看实例支持的字符序\n            show create table table_name \\G                                      #查看表字符集设置\n            show create database database_name \\G                                #查看数据库字符集设置\n            show create procedure procedure_name \\G                              #查看存储过程字符集设置\n            show procedure status \\G                                             #查看存储过程字符集设置\n            alter database db_name default charset utf8;                         #修改数据库的字符集 \n            create database db_name character set utf8;                          #创建数据库时指定字符集\n            alter table tab_name default charset utf8 collate utf8_general_ci;   #修改表字符集和字符序\n\n            # 下面三条sql 分别将库 dbsdq , 表 tt2 , 表 tt2 中的 c2 列修改为utf8mb4 字符集\n            alter database dbsdq character set utf8mb4 collate utf8mb4_unicode_ci;\n            use dbsdq;\n            alter table tt2 character set utf8mb4 collate utf8mb4_unicode_ci;\n            alter table tt2 modify c2  varchar(10) character set utf8mb4;\n            # 修改列时,当前列中的所有行都会立即转化为新的字符集;\n            # alter table 会对表加元数据锁\n\n        }\n\n        备份数据库{\n\n            mysqldump -h host -u root -p --default-character-set=utf8 dbname >dbname_backup.sql               # 不包括库名，还原需先创建库，在use\n            mysqldump -h host -u root -p --database --default-character-set=utf8 dbname >dbname_backup.sql    # 包括库名，还原不需要创建库\n            /bin/mysqlhotcopy -u root -p    # mysqlhotcopy只能备份MyISAM引擎\n            mysqldump -u root -p -S mysql.sock --default-character-set=utf8 dbname table1 table2  > /data/db.sql    # 备份表\n            mysqldump -uroot -p123  -d database > database.sql    # 备份数据库结构\n\n            # 最小权限备份\n            grant select on db_name.* to dbbackup@\"localhost\" Identified by \"passwd\";\n            # --single-transaction  InnoDB有时间戳 只备份开始那一刻的数据,备份过程中的数据不会备份\n            mysqldump -hlocalhost -P 3306 -u dbbackup --single-transaction  -p\"passwd\" --database dbname >dbname.sql\n\n            # xtrabackup备份需单独安装软件 优点: 速度快,压力小,可直接恢复主从复制\n            innobackupex --user=root --password=\"\" --defaults-file=/data/mysql5/data/my_3306.cnf --socket=/data/mysql5/data/mysql.sock --slave-info --stream=tar --tmpdir=/data/dbbackup/temp /data/dbbackup/ 2>/data/dbbackup/dbbackup.log | gzip 1>/data/dbbackup/db50.tar.gz\n\n        }\n\n        还原数据库{\n\n            mysql -h host -u root -p dbname < dbname_backup.sql\n            source 路径.sql   # 登陆mysql后还原sql文件\n\n        }\n\n        赋权限{\n\n            # 指定IP: $IP  本机: localhost   所有IP地址: %   # 通常指定多条\n            grant all on zabbix.* to user@\"$IP\";             # 对现有账号赋予权限\n            grant select on database.* to user@\"%\" Identified by \"passwd\";     # 赋予查询权限(没有用户，直接创建)\n            grant all privileges on database.* to user@\"$IP\" identified by 'passwd';         # 赋予指定IP指定用户所有权限(不允许对当前库给其他用户赋权限)\n            grant all privileges on database.* to user@\"localhost\" identified by 'passwd' with grant option;   # 赋予本机指定用户所有权限(允许对当前库给其他用户赋权限)\n            grant select, insert, update, delete on database.* to user@'ip'identified by \"passwd\";   # 开放管理操作指令\n            revoke all on *.* from user@localhost;     # 回收权限\n            GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER, EXECUTE, CREATE ROUTINE, ALTER ROUTINE ON `storemisc_dev`.* TO 'user'@'192.168.%'\n\n        }\n\n        更改密码{\n\n            update user set password=password('passwd') where user='root'\n            mysqladmin -u root password 'xuesong'\n\n        }\n\n        mysql忘记密码后重置{\n\n            cd /data/mysql5\n            /data/mysql5/bin/mysqld_safe --user=mysql --skip-grant-tables --skip-networking &\n            use mysql;\n            update user set password=password('123123') where user='root';\n\n        }\n\n        mysql主从复制失败恢复{\n\n            slave stop;\n            reset slave;\n            change master to master_host='10.10.10.110',master_port=3306,master_user='repl',master_password='repl',master_log_file='master-bin.000010',master_log_pos=107,master_connect_retry=60;\n            slave start;\n\n        }\n\n        sql语句使用变量{\n\n            use xuesong;\n            set @a=concat('my',weekday(curdate()));    # 组合时间变量\n            set @sql := concat('CREATE TABLE IF NOT EXISTS ',@a,'( id INT(11) NOT NULL )');   # 组合sql语句\n            select @sql;                    # 查看语句\n            prepare create_tb from @sql;    # 准备\n            execute create_tb;              # 执行\n\n        }\n\n        检测mysql主从复制延迟{\n\n            1、在从库定时执行更新主库中的一个timeout数值\n            2、同时取出从库中的timeout值对比判断从库与主库的延迟\n\n        }\n\n        死锁{\n\n            show OPEN TABLES where In_use > 0;                  # 查看当前锁信息\n            show variables like 'innodb_print_all_deadlocks';   # 查看当前死锁参数\n            set global innodb_print_all_deadlocks = 1;          # 设置死锁信息保存到错误日志\n            innodb_print_all_deadlocks = 1                      # conf配置\n\n        }\n\n        mysql慢查询{\n\n            select * from information_schema.processlist where command in ('Query') and time >5\\G      # 查询操作大于5S的进程\n\n            开启慢查询日志{\n\n                # 配置文件 /etc/my.conf\n                [mysqld]\n                log-slow-queries=/var/lib/mysql/slowquery.log         # 指定日志文件存放位置，可以为空，系统会给一个缺省的文件host_name-slow.log\n                long_query_time=5                                     # 记录超过的时间，默认为10s 建议0.5S\n                log-queries-not-using-indexes                         # log下来没有使用索引的query,可以根据情况决定是否开启  可不加\n                log-long-format                                       # 如果设置了，所有没有使用索引的查询也将被记录    可不加\n                # 直接修改生效\n                show variables like \"%slow%\";                         # 查看慢查询状态\n                set global slow_query_log='ON';                       # 开启慢查询日志 变量可能不同，看上句查询出来的变量\n\n            }\n\n            mysqldumpslow慢查询日志查看{\n\n                -s  # 是order的顺序，包括看了代码，主要有 c,t,l,r和ac,at,al,ar，分别是按照query次数，时间，lock的时间和返回的记录数来排序，前面加了a的时倒序\n                -t  # 是top n的意思，即为返回前面多少条的数据\n                -g  # 后边可以写一个正则匹配模式，大小写不敏感的\n\n                mysqldumpslow -s c -t 20 host-slow.log                # 访问次数最多的20个sql语句\n                mysqldumpslow -s r -t 20 host-slow.log                # 返回记录集最多的20个sql\n                mysqldumpslow -t 10 -s t -g \"left join\" host-slow.log # 按照时间返回前10条里面含有左连接的sql语句\n\n                show global status like '%slow%';                     # 查看现在这个session有多少个慢查询\n                show variables like '%slow%';                         # 查看慢查询日志是否开启，如果slow_query_log和log_slow_queries显示为on，说明服务器的慢查询日志已经开启\n                show variables like '%long%';                         # 查看超时阀值\n                desc select * from wei where text='xishizhaohua'\\G;   # 扫描整张表 tepe:ALL  没有使用索引 key:NULL\n                create index text_index on wei(text);                 # 创建索引\n\n            }\n\n            Percona Toolkit 慢日志分析工具\n\n        }\n\n        mysql操作次数查询{\n\n            select * from information_schema.global_status;\n\n            com_select\n            com_delete\n            com_insert\n            com_update\n\n        }\n\n    }\n\n    mongodb{\n\n        # mongo可视管理工具 studio 3t  \n\n        一、启动{\n\n            # 不启动认证\n            ./mongod --port 27017 --fork --logpath=/opt/mongodb/mongodb.log --logappend --dbpath=/opt/mongodb/data/\n            # 启动认证\n            ./mongod --port 27017 --fork --logpath=/opt/mongodb/mongodb.log --logappend --dbpath=/opt/mongodb/data/ --auth\n\n            # 配置文件方式启动\n            cat /opt/mongodb/mongodb.conf\n              port=27017                       # 端口号\n              fork=true                        # 以守护进程的方式运行，创建服务器进程\n              auth=true                        # 开启用户认证\n              logappend=true                   # 日志采用追加方式\n              logpath=/opt/mongodb/mongodb.log # 日志输出文件路径\n              dbpath=/opt/mongodb/data/        # 数据库路径\n              shardsvr=true                    # 设置是否分片\n              maxConns=600                     # 数据库的最大连接数\n            ./mongod -f /opt/mongodb/mongodb.conf\n\n            # 其他参数\n            bind_ip         # 绑定IP  使用mongo登录需要指定对应IP\n            journal         # 开启日志功能,降低单机故障的恢复时间,取代dur参数\n            syncdelay       # 系统同步刷新磁盘的时间,默认60秒\n            directoryperdb  # 每个db单独存放目录,建议设置.与mysql独立表空间类似\n            repairpath      # 执行repair时的临时目录.如果没开启journal,出现异常重启,必须执行repair操作\n            # mongodb没有参数设置内存大小.使用os mmap机制缓存数据文件,在数据量不超过内存的情况下,效率非常高.数据量超过系统可用内存会影响写入性能\n\n        }\n\n        二、关闭{\n\n            # 方法一:登录mongodb\n            ./mongo\n            use admin\n            db.shutdownServer()\n\n            # 方法:kill传递信号  两种皆可\n            kill -2 pid\n            kill -15 pid\n\n        }\n\n        三、开启认证与用户管理{\n\n            ./mongo                      # 先登录\n            use admin                    # 切换到admin库\n            db.addUser(\"root\",\"123456\")                     # 创建用户\n            db.addUser('zhansan','pass',true)               # 如果用户的readOnly为true那么这个用户只能读取数据，添加一个readOnly用户zhansan\n            ./mongo 127.0.0.1:27017/mydb -uroot -p123456    # 再次登录,只能针对用户所在库登录\n            #虽然是超级管理员，但是admin不能直接登录其他数据库，否则报错\n            #Fri Nov 22 15:03:21.886 Error: 18 { code: 18, ok: 0.0, errmsg: \"auth fails\" } at src/mongo/shell/db.js:228\n            show collections                                # 查看链接状态 再次登录使用如下命令,显示错误未经授权\n            db.system.users.find();                         # 查看创建用户信息\n            db.system.users.remove({user:\"zhansan\"})        # 删除用户\n\n            #恢复密码只需要重启mongodb 不加--auth参数\n\n        }\n\n        四、登录{\n\n            192.168.1.5:28017      # http登录后可查看状态\n            mongo                  # 默认登录后打开 test 库\n            mongo 192.168.1.5:27017/databaseName      # 直接连接某个库 不存在则创建  启动认证需要指定对应库才可登录\n\n        }\n\n        五、查看状态{\n\n            #登录后执行命令查看状态\n            db.runCommand({\"serverStatus\":1})\n                globalLock         # 表示全局写入锁占用了服务器多少时间(微秒)\n                mem                # 包含服务器内存映射了多少数据,服务器进程的虚拟内存和常驻内存的占用情况(MB)\n                indexCounters      # 表示B树在磁盘检索(misses)和内存检索(hits)的次数.如果这两个比值开始上升,就要考虑添加内存了\n                backgroudFlushing  # 表示后台做了多少次fsync以及用了多少时间\n                opcounters         # 包含每种主要擦撞的次数\n                asserts            # 统计了断言的次数\n\n            #状态信息从服务器启动开始计算,如果过大就会复位,发送复位，所有计数都会复位,asserts中的roolovers值增加\n\n            #mongodb自带的命令\n            ./mongostat\n                insert     #每秒插入量\n                query      #每秒查询量\n                update     #每秒更新量\n                delete     #每秒删除量\n                locked     #锁定量\n                qr|qw      #客户端查询排队长度(读|写)\n                ar|aw      #活跃客户端量(读|写)\n                conn       #连接数\n                time       #当前时间\n\n            mongostat -h 127.0.0.1 --port 27047 --authenticationDatabase admin -u zadmin -p Keaphh9e    # 查看mongo状态\n            mongotop  -h 127.0.0.1 --port 27047 --authenticationDatabase admin -u zadmin -p Keaphh9e    # 查看mongo集合的统计数据\n\n        }\n\n        六、常用命令{\n\n            db.listCommands()     # 当前MongoDB支持的所有命令（同样可通过运行命令db.runCommand({\"listCommands\" : `1})来查询所有命令）\n\n            db.runCommand({\"buildInfo\" : 1})                                  # 返回MongoDB服务器的版本号和服务器OS的相关信息\n            db.runCommand({\"collStats\" : tablename})                          # 返回该集合的统计信息，包括数据大小，已分配存储空间大小，索引的大小等\n            db.runCommand({\"dropDatabase\" : 1})                               # 清空当前数据库的信息，包括删除所有的集合和索引\n            db.runCommand({\"isMaster\" : 1})                                   # 检查本服务器是主服务器还是从服务器\n            db.runCommand({\"ping\" : 1})                                       # 检查服务器链接是否正常。即便服务器上锁，该命令也会立即返回\n            db.runCommand({\"repaireDatabase\" : 1})                            # 对当前数据库进行修复并压缩，如果数据库特别大，这个命令会非常耗时\n            db.runCommand({\"serverStatus\" : 1})                               # 查看这台服务器的管理统计信息\n            # 某些命令必须在admin数据库下运行，如下两个命令：\n            db.runCommand({\"renameCollection\" : 集合名, \"to\"：集合名})          # 对集合重命名，注意两个集合名都要是完整的集合命名空间，如foo.bar, 表示数据库foo下的集合bar。\n            db.runCommand({\"listDatabases\" : 1})                              # 列出服务器上所有的数据库\n\n            mongo  172.20.20.1:27072/mdb --eval \"db.tb.count();\"              # shell执行mongo语句\n            mongo --host  172.20.20.1 --port 27049\n\n            rs.config();                                                      # 查看集群配置\n            rs.status();                                                      # 查看集群节点的状态\n            db.currentOp()                                                    # 获取当前正在执行的操作,可对应命令链接到ip:port\n            db.runCommand( { logRotate : 1 } )                                # 日志轮转\n            rs.slaveOk()                                                      # 设置从库shell可读\n            rs.addArb(\"172.16.10.199:27020\");                                 # 添加仲裁节点\n            rs.add({host: \"10.2.2.2:27047\", priority: 0, hidden: true})       # 添加从节点 hidden true隐藏节点[priority必须为0]  false不隐藏\n            rs.remove(\"172.20.80.216:27047\");                                 # 删除节点\n            rs.stepDown(120)                                                  # 主库上执行切换为从,120秒后切换回主\n            show dbs                                                          # 查询db\n            use post                                                          # 选择db\n            show tables                                                       # 查看文档列表\n            db.tb.drop()                                                      # 删除集合 需要权限\n            db.tb.remove({})                                                  # 删除所有数据\n            db.tb.count()                                                     # 查询文档条数\n            db.tb.find()                                                      # 查看文档内容\n            db.tb.find({_id:37530555})                                        # 查询指定id\n            db.tb.find().sort({_id:-1}).limit(1)                              # 查询文档最后一条\n            db.tb.find({\"processed\" : {\"$ne\" : true}}).limit(1);              # 字段不为 true\n            db.tb.find({\"processed\" : {\"$eq\" : true}}).limit(1);              # 字段为 true\n            db.tb.find({\"processed\" : {\"$exists\" : false}}).limit(1);         # 字段不存在\n\n            db.tb.ensureIndex({\"status\":1}, {background:true})                # 后台加索引\n            db.tb.getIndexes()                                                # 查看索引\n            db.tb.ensureIndex({\"c_type\":1},{backgrounnd:true})                # 后台添加索引  1正向  -1反向\n            db.tb.dropIndex({\"c_type\":1});                                    # 删除索引\n\n        }\n\n        七、进程控制{\n\n            db.currentOp()                  # 查看活动进程\n            db.$cmd.sys.inprog.findOne()    # 查看活动进程 与上面一样\n                opid      # 操作进程号\n                op        # 操作类型(查询\\更新)\n                ns        # 命名空间,指操作的是哪个对象\n                query     # 如果操作类型是查询,这里将显示具体的查询内容\n                lockType  # 锁的类型,指明是读锁还是写锁\n\n            db.killOp(opid值)                         # 结束进程\n            db.$cmd.sys.killop.findOne({op:opid值})   # 结束进程\n\n        }\n\n        八、备份还原{\n            # mongodump 虽然能不停机备份,但是为了获取实时数据视图的能力,使用fsync命令能在运行时复制数据目录并且不会损坏数据\n            # fsync会强制服务器将所有缓冲区的数据写入磁盘.配合lock还阻止对数据库的进一步写入,知道释放锁为止\n            db.runCommand({\"fsync\":1,\"lock\":1})   # 执行强制更新与写入锁\n            db.$cmd.sys.unlock.findOne()          # 解锁\n            db.currentOp()                        # 查看解锁是否正常\n\n            mongoexport -d test -c t1 -o t1.dat                 # 导出JSON格式\n                -c         # 指明导出集合\n                -d         # 使用库\n            mongoexport -d test -c t1 -csv -f num -o t1.dat     # 导出csv格式\n                -csv       # 指明导出csv格式\n                -f         # 指明需要导出那些例\n\n            mongoimport -d test -c t1 -file t1.dat                           # mongoimport还原JSON格式\n            mongoimport -d test -c t1 -type csv --headerline -file t1.dat    # mongoimport还原csv格式数据\n                --headerline                # 指明不导入第一行 因为第一行是列名\n\n            mongodump -d test -o /bak/mongodump                # mongodump数据备份\n            mongorestore -d test --drop /bak/mongodump/*       # mongorestore恢复\n                --drop      # 恢复前先删除\n                --gzip      # 压缩\n\n            # 备份一个表\n            # --excludeCollection string # 排除指定的集合 要排除多个，使用多个\n            mongodump --host 127.0.0.1:27080 -d dbname  -c tablename  -o /data/reports/\n            mongodump --host 127.0.0.1:27080 -d dbname  -c tablename  -o /data/reports/reports  -u root -p tAvaa5yNUE --authenticationDatabase admin\n\n            # 恢复一个表\n            mongorestore --host 127.0.0.1:27080 -d dbname  -c tablename --drop --dir=/data/reports/tablename.bson\n\n            # 在线拷贝一个库\n            db.copyDatabase(fromdb, todb, fromhost, username, password, mechanism)\n            db.copyDatabase('mate','mate', '172.16.255.176:27047')\n\n        }\n\n        九、修复{\n\n            # 当停电或其他故障引起不正常关闭时,会造成部分数据损坏丢失\n            mongod --repair      # 修复操作:启动时候加上 --repair\n            # 修复过程:将所有文档导出,然后马上导入,忽略无效文档.完成后重建索引。时间较长,会丢弃损坏文档\n            # 修复数据还能起到压缩数据库的作用\n            db.repairDatabase()    # 运行中的mongodb可使用 repairDatabase 修复当前使用的数据库\n            {\"repairDatabase\":1}   # 通过驱动程序\n\n        }\n\n        十、python使用mongodb{\n\n            原文: http://blog.nosqlfan.com/html/2989.html\n\n            easy_install pymongo      # python2.7+\n            import pymongo\n            connection=pymongo.Connection('localhost',27017)   # 创建连接\n            db = connection.test_database                      # 切换数据库\n            collection = db.test_collection                    # 获取collection\n            # db和collection都是延时创建的，在添加Document时才真正创建\n\n            文档添加, _id自动创建\n                import datetime\n                post = {\"author\": \"Mike\",\n                    \"text\": \"My first blog post!\",\n                    \"tags\": [\"mongodb\", \"python\", \"pymongo\"],\n                    \"date\": datetime.datetime.utcnow()}\n                posts = db.posts\n                posts.insert(post)\n                ObjectId('...')\n\n            批量插入\n                new_posts = [{\"author\": \"Mike\",\n                    \"text\": \"Another post!\",\n                    \"tags\": [\"bulk\", \"insert\"],\n                    \"date\": datetime.datetime(2009, 11, 12, 11, 14)},\n                    {\"author\": \"Eliot\",\n                    \"title\": \"MongoDB is fun\",\n                    \"text\": \"and pretty easy too!\",\n                    \"date\": datetime.datetime(2009, 11, 10, 10, 45)}]\n                posts.insert(new_posts)\n                [ObjectId('...'), ObjectId('...')]\n\n            获取所有collection\n                db.collection_names()    # 相当于SQL的show tables\n\n            获取单个文档\n                posts.find_one()\n\n            查询多个文档\n                for post in posts.find():\n                    post\n\n            加条件的查询\n                posts.find_one({\"author\": \"Mike\"})\n\n            高级查询\n                posts.find({\"date\": {\"$lt\": \"d\"}}).sort(\"author\")\n\n            统计数量\n                posts.count()\n\n            加索引\n                from pymongo import ASCENDING, DESCENDING\n                posts.create_index([(\"date\", DESCENDING), (\"author\", ASCENDING)])\n\n            查看查询语句的性能\n                posts.find({\"date\": {\"$lt\": \"d\"}}).sort(\"author\").explain()[\"cursor\"]\n                posts.find({\"date\": {\"$lt\": \"d\"}}).sort(\"author\").explain()[\"nscanned\"]\n\n        }\n\n    }\n\n    JDK安装{\n\n        vim /etc/profile.d/jdk.sh\n        export JAVA_HOME=/usr/local/jdk1.8.0_151\n        export PATH=$JAVA_HOME/bin:$PATH\n\n        . /etc/profile         # 加载新的环境变量\n        jps -ml                # 查看java进程\n        jstat -gc 18381 1s 30  # 查看java进程gc情况\n    }\n\n    redis动态加内存{\n\n        ./redis-cli -h 10.10.10.11 -p 6401\n        save                                # 保存当前快照\n        config get *                        # 列出所有当前配置\n        config get maxmemory                # 查看指定配置\n        config set maxmemory  15360000000   # 动态修改最大内存配置参数\n\t\tselect 5                            # 选择数据库\n\t\tCONFIG SET requirepass \"no\"         # 设置密码\n\t\tauth \"no\"                           # 认证\n\t\tset db redis                        # 添加key\n\t\tget db                              # 获取key的value\n\t\t------------------------------\n\t\tredis键空间通知\n\t\t1 /etc/redis.conf\n\t\t```\n\t\tnotify-keyspace-events Ex\n\t\t```\n\t\t2 systemctl restart redis\n\t\t3 终端1执行\n\t\t```\n\t\tPSUBSCRIBE __keyevent@0__:expired \n\t\t```\n\t\t4 终端2\n\t\t```\n\t\tsetex easubuac_auth_token 5 uac:192.168.1.189:e36b1f00034357fe3396b34d906778fe  # 设置10s后过期\n\t\t```\n\t\t5 10s之后可以在终端1内看到test过期了\n\t\t-------------------------------\n\n    }\n\n    nfs{\n\n        # 依赖rpc服务通信 portmap[centos5] 或 rpcbind[centos6]\n        yum install nfs-utils portmap    # centos5安装\n        yum install nfs-utils rpcbind    # centos6安装\n\n        vim /etc/exports                 # 配置文件\n        # sync                           # 同步写入\n        # async                          # 暂存并非直接写入\n        # no_root_squash                 # 开放用户端使用root身份操作\n        # root_squash                    # 使用者身份为root则被压缩成匿名使用,即nobody,相对安全\n        # all_squash                     # 所有NFS的使用者身份都被压缩为匿名\n        /data/images 10.10.10.0/24(rw,sync,no_root_squash)\n\n        service  portmap restart         # 重启centos5的nfs依赖的rpc服务\n        service  rpcbind restart         # 重启centos6的nfs依赖的rpc服务\n        service  nfs restart             # 重启nfs服务  确保依赖 portmap 或 rpcbind 服务已启动\n        service  nfs reload              # 重载NFS服务配置文件\n        showmount -e                     # 服务端查看自己共享的服务\n        showmount -a                     # 显示已经与客户端连接上的目录信息\n        showmount -e 10.10.10.3          # 列出服务端可供使用的NFS共享  客户端测试能否访问nfs服务\n        mount -t nfs 10.10.10.3:/data/images/  /data/img   # 挂载nfs  如果延迟影响大加参数 noac\n\n        # 服务端的 portmap 或 rpcbind 被停止后，nfs仍然工作正常，但是umout财会提示： not found / mounted or server not reachable  重启服务器的portmap 或 rpcbind 也无济于事。 nfs也要跟着重启，否则nfs工作仍然是不正常的。\n        # 同时已挂载会造成NFS客户端df卡住和挂载目录无法访问。请先用 mount 查看当前挂载情况，记录挂载信息，在强制卸载挂载目录，重新挂载\n        umount -f /data/img/             # 强制卸载挂载目录  如还不可以  umount -l /data/img/\n\n        nfsstat -c                       # 客户机发送和拒绝的RPC和NFS调用数目的信息\n        nfsstat -cn                      # 显示和打印与客户机NFS调用相关的信息\n        nfsstat -r                       # 显示和打印客户机和服务器的与RPC调用相关的信息\n        nfsstat –s                       # 显示关于服务器接收和拒绝的RPC和NFS调用数目的信息\n\n    }\n\n    hdfs{\n        hdfs --help                  # 所有参数\n\n        hdfs dfs -help               # 运行文件系统命令在Hadoop文件系统\n        hdfs dfs -ls /logs           # 查看\n        hdfs dfs -ls /user/          # 查看用户\n        hdfs dfs -cat\n        hdfs dfs -df\n        hdfs dfs -du\n        hdfs dfs -rm\n        hdfs dfs -tail\n        hdfs dfs –put localSrc dest  # 上传文件\n\n        hdfs dfsadmin -help          # hdfs集群节点管理\n        hdfs dfsadmin -report        # 基本的文件系统统计信息\n    }\n\n}\n\n5 网络{\n\n    rz                                                                    # 通过ssh上传小文件\n    sz                                                                    # 通过ssh下载小文件\n    ifconfig eth0 down                                                    # 禁用网卡\n    ifconfig eth0 up                                                      # 启用网卡\n    ifup eth0:0                                                           # 启用网卡\n    mii-tool em1                                                          # 查看网线是否连接\n    traceroute www.baidu.com                                              # 测试跳数\n    vi /etc/resolv.conf                                                   # 设置DNS  nameserver IP 定义DNS服务器的IP地址\n    nslookup www.moon.com                                                 # 解析域名IP\n    dig -x www.baidu.com                                                  # 解析域名IP\n    dig +trace -t A domainname                                            # 跟踪dns\n    dig +short txt hacker.wp.dg.cx                                        # 通过 DNS 来读取 Wikipedia 的hacker词条\n    host -t txt hacker.wp.dg.cx                                           # 通过 DNS 来读取 Wikipedia 的hacker词条\n    lynx                                                                  # 文本上网\n    wget -P path -O name url                                              # 下载  包名:wgetrc   -q 安静 -c 续传\n    dhclient eth1                                                         # 自动获取IP\n    mtr -r www.baidu.com                                                  # 测试网络链路节点响应时间 # trace ping 结合\n    ipcalc -m \"$ip\" -p \"$num\"                                             # 根据IP和主机最大数计算掩码\n    curl -I www.baidu.com                                                 # 查看网页http头\n    curl -s www.baidu.com                                                 # 不显示进度\n    queryperf -d list -s DNS_IP -l 2                                      # BIND自带DNS压力测试  [list 文件格式:www.turku.fi A]\n    telnet ip port                                                        # 测试端口是否开放,有些服务可直接输入命令得到返回状态\n    echo \"show \" |nc $ip $port                                            # 适用于telnet一类登录得到命令返回\n    nc -l -p port                                                         # 监听指定端口\n    nc -nv -z 10.10.10.11 1080 |grep succeeded                            # 检查主机端口是否开放\n    curl -o /dev/null -s -m 10 --connect-timeout 10 -w %{http_code} $URL  # 检查页面状态\n    curl -X POST -d \"user=xuesong&pwd=123\" http://www.abc.cn/Result       # 提交POST请求\n    curl -s http://20140507.ip138.com/ic.asp                              # 通过IP138取本机出口外网IP\n    curl http://IP/ -H \"X-Forwarded-For: ip\" -H \"Host: www.ttlsa.com\"     # 连到指定IP的响应主机,HTTPserver只看 Host字段\n    ifconfig eth0:0 192.168.1.221 netmask 255.255.255.0                   # 增加逻辑IP地址\n    echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_all                      # 禁ping\n    net rpc shutdown -I IP_ADDRESS -U username%password                   # 远程关掉一台WINDOWS机器\n    wget --random-wait -r -p -e robots=off -U Mozilla www.example.com     # 递归方式下载整个网站\n    sshpass -p \"$pwd\" rsync -avzP /dir  user@$IP:/dir/                    # 指定密码避免交互同步目录\n    rsync -avzP --delete /dir/ user@$IP:/dir/                             # 无差同步目录 可以快速清空大目录,末尾带/同步目录\n    rsync -avzP -e \"ssh -p 22 -e -o StrictHostKeyChecking=no\" /dir user@$IP:/dir         # 指定ssh参数同步\n    rsync -rvze 'ssh -p 58022' ffmpeg@114.55.24.131:/opt/ffmpeg/bin/ /opt/ffmpeg/bin/\n    抓包{\n        -D                                  # 打印接口\n        -i eth1                             # 只抓经过接口eth1的包\n        -t                                  # 不显示时间戳\n        -s 0                                # 抓取数据包时默认抓取长度为68字节。加上-s 0 后可以抓到完整的数据包\n        -c 100                              # 只抓取100个数据包\n        dst port ! 22                       # 不抓取目标端口是22的数据包\n        tcpdump tcp port 22                 # 抓包\n        tcpdump -n -vv udp port 53          # 抓udp的dns包 并显示ip\n        tcpdump port 10001 -A -s0           # 完整显示ascii数据包\n        tcpdump -i any  host x.x.x.x -s 0 -w /tmp/cap.pcap   # 对端ip\n        tcpdump -i any -s 0 host 172.20.81.107 or host 172.16.3.72 -C 50 -W 5 -w /tmp/20190122ng.cap\n\t\ttcpdump -A -i ens33 -w pp.txt host www.baidu.com               \t\t# 存储到抓包文件\t-A 查看详细报文\n\t\ttcpdump -AS -r pp.txt               \t\t\t\t\t\t\t\t# 查看抓包文件\t\t-S 查看ack绝对值\n    }\n\t## 1. tcpdump -vvv tcp port 80 -w /tmp/cap.pcap  # 抓取tcp(http)协议且端口为80的数据包并存到cap.pcap\n\t## 2. wireshark打开cap.pcap查看数据\n\t## 3. 根据域名筛选数据：http.host contains www.macrozheng.com\n\t\t\t根据目标ip筛选：ip.addr == 47.95.117.211\n\n\n    一次短链接失败故障定位{\n\n        # php和python程序调用接口,通过阿里云slb,到后端nginx,偶尔超时,后端nginx无请求,怀疑没到nginx,但通过检查,无法与nginx建立tcp链接\n        ss -nl |grep :80  # 查看 accept 队列值,短连接应该大一点\n        watch -n 1 'nstat -z -t 1 | grep -e TcpActiveOpens -e TcpExtListenOverflows -e TcpAttemptFails -e TcpPassiveOpen -e TcpExtTCPSynRetrans -e TcpRetransSegs  -e TcpOutSegs -e TcpInSegs'\n\n        TcpAttemptFails         TCP建立链接失败,包括前后端\n        TcpExtTCPSynRetrans     TCP向后端建立链接失败\n\n\n        # nginx 和内核都需要调整才生效,程序监听端口,需要加socket参数\n        listen 10.87.128.29:51528 default_server backlog=4096;\n\n\n        https://m.aliyun.com/yunqi/articles/118472?spm=5176.8091938.0.0.11e86ccF4oOeZ\n    }\n\n    网卡流量查看{\n\n        watch more /proc/net/dev    # 实时监控流量文件系统 累计值\n        iptraf                      # 网卡流量查看工具\n        nethogs -d 5 eth0 eth1      # 按进程实时统计网络流量 epel源nethogs\n        iftop -i eth0 -n -P         # 实时流量监控\n\n        sar {\n            -n参数有6个不同的开关: DEV | EDEV | NFS | NFSD | SOCK | ALL\n            DEV显示网络接口信息\n            EDEV显示关于网络错误的统计数据\n            NFS统计活动的NFS客户端的信息\n            NFSD统计NFS服务器的信息\n            SOCK显示套 接字信息\n            ALL显示所有5个开关\n\n            sar -n DEV 1 10\n\n            rxpck/s   # 每秒钟接收的数据包\n            txpck/s   # 每秒钟发送的数据包\n            rxbyt/s   # 每秒钟接收的字节数\n            txbyt/s   # 每秒钟发送的字节数\n            rxcmp/s   # 每秒钟接收的压缩数据包\n            txcmp/s   # 每秒钟发送的压缩数据包\n            rxmcst/s  # 每秒钟接收的多播数据包\n\n        }\n\n    }\n\n    netstat{\n\n        # 几十万并发的情况下netstat会没有响应，建议使用 ss 命令\n        -a     # 显示所有连接中的Socket\n        -t     # 显示TCP连接\n        -u     # 显示UDP连接\n        -n     # 显示所有已建立的有效连接\n        netstat -anlp           # 查看链接\n        netstat -tnlp           # 只查看tcp监听端口\n        netstat -r              # 查看路由表\n    }\n\n    ss{\n\n        # netstat是遍历/proc下面每个PID目录，ss直接读/proc/net下面的统计信息。所以ss执行的时候消耗资源以及消耗的时间都比netstat少很多\n        ss -s                          # 列出当前socket详细信息\n        ss -l                          # 显示本地打开的所有端口\n        ss -tnlp                       # 显示每个进程具体打开的socket\n        ss -ant                        # 显示所有TCP socket\n        ss -u -a                       # 显示所有UDP Socekt\n        ss dst 192.168.119.113         # 匹配远程地址\n        ss dst 192.168.119.113:http    # 匹配远程地址和端口号\n        ss dst 192.168.119.113:3844    # 匹配远程地址和端口号\n        ss src 192.168.119.103:16021   # 匹配本地地址和端口号\n        ss -o state established '( dport = :smtp or sport = :smtp )'        # 显示所有已建立的SMTP连接\n        ss -o state established '( dport = :http or sport = :http )'        # 显示所有已建立的HTTP连接\n        ss -x src /tmp/.X11-unix/*         # 找出所有连接X服务器的进程\n\n    }\n\n    并发数查看{\n\n        netstat -n | awk '/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}'\n        SYN_RECV     # 正在等待处理的请求\n        ESTABLISHED  # 正常数据传输状态,既当前并发数\n        TIME_WAIT    # 处理完毕，等待超时结束的请求\n        CLOSE_WAIT   # 客户端异常关闭,没有完成4次挥手  如大量可能存在攻击行为\n\n    }\n\n    ssh{\n\n        ssh -p 22 user@192.168.1.209                            # 从linux ssh登录另一台linux\n        ssh -p 22 root@192.168.1.209 CMD                        # 利用ssh操作远程主机\n        scp -P 22 file root@ip:/dir                             # 把本地文件拷贝到远程主机\n        scp -l 100000  file root@ip:/dir                        # 传输文件到远程，限制速度100M\n        sshpass -p 'pwd' ssh -n root@$IP \"echo hello\"           # 指定密码远程操作\n        ssh -o StrictHostKeyChecking=no $IP                     # ssh连接不提示yes\n        ssh -t \"su -\"                                           # 指定伪终端 客户端以交互模式工作\n        scp root@192.168.1.209:/RemoteDir /localDir             # 把远程指定文件拷贝到本地\n        pscp -h host.ip /a.sh /opt/sbin/                        # 批量传输文件\n        ssh -N -L2001:remotehost:80 user@somemachine            # 用SSH创建端口转发通道\n        ssh -t host_A ssh host_B                                # 嵌套使用SSH\n        ssh -t -p 22 $user@$Ip /bin/su - root -c {$Cmd};        # 远程su执行命令 Cmd=\"\\\"/sbin/ifconfig eth0\\\"\"\n        ssh-keygen -t rsa                                       # 生成密钥\n        ssh-copy-id -i xuesong@10.10.10.133                     # 传送key\n        vi $HOME/.ssh/authorized_keys                           # 公钥存放位置\n        sshfs name@server:/path/to/folder /path/to/mount/point  # 通过ssh挂载远程主机上的文件夹\n        fusermount -u /path/to/mount/point                      # 卸载ssh挂载的目录\n        ssh user@host cat /path/to/remotefile | diff /path/to/localfile -                # 用DIFF对比远程文件跟本地文件\n        su - user -c \"ssh user@192.168.1.1 \\\"echo -e aa |mail -s test mail@163.com\\\"\"    # 切换用户登录远程发送邮件\n        pssh -h ip.txt -i uptime                                # 批量执行ssh yum install pssh\n\n        SSH反向连接{\n\n            # 外网A要控制内网B\n\n            ssh -NfR 1234:localhost:2223 user1@123.123.123.123 -p22    # 将A主机的1234端口和B主机的2223端口绑定，相当于远程端口映射\n            ss -ant   # 这时在A主机上sshd会listen本地1234端口\n            # LISTEN     0    128    127.0.0.1:1234       *:*\n            ssh localhost -p1234    # 在A主机连接本地1234端口\n\n        }\n    }\n\n    网卡配置文件{\n\n        vi /etc/sysconfig/network-scripts/ifcfg-eth0\n\n        DEVICE=eth0\n        BOOTPROTO=none\n        BROADCAST=192.168.1.255\n        HWADDR=00:0C:29:3F:E1:EA\n        IPADDR=192.168.1.55\n        NETMASK=255.255.255.0\n        NETWORK=192.168.1.0\n        ONBOOT=yes\n        TYPE=Ethernet\n        GATEWAY=192.168.1.1\n        #ARPCHECK=no     # 进制arp检查\n\n    }\n\n    route {\n\n        route                           # 查看路由表\n        route add default  gw 192.168.1.1  dev eth0                        # 添加默认路由\n        route add -net 172.16.0.0 netmask 255.255.0.0 gw 10.39.111.254     # 添加静态路由网关\n        route del -net 172.16.0.0 netmask 255.255.0.0 gw 10.39.111.254     # 删除静态路由网关\n\n    }\n\n    静态路由{\n\n        vim /etc/sysconfig/static-routes\n        any net 192.168.12.0/24 gw 192.168.0.254\n        any net 192.168.13.0/24 gw 192.168.0.254\n\n    }\n\n    解决ssh链接慢{\n\n        sed -i 's/GSSAPIAuthentication yes/GSSAPIAuthentication no/' /etc/ssh/sshd_config\n        sed -i '/#UseDNS yes/a\\UseDNS no' /etc/ssh/sshd_config\n        /etc/init.d/sshd reload\n\n    }\n\n    nmap{\n\n        nmap -PT 192.168.1.1-111             # 先ping在扫描主机开放端口\n        nmap -O 192.168.1.1                  # 扫描出系统内核版本\n        nmap -sV 192.168.1.1-111             # 扫描端口的软件版本\n        nmap -sS 192.168.1.1-111             # 半开扫描(通常不会记录日志)\n        nmap -P0 192.168.1.1-111             # 不ping直接扫描\n        nmap -d 192.168.1.1-111              # 详细信息\n        nmap -D 192.168.1.1-111              # 无法找出真正扫描主机(隐藏IP)\n        nmap -p 20-30,139,60000-             # 端口范围  表示：扫描20到30号端口，139号端口以及所有大于60000的端口\n        nmap -P0 -sV -O -v 192.168.30.251    # 组合扫描(不ping、软件版本、内核版本、详细信息)\n\n        # 不支持windows的扫描(可用于判断是否是windows)\n        nmap -sF 192.168.1.1-111\n        nmap -sX 192.168.1.1-111\n        nmap -sN 192.168.1.1-111\n\n    }\n\n    流量切分线路{\n\n        # 程序判断进入IP线路，设置服务器路由规则控制返回\n        vi /etc/iproute2/rt_tables\n        #添加一条策略\n        252   bgp2  #注意策略的序号顺序\n        ip route add default via 第二个出口上线IP(非默认网关) dev eth1 table bgp2\n        ip route add from 本机第二个ip table bgp2\n        #查看\n        ip route list table 252\n        ip rule list\n        #成功后将语句添加开机启动\n\n    }\n\n    snmp{\n\n        snmptranslate .1.3.6.1.2.1.1.3.0    # 查看映射关系\n            DISMAN-EVENT-MIB::sysUpTimeInstance\n        snmpdf -v 1 -c public localhost                            # SNMP监视远程主机的磁盘空间\n        snmpnetstat -v 2c -c public -a 192.168.6.53                # SNMP获取指定IP的所有开放端口状态\n        snmpwalk -v 2c -c public 10.152.14.117 .1.3.6.1.2.1.1.3.0  # SNMP获取主机启动时间\n        # MIB安装(ubuntu)\n        # sudo apt-get install snmp-mibs-downloader\n        # sudo download-mibs\n        snmpwalk -v 2c -c public 10.152.14.117 sysUpTimeInstance   # SNMP通过MIB库获取主机启动时间\n\n    }\n\n    TC流量控制{\n\n        # 针对ip段下载速率控制\n        tc qdisc del dev eth0 root handle 1:                                                              # 删除控制1:\n        tc qdisc add dev eth0 root handle 1: htb r2q 1                                                    # 添加控制1:\n        tc class add dev eth0 parent 1: classid 1:1 htb rate 12mbit ceil 15mbit                           # 设置速率\n        tc filter add dev eth0 parent 1: protocol ip prio 16 u32 match ip dst 10.10.10.1/24 flowid 1:1    # 指定ip段控制规则\n\n        # 检查命令\n        tc -s -d qdisc show dev eth0\n        tc class show dev eth0\n        tc filter show dev eth0\n\n        限制上传下载{\n\n            tc qdisc del dev tun0 root\n            tc qdisc add dev tun0 root handle 2:0 htb\n            tc class add dev tun0 parent 2:1 classid 2:10 htb rate 30kbps\n            tc class add dev tun0 parent 2:2 classid 2:11 htb rate 30kbps\n            tc qdisc add dev tun0 parent 2:10 handle 1: sfq perturb 1\n            tc filter add dev tun0 protocol ip parent 2:0 u32 match ip dst 10.18.0.0/24 flowid 2:10\n            tc filter add dev tun0 parent ffff: protocol ip u32 match ip src 10.18.0.0/24 police rate 30kbps burst 10k drop flowid 2:11\n\n\n            tc qdisc del dev tun0 root                                     # 删除原有策略\n            tc qdisc add dev tun0 root handle 2:0 htb                      # 定义最顶层(根)队列规则，并指定 default 类别编号，为网络接口 eth1 绑定一个队列，类型为 htb，并指定了一个 handle 句柄 2:0 用于标识它下面的子类\n            tc class add dev tun0 parent 2:1 classid 2:10 htb rate 30kbps  # 设置一个规则速度是30kbps\n            tc class add dev tun0 parent 2:2 classid 2:11 htb rate 30kbps\n            tc qdisc add dev tun0 parent 2:10 handle 1: sfq perturb 1      # 调用随机公平算法\n            tc filter add dev tun0 protocol ip parent 2:0 u32 match ip dst 10.18.0.0/24 flowid 2:10  # 规则2:10应用在目标地址上，即下载\n            tc filter add dev tun0 parent ffff: protocol ip u32 match ip src 10.18.0.0/24 police rate 30kbps burst 10k drop flowid 2:11 # 上传限速\n\n        }\n\n    }\n\n}\n\n6 磁盘{\n\n    df -Ph                                          # 查看硬盘容量\n    df -T                                           # 查看磁盘分区格式\n    df -i                                           # 查看inode节点   如果inode用满后无法创建文件\n    du -h dir                                       # 检测目录下所有文件大小\n    du -sh *                                        # 显示当前目录中子目录的大小\n    mount -l                                        # 查看分区挂载情况\n    fdisk -l                                        # 查看磁盘分区状态\n    fdisk /dev/hda3                                 # 分区\n    mkfs -t ext4  /dev/hda3                         # 格式化分区\n    fsck -y /dev/sda6                               # 对文件系统修复\n    lsof |grep delete                               # 释放进程占用磁盘空间  列出进程后，查看文件是否存在，不存在则kill掉此进程\n    tmpwatch -afv 10   /tmp                         # 删除10小时内未使用的文件  勿在重要目录使用\n    cat /proc/filesystems                           # 查看当前系统支持文件系统\n    mount -o remount,rw /                           # 修改只读文件系统为读写\n    iotop                                           # 进程占用磁盘IO情况   yum install iotop\n    smartctl -H /dev/sda                            # 检测硬盘状态  # yum install smartmontools\n    smartctl -i /dev/sda                            # 检测硬盘信息\n    smartctl -a /dev/sda                            # 检测所有信息\n    e2label /dev/sda5                               # 查看卷标\n    e2label /dev/sda5 new-label                     # 创建卷标\n    ntfslabel -v /dev/sda8 new-label                # NTFS添加卷标\n    tune2fs -j /dev/sda                             # ext2分区转ext3分区\n    tune2fs -l /dev/sda                             # 查看文件系统信息\n    mke2fs -b 2048 /dev/sda5                        # 指定索引块大小\n    dumpe2fs -h /dev/sda5                           # 查看超级块的信息\n    mount -t iso9660 /dev/dvd  /mnt                 # 挂载光驱\n    mount -t ntfs-3g /dev/sdc1 /media/yidong        # 挂载ntfs硬盘\n    mount -t nfs 10.0.0.3:/opt/images/  /data/img   # 挂载nfs 需要重载 /etc/init.d/nfs reload  重启需要先启动 portmap 服务\n    mount -o loop  /software/rhel4.6.iso   /mnt/    # 挂载镜像文件\n\n    磁盘IO性能检测{\n\n        iostat -x 1 10\n\n        % user       # 显示了在用户级(应用程序)执行时生成的 CPU 使用率百分比。\n        % system     # 显示了在系统级(内核)执行时生成的 CPU 使用率百分比。\n        % idle       # 显示了在 CPU 空闲并且系统没有未完成的磁盘 I/O 请求时的时间百分比。\n        % iowait     # 显示了 CPU 空闲期间系统有未完成的磁盘 I/O 请求时的时间百分比。\n\n        rrqm/s       # 每秒进行 merge 的读操作数目。即 delta(rmerge)/s\n        wrqm/s       # 每秒进行 merge 的写操作数目。即 delta(wmerge)/s\n        r/s          # 每秒完成的读 I/O 设备次数。即 delta(rio)/s\n        w/s          # 每秒完成的写 I/O 设备次数。即 delta(wio)/s\n        rsec/s       # 每秒读扇区数。即 delta(rsect)/s\n        wsec/s       # 每秒写扇区数。即 delta(wsect)/s\n        rkB/s        # 每秒读K字节数。是 rsect/s 的一半，因为每扇区大小为512字节。(需要计算)\n        wkB/s        # 每秒写K字节数。是 wsect/s 的一半。(需要计算)\n        avgrq-sz     # 平均每次设备I/O操作的数据大小 (扇区)。delta(rsect+wsect)/delta(rio+wio)\n        avgqu-sz     # 平均I/O队列长度。即 delta(aveq)/s/1000 (因为aveq的单位为毫秒)。\n        await        # 平均每次设备I/O操作的等待时间 (毫秒)。即 delta(ruse+wuse)/delta(rio+wio)\n        svctm        # 平均每次设备I/O操作的服务时间 (毫秒)。即 delta(use)/delta(rio+wio)\n        %util        # 一秒中有百分之多少的时间用于 I/O 操作，或者说一秒中有多少时间 I/O 队列是非空的。即 delta(use)/s/1000 (因为use的单位为毫秒)\n\n        IO性能衡量标准{\n\n            1、 如果 %util 接近 100%，说明产生的I/O请求太多，I/O系统已经满负荷，该磁盘可能存在瓶颈。\n            2、 idle 小于70% IO压力就较大了,一般读取速度有较多的wait.\n            3、 同时可以结合 vmstat 查看查看b参数(等待资源的进程数)和wa参数(IO等待所占用的CPU时间的百分比,高过30%时IO压力高)\n            4、 svctm 一般要小于 await (因为同时等待的请求的等待时间被重复计算了),svctm 的大小一般和磁盘性能有关,CPU/内存的负荷也会对其有影响,请求过多也会间接导致 svctm 的增加. await 的大小一般取决于服务时间(svctm) 以及 I/O 队列的长度和 I/O 请求的发出模式. 如果 svctm 比较接近 await,说明 I/O 几乎没有等待时间;如果 await 远大于 svctm,说明 I/O 队列太长,应用得到的响应时间变慢,如果响应时间超过了用户可以容许的范围,这时可以考虑更换更快的磁盘,调整内核 elevator 算法,优化应用,或者升级 CPU\n            5、 队列长度(avgqu-sz)也可作为衡量系统 I/O 负荷的指标，但由于 avgqu-sz 是按照单位时间的平均值，所以不能反映瞬间的 I/O 洪水。\n\n        }\n\n    }\n\n    iotop{\n\n        # 监视进程磁盘I/O\n\n        yum install iotop\n\n        -o        # 只显示有io操作的进程\n        -b        # 批量显示，无交互，主要用作记录到文件。\n        -n NUM    # 显示NUM次，主要用于非交互式模式。\n        -d SEC    # 间隔SEC秒显示一次。\n        -p PID    # 监控的进程pid。\n        -u USER   # 监控的进程用户。\n\n        # 左右箭头：改变排序方式，默认是按IO排序。\n        r         # 改变排序顺序。\n        o         # 只显示有IO输出的进程。\n        p         # 进程/线程的显示方式的切换。\n        a         # 显示累积使用量。\n        q         # 退出。\n\n    }\n\n    创建swap文件方法{\n\n        dd if=/dev/zero of=/swap bs=1024 count=4096000            # 创建一个足够大的文件\n        # count的值等于1024 x 你想要的文件大小, 4096000是4G\n        mkswap /swap                      # 把这个文件变成swap文件\n        swapon /swap                      # 启用这个swap文件\n        /swap swap swap defaults 0 0      # 在每次开机的时候自动加载swap文件, 需要在 /etc/fstab 文件中增加一行\n        cat /proc/swaps                   # 查看swap\n        swapoff -a                        # 关闭swap\n        swapon -a                         # 开启swap\n\n    }\n\n    新硬盘挂载{\n\n        fdisk /dev/sdc\n        p    #  打印分区\n        d    #  删除分区\n        n    #  创建分区，（一块硬盘最多4个主分区，扩展占一个主分区位置。p主分区 e扩展）\n        w    #  保存退出\n        mkfs.ext4 -L 卷标  /dev/sdc1            # 格式化相应分区\n        mount /dev/sdc1  /mnt                  # 挂载\n        vi /etc/fstab                          # 添加开机挂载分区\n        LABEL=/data            /data                   ext4    defaults        1 2      # 用卷标挂载\n        /dev/sdb1              /data4                  ext4    defaults        1 2      # 用真实分区挂载\n        /dev/sdb2              /data4                  ext4    noatime,defaults        1 2\n\n        第一个数字\"1\"该选项被\"dump\"命令使用来检查一个文件系统应该以多快频率进行转储，若不需要转储就设置该字段为0\n        第二个数字\"2\"该字段被fsck命令用来决定在启动时需要被扫描的文件系统的顺序，根文件系统\"/\"对应该字段的值应该为1，其他文件系统应该为2。若该文件系统无需在启动时扫描则设置该字段为0\n        当以 noatime 选项加载（mount）文件系统时，对文件的读取不会更新文件属性中的atime信息。设置noatime的重要性是消除了文件系统对文件的写操作，文件只是简单地被系统读取。由于写操作相对读来说要更消耗系统资源，所以这样设置可以明显提高服务器的性能.wtime信息仍然有效，任何时候文件被写，该信息仍被更新。\n\n        mount -a    # 自动加载 fstab 文件挂载，避免配置错误，系统无法重启\n\n    }\n\n    大磁盘2T和16T分区{\n\n        parted /dev/sdb                # 针对磁盘分区\n        (parted) mklabel gpt           # 设置为 gpt\n        (parted) print\n        (parted) mkpart  primary 0KB 22.0TB        # 指定分区大小\n        Is this still acceptable to you?\n        Yes/No? Yes\n        Ignore/Cancel? Ignore\n        (parted) print\n        Model: LSI MR9271-8i (scsi)\n        Disk /dev/sdb: 22.0TB\n        Sector size (logical/physical): 512B/512B\n        Partition Table: gpt\n        Number  Start   End     Size    File system  Name     Flags\n         1      17.4kB  22.0TB  22.0TB               primary\n        (parted) quit\n\n        mkfs.ext4 /dev/sdb1        # e2fsprogs升级后支持大于16T硬盘\n\n        # 大于16T的单个分区ext4格式化报错，需要升级e2fsprogs\n        Size of device /dev/sdb1 too big to be expressed in 32 bits using a blocksize of 4096.\n\n        yum -y install xfsprogs\n        mkfs.xfs -f /dev/sdb1              # 大于16T单个分区也可以使用XFS分区,但inode占用很大,对大量的小文件支持不太好\n\n    }\n\n    阿里云扩容磁盘{\n\n        # 进入ECS 本实例磁盘，勾选在线扩容, 选择扩容磁盘\n        yum install cloud-utils-growpart\n        yum install xfsprogs\n        df -h    # 查看目前分区大小\n        fdisk -l # 查看磁盘设备\n        growpart /dev/vda 1         # 扩容分区 如果没有分区,默认整块,不需要执行\n        resize2fs /dev/vda1         # 扩容文件系统 ext4文件系统 \n        xfs_growfs /dev/vda1        # 扩容文件系统 xfs文件系统\n        df -h                       # 再查看分区大小,是否扩容\n\n    }\n\n    raid原理与区别{\n\n        raid0至少2块硬盘.吞吐量大,性能好,同时读写,但损坏一个就完蛋\n        raid1至少2块硬盘.相当镜像,一个存储,一个备份.安全性比较高.但是性能比0弱\n        raid5至少3块硬盘.分别存储校验信息和数据，坏了一个根据校验信息能恢复\n        raid6至少4块硬盘.两个独立的奇偶系统,可坏两块磁盘,写性能非常差\n\n    }\n\n}\n\n7 用户{\n\n    users                                      # 显示所有的登录用户\n    groups                                     # 列出当前用户和他所属的组\n    who -q                                     # 显示所有的登录用户\n    groupadd                                   # 添加组\n    useradd user                               # 建立用户\n    passwd username                            # 修改密码\n    userdel -r                                 # 删除帐号及家目录\n    chown -R user:group                        # 修改目录拥有者(R递归)\n    chown y\\.li:mysql                          # 修改所有者用户中包含点\".\"\n    umask                                      # 设置用户文件和目录的文件创建缺省屏蔽值\n    chgrp                                      # 修改用户组\n    finger                                     # 查找用户显示信息\n    echo \"xuesong\" | passwd user --stdin       # 非交互修改密码\n    useradd -g www -M  -s /sbin/nologin  www   # 指定组并不允许登录的用户,nologin允许使用服务\n    useradd -g www -M  -s /bin/false  www      # 指定组并不允许登录的用户,false最为严格\n    useradd -d /data/song -g song song         # 创建用户并指定家目录和组\n    usermod -l newuser olduser                 # 修改用户名\n    usermod -g user group                      # 修改用户所属组\n    usermod -d dir -m user                     # 修改用户家目录\n    usermod -G group user                      # 将用户添加到附加组\n    gpasswd -d user group                      # 从组中删除用户\n    su - user -c \" #cmd1; \"                    # 切换用户执行\n\n    恢复密码{\n\n        # 即进入单用户模式: 在linux出现grub后，在安装的系统上面按\"e\"，然后出现grub的配置文件，按键盘移动光标到第二行\"Ker……\"，再按\"e\"，然后在这一行的结尾加上：空格 single或者空格1回车，然后按\"b\"重启，就进入了\"单用户模式\"\n    }\n\n    特殊权限{\n\n        s或 S （SUID）：对应数值4\n        s或 S （SGID）：对应数值2\n        t或 T ：对应数值1\n        大S：代表拥有root权限，但是没有执行权限\n        小s：拥有特权且拥有执行权限，这个文件可以访问系统任何root用户可以访问的资源\n        T或T（Sticky）：/tmp和 /var/tmp目录供所有用户暂时存取文件，亦即每位用户皆拥有完整的权限进入该目录，去浏览、删除和移动文件\n\n    }\n\n}\n\n8 脚本{\n\n    #!/bin/sh                             # 在脚本第一行脚本头 # sh为当前系统默认shell,可指定为bash等shell\n    shopt                                 # 显示和设置shell中的行为选项\n    sh -x                                 # 执行过程\n    sh -n                                 # 检查语法\n    set -e                                # 若指令传回值不等于0，则立即退出shell\n    (a=bbk)                               # 括号创建子shell运行\n    basename /a/b/c                       # 从全路径中保留最后一层文件名或目录\n    dirname                               # 取路径\n    $RANDOM                               # 随机数\n    $$                                    # 进程号\n    source FileName                       # 在当前bash环境下读取并执行FileName中的命令  # 等同 . FileName\n    sleep 5                               # 间隔睡眠5秒\n    trap                                  # 在接收到信号后将要采取的行动\n    trap \"\" 2 3                           # 禁止ctrl+c\n    $PWD                                  # 当前目录\n    $HOME                                 # 家目录\n    $OLDPWD                               # 之前一个目录的路径\n    cd -                                  # 返回上一个目录路径\n    local ret                             # 局部变量\n    yes                                   # 重复打印\n    yes |rm -i *                          # 自动回答y或者其他\n    ls -p /home                           # 区分目录和文件夹\n    ls -d /home/                          # 查看匹配完整路径\n    time a.sh                             # 测试程序执行时间\n    echo -n aa;echo bb                    # 不换行执行下一句话 将字符串原样输出\n    echo -e \"s\\tss\\n\\n\\n\"                 # 使转义生效\n    echo $a | cut -c2-6                   # 取字符串中字元\n    echo {a,b,c}{a,b,c}{a,b,c}            # 排列组合(括号内一个元素分别和其他括号内元素组合)\n    echo $((2#11010))                     # 二进制转10进制\n    echo aaa | tee file                   # 打印同时写入文件 默认覆盖 -a追加\n    echo {1..10}                          # 打印10个字符\n    printf '%10s\\n'|tr \" \" a              # 打印10个字符\n    pwd | awk -F/ '{ print $2 }'          # 返回目录名\n    tac file |sed 1,3d|tac                # 倒置读取文件  # 删除最后3行\n    tail -3 file                          # 取最后3行\n    outtmp=/tmp/$$`date +%s%N`.outtmp     # 临时文件定义\n    :(){ :|:& };:                         # fork炸弹,系统执行海量的进程,直到系统僵死\n    echo -e \"\\e[32mcolour\\e[0m\"           # 打印颜色\n    echo -e \"\\033[32mcolour\\033[m\"        # 打印颜色\n    echo -e \"\\033[0;31mL\\033[0;32mO\\033[0;33mV\\033[0;34mE\\t\\033[0;35mY\\033[0;36mO\\033[0;32mU\\e[m\"    # 打印颜色\n\n    正则表达式{\n\n        ^                       # 行首定位\n        $                       # 行尾定位\n        .                       # 匹配除换行符以外的任意字符\n        *                       # 匹配0或多个重复字符\n        +                       # 重复一次或更多次\n        ?                       # 重复零次或一次\n        ?                       # 结束贪婪因子 .*? 表示最小匹配\n        []                      # 匹配一组中任意一个字符\n        [^]                     # 匹配不在指定组内的字符\n        \\                       # 用来转义元字符\n        <                       # 词首定位符(支持vi和grep)  <love\n        >                       # 词尾定位符(支持vi和grep)  love>\n        x\\{m\\}                  # 重复出现m次\n        x\\{m,\\}                 # 重复出现至少m次\n        x\\{m,n\\}                # 重复出现至少m次不超过n次\n        X?                      # 匹配出现零次或一次的大写字母 X\n        X+                      # 匹配一个或多个字母 X\n        ()                      # 括号内的字符为一组\n        (ab|de)+                # 匹配一连串的（最少一个） abc 或 def；abc 和 def 将匹配\n        [[:alpha:]]             # 代表所有字母不论大小写\n        [[:lower:]]             # 表示小写字母\n        [[:upper:]]             # 表示大写字母\n        [[:digit:]]             # 表示数字字符\n        [[:digit:][:lower:]]    # 表示数字字符加小写字母\n\n        元字符{\n\n            \\d       # 匹配任意一位数字\n            \\D       # 匹配任意单个非数字字符\n            \\w       # 匹配任意单个字母数字下划线字符，同义词是 [:alnum:]\n            \\W       # 匹配非数字型的字符\n\n        }\n\n        字符类:空白字符{\n\n            \\s       # 匹配任意的空白符\n            \\S       # 匹配非空白字符\n            \\b       # 匹配单词的开始或结束\n            \\n       # 匹配换行符\n            \\r       # 匹配回车符\n            \\t       # 匹配制表符\n            \\b       # 匹配退格符\n            \\0       # 匹配空值字符\n\n        }\n\n        字符类:锚定字符{\n\n            \\b       # 匹配字边界(不在[]中时)\n            \\B       # 匹配非字边界\n            \\A       # 匹配字符串开头\n            \\Z       # 匹配字符串或行的末尾\n            \\z       # 只匹配字符串末尾\n            \\G       # 匹配前一次m//g离开之处\n\n        }\n\n        捕获{\n\n            (exp)                # 匹配exp,并捕获文本到自动命名的组里\n            (?<name>exp)         # 匹配exp,并捕获文本到名称为name的组里，也可以写成(?'name'exp)\n            (?:exp)              # 匹配exp,不捕获匹配的文本，也不给此分组分配组号\n\n        }\n\n        零宽断言{\n\n            (?=exp)              # 匹配exp前面的位置\n            (?<=exp)             # 匹配exp后面的位置\n            (?!exp)              # 匹配后面跟的不是exp的位置\n            (?<!exp)             # 匹配前面不是exp的位置\n            (?#comment)          # 注释不对正则表达式的处理产生任何影响，用于注释\n\n        }\n\n        特殊字符{\n\n            http://en.wikipedia.org/wiki/Ascii_table\n            ^H  \\010 \\b\n            ^M  \\015 \\r\n            匹配特殊字符: ctrl+V ctrl不放在按H或M 即可输出^H,用于匹配\n\n        }\n\n    }\n\n    流程结构{\n\n        if判断{\n\n            if [ $a == $b ]\n            then\n                echo \"等于\"\n            else\n                echo \"不等于\"\n            fi\n\n        }\n\n        case分支选择{\n\n            case $xs in\n            0) echo \"0\" ;;\n            1) echo \"1\" ;;\n            *) echo \"其他\" ;;\n            esac\n\n        }\n\n        while循环{\n\n            # while true  等同   while :\n            # 读文件为整行读入\n            num=1\n            while [ $num -lt 10 ]\n            do\n            echo $num\n            ((num=$num+2))\n            done\n            ###########################\n            grep a  a.txt | while read a\n            do\n                echo $a\n            done\n            ###########################\n            while read a\n            do\n                echo $a\n            done < a.txt\n\n        }\n\n        for循环{\n\n            # 读文件已空格分隔\n            w=`awk -F \":\" '{print $1}' c`\n            for d in $w\n            do\n                $d\n            done\n            ###########################\n            for ((i=0;i<${#o[*]};i++))\n            do\n            echo ${o[$i]}\n            done\n\n        }\n\n        until循环{\n\n            #  当command不为0时循环\n            until command\n            do\n                body\n            done\n\n        }\n\n        流程控制{\n\n            break N     #  跳出几层循环\n            continue N  #  跳出几层循环，循环次数不变\n            continue    #  重新循环次数不变\n\n        }\n\n    }\n\n    变量{\n\n        A=\"a b c def\"           # 将字符串复制给变量\n        A=`cmd`                 # 将命令结果赋给变量\n        A=$(cmd)                # 将命令结果赋给变量\n        eval a=\\$$a             # 间接调用\n        i=2&&echo $((i+3))      # 计算后打印新变量结果\n        i=2&&echo $[i+3]        # 计算后打印新变量结果\n        a=$((2>6?5:8))          # 判断两个值满足条件的赋值给变量\n        $1  $2  $*              # 位置参数 *代表所有\n        env                     # 查看环境变量\n        env | grep \"name\"       # 查看定义的环境变量\n        set                     # 查看环境变量和本地变量\n        read name               # 输入变量\n        readonly name           # 把name这个变量设置为只读变量,不允许再次设置\n        readonly                # 查看系统存在的只读文件\n        export name             # 变量name由本地升为环境\n        export name=\"RedHat\"    # 直接定义name为环境变量\n        export Stat$nu=2222     # 变量引用变量赋值\n        unset name              # 变量清除\n        export -n name          # 去掉只读变量\n        shift                   # 用于移动位置变量,调整位置变量,使$3的值赋给$2.$2的值赋予$1\n        name + 0                # 将字符串转换为数字\n        number \" \"              # 将数字转换成字符串\n        a='ee';b='a';echo ${!b} # 间接引用name变量的值\n        : ${a=\"cc\"}             # 如果a有值则不改变,如果a无值则赋值a变量为cc\n\n        数组{\n\n            A=(a b c def)         # 将变量定义为数組\n            ${#A[*]}              # 数组个数\n            ${A[*]}               # 数组所有元素,大字符串\n            ${A[@]}               # 数组所有元素,类似列表可迭代\n            ${A[2]}               # 脚本的一个参数或数组第三位\n\n        }\n\n        定义变量类型{\n\n            declare 或 typeset\n            -r 只读(readonly一样)\n            -i 整形\n            -a 数组\n            -f 函数\n            -x export\n            declare -i n=0\n\n        }\n\n        系统变量{\n\n            $0   #  脚本启动名(包括路径)\n            $n   #  第n个参数,n=1,2,…9\n            $*   #  所有参数列表(不包括脚本本身)\n            $@   #  所有参数列表(独立字符串)\n            $#   #  参数个数(不包括脚本本身)\n            $$   #  当前程式的PID\n            $!   #  执行上一个指令的PID\n            $?   #  执行上一个指令的返回值\n\n        }\n\n        变量引用技巧{\n\n            ${name:+value}        # 如果设置了name,就把value显示,未设置则为空\n            ${name:-value}        # 如果设置了name,就显示它,未设置就显示value\n            ${name:?value}        # 未设置提示用户错误信息value \n            ${name:=value}        # 如未设置就把value设置并显示<写入本地中>\n            ${#A}                 # 可得到变量中字节\n            ${A:4:9}              # 取变量中第4位到后面9位\n            ${A:(-1)}             # 倒叙取最后一个字符\n            ${A/www/http}         # 取变量并且替换每行第一个关键字\n            ${A//www/http}        # 取变量并且全部替换每行关键字\n\n            定义了一个变量： file=/dir1/dir2/dir3/my.file.txt\n            ${file#*/}     # 去掉第一条 / 及其左边的字串：dir1/dir2/dir3/my.file.txt\n            ${file##*/}    # 去掉最后一条 / 及其左边的字串：my.file.txt\n            ${file#*.}     # 去掉第一个 .  及其左边的字串：file.txt\n            ${file##*.}    # 去掉最后一个 .  及其左边的字串：txt\n            ${file%/*}     # 去掉最后条 / 及其右边的字串：/dir1/dir2/dir3\n            ${file%%/*}    # 去掉第一条 / 及其右边的字串：(空值)\n            ${file%.*}     # 去掉最后一个 .  及其右边的字串：/dir1/dir2/dir3/my.file\n            ${file%%.*}    # 去掉第一个 .  及其右边的字串：/dir1/dir2/dir3/my\n            #   # 是去掉左边(在键盘上 # 在 $ 之左边)\n            #   % 是去掉右边(在键盘上 % 在 $ 之右边)\n            #   单一符号是最小匹配﹔两个符号是最大匹配\n\n        }\n\n    }\n\n    test条件判断{\n\n        # 符号 [ ] 等同  test命令\n\n        expression为字符串操作{\n\n            -n str   # 字符串str是否不为空\n            -z str   # 字符串str是否为空\n\n        }\n\n        expression为文件操作{\n\n            -a     # 并且，两条件为真\n            -b     # 是否块文件\n            -p     # 文件是否为一个命名管道\n            -c     # 是否字符文件\n            -r     # 文件是否可读\n            -d     # 是否一个目录\n            -s     # 文件的长度是否不为零\n            -e     # 文件是否存在\n            -S     # 是否为套接字文件\n            -f     # 是否普通文件\n            -x     # 文件是否可执行，则为真\n            -g     # 是否设置了文件的 SGID 位\n            -u     # 是否设置了文件的 SUID 位\n            -G     # 文件是否存在且归该组所有\n            -w     # 文件是否可写，则为真\n            -k     # 文件是否设置了的粘贴位\n            -t fd  # fd 是否是个和终端相连的打开的文件描述符（fd 默认为 1）\n            -o     # 或，一个条件为真\n            -O     # 文件是否存在且归该用户所有\n            !      # 取反\n\n        }\n\n        expression为整数操作{\n\n            expr1 -a expr2   # 如果 expr1 和 expr2 评估为真，则为真\n            expr1 -o expr2   # 如果 expr1 或 expr2 评估为真，则为真\n\n        }\n\n        两值比较{\n\n            整数     字符串\n            -lt      <         # 小于\n            -gt      >         # 大于\n            -le      <=        # 小于或等于\n            -ge      >=        # 大于或等于\n            -eq      ==        # 等于\n            -ne      !=        # 不等于\n\n        }\n\n        test 10 -lt 5       # 判断大小\n        echo $?             # 查看上句test命令返回状态  # 结果0为真,1为假\n        test -n \"hello\"     # 判断字符串长度是否为0\n        [ $? -eq 0 ] && echo \"success\" || exit　　　# 判断成功提示,失败则退出\n\n    }\n\n    重定向{\n\n        #  标准输出 stdout 和 标准错误 stderr  标准输入stdin\n        cmd 1> fiel              # 把 标准输出 重定向到 file 文件中\n        cmd > file 2>&1          # 把 标准输出 和 标准错误 一起重定向到 file 文件中\n        cmd 2> file              # 把 标准错误 重定向到 file 文件中\n        cmd 2>> file             # 把 标准错误 重定向到 file 文件中(追加)\n        cmd >> file 2>&1         # 把 标准输出 和 标准错误 一起重定向到 file 文件中(追加)\n        cmd < file >file2        # cmd 命令以 file 文件作为 stdin(标准输入)，以 file2 文件作为 标准输出\n        cat <>file               # 以读写的方式打开 file\n        cmd < file cmd           # 命令以 file 文件作为 stdin\n        cmd << delimiter\n        cmd; #从 stdin 中读入，直至遇到 delimiter 分界符\ndelimiter\n\n        >&n    # 使用系统调用 dup (2) 复制文件描述符 n 并把结果用作标准输出\n        <&n    # 标准输入复制自文件描述符 n\n        <&-    # 关闭标准输入（键盘）\n        >&-    # 关闭标准输出\n        n<&-   # 表示将 n 号输入关闭\n        n>&-   # 表示将 n 号输出关闭\n\n    }\n\n    运算符{\n\n        $[]等同于$(())  # $[]表示形式告诉shell求中括号中的表达式的值\n        ~var            # 按位取反运算符,把var中所有的二进制为1的变为0,为0的变为1\n        var\\<<str       # 左移运算符,把var中的二进制位向左移动str位,忽略最左端移出的各位,最右端的各位上补上0值,每做一次按位左移就有var乘2\n        var>>str        # 右移运算符,把var中所有的二进制位向右移动str位,忽略最右移出的各位,最左的各位上补0,每次做一次右移就有实现var除以2\n        var&str         # 与比较运算符,var和str对应位,对于每个二进制来说,如果二都为1,结果为1.否则为0\n        var^str         # 异或运算符,比较var和str对应位,对于二进制来说如果二者互补,结果为1,否则为0\n        var|str         # 或运算符,比较var和str的对应位,对于每个二进制来说,如二都该位有一个1或都是1,结果为1,否则为0\n\n        运算符优先级{\n            级别      运算符                                  说明\n            1      =,+=,-=,/=,%=,*=,&=,^=,|=,<<=,>>=      # 赋值运算符\n            2         ||                                  # 逻辑或 前面不成功执行\n            3         &&                                  # 逻辑与 前面成功后执行\n            4         |                                   # 按位或\n            5         ^                                   # 按位异或\n            6         &                                   # 按位与\n            7         ==,!=                               # 等于/不等于\n            8         <=,>=,<,>                           # 小于或等于/大于或等于/小于/大于\n            9        \\<<,>>                               # 按位左移/按位右移 (无转意符号)\n            10        +,-                                 # 加减\n            11        *,/,%                               # 乘,除,取余\n            12        ! ,~                                # 逻辑非,按位取反或补码\n            13        -,+                                 # 正负\n        }\n    }\n    数学运算{\n        $(( ))        # 整数运算\n        + - * / **    # 分別为 \"加、減、乘、除、密运算\"\n        & | ^ !       # 分別为 \"AND、OR、XOR、NOT\" 运算\n        %             # 余数运算\n        let{\n            let # 运算\n            let x=16/4\n            let x=5**5\n        }\n        expr{\n            expr 14 % 9                    # 整数运算\n            SUM=`expr 2 \\* 3`              # 乘后结果赋值给变量\n            LOOP=`expr $LOOP + 1`          # 增量计数(加循环即可) LOOP=0\n            expr length \"bkeep zbb\"        # 计算字串长度\n            expr substr \"bkeep zbb\" 4 9    # 抓取字串\n            expr index \"bkeep zbb\" e       # 抓取第一个字符数字串出现的位置\n            expr 30 / 3 / 2                # 运算符号有空格\n            expr bkeep.doc : '.*'          # 模式匹配(可以使用expr通过指定冒号选项计算字符串中字符数)\n            expr bkeep.doc : '\\(.*\\).doc'  # 在expr中可以使用字符串匹配操作，这里使用模式抽取.doc文件附属名\n            数值测试{\n                #如果试图计算非整数，则会返回错误\n                rr=3.4\n                expr $rr + 1\n                expr: non-numeric argument\n                rr=5\n                expr $rr + 1\n                6\n            }\n        }\n        bc{\n            echo \"m^n\"|bc            # 次方计算\n            seq -s '+' 1000 |bc      # 从1加到1000\n            seq 1 1000 |tr \"\\n\" \"+\"|sed 's/+$/\\n/'|bc   # 从1加到1000\n        }\n    }\n    grep{\n        -c    # 显示匹配到得行的数目，不显示内容\n        -h    # 不显示文件名\n        -i    # 忽略大小写\n        -l    # 只列出匹配行所在文件的文件名\n        -n    # 在每一行中加上相对行号\n        -s    # 无声操作只显示报错，检查退出状态\n        -v    # 反向查找\n        -e    # 使用正则表达式\n        -w    # 精确匹配\n        -wc   # 精确匹配次数\n        -o    # 查询所有匹配字段\n        -P    # 使用perl正则表达式\n        -A3   # 打印匹配行和下三行\n        -B3   # 打印匹配行和上三行\n        -C3   # 打印匹配行和上下三行\n        grep -v \"a\" txt                              # 过滤关键字符行\n        grep -w 'a\\>' txt                            # 精确匹配字符串\n        grep -i \"a\" txt                              # 大小写敏感\n        grep  \"a[bB]\" txt                            # 同时匹配大小写\n        grep '[0-9]\\{3\\}' txt                        # 查找0-9重复三次的所在行\n        grep -E \"word1|word2|word3\"   file           # 任意条件匹配\n        grep word1 file | grep word2 |grep word3     # 同时匹配三个\n        echo quan@163.com |grep -Po '(?<=@.).*(?=.$)'                           # 零宽断言截取字符串  #　63.co\n        echo \"I'm singing while you're dancing\" |grep -Po '\\b\\w+(?=ing\\b)'      # 零宽断言匹配\n        echo 'Rx Optical Power: -5.01dBm, Tx Optical Power: -2.41dBm' |grep -Po '(?<=:).*?(?=d)'           # 取出d前面数字 # ?为最小匹配\n        echo 'Rx Optical Power: -5.01dBm, Tx Optical Power: -2.41dBm' | grep -Po '[-0-9.]+'                # 取出d前面数字 # ?为最小匹配\n        echo '[\"mem\",ok],[\"hardware\",false],[\"filesystem\",false]' |grep -Po '[^\"]+(?=\",false)'             # 取出false前面的字母\n        echo '[\"mem\",ok],[\"hardware\",false],[\"filesystem\",false]' |grep -Po '\\w+\",false'|grep -Po '^\\w+'   # 取出false前面的字母\n        grep用于if判断{\n            if echo abc | grep \"a\"  > /dev/null 2>&1\n            then\n                echo \"abc\"\n            else\n                echo \"null\"\n            fi\n        }\n    }\n    tr{\n        -c          # 用字符串1中字符集的补集替换此字符集，要求字符集为ASCII\n        -d          # 删除字符串1中所有输入字符\n        -s          # 删除所有重复出现字符序列，只保留第一个:即将重复出现字符串压缩为一个字符串\n        [a-z]       # a-z内的字符组成的字符串\n        [A-Z]       # A-Z内的字符组成的字符串\n        [0-9]       # 数字串\n        \\octal      # 一个三位的八进制数，对应有效的ASCII字符\n        [O*n]       # 表示字符O重复出现指定次数n。因此[O*2]匹配OO的字符串\n        tr中特定控制字符表达方式{\n            \\a Ctrl-G    \\007    # 铃声\n            \\b Ctrl-H    \\010    # 退格符\n            \\f Ctrl-L    \\014    # 走行换页\n            \\n Ctrl-J    \\012    # 新行\n            \\r Ctrl-M    \\015    # 回车\n            \\t Ctrl-I    \\011    # tab键\n            \\v Ctrl-X    \\030\n        }\n        tr A-Z a-z                             # 将所有大写转换成小写字母\n        tr \" \" \"\\n\"                            # 将空格替换为换行\n        tr -s \"[\\012]\" < plan.txt              # 删除空行\n        tr -s [\"\\n\"] < plan.txt                # 删除空行\n        tr -s \"[\\015]\" \"[\\n]\" < file           # 删除文件中的^M，并代之以换行\n        tr -s \"[\\r]\" \"[\\n]\" < file             # 删除文件中的^M，并代之以换行\n        tr -s \"[:]\" \"[\\011]\" < /etc/passwd     # 替换passwd文件中所有冒号，代之以tab键\n        tr -s \"[:]\" \"[\\t]\" < /etc/passwd       # 替换passwd文件中所有冒号，代之以tab键\n        echo $PATH | tr \":\" \"\\n\"               # 增加显示路径可读性\n        1,$!tr -d '\\t'                         # tr在vi内使用，在tr前加处理行范围和感叹号('$'表示最后一行)\n        tr \"\\r\" \"\\n\"<macfile > unixfile        # Mac -> UNIX\n        tr \"\\n\" \"\\r\"<unixfile > macfile        # UNIX -> Mac\n        tr -d \"\\r\"<dosfile > unixfile          # DOS -> UNIX  Microsoft DOS/Windows 约定，文本的每行以回车字符(\\r)并后跟换行符(\\n)结束\n        awk '{ print $0\"\\r\" }'<unixfile > dosfile   # UNIX -> DOS：在这种情况下，需要用awk，因为tr不能插入两个字符来替换一个字符\n    }\n    seq{\n        # 不指定起始数值，则默认为 1\n        -s   # 选项主要改变输出的分格符, 预设是 \\n\n        -w   # 等位补全，就是宽度相等，不足的前面补 0\n        -f   # 格式化输出，就是指定打印的格式\n        seq 10 100               # 列出10-100\n        seq 1 10 |tac            # 倒叙列出\n        seq -s '+' 90 100 |bc    # 从90加到100\n        seq -f 'dir%g' 1 10 | xargs mkdir     # 创建dir1-10\n        seq -f 'dir%03g' 1 10 | xargs mkdir   # 创建dir001-010\n    }\n    trap{\n        信号         说明\n        HUP(1)     # 挂起，通常因终端掉线或用户退出而引发\n        INT(2)     # 中断，通常因按下Ctrl+C组合键而引发\n        QUIT(3)    # 退出，通常因按下Ctrl+\\组合键而引发\n        ABRT(6)    # 中止，通常因某些严重的执行错误而引发\n        ALRM(14)   # 报警，通常用来处理超时\n        TERM(15)   # 终止，通常在系统关机时发送\n        trap捕捉到信号之后，可以有三种反应方式：\n            1、执行一段程序来处理这一信号\n            2、接受信号的默认操作\n            3、忽视这一信号\n        第一种形式的trap命令在shell接收到 signal list 清单中数值相同的信号时，将执行双引号中的命令串：\n        trap 'commands' signal-list   # 单引号，要在shell探测到信号来的时候才执行命令和变量的替换，时间一直变\n        trap \"commands\" signal-list   # 双引号，shell第一次设置信号的时候就执行命令和变量的替换，时间不变\n    }\n    awk{\n        # 默认是执行打印全部 print $0\n        # 1为真 打印$0\n        # 0为假 不打印\n        -F   # 改变FS值(分隔符)\n        ~    # 域匹配\n        ==   # 变量匹配\n        !~   # 匹配不包含\n        =    # 赋值\n        !=   # 不等于\n        +=   # 叠加\n        \\b   # 退格\n        \\f   # 换页\n        \\n   # 换行\n        \\r   # 回车\n        \\t   # 制表符Tab\n        \\c   # 代表任一其他字符\n        -F\"[ ]+|[%]+\"  # 多个空格或多个%为分隔符\n        [a-z]+         # 多个小写字母\n        [a-Z]          # 代表所有大小写字母(aAbB...zZ)\n        [a-z]          # 代表所有大小写字母(ab...z)\n        [:alnum:]      # 字母数字字符\n        [:alpha:]      # 字母字符\n        [:cntrl:]      # 控制字符\n        [:digit:]      # 数字字符\n        [:graph:]      # 非空白字符(非空格、控制字符等)\n        [:lower:]      # 小写字母\n        [:print:]      # 与[:graph:]相似，但是包含空格字符\n        [:punct:]      # 标点字符\n        [:space:]      # 所有的空白字符(换行符、空格、制表符)\n        [:upper:]      # 大写字母\n        [:xdigit:]     # 十六进制的数字(0-9a-fA-F)\n        [[:digit:][:lower:]]    # 数字和小写字母(占一个字符)\n        内建变量{\n            $n            # 当前记录的第 n 个字段，字段间由 FS 分隔\n            $0            # 完整的输入记录\n            ARGC          # 命令行参数的数目\n            ARGIND        # 命令行中当前文件的位置 ( 从 0 开始算 )\n            ARGV          # 包含命令行参数的数组\n            CONVFMT       # 数字转换格式 ( 默认值为 %.6g)\n            ENVIRON       # 环境变量关联数组\n            ERRNO         # 最后一个系统错误的描述\n            FIELDWIDTHS   # 字段宽度列表 ( 用空格键分隔 )\n            FILENAME      # 当前文件名\n            FNR           # 同 NR ，但相对于当前文件\n            FS            # 字段分隔符 ( 默认是任何空格 )\n            IGNORECASE    # 如果为真（即非 0 值），则进行忽略大小写的匹配\n            NF            # 当前记录中的字段数(列)\n            NR            # 当前行数\n            OFMT          # 数字的输出格式 ( 默认值是 %.6g)\n            OFS           # 输出字段分隔符 ( 默认值是一个空格 )\n            ORS           # 输出记录分隔符 ( 默认值是一个换行符 )\n            RLENGTH       # 由 match 函数所匹配的字符串的长度\n            RS            # 记录分隔符 ( 默认是一个换行符 )\n            RSTART        # 由 match 函数所匹配的字符串的第一个位置\n            SUBSEP        # 数组下标分隔符 ( 默认值是 /034)\n            BEGIN         # 先处理(可不加文件参数)\n            END           # 结束时处理\n        }\n        内置函数{\n            gsub(r,s)          # 在整个$0中用s替代r   相当于 sed 's///g'\n            gsub(r,s,t)        # 在整个t中用s替代r\n            index(s,t)         # 返回s中字符串t的第一位置\n            length(s)          # 返回s长度\n            match(s,r)         # 测试s是否包含匹配r的字符串\n            split(s,a,fs)      # 在fs上将s分成序列a\n            sprint(fmt,exp)    # 返回经fmt格式化后的exp\n            sub(r,s)           # 用$0中最左边最长的子串代替s   相当于 sed 's///'\n            substr(s,p)        # 返回字符串s中从p开始的后缀部分\n            substr(s,p,n)      # 返回字符串s中从p开始长度为n的后缀部分\n        }\n        awk判断{\n\t\t    zgrep \" 200 \" access.log-202109*.gz |awk '{if ( $10 > 200) { print $7 }}' |awk -F\"?\" '{ print $1 }'|sort|uniq -c|sort -nr\n            awk '{print ($1>$2)?\"第一排\"$1:\"第二排\"$2}'      # 条件判断 括号代表if语句判断 \"?\"代表then \":\"代表else\n            awk '{max=($1>$2)? $1 : $2; print max}'          # 条件判断 如果$1大于$2,max值为为$1,否则为$2\n            awk '{if ( $6 > 50) print $1 \" Too high\" ;\\\n            else print \"Range is OK\"}' file\n            awk '{if ( $6 > 50) { count++;print $3 } \\\n            else { x+5; print $2 } }' file\n        }\n        awk循环{\n            awk '{i = 1; while ( i <= NF ) { print NF, $i ; i++ } }' file\n            awk '{ for ( i = 1; i <= NF; i++ ) print NF,$i }' file\n        }\n        awk '/Tom/' file               # 打印匹配到得行\n        awk '/^Tom/{print $1}'         # 匹配Tom开头的行 打印第一个字段\n        awk '$1 !~ /ly$/'              # 显示所有第一个字段不是以ly结尾的行\n        awk '$3 <40'                   # 如果第三个字段值小于40才打印\n        awk '$4==90{print $5}'         # 取出第四列等于90的第五列\n        awk '/^(no|so)/' test          # 打印所有以模式no或so开头的行\n        awk '$3 * $4 > 500'            # 算术运算(第三个字段和第四个字段乘积大于500则显示)\n        awk '{print NR\" \"$0}'          # 加行号\n        awk '/tom/,/suz/'              # 打印tom到suz之间的行\n        awk '{a+=$1}END{print a}'      # 列求和\n        awk 'sum+=$1{print sum}'       # 将$1的值叠加后赋给sum\n        awk '{a+=$1}END{print a/NR}'   # 列求平均值\n        awk '!s[$1 $3]++' file         # 根据第一列和第三列过滤重复行\n        awk -F'[ :\\t]' '{print $1,$2}'           # 以空格、:、制表符Tab为分隔符\n        awk '{print \"'\"$a\"'\",\"'\"$b\"'\"}'          # 引用外部变量\n        awk '{if(NR==52){print;exit}}'           # 显示第52行\n        awk '/关键字/{a=NR+2}a==NR {print}'      # 取关键字下第几行\n        awk 'gsub(/liu/,\"aaaa\",$1){print $0}'    # 只打印匹配替换后的行\n        ll | awk -F'[ ]+|[ ][ ]+' '/^$/{print $8}'             # 提取时间,空格不固定\n        awk '{$1=\"\";$2=\"\";$3=\"\";print}'                        # 去掉前三列\n        echo aada:aba|awk '/d/||/b/{print}'                    # 匹配两内容之一\n        echo aada:abaa|awk -F: '$1~/d/||$2~/b/{print}'         # 关键列匹配两内容之一\n        echo Ma asdas|awk '$1~/^[a-Z][a-Z]$/{print }'          # 第一个域匹配正则\n        echo aada:aaba|awk '/d/&&/b/{print}'                   # 同时匹配两条件\n        awk 'length($1)==\"4\"{print $1}'                        # 字符串位数\n        awk '{if($2>3){system (\"touch \"$1)}}'                  # 执行系统命令\n        awk '{sub(/Mac/,\"Macintosh\",$0);print}'                # 用Macintosh替换Mac\n        awk '{gsub(/Mac/,\"MacIntosh\",$1); print}'              # 第一个域内用Macintosh替换Mac\n        awk -F '' '{ for(i=1;i<NF+1;i++)a+=$i  ;print a}'      # 多位数算出其每位数的总和.比如 1234， 得到 10\n        awk '{ i=$1%10;if ( i == 0 ) {print i}}'               # 判断$1是否整除(awk中定义变量引用时不能带 $ )\n        awk 'BEGIN{a=0}{if ($1>a) a=$1 fi}END{print a}'        # 列求最大值  设定一个变量开始为0，遇到比该数大的值，就赋值给该变量，直到结束\n        awk 'BEGIN{a=11111}{if ($1<a) a=$1 fi}END{print a}'    # 求最小值\n        awk '{if(A)print;A=0}/regexp/{A=1}'                    # 查找字符串并将匹配行的下一行显示出来，但并不显示匹配行\n        awk '/regexp/{print A}{A=$0}'                          # 查找字符串并将匹配行的上一行显示出来，但并不显示匹配行\n        awk '{if(!/mysql/)gsub(/1/,\"a\");print $0}'             # 将1替换成a，并且只在行中未出现字串mysql的情况下替换\n        awk 'BEGIN{srand();fr=int(100*rand());print fr;}'      # 获取随机数\n        awk '{if(NR==3)F=1}{if(F){i++;if(i%7==1)print}}'       # 从第3行开始，每7行显示一次\n        awk '{if(NF<1){print i;i=0} else {i++;print $0}}'      # 显示空行分割各段的行数\n        echo +null:null  |awk -F: '$1!~\"^+\"&&$2!=\"null\"{print $0}'       # 关键列同时匹配\n        awk -v RS=@ 'NF{for(i=1;i<=NF;i++)if($i) printf $i;print \"\"}'    # 指定记录分隔符\n        awk '{b[$1]=b[$1]$2}END{for(i in b){print i,b[i]}}'              # 列叠加\n        awk '{ i=($1%100);if ( $i >= 0 ) {print $0,$i}}'                 # 求余数\n        awk '{b=a;a=$1; if(NR>1){print a-b}}'                            # 当前行减上一行\n        awk '{a[NR]=$1}END{for (i=1;i<=NR;i++){print a[i]-a[i-1]}}'      # 当前行减上一行\n        awk -F: '{name[x++]=$1};END{for(i=0;i<NR;i++)print i,name[i]}'   # END只打印最后的结果,END块里面处理数组内容\n        awk '{sum2+=$2;count=count+1}END{print sum2,sum2/count}'         # $2的总和  $2总和除个数(平均值)\n        awk -v a=0 -F 'B' '{for (i=1;i<NF;i++){ a=a+length($i)+1;print a  }}'     # 打印所以B的所在位置\n        awk 'BEGIN{ \"date\" | getline d; split(d,mon) ; print mon[2]}' file        # 将date值赋给d，并将d设置为数组mon，打印mon数组中第2个元素\n        awk 'BEGIN{info=\"this is a test2010test!\";print substr(info,4,10);}'      # 截取字符串(substr使用)\n        awk 'BEGIN{info=\"this is a test2010test!\";print index(info,\"test\")?\"ok\":\"no found\";}'      # 匹配字符串(index使用)\n        awk 'BEGIN{info=\"this is a test2010test!\";print match(info,/[0-9]+/)?\"ok\":\"no found\";}'    # 正则表达式匹配查找(match使用)\n        awk '{for(i=1;i<=4;i++)printf $i\"\"FS; for(y=10;y<=13;y++)  printf $y\"\"FS;print \"\"}'        # 打印前4列和后4列\n        awk 'BEGIN{for(n=0;n++<9;){for(i=0;i++<n;)printf i\"x\"n\"=\"i*n\" \";print \"\"}}'                # 乘法口诀\n        awk 'BEGIN{info=\"this is a test\";split(info,tA,\" \");print length(tA);for(k in tA){print k,tA[k];}}'             # 字符串分割(split使用)\n        awk '{if (system (\"grep \"$2\" tmp/* > /dev/null 2>&1\") == 0 ) {print $1,\"Y\"} else {print $1,\"N\"} }' a            # 执行系统命令判断返回状态\n        awk  '{for(i=1;i<=NF;i++) a[i,NR]=$i}END{for(i=1;i<=NF;i++) {for(j=1;j<=NR;j++) printf a[i,j] \" \";print \"\"}}'   # 将多行转多列\n        netstat -an|awk -v A=$IP -v B=$PORT 'BEGIN{print \"Clients\\tGuest_ip\"}$4~A\":\"B{split($5,ip,\":\");a[ip[1]]++}END{for(i in a)print a[i]\"\\t\"i|\"sort -nr\"}'    # 统计IP连接个数\n        cat 1.txt|awk -F\" # \" '{print \"insert into user (user,password,email)values(\"\"'\\''\"$1\"'\\'\\,'\"\"'\\''\"$2\"'\\'\\,'\"\"'\\''\"$3\"'\\'\\)\\;'\"}' >>insert_1.txt     # 处理sql语句\n        awk 'BEGIN{printf \"what is your name?\";getline name < \"/dev/tty\" } $1 ~name {print \"FOUND\" name \" on line \", NR \".\"} END{print \"see you,\" name \".\"}' file  # 两文件匹配\n        取本机IP{\n            /sbin/ifconfig |awk -v RS=\"Bcast:\" '{print $NF}'|awk -F: '/addr/{print $2}'\n            /sbin/ifconfig |awk '/inet/&&$2!~\"127.0.0.1\"{split($2,a,\":\");print a[2]}'\n            /sbin/ifconfig |awk -v RS='inet addr:' '$1!=\"eth0\"&&$1!=\"127.0.0.1\"{print $1}'|awk '{printf\"%s|\",$0}'\n            /sbin/ifconfig |awk  '{printf(\"line %d,%s\\n\",NR,$0)}'         # 指定类型(%d数字,%s字符)\n        }\n        查看磁盘空间{\n            df -h|awk -F\"[ ]+|%\" '$5>14{print $5}'\n            df -h|awk 'NR!=1{if ( NF == 6 ) {print $5} else if ( NF == 5) {print $4} }'\n            df -h|awk 'NR!=1 && /%/{sub(/%/,\"\");print $(NF-1)}'\n            df -h|sed '1d;/ /!N;s/\\n//;s/ \\+/ /;'    #将磁盘分区整理成一行   可直接用 df -P\n        }\n        排列打印{\n            awk 'END{printf \"%-10s%-10s\\n%-10s%-10s\\n%-10s%-10s\\n\",\"server\",\"name\",\"123\",\"12345\",\"234\",\"1234\"}' txt\n            awk 'BEGIN{printf \"|%-10s|%-10s|\\n|%-10s|%-10s|\\n|%-10s|%-10s|\\n\",\"server\",\"name\",\"123\",\"12345\",\"234\",\"1234\"}'\n            awk 'BEGIN{\n            print \"   *** 开 始 ***   \";\n            print \"+-----------------+\";\n            printf \"|%-5s|%-5s|%-5s|\\n\",\"id\",\"name\",\"ip\";\n            }\n            $1!=1 && NF==4{printf \"|%-5s|%-5s|%-5s|\\n\",$1,$2,$3\" \"$11}\n            END{\n            print \"+-----------------+\";\n            print \"   *** 结 束 ***   \"\n            }' txt\n        }\n        awk经典题{\n            分析图片服务日志，把日志（每个图片访问次数*图片大小的总和）排行，也就是计算每个url的总访问大小\n            说明：本题生产环境应用：这个功能可以用于IDC网站流量带宽很高，然后通过分析服务器日志哪些元素占用流量过大，进而进行优化或裁剪该图片，压缩js等措施。\n            本题需要输出三个指标： 【被访问次数】    【访问次数*单个被访问文件大小】   【文件名（带URL）】\n            测试数据\n            59.33.26.105 - - [08/Dec/2010:15:43:56 +0800] \"GET /static/images/photos/2.jpg HTTP/1.1\" 200 11299\n            awk '{array_num[$7]++;array_size[$7]+=$10}END{for(i in array_num) {print array_num[i]\" \"array_size[i]\" \"i}}'\n        }\n        awk练习题{\n            wang     4\n            cui      3\n            zhao     4\n            liu      3\n            liu      3\n            chang    5\n            li       2\n            1 通过第一个域找出字符长度为4的\n            2 当第二列值大于3时，创建空白文件，文件名为当前行第一个域$1 (touch $1)\n            3 将文档中 liu 字符串替换为 hong\n            4 求第二列的和\n            5 求第二列的平均值\n            6 求第二列中的最大值\n            7 将第一列过滤重复后，列出每一项，每一项的出现次数，每一项的大小总和\n            1、字符串长度\n                awk 'length($1)==\"4\"{print $1}'\n            2、执行系统命令\n                awk '{if($2>3){system (\"touch \"$1)}}'\n            3、gsub(/r/,\"s\",域) 在指定域(默认$0)中用s替代r  (sed 's///g')\n                awk '{gsub(/liu/,\"hong\",$1);print $0}' a.txt\n            4、列求和\n                awk '{a+=$2}END{print a}'\n            5、列求平均值\n                awk '{a+=$2}END{print a/NR}'\n                awk '{a+=$2;b++}END{print a,a/b}'\n            6、列求最大值\n                awk 'BEGIN{a=0}{if($2>a) a=$2 }END{print a}'\n            7、将第一列过滤重复列出每一项，每一项的出现次数，每一项的大小总和\n                awk '{a[$1]++;b[$1]+=$2}END{for(i in a){print i,a[i],b[i]}}'\n        }\n        awk处理复杂日志{\n            6.19：\n            DHB_014_号百总机服务业务日报：广州 到达数异常！\n            DHB_023_号百漏话提醒日报：珠海 到达数异常！\n            6.20：\n            DHB_014_号百总机服务业务日报：广州 到达数异常！到\n            awk -F '[_ ：]+' 'NF>2{print $4,$1\"_\"$2,b |\"sort\";next}{b=$1}'\n            # 当前行NF小于等于2 只针对{print $4,$1\"_\"$2,b |\"sort\";next} 有效 即 6.19：行跳过此操作,  {b=$1} 仍然执行\n            # 当前行NF大于2 执行到 next 强制跳过本行，即跳过后面的 {b=$1}\n            广州 DHB_014 6.19\n        }\n    }\n    sed{\n        # 先读取资料、存入模式空间、对其进行编辑、再输出、再用下一行替换模式空间内容\n        # 调试工具sedsed (参数 -d)   http://aurelio.net/sedsed/sedsed-1.0\n        -n   # 输出由编辑指令控制(取消默认的输出,必须与编辑指令一起配合)\n        -i   # 直接对文件操作\n        -e   # 多重编辑\n        -r   # 正则可不转移特殊字符\n        b    # 跳过匹配的行\n        p    # 打印\n        d    # 删除\n        s    # 替换\n        g    # 配合s全部替换\n        i    # 行前插入\n        a    # 行后插入\n        r    # 读\n        y    # 转换\n        q    # 退出\n        &    # 代表查找的串内容\n        *    # 任意多个 前驱字符(前导符)\n        ?    # 0或1个 最小匹配 没加-r参数需转义 \\?\n        $    # 最后一行\n        .*   # 匹配任意多个字符\n        \\(a\\)   # 保存a作为标签1(\\1)\n        模式空间{\n            # 模式空间(两行两行处理) 模式匹配的范围，一般而言，模式空间是输入文本中某一行，但是可以通过使用N函数把多于一行读入模式空间\n            # 暂存空间里默认存储一个空行\n            n   # 读入下一行(覆盖上一行)\n            h   # 把模式空间里的行拷贝到暂存空间\n            H   # 把模式空间里的行追加到暂存空间\n            g   # 用暂存空间的内容替换模式空间的行\n            G   # 把暂存空间的内容追加到模式空间的行后\n            x   # 将暂存空间的内容于模式空间里的当前行互换\n            ！  # 对其前面的要匹配的范围取反\n            D   # 删除当前模式空间中直到并包含第一个换行符的所有字符(/.*/匹配模式空间中所有内容，匹配到就执行D,没匹配到就结束D)\n            N   # 追加下一个输入行到模式空间后面并在第二者间嵌入一个换行符，改变当前行号码,模式匹配可以延伸跨域这个内嵌换行\n            p   # 打印模式空间中的直到并包含第一个换行的所有字符\n        }\n        标签函数{\n            : lable # 建立命令标记，配合b，t函数使用跳转\n            b lable # 分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。\n            t labe  # 判断分支，从最后一行开始，条件一旦满足或者T,t命令，将导致分支到带有标号的命令出，或者到脚本末尾。与b函数不同在于t在执行跳转前会先检查其前一个替换命令是否成功，如成功，则执行跳转。\n            sed -e '{:p1;/A/s/A/AA/;/B/s/B/BB/;/[AB]\\{10\\}/b;b p1;}'     # 文件内容第一行A第二行B:建立标签p1;两个替换函数(A替换成AA,B替换成BB)当A或者B达到10个以后调用b,返回\n            echo 'sd  f   f   [a    b      c    cddd    eee]' | sed ':n;s#\\(\\[[^ ]*\\)  *#\\1#;tn'  # 标签函数t使用方法,替换[]里的空格\n            echo \"198723124.03\"|sed -r ':a;s/([0-9]+)([0-9]{3})/\\1,\\2/;ta'  # 每三个字符加一个逗号\n        }\n        引用外部变量{\n            sed -n ''$a',10p'\n            sed -n \"\"$a\",10p\"\n        }\n\t\tsed -e 's/[()]//g'                            # 去除两边括号取得括号内内容\n        sed 10q                                       # 显示文件中的前10行 (模拟\"head\")\n        sed -n '$='                                   # 计算行数(模拟 \"wc -l\")\n        sed -n '5,/^no/p'                             # 打印从第5行到以no开头行之间的所有行\n        sed -i \"/^$f/d\" a     　　                  　 # 删除匹配行\n        sed -i '/aaa/,$d'                             # 删除匹配行到末尾\n        sed -i \"s/=/:/\" c                             # 直接对文本替换\n        sed -i \"/^pearls/s/$/j/\"                      # 找到pearls开头在行尾加j\n        sed '/1/,/3/p' file                           # 打印1和3之间的行\n        sed -n '1p' file                              # 取出指定行\n        sed '5i\\aaa' file                             # 在第5行之前插入行\n        sed '5a\\aaa' file                             # 在第5行之后抽入行\n        echo a|sed -e '/a/i\\b'                        # 在匹配行前插入一行\n        echo a|sed -e '/a/a\\b'                        # 在匹配行后插入一行\n        echo a|sed 's/a/&\\nb/g'                       # 在匹配行后插入一行\n        seq 10| sed -e{1,3}'s/./a/'                   # 匹配1和3行替换\n        sed -n '/regexp/!p'                           # 只显示不匹配正则表达式的行\n        sed '/regexp/d'                               # 只显示不匹配正则表达式的行\n        sed '$!N;s/\\n//'                              # 将每两行连接成一行\n        sed '/baz/s/foo/bar/g'                        # 只在行中出现字串\"baz\"的情况下将\"foo\"替换成\"bar\"\n        sed '/baz/!s/foo/bar/g'                       # 将\"foo\"替换成\"bar\"，并且只在行中未出现字串\"baz\"的情况下替换\n        echo a|sed -e 's/a/#&/g'                      # 在a前面加#号\n        sed 's/foo/bar/4'                             # 只替换每一行中的第四个字串\n        sed 's/\\(.*\\)foo/\\1bar/'                      # 替换每行最后一个字符串\n        sed 's/\\(.*\\)foo\\(.*foo\\)/\\1bar\\2/'           # 替换倒数第二个字符串\n        sed 's/[0-9][0-9]$/&5'                        # 在以[0-9][0-9]结尾的行后加5\n        sed -n ' /^eth\\|em[01][^:]/{n;p;}'            # 匹配多个关键字\n        sed -n -r ' /eth|em[01][^:]/{n;p;}'           # 匹配多个关键字\n        echo -e \"1\\n2\"|xargs -i -t sed 's/^/1/' {}    # 同时处理多个文件\n        sed '/west/,/east/s/$/*VACA*/'                # 修改west和east之间的所有行，在结尾处加*VACA*\n        sed  's/[^1-9]*\\([0-9]\\+\\).*/\\1/'             # 取出第一组数字，并且忽略掉开头的0\n        sed -n '/regexp/{g;1!p;};h'                   # 查找字符串并将匹配行的上一行显示出来，但并不显示匹配行\n        sed -n ' /regexp/{n;p;}'                      # 查找字符串并将匹配行的下一行显示出来，但并不显示匹配行\n        sed -n 's/\\(mar\\)got/\\1ianne/p'               # 保存\\(mar\\)作为标签1\n        sed -n 's/\\([0-9]\\+\\).*\\(t\\)/\\2\\1/p'          # 保存多个标签\n        sed -i -e '1,3d' -e 's/1/2/'                  # 多重编辑(先删除1-3行，在将1替换成2)\n        sed -e 's/@.*//g' -e '/^$/d'                  # 删除掉@后面所有字符，和空行\n        sed -n -e \"{s/^ *[0-9]*//p}\"                  # 打印并删除正则表达式的那部分内容\n        echo abcd|sed 'y/bd/BE/'                      # 匹配字符替换\n        sed '/^#/b;y/y/P/' 2                          # 非#号开头的行替换字符\n        sed '/suan/r readfile'                        # 找到含suan的行，在后面加上读入的文件内容\n        sed -n '/no/w writefile'                      # 找到含no的行，写入到指定文件中\n        sed '/regex/G'                                # 在匹配式样行之后插入一空行\n        sed '/regex/{x;p;x;G;}'                       # 在匹配式样行之前和之后各插入一空行\n        sed 'n;d'                                     # 删除所有偶数行\n        sed 'G;G'                                     # 在每一行后面增加两空行\n        sed '/^$/d;G'                                 # 在输出的文本中每一行后面将有且只有一空行\n        sed 'n;n;n;n;G;'                              # 在每5行后增加一空白行\n        sed -n '5~5p'                                 # 只打印行号为5的倍数\n        seq 1 30|sed  '5~5s/.*/a/'                    # 倍数行执行替换\n        sed -n '3,${p;n;n;n;n;n;n;}'                  # 从第3行开始，每7行显示一次\n        sed -n 'h;n;G;p'                              # 奇偶调换\n        seq 1 10|sed '1!G;h;$!d'                      # 倒叙排列\n        ls -l|sed -n '/^.rwx.*/p'                     # 查找属主权限为7的文件\n        sed = filename | sed 'N;s/\\n/\\t/'             # 为文件中的每一行进行编号(简单的左对齐方式)\n        sed 's/^[ \\t]*//'                             # 将每一行前导的\"空白字符\"(空格，制表符)删除,使之左对齐\n        sed 's/^[ \\t]*//;s/[ \\t]*$//'                 # 将每一行中的前导和拖尾的空白字符删除\n        sed '/{abc,def\\}\\/\\[111,222]/s/^/00000/'      # 匹配需要转行的字符: } / [\n        echo abcd\\\\nabcde |sed 's/\\\\n/@/g' |tr '@' '\\n'        # 将换行符转换为换行\n        cat tmp|awk '{print $1}'|sort -n|sed -n '$p'           # 取一列最大值\n        sed -n '{s/^[^\\/]*//;s/\\:.*//;p}' /etc/passwd          # 取用户家目录(匹配不为/的字符和匹配:到结尾的字符全部删除)\n        sed = filename | sed 'N;s/^/      /; s/ *\\(.\\{6,\\}\\)\\n/\\1   /'   # 对文件中的所有行编号(行号在左，文字右端对齐)\n        /sbin/ifconfig |sed 's/.*inet addr:\\(.*\\) Bca.*/\\1/g' |sed -n '/eth/{n;p}'   # 取所有IP\n        修改keepalive配置剔除后端服务器{\n            sed -i '/real_server.*10.0.1.158.*8888/,+8 s/^/#/' keepalived.conf\n            sed -i '/real_server.*10.0.1.158.*8888/,+8 s/^#//' keepalived.conf\n        }\n        模仿rev功能{\n            echo 123 |sed '/\\n/!G;s/\\(.\\)\\(.*\\n\\)/&\\2\\1/;//D;s/.//;'\n            /\\n/!G;         　　　　　　# 没有\\n换行符，要执行G,因为保留空间中为空，所以在模式空间追加一空行\n            s/\\(.\\)\\(.*\\n\\)/&\\2\\1/;     # 标签替换 &\\n23\\n1$ (关键在于& ,可以让后面//匹配到空行)\n            //D;            　　　　　　# D 命令会引起循环删除模式空间中的第一部分，如果删除后，模式空间中还有剩余行，则返回 D 之前的命令，重新执行，如果 D 后，模式空间中没有任何内容，则将退出。  //D 匹配空行执行D,如果上句s没有匹配到,//也无法匹配到空行, \"//D;\"命令结束\n            s/.//;          　　　　　　# D结束后,删除开头的 \\n\n        }\n    }\n    xargs{\n        # 命令替换\n        -t 先打印命令，然后再执行\n        -i 用每项替换 {}\n        find / -perm +7000 | xargs ls -l                    # 将前面的内容，作为后面命令的参数\n        seq 1 10 |xargs  -i date -d \"{} days \" +%Y-%m-%d    # 列出10天日期\n    }\n\tfind /data/records/ -mtime +3 -name \"*-*-*-*-*\"|xargs rm -rf\n\t*/5 * * * * find /data/record/tmp -mmin +120 |grep -E \".jpg|.mp4|.txt|.jpg|.ts|.m3u8|.png\"|xargs rm -f   ### 每隔5分钟，删除带有指定后缀且超过120分钟以上的文件\n\tfind /data/website*/storage/logs/ -mmin +360 -size +5G -name \"*.log\"|xargs -I {} truncate -s 0 {}\n    find /data/website*/storage/logs/ -mtime +1 -size +10M -name \"*.log\"|xargs gzip -9\n\t\n\t\n    dialog菜单{\n        # 默认将所有输出用 stderr 输出，不显示到屏幕   使用参数  --stdout 可将选择赋给变量\n        # 退出状态  0正确  1错误\n        窗体类型{\n            --calendar          # 日历\n            --checklist         # 允许你显示一个选项列表，每个选项都可以被单独的选择 (复选框)\n            --form              # 表单,允许您建立一个带标签的文本字段，并要求填写\n            --fselect           # 提供一个路径，让你选择浏览的文件\n            --gauge             # 显示一个表，呈现出完成的百分比，就是显示出进度条。\n            --infobox           # 显示消息后，（没有等待响应）对话框立刻返回，但不清除屏幕(信息框)\n            --inputbox          # 让用户输入文本(输入框)\n            --inputmenu         # 提供一个可供用户编辑的菜单（可编辑的菜单框）\n            --menu              # 显示一个列表供用户选择(菜单框)\n            --msgbox(message)   # 显示一条消息,并要求用户选择一个确定按钮(消息框)\n            --password          # 密码框，显示一个输入框，它隐藏文本\n            --pause             # 显示一个表格用来显示一个指定的暂停期的状态\n            --radiolist         # 提供一个菜单项目组，但是只有一个项目，可以选择(单选框)\n            --tailbox           # 在一个滚动窗口文件中使用tail命令来显示文本\n            --tailboxbg         # 跟tailbox类似，但是在background模式下操作\n            --textbox           # 在带有滚动条的文本框中显示文件的内容  (文本框)\n            --timebox           # 提供一个窗口，选择小时，分钟，秒\n            --yesno(yes/no)     # 提供一个带有yes和no按钮的简单信息框\n        }\n        窗体参数{\n            --separate-output          # 对于chicklist组件,输出结果一次输出一行,得到结果不加引号\n            --ok-label \"提交\"          # 确定按钮名称\n            --cancel-label \"取消\"      # 取消按钮名称\n            --title \"标题\"             # 标题名称\n            --stdout                   # 将所有输出用 stdout 输出\n            --backtitle \"上标\"         # 窗体上标\n            --no-shadow                # 去掉窗体阴影\n            --menu \"菜单名\" 20 60 14   # 菜单及窗口大小\n            --clear                    # 完成后清屏操作\n            --no-cancel                # 不显示取消项\n            --insecure                 # 使用星号来代表每个字符\n            --begin <y> <x>            # 指定对话框左上角在屏幕的上的做坐标\n            --timeout <秒>             # 超时,返回的错误代码255,如果用户在指定的时间内没有给出相应动作,就按超时处理\n            --defaultno                # 使选择默认为no\n            --default-item <str>       # 设置在一份清单，表格或菜单中的默认项目。通常在框中的第一项是默认\n            --sleep 5                  # 在处理完一个对话框后静止(延迟)的时间(秒)\n            --max-input size           # 限制输入的字符串在给定的大小之内。如果没有指定，默认是2048\n            --keep-window              # 退出时不清屏和重绘窗口。当几个组件在同一个程序中运行时，对于保留窗口内容很有用的\n        }\n        dialog --title \"Check me\" --checklist \"Pick Numbers\" 15 25 3 1 \"one\" \"off\" 2 \"two\" \"on\"         # 多选界面[方括号]\n        dialog --title \"title\" --radiolist \"checklist\" 20 60 14 tag1 \"item1\" on tag2 \"item2\" off        # 单选界面(圆括号)\n        dialog --title \"title\" --menu \"MENU\" 20 60 14 tag1 \"item1\" tag2 \"item2\"                         # 单选界面\n        dialog --title \"Installation\" --backtitle \"Star Linux\" --gauge \"Linux Kernel\"  10 60 50         # 进度条\n        dialog --title \"标题\" --backtitle \"Dialog\" --yesno \"说明\" 20 60                                 # 选择yes/no\n        dialog --title \"公告标题\" --backtitle \"Dialog\" --msgbox \"内容\" 20 60                            # 公告\n        dialog --title \"hey\" --backtitle \"Dialog\" --infobox \"Is everything okay?\" 10 60                 # 显示讯息后立即离开\n        dialog --title \"hey\" --backtitle \"Dialog\" --inputbox \"Is okay?\" 10 60 \"yes\"                     # 输入对话框\n        dialog --title \"Array 30\" --backtitle \"All \" --textbox /root/txt 20 75                          # 显示文档内容\n        dialog --title \"Add\" --form \"input\" 12 40 4 \"user\" 1 1 \"\" 1 15 15 0 \"name\" 2 1 \"\" 2 15 15 0     # 多条输入对话框\n        dialog --title  \"Password\"  --insecure  --passwordbox  \"请输入密码\"  10  35                     # 星号显示输入--insecure\n        dialog --stdout --title \"日历\"  --calendar \"请选择\" 0 0 9 1 2010                                # 选择日期\n        dialog --title \"title\" --menu \"MENU\" 20 60 14 tag1 \"item1\" tag2 \"item2\" 2>tmp                   # 取到结果放到文件中(以标准错误输出结果)\n        a=`dialog --title \"title\"  --stdout --menu \"MENU\" 20 60 14 tag1 \"item1\" tag2 \"item2\"`           # 选择操作赋给变量(使用标准输出)\n        dialog菜单实例{\n            while :\n            do\n            clear\n            menu=`dialog --title \"title\"  --stdout --menu \"MENU\" 20 60 14 1 system 2 custom`\n            [ $? -eq 0 ] && echo \"$menu\" || exit         # 判断dialog执行,取消退出\n                while :\n                do\n                    case $menu in\n                    1)\n                        list=\"1a \"item1\" 2a \"item2\"\"     # 定义菜单列表变量\n                    ;;\n                    2)\n                        list=\"1b \"item3\" 2b \"item4\"\"\n                    ;;\n                    esac\n                    result=`dialog --title \"title\"  --stdout --menu \"MENU\" 20 60 14 $list`\n                    [ $? -eq 0 ] && echo \"$result\" || break    # 判断dialog执行,取消返回菜单,注意:配合上层菜单循环\n                    read\n                done\n            done\n        }\n    }\n    select菜单{\n        # 输入项不在菜单自动会提示重新输入\n        select menuitem in pick1 pick2 pick3 退出\n        do\n            echo $menuitem\n            case $menuitem in\n            退出)\n                exit\n            ;;\n            *)\n                select area in area1 area2 area3 返回\n                do\n                    echo $area\n                    case $area in\n                    返回)\n                        break\n                    ;;\n                    *)\n                        echo \"对$area操作\"\n                    ;;\n                    esac\n                done\n            ;;\n            esac\n        done\n    }\n    shift{\n        ./cs.sh 1 2 3\n        #!/bin/sh\n        until [ $# -eq 0 ]\n        do\n            echo \"第一个参数为: $1 参数个数为: $#\"\n            #shift 命令执行前变量 $1 的值在shift命令执行后不可用\n            shift\n        done\n    }\n    getopts给脚本加参数{\n        #!/bin/sh\n        while getopts :ab: name\n        do\n            case $name in\n            a)\n                aflag=1\n            ;;\n            b)\n                bflag=1\n                bval=$OPTARG\n            ;;\n            \\?)\n                echo \"USAGE:`basename $0` [-a] [-b value]\"\n                exit  1\n            ;;\n            esac\n        done\n        if [ ! -z $aflag ] ; then\n            echo \"option -a specified\"\n            echo \"$aflag\"\n            echo \"$OPTIND\"\n        fi\n        if [ ! -z $bflag ] ; then\n            echo  \"option -b specified\"\n            echo  \"$bflag\"\n            echo  \"$bval\"\n            echo  \"$OPTIND\"\n        fi\n        echo \"here  $OPTIND\"\n        shift $(($OPTIND -1))\n        echo \"$OPTIND\"\n        echo \" `shift $(($OPTIND -1))`  \"\n    }\n    tclsh{\n        set foo \"a bc\"                   # 定义变量\n        set b {$a};                      # 转义  b的值为\" $a \" ,而不是变量结果\n        set a 3; incr a 3;               # 数字的自增.  将a加3,如果要减3,则为 incr a –3;\n        set c [expr 20/5];               # 计算  c的值为4\n        puts $foo;                       # 打印变量\n        set qian(123) f;                 # 定义数组\n        set qian(1,1,1) fs;              # 多维数组\n        parray qian;                     # 打印数组的所有信息\n        string length $qian;             # 将返回变量qian的长度\n        string option string1 string2;   # 字符相关串操作\n        # option 的操作选项:\n        # compare           按照字典的排序方式进行比较。根据string1 <,=,>string2分别返回-1,0,1\n        # first             返回string2中第一次出现string1的位置，如果没有出现string1则返回-1\n        # last              和first相反\n        # trim              从string1中删除开头和结尾的出现在string2中的字符\n        # tolower           返回string1中的所有字符被转换为小写字符后的新字符串\n        # toupper           返回string1中的所有字符串转换为大写后的字符串\n        # length            返回string1的长度\n        set a 1;while {$a < 3} { set a [incr a 1;]; };puts $a    # 判断变量a小于3既循环\n        for {initialization} {condition} {increment} {body}      # 初始化变量,条件,增量,具体操作\n        for {set i 0} {$i < 10} {incr i} {puts $i;}              # 将打印出0到9\n        if { 表达式 } {\n             #运算;\n        } else {\n             #其他运算;\n        }\n        switch $x {\n            字符串1 { 操作1 ;}\n            字符串2 { 操作2 ;}\n        }\n        foreach element {0 m n b v} {\n        # 将在一组变元中进行循环，并且每次都将执行他的循环体\n               switch $element {\n                     # 判断element的值\n             }\n        }\n        expect交互{\n            exp_continue         # 多个spawn命令时并行\n            interact             # 执行完成后保持交互状态，把控制权交给控制台\n            expect \"password:\"   # 判断关键字符\n            send \"passwd\\r\"      # 执行交互动作，与手工输入密码的动作等效。字符串结尾加\"\\r\"\n            ssh后sudo{\n                #!/bin/bash\n                #sudo注释下行允许后台运行\n                #Defaults requiretty\n                #sudo去掉!允许远程\n                #Defaults !visiblepw\n                /usr/bin/expect -c '\n                set timeout 5\n                spawn ssh -o StrictHostKeyChecking=no xuesong1@192.168.42.128 \"sudo grep xuesong1 /etc/passwd\"\n                expect {\n                    \"passphrase\" {\n                        send_user \"sshkey\\n\"\n                        send \"xuesong\\r\";\n                        expect {\n                            \"sudo\" {\n                            send_user \"sudo\\n\"\n                            send \"xuesong\\r\"\n                            interact\n                            }\n                            eof {\n                            send_user \"sudo eof\\n\"\n                            }\n                        }\n                    }\n                    \"password:\" {\n                        send_user \"ssh\\n\"\n                        send \"xuesong\\r\";\n                        expect {\n                            \"sudo\" {\n                            send_user \"sudo\\n\"\n                            send \"xuesong\\r\"\n                            interact\n                            }\n                            eof {\n                            send_user \"sudo eof\\n\"\n                            }\n                        }\n                    }\n                    \"sudo\" {\n                            send_user \"sudo\\n\"\n                            send \"xuesong\\r\"\n                            interact\n                            }\n                    eof {\n                        send_user \"ssh eof\\n\"\n                    }\n                }\n                '\n            }\n            ssh执行命令操作{\n                /usr/bin/expect -c \"\n                proc jiaohu {} {\n                    send_user expect_start\n                    expect {\n                        password {\n                            send ${RemotePasswd}\\r;\n                            send_user expect_eof\n                            expect {\n                                \\\"does not exist\\\" {\n                                    send_user expect_failure\n                                    exit 10\n                                }\n                                password {\n                                    send_user expect_failure\n                                    exit 5\n                                }\n                                Password {\n                                    send ${RemoteRootPasswd}\\r;\n                                    send_user expect_eof\n                                    expect {\n                                        incorrect {\n                                            send_user expect_failure\n                                            exit 6\n                                        }\n                                        eof\n                                    }\n                                }\n                                eof\n                            }\n                        }\n                        passphrase {\n                            send ${KeyPasswd}\\r;\n                            send_user expect_eof\n                            expect {\n                                \\\"does not exist\\\" {\n                                    send_user expect_failure\n                                    exit 10\n                                }\n                                passphrase{\n                                    send_user expect_failure\n                                    exit 7\n                                }\n                                Password {\n                                    send ${RemoteRootPasswd}\\r;\n                                    send_user expect_eof\n                                    expect {\n                                        incorrect {\n                                            send_user expect_failure\n                                            exit 6\n                                        }\n                                        eof\n                                    }\n                                }\n                                eof\n                            }\n                        }\n                        Password {\n                            send ${RemoteRootPasswd}\\r;\n                            send_user expect_eof\n                            expect {\n                                incorrect {\n                                    send_user expect_failure\n                                    exit 6\n                                }\n                                eof\n                            }\n                        }\n                        \\\"No route to host\\\" {\n                            send_user expect_failure\n                            exit 4\n                        }\n                        \\\"Invalid argument\\\" {\n                            send_user expect_failure\n                            exit 8\n                        }\n                        \\\"Connection refused\\\" {\n                            send_user expect_failure\n                            exit 9\n                        }\n                        \\\"does not exist\\\" {\n                            send_user expect_failure\n                            exit 10\n                        }\n                        \\\"Connection timed out\\\" {\n                            send_user expect_failure\n                            exit 11\n                        }\n                        timeout {\n                            send_user expect_failure\n                            exit 3\n                        }\n                        eof\n                    }\n                }\n                set timeout $TimeOut\n                switch $1 {\n                    Ssh_Cmd {\n                        spawn ssh -t -p $Port -o StrictHostKeyChecking=no $RemoteUser@$Ip /bin/su - root -c \\\\\\\"$Cmd\\\\\\\"\n                        jiaohu\n                    }\n                    Ssh_Script {\n                        spawn scp -P $Port -o StrictHostKeyChecking=no $ScriptPath $RemoteUser@$Ip:/tmp/${ScriptPath##*/};\n                        jiaohu\n                        spawn ssh -t -p $Port -o StrictHostKeyChecking=no $RemoteUser@$Ip /bin/su - root -c  \\\\\\\"/bin/sh /tmp/${ScriptPath##*/}\\\\\\\" ;\n                        jiaohu\n                    }\n                    Scp_File {\n                        spawn scp -P $Port -o StrictHostKeyChecking=no -r $ScpPath $RemoteUser@$Ip:${ScpRemotePath};\n                        jiaohu\n                    }\n                }\n                \"\n                state=`echo $?`\n            }\n            交互双引号引用较长变量{\n                #!/bin/bash\n                RemoteUser=xuesong12\n                Ip=192.168.1.2\n                RemotePasswd=xuesong\n                Cmd=\"/bin/echo \"$PubKey\" > \"$RemoteKey\"/authorized_keys\"\n                /usr/bin/expect -c \"\n                set timeout 10\n                spawn ssh -o StrictHostKeyChecking=no $RemoteUser@$Ip {$Cmd};\n                expect {\n                    password: {\n                        send_user RemotePasswd\\n\n                        send ${RemotePasswd}\\r;\n                        interact;\n                    }\n                    eof {\n                        send_user eof\\n\n                    }\n                }\n                \"\n            }\n            telnet交互{\n                #!/bin/bash\n                Ip=\"10.0.1.53\"\n                a=\"\\{\\'method\\'\\:\\'doLogin\\'\\,\\'params\\'\\:\\{\\'uName\\'\\:\\'bobbietest\\'\\}\"\n                /usr/bin/expect -c\"\n                        set timeout 15\n                        spawn telnet ${Ip} 8000\n                        expect \"Escape\"\n                        send \"${a}\\\\r\"\n                        expect {\n                                -re \"\\\"err.*none\\\"\" {\n                                        exit 0\n                                }\n                                timeout {\n                                        exit 1\n                                }\n                                eof {\n                                        exit 2\n                                }\n                        }\n                \"\n                echo $?\n            }\n            模拟ssh登录{\n                #好处:可加载环境变量\n                #!/bin/bash\n                Ip='192.168.1.6'            # 循环就行\n                RemoteUser='user'           # 普通用户\n                RemotePasswd='userpasswd'   # 普通用户的密码\n                RemoteRootPasswd='rootpasswd'\n                /usr/bin/expect -c \"\n                set timeout -1\n                spawn ssh -t -p $Port -o StrictHostKeyChecking=no $RemoteUser@$Ip\n                expect {\n                    password {\n                        send_user RemotePasswd\n                        send ${RemotePasswd}\\r;\n                        expect {\n                            \\\"does not exist\\\" {\n                                send_user \\\"root user does not exist\\n\\\"\n                                exit 10\n                            }\n                            password {\n                                send_user \\\"user passwd error\\n\\\"\n                                exit 5\n                            }\n                            Last {\n                                send \\\"su - batch\\n\\\"\n                                expect {\n                                    Password {\n                                        send_user RemoteRootPasswd\n                                        send ${RemoteRootPasswd}\\r;\n                                        expect {\n                                            \\\"]#\\\" {\n                                                send \\\"sh /tmp/update.sh update\\n \\\"\n                                                expect {\n                                                    \\\"]#\\\" {\n                                                        send_user ${Ip}_Update_Done\\n\n                                                    }\n                                                    eof\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    \\\"No route to host\\\" {\n                        send_user \\\"host not found\\n\\\"\n                        exit 4\n                    }\n                    \\\"Invalid argument\\\" {\n                        send_user \\\"incorrect parameter\\n\\\"\n                        exit 8\n                    }\n                    \\\"Connection refused\\\" {\n                        send_user \\\"invalid port parameters\\n\\\"\n                        exit 9\n                    }\n                    \\\"does not exist\\\" {\n                        send_user \\\"root user does not exist\\\"\n                        exit 10\n                    }\n                    timeout {\n                        send_user \\\"connection timeout \\n\\\"\n                        exit 3\n                    }\n                    eof\n                }\n                \"\n                state=`echo $?`\n            }\n        }\n    }\n}\n9 实例{\n    从1叠加到100{\n        echo $[$(echo +{1..100})]\n        echo $[(100+1)*(100/2)]\n        seq -s '+' 100 |bc\n    }\n    判断参数是否为空-空退出并打印null{\n        #!/bin/sh\n        echo $1\n        name=${1:?\"null\"}\n        echo $name\n    }\n    循环数组{\n        for ((i=0;i<${#o[*]};i++))\n        do\n            echo ${o[$i]}\n        done\n    }\n    判断路径{\n        if [ -d /root/Desktop/text/123 ];then\n            echo \"找到了123\"\n            if [ -d /root/Desktop/text ]\n            then echo \"找到了text\"\n            else echo \"没找到text\"\n            fi\n        else echo \"没找到123文件夹\"\n        fi\n    }\n    找出出现次数最多{\n        awk '{print $1}' file|sort |uniq -c|sort -k1r\n    }\n\t统计某一类进程占用内存总和{\n\t    ps aux|grep java|awk '{sum +=$6};END {print sum}'\n\t}\n    判断脚本参数是否正确{\n        ./test.sh  -p 123 -P 3306 -h 127.0.0.1 -u root\n        #!/bin/sh\n        if [ $# -ne 8 ];then\n            echo \"USAGE: $0 -u user -p passwd -P port -h host\"\n            exit 1\n        fi\n        while getopts :u:p:P:h: name\n        do\n            case $name in\n            u)\n                mysql_user=$OPTARG\n            ;;\n            p)\n                mysql_passwd=$OPTARG\n            ;;\n            P)\n                mysql_port=$OPTARG\n            ;;\n            h)\n                mysql_host=$OPTARG\n            ;;\n            *)\n                echo \"USAGE: $0 -u user -p passwd -P port -h host\"\n                exit 1\n            ;;\n            esac\n        done\n        if [ -z $mysql_user ] || [ -z $mysql_passwd ] || [ -z $mysql_port ] || [ -z $mysql_host ]\n        then\n            echo \"USAGE: $0 -u user -p passwd -P port -h host\"\n            exit 1\n        fi\n        echo $mysql_user $mysql_passwd $mysql_port  $mysql_host\n        #结果 root 123 3306 127.0.0.1\n    }\n    正则匹配邮箱{\n        ^[_a-z0-9-]+(\\.[_a-z0-9-]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*(\\.[a-z]{2,4})$\n    }\n    打印表格{\n        #!/bin/sh\n        clear\n        awk 'BEGIN{\n        print \"+--------------------+--------------------+\";\n        printf \"|%-20s|%-20s|\\n\",\"Name\",\"Number\";\n        print \"+--------------------+--------------------+\";\n        }'\n        a=`grep \"^[A-Z]\" a.txt |sort +1 -n |awk '{print $1\":\"$2}'`\n        #cat a.txt |sort +1 -n |while read list\n        for list in $a\n        do\n            name=`echo $list |awk -F: '{print $1}'`\n            number=`echo $list |awk -F: '{print $2}'`\n            awk 'BEGIN{printf \"|%-20s|%-20s|\\n\",\"'\"$name\"'\",\"'\"$number\"'\";\n            print \"+--------------------+--------------------+\";\n            }'\n        done\n        awk 'BEGIN{\n        print \"              *** The End ***              \"\n        print \"                                           \"\n        }'\n    }\n    判断日期是否合法{\n        #!/bin/sh\n        while read a\n        do\n          if echo $a | grep -q \"-\" && date -d $a +%Y%m%d > /dev/null 2>&1\n          then\n            if echo $a | grep -e '^[0-9]\\{4\\}-[01][0-9]-[0-3][0-9]$'\n            then\n                break\n            else\n                echo \"您输入的日期不合法，请从新输入！\"\n            fi\n          else\n            echo \"您输入的日期不合法，请从新输入！\"\n          fi\n        done\n        echo \"日期为$a\"\n    }\n    打印日期段所有日期{\n        #!/bin/bash\n        qsrq=20010101\n        jsrq=20010227\n        n=0\n        >tmp\n        while :;do\n        current=$(date +%Y%m%d -d\"$n day $qsrq\")\n        if [[ $current == $jsrq ]];then\n            echo $current >>tmp;break\n        else\n            echo $current >>tmp\n            ((n++))\n        fi\n        done\n        rq=`awk 'NR==1{print}' tmp`\n    }\n    数学计算的小算法{\n        #!/bin/sh\n        A=1\n        B=1\n        while [ $A -le 10 ]\n        do\n            SUM=`expr $A \\* $B`\n            echo \"$SUM\"\n            if [ $A = 10 ]\n            then\n                B=`expr $B + 1`\n                A=1\n            fi\n            A=`expr $A + 1`\n        done\n    }\n    多行合并{\n        sed '{N;s/\\n//}' file                   # 将两行合并一行(去掉换行符)\n        awk '{printf(NR%2!=0)?$0\" \":$0\" \\n\"}'   # 将两行合并一行\n        awk '{printf\"%s \",$0}'                  # 将所有行合并\n        awk '{if (NR%4==0){print $0} else {printf\"%s \",$0}}' file    # 将4行合并为一行(可扩展)\n    }\n    横竖转换{\n        cat a.txt | xargs           # 列转行\n        cat a.txt | xargs -n1       # 行转列\n    }\n    竖行转横行{\n        cat file|tr '\\n' ' '\n        echo $(cat file)\n        #!/bin/sh\n        for i in `cat file`\n        do\n              a=${a}\" \"${i}\n        done\n        echo $a\n    }\n    取用户的根目录{\n        #! /bin/bash\n        while read name pass uid gid gecos home shell\n        do\n            echo $home\n        done < /etc/passwd\n    }\n    远程打包{\n        ssh -n $ip 'find '$path' /data /opt -type f  -name \"*.sh\" -or -name \"*.py\" -or -name \"*.pl\" |xargs tar zcvpf /tmp/data_backup.tar.gz'\n    }\n    把汉字转成encode格式{\n        echo 论坛 | tr -d \"\\n\" | xxd -i | sed -e \"s/ 0x/%/g\" | tr -d \" ,\\n\"\n        %c2%db%cc%b3\n        echo 论坛 | tr -d \"\\n\" | xxd -i | sed -e \"s/ 0x/%/g\" | tr -d \" ,\\n\" | tr \"[a-f]\" \"[A-F]\"  # 大写的\n        %C2%DB%CC%B3\n    }\n    把目录带有大写字母的文件名改为全部小写{\n        #!/bin/bash\n        for f in *;do\n            mv $f `echo $f |tr \"[A-Z]\" \"[a-z]\"`\n        done\n    }\n    查找连续多行，在不连续的行前插入{\n        #/bin/bash\n        lastrow=null\n        i=0\n        cat incl|while read line\n        do\n        i=`expr $i + 1`\n        if echo \"$lastrow\" | grep \"#include <[A-Z].h>\"\n        then\n            if echo \"$line\" | grep -v  \"#include <[A-Z].h>\"\n            then\n                sed -i ''$i'i\\\\/\\/All header files are include' incl\n                i=`expr $i + 1`\n            fi\n        fi\n        lastrow=\"$line\"\n        done\n    }\n    查询数据库其它引擎{\n        #/bin/bash\n        path1=/data/mysql/data/\n        dbpasswd=db123\n        #MyISAM或InnoDB\n        engine=InnoDB\n        if [ -d $path1 ];then\n        dir=`ls -p $path1 |awk '/\\/$/'|awk -F'/' '{print $1}'`\n            for db in $dir\n            do\n            number=`mysql -uroot -p$dbpasswd -A -S \"$path1\"mysql.sock -e \"use ${db};show table status;\" |grep -c $engine`\n                if [ $number -ne 0 ];then\n                echo \"${db}\"\n                fi\n            done\n        fi\n    }\n    批量修改数据库引擎{\n        #/bin/bash\n        for db in test test1 test3\n        do\n            tables=`mysql -uroot -pdb123 -A -S /data/mysql/data/mysql.sock -e \"use $db;show tables;\" |awk 'NR != 1{print}'`\n            for table in $tables\n            do\n                mysql -uroot -pdb123 -A -S /data/mysql/data/mysql.sock -e \"use $db;alter table $table engine=MyISAM;\"\n            done\n        done\n    }\n    将shell取到的数据插入mysql数据库{\n        mysql -u$username -p$passwd -h$dbhost -P$dbport -A -e \"\n        use $dbname;\n        insert into data values ('','$ip','$date','$time','$data')\n        \"\n    }\n    两日期间隔天数{\n        D1=`date -d '20070409' +\"%s\"`\n        D2=`date -d '20070304 ' +\"%s\"`\n        D3=$(($D1 - $D2))\n        echo $(($D3/60/60/24))\n    }\n    while执行ssh只循环一次{\n        cat -    # 让cat读连接文件stdin的信息\n        seq 10 | while read line; do ssh localhost \"cat -\"; done        # 显示的9次是被ssh吃掉的\n        seq 10 | while read line; do ssh -n localhost \"cat -\"; done     # ssh加上-n参数可避免只循环一次\n    }\n    ssh批量执行命令{\n        #版本1\n        #!/bin/bash\n        while read line\n        do\n        Ip=`echo $line|awk '{print $1}'`\n        Passwd=`echo $line|awk '{print $2}'`\n        ssh -n localhost \"cat -\"\n        sshpass -p \"$Passwd\" ssh -n -t -o StrictHostKeyChecking=no root@$Ip \"id\"\n        done<iplist.txt\n        #版本2\n        #!/bin/bash\n        Iplist=`awk '{print $1}' iplist.txt`\n        for Ip in $Iplist\n        do\n        Passwd=`awk '/'$Ip'/{print $2}' iplist.txt`\n        sshpass -p \"$Passwd\" ssh -n -t -o StrictHostKeyChecking=no root@$Ip \"id\"\n        done\n    }\n    在同一位置打印字符{\n        #!/bin/bash\n        echo -ne \"\\t\"\n        for i in `seq -w 100 -1 1`\n        do\n            echo -ne \"$i\\b\\b\\b\";      # 关键\\b退格\n            sleep 1;\n        done\n    }\n    多进程后台并发简易控制{\n        #!/bin/bash\n        test () {\n            echo $a\n            sleep 5\n        }\n        for a in `seq 1 30`\n        do\n            test &\n            echo $!\n            ((num++))\n            if [ $num -eq 6 ];then\n            echo \"wait...\"\n            wait\n            num=0\n            fi\n        done\n        wait\n    }\n    shell并发{\n        #!/bin/bash\n        tmpfile=$$.fifo   # 创建管道名称\n        mkfifo $tmpfile   # 创建管道\n        exec 4<>$tmpfile  # 创建文件标示4，以读写方式操作管道$tmpfile\n        rm $tmpfile       # 将创建的管道文件清除\n        thred=4           # 指定并发个数\n        seq=(1 2 3 4 5 6 7 8 9 21 22 23 24 25 31 32 33 34 35) # 创建任务列表\n        # 为并发线程创建相应个数的占位\n        {\n        for (( i = 1;i<=${thred};i++ ))\n        do\n            echo;  # 因为read命令一次读取一行，一个echo默认输出一个换行符，所以为每个线程输出一个占位换行\n        done\n        } >&4      # 将占位信息写入管道\n        for id in ${seq}  # 从任务列表 seq 中按次序获取每一个任务\n        do\n          read  # 读取一行，即fd4中的一个占位符\n          (./ur_command ${id};echo >&4 ) &   # 在后台执行任务ur_command 并将任务 ${id} 赋给当前任务；任务执行完后在fd4种写入一个占位符\n        done <&4    # 指定fd4为整个for的标准输入\n        wait        # 等待所有在此shell脚本中启动的后台任务完成\n        exec 4>&-   # 关闭管道\n    }\n    shell并发函数{\n        function ConCurrentCmd()\n        {\n            #进程数\n            Thread=30\n            #列表文件\n            CurFileName=iplist.txt\n            #定义fifo文件\n            FifoFile=\"$$.fifo\"\n            #新建一个fifo类型的文件\n            mkfifo $FifoFile\n            #将fd6与此fifo类型文件以读写的方式连接起来\n            exec 6<>$FifoFile\n            rm $FifoFile\n            #事实上就是在文件描述符6中放置了$Thread个回车符\n            for ((i=0;i<=$Thread;i++));do echo;done >&6\n            #此后标准输入将来自fd5\n            exec 5<$CurFileName\n            #开始循环读取文件列表中的行\n            Count=0\n            while read -u5 line\n            do\n                read -u6\n                let Count+=1\n                # 此处定义一个子进程放到后台执行\n                # 一个read -u6命令执行一次,就从fd6中减去一个回车符，然后向下执行\n                # fd6中没有回车符的时候,就停在这了,从而实现了进程数量控制\n                {\n                    echo $Count\n                    #这段代码框就是执行具体的操作了\n                    function\n                    echo >&6\n                    #当进程结束以后,再向fd6中追加一个回车符,即补上了read -u6减去的那个\n                } &\n            done\n            #等待所有后台子进程结束\n            wait\n            #关闭fd6\n            exec 6>&-\n            #关闭fd5\n            exec 5>&-\n        }\n        并发例子{\n            #!/bin/bash\n            pnum=3\n            task () {\n                echo \"$u start\"\n                sleep 5\n                echo \"$u done\"\n            }\n            FifoFile=\"$$.fifo\"\n            mkfifo $FifoFile\n            exec 6<>$FifoFile\n            rm $FifoFile\n            \n            for ((i=0;i<=$pnum;i++));do echo;done >&6\n            for u in `seq 1 20`\n            do\n                read -u6\n                {\n                    task\n                    [ $? -eq 0 ] && echo \"${u} 次成功\" || echo \"${u} 次失败\"\n                    echo >&6\n                } &\n            done\n            wait\n            exec 6>&-\n        }\n    }\n    函数{\n        ip(){\n            echo \"a 1\"|awk '$1==\"'\"$1\"'\"{print $2}'\n        }\n        web=a\n        ip $web\n    }\n    检测软件包是否存在{\n        rpm -q dialog >/dev/null\n        if [ \"$?\" -ge 1 ];then\n            echo \"install dialog,Please wait...\"\n            yum -y install dialog\n            rpm -q dialog >/dev/null\n            [ $? -ge 1 ] && echo \"dialog installation failure,exit\" && exit\n            echo \"dialog done\"\n            read\n        fi\n    }\n    游戏维护菜单-修改配置文件{\n        #!/bin/bash\n        conf=serverlist.xml\n        AreaList=`awk -F '\"' '/<s/{print $2}' $conf`\n        select area in $AreaList 全部 退出\n        do\n            echo \"\"\n            echo $area\n            case $area in\n            退出)\n                exit\n            ;;\n            *)\n                select operate in \"修改版本号\" \"添加维护中\" \"删除维护中\" \"返回菜单\"\n                do\n                    echo \"\"\n                    echo $operate\n                    case $operate in\n                    修改版本号)\n                        echo 请输入版本号\n                        while read version\n                        do\n                            if echo $version | grep -w 10[12][0-9][0-9][0-9][0-9][0-9][0-9]\n                            then\n                                break\n                            fi\n                            echo 请从新输入正确的版本号\n                        done\n                        case $area in\n                        全部)\n                            case $version in\n                            101*)\n                                echo \"请确认操作对 $area 体验区 $operate\"\n                                read\n                                sed -i 's/101[0-9][0-9][0-9][0-9][0-9][0-9]/'$version'/' $conf\n                            ;;\n                            102*)\n                                echo \"请确认操作对 $area 正式区 $operate\"\n                                read\n                                sed -i 's/102[0-9][0-9][0-9][0-9][0-9][0-9]/'$version'/' $conf\n                            ;;\n                            esac\n                        ;;\n                        *)\n                            type=`awk -F '\"' '/'$area'/{print $14}' $conf |cut -c1-3`\n                            readtype=`echo $version |cut -c1-3`\n                            if [ $type != $readtype ]\n                            then\n                                echo \"版本号不对应，请从新操作\"\n                                continue\n                            fi\n                            echo \"请确认操作对 $area 区 $operate\"\n                            read\n                            awk -F '\"' '/'$area'/{print $12}' $conf |xargs -i sed -i '/'{}'/s/10[12][0-9][0-9][0-9][0-9][0-9][0-9]/'$version'/' $conf\n                        ;;\n                        esac\n                    ;;\n                    添加维护中)\n                        case $area in\n                        全部)\n                            echo \"请确认操作对 $area 区 $operate\"\n                            read\n                            awk -F '\"' '/<s/{print $2}' $conf |xargs -i sed -i 's/'{}'/&维护中/' $conf\n                        ;;\n                        *)\n                            echo \"请确认操作对 $area 区 $operate\"\n                            read\n                            sed -i 's/'$area'/&维护中/' $conf\n                        ;;\n                        esac\n                    ;;\n                    删除维护中)\n                        case $area in\n                        全部)\n                            echo \"请确认操作对 $area 区 $operate\"\n                            read\n                            sed -i 's/维护中//' $conf\n                        ;;\n                        *)\n                            echo \"请确认操作对 $area 区 $operate\"\n                            read\n                            sed -i '/'$area'/s/维护中//' $conf\n                        ;;\n                        esac\n                    ;;\n                    返回菜单)\n                        break\n                    ;;\n                    esac\n                done\n            ;;\n            esac\n            echo \"回车重新选择区\"\n        done\n    }\n    keepalive剔除后端服务{\n        #!/bin/bash\n        #行数请自定义,默认8行\n        if [ X$2 == X ];then\n            echo \"error: IP null\"\n            read\n            exit\n        fi\n        case $1 in\n        del)\n            sed -i '/real_server.*'$2'.*8888/,+8 s/^/#/' /etc/keepalived/keepalived.conf\n            /etc/init.d/keepalived reload\n        ;;\n        add)\n            sed -i '/real_server.*'$2'.*8888/,+8 s/^#//' /etc/keepalived/keepalived.conf\n            /etc/init.d/keepalived reload\n        ;;\n        *)\n            echo \"Parameter error\"\n        ;;\n        esac\n    }\n    抓取系统中负载最高的进程{\n        #!/bin/bash\n        LANG=C\n        PATH=/sbin:/usr/sbin:/bin:/usr/bin\n        interval=1\n        length=86400\n        for i in $(seq 1 $(expr ${length} / ${interval}));do\n        date\n        LANG=C ps -eT -o%cpu,pid,tid,ppid,comm | grep -v CPU | sort -n -r | head -20\n        date\n        LANG=C cat /proc/loadavg\n        { LANG=C ps -eT -o%cpu,pid,tid,ppid,comm | sed -e 's/^ *//' | tr -s ' ' | grep -v CPU | sort -n -r | cut -d ' ' -f 1 | xargs -I{} echo -n \"{} + \" && echo ' 0'; } | bc -l\n        sleep ${interval}\n        done\n        fuser -k $0\n    }\n    申诉中国反垃圾邮件联盟黑名单{\n        #!/bin/bash\n        IpList=`awk '$1!~\"^#\"&&$1!=\"\"{print $1}' host.list`\n        QueryAdd='http://www.anti-spam.org.cn/Rbl/Query/Result'\n        ComplaintAdd='http://www.anti-spam.org.cn/Rbl/Getout/Submit'\n        CONTENT='我们是一家正规的XXX。xxxxxxx。恳请将我们的发送服务器IP移出黑名单。谢谢！\n        处理措施：\n        1.XXXX。\n        2.XXXX。'\n        CORP='abc.com'\n        WWW='www.abc.cm'\n        NAME='def'\n        MAIL='def@163.com.cn'\n        TEL='010-50000000'\n        LEVEL='0'\n        for Ip in $IpList\n        do\n            Status=`curl -d \"IP=$Ip\" $QueryAdd |grep 'Getout/ShowForm?IP=' |grep -wc '申诉脱离'`\n            if [ $Status -ge 1 ];then\n                IpStatus=\"黑名单中\"\n                results=`curl -d \"IP=${Ip}&CONTENT=${CONTENT}&CORP=${CORP}&WWW=${WWW}&NAME=${NAME}&MAIL=${MAIL}&TEL=${TEL}&LEVEL=${LEVEL}\" $ComplaintAdd |grep -E '您的黑名单脱离申请已提交|该IP的脱离申请已被他人提交|申请由于近期内有被拒绝的记录'`\n                echo $results\n                if echo $results | grep '您的黑名单脱离申请已提交'  > /dev/null 2>&1\n                then\n                    complaint='申诉成功'\n                elif echo $results | grep '该IP的脱离申请已被他人提交'  > /dev/null 2>&1\n                then\n                    complaint='申诉重复'\n                elif echo $results | grep '申请由于近期内有被拒绝的记录'  > /dev/null 2>&1\n                then\n                    complaint='申诉拒绝'\n                else\n                    complaint='异常'\n                fi\n            else\n                IpStatus='正常'\n                complaint='无需申诉'\n            fi\n            echo \"$Ip    $IpStatus    $complaint\" >> $(date +%Y%m%d_%H%M%S).log\n        done\n}\n    Web Server in Awk{\n        #gawk -f file\n        BEGIN {\n          x        = 1                         # script exits if x < 1\n          port     = 8080                      # port number\n          host     = \"/inet/tcp/\" port \"/0/0\"  # host string\n          url      = \"http://localhost:\" port  # server url\n          status   = 200                       # 200 == OK\n          reason   = \"OK\"                      # server response\n          RS = ORS = \"\\r\\n\"                    # header line terminators\n          doc      = Setup()                   # html document\n          len      = length(doc) + length(ORS) # length of document\n          while (x) {\n             if ($1 == \"GET\") RunApp(substr($2, 2))\n             if (! x) break\n             print \"HTTP/1.0\", status, reason |& host\n             print \"Connection: Close\"        |& host\n             print \"Pragma: no-cache\"         |& host\n             print \"Content-length:\", len     |& host\n             print ORS doc                    |& host\n             close(host)     # close client connection\n             host |& getline # wait for new client request\n          }\n          # server terminated...\n          doc = Bye()\n          len = length(doc) + length(ORS)\n          print \"HTTP/1.0\", status, reason |& host\n          print \"Connection: Close\"        |& host\n          print \"Pragma: no-cache\"         |& host\n          print \"Content-length:\", len     |& host\n          print ORS doc                    |& host\n          close(host)\n        }\n        function Setup() {\n          tmp = \"<html>\\\n          <head><title>Simple gawk server</title></head>\\\n          <body>\\\n          <p><a href=\" url \"/xterm>xterm</a>\\\n          <p><a href=\" url \"/xcalc>xcalc</a>\\\n          <p><a href=\" url \"/xload>xload</a>\\\n          <p><a href=\" url \"/exit>terminate script</a>\\\n          </body>\\\n          </html>\"\n          return tmp\n        }\n        function Bye() {\n          tmp = \"<html>\\\n          <head><title>Simple gawk server</title></head>\\\n          <body><p>Script Terminated...</body>\\\n          </html>\"\n          return tmp\n        }\n        function RunApp(app) {\n          if (app == \"xterm\")  {system(\"xterm&\"); return}\n          if (app == \"xcalc\" ) {system(\"xcalc&\"); return}\n          if (app == \"xload\" ) {system(\"xload&\"); return}\n          if (app == \"exit\")   {x = 0}\n        }\n    }\n}\n10 经验{\n    1.服务上线,在启动注册流量时大量报错, 下游服务摘除,重启后, 上游还用原有的链接去链接, 导致请求失败.\n    2.systemd守护的进程,在tmp下找不到对应文件, 配置安全tmp项PrivateTmp改为false PrivateTmp=false\n    3.统一服务内部调用关系,一个服务对应一个域名\n    4.统一服务服务返回的状态码,报警只需要针对5xx就可以发现问题.\n    5.在服务雪崩后,恢复服务,用户可能有大量重试,所以放流量也要小比例放流量,逐步恢复\n}\n11 nginx\n   1 日志格式\n   log_format main '$remote_addr - $remote_user [$time_local] \"$request\" $status $body_bytes_sent \"$http_referer\" \"$http_user_agent\" \"$http_x_forwarded_for\" $request_time $upstream_response_time $upstream_addr \"$http_host\"';\n   \n   $remote_addr               # \n   [$time_local]              # 调用时间\n   \"$request\"                 # 显示[请求方法 请求接口 HTTP/1.1协议]\n   $status                    # 请求返回状态码\n   $body_bytes_sent           # 请求body大小\n   \"$http_referer\"            # \n   \"$http_user_agent\"         # 接口从哪个工具发出\n   \"$http_x_forwarder_for\"    # 远程客户端ip\n   $request_time              # 请求时间\n   $upstream_response_time    # 下游服务返回response时间\n   $upstream_addr             # 后端服务地址\n   \"$http_host\"               # 发送请求的host地址\n\n12 历史记录\n13 ansible\n   ansible hostname -m shell -a \"ls /tmp\"          # 在远端host执行shell\n   ansible -m ping all                             # 校验远程服务器是否ping通\n   \n   ## ansible-playbook\n   ansible-playbook playbook.yml                   # 调用playbook文件\n   vim /etc/ansible/hosts                          # 编辑ansible配置文件\n   \n   ## yum 模块\n   example1:安装单个软件\n   ```\n   - name: install yum package\n     yum:\n\t   name: git       # 安装指定版本：git-1.8.3.1-6.el7\n\t   state: present  # 如果不存在安装最新，存在不会更新；若为latest，无论存在与否安装最新\n   ```\n   \n   example2:安装多个软件\n   ```\n   - name: yum\n     yum:\n\t   name: \"{{ item}}\"\n\t   state: present\n\t with_items:\n\t - git\n\t - httpd\n   ```\n```","source":"_posts/运维命令.md","raw":"---\ntitle: 运维命令\ndate: 2024-03-06 15:03:16\ntags:\n---\n```\n1 文件{\n\n    ls -rtl                                    # 按时间倒叙列出所有目录和文件 ll -rt\n    touch file                                 # 创建空白文件\n    rm -rf dirname                             # 不提示删除非空目录(-r:递归删除 -f强制)\n    dos2unix                                   # windows文本转linux文本\n    unix2dos                                   # linux文本转windows文本\n    enca filename                              # 查看编码  安装 yum install -y enca\n    md5sum                                     # 查看md5值\n    ln sourcefile newfile                      # 硬链接\n    ln -s sourcefile newfile                   # 符号连接\n    readlink -f /data                          # 查看连接真实目录\n    cat file | nl |less                        # 查看上下翻页且显示行号  q退出\n    head                                       # 查看文件开头内容\n    head -c 10m                                # 截取文件中10M内容\n    split -C 10M                               # 将文件切割大小为10M -C按行\n    tail -f file                               # 查看结尾 监视日志文件\n    tail -F file                               # 监视日志并重试, 针对文件被mv的情况可以持续读取\n    file                                       # 检查文件类型\n    umask                                      # 更改默认权限\n    uniq                                       # 删除重复的行\n    uniq -c                                    # 重复的行出现次数\n    uniq -u                                    # 只显示不重复行\n    paste a b                                  # 将两个文件合并用tab键分隔开\n    paste -d'+' a b                            # 将两个文件合并指定'+'符号隔开\n    paste -s a                                 # 将多行数据合并到一行用tab键隔开\n    chattr +i /etc/passwd                      # 不得任意改变文件或目录 -i去掉锁 -R递归，lsattr file查看文件锁情况\n    more                                       # 向下分面器\n    locate aaa                                 # 搜索\n    wc -l file                                 # 查看行数\n    cp filename{,.bak}                         # 快速备份一个文件\n    \\cp a b                                    # 拷贝不提示 既不使用别名 cp -i\n    rev                                        # 将行中的字符逆序排列\n    comm -12 2 3                               # 行和行比较匹配\n    echo \"10.45aa\" |cksum                      # 字符串转数字编码，可做校验，也可用于文件校验\n    iconv -f gbk -t utf8 source.txt > new.txt  # 转换编码\n    xxd /boot/grub/stage1                      # 16进制查看\n    hexdump -C /boot/grub/stage1               # 16进制查看\n    rename source new file                     # 重命名 可正则\n    watch -d -n 1 'df; ls -FlAt /path'         # 实时某个目录下查看最新改动过的文件\n    cp -v  /dev/dvd  /rhel4.6.iso9660          # 制作镜像\n    diff suzu.c suzu2.c  > sz.patch            # 制作补丁\n    patch suzu.c < sz.patch                    # 安装补丁\n\n    sort排序{\n\n        -t                                     # 指定排序时所用的栏位分隔字符\n        -n                                     # 依照数值的大小排序\n        -r                                     # 以相反的顺序来排序\n        -f                                     # 排序时，将小写字母视为大写字母\n        -d                                     # 排序时，处理英文字母、数字及空格字符外，忽略其他的字符\n        -c                                     # 检查文件是否已经按照顺序排序\n        -b                                     # 忽略每行前面开始处的空格字符\n        -M                                     # 前面3个字母依照月份的缩写进行排序\n        -k                                     # 指定域\n        -m                                     # 将几个排序好的文件进行合并\n        -T                                     # 指定临时文件目录,默认在/tmp\n        -o                                     # 将排序后的结果存入指定的文        \n\n        sort -n                                # 按数字排序\n        sort -nr                               # 按数字倒叙\n        sort -u                                # 过滤重复行\n        sort -m a.txt c.txt                    # 将两个文件内容整合到一起\n        sort -n -t' ' -k 2 -k 3 a.txt          # 第二域相同，将从第三域进行升降处理\n        sort -n -t':' -k 3r a.txt              # 以:为分割域的第三域进行倒叙排列\n        sort -k 1.3 a.txt                      # 从第三个字母起进行排序\n        sort -t\" \" -k 2n -u  a.txt             # 以第二域进行排序，如果遇到重复的，就删除\n\n    }\n\n    find查找{\n\n        # linux文件无创建时间\n        # Access 使用时间\n        # Modify 内容修改时间\n        # Change 状态改变时间(权限、属主)\n        # 时间默认以24小时为单位,当前时间到向前24小时为0天,向前48-72小时为2天\n        # -and 且 匹配两个条件 参数可以确定时间范围 -mtime +2 -and -mtime -4\n        # -or 或 匹配任意一个条件\n\n        find /etc -name \"*http*\"                                # 按文件名查找\n        find . -type f                                          # 查找某一类型文件\n        find / -perm                                            # 按照文件权限查找\n        find / -user                                            # 按照文件属主查找\n        find / -group                                           # 按照文件所属的组来查找文件\n        find / -atime -n                                        # 文件使用时间在N天以内\n        find / -atime +n                                        # 文件使用时间在N天以前\n        find / -mtime +n                                        # 文件内容改变时间在N天以前\n        find / -ctime +n                                        # 文件状态改变时间在N天前\n        find / -mmin +30                                        # 按分钟查找内容改变\n        find / -size +1000000c -print                           # 查找文件长度大于1M字节的文件\n        find /etc -name \"*passwd*\" -exec grep \"xuesong\" {} \\;   # 按名字查找文件传递给-exec后命令\n        find . -name 't*' -exec basename {} \\;                  # 查找文件名,不取路径\n        find . -type f -name \"err*\" -exec  rename err ERR {} \\; # 批量改名(查找err 替换为 ERR {}文件\n        find path -name *name1* -or -name *name2*               # 查找任意一个关键字\n\n    }\n\n    vim编辑器{\n\n        # 常用配置\n        set smartindent\n        set tabstop=4\n        set shiftwidth=4\n        set expandtab\n        set softtabstop=4\n        set noautoindent\n        set nosmartindent\n        set paste\n        set clipboard=unnamed\n\n        gconf-editor           # 配置编辑器\n        /etc/vimrc             # 配置文件路径\n        vim +24 file           # 打开文件定位到指定行\n        vim file1 file2        # 打开多个文件\n        vim  -r file           # 恢复上次异常关闭的文件 .file.swp \n        vim -O2 file1 file2    # 垂直分屏\n        vim -on file1 file2    # 水平分屏\n        Ctrl+ U                # 向前翻页\n        Ctrl+ D                # 向后翻页\n        Ctrl+ww                # 在窗口间切换\n        Ctrl+w +or-or=         # 增减高度\n        :sp filename           # 上下分割打开新文件\n        :vs filename           # 左右分割打开新文件\n        :set nu                # 打开行号\n        :set nonu              # 取消行号\n        :nohl                  # 取消高亮\n        :set paste             # 取消缩进\n        :set autoindent        # 设置自动缩进\n\t\t:set list              # 显示制表符\n        :set ff                # 查看文本格式\n        :set binary            # 改为unix格式\n        :%s/str/newstr/g       # 全部替换\n        :200                   # 跳转到200  1 文件头\n        G                      # 跳到行尾\n        dd                     # 删除当前行 并复制 可直接p粘贴\n        11111dd                # 删除11111行，可用来清空文件\n        r                      # 替换单个字符\n        R                      # 替换多个字符\n        u                      # 撤销上次操作\n        *                      # 全文匹配当前光标所在字符串\n        $                      # 行尾\n        0                      # 行首\n        X                      # 文档加密\n        v =                    # 自动格式化代码\n        Ctrl+v                 # 可视模式\n        Ctrl+v I ESC           # 多行操作\n        Ctrl+v s ESC           # 批量取消注释\n\n    }\n\n    归档解压缩{\n\n        tar zxvpf gz.tar.gz  dir                         # 解包指定tar.gz中的内容  不指定目录则全解压\n        tar zcvpf /$path/gz.tar.gz *                     # 打包gz 注意*最好用相对路径\n        tar zcf /$path/gz.tar.gz *                       # 打包正确不提示\n        tar ztvpf gz.tar.gz                              # 查看gz\n        tar xvf 1.tar -C dir                             # 解包tar 放到指定目录\n        tar -cvf 1.tar *                                 # 打包tar\n        tar tvf 1.tar                                    # 查看tar\n        tar -rvf 1.tar filename                          # 给tar追加文件\n        tar --exclude=/home/dmtsai --exclude=*.tar -zcvf myfile.tar.gz /home/* /etc      # 打包/home, /etc ，但排除 /home/dmtsai\n        tar -N \"2005/06/01\" -zcvf home.tar.gz /home      # 在 /home 当中，比 2005/06/01 新的文件才备份\n        tar -zcvfh home.tar.gz /home                     # 打包目录中包括连接目录\n        tar zcf - ./ | ssh root@IP \"tar zxf - -C /xxxx\"  # 一边压缩一边解压\n        zgrep str 1.gz                                   # 查看压缩包中文件字符行\n        bzip2  -dv 1.tar.bz2                             # 解压bzip2\n        bzip2 -v 1.tar                                   # bzip2压缩\n        bzcat                                            # 查看bzip2\n        gzip file                                        # 直接压缩文件 # 压缩后源文件消失\n        gunzip file.gz                                   # 直接解压文件 # 解压后源文件消失\n        gzip -r dir/                                     # 递归压缩目录\n        gzip  -r -d dir/                                 # 递归解压目录\n        gzip -dv 1.tar.gz                                # 解压gzip到tar\n        gzip -v 1.tar                                    # 压缩tar到gz\n        unzip zip.zip                                    # 解压zip\n        zip zip.zip *                                    # 压缩zip\n        rar a rar.rar *.jpg                              # 压缩文件为rar包\n        unrar x rar.rar                                  # 解压rar包\n\t\tpigz -9 -p 2 *.log                               # 压缩文件,pigz是gzip升级版，可并行压缩\n\t\tpigz -9 -d *.gz                                  # 解压\n\n    }\n\n    文件ACL权限控制{\n\n        getfacl 1.test                      # 查看文件ACL权限\n        setfacl -R -m u:xuesong:rw- 1.test  # 对文件增加用户的读写权限 -R 递归\n\n    }\n\n    svn{\n\n        --force # 强制覆盖\n        /usr/bin/svn --username user --password passwd co  $Code  ${SvnPath}src/                 # 检出整个项目\n        /usr/bin/svn --username user --password passwd up  $Code  ${SvnPath}src/                 # 更新项目\n        /usr/bin/svn --username user --password passwd export  $Code$File ${SvnPath}src/$File    # 导出个别文件\n        /usr/bin/svn --username user --password passwd export -r 版本号 svn路径 本地路径 --force   # 导出指定版本\n\n    }\n\n    git{\n\t    git push --set-upstream origin develop             # 推送新分支\n\t    git rm -r ./*                                      # 置空分支代码\n        git push origin --delete v2.9                      # 删除远程分支\n        git clone git@10.10.10.10:gittest.git  ./gittest/  # 克隆项目到指定目录\n        git clone  -b develop --depth=1 http://git.a.com/d.git   # 克隆指定分支 克隆一层\n\t\tgit checkout .                                     # 放弃所有文件修改\n\t\tgit checkout -- filename                           # 放弃单个文件修改\n        git status                                         # Show the working tree(工作树) status\n        git log -n 1 --stat                                # 查看最后一次日志文件\n        git branch -a                                      # 列出远程跟踪分支(remote-tracking branches)和本地分支\n        git checkout developing                            # 切换到developing分支\n        git checkout -b release                            # 切换分支没有从当前分支创建\n        git checkout -b release origin/master              # 从远程分支创建本地镜像分支\n        git push origin --delete release                   # 从远端删除分区，服务端有可能设置保护不允许删除\n        git push origin release                            # 把本地分支提交到远程\n        git pull                                           # 更新项目 需要cd到项目目录中\n        git fetch -f -p                                    # 抓取远端代码但不合并到当前\n        git reset --hard origin/master                     # 和远端同步分支\n        git add .                                          # 更新所有文件\n        git commit -m \"gittest up\"                         # 提交操作并添加备注\n        git push                                           # 正式提交到远程git服务器\n        git push [-u origin master]                        # 正式提交到远程git服务器(master分支)\n        git tag [-a] dev-v-0.11.54 [-m 'fix #67']          # 创建tag,名为dev-v-0.11.54,备注fix #67\n        git tag -l dev-v-0.11.54                           # 查看tag(dev-v-0.11.5)\n        git push origin --tags                             # 提交tag\n        git reset --hard                                   # 本地恢复整个项目\n        git rm -r -n --cached  ./img                       # -n执行命令时,不会删除任何文件,而是展示此命令要删除的文件列表预览\n        git rm -r --cached  ./img                          # 执行删除命令 需要commit和push让远程生效\n        git init --bare smc-content-check.git              # 初始化新git项目  需要手动创建此目录并给git用户权限 chown -R git:git smc-content-check.git\n        git config --global credential.helper store        # 记住密码\n        git config [--global] user.name \"your name\"        # 设置你的用户名, 希望在一个特定的项目中使用不同的用户或e-mail地址, 不要--global选项\n        git config [--global] user.email \"your email\"      # 设置你的e-mail地址, 每次Git提交都会使用该信息\n        git config [--global] user.name                    # 查看用户名\n        git config [--global] user.email                   # 查看用户e-mail\n        git config --global --edit                         # 编辑~/.gitconfig(User-specific)配置文件, 值优先级高于/etc/gitconfig(System-wide)\n        git config --edit                                  # 编辑.git/config(Repository specific)配置文件, 值优先级高于~/.gitconfig\n        git cherry-pick  <commit id>                       # 用于把另一个本地分支的commit修改应用到当前分支 需要push到远程\n        git log --pretty=format:'%h: %s' 9378b62..HEAD     # 查看指定范围更新操作 commit id\n        git config --global core.ignorecase false          # 设置全局大小写敏感\n        git ls-remote --heads origin refs/heads/test       # 查看\n        git config pull.rebase false                       # 默认将pull下来的代码与现有的代码进行合并，有可能造成冲突。   \n\n        从远端拉一份新的{\n            # You have not concluded your merge (MERGE_HEAD exists)  git拉取失败\n            git fetch --hard origin/master\n            git reset --hard origin/master\n        }\n\n        删除远程分支并新建{\n            git checkout master\n            git branch -r -d origin/test       # 删除远程分支  但有时候并没有删除 可以尝试使用下面的语句\n            git push origin :test              # 推送一个空分支到远程分支，相当于删除远程分支\n            git branch -d test                 # 删除本地test分支, -D 强制\n            git branch -a |grep test\n            git checkout -b test\n            git push origin test\n\n            git reset --hard origin/test \n        }\n\n        迁移git项目{\n            git branch -r | grep -v '\\->' | while read remote; do git branch --track \"${remote#origin/}\" \"$remote\"; done\n            git fetch --all\n            git pull --all\n            git remote set-url origin git@git.github.cn:server/gw.git\n            git push --all\n        }\n    }\n\n    恢复rm删除的文件{\n\n        # debugfs针对 ext2   # ext3grep针对 ext3   # extundelete针对 ext4\n        df -T   # 首先查看磁盘分区格式\n        umount /data/     # 卸载挂载,数据丢失请首先卸载挂载,或重新挂载只读\n        ext3grep /dev/sdb1 --ls --inode 2         # 记录信息继续查找目录下文件inode信息\n        ext3grep /dev/sdb1 --ls --inode 131081    # 此处是inode\n        ext3grep /dev/sdb1 --restore-inode 49153  # 记录下inode信息开始恢复目录\n\n    }\n\n    openssl{\n\n        openssl rand 15 -base64            # 口令生成\n        openssl sha1 filename              # 哈希算法校验文件\n        openssl md5 filename               # MD5校验文件\n        openssl base64   filename.txt      # base64编码/解码文件(发送邮件附件之类功能会可以使用)\n        openssl base64 -d   filename.bin   # base64编码/解码二进制文件\n        openssl enc -aes-128-cbc   filename.aes-128-cbc                  # 加密文档\n        # 推荐使用的加密算法是bf(Blowfish)和-aes-128-cbc(运行在CBC模式的128位密匙AES加密算法)，加密强度有保障\n        openssl enc -d -aes-128-cbc -in filename.aes-128-cbc > filename  # 解密文档\n\n    }\n\n}\n\n2 软件{\n\n    rpm{\n\n        rpm -ivh lynx          # rpm安装\n        rpm -e lynx            # 卸载包\n        rpm -e lynx --nodeps   # 强制卸载\n        rpm -qa                # 查看所有安装的rpm包\n        rpm -qa | grep lynx    # 查找包是否安装\n        rpm -ql                # 软件包路径\n        rpm -Uvh               # 升级包\n        rpm --test lynx        # 测试\n        rpm -qc                # 软件包配置文档\n        rpm --initdb           # 初始化rpm 数据库\n        rpm --rebuilddb        # 重建rpm数据库  在rpm和yum无响应的情况使用 先 rm -f /var/lib/rpm/__db.00* 在重建\n\n    }\n\n    yum{\n\n        yum list                 # 所有软件列表\n        yum install 包名          # 安装包和依赖包\n        yum -y update            # 升级所有包版本,依赖关系，系统版本内核都升级\n        yum -y update 软件包名    # 升级指定的软件包\n        yum -y upgrade           # 不改变软件设置更新软件，系统版本升级，内核不改变\n        yum search mail          # yum搜索相关包\n        yum grouplist            # 软件包组\n        yum -y groupinstall \"Virtualization\"   # 安装软件包组\n        repoquery -ql gstreamer  # 不安装软件查看包含文件\n        yum clean all            # 清除var下缓存\n\n    }\n\n    yum使用epel源{\n\n        # 包下载地址: http://download.fedoraproject.org/pub/epel   # 选择版本5\\6\\7\n        rpm -Uvh  http://mirrors.hustunique.com/epel//6/x86_64/epel-release-6-8.noarch.rpm\n\n        # 自适配版本\n        yum install epel-release\n\n    }\n\n    自定义yum源{\n\n        find /etc/yum.repos.d -name \"*.repo\" -exec mv {} {}.bak \\;\n\n        vim /etc/yum.repos.d/yum.repo\n        [yum]\n        #http\n        baseurl=http://10.0.0.1/centos5.5\n        #挂载iso\n        #mount -o loop CentOS-5.8-x86_64-bin-DVD-1of2.iso /data/iso/\n        #本地\n        #baseurl=file:///data/iso/\n        enable=1\n\n        #导入key\n        rpm --import  /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-5\n\n    }\n\n    编译{\n\n        源码安装{\n\n            ./configure --help                   # 查看所有编译参数\n            ./configure  --prefix=/usr/local/    # 配置参数\n            make                                 # 编译\n            # make -j 8                          # 多线程编译,速度较快,但有些软件不支持\n            make install                         # 安装包\n            make clean                           # 清除编译结果\n\n        }\n\n        perl程序编译{\n\n            perl Makefile.PL\n            make\n            make test\n            make install\n\n        }\n\n        python程序编译{\n\n            python file.py\n\n            # 源码包编译安装\n            python setup.py build\n            python setup.py install\n\n        }\n\n        编译c程序{\n\n            gcc -g hello.c -o hello\n\n        }\n\n    }\n\n}\n\n3 系统{\n\n    wall                                          # 给其它用户发消息\n    whereis ls                                    # 搜索程序名，而且只搜索二进制文件\n    which                                         # 查找命令是否存在,及存放位置\n    locate                                        # 不是实时查找，查找的结果不精确，但查找速度很快 每天更新 /var/lib/locatedb\n    clear                                         # 清空整个屏幕\n    reset                                         # 重新初始化屏幕\n    cal                                           # 显示月历\n    echo -n 123456 | md5sum                       # md5加密\n    mkpasswd                                      # 随机生成密码   -l位数 -C大小 -c小写 -d数字 -s特殊字符\n    netstat -ntupl | grep port                    # 是否打开了某个端口\n    ntpdate cn.pool.ntp.org                       # 同步时间, pool.ntp.org: public ntp time server for everyone(http://www.pool.ntp.org/zh/)\n\t5 * * * * /usr/sbin/ntpdate 133.100.11.8 133.100.9.2 time.nist.gov time.windows.com\n    tzselect                                      # 选择时区 #+8=(5 9 1 1) # (TZ='Asia/Shanghai'; export TZ)括号内写入 /etc/profile\n    /sbin/hwclock -w                              # 时间保存到硬件\n    /etc/shadow                                   # 账户影子文件\n    LANG=en                                       # 修改语言\n    vim /etc/sysconfig/i18n                       # 修改编码  LANG=\"en_US.UTF-8\"\n    export LC_ALL=C                               # 强制字符集\n    vi /etc/hosts                                 # 查询静态主机名\n    alias                                         # 别名\n    watch uptime                                  # 监测命令动态刷新 监视\n    ipcs -a                                       # 查看Linux系统当前单个共享内存段的最大值\n    ldconfig                                      # 动态链接库管理命令\n    ldd `which cmd`                               # 查看命令的依赖库\n    dist-upgrade                                  # 会改变配置文件,改变旧的依赖关系，改变系统版本\n    /boot/grub/grub.conf                          # grub启动项配置\n    ps -mfL <PID>                                 # 查看指定进程启动的线程 线程数受 max user processes 限制\n    ps uxm |wc -l                                 # 查看当前用户占用的进程数 [包括线程]  max user processes\n    top -p  PID -H                                # 查看指定PID进程及线程\n    lsof |wc -l                                   # 查看当前文件句柄数使用数量  open files\n\tlsof -p pid                                   # 查看进程占用文件\n    lsof |grep /lib                               # 查看加载库文件\n    sysctl -a                                     # 查看当前所有系统内核参数\n    sysctl -p                                     # 修改内核参数/etc/sysctl.conf，让/etc/rc.d/rc.sysinit读取生效\n    strace -p pid                                 # 跟踪系统调用\n    ps -eo \"%p %C  %z  %a\"|sort -k3 -n            # 把进程按内存使用大小排序\n    strace uptime 2>&1|grep open                  # 查看命令打开的相关文件\n    grep Hugepagesize /proc/meminfo               # 内存分页大小\n    mkpasswd -l 8  -C 2 -c 2 -d 4 -s 0            # 随机生成指定类型密码\n    echo 1 > /proc/sys/net/ipv4/tcp_syncookies    # 使TCP SYN Cookie 保护生效  # \"SYN Attack\"是一种拒绝服务的攻击方式\n    grep Swap  /proc/25151/smaps |awk '{a+=$2}END{print a}'    # 查询某pid使用的swap大小\n    redir --lport=33060 --caddr=10.10.10.78 --cport=3306       # 端口映射 yum安装 用supervisor守护\n\t/usr/sbin/chroot --userspec=nobody.nobody / sh -c  \"echo hello > /tmp/chroot.log\" ## 以nobody用户取执行命令\n\n    开机启动脚本顺序{\n\n        /etc/profile\n        /etc/profile.d/*.sh\n        ~/bash_profile\n        ~/.bashrc\n        /etc/bashrc\n\n    }\n\n    进程管理{\n\n        ps -eaf               # 查看所有进程\n        kill -9 PID           # 强制终止某个PID进程\n        kill -15 PID          # 安全退出 需程序内部处理信号\n\t\tkillall nginx         # 杀死nginx这一组进程\n        cmd &                 # 命令后台运行\n        nohup cmd &           # 后台运行不受shell退出影响\n        ctrl+z                # 将前台放入后台(暂停)\n        jobs                  # 查看后台运行程序\n        bg 2                  # 启动后台暂停进程\n        fg 2                  # 调回后台进程\n        pstree                # 进程树\n        vmstat 1 9            # 每隔一秒报告系统性能信息9次\n        sar                   # 查看cpu等状态\n        lsof file             # 显示打开指定文件的所有进程\n        lsof -i:32768         # 查看端口的进程\n        renice +1 180         # 把180号进程的优先级加1\n        exec sh a.sh          # 子进程替换原来程序的pid， 避免supervisor无法强制杀死进程\n\n        ps{\n\n            ps aux |grep -v USER | sort -nk +4 | tail       # 显示消耗内存最多的10个运行中的进程，以内存使用量排序.cpu +3\n            # USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\n            %CPU     # 进程的cpu占用率\n            %MEM     # 进程的内存占用率\n            VSZ      # 进程虚拟大小,单位K(即总占用内存大小,包括真实内存和虚拟内存)\n            RSS      # 进程使用的驻留集大小即实际物理内存大小\n            START    # 进程启动时间和日期\n            占用的虚拟内存大小 = VSZ - RSS\n\n            ps -eo pid,lstart,etime,args         # 查看进程启动时间\n\n        }\n\n        top{\n\n            前五行是系统整体的统计信息。\n            第一行: 任务队列信息，同 uptime 命令的执行结果。内容如下：\n                01:06:48 当前时间\n                up 1:22 系统运行时间，格式为时:分\n                1 user 当前登录用户数\n                load average: 0.06, 0.60, 0.48 系统负载，即任务队列的平均长度。\n                三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值。\n\n            第二、三行:为进程和CPU的信息。当有多个CPU时，这些内容可能会超过两行。内容如下：\n                Tasks: 29 total 进程总数\n                1 running 正在运行的进程数\n                28 sleeping 睡眠的进程数\n                0 stopped 停止的进程数\n                0 zombie 僵尸进程数\n                Cpu(s): 0.3% us 用户空间占用CPU百分比\n                1.0% sy 内核空间占用CPU百分比\n                0.0% ni 用户进程空间内改变过优先级的进程占用CPU百分比\n                98.7% id 空闲CPU百分比\n                0.0% wa 等待输入输出的CPU时间百分比\n                0.0% hi\n                0.0% si\n\n            第四、五行:为内存信息。内容如下：\n                Mem: 191272k total 物理内存总量\n                173656k used 使用的物理内存总量\n                17616k free 空闲内存总量\n                22052k buffers 用作内核缓存的内存量\n                Swap: 192772k total 交换区总量\n                0k used 使用的交换区总量\n                192772k free 空闲交换区总量\n                123988k cached 缓冲的交换区总量。\n                内存中的内容被换出到交换区，而后又被换入到内存，但使用过的交换区尚未被覆盖，\n                该数值即为这些内容已存在于内存中的交换区的大小。\n                相应的内存再次被换出时可不必再对交换区写入。\n\n            进程信息区,各列的含义如下:  # 显示各个进程的详细信息\n\n            序号 列名    含义\n            a   PID      进程id\n            b   PPID     父进程id\n            c   RUSER    Real user name\n            d   UID      进程所有者的用户id\n            e   USER     进程所有者的用户名\n            f   GROUP    进程所有者的组名\n            g   TTY      启动进程的终端名。不是从终端启动的进程则显示为 ?\n            h   PR       优先级\n            i   NI       nice值。负值表示高优先级，正值表示低优先级\n            j   P        最后使用的CPU，仅在多CPU环境下有意义\n            k   %CPU     上次更新到现在的CPU时间占用百分比\n            l   TIME     进程使用的CPU时间总计，单位秒\n            m   TIME+    进程使用的CPU时间总计，单位1/100秒\n            n   %MEM     进程使用的物理内存百分比\n            o   VIRT     进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES\n            p   SWAP     进程使用的虚拟内存中，被换出的大小，单位kb。\n            q   RES      进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA\n            r   CODE     可执行代码占用的物理内存大小，单位kb\n            s   DATA     可执行代码以外的部分(数据段+栈)占用的物理内存大小，单位kb\n            t   SHR      共享内存大小，单位kb\n            u   nFLT     页面错误次数\n            v   nDRT     最后一次写入到现在，被修改过的页面数。\n            w   S        进程状态。\n                D=不可中断的睡眠状态\n                R=运行\n                S=睡眠\n                T=跟踪/停止\n                Z=僵尸进程 父进程在但并不等待子进程\n            x   COMMAND  命令名/命令行\n            y   WCHAN    若该进程在睡眠，则显示睡眠中的系统函数名\n            z   Flags    任务标志，参考 sched.h\n\n        }\n\n        列出正在占用swap的进程{\n\n            #!/bin/bash\n            echo -e \"PID\\t\\tSwap\\t\\tProc_Name\"\n            # 拿出/proc目录下所有以数字为名的目录（进程名是数字才是进程，其他如sys,net等存放的是其他信息）\n            for pid in `ls -l /proc | grep ^d | awk '{ print $9 }'| grep -v [^0-9]`\n            do\n                # 让进程释放swap的方法只有一个：就是重启该进程。或者等其自动释放。放\n                # 如果进程会自动释放，那么我们就不会写脚本来找他了，找他都是因为他没有自动释放。\n                # 所以我们要列出占用swap并需要重启的进程，但是init这个进程是系统里所有进程的祖先进程\n                # 重启init进程意味着重启系统，这是万万不可以的，所以就不必检测他了，以免对系统造成影响。\n                if [ $pid -eq 1 ];then continue;fi\n                grep -q \"Swap\" /proc/$pid/smaps 2>/dev/null\n                if [ $? -eq 0 ];then\n                    swap=$(grep Swap /proc/$pid/smaps \\\n                        | gawk '{ sum+=$2;} END{ print sum }')\n                    proc_name=$(ps aux | grep -w \"$pid\" | grep -v grep \\\n                        | awk '{ for(i=11;i<=NF;i++){ printf(\"%s \",$i); }}')\n                    if [ $swap -gt 0 ];then\n                        echo -e \"${pid}\\t${swap}\\t${proc_name}\"\n                    fi\n                fi\n            done | sort -k2 -n | awk -F'\\t' '{\n                pid[NR]=$1;\n                size[NR]=$2;\n                name[NR]=$3;\n            }\n            END{\n                for(id=1;id<=length(pid);id++)\n                {\n                    if(size[id]<1024)\n                        printf(\"%-10s\\t%15sKB\\t%s\\n\",pid[id],size[id],name[id]);\n                    else if(size[id]<1048576)\n                        printf(\"%-10s\\t%15.2fMB\\t%s\\n\",pid[id],size[id]/1024,name[id]);\n                    else\n                        printf(\"%-10s\\t%15.2fGB\\t%s\\n\",pid[id],size[id]/1048576,name[id]);\n                }\n            }'\n\n        }\n\n        linux操作系统提供的信号{\n\n            kill -l                    # 查看linux提供的信号\n            trap \"echo aaa\"  2 3 15    # shell使用 trap 捕捉退出信号\n\n            # 发送信号一般有两种原因:\n            #   1(被动式)  内核检测到一个系统事件.例如子进程退出会像父进程发送SIGCHLD信号.键盘按下control+c会发送SIGINT信号\n            #   2(主动式)  通过系统调用kill来向指定进程发送信号\n            # 进程结束信号 SIGTERM 和 SIGKILL 的区别:  SIGTERM 比较友好，进程能捕捉这个信号，根据您的需要来关闭程序。在关闭程序之前，您可以结束打开的记录文件和完成正在做的任务。在某些情况下，假如进程正在进行作业而且不能中断，那么进程可以忽略这个SIGTERM信号。\n            # 如果一个进程收到一个SIGUSR1信号，然后执行信号绑定函数，第二个SIGUSR2信号又来了，第一个信号没有被处理完毕的话，第二个信号就会丢弃。\n\n            SIGHUP  1          A     # 终端挂起或者控制进程终止\n            SIGINT  2          A     # 键盘终端进程(如control+c)\n            SIGQUIT 3          C     # 键盘的退出键被按下\n            SIGILL  4          C     # 非法指令\n            SIGABRT 6          C     # 由abort(3)发出的退出指令\n            SIGFPE  8          C     # 浮点异常\n            SIGKILL 9          AEF   # Kill信号  立刻停止\n            SIGSEGV 11         C     # 无效的内存引用\n            SIGPIPE 13         A     # 管道破裂: 写一个没有读端口的管道\n            SIGALRM 14         A     # 闹钟信号 由alarm(2)发出的信号\n            SIGTERM 15         A     # 终止信号,可让程序安全退出 kill -15\n            SIGUSR1 30,10,16   A     # 用户自定义信号1\n            SIGUSR2 31,12,17   A     # 用户自定义信号2\n            SIGCHLD 20,17,18   B     # 子进程结束自动向父进程发送SIGCHLD信号\n            SIGCONT 19,18,25         # 进程继续（曾被停止的进程）\n            SIGSTOP 17,19,23   DEF   # 终止进程\n            SIGTSTP 18,20,24   D     # 控制终端（tty）上按下停止键\n            SIGTTIN 21,21,26   D     # 后台进程企图从控制终端读\n            SIGTTOU 22,22,27   D     # 后台进程企图从控制终端写\n\n            缺省处理动作一项中的字母含义如下:\n                A  缺省的动作是终止进程\n                B  缺省的动作是忽略此信号，将该信号丢弃，不做处理\n                C  缺省的动作是终止进程并进行内核映像转储(dump core),内核映像转储是指将进程数据在内存的映像和进程在内核结构中的部分内容以一定格式转储到文件系统，并且进程退出执行，这样做的好处是为程序员提供了方便，使得他们可以得到进程当时执行时的数据值，允许他们确定转储的原因，并且可以调试他们的程序。\n                D  缺省的动作是停止进程，进入停止状况以后还能重新进行下去，一般是在调试的过程中（例如ptrace系统调用）\n                E  信号不能被捕获\n                F  信号不能被忽略\n        }\n\n        系统性能状态{\n\n            vmstat 1 9\n\n            r      # 等待执行的任务数。当这个值超过了cpu线程数，就会出现cpu瓶颈。\n            b      # 等待IO的进程数量,表示阻塞的进程。\n            swpd   # 虚拟内存已使用的大小，如大于0，表示机器物理内存不足，如不是程序内存泄露，那么该升级内存。\n            free   # 空闲的物理内存的大小\n            buff   # 已用的buff大小，对块设备的读写进行缓冲\n            cache  # cache直接用来记忆我们打开的文件,给文件做缓冲，(把空闲的物理内存的一部分拿来做文件和目录的缓存，是为了提高 程序执行的性能，当程序使用内存时，buffer/cached会很快地被使用。)\n            inact  # 非活跃内存大小，即被标明可回收的内存，区别于free和active -a选项时显示\n            active # 活跃的内存大小 -a选项时显示\n            si   # 每秒从磁盘读入虚拟内存的大小，如果这个值大于0，表示物理内存不够用或者内存泄露，要查找耗内存进程解决掉。\n            so   # 每秒虚拟内存写入磁盘的大小，如果这个值大于0，同上。\n            bi   # 块设备每秒接收的块数量，这里的块设备是指系统上所有的磁盘和其他块设备，默认块大小是1024byte\n            bo   # 块设备每秒发送的块数量，例如读取文件，bo就要大于0。bi和bo一般都要接近0，不然就是IO过于频繁，需要调整。\n            in   # 每秒CPU的中断次数，包括时间中断。in和cs这两个值越大，会看到由内核消耗的cpu时间会越多\n            cs   # 每秒上下文切换次数，例如我们调用系统函数，就要进行上下文切换，线程的切换，也要进程上下文切换，这个值要越小越好，太大了，要考虑调低线程或者进程的数目,例如在apache和nginx这种web服务器中，我们一般做性能测试时会进行几千并发甚至几万并发的测试，选择web服务器的进程可以由进程或者线程的峰值一直下调，压测，直到cs到一个比较小的值，这个进程和线程数就是比较合适的值了。系统调用也是，每次调用系统函数，我们的代码就会进入内核空间，导致上下文切换，这个是很耗资源，也要尽量避免频繁调用系统函数。上下文切换次数过多表示你的CPU大部分浪费在上下文切换，导致CPU干正经事的时间少了，CPU没有充分利用。\n            us   # 用户进程执行消耗cpu时间(user time)  us的值比较高时，说明用户进程消耗的cpu时间多，但是如果长期超过50%的使用，那么我们就该考虑优化程序算法或其他措施\n            sy   # 系统CPU时间，如果太高，表示系统调用时间长，例如是IO操作频繁。\n            id   # 空闲 CPU时间，一般来说，id + us + sy = 100,一般认为id是空闲CPU使用率，us是用户CPU使用率，sy是系统CPU使用率。\n            wt   # 等待IOCPU时间。Wa过高时，说明io等待比较严重，这可能是由于磁盘大量随机访问造成的，也有可能是磁盘的带宽出现瓶颈。\n\n            如果 r 经常大于4，且id经常少于40，表示cpu的负荷很重。\n            如果 pi po 长期不等于0，表示内存不足。\n            如果 b 队列经常大于3，表示io性能不好。\n\n        }\n\n    }\n\n    日志管理{\n\n        history                      # 历时命令默认1000条\n        HISTTIMEFORMAT=\"%Y-%m-%d %H:%M:%S \"   # 让history命令显示具体时间\n        history  -c                  # 清除记录命令\n        cat $HOME/.bash_history      # 历史命令记录文件\n        lastb -a                     # 列出登录系统失败的用户相关信息  清空二进制日志记录文件 echo > /var/log/btmp\n        last                         # 查看登陆过的用户信息  清空二进制日志记录文件 echo > /var/log/wtmp   默认打开乱码\n        who /var/log/wtmp            # 查看登陆过的用户信息\n        lastlog                      # 用户最后登录的时间\n        tail -f /var/log/messages    # 系统日志\n        tail -f /var/log/secure      # ssh日志\n    }\n\t日志切割logrotate{\n\t\t/etc/logrotate.d/  # 配置目录\n\t\t#示例：新建文件/etc/logrotate.d/apisix，配置内容如下：\n\t\t/opt/apisix/logs/*.log {\n\t\t\tdaily           # 日志文件将按日轮循，还可用'weekly'，'monthly'\n\t\t\tcompress        # 在轮循任务完成后，已轮循的归档将使用gzip进行压缩。\n\t\t\tdelaycompress   # 总是与compress选项一起用，delaycompress选项指示logrotate不要将最近的归档压缩，压缩将在下一次轮循周期进行(最近一次不归档)\n\t\t\trotate 365      # 一次将存储365个归档日志。对于第366个归档，时间最久的归档将被删除\n\t\t\tmissingok       # 在日志轮循期间，任何错误将被忽略，例如“文件无法找到”之类的错误\n\t\t\tnotifempty      # 如果日志文件为空，轮循不会进行\n\t\t\tdateext\n\t\t\tsharedscripts\n\t\t\tpostrotate      # postrotate/endscript：在所有其它指令完成后，postrotate和endscript里面指定的命令将被执行。在这种情况下，rsyslogd 进程将立即再次读取其配置并继续运行。\n\t\t\t\tif [ -f /opt/apisix/logs/nginx.pid ]; then\n\t\t\t\t\t#重启nginx服务\n\t\t\t\t\tkill -USR1 `cat /opt/apisix/logs/nginx.pid`\n\t\t\t\tfi\n\t\t\tendscript\n\t\t}\n\t\t\n\t\tlogrotate /etc/logrotate.conf  # 使新配置生效\n\t}\n\n    man{\n        man 2 read   # 查看read函数的文档\n        1 使用者在shell中可以操作的指令或可执行档\n        2 系统核心可呼叫的函数与工具等\n        3 一些常用的函数(function)与函数库(library),大部分是C的函数库(libc)\n        4 装置档案的说明，通常在/dev下的档案\n        5 设定档或者是某些档案的格式\n        6 游戏games\n        7 惯例与协定等，例如linux档案系统、网络协定、ascll code等说明\n        8 系统管理员可用的管理指令\n        9 跟kernel有关的文件\n    }\n\n    selinux{\n\n        sestatus -v                    # 查看selinux状态\n        getenforce                     # 查看selinux模式\n        setenforce 0                   # 设置selinux为宽容模式(可避免阻止一些操作)\n        semanage port -l               # 查看selinux端口限制规则\n        semanage port -a -t http_port_t -p tcp 8000  # 在selinux中注册端口类型\n        vi /etc/selinux/config         # selinux配置文件\n        SELINUX=enfoceing              # 关闭selinux 把其修改为  SELINUX=disabled\n\n    }\n\n    查看剩余内存{\n\n        free -m\n        #-/+ buffers/cache:       6458       1649\n        #6458M为真实使用内存  1649M为真实剩余内存(剩余内存+缓存+缓冲器)\n        #linux会利用所有的剩余内存作为缓存，所以要保证linux运行速度，就需要保证内存的缓存大小\n\n    }\n\n    系统信息{\n\n        uname -a              # 查看Linux内核版本信息\n        cat /proc/version     # 查看内核版本\n        cat /etc/issue        # 查看系统版本\n        lsb_release -a        # 查看系统版本  需安装 centos-release\n        locale -a             # 列出所有语系\n        locale                # 当前环境变量中所有编码\n        hwclock               # 查看时间\n        who                   # 当前在线用户\n        w                     # 当前在线用户\n        whoami                # 查看当前用户名\n        logname               # 查看初始登陆用户名\n        uptime                # 查看服务器启动时间\n        sar -n DEV 1 10       # 查看网卡网速流量\n        dmesg                 # 显示开机信息\n        lsmod                 # 查看内核模块\n\n    }\n\n    硬件信息{\n\n        more /proc/cpuinfo                                       # 查看cpu信息\n        lscpu                                                    # 查看cpu信息\n        cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c    # 查看cpu型号和逻辑核心数\n        getconf LONG_BIT                                         # cpu运行的位数\n        cat /proc/cpuinfo | grep 'physical id' |sort| uniq -c    # 物理cpu个数\n        cat /proc/cpuinfo | grep flags | grep ' lm ' | wc -l     # 结果大于0支持64位\n        cat /proc/cpuinfo|grep flags                             # 查看cpu是否支持虚拟化   pae支持半虚拟化  IntelVT 支持全虚拟化\n        more /proc/meminfo                                       # 查看内存信息\n        dmidecode                                                # 查看全面硬件信息\n        dmidecode | grep \"Product Name\"                          # 查看服务器型号\n        dmidecode | grep -P -A5 \"Memory\\s+Device\" | grep Size | grep -v Range       # 查看内存插槽\n        cat /proc/mdstat                                         # 查看软raid信息\n        cat /proc/scsi/scsi                                      # 查看Dell硬raid信息(IBM、HP需要官方检测工具)\n        lspci                                                    # 查看硬件信息\n        lspci|grep RAID                                          # 查看是否支持raid\n        lspci -vvv |grep Ethernet                                # 查看网卡型号\n        lspci -vvv |grep Kernel|grep driver                      # 查看驱动模块\n        modinfo tg2                                              # 查看驱动版本(驱动模块)\n        ethtool -i em1                                           # 查看网卡驱动版本\n        ethtool em1                                              # 查看网卡带宽\n\n    }\n\n    终端快捷键{\n\n        Ctrl+A        　    # 行前\n        Ctrl+E        　    # 行尾\n        Ctrl+S        　    # 终端锁屏\n        Ctrl+Q        　　  # 解锁屏\n        Ctrl+D      　　    # 退出\n\n    }\n\n    开机启动模式{\n\n        vi /etc/inittab\n        id:3:initdefault:    # 3为多用户命令\n        #ca::ctrlaltdel:/sbin/shutdown -t3 -r now   # 注释此行 禁止 ctrl+alt+del 关闭计算机\n\n    }\n\n    终端提示显示{\n\n        echo $PS1                   # 环境变量控制提示显示\n        PS1='[\\u@ \\H \\w \\A \\@#]\\$'\n        PS1='[\\u@\\h \\W]\\$'\n        export PS1='[\\[\\e[32m\\]\\[\\e[31m\\]\\u@\\[\\e[36m\\]\\h \\w\\[\\e[m\\]]\\$ '     # 高亮显示终端\n\n    }\n\n    定时任务{\n\n        at 5pm + 3 days /bin/ls  # 单次定时任务 指定三天后下午5:00执行/bin/ls\n\n        crontab -e               # 编辑周期任务\n        #分钟  小时    天  月  星期   命令或脚本\n        1,30  1-3/2    *   *   *      命令或脚本  >> file.log 2>&1\n        echo \"40 7 * * 2 /root/sh\">>/var/spool/cron/work    # 普通用户可直接写入定时任务\n        crontab -l                                          # 查看自动周期性任务\n        crontab -r                                          # 删除自动周期性任务\n        cron.deny和cron.allow                               # 禁止或允许用户使用周期任务\n        service crond start|stop|restart                    # 启动自动周期性服务\n        * * * * *  echo \"d\" >>d$(date +\\%Y\\%m\\%d).log       # 让定时任务直接生成带日期的log  需要转义%\n        0 0,6,12 * * * /opt/php/bin/php xxx                 # 每天0，6，12点各执行一次\n    }\n\t\n\n    date{\n\n        星期日[SUN] 星期一[MON] 星期二[TUE] 星期三[WED] 星期四[THU] 星期五[FRI] 星期六[SAT]\n        一月[JAN] 二月[FEB] 三月[MAR] 四月[APR] 五月[MAY] 六月[JUN] 七月[JUL] 八月[AUG] 九月[SEP] 十月[OCT] 十一月[NOV] 十二月[DEC]\n\n        date -s 20091112                     # 设日期\n        date -s 18:30:50                     # 设时间\n        date -d \"7 days ago\" +%Y%m%d         # 7天前日期\n        date -d \"5 minute ago\" +%H:%M        # 5分钟前时间\n        date -d \"1 month ago\" +%Y%m%d        # 一个月前\n        date -d '1 days' +%Y-%m-%d           # 一天后\n        date -d '1 hours' +%H:%M:%S          # 一小时后\n        date +%Y-%m-%d -d '20110902'         # 日期格式转换\n        date +%Y-%m-%d_%X                    # 日期和时间\n        date +%N                             # 纳秒\n        date -d \"2012-08-13 14:00:23\" +%s    # 换算成秒计算(1970年至今的秒数)\n        date -d \"@1363867952\" +%Y-%m-%d-%T   # 将时间戳换算成日期\n        date -d \"1970-01-01 UTC 1363867952 seconds\" +%Y-%m-%d-%T  # 将时间戳换算成日期\n        date -d \"`awk -F. '{print $1}' /proc/uptime` second ago\" +\"%Y-%m-%d %H:%M:%S\"    # 格式化系统启动时间(多少秒前)\n\n    }\n\n    limits.conf{\n\n        ulimit -SHn 65535  # 临时设置文件描述符大小 进程最大打开文件柄数 还有socket最大连接数, 等同配置 nofile\n        ulimit -SHu 65535  # 临时设置用户最大进程数\n        ulimit -a          # 查看\n\n        /etc/security/limits.conf\n\n        # 文件描述符大小  open files\n        # lsof |wc -l   查看当前文件句柄数使用数量\n        * soft nofile 16384         # 设置太大，进程使用过多会把机器拖死\n        * hard nofile 32768\n\n        # 用户最大进程数  max user processes\n        # echo $((`ps uxm |wc -l`-`ps ux |wc -l`))  查看当前用户占用的进程数 [包括线程]\n        user soft nproc 16384\n        user hard nproc 32768\n\n        # 如果/etc/security/limits.d/有配置文件，将会覆盖/etc/security/limits.conf里的配置\n        # 即/etc/security/limits.d/的配置文件里就不要有同样的参量设置\n        /etc/security/limits.d/90-nproc.conf    # centos6.3的默认这个文件会覆盖 limits.conf\n        user soft nproc 16384\n        user hard nproc 32768\n\n        sysctl -p    # 修改配置文件后让系统生效\n\n    }\n\n    随机分配端口范围{\n\n        # 本机连其它端口用的\n        echo \"10000 65535\" > /proc/sys/net/ipv4/ip_local_port_range\n\n    }\n\n    百万长链接设置{\n\n        # 内存消耗需要较大\n        vim /root/.bash_profile\n        # 添加如下2行,退出bash重新登陆\n        # 一个进程不能使用超过NR_OPEN文件描述符\n        echo 20000500 > /proc/sys/fs/nr_open\n        # 当前用户最大文件数\n        ulimit -n 10000000\n\n    }\n\n    core崩溃文件查看{\n\n        gdb  core.13844\n        bt   # 查看函数调用信息(堆栈)\n\n    }\n\n\n    libc.so故障修复{\n\n        # 由于升级glibc导致libc.so不稳定,突然报错,幸好还有未退出的终端\n        grep: error while loading shared libraries: /lib64/libc.so.6: ELF file OS ABI invalid\n\n        # 看看当前系统有多少版本 libc.so\n        ls /lib64/libc-[tab]\n\n        # 更改环境变量指向其他 libc.so 文件测试\n        export LD_PRELOAD=/lib64/libc-2.7.so    # 如果不改变LD_PRELOAD变量,ln不能用,需要使用 /sbin/sln 命令做链接\n\n        # 当前如果好使了，在执行下面强制替换软链接。如不好使，测试其他版本的libc.so文件\n        ln -f -s /lib64/libc-2.7.so /lib64/libc.so.6\n\n    }\n\n    无法分配内存 {\n    \n        fork: Cannot allocate memory\n    \n        # 报错不一定是内存不够用，进程数或者线程数满了也会报这个错误， 可以适当增加 kernel.pid_max 的值，\n        cat /proc/sys/kernel/pid_max  # 默认3.2w\n    \n    }\n\n    sudo{\n\n        echo myPassword | sudo -S ls /tmp  # 直接输入sudo的密码非交互,从标准输入读取密码而不是终端设备\n        visudo                             # sudo命令权限添加  /etc/sudoers\n        用户  别名(可用all)=NOPASSWD:命令1,命令2\n        user  ALL=NOPASSWD:/bin/su         # 免root密码切换root身份\n        wangming linuxfan=NOPASSWD:/sbin/apache start,/sbin/apache restart\n        UserName ALL=(ALL) ALL\n        UserName ALL=(ALL) NOPASSWD: ALL\n        peterli        ALL=(ALL)       NOPASSWD:/sbin/service\n        Defaults requiretty                # sudo不允许后台运行,注释此行既允许\n        Defaults !visiblepw                # sudo不允许远程,去掉!既允许\n\n    }\n\n    grub开机启动项添加{\n\n        vim /etc/grub.conf\n        title ms-dos\n        rootnoverify (hd0,0)\n        chainloader +1\n\n    }\n\n    stty{\n\n        #stty时一个用来改变并打印终端行设置的常用命令\n\n        stty iuclc          # 在命令行下禁止输出大写\n        stty -iuclc         # 恢复输出大写\n        stty olcuc          # 在命令行下禁止输出小写\n        stty -olcuc         # 恢复输出小写\n        stty size           # 打印出终端的行数和列数\n        stty eof \"string\"   # 改变系统默认ctrl+D来表示文件的结束\n        stty -echo          # 禁止回显\n        stty echo           # 打开回显\n        stty -echo;read;stty echo;read  # 测试禁止回显\n        stty igncr          # 忽略回车符\n        stty -igncr         # 恢复回车符\n        stty erase '#'      # 将#设置为退格字符\n        stty erase '^?'     # 恢复退格字符\n\n        定时输入{\n\n            timeout_read(){\n                timeout=$1\n                old_stty_settings=`stty -g`　　# save current settings\n                stty -icanon min 0 time 100　　# set 10seconds,not 100seconds\n                eval read varname　　          # =read $varname\n                stty \"$old_stty_settings\"　　  # recover settings\n            }\n\n            read -t 10 varname    # 更简单的方法就是利用read命令的-t选项\n\n        }\n\n        检测用户按键{\n\n            #!/bin/bash\n            old_tty_settings=$(stty -g)   # 保存老的设置(为什么?).\n            stty -icanon\n            Keypress=$(head -c1)          # 或者使用$(dd bs=1 count=1 2> /dev/null)\n            echo \"Key pressed was \\\"\"$Keypress\"\\\".\"\n            stty \"$old_tty_settings\"      # 恢复老的设置.\n            exit 0\n\n        }\n\n    }\n\n    iptables{\n\n        内建三个表：nat mangle 和 filter\n        filter预设规则表，有INPUT、FORWARD 和 OUTPUT 三个规则链\n        vi /etc/sysconfig/iptables    # 配置文件\n        INPUT    # 进入\n        FORWARD  # 转发\n        OUTPUT   # 出去\n        ACCEPT   # 将封包放行\n        REJECT   # 拦阻该封包\n        DROP     # 丢弃封包不予处理\n        -A       # 在所选择的链(INPUT等)末添加一条或更多规则\n        -D       # 删除一条\n        -E       # 修改\n        -p       # tcp、udp、icmp    0相当于所有all    !取反\n        -P       # 设置缺省策略(与所有链都不匹配强制使用此策略)\n        -s       # IP/掩码    (IP/24)    主机名、网络名和清楚的IP地址 !取反\n        -j       # 目标跳转，立即决定包的命运的专用内建目标\n        -i       # 进入的（网络）接口 [名称] eth0\n        -o       # 输出接口[名称]\n        -m       # 模块\n        --sport  # 源端口\n        --dport  # 目标端口\n\n        iptables -F                        # 将防火墙中的规则条目清除掉  # 注意: iptables -P INPUT ACCEPT\n        iptables-restore < 规则文件        # 导入防火墙规则\n        /etc/init.d/iptables save          # 保存防火墙设置\n        /etc/init.d/iptables restart       # 重启防火墙服务\n        iptables -L -n                     # 查看规则\n        iptables -t nat -nL                # 查看转发\n\n        iptables实例{\n\n            iptables -L INPUT                   # 列出某规则链中的所有规则\n            iptables -X allowed                 # 删除某个规则链 ,不加规则链，清除所有非内建的\n            iptables -Z INPUT                   # 将封包计数器归零\n            iptables -N allowed                 # 定义新的规则链\n            iptables -P INPUT DROP              # 定义过滤政策\n            iptables -A INPUT -s 192.168.1.1    # 比对封包的来源IP   # ! 192.168.0.0/24  ! 反向对比\n            iptables -A INPUT -d 192.168.1.1    # 比对封包的目的地IP\n            iptables -A INPUT -i eth0           # 比对封包是从哪片网卡进入\n            iptables -A FORWARD -o eth0         # 比对封包要从哪片网卡送出 eth+表示所有的网卡\n            iptables -A INPUT -p tcp            # -p ! tcp 排除tcp以外的udp、icmp。-p all所有类型\n            iptables -D INPUT 8                 # 从某个规则链中删除一条规则\n            iptables -D INPUT --dport 80 -j DROP         # 从某个规则链中删除一条规则\n            iptables -R INPUT 8 -s 192.168.0.1 -j DROP   # 取代现行规则\n            iptables -I INPUT 8 --dport 80 -j ACCEPT     # 插入一条规则\n            iptables -A INPUT -i eth0 -j DROP            # 其它情况不允许\n            iptables -A INPUT -p tcp -s IP -j DROP       # 禁止指定IP访问\n            iptables -A INPUT -p tcp -s IP --dport port -j DROP               # 禁止指定IP访问端口\n            iptables -A INPUT -s IP -p tcp --dport port -j ACCEPT             # 允许在IP访问指定端口\n            iptables -A INPUT -p tcp --dport 22 -j DROP                       # 禁止使用某端口\n            iptables -A INPUT -i eth0 -p icmp -m icmp --icmp-type 8 -j DROP   # 禁止icmp端口\n            iptables -A INPUT -i eth0 -p icmp -j DROP                         # 禁止icmp端口\n            iptables -t filter -A INPUT -i eth0 -p tcp --syn -j DROP                  # 阻止所有没有经过你系统授权的TCP连接\n            iptables -A INPUT -f -m limit --limit 100/s --limit-burst 100 -j ACCEPT   # IP包流量限制\n            iptables -A INPUT -i eth0 -s 192.168.62.1/32 -p icmp -m icmp --icmp-type 8 -j ACCEPT  # 除192.168.62.1外，禁止其它人ping我的主机\n            iptables -A INPUT -p tcp -m tcp --dport 80 -m state --state NEW -m recent --update --seconds 5 --hitcount 20 --rttl --name WEB --rsource -j DROP  # 可防御cc攻击(未测试)\n\n        }\n\n        iptables配置实例文件{\n\n            # Generated by iptables-save v1.2.11 on Fri Feb  9 12:10:37 2007\n            *filter\n            :INPUT ACCEPT [637:58967]\n            :FORWARD DROP [0:0]\n            :OUTPUT ACCEPT [5091:1301533]\n            # 允许的IP或IP段访问 建议多个\n            -A INPUT -s 127.0.0.1 -p tcp -j ACCEPT\n            -A INPUT -s 192.168.0.0/255.255.0.0 -p tcp -j ACCEPT\n            # 开放对外开放端口\n            -A INPUT -p tcp --dport 80 -j ACCEPT\n            # 指定某端口针对IP开放\n            -A INPUT -s 192.168.10.37 -p tcp --dport 22 -j ACCEPT\n            # 拒绝所有协议(INPUT允许)\n            -A INPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,PSH,URG RST -j DROP\n            # 允许已建立的或相关连的通行\n            -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\n            # 拒绝ping\n            -A INPUT -p tcp -m tcp -j REJECT --reject-with icmp-port-unreachable\n            COMMIT\n            # Completed on Fri Feb  9 12:10:37 2007\n\n        }\n\n        iptables配置实例{\n\n            # 允许某段IP访问任何端口\n            iptables -A INPUT -s 192.168.0.3/24 -p tcp -j ACCEPT\n            # 设定预设规则 (拒绝所有的数据包，再允许需要的,如只做WEB服务器.还是推荐三个链都是DROP)\n            iptables -P INPUT DROP\n            iptables -P FORWARD DROP\n            iptables -P OUTPUT ACCEPT\n            # 注意: 直接设置这三条会掉线\n            # 开启22端口\n            iptables -A INPUT -p tcp --dport 22 -j ACCEPT\n            # 如果OUTPUT 设置成DROP的，要写上下面一条\n            iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT\n            # 注:不写导致无法SSH.其他的端口一样,OUTPUT设置成DROP的话,也要添加一条链\n            # 如果开启了web服务器,OUTPUT设置成DROP的话,同样也要添加一条链\n            iptables -A OUTPUT -p tcp --sport 80 -j ACCEPT\n            # 做WEB服务器,开启80端口 ,其他同理\n            iptables -A INPUT -p tcp --dport 80 -j ACCEPT\n            # 做邮件服务器,开启25,110端口\n            iptables -A INPUT -p tcp --dport 110 -j ACCEPT\n            iptables -A INPUT -p tcp --dport 25 -j ACCEPT\n            # 允许icmp包通过,允许ping\n            iptables -A OUTPUT -p icmp -j ACCEPT (OUTPUT设置成DROP的话)\n            iptables -A INPUT -p icmp -j ACCEPT  (INPUT设置成DROP的话)\n            # 允许loopback!(不然会导致DNS无法正常关闭等问题)\n            IPTABLES -A INPUT -i lo -p all -j ACCEPT (如果是INPUT DROP)\n            IPTABLES -A OUTPUT -o lo -p all -j ACCEPT(如果是OUTPUT DROP)\n\n        }\n\n        centos6的iptables基本配置{\n            *filter\n            :INPUT ACCEPT [0:0]\n            :FORWARD ACCEPT [0:0]\n            :OUTPUT ACCEPT [0:0]\n            -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT\n            -A INPUT -p icmp -j ACCEPT\n            -A INPUT -i lo -j ACCEPT\n            -A INPUT -s 222.186.135.61 -p tcp -j ACCEPT\n            -A INPUT -p tcp  --dport 80 -j ACCEPT\n            -A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT\n            -A INPUT -j REJECT --reject-with icmp-host-prohibited\n            -A INPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,PSH,URG RST -j DROP\n            -A FORWARD -j REJECT --reject-with icmp-host-prohibited\n            COMMIT\n        }\n\n        添加网段转发{\n\n            # 例如通过vpn上网\n            echo 1 > /proc/sys/net/ipv4/ip_forward       # 在内核里打开ip转发功能\n            iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -j MASQUERADE  # 添加网段转发\n            iptables -t nat -A POSTROUTING -s 10.0.0.0/255.0.0.0 -o eth0 -j SNAT --to 192.168.10.158  # 原IP网段经过哪个网卡IP出去\n            iptables -t nat -nL                # 查看转发\n\n        }\n\n        端口映射{\n\n            # 内网通过有外网IP的机器映射端口\n            # 内网主机添加路由\n            route add -net 10.10.20.0 netmask 255.255.255.0 gw 10.10.20.111     # 内网需要添加默认网关，并且网关开启转发\n            # 网关主机\n            echo 1 > /proc/sys/net/ipv4/ip_forward       # 在内核里打开ip转发功能\n            iptables -t nat -A PREROUTING -d 外网IP  -p tcp --dport 9999 -j DNAT --to 10.10.20.55:22    # 进入\n            iptables -t nat -A POSTROUTING -s 10.10.20.0/24 -j SNAT --to 外网IP                         # 转发回去\n            iptables -t nat -nL                # 查看转发\n\n        }\n\n    }\n\n}\n\n4 服务{\n\n    /etc/init.d/sendmail start                   # 启动服务\n    /etc/init.d/sendmail stop                    # 关闭服务\n    /etc/init.d/sendmail status                  # 查看服务当前状态\n    /date/mysql/bin/mysqld_safe --user=mysql &   # 启动mysql后台运行\n    /bin/systemctl restart  mysqld.service       # centos7启动服务\n    vi /etc/rc.d/rc.local                        # 开机启动执行  可用于开机启动脚本\n    /etc/rc.d/rc3.d/S55sshd                      # 开机启动和关机关闭服务连接    # S开机start  K关机stop  55级别 后跟服务名\n    ln -s -f /date/httpd/bin/apachectl /etc/rc.d/rc3.d/S15httpd   # 将启动程序脚本连接到开机启动目录\n    ipvsadm -ln                                  # lvs查看后端负载机并发\n    ipvsadm -C                                   # lvs清除规则\n    xm list                                      # 查看xen虚拟主机列表\n    virsh                                        # 虚拟化(xen\\kvm)管理工具  yum groupinstall Virtual*\n    ./bin/httpd -M                               # 查看httpd加载模块\n    httpd -t -D DUMP_MODULES                     # rpm包httpd查看加载模块\n    echo 内容| /bin/mail -s \"标题\" 收件箱 -f 发件人       # 发送邮件\n    \"`echo \"内容\"|iconv -f utf8 -t gbk`\" | /bin/mail -s \"`echo \"标题\"|iconv -f utf8 -t gbk`\" 收件箱     # 解决邮件乱码\n    /usr/local/nagios/bin/nagios -v /usr/local/nagios/etc/nagios.cfg   # 检测nagios配置文件\n\n    chkconfig{\n\n        chkconfig service on|off|set             # 设置非独立服务启状态\n        chkconfig --level 35   httpd   off       # 让服务不自动启动\n        chkconfig --level 35   httpd   on        # 让服务自动启动 35指的是运行级别\n        chkconfig --list                         # 查看所有服务的启动状态\n        chkconfig --list |grep httpd             # 查看某个服务的启动状态\n        chkconfig –-list [service]               # 查看服务的状态\n\n    }\n\n    systemctl{\n\n        systemctl is-active *.service      # 查看服务是否运行\n        systemctl is-enabled *.service     # 查询服务是否开机启动\n        systemctl mask *.service           # 注销指定服务\n        systemctl unmask cups.service      # 取消注销cups服务\n        systemctl enable *.service         # 开机运行服务\n        systemctl disable *.service        # 取消开机运行\n        systemctl start *.service          # 启动服务\n        systemctl stop *.service           # 停止服务\n        systemctl restart *.service        # 重启服务\n        systemctl reload *.service         # 重新加载服务配置文件\n        systemctl status *.service         # 查询服务运行状态\n        systemctl --failed                 # 显示启动失败的服务\n        systemctl poweroff                 # 系统关机\n        systemctl reboot                   # 重新启动\n        systemctl rescue                   # 强制进入救援模式\n        systemctl emergency                # 强制进入紧急救援模式\n        systemctl list-dependencies        # 查看当前运行级别target(mult-user)启动了哪些服务\n        systemctl list-unit-files          # 查看开机启动的状态\n        journalctl -r -u elasticsearch.service  # 查看日志 r倒序 u服务名\n        /etc/systemd/system/falcon-agent.service\n            [Unit]\n            Description=This is zuiyou monitor agent\n            After=network.target remote-fs.target nss-lookup.target\n\n            [Service]\n            User= root\n            Type=simple\n            PIDFile=/opt/falcon-agent/var/app.pid\n            ExecStartPre=/usr/bin/rm -f /opt/falcon-agent/var/app.pid\n            ExecStart=/opt/falcon-agent/control start\n            ExecReload=/bin/kill -s HUP $MAINPID\n            KillMode=process\n            KillSignal=SIGQUIT\n            TimeoutStopSec=5\n            PrivateTmp=true\n            Restart=always\n            LimitNOFILE=infinity\n\n            [Install]\n            WantedBy=multi-user.target\n\n        systemctl daemon-reload           # 加载配置\n\n    }\n\n\n    nginx{\n\n        yum install -y make gcc  openssl-devel pcre-devel  bzip2-devel libxml2 libxml2-devel curl-devel libmcrypt-devel libjpeg libjpeg-devel libpng libpng-devel openssl\n\n        groupadd nginx\n        useradd nginx -g nginx -M -s /sbin/nologin\n\n        mkdir -p /opt/nginx-tmp\n\n        wget http://labs.frickle.com/files/ngx_cache_purge-1.6.tar.gz\n        tar fxz ngx_cache_purge-1.6.tar.gz\n        # ngx_cache_purge 清除指定url缓存\n        # 假设一个URL为 http://192.168.12.133/test.txt\n        # 通过访问      http://192.168.12.133/purge/test.txt  就可以清除该URL的缓存。\n\n        tar zxvpf nginx-1.4.4.tar.gz\n        cd nginx-1.4.4\n\n        # ./configure --help\n        # --with                 # 默认不加载 需指定编译此参数才使用\n        # --without              # 默认加载，可用此参数禁用\n        # --add-module=path      # 添加模块的路径\n        # --add-module=/opt/ngx_module_upstream_check \\         # nginx 代理状态页面\n        # ngx_module_upstream_check  编译前需要打对应版本补丁 patch -p1 < /opt/nginx_upstream_check_module/check_1.2.6+.patch\n        # --add-module=/opt/ngx_module_memc \\                   # 将请求页面数据存放在 memcached中\n        # --add-module=/opt/ngx_module_lua \\                    # 支持lua脚本 yum install lua-devel lua\n\n        ./configure \\\n        --user=nginx \\\n        --group=nginx \\\n        --prefix=/usr/local/nginx \\\n        --with-http_ssl_module \\\n        --with-http_realip_module \\\n        --with-http_gzip_static_module \\\n        --with-http_stub_status_module \\\n        --add-module=/opt/ngx_cache_purge-1.6 \\\n        --http-client-body-temp-path=/opt/nginx-tmp/client \\\n        --http-proxy-temp-path=/opt/nginx-tmp/proxy \\\n        --http-fastcgi-temp-path=/opt/nginx-tmp/fastcgi \\\n        --http-uwsgi-temp-path=/opt/nginx-tmp/uwsgi \\\n        --http-scgi-temp-path=/opt/nginx-tmp/scgi\n\n        make && make install\n\n        /usr/local/nginx/sbin/nginx –t             # 检查Nginx配置文件 但并不执行\n        /usr/local/nginx/sbin/nginx -t -c /opt/nginx/conf/nginx.conf  # 检查Nginx配置文件\n        /usr/local/nginx/sbin/nginx                # 启动nginx\n        /usr/local/nginx/sbin/nginx -s reload      # 重载配置\n        /usr/local/nginx/sbin/nginx -s stop        # 关闭nginx服务\n\n        # location详解\n\t\t## 匹配顺序：先普通location后正则location\n\t\t- ~ 或 ~* 表正则location       # ~ 区分大小写, ~*不区分大小写\n\t\t- 两种情况下只匹配普通location：当^~或严格匹配(如=a)\n\t\t\n\t\t## 普通location\n\t\t- 越具体越匹配\n\t\t- 匹配最大前缀后还得正则匹配\n\t\t## 正则匹配 \n\t\t- 一匹配到就不再匹配(按顺序)\n    }\n\t\n\t\n    elasticsearch{\n\n        vim /etc/sysctl.conf\n        vm.max_map_count = 262144\n\n        vim /etc/security/limits.conf\n        * soft memlock unlimited\n        * hard memlock unlimited\n        sysctl -p\n\n        curl 'localhost:9200/_cat/health?v'                    # 健康检查\n        curl 'localhost:9200/_cat/nodes?v'                     # 获取集群的节点列表\n        curl 'localhost:9200/_cat/indices?v'                   # 列出所有索引\n        curl 127.0.0.1:9200/indexname -XDELETE                 # 删除索引\n        curl -XGET http://localhost:9200/_cat/shards           # 查看分片\n        curl '127.0.0.1:9200/_cat/indices'                     # 查分片同步  unassigned_shards  # 没同步完成\n\n    }\n\n\n    mysql常用命令{\n\n        # mysql 可视化工具 MySQL Workbench\n\n        mysqlcheck -uroot -p -S mysql.sock --optimize --databases account       # 检查、修复、优化MyISAM表\n        mysqlbinlog slave-relay-bin.000001              # 查看二进制日志\n        mysqladmin -h myhost -u root -p create dbname   # 创建数据库\n\n        flush privileges;             # 刷新\n        show databases;               # 显示所有数据库\n        use dbname;                   # 打开数据库\n        show tables;                  # 显示选中数据库中所有的表\n        desc tables;                  # 查看表结构\n        drop database name;           # 删除数据库\n        drop table name;              # 删除表\n        create database name;         # 创建数据库\n        select column from table;     # 查询\n        show processlist;             # 查看mysql进程\n        show full processlist;        # 显示进程全的语句\n        select user();                # 查看所有用户\n        show slave status\\G;          # 查看主从状态\n        show variables;               # 查看所有参数变量\n        show status;                  # 运行状态\n        show table status             # 查看表的引擎状态\n        show grants for user@'%'                                    # 查看用户权限\n        drop table if exists user                                   # 表存在就删除\n        create table if not exists user                             # 表不存在就创建\n        select host,user,password from user;                        # 查询用户权限 先use mysql\n        create table ka(ka_id varchar(6),qianshu int);              # 创建表\n        show variables like 'character_set_%';                      # 查看系统的字符集和排序方式的设定\n        show variables like '%timeout%';                            # 查看超时相关参数\n        delete from user where user='';                             # 删除空用户\n        delete from user where user='sss' and host='localhost' ;    # 删除用户\n        drop user 'sss'@'localhost';                                # 使用此方法删除用户更为靠谱\n        ALTER TABLE mytable ENGINE = MyISAM ;                       # 改变现有的表使用的存储引擎\n        SHOW TABLE STATUS from  dbname  where Name='tablename';     # 查询表引擎\n        mysql -uroot -p -A -ss -h10.10.10.5 -e \"show databases;\"    # shell中获取数据不带表格 -ss参数\n        CREATE TABLE innodb (id int, title char(20)) ENGINE = INNODB                     # 创建表指定存储引擎的类型(MyISAM或INNODB)\n        grant replication slave on *.* to 'user'@'%' identified by 'pwd';                # 创建主从复制用户\n        ALTER TABLE player ADD INDEX weekcredit_faction_index (weekcredit, faction);     # 添加索引\n        alter table name add column accountid(column)  int(11) NOT NULL(column);         # 插入字段\n        update host set monitor_state='Y',hostname='xuesong' where ip='192.168.1.1';     # 更新数据\n        select * from information_schema.processlist where command!='sleep';             # 查看当前进程\n        select * from atable where name='on' AND t<15 AND host LIKE '10%' limit 1,10;    # 多条件查询\n        show create database ops_deploy;                                                 # 查看数据库编码\n        show create table updatelog;                                                     # 查看数据库表编码\n        alter database ops_deploy CHARACTER SET utf8;                                    # 修改数据库编码\n        alter table `updatelog` default character set utf8;                              # 修改表编码\n        alter table `updatelog` convert to character set utf8;                           # 修改一张表的所有字段的编码格式\n\n        自增表{\n\n            create table xuesong  (id INTEGER  PRIMARY KEY AUTO_INCREMENT, name CHAR(30) NOT NULL, age integer , sex CHAR(15) );  # 创建自增表\n            insert into xuesong(name,age,sex) values(%s,%s,%s)  # 自增插入数据\n\n        }\n\n        登录mysql的命令{\n\n            # 格式： mysql -h 主机地址 -u 用户名 -p 用户密码\n            mysql -h110.110.110.110 -P3306 -uroot -p\n            mysql -uroot -p -S /data1/mysql5/data/mysql.sock -A  --default-character-set=GBK\n\n        }\n\n        shell执行mysql命令{\n\n            mysql -u root -p'123' xuesong < file.sql   # 针对指定库执行sql文件中的语句,好处不需要转义特殊符号,一条语句可以换行.不指定库执行时语句中需要先use\n            mysql -u$username -p$passwd -h$dbhost -P$dbport -A -e \"\n            use $dbname;\n            delete from data where date=('$date1');\n            \"    # 执行多条mysql命令\n            mysql -uroot -p -S mysql.sock -e \"use db;alter table gift add column accountid  int(11) NOT NULL;flush privileges;\"  2>&1 |grep -v Warning    # 不登陆mysql插入字段\n\n        }\n\n\n        mysql字符集相关{\n\n            show variables like '%character%';      # 查看数据库中设置字符集的参数\n            # character_set_client、character_set_connection 以及 character_set_results 这几个参数都是客户端的设置\n            # character_set_system、character_set_server 以及 character_set_database 是指服务器端的设置。\n            # 而对于这三个服务器端的参数来说的优先级是:\n            # 列级字符集 > 表级字符集 > character_set_database > character_set_server > character_set_system\n\n            show global variables like '%char%';                                 #查看RDS实例字符集相关参数设置\n            show global variables like 'coll%';                                  #查看当前会话字符序相关参数设置\n            show character set;                                                  #查看实例支持的字符集\n            show collation;                                                      #查看实例支持的字符序\n            show create table table_name \\G                                      #查看表字符集设置\n            show create database database_name \\G                                #查看数据库字符集设置\n            show create procedure procedure_name \\G                              #查看存储过程字符集设置\n            show procedure status \\G                                             #查看存储过程字符集设置\n            alter database db_name default charset utf8;                         #修改数据库的字符集 \n            create database db_name character set utf8;                          #创建数据库时指定字符集\n            alter table tab_name default charset utf8 collate utf8_general_ci;   #修改表字符集和字符序\n\n            # 下面三条sql 分别将库 dbsdq , 表 tt2 , 表 tt2 中的 c2 列修改为utf8mb4 字符集\n            alter database dbsdq character set utf8mb4 collate utf8mb4_unicode_ci;\n            use dbsdq;\n            alter table tt2 character set utf8mb4 collate utf8mb4_unicode_ci;\n            alter table tt2 modify c2  varchar(10) character set utf8mb4;\n            # 修改列时,当前列中的所有行都会立即转化为新的字符集;\n            # alter table 会对表加元数据锁\n\n        }\n\n        备份数据库{\n\n            mysqldump -h host -u root -p --default-character-set=utf8 dbname >dbname_backup.sql               # 不包括库名，还原需先创建库，在use\n            mysqldump -h host -u root -p --database --default-character-set=utf8 dbname >dbname_backup.sql    # 包括库名，还原不需要创建库\n            /bin/mysqlhotcopy -u root -p    # mysqlhotcopy只能备份MyISAM引擎\n            mysqldump -u root -p -S mysql.sock --default-character-set=utf8 dbname table1 table2  > /data/db.sql    # 备份表\n            mysqldump -uroot -p123  -d database > database.sql    # 备份数据库结构\n\n            # 最小权限备份\n            grant select on db_name.* to dbbackup@\"localhost\" Identified by \"passwd\";\n            # --single-transaction  InnoDB有时间戳 只备份开始那一刻的数据,备份过程中的数据不会备份\n            mysqldump -hlocalhost -P 3306 -u dbbackup --single-transaction  -p\"passwd\" --database dbname >dbname.sql\n\n            # xtrabackup备份需单独安装软件 优点: 速度快,压力小,可直接恢复主从复制\n            innobackupex --user=root --password=\"\" --defaults-file=/data/mysql5/data/my_3306.cnf --socket=/data/mysql5/data/mysql.sock --slave-info --stream=tar --tmpdir=/data/dbbackup/temp /data/dbbackup/ 2>/data/dbbackup/dbbackup.log | gzip 1>/data/dbbackup/db50.tar.gz\n\n        }\n\n        还原数据库{\n\n            mysql -h host -u root -p dbname < dbname_backup.sql\n            source 路径.sql   # 登陆mysql后还原sql文件\n\n        }\n\n        赋权限{\n\n            # 指定IP: $IP  本机: localhost   所有IP地址: %   # 通常指定多条\n            grant all on zabbix.* to user@\"$IP\";             # 对现有账号赋予权限\n            grant select on database.* to user@\"%\" Identified by \"passwd\";     # 赋予查询权限(没有用户，直接创建)\n            grant all privileges on database.* to user@\"$IP\" identified by 'passwd';         # 赋予指定IP指定用户所有权限(不允许对当前库给其他用户赋权限)\n            grant all privileges on database.* to user@\"localhost\" identified by 'passwd' with grant option;   # 赋予本机指定用户所有权限(允许对当前库给其他用户赋权限)\n            grant select, insert, update, delete on database.* to user@'ip'identified by \"passwd\";   # 开放管理操作指令\n            revoke all on *.* from user@localhost;     # 回收权限\n            GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER, EXECUTE, CREATE ROUTINE, ALTER ROUTINE ON `storemisc_dev`.* TO 'user'@'192.168.%'\n\n        }\n\n        更改密码{\n\n            update user set password=password('passwd') where user='root'\n            mysqladmin -u root password 'xuesong'\n\n        }\n\n        mysql忘记密码后重置{\n\n            cd /data/mysql5\n            /data/mysql5/bin/mysqld_safe --user=mysql --skip-grant-tables --skip-networking &\n            use mysql;\n            update user set password=password('123123') where user='root';\n\n        }\n\n        mysql主从复制失败恢复{\n\n            slave stop;\n            reset slave;\n            change master to master_host='10.10.10.110',master_port=3306,master_user='repl',master_password='repl',master_log_file='master-bin.000010',master_log_pos=107,master_connect_retry=60;\n            slave start;\n\n        }\n\n        sql语句使用变量{\n\n            use xuesong;\n            set @a=concat('my',weekday(curdate()));    # 组合时间变量\n            set @sql := concat('CREATE TABLE IF NOT EXISTS ',@a,'( id INT(11) NOT NULL )');   # 组合sql语句\n            select @sql;                    # 查看语句\n            prepare create_tb from @sql;    # 准备\n            execute create_tb;              # 执行\n\n        }\n\n        检测mysql主从复制延迟{\n\n            1、在从库定时执行更新主库中的一个timeout数值\n            2、同时取出从库中的timeout值对比判断从库与主库的延迟\n\n        }\n\n        死锁{\n\n            show OPEN TABLES where In_use > 0;                  # 查看当前锁信息\n            show variables like 'innodb_print_all_deadlocks';   # 查看当前死锁参数\n            set global innodb_print_all_deadlocks = 1;          # 设置死锁信息保存到错误日志\n            innodb_print_all_deadlocks = 1                      # conf配置\n\n        }\n\n        mysql慢查询{\n\n            select * from information_schema.processlist where command in ('Query') and time >5\\G      # 查询操作大于5S的进程\n\n            开启慢查询日志{\n\n                # 配置文件 /etc/my.conf\n                [mysqld]\n                log-slow-queries=/var/lib/mysql/slowquery.log         # 指定日志文件存放位置，可以为空，系统会给一个缺省的文件host_name-slow.log\n                long_query_time=5                                     # 记录超过的时间，默认为10s 建议0.5S\n                log-queries-not-using-indexes                         # log下来没有使用索引的query,可以根据情况决定是否开启  可不加\n                log-long-format                                       # 如果设置了，所有没有使用索引的查询也将被记录    可不加\n                # 直接修改生效\n                show variables like \"%slow%\";                         # 查看慢查询状态\n                set global slow_query_log='ON';                       # 开启慢查询日志 变量可能不同，看上句查询出来的变量\n\n            }\n\n            mysqldumpslow慢查询日志查看{\n\n                -s  # 是order的顺序，包括看了代码，主要有 c,t,l,r和ac,at,al,ar，分别是按照query次数，时间，lock的时间和返回的记录数来排序，前面加了a的时倒序\n                -t  # 是top n的意思，即为返回前面多少条的数据\n                -g  # 后边可以写一个正则匹配模式，大小写不敏感的\n\n                mysqldumpslow -s c -t 20 host-slow.log                # 访问次数最多的20个sql语句\n                mysqldumpslow -s r -t 20 host-slow.log                # 返回记录集最多的20个sql\n                mysqldumpslow -t 10 -s t -g \"left join\" host-slow.log # 按照时间返回前10条里面含有左连接的sql语句\n\n                show global status like '%slow%';                     # 查看现在这个session有多少个慢查询\n                show variables like '%slow%';                         # 查看慢查询日志是否开启，如果slow_query_log和log_slow_queries显示为on，说明服务器的慢查询日志已经开启\n                show variables like '%long%';                         # 查看超时阀值\n                desc select * from wei where text='xishizhaohua'\\G;   # 扫描整张表 tepe:ALL  没有使用索引 key:NULL\n                create index text_index on wei(text);                 # 创建索引\n\n            }\n\n            Percona Toolkit 慢日志分析工具\n\n        }\n\n        mysql操作次数查询{\n\n            select * from information_schema.global_status;\n\n            com_select\n            com_delete\n            com_insert\n            com_update\n\n        }\n\n    }\n\n    mongodb{\n\n        # mongo可视管理工具 studio 3t  \n\n        一、启动{\n\n            # 不启动认证\n            ./mongod --port 27017 --fork --logpath=/opt/mongodb/mongodb.log --logappend --dbpath=/opt/mongodb/data/\n            # 启动认证\n            ./mongod --port 27017 --fork --logpath=/opt/mongodb/mongodb.log --logappend --dbpath=/opt/mongodb/data/ --auth\n\n            # 配置文件方式启动\n            cat /opt/mongodb/mongodb.conf\n              port=27017                       # 端口号\n              fork=true                        # 以守护进程的方式运行，创建服务器进程\n              auth=true                        # 开启用户认证\n              logappend=true                   # 日志采用追加方式\n              logpath=/opt/mongodb/mongodb.log # 日志输出文件路径\n              dbpath=/opt/mongodb/data/        # 数据库路径\n              shardsvr=true                    # 设置是否分片\n              maxConns=600                     # 数据库的最大连接数\n            ./mongod -f /opt/mongodb/mongodb.conf\n\n            # 其他参数\n            bind_ip         # 绑定IP  使用mongo登录需要指定对应IP\n            journal         # 开启日志功能,降低单机故障的恢复时间,取代dur参数\n            syncdelay       # 系统同步刷新磁盘的时间,默认60秒\n            directoryperdb  # 每个db单独存放目录,建议设置.与mysql独立表空间类似\n            repairpath      # 执行repair时的临时目录.如果没开启journal,出现异常重启,必须执行repair操作\n            # mongodb没有参数设置内存大小.使用os mmap机制缓存数据文件,在数据量不超过内存的情况下,效率非常高.数据量超过系统可用内存会影响写入性能\n\n        }\n\n        二、关闭{\n\n            # 方法一:登录mongodb\n            ./mongo\n            use admin\n            db.shutdownServer()\n\n            # 方法:kill传递信号  两种皆可\n            kill -2 pid\n            kill -15 pid\n\n        }\n\n        三、开启认证与用户管理{\n\n            ./mongo                      # 先登录\n            use admin                    # 切换到admin库\n            db.addUser(\"root\",\"123456\")                     # 创建用户\n            db.addUser('zhansan','pass',true)               # 如果用户的readOnly为true那么这个用户只能读取数据，添加一个readOnly用户zhansan\n            ./mongo 127.0.0.1:27017/mydb -uroot -p123456    # 再次登录,只能针对用户所在库登录\n            #虽然是超级管理员，但是admin不能直接登录其他数据库，否则报错\n            #Fri Nov 22 15:03:21.886 Error: 18 { code: 18, ok: 0.0, errmsg: \"auth fails\" } at src/mongo/shell/db.js:228\n            show collections                                # 查看链接状态 再次登录使用如下命令,显示错误未经授权\n            db.system.users.find();                         # 查看创建用户信息\n            db.system.users.remove({user:\"zhansan\"})        # 删除用户\n\n            #恢复密码只需要重启mongodb 不加--auth参数\n\n        }\n\n        四、登录{\n\n            192.168.1.5:28017      # http登录后可查看状态\n            mongo                  # 默认登录后打开 test 库\n            mongo 192.168.1.5:27017/databaseName      # 直接连接某个库 不存在则创建  启动认证需要指定对应库才可登录\n\n        }\n\n        五、查看状态{\n\n            #登录后执行命令查看状态\n            db.runCommand({\"serverStatus\":1})\n                globalLock         # 表示全局写入锁占用了服务器多少时间(微秒)\n                mem                # 包含服务器内存映射了多少数据,服务器进程的虚拟内存和常驻内存的占用情况(MB)\n                indexCounters      # 表示B树在磁盘检索(misses)和内存检索(hits)的次数.如果这两个比值开始上升,就要考虑添加内存了\n                backgroudFlushing  # 表示后台做了多少次fsync以及用了多少时间\n                opcounters         # 包含每种主要擦撞的次数\n                asserts            # 统计了断言的次数\n\n            #状态信息从服务器启动开始计算,如果过大就会复位,发送复位，所有计数都会复位,asserts中的roolovers值增加\n\n            #mongodb自带的命令\n            ./mongostat\n                insert     #每秒插入量\n                query      #每秒查询量\n                update     #每秒更新量\n                delete     #每秒删除量\n                locked     #锁定量\n                qr|qw      #客户端查询排队长度(读|写)\n                ar|aw      #活跃客户端量(读|写)\n                conn       #连接数\n                time       #当前时间\n\n            mongostat -h 127.0.0.1 --port 27047 --authenticationDatabase admin -u zadmin -p Keaphh9e    # 查看mongo状态\n            mongotop  -h 127.0.0.1 --port 27047 --authenticationDatabase admin -u zadmin -p Keaphh9e    # 查看mongo集合的统计数据\n\n        }\n\n        六、常用命令{\n\n            db.listCommands()     # 当前MongoDB支持的所有命令（同样可通过运行命令db.runCommand({\"listCommands\" : `1})来查询所有命令）\n\n            db.runCommand({\"buildInfo\" : 1})                                  # 返回MongoDB服务器的版本号和服务器OS的相关信息\n            db.runCommand({\"collStats\" : tablename})                          # 返回该集合的统计信息，包括数据大小，已分配存储空间大小，索引的大小等\n            db.runCommand({\"dropDatabase\" : 1})                               # 清空当前数据库的信息，包括删除所有的集合和索引\n            db.runCommand({\"isMaster\" : 1})                                   # 检查本服务器是主服务器还是从服务器\n            db.runCommand({\"ping\" : 1})                                       # 检查服务器链接是否正常。即便服务器上锁，该命令也会立即返回\n            db.runCommand({\"repaireDatabase\" : 1})                            # 对当前数据库进行修复并压缩，如果数据库特别大，这个命令会非常耗时\n            db.runCommand({\"serverStatus\" : 1})                               # 查看这台服务器的管理统计信息\n            # 某些命令必须在admin数据库下运行，如下两个命令：\n            db.runCommand({\"renameCollection\" : 集合名, \"to\"：集合名})          # 对集合重命名，注意两个集合名都要是完整的集合命名空间，如foo.bar, 表示数据库foo下的集合bar。\n            db.runCommand({\"listDatabases\" : 1})                              # 列出服务器上所有的数据库\n\n            mongo  172.20.20.1:27072/mdb --eval \"db.tb.count();\"              # shell执行mongo语句\n            mongo --host  172.20.20.1 --port 27049\n\n            rs.config();                                                      # 查看集群配置\n            rs.status();                                                      # 查看集群节点的状态\n            db.currentOp()                                                    # 获取当前正在执行的操作,可对应命令链接到ip:port\n            db.runCommand( { logRotate : 1 } )                                # 日志轮转\n            rs.slaveOk()                                                      # 设置从库shell可读\n            rs.addArb(\"172.16.10.199:27020\");                                 # 添加仲裁节点\n            rs.add({host: \"10.2.2.2:27047\", priority: 0, hidden: true})       # 添加从节点 hidden true隐藏节点[priority必须为0]  false不隐藏\n            rs.remove(\"172.20.80.216:27047\");                                 # 删除节点\n            rs.stepDown(120)                                                  # 主库上执行切换为从,120秒后切换回主\n            show dbs                                                          # 查询db\n            use post                                                          # 选择db\n            show tables                                                       # 查看文档列表\n            db.tb.drop()                                                      # 删除集合 需要权限\n            db.tb.remove({})                                                  # 删除所有数据\n            db.tb.count()                                                     # 查询文档条数\n            db.tb.find()                                                      # 查看文档内容\n            db.tb.find({_id:37530555})                                        # 查询指定id\n            db.tb.find().sort({_id:-1}).limit(1)                              # 查询文档最后一条\n            db.tb.find({\"processed\" : {\"$ne\" : true}}).limit(1);              # 字段不为 true\n            db.tb.find({\"processed\" : {\"$eq\" : true}}).limit(1);              # 字段为 true\n            db.tb.find({\"processed\" : {\"$exists\" : false}}).limit(1);         # 字段不存在\n\n            db.tb.ensureIndex({\"status\":1}, {background:true})                # 后台加索引\n            db.tb.getIndexes()                                                # 查看索引\n            db.tb.ensureIndex({\"c_type\":1},{backgrounnd:true})                # 后台添加索引  1正向  -1反向\n            db.tb.dropIndex({\"c_type\":1});                                    # 删除索引\n\n        }\n\n        七、进程控制{\n\n            db.currentOp()                  # 查看活动进程\n            db.$cmd.sys.inprog.findOne()    # 查看活动进程 与上面一样\n                opid      # 操作进程号\n                op        # 操作类型(查询\\更新)\n                ns        # 命名空间,指操作的是哪个对象\n                query     # 如果操作类型是查询,这里将显示具体的查询内容\n                lockType  # 锁的类型,指明是读锁还是写锁\n\n            db.killOp(opid值)                         # 结束进程\n            db.$cmd.sys.killop.findOne({op:opid值})   # 结束进程\n\n        }\n\n        八、备份还原{\n            # mongodump 虽然能不停机备份,但是为了获取实时数据视图的能力,使用fsync命令能在运行时复制数据目录并且不会损坏数据\n            # fsync会强制服务器将所有缓冲区的数据写入磁盘.配合lock还阻止对数据库的进一步写入,知道释放锁为止\n            db.runCommand({\"fsync\":1,\"lock\":1})   # 执行强制更新与写入锁\n            db.$cmd.sys.unlock.findOne()          # 解锁\n            db.currentOp()                        # 查看解锁是否正常\n\n            mongoexport -d test -c t1 -o t1.dat                 # 导出JSON格式\n                -c         # 指明导出集合\n                -d         # 使用库\n            mongoexport -d test -c t1 -csv -f num -o t1.dat     # 导出csv格式\n                -csv       # 指明导出csv格式\n                -f         # 指明需要导出那些例\n\n            mongoimport -d test -c t1 -file t1.dat                           # mongoimport还原JSON格式\n            mongoimport -d test -c t1 -type csv --headerline -file t1.dat    # mongoimport还原csv格式数据\n                --headerline                # 指明不导入第一行 因为第一行是列名\n\n            mongodump -d test -o /bak/mongodump                # mongodump数据备份\n            mongorestore -d test --drop /bak/mongodump/*       # mongorestore恢复\n                --drop      # 恢复前先删除\n                --gzip      # 压缩\n\n            # 备份一个表\n            # --excludeCollection string # 排除指定的集合 要排除多个，使用多个\n            mongodump --host 127.0.0.1:27080 -d dbname  -c tablename  -o /data/reports/\n            mongodump --host 127.0.0.1:27080 -d dbname  -c tablename  -o /data/reports/reports  -u root -p tAvaa5yNUE --authenticationDatabase admin\n\n            # 恢复一个表\n            mongorestore --host 127.0.0.1:27080 -d dbname  -c tablename --drop --dir=/data/reports/tablename.bson\n\n            # 在线拷贝一个库\n            db.copyDatabase(fromdb, todb, fromhost, username, password, mechanism)\n            db.copyDatabase('mate','mate', '172.16.255.176:27047')\n\n        }\n\n        九、修复{\n\n            # 当停电或其他故障引起不正常关闭时,会造成部分数据损坏丢失\n            mongod --repair      # 修复操作:启动时候加上 --repair\n            # 修复过程:将所有文档导出,然后马上导入,忽略无效文档.完成后重建索引。时间较长,会丢弃损坏文档\n            # 修复数据还能起到压缩数据库的作用\n            db.repairDatabase()    # 运行中的mongodb可使用 repairDatabase 修复当前使用的数据库\n            {\"repairDatabase\":1}   # 通过驱动程序\n\n        }\n\n        十、python使用mongodb{\n\n            原文: http://blog.nosqlfan.com/html/2989.html\n\n            easy_install pymongo      # python2.7+\n            import pymongo\n            connection=pymongo.Connection('localhost',27017)   # 创建连接\n            db = connection.test_database                      # 切换数据库\n            collection = db.test_collection                    # 获取collection\n            # db和collection都是延时创建的，在添加Document时才真正创建\n\n            文档添加, _id自动创建\n                import datetime\n                post = {\"author\": \"Mike\",\n                    \"text\": \"My first blog post!\",\n                    \"tags\": [\"mongodb\", \"python\", \"pymongo\"],\n                    \"date\": datetime.datetime.utcnow()}\n                posts = db.posts\n                posts.insert(post)\n                ObjectId('...')\n\n            批量插入\n                new_posts = [{\"author\": \"Mike\",\n                    \"text\": \"Another post!\",\n                    \"tags\": [\"bulk\", \"insert\"],\n                    \"date\": datetime.datetime(2009, 11, 12, 11, 14)},\n                    {\"author\": \"Eliot\",\n                    \"title\": \"MongoDB is fun\",\n                    \"text\": \"and pretty easy too!\",\n                    \"date\": datetime.datetime(2009, 11, 10, 10, 45)}]\n                posts.insert(new_posts)\n                [ObjectId('...'), ObjectId('...')]\n\n            获取所有collection\n                db.collection_names()    # 相当于SQL的show tables\n\n            获取单个文档\n                posts.find_one()\n\n            查询多个文档\n                for post in posts.find():\n                    post\n\n            加条件的查询\n                posts.find_one({\"author\": \"Mike\"})\n\n            高级查询\n                posts.find({\"date\": {\"$lt\": \"d\"}}).sort(\"author\")\n\n            统计数量\n                posts.count()\n\n            加索引\n                from pymongo import ASCENDING, DESCENDING\n                posts.create_index([(\"date\", DESCENDING), (\"author\", ASCENDING)])\n\n            查看查询语句的性能\n                posts.find({\"date\": {\"$lt\": \"d\"}}).sort(\"author\").explain()[\"cursor\"]\n                posts.find({\"date\": {\"$lt\": \"d\"}}).sort(\"author\").explain()[\"nscanned\"]\n\n        }\n\n    }\n\n    JDK安装{\n\n        vim /etc/profile.d/jdk.sh\n        export JAVA_HOME=/usr/local/jdk1.8.0_151\n        export PATH=$JAVA_HOME/bin:$PATH\n\n        . /etc/profile         # 加载新的环境变量\n        jps -ml                # 查看java进程\n        jstat -gc 18381 1s 30  # 查看java进程gc情况\n    }\n\n    redis动态加内存{\n\n        ./redis-cli -h 10.10.10.11 -p 6401\n        save                                # 保存当前快照\n        config get *                        # 列出所有当前配置\n        config get maxmemory                # 查看指定配置\n        config set maxmemory  15360000000   # 动态修改最大内存配置参数\n\t\tselect 5                            # 选择数据库\n\t\tCONFIG SET requirepass \"no\"         # 设置密码\n\t\tauth \"no\"                           # 认证\n\t\tset db redis                        # 添加key\n\t\tget db                              # 获取key的value\n\t\t------------------------------\n\t\tredis键空间通知\n\t\t1 /etc/redis.conf\n\t\t```\n\t\tnotify-keyspace-events Ex\n\t\t```\n\t\t2 systemctl restart redis\n\t\t3 终端1执行\n\t\t```\n\t\tPSUBSCRIBE __keyevent@0__:expired \n\t\t```\n\t\t4 终端2\n\t\t```\n\t\tsetex easubuac_auth_token 5 uac:192.168.1.189:e36b1f00034357fe3396b34d906778fe  # 设置10s后过期\n\t\t```\n\t\t5 10s之后可以在终端1内看到test过期了\n\t\t-------------------------------\n\n    }\n\n    nfs{\n\n        # 依赖rpc服务通信 portmap[centos5] 或 rpcbind[centos6]\n        yum install nfs-utils portmap    # centos5安装\n        yum install nfs-utils rpcbind    # centos6安装\n\n        vim /etc/exports                 # 配置文件\n        # sync                           # 同步写入\n        # async                          # 暂存并非直接写入\n        # no_root_squash                 # 开放用户端使用root身份操作\n        # root_squash                    # 使用者身份为root则被压缩成匿名使用,即nobody,相对安全\n        # all_squash                     # 所有NFS的使用者身份都被压缩为匿名\n        /data/images 10.10.10.0/24(rw,sync,no_root_squash)\n\n        service  portmap restart         # 重启centos5的nfs依赖的rpc服务\n        service  rpcbind restart         # 重启centos6的nfs依赖的rpc服务\n        service  nfs restart             # 重启nfs服务  确保依赖 portmap 或 rpcbind 服务已启动\n        service  nfs reload              # 重载NFS服务配置文件\n        showmount -e                     # 服务端查看自己共享的服务\n        showmount -a                     # 显示已经与客户端连接上的目录信息\n        showmount -e 10.10.10.3          # 列出服务端可供使用的NFS共享  客户端测试能否访问nfs服务\n        mount -t nfs 10.10.10.3:/data/images/  /data/img   # 挂载nfs  如果延迟影响大加参数 noac\n\n        # 服务端的 portmap 或 rpcbind 被停止后，nfs仍然工作正常，但是umout财会提示： not found / mounted or server not reachable  重启服务器的portmap 或 rpcbind 也无济于事。 nfs也要跟着重启，否则nfs工作仍然是不正常的。\n        # 同时已挂载会造成NFS客户端df卡住和挂载目录无法访问。请先用 mount 查看当前挂载情况，记录挂载信息，在强制卸载挂载目录，重新挂载\n        umount -f /data/img/             # 强制卸载挂载目录  如还不可以  umount -l /data/img/\n\n        nfsstat -c                       # 客户机发送和拒绝的RPC和NFS调用数目的信息\n        nfsstat -cn                      # 显示和打印与客户机NFS调用相关的信息\n        nfsstat -r                       # 显示和打印客户机和服务器的与RPC调用相关的信息\n        nfsstat –s                       # 显示关于服务器接收和拒绝的RPC和NFS调用数目的信息\n\n    }\n\n    hdfs{\n        hdfs --help                  # 所有参数\n\n        hdfs dfs -help               # 运行文件系统命令在Hadoop文件系统\n        hdfs dfs -ls /logs           # 查看\n        hdfs dfs -ls /user/          # 查看用户\n        hdfs dfs -cat\n        hdfs dfs -df\n        hdfs dfs -du\n        hdfs dfs -rm\n        hdfs dfs -tail\n        hdfs dfs –put localSrc dest  # 上传文件\n\n        hdfs dfsadmin -help          # hdfs集群节点管理\n        hdfs dfsadmin -report        # 基本的文件系统统计信息\n    }\n\n}\n\n5 网络{\n\n    rz                                                                    # 通过ssh上传小文件\n    sz                                                                    # 通过ssh下载小文件\n    ifconfig eth0 down                                                    # 禁用网卡\n    ifconfig eth0 up                                                      # 启用网卡\n    ifup eth0:0                                                           # 启用网卡\n    mii-tool em1                                                          # 查看网线是否连接\n    traceroute www.baidu.com                                              # 测试跳数\n    vi /etc/resolv.conf                                                   # 设置DNS  nameserver IP 定义DNS服务器的IP地址\n    nslookup www.moon.com                                                 # 解析域名IP\n    dig -x www.baidu.com                                                  # 解析域名IP\n    dig +trace -t A domainname                                            # 跟踪dns\n    dig +short txt hacker.wp.dg.cx                                        # 通过 DNS 来读取 Wikipedia 的hacker词条\n    host -t txt hacker.wp.dg.cx                                           # 通过 DNS 来读取 Wikipedia 的hacker词条\n    lynx                                                                  # 文本上网\n    wget -P path -O name url                                              # 下载  包名:wgetrc   -q 安静 -c 续传\n    dhclient eth1                                                         # 自动获取IP\n    mtr -r www.baidu.com                                                  # 测试网络链路节点响应时间 # trace ping 结合\n    ipcalc -m \"$ip\" -p \"$num\"                                             # 根据IP和主机最大数计算掩码\n    curl -I www.baidu.com                                                 # 查看网页http头\n    curl -s www.baidu.com                                                 # 不显示进度\n    queryperf -d list -s DNS_IP -l 2                                      # BIND自带DNS压力测试  [list 文件格式:www.turku.fi A]\n    telnet ip port                                                        # 测试端口是否开放,有些服务可直接输入命令得到返回状态\n    echo \"show \" |nc $ip $port                                            # 适用于telnet一类登录得到命令返回\n    nc -l -p port                                                         # 监听指定端口\n    nc -nv -z 10.10.10.11 1080 |grep succeeded                            # 检查主机端口是否开放\n    curl -o /dev/null -s -m 10 --connect-timeout 10 -w %{http_code} $URL  # 检查页面状态\n    curl -X POST -d \"user=xuesong&pwd=123\" http://www.abc.cn/Result       # 提交POST请求\n    curl -s http://20140507.ip138.com/ic.asp                              # 通过IP138取本机出口外网IP\n    curl http://IP/ -H \"X-Forwarded-For: ip\" -H \"Host: www.ttlsa.com\"     # 连到指定IP的响应主机,HTTPserver只看 Host字段\n    ifconfig eth0:0 192.168.1.221 netmask 255.255.255.0                   # 增加逻辑IP地址\n    echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_all                      # 禁ping\n    net rpc shutdown -I IP_ADDRESS -U username%password                   # 远程关掉一台WINDOWS机器\n    wget --random-wait -r -p -e robots=off -U Mozilla www.example.com     # 递归方式下载整个网站\n    sshpass -p \"$pwd\" rsync -avzP /dir  user@$IP:/dir/                    # 指定密码避免交互同步目录\n    rsync -avzP --delete /dir/ user@$IP:/dir/                             # 无差同步目录 可以快速清空大目录,末尾带/同步目录\n    rsync -avzP -e \"ssh -p 22 -e -o StrictHostKeyChecking=no\" /dir user@$IP:/dir         # 指定ssh参数同步\n    rsync -rvze 'ssh -p 58022' ffmpeg@114.55.24.131:/opt/ffmpeg/bin/ /opt/ffmpeg/bin/\n    抓包{\n        -D                                  # 打印接口\n        -i eth1                             # 只抓经过接口eth1的包\n        -t                                  # 不显示时间戳\n        -s 0                                # 抓取数据包时默认抓取长度为68字节。加上-s 0 后可以抓到完整的数据包\n        -c 100                              # 只抓取100个数据包\n        dst port ! 22                       # 不抓取目标端口是22的数据包\n        tcpdump tcp port 22                 # 抓包\n        tcpdump -n -vv udp port 53          # 抓udp的dns包 并显示ip\n        tcpdump port 10001 -A -s0           # 完整显示ascii数据包\n        tcpdump -i any  host x.x.x.x -s 0 -w /tmp/cap.pcap   # 对端ip\n        tcpdump -i any -s 0 host 172.20.81.107 or host 172.16.3.72 -C 50 -W 5 -w /tmp/20190122ng.cap\n\t\ttcpdump -A -i ens33 -w pp.txt host www.baidu.com               \t\t# 存储到抓包文件\t-A 查看详细报文\n\t\ttcpdump -AS -r pp.txt               \t\t\t\t\t\t\t\t# 查看抓包文件\t\t-S 查看ack绝对值\n    }\n\t## 1. tcpdump -vvv tcp port 80 -w /tmp/cap.pcap  # 抓取tcp(http)协议且端口为80的数据包并存到cap.pcap\n\t## 2. wireshark打开cap.pcap查看数据\n\t## 3. 根据域名筛选数据：http.host contains www.macrozheng.com\n\t\t\t根据目标ip筛选：ip.addr == 47.95.117.211\n\n\n    一次短链接失败故障定位{\n\n        # php和python程序调用接口,通过阿里云slb,到后端nginx,偶尔超时,后端nginx无请求,怀疑没到nginx,但通过检查,无法与nginx建立tcp链接\n        ss -nl |grep :80  # 查看 accept 队列值,短连接应该大一点\n        watch -n 1 'nstat -z -t 1 | grep -e TcpActiveOpens -e TcpExtListenOverflows -e TcpAttemptFails -e TcpPassiveOpen -e TcpExtTCPSynRetrans -e TcpRetransSegs  -e TcpOutSegs -e TcpInSegs'\n\n        TcpAttemptFails         TCP建立链接失败,包括前后端\n        TcpExtTCPSynRetrans     TCP向后端建立链接失败\n\n\n        # nginx 和内核都需要调整才生效,程序监听端口,需要加socket参数\n        listen 10.87.128.29:51528 default_server backlog=4096;\n\n\n        https://m.aliyun.com/yunqi/articles/118472?spm=5176.8091938.0.0.11e86ccF4oOeZ\n    }\n\n    网卡流量查看{\n\n        watch more /proc/net/dev    # 实时监控流量文件系统 累计值\n        iptraf                      # 网卡流量查看工具\n        nethogs -d 5 eth0 eth1      # 按进程实时统计网络流量 epel源nethogs\n        iftop -i eth0 -n -P         # 实时流量监控\n\n        sar {\n            -n参数有6个不同的开关: DEV | EDEV | NFS | NFSD | SOCK | ALL\n            DEV显示网络接口信息\n            EDEV显示关于网络错误的统计数据\n            NFS统计活动的NFS客户端的信息\n            NFSD统计NFS服务器的信息\n            SOCK显示套 接字信息\n            ALL显示所有5个开关\n\n            sar -n DEV 1 10\n\n            rxpck/s   # 每秒钟接收的数据包\n            txpck/s   # 每秒钟发送的数据包\n            rxbyt/s   # 每秒钟接收的字节数\n            txbyt/s   # 每秒钟发送的字节数\n            rxcmp/s   # 每秒钟接收的压缩数据包\n            txcmp/s   # 每秒钟发送的压缩数据包\n            rxmcst/s  # 每秒钟接收的多播数据包\n\n        }\n\n    }\n\n    netstat{\n\n        # 几十万并发的情况下netstat会没有响应，建议使用 ss 命令\n        -a     # 显示所有连接中的Socket\n        -t     # 显示TCP连接\n        -u     # 显示UDP连接\n        -n     # 显示所有已建立的有效连接\n        netstat -anlp           # 查看链接\n        netstat -tnlp           # 只查看tcp监听端口\n        netstat -r              # 查看路由表\n    }\n\n    ss{\n\n        # netstat是遍历/proc下面每个PID目录，ss直接读/proc/net下面的统计信息。所以ss执行的时候消耗资源以及消耗的时间都比netstat少很多\n        ss -s                          # 列出当前socket详细信息\n        ss -l                          # 显示本地打开的所有端口\n        ss -tnlp                       # 显示每个进程具体打开的socket\n        ss -ant                        # 显示所有TCP socket\n        ss -u -a                       # 显示所有UDP Socekt\n        ss dst 192.168.119.113         # 匹配远程地址\n        ss dst 192.168.119.113:http    # 匹配远程地址和端口号\n        ss dst 192.168.119.113:3844    # 匹配远程地址和端口号\n        ss src 192.168.119.103:16021   # 匹配本地地址和端口号\n        ss -o state established '( dport = :smtp or sport = :smtp )'        # 显示所有已建立的SMTP连接\n        ss -o state established '( dport = :http or sport = :http )'        # 显示所有已建立的HTTP连接\n        ss -x src /tmp/.X11-unix/*         # 找出所有连接X服务器的进程\n\n    }\n\n    并发数查看{\n\n        netstat -n | awk '/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}'\n        SYN_RECV     # 正在等待处理的请求\n        ESTABLISHED  # 正常数据传输状态,既当前并发数\n        TIME_WAIT    # 处理完毕，等待超时结束的请求\n        CLOSE_WAIT   # 客户端异常关闭,没有完成4次挥手  如大量可能存在攻击行为\n\n    }\n\n    ssh{\n\n        ssh -p 22 user@192.168.1.209                            # 从linux ssh登录另一台linux\n        ssh -p 22 root@192.168.1.209 CMD                        # 利用ssh操作远程主机\n        scp -P 22 file root@ip:/dir                             # 把本地文件拷贝到远程主机\n        scp -l 100000  file root@ip:/dir                        # 传输文件到远程，限制速度100M\n        sshpass -p 'pwd' ssh -n root@$IP \"echo hello\"           # 指定密码远程操作\n        ssh -o StrictHostKeyChecking=no $IP                     # ssh连接不提示yes\n        ssh -t \"su -\"                                           # 指定伪终端 客户端以交互模式工作\n        scp root@192.168.1.209:/RemoteDir /localDir             # 把远程指定文件拷贝到本地\n        pscp -h host.ip /a.sh /opt/sbin/                        # 批量传输文件\n        ssh -N -L2001:remotehost:80 user@somemachine            # 用SSH创建端口转发通道\n        ssh -t host_A ssh host_B                                # 嵌套使用SSH\n        ssh -t -p 22 $user@$Ip /bin/su - root -c {$Cmd};        # 远程su执行命令 Cmd=\"\\\"/sbin/ifconfig eth0\\\"\"\n        ssh-keygen -t rsa                                       # 生成密钥\n        ssh-copy-id -i xuesong@10.10.10.133                     # 传送key\n        vi $HOME/.ssh/authorized_keys                           # 公钥存放位置\n        sshfs name@server:/path/to/folder /path/to/mount/point  # 通过ssh挂载远程主机上的文件夹\n        fusermount -u /path/to/mount/point                      # 卸载ssh挂载的目录\n        ssh user@host cat /path/to/remotefile | diff /path/to/localfile -                # 用DIFF对比远程文件跟本地文件\n        su - user -c \"ssh user@192.168.1.1 \\\"echo -e aa |mail -s test mail@163.com\\\"\"    # 切换用户登录远程发送邮件\n        pssh -h ip.txt -i uptime                                # 批量执行ssh yum install pssh\n\n        SSH反向连接{\n\n            # 外网A要控制内网B\n\n            ssh -NfR 1234:localhost:2223 user1@123.123.123.123 -p22    # 将A主机的1234端口和B主机的2223端口绑定，相当于远程端口映射\n            ss -ant   # 这时在A主机上sshd会listen本地1234端口\n            # LISTEN     0    128    127.0.0.1:1234       *:*\n            ssh localhost -p1234    # 在A主机连接本地1234端口\n\n        }\n    }\n\n    网卡配置文件{\n\n        vi /etc/sysconfig/network-scripts/ifcfg-eth0\n\n        DEVICE=eth0\n        BOOTPROTO=none\n        BROADCAST=192.168.1.255\n        HWADDR=00:0C:29:3F:E1:EA\n        IPADDR=192.168.1.55\n        NETMASK=255.255.255.0\n        NETWORK=192.168.1.0\n        ONBOOT=yes\n        TYPE=Ethernet\n        GATEWAY=192.168.1.1\n        #ARPCHECK=no     # 进制arp检查\n\n    }\n\n    route {\n\n        route                           # 查看路由表\n        route add default  gw 192.168.1.1  dev eth0                        # 添加默认路由\n        route add -net 172.16.0.0 netmask 255.255.0.0 gw 10.39.111.254     # 添加静态路由网关\n        route del -net 172.16.0.0 netmask 255.255.0.0 gw 10.39.111.254     # 删除静态路由网关\n\n    }\n\n    静态路由{\n\n        vim /etc/sysconfig/static-routes\n        any net 192.168.12.0/24 gw 192.168.0.254\n        any net 192.168.13.0/24 gw 192.168.0.254\n\n    }\n\n    解决ssh链接慢{\n\n        sed -i 's/GSSAPIAuthentication yes/GSSAPIAuthentication no/' /etc/ssh/sshd_config\n        sed -i '/#UseDNS yes/a\\UseDNS no' /etc/ssh/sshd_config\n        /etc/init.d/sshd reload\n\n    }\n\n    nmap{\n\n        nmap -PT 192.168.1.1-111             # 先ping在扫描主机开放端口\n        nmap -O 192.168.1.1                  # 扫描出系统内核版本\n        nmap -sV 192.168.1.1-111             # 扫描端口的软件版本\n        nmap -sS 192.168.1.1-111             # 半开扫描(通常不会记录日志)\n        nmap -P0 192.168.1.1-111             # 不ping直接扫描\n        nmap -d 192.168.1.1-111              # 详细信息\n        nmap -D 192.168.1.1-111              # 无法找出真正扫描主机(隐藏IP)\n        nmap -p 20-30,139,60000-             # 端口范围  表示：扫描20到30号端口，139号端口以及所有大于60000的端口\n        nmap -P0 -sV -O -v 192.168.30.251    # 组合扫描(不ping、软件版本、内核版本、详细信息)\n\n        # 不支持windows的扫描(可用于判断是否是windows)\n        nmap -sF 192.168.1.1-111\n        nmap -sX 192.168.1.1-111\n        nmap -sN 192.168.1.1-111\n\n    }\n\n    流量切分线路{\n\n        # 程序判断进入IP线路，设置服务器路由规则控制返回\n        vi /etc/iproute2/rt_tables\n        #添加一条策略\n        252   bgp2  #注意策略的序号顺序\n        ip route add default via 第二个出口上线IP(非默认网关) dev eth1 table bgp2\n        ip route add from 本机第二个ip table bgp2\n        #查看\n        ip route list table 252\n        ip rule list\n        #成功后将语句添加开机启动\n\n    }\n\n    snmp{\n\n        snmptranslate .1.3.6.1.2.1.1.3.0    # 查看映射关系\n            DISMAN-EVENT-MIB::sysUpTimeInstance\n        snmpdf -v 1 -c public localhost                            # SNMP监视远程主机的磁盘空间\n        snmpnetstat -v 2c -c public -a 192.168.6.53                # SNMP获取指定IP的所有开放端口状态\n        snmpwalk -v 2c -c public 10.152.14.117 .1.3.6.1.2.1.1.3.0  # SNMP获取主机启动时间\n        # MIB安装(ubuntu)\n        # sudo apt-get install snmp-mibs-downloader\n        # sudo download-mibs\n        snmpwalk -v 2c -c public 10.152.14.117 sysUpTimeInstance   # SNMP通过MIB库获取主机启动时间\n\n    }\n\n    TC流量控制{\n\n        # 针对ip段下载速率控制\n        tc qdisc del dev eth0 root handle 1:                                                              # 删除控制1:\n        tc qdisc add dev eth0 root handle 1: htb r2q 1                                                    # 添加控制1:\n        tc class add dev eth0 parent 1: classid 1:1 htb rate 12mbit ceil 15mbit                           # 设置速率\n        tc filter add dev eth0 parent 1: protocol ip prio 16 u32 match ip dst 10.10.10.1/24 flowid 1:1    # 指定ip段控制规则\n\n        # 检查命令\n        tc -s -d qdisc show dev eth0\n        tc class show dev eth0\n        tc filter show dev eth0\n\n        限制上传下载{\n\n            tc qdisc del dev tun0 root\n            tc qdisc add dev tun0 root handle 2:0 htb\n            tc class add dev tun0 parent 2:1 classid 2:10 htb rate 30kbps\n            tc class add dev tun0 parent 2:2 classid 2:11 htb rate 30kbps\n            tc qdisc add dev tun0 parent 2:10 handle 1: sfq perturb 1\n            tc filter add dev tun0 protocol ip parent 2:0 u32 match ip dst 10.18.0.0/24 flowid 2:10\n            tc filter add dev tun0 parent ffff: protocol ip u32 match ip src 10.18.0.0/24 police rate 30kbps burst 10k drop flowid 2:11\n\n\n            tc qdisc del dev tun0 root                                     # 删除原有策略\n            tc qdisc add dev tun0 root handle 2:0 htb                      # 定义最顶层(根)队列规则，并指定 default 类别编号，为网络接口 eth1 绑定一个队列，类型为 htb，并指定了一个 handle 句柄 2:0 用于标识它下面的子类\n            tc class add dev tun0 parent 2:1 classid 2:10 htb rate 30kbps  # 设置一个规则速度是30kbps\n            tc class add dev tun0 parent 2:2 classid 2:11 htb rate 30kbps\n            tc qdisc add dev tun0 parent 2:10 handle 1: sfq perturb 1      # 调用随机公平算法\n            tc filter add dev tun0 protocol ip parent 2:0 u32 match ip dst 10.18.0.0/24 flowid 2:10  # 规则2:10应用在目标地址上，即下载\n            tc filter add dev tun0 parent ffff: protocol ip u32 match ip src 10.18.0.0/24 police rate 30kbps burst 10k drop flowid 2:11 # 上传限速\n\n        }\n\n    }\n\n}\n\n6 磁盘{\n\n    df -Ph                                          # 查看硬盘容量\n    df -T                                           # 查看磁盘分区格式\n    df -i                                           # 查看inode节点   如果inode用满后无法创建文件\n    du -h dir                                       # 检测目录下所有文件大小\n    du -sh *                                        # 显示当前目录中子目录的大小\n    mount -l                                        # 查看分区挂载情况\n    fdisk -l                                        # 查看磁盘分区状态\n    fdisk /dev/hda3                                 # 分区\n    mkfs -t ext4  /dev/hda3                         # 格式化分区\n    fsck -y /dev/sda6                               # 对文件系统修复\n    lsof |grep delete                               # 释放进程占用磁盘空间  列出进程后，查看文件是否存在，不存在则kill掉此进程\n    tmpwatch -afv 10   /tmp                         # 删除10小时内未使用的文件  勿在重要目录使用\n    cat /proc/filesystems                           # 查看当前系统支持文件系统\n    mount -o remount,rw /                           # 修改只读文件系统为读写\n    iotop                                           # 进程占用磁盘IO情况   yum install iotop\n    smartctl -H /dev/sda                            # 检测硬盘状态  # yum install smartmontools\n    smartctl -i /dev/sda                            # 检测硬盘信息\n    smartctl -a /dev/sda                            # 检测所有信息\n    e2label /dev/sda5                               # 查看卷标\n    e2label /dev/sda5 new-label                     # 创建卷标\n    ntfslabel -v /dev/sda8 new-label                # NTFS添加卷标\n    tune2fs -j /dev/sda                             # ext2分区转ext3分区\n    tune2fs -l /dev/sda                             # 查看文件系统信息\n    mke2fs -b 2048 /dev/sda5                        # 指定索引块大小\n    dumpe2fs -h /dev/sda5                           # 查看超级块的信息\n    mount -t iso9660 /dev/dvd  /mnt                 # 挂载光驱\n    mount -t ntfs-3g /dev/sdc1 /media/yidong        # 挂载ntfs硬盘\n    mount -t nfs 10.0.0.3:/opt/images/  /data/img   # 挂载nfs 需要重载 /etc/init.d/nfs reload  重启需要先启动 portmap 服务\n    mount -o loop  /software/rhel4.6.iso   /mnt/    # 挂载镜像文件\n\n    磁盘IO性能检测{\n\n        iostat -x 1 10\n\n        % user       # 显示了在用户级(应用程序)执行时生成的 CPU 使用率百分比。\n        % system     # 显示了在系统级(内核)执行时生成的 CPU 使用率百分比。\n        % idle       # 显示了在 CPU 空闲并且系统没有未完成的磁盘 I/O 请求时的时间百分比。\n        % iowait     # 显示了 CPU 空闲期间系统有未完成的磁盘 I/O 请求时的时间百分比。\n\n        rrqm/s       # 每秒进行 merge 的读操作数目。即 delta(rmerge)/s\n        wrqm/s       # 每秒进行 merge 的写操作数目。即 delta(wmerge)/s\n        r/s          # 每秒完成的读 I/O 设备次数。即 delta(rio)/s\n        w/s          # 每秒完成的写 I/O 设备次数。即 delta(wio)/s\n        rsec/s       # 每秒读扇区数。即 delta(rsect)/s\n        wsec/s       # 每秒写扇区数。即 delta(wsect)/s\n        rkB/s        # 每秒读K字节数。是 rsect/s 的一半，因为每扇区大小为512字节。(需要计算)\n        wkB/s        # 每秒写K字节数。是 wsect/s 的一半。(需要计算)\n        avgrq-sz     # 平均每次设备I/O操作的数据大小 (扇区)。delta(rsect+wsect)/delta(rio+wio)\n        avgqu-sz     # 平均I/O队列长度。即 delta(aveq)/s/1000 (因为aveq的单位为毫秒)。\n        await        # 平均每次设备I/O操作的等待时间 (毫秒)。即 delta(ruse+wuse)/delta(rio+wio)\n        svctm        # 平均每次设备I/O操作的服务时间 (毫秒)。即 delta(use)/delta(rio+wio)\n        %util        # 一秒中有百分之多少的时间用于 I/O 操作，或者说一秒中有多少时间 I/O 队列是非空的。即 delta(use)/s/1000 (因为use的单位为毫秒)\n\n        IO性能衡量标准{\n\n            1、 如果 %util 接近 100%，说明产生的I/O请求太多，I/O系统已经满负荷，该磁盘可能存在瓶颈。\n            2、 idle 小于70% IO压力就较大了,一般读取速度有较多的wait.\n            3、 同时可以结合 vmstat 查看查看b参数(等待资源的进程数)和wa参数(IO等待所占用的CPU时间的百分比,高过30%时IO压力高)\n            4、 svctm 一般要小于 await (因为同时等待的请求的等待时间被重复计算了),svctm 的大小一般和磁盘性能有关,CPU/内存的负荷也会对其有影响,请求过多也会间接导致 svctm 的增加. await 的大小一般取决于服务时间(svctm) 以及 I/O 队列的长度和 I/O 请求的发出模式. 如果 svctm 比较接近 await,说明 I/O 几乎没有等待时间;如果 await 远大于 svctm,说明 I/O 队列太长,应用得到的响应时间变慢,如果响应时间超过了用户可以容许的范围,这时可以考虑更换更快的磁盘,调整内核 elevator 算法,优化应用,或者升级 CPU\n            5、 队列长度(avgqu-sz)也可作为衡量系统 I/O 负荷的指标，但由于 avgqu-sz 是按照单位时间的平均值，所以不能反映瞬间的 I/O 洪水。\n\n        }\n\n    }\n\n    iotop{\n\n        # 监视进程磁盘I/O\n\n        yum install iotop\n\n        -o        # 只显示有io操作的进程\n        -b        # 批量显示，无交互，主要用作记录到文件。\n        -n NUM    # 显示NUM次，主要用于非交互式模式。\n        -d SEC    # 间隔SEC秒显示一次。\n        -p PID    # 监控的进程pid。\n        -u USER   # 监控的进程用户。\n\n        # 左右箭头：改变排序方式，默认是按IO排序。\n        r         # 改变排序顺序。\n        o         # 只显示有IO输出的进程。\n        p         # 进程/线程的显示方式的切换。\n        a         # 显示累积使用量。\n        q         # 退出。\n\n    }\n\n    创建swap文件方法{\n\n        dd if=/dev/zero of=/swap bs=1024 count=4096000            # 创建一个足够大的文件\n        # count的值等于1024 x 你想要的文件大小, 4096000是4G\n        mkswap /swap                      # 把这个文件变成swap文件\n        swapon /swap                      # 启用这个swap文件\n        /swap swap swap defaults 0 0      # 在每次开机的时候自动加载swap文件, 需要在 /etc/fstab 文件中增加一行\n        cat /proc/swaps                   # 查看swap\n        swapoff -a                        # 关闭swap\n        swapon -a                         # 开启swap\n\n    }\n\n    新硬盘挂载{\n\n        fdisk /dev/sdc\n        p    #  打印分区\n        d    #  删除分区\n        n    #  创建分区，（一块硬盘最多4个主分区，扩展占一个主分区位置。p主分区 e扩展）\n        w    #  保存退出\n        mkfs.ext4 -L 卷标  /dev/sdc1            # 格式化相应分区\n        mount /dev/sdc1  /mnt                  # 挂载\n        vi /etc/fstab                          # 添加开机挂载分区\n        LABEL=/data            /data                   ext4    defaults        1 2      # 用卷标挂载\n        /dev/sdb1              /data4                  ext4    defaults        1 2      # 用真实分区挂载\n        /dev/sdb2              /data4                  ext4    noatime,defaults        1 2\n\n        第一个数字\"1\"该选项被\"dump\"命令使用来检查一个文件系统应该以多快频率进行转储，若不需要转储就设置该字段为0\n        第二个数字\"2\"该字段被fsck命令用来决定在启动时需要被扫描的文件系统的顺序，根文件系统\"/\"对应该字段的值应该为1，其他文件系统应该为2。若该文件系统无需在启动时扫描则设置该字段为0\n        当以 noatime 选项加载（mount）文件系统时，对文件的读取不会更新文件属性中的atime信息。设置noatime的重要性是消除了文件系统对文件的写操作，文件只是简单地被系统读取。由于写操作相对读来说要更消耗系统资源，所以这样设置可以明显提高服务器的性能.wtime信息仍然有效，任何时候文件被写，该信息仍被更新。\n\n        mount -a    # 自动加载 fstab 文件挂载，避免配置错误，系统无法重启\n\n    }\n\n    大磁盘2T和16T分区{\n\n        parted /dev/sdb                # 针对磁盘分区\n        (parted) mklabel gpt           # 设置为 gpt\n        (parted) print\n        (parted) mkpart  primary 0KB 22.0TB        # 指定分区大小\n        Is this still acceptable to you?\n        Yes/No? Yes\n        Ignore/Cancel? Ignore\n        (parted) print\n        Model: LSI MR9271-8i (scsi)\n        Disk /dev/sdb: 22.0TB\n        Sector size (logical/physical): 512B/512B\n        Partition Table: gpt\n        Number  Start   End     Size    File system  Name     Flags\n         1      17.4kB  22.0TB  22.0TB               primary\n        (parted) quit\n\n        mkfs.ext4 /dev/sdb1        # e2fsprogs升级后支持大于16T硬盘\n\n        # 大于16T的单个分区ext4格式化报错，需要升级e2fsprogs\n        Size of device /dev/sdb1 too big to be expressed in 32 bits using a blocksize of 4096.\n\n        yum -y install xfsprogs\n        mkfs.xfs -f /dev/sdb1              # 大于16T单个分区也可以使用XFS分区,但inode占用很大,对大量的小文件支持不太好\n\n    }\n\n    阿里云扩容磁盘{\n\n        # 进入ECS 本实例磁盘，勾选在线扩容, 选择扩容磁盘\n        yum install cloud-utils-growpart\n        yum install xfsprogs\n        df -h    # 查看目前分区大小\n        fdisk -l # 查看磁盘设备\n        growpart /dev/vda 1         # 扩容分区 如果没有分区,默认整块,不需要执行\n        resize2fs /dev/vda1         # 扩容文件系统 ext4文件系统 \n        xfs_growfs /dev/vda1        # 扩容文件系统 xfs文件系统\n        df -h                       # 再查看分区大小,是否扩容\n\n    }\n\n    raid原理与区别{\n\n        raid0至少2块硬盘.吞吐量大,性能好,同时读写,但损坏一个就完蛋\n        raid1至少2块硬盘.相当镜像,一个存储,一个备份.安全性比较高.但是性能比0弱\n        raid5至少3块硬盘.分别存储校验信息和数据，坏了一个根据校验信息能恢复\n        raid6至少4块硬盘.两个独立的奇偶系统,可坏两块磁盘,写性能非常差\n\n    }\n\n}\n\n7 用户{\n\n    users                                      # 显示所有的登录用户\n    groups                                     # 列出当前用户和他所属的组\n    who -q                                     # 显示所有的登录用户\n    groupadd                                   # 添加组\n    useradd user                               # 建立用户\n    passwd username                            # 修改密码\n    userdel -r                                 # 删除帐号及家目录\n    chown -R user:group                        # 修改目录拥有者(R递归)\n    chown y\\.li:mysql                          # 修改所有者用户中包含点\".\"\n    umask                                      # 设置用户文件和目录的文件创建缺省屏蔽值\n    chgrp                                      # 修改用户组\n    finger                                     # 查找用户显示信息\n    echo \"xuesong\" | passwd user --stdin       # 非交互修改密码\n    useradd -g www -M  -s /sbin/nologin  www   # 指定组并不允许登录的用户,nologin允许使用服务\n    useradd -g www -M  -s /bin/false  www      # 指定组并不允许登录的用户,false最为严格\n    useradd -d /data/song -g song song         # 创建用户并指定家目录和组\n    usermod -l newuser olduser                 # 修改用户名\n    usermod -g user group                      # 修改用户所属组\n    usermod -d dir -m user                     # 修改用户家目录\n    usermod -G group user                      # 将用户添加到附加组\n    gpasswd -d user group                      # 从组中删除用户\n    su - user -c \" #cmd1; \"                    # 切换用户执行\n\n    恢复密码{\n\n        # 即进入单用户模式: 在linux出现grub后，在安装的系统上面按\"e\"，然后出现grub的配置文件，按键盘移动光标到第二行\"Ker……\"，再按\"e\"，然后在这一行的结尾加上：空格 single或者空格1回车，然后按\"b\"重启，就进入了\"单用户模式\"\n    }\n\n    特殊权限{\n\n        s或 S （SUID）：对应数值4\n        s或 S （SGID）：对应数值2\n        t或 T ：对应数值1\n        大S：代表拥有root权限，但是没有执行权限\n        小s：拥有特权且拥有执行权限，这个文件可以访问系统任何root用户可以访问的资源\n        T或T（Sticky）：/tmp和 /var/tmp目录供所有用户暂时存取文件，亦即每位用户皆拥有完整的权限进入该目录，去浏览、删除和移动文件\n\n    }\n\n}\n\n8 脚本{\n\n    #!/bin/sh                             # 在脚本第一行脚本头 # sh为当前系统默认shell,可指定为bash等shell\n    shopt                                 # 显示和设置shell中的行为选项\n    sh -x                                 # 执行过程\n    sh -n                                 # 检查语法\n    set -e                                # 若指令传回值不等于0，则立即退出shell\n    (a=bbk)                               # 括号创建子shell运行\n    basename /a/b/c                       # 从全路径中保留最后一层文件名或目录\n    dirname                               # 取路径\n    $RANDOM                               # 随机数\n    $$                                    # 进程号\n    source FileName                       # 在当前bash环境下读取并执行FileName中的命令  # 等同 . FileName\n    sleep 5                               # 间隔睡眠5秒\n    trap                                  # 在接收到信号后将要采取的行动\n    trap \"\" 2 3                           # 禁止ctrl+c\n    $PWD                                  # 当前目录\n    $HOME                                 # 家目录\n    $OLDPWD                               # 之前一个目录的路径\n    cd -                                  # 返回上一个目录路径\n    local ret                             # 局部变量\n    yes                                   # 重复打印\n    yes |rm -i *                          # 自动回答y或者其他\n    ls -p /home                           # 区分目录和文件夹\n    ls -d /home/                          # 查看匹配完整路径\n    time a.sh                             # 测试程序执行时间\n    echo -n aa;echo bb                    # 不换行执行下一句话 将字符串原样输出\n    echo -e \"s\\tss\\n\\n\\n\"                 # 使转义生效\n    echo $a | cut -c2-6                   # 取字符串中字元\n    echo {a,b,c}{a,b,c}{a,b,c}            # 排列组合(括号内一个元素分别和其他括号内元素组合)\n    echo $((2#11010))                     # 二进制转10进制\n    echo aaa | tee file                   # 打印同时写入文件 默认覆盖 -a追加\n    echo {1..10}                          # 打印10个字符\n    printf '%10s\\n'|tr \" \" a              # 打印10个字符\n    pwd | awk -F/ '{ print $2 }'          # 返回目录名\n    tac file |sed 1,3d|tac                # 倒置读取文件  # 删除最后3行\n    tail -3 file                          # 取最后3行\n    outtmp=/tmp/$$`date +%s%N`.outtmp     # 临时文件定义\n    :(){ :|:& };:                         # fork炸弹,系统执行海量的进程,直到系统僵死\n    echo -e \"\\e[32mcolour\\e[0m\"           # 打印颜色\n    echo -e \"\\033[32mcolour\\033[m\"        # 打印颜色\n    echo -e \"\\033[0;31mL\\033[0;32mO\\033[0;33mV\\033[0;34mE\\t\\033[0;35mY\\033[0;36mO\\033[0;32mU\\e[m\"    # 打印颜色\n\n    正则表达式{\n\n        ^                       # 行首定位\n        $                       # 行尾定位\n        .                       # 匹配除换行符以外的任意字符\n        *                       # 匹配0或多个重复字符\n        +                       # 重复一次或更多次\n        ?                       # 重复零次或一次\n        ?                       # 结束贪婪因子 .*? 表示最小匹配\n        []                      # 匹配一组中任意一个字符\n        [^]                     # 匹配不在指定组内的字符\n        \\                       # 用来转义元字符\n        <                       # 词首定位符(支持vi和grep)  <love\n        >                       # 词尾定位符(支持vi和grep)  love>\n        x\\{m\\}                  # 重复出现m次\n        x\\{m,\\}                 # 重复出现至少m次\n        x\\{m,n\\}                # 重复出现至少m次不超过n次\n        X?                      # 匹配出现零次或一次的大写字母 X\n        X+                      # 匹配一个或多个字母 X\n        ()                      # 括号内的字符为一组\n        (ab|de)+                # 匹配一连串的（最少一个） abc 或 def；abc 和 def 将匹配\n        [[:alpha:]]             # 代表所有字母不论大小写\n        [[:lower:]]             # 表示小写字母\n        [[:upper:]]             # 表示大写字母\n        [[:digit:]]             # 表示数字字符\n        [[:digit:][:lower:]]    # 表示数字字符加小写字母\n\n        元字符{\n\n            \\d       # 匹配任意一位数字\n            \\D       # 匹配任意单个非数字字符\n            \\w       # 匹配任意单个字母数字下划线字符，同义词是 [:alnum:]\n            \\W       # 匹配非数字型的字符\n\n        }\n\n        字符类:空白字符{\n\n            \\s       # 匹配任意的空白符\n            \\S       # 匹配非空白字符\n            \\b       # 匹配单词的开始或结束\n            \\n       # 匹配换行符\n            \\r       # 匹配回车符\n            \\t       # 匹配制表符\n            \\b       # 匹配退格符\n            \\0       # 匹配空值字符\n\n        }\n\n        字符类:锚定字符{\n\n            \\b       # 匹配字边界(不在[]中时)\n            \\B       # 匹配非字边界\n            \\A       # 匹配字符串开头\n            \\Z       # 匹配字符串或行的末尾\n            \\z       # 只匹配字符串末尾\n            \\G       # 匹配前一次m//g离开之处\n\n        }\n\n        捕获{\n\n            (exp)                # 匹配exp,并捕获文本到自动命名的组里\n            (?<name>exp)         # 匹配exp,并捕获文本到名称为name的组里，也可以写成(?'name'exp)\n            (?:exp)              # 匹配exp,不捕获匹配的文本，也不给此分组分配组号\n\n        }\n\n        零宽断言{\n\n            (?=exp)              # 匹配exp前面的位置\n            (?<=exp)             # 匹配exp后面的位置\n            (?!exp)              # 匹配后面跟的不是exp的位置\n            (?<!exp)             # 匹配前面不是exp的位置\n            (?#comment)          # 注释不对正则表达式的处理产生任何影响，用于注释\n\n        }\n\n        特殊字符{\n\n            http://en.wikipedia.org/wiki/Ascii_table\n            ^H  \\010 \\b\n            ^M  \\015 \\r\n            匹配特殊字符: ctrl+V ctrl不放在按H或M 即可输出^H,用于匹配\n\n        }\n\n    }\n\n    流程结构{\n\n        if判断{\n\n            if [ $a == $b ]\n            then\n                echo \"等于\"\n            else\n                echo \"不等于\"\n            fi\n\n        }\n\n        case分支选择{\n\n            case $xs in\n            0) echo \"0\" ;;\n            1) echo \"1\" ;;\n            *) echo \"其他\" ;;\n            esac\n\n        }\n\n        while循环{\n\n            # while true  等同   while :\n            # 读文件为整行读入\n            num=1\n            while [ $num -lt 10 ]\n            do\n            echo $num\n            ((num=$num+2))\n            done\n            ###########################\n            grep a  a.txt | while read a\n            do\n                echo $a\n            done\n            ###########################\n            while read a\n            do\n                echo $a\n            done < a.txt\n\n        }\n\n        for循环{\n\n            # 读文件已空格分隔\n            w=`awk -F \":\" '{print $1}' c`\n            for d in $w\n            do\n                $d\n            done\n            ###########################\n            for ((i=0;i<${#o[*]};i++))\n            do\n            echo ${o[$i]}\n            done\n\n        }\n\n        until循环{\n\n            #  当command不为0时循环\n            until command\n            do\n                body\n            done\n\n        }\n\n        流程控制{\n\n            break N     #  跳出几层循环\n            continue N  #  跳出几层循环，循环次数不变\n            continue    #  重新循环次数不变\n\n        }\n\n    }\n\n    变量{\n\n        A=\"a b c def\"           # 将字符串复制给变量\n        A=`cmd`                 # 将命令结果赋给变量\n        A=$(cmd)                # 将命令结果赋给变量\n        eval a=\\$$a             # 间接调用\n        i=2&&echo $((i+3))      # 计算后打印新变量结果\n        i=2&&echo $[i+3]        # 计算后打印新变量结果\n        a=$((2>6?5:8))          # 判断两个值满足条件的赋值给变量\n        $1  $2  $*              # 位置参数 *代表所有\n        env                     # 查看环境变量\n        env | grep \"name\"       # 查看定义的环境变量\n        set                     # 查看环境变量和本地变量\n        read name               # 输入变量\n        readonly name           # 把name这个变量设置为只读变量,不允许再次设置\n        readonly                # 查看系统存在的只读文件\n        export name             # 变量name由本地升为环境\n        export name=\"RedHat\"    # 直接定义name为环境变量\n        export Stat$nu=2222     # 变量引用变量赋值\n        unset name              # 变量清除\n        export -n name          # 去掉只读变量\n        shift                   # 用于移动位置变量,调整位置变量,使$3的值赋给$2.$2的值赋予$1\n        name + 0                # 将字符串转换为数字\n        number \" \"              # 将数字转换成字符串\n        a='ee';b='a';echo ${!b} # 间接引用name变量的值\n        : ${a=\"cc\"}             # 如果a有值则不改变,如果a无值则赋值a变量为cc\n\n        数组{\n\n            A=(a b c def)         # 将变量定义为数組\n            ${#A[*]}              # 数组个数\n            ${A[*]}               # 数组所有元素,大字符串\n            ${A[@]}               # 数组所有元素,类似列表可迭代\n            ${A[2]}               # 脚本的一个参数或数组第三位\n\n        }\n\n        定义变量类型{\n\n            declare 或 typeset\n            -r 只读(readonly一样)\n            -i 整形\n            -a 数组\n            -f 函数\n            -x export\n            declare -i n=0\n\n        }\n\n        系统变量{\n\n            $0   #  脚本启动名(包括路径)\n            $n   #  第n个参数,n=1,2,…9\n            $*   #  所有参数列表(不包括脚本本身)\n            $@   #  所有参数列表(独立字符串)\n            $#   #  参数个数(不包括脚本本身)\n            $$   #  当前程式的PID\n            $!   #  执行上一个指令的PID\n            $?   #  执行上一个指令的返回值\n\n        }\n\n        变量引用技巧{\n\n            ${name:+value}        # 如果设置了name,就把value显示,未设置则为空\n            ${name:-value}        # 如果设置了name,就显示它,未设置就显示value\n            ${name:?value}        # 未设置提示用户错误信息value \n            ${name:=value}        # 如未设置就把value设置并显示<写入本地中>\n            ${#A}                 # 可得到变量中字节\n            ${A:4:9}              # 取变量中第4位到后面9位\n            ${A:(-1)}             # 倒叙取最后一个字符\n            ${A/www/http}         # 取变量并且替换每行第一个关键字\n            ${A//www/http}        # 取变量并且全部替换每行关键字\n\n            定义了一个变量： file=/dir1/dir2/dir3/my.file.txt\n            ${file#*/}     # 去掉第一条 / 及其左边的字串：dir1/dir2/dir3/my.file.txt\n            ${file##*/}    # 去掉最后一条 / 及其左边的字串：my.file.txt\n            ${file#*.}     # 去掉第一个 .  及其左边的字串：file.txt\n            ${file##*.}    # 去掉最后一个 .  及其左边的字串：txt\n            ${file%/*}     # 去掉最后条 / 及其右边的字串：/dir1/dir2/dir3\n            ${file%%/*}    # 去掉第一条 / 及其右边的字串：(空值)\n            ${file%.*}     # 去掉最后一个 .  及其右边的字串：/dir1/dir2/dir3/my.file\n            ${file%%.*}    # 去掉第一个 .  及其右边的字串：/dir1/dir2/dir3/my\n            #   # 是去掉左边(在键盘上 # 在 $ 之左边)\n            #   % 是去掉右边(在键盘上 % 在 $ 之右边)\n            #   单一符号是最小匹配﹔两个符号是最大匹配\n\n        }\n\n    }\n\n    test条件判断{\n\n        # 符号 [ ] 等同  test命令\n\n        expression为字符串操作{\n\n            -n str   # 字符串str是否不为空\n            -z str   # 字符串str是否为空\n\n        }\n\n        expression为文件操作{\n\n            -a     # 并且，两条件为真\n            -b     # 是否块文件\n            -p     # 文件是否为一个命名管道\n            -c     # 是否字符文件\n            -r     # 文件是否可读\n            -d     # 是否一个目录\n            -s     # 文件的长度是否不为零\n            -e     # 文件是否存在\n            -S     # 是否为套接字文件\n            -f     # 是否普通文件\n            -x     # 文件是否可执行，则为真\n            -g     # 是否设置了文件的 SGID 位\n            -u     # 是否设置了文件的 SUID 位\n            -G     # 文件是否存在且归该组所有\n            -w     # 文件是否可写，则为真\n            -k     # 文件是否设置了的粘贴位\n            -t fd  # fd 是否是个和终端相连的打开的文件描述符（fd 默认为 1）\n            -o     # 或，一个条件为真\n            -O     # 文件是否存在且归该用户所有\n            !      # 取反\n\n        }\n\n        expression为整数操作{\n\n            expr1 -a expr2   # 如果 expr1 和 expr2 评估为真，则为真\n            expr1 -o expr2   # 如果 expr1 或 expr2 评估为真，则为真\n\n        }\n\n        两值比较{\n\n            整数     字符串\n            -lt      <         # 小于\n            -gt      >         # 大于\n            -le      <=        # 小于或等于\n            -ge      >=        # 大于或等于\n            -eq      ==        # 等于\n            -ne      !=        # 不等于\n\n        }\n\n        test 10 -lt 5       # 判断大小\n        echo $?             # 查看上句test命令返回状态  # 结果0为真,1为假\n        test -n \"hello\"     # 判断字符串长度是否为0\n        [ $? -eq 0 ] && echo \"success\" || exit　　　# 判断成功提示,失败则退出\n\n    }\n\n    重定向{\n\n        #  标准输出 stdout 和 标准错误 stderr  标准输入stdin\n        cmd 1> fiel              # 把 标准输出 重定向到 file 文件中\n        cmd > file 2>&1          # 把 标准输出 和 标准错误 一起重定向到 file 文件中\n        cmd 2> file              # 把 标准错误 重定向到 file 文件中\n        cmd 2>> file             # 把 标准错误 重定向到 file 文件中(追加)\n        cmd >> file 2>&1         # 把 标准输出 和 标准错误 一起重定向到 file 文件中(追加)\n        cmd < file >file2        # cmd 命令以 file 文件作为 stdin(标准输入)，以 file2 文件作为 标准输出\n        cat <>file               # 以读写的方式打开 file\n        cmd < file cmd           # 命令以 file 文件作为 stdin\n        cmd << delimiter\n        cmd; #从 stdin 中读入，直至遇到 delimiter 分界符\ndelimiter\n\n        >&n    # 使用系统调用 dup (2) 复制文件描述符 n 并把结果用作标准输出\n        <&n    # 标准输入复制自文件描述符 n\n        <&-    # 关闭标准输入（键盘）\n        >&-    # 关闭标准输出\n        n<&-   # 表示将 n 号输入关闭\n        n>&-   # 表示将 n 号输出关闭\n\n    }\n\n    运算符{\n\n        $[]等同于$(())  # $[]表示形式告诉shell求中括号中的表达式的值\n        ~var            # 按位取反运算符,把var中所有的二进制为1的变为0,为0的变为1\n        var\\<<str       # 左移运算符,把var中的二进制位向左移动str位,忽略最左端移出的各位,最右端的各位上补上0值,每做一次按位左移就有var乘2\n        var>>str        # 右移运算符,把var中所有的二进制位向右移动str位,忽略最右移出的各位,最左的各位上补0,每次做一次右移就有实现var除以2\n        var&str         # 与比较运算符,var和str对应位,对于每个二进制来说,如果二都为1,结果为1.否则为0\n        var^str         # 异或运算符,比较var和str对应位,对于二进制来说如果二者互补,结果为1,否则为0\n        var|str         # 或运算符,比较var和str的对应位,对于每个二进制来说,如二都该位有一个1或都是1,结果为1,否则为0\n\n        运算符优先级{\n            级别      运算符                                  说明\n            1      =,+=,-=,/=,%=,*=,&=,^=,|=,<<=,>>=      # 赋值运算符\n            2         ||                                  # 逻辑或 前面不成功执行\n            3         &&                                  # 逻辑与 前面成功后执行\n            4         |                                   # 按位或\n            5         ^                                   # 按位异或\n            6         &                                   # 按位与\n            7         ==,!=                               # 等于/不等于\n            8         <=,>=,<,>                           # 小于或等于/大于或等于/小于/大于\n            9        \\<<,>>                               # 按位左移/按位右移 (无转意符号)\n            10        +,-                                 # 加减\n            11        *,/,%                               # 乘,除,取余\n            12        ! ,~                                # 逻辑非,按位取反或补码\n            13        -,+                                 # 正负\n        }\n    }\n    数学运算{\n        $(( ))        # 整数运算\n        + - * / **    # 分別为 \"加、減、乘、除、密运算\"\n        & | ^ !       # 分別为 \"AND、OR、XOR、NOT\" 运算\n        %             # 余数运算\n        let{\n            let # 运算\n            let x=16/4\n            let x=5**5\n        }\n        expr{\n            expr 14 % 9                    # 整数运算\n            SUM=`expr 2 \\* 3`              # 乘后结果赋值给变量\n            LOOP=`expr $LOOP + 1`          # 增量计数(加循环即可) LOOP=0\n            expr length \"bkeep zbb\"        # 计算字串长度\n            expr substr \"bkeep zbb\" 4 9    # 抓取字串\n            expr index \"bkeep zbb\" e       # 抓取第一个字符数字串出现的位置\n            expr 30 / 3 / 2                # 运算符号有空格\n            expr bkeep.doc : '.*'          # 模式匹配(可以使用expr通过指定冒号选项计算字符串中字符数)\n            expr bkeep.doc : '\\(.*\\).doc'  # 在expr中可以使用字符串匹配操作，这里使用模式抽取.doc文件附属名\n            数值测试{\n                #如果试图计算非整数，则会返回错误\n                rr=3.4\n                expr $rr + 1\n                expr: non-numeric argument\n                rr=5\n                expr $rr + 1\n                6\n            }\n        }\n        bc{\n            echo \"m^n\"|bc            # 次方计算\n            seq -s '+' 1000 |bc      # 从1加到1000\n            seq 1 1000 |tr \"\\n\" \"+\"|sed 's/+$/\\n/'|bc   # 从1加到1000\n        }\n    }\n    grep{\n        -c    # 显示匹配到得行的数目，不显示内容\n        -h    # 不显示文件名\n        -i    # 忽略大小写\n        -l    # 只列出匹配行所在文件的文件名\n        -n    # 在每一行中加上相对行号\n        -s    # 无声操作只显示报错，检查退出状态\n        -v    # 反向查找\n        -e    # 使用正则表达式\n        -w    # 精确匹配\n        -wc   # 精确匹配次数\n        -o    # 查询所有匹配字段\n        -P    # 使用perl正则表达式\n        -A3   # 打印匹配行和下三行\n        -B3   # 打印匹配行和上三行\n        -C3   # 打印匹配行和上下三行\n        grep -v \"a\" txt                              # 过滤关键字符行\n        grep -w 'a\\>' txt                            # 精确匹配字符串\n        grep -i \"a\" txt                              # 大小写敏感\n        grep  \"a[bB]\" txt                            # 同时匹配大小写\n        grep '[0-9]\\{3\\}' txt                        # 查找0-9重复三次的所在行\n        grep -E \"word1|word2|word3\"   file           # 任意条件匹配\n        grep word1 file | grep word2 |grep word3     # 同时匹配三个\n        echo quan@163.com |grep -Po '(?<=@.).*(?=.$)'                           # 零宽断言截取字符串  #　63.co\n        echo \"I'm singing while you're dancing\" |grep -Po '\\b\\w+(?=ing\\b)'      # 零宽断言匹配\n        echo 'Rx Optical Power: -5.01dBm, Tx Optical Power: -2.41dBm' |grep -Po '(?<=:).*?(?=d)'           # 取出d前面数字 # ?为最小匹配\n        echo 'Rx Optical Power: -5.01dBm, Tx Optical Power: -2.41dBm' | grep -Po '[-0-9.]+'                # 取出d前面数字 # ?为最小匹配\n        echo '[\"mem\",ok],[\"hardware\",false],[\"filesystem\",false]' |grep -Po '[^\"]+(?=\",false)'             # 取出false前面的字母\n        echo '[\"mem\",ok],[\"hardware\",false],[\"filesystem\",false]' |grep -Po '\\w+\",false'|grep -Po '^\\w+'   # 取出false前面的字母\n        grep用于if判断{\n            if echo abc | grep \"a\"  > /dev/null 2>&1\n            then\n                echo \"abc\"\n            else\n                echo \"null\"\n            fi\n        }\n    }\n    tr{\n        -c          # 用字符串1中字符集的补集替换此字符集，要求字符集为ASCII\n        -d          # 删除字符串1中所有输入字符\n        -s          # 删除所有重复出现字符序列，只保留第一个:即将重复出现字符串压缩为一个字符串\n        [a-z]       # a-z内的字符组成的字符串\n        [A-Z]       # A-Z内的字符组成的字符串\n        [0-9]       # 数字串\n        \\octal      # 一个三位的八进制数，对应有效的ASCII字符\n        [O*n]       # 表示字符O重复出现指定次数n。因此[O*2]匹配OO的字符串\n        tr中特定控制字符表达方式{\n            \\a Ctrl-G    \\007    # 铃声\n            \\b Ctrl-H    \\010    # 退格符\n            \\f Ctrl-L    \\014    # 走行换页\n            \\n Ctrl-J    \\012    # 新行\n            \\r Ctrl-M    \\015    # 回车\n            \\t Ctrl-I    \\011    # tab键\n            \\v Ctrl-X    \\030\n        }\n        tr A-Z a-z                             # 将所有大写转换成小写字母\n        tr \" \" \"\\n\"                            # 将空格替换为换行\n        tr -s \"[\\012]\" < plan.txt              # 删除空行\n        tr -s [\"\\n\"] < plan.txt                # 删除空行\n        tr -s \"[\\015]\" \"[\\n]\" < file           # 删除文件中的^M，并代之以换行\n        tr -s \"[\\r]\" \"[\\n]\" < file             # 删除文件中的^M，并代之以换行\n        tr -s \"[:]\" \"[\\011]\" < /etc/passwd     # 替换passwd文件中所有冒号，代之以tab键\n        tr -s \"[:]\" \"[\\t]\" < /etc/passwd       # 替换passwd文件中所有冒号，代之以tab键\n        echo $PATH | tr \":\" \"\\n\"               # 增加显示路径可读性\n        1,$!tr -d '\\t'                         # tr在vi内使用，在tr前加处理行范围和感叹号('$'表示最后一行)\n        tr \"\\r\" \"\\n\"<macfile > unixfile        # Mac -> UNIX\n        tr \"\\n\" \"\\r\"<unixfile > macfile        # UNIX -> Mac\n        tr -d \"\\r\"<dosfile > unixfile          # DOS -> UNIX  Microsoft DOS/Windows 约定，文本的每行以回车字符(\\r)并后跟换行符(\\n)结束\n        awk '{ print $0\"\\r\" }'<unixfile > dosfile   # UNIX -> DOS：在这种情况下，需要用awk，因为tr不能插入两个字符来替换一个字符\n    }\n    seq{\n        # 不指定起始数值，则默认为 1\n        -s   # 选项主要改变输出的分格符, 预设是 \\n\n        -w   # 等位补全，就是宽度相等，不足的前面补 0\n        -f   # 格式化输出，就是指定打印的格式\n        seq 10 100               # 列出10-100\n        seq 1 10 |tac            # 倒叙列出\n        seq -s '+' 90 100 |bc    # 从90加到100\n        seq -f 'dir%g' 1 10 | xargs mkdir     # 创建dir1-10\n        seq -f 'dir%03g' 1 10 | xargs mkdir   # 创建dir001-010\n    }\n    trap{\n        信号         说明\n        HUP(1)     # 挂起，通常因终端掉线或用户退出而引发\n        INT(2)     # 中断，通常因按下Ctrl+C组合键而引发\n        QUIT(3)    # 退出，通常因按下Ctrl+\\组合键而引发\n        ABRT(6)    # 中止，通常因某些严重的执行错误而引发\n        ALRM(14)   # 报警，通常用来处理超时\n        TERM(15)   # 终止，通常在系统关机时发送\n        trap捕捉到信号之后，可以有三种反应方式：\n            1、执行一段程序来处理这一信号\n            2、接受信号的默认操作\n            3、忽视这一信号\n        第一种形式的trap命令在shell接收到 signal list 清单中数值相同的信号时，将执行双引号中的命令串：\n        trap 'commands' signal-list   # 单引号，要在shell探测到信号来的时候才执行命令和变量的替换，时间一直变\n        trap \"commands\" signal-list   # 双引号，shell第一次设置信号的时候就执行命令和变量的替换，时间不变\n    }\n    awk{\n        # 默认是执行打印全部 print $0\n        # 1为真 打印$0\n        # 0为假 不打印\n        -F   # 改变FS值(分隔符)\n        ~    # 域匹配\n        ==   # 变量匹配\n        !~   # 匹配不包含\n        =    # 赋值\n        !=   # 不等于\n        +=   # 叠加\n        \\b   # 退格\n        \\f   # 换页\n        \\n   # 换行\n        \\r   # 回车\n        \\t   # 制表符Tab\n        \\c   # 代表任一其他字符\n        -F\"[ ]+|[%]+\"  # 多个空格或多个%为分隔符\n        [a-z]+         # 多个小写字母\n        [a-Z]          # 代表所有大小写字母(aAbB...zZ)\n        [a-z]          # 代表所有大小写字母(ab...z)\n        [:alnum:]      # 字母数字字符\n        [:alpha:]      # 字母字符\n        [:cntrl:]      # 控制字符\n        [:digit:]      # 数字字符\n        [:graph:]      # 非空白字符(非空格、控制字符等)\n        [:lower:]      # 小写字母\n        [:print:]      # 与[:graph:]相似，但是包含空格字符\n        [:punct:]      # 标点字符\n        [:space:]      # 所有的空白字符(换行符、空格、制表符)\n        [:upper:]      # 大写字母\n        [:xdigit:]     # 十六进制的数字(0-9a-fA-F)\n        [[:digit:][:lower:]]    # 数字和小写字母(占一个字符)\n        内建变量{\n            $n            # 当前记录的第 n 个字段，字段间由 FS 分隔\n            $0            # 完整的输入记录\n            ARGC          # 命令行参数的数目\n            ARGIND        # 命令行中当前文件的位置 ( 从 0 开始算 )\n            ARGV          # 包含命令行参数的数组\n            CONVFMT       # 数字转换格式 ( 默认值为 %.6g)\n            ENVIRON       # 环境变量关联数组\n            ERRNO         # 最后一个系统错误的描述\n            FIELDWIDTHS   # 字段宽度列表 ( 用空格键分隔 )\n            FILENAME      # 当前文件名\n            FNR           # 同 NR ，但相对于当前文件\n            FS            # 字段分隔符 ( 默认是任何空格 )\n            IGNORECASE    # 如果为真（即非 0 值），则进行忽略大小写的匹配\n            NF            # 当前记录中的字段数(列)\n            NR            # 当前行数\n            OFMT          # 数字的输出格式 ( 默认值是 %.6g)\n            OFS           # 输出字段分隔符 ( 默认值是一个空格 )\n            ORS           # 输出记录分隔符 ( 默认值是一个换行符 )\n            RLENGTH       # 由 match 函数所匹配的字符串的长度\n            RS            # 记录分隔符 ( 默认是一个换行符 )\n            RSTART        # 由 match 函数所匹配的字符串的第一个位置\n            SUBSEP        # 数组下标分隔符 ( 默认值是 /034)\n            BEGIN         # 先处理(可不加文件参数)\n            END           # 结束时处理\n        }\n        内置函数{\n            gsub(r,s)          # 在整个$0中用s替代r   相当于 sed 's///g'\n            gsub(r,s,t)        # 在整个t中用s替代r\n            index(s,t)         # 返回s中字符串t的第一位置\n            length(s)          # 返回s长度\n            match(s,r)         # 测试s是否包含匹配r的字符串\n            split(s,a,fs)      # 在fs上将s分成序列a\n            sprint(fmt,exp)    # 返回经fmt格式化后的exp\n            sub(r,s)           # 用$0中最左边最长的子串代替s   相当于 sed 's///'\n            substr(s,p)        # 返回字符串s中从p开始的后缀部分\n            substr(s,p,n)      # 返回字符串s中从p开始长度为n的后缀部分\n        }\n        awk判断{\n\t\t    zgrep \" 200 \" access.log-202109*.gz |awk '{if ( $10 > 200) { print $7 }}' |awk -F\"?\" '{ print $1 }'|sort|uniq -c|sort -nr\n            awk '{print ($1>$2)?\"第一排\"$1:\"第二排\"$2}'      # 条件判断 括号代表if语句判断 \"?\"代表then \":\"代表else\n            awk '{max=($1>$2)? $1 : $2; print max}'          # 条件判断 如果$1大于$2,max值为为$1,否则为$2\n            awk '{if ( $6 > 50) print $1 \" Too high\" ;\\\n            else print \"Range is OK\"}' file\n            awk '{if ( $6 > 50) { count++;print $3 } \\\n            else { x+5; print $2 } }' file\n        }\n        awk循环{\n            awk '{i = 1; while ( i <= NF ) { print NF, $i ; i++ } }' file\n            awk '{ for ( i = 1; i <= NF; i++ ) print NF,$i }' file\n        }\n        awk '/Tom/' file               # 打印匹配到得行\n        awk '/^Tom/{print $1}'         # 匹配Tom开头的行 打印第一个字段\n        awk '$1 !~ /ly$/'              # 显示所有第一个字段不是以ly结尾的行\n        awk '$3 <40'                   # 如果第三个字段值小于40才打印\n        awk '$4==90{print $5}'         # 取出第四列等于90的第五列\n        awk '/^(no|so)/' test          # 打印所有以模式no或so开头的行\n        awk '$3 * $4 > 500'            # 算术运算(第三个字段和第四个字段乘积大于500则显示)\n        awk '{print NR\" \"$0}'          # 加行号\n        awk '/tom/,/suz/'              # 打印tom到suz之间的行\n        awk '{a+=$1}END{print a}'      # 列求和\n        awk 'sum+=$1{print sum}'       # 将$1的值叠加后赋给sum\n        awk '{a+=$1}END{print a/NR}'   # 列求平均值\n        awk '!s[$1 $3]++' file         # 根据第一列和第三列过滤重复行\n        awk -F'[ :\\t]' '{print $1,$2}'           # 以空格、:、制表符Tab为分隔符\n        awk '{print \"'\"$a\"'\",\"'\"$b\"'\"}'          # 引用外部变量\n        awk '{if(NR==52){print;exit}}'           # 显示第52行\n        awk '/关键字/{a=NR+2}a==NR {print}'      # 取关键字下第几行\n        awk 'gsub(/liu/,\"aaaa\",$1){print $0}'    # 只打印匹配替换后的行\n        ll | awk -F'[ ]+|[ ][ ]+' '/^$/{print $8}'             # 提取时间,空格不固定\n        awk '{$1=\"\";$2=\"\";$3=\"\";print}'                        # 去掉前三列\n        echo aada:aba|awk '/d/||/b/{print}'                    # 匹配两内容之一\n        echo aada:abaa|awk -F: '$1~/d/||$2~/b/{print}'         # 关键列匹配两内容之一\n        echo Ma asdas|awk '$1~/^[a-Z][a-Z]$/{print }'          # 第一个域匹配正则\n        echo aada:aaba|awk '/d/&&/b/{print}'                   # 同时匹配两条件\n        awk 'length($1)==\"4\"{print $1}'                        # 字符串位数\n        awk '{if($2>3){system (\"touch \"$1)}}'                  # 执行系统命令\n        awk '{sub(/Mac/,\"Macintosh\",$0);print}'                # 用Macintosh替换Mac\n        awk '{gsub(/Mac/,\"MacIntosh\",$1); print}'              # 第一个域内用Macintosh替换Mac\n        awk -F '' '{ for(i=1;i<NF+1;i++)a+=$i  ;print a}'      # 多位数算出其每位数的总和.比如 1234， 得到 10\n        awk '{ i=$1%10;if ( i == 0 ) {print i}}'               # 判断$1是否整除(awk中定义变量引用时不能带 $ )\n        awk 'BEGIN{a=0}{if ($1>a) a=$1 fi}END{print a}'        # 列求最大值  设定一个变量开始为0，遇到比该数大的值，就赋值给该变量，直到结束\n        awk 'BEGIN{a=11111}{if ($1<a) a=$1 fi}END{print a}'    # 求最小值\n        awk '{if(A)print;A=0}/regexp/{A=1}'                    # 查找字符串并将匹配行的下一行显示出来，但并不显示匹配行\n        awk '/regexp/{print A}{A=$0}'                          # 查找字符串并将匹配行的上一行显示出来，但并不显示匹配行\n        awk '{if(!/mysql/)gsub(/1/,\"a\");print $0}'             # 将1替换成a，并且只在行中未出现字串mysql的情况下替换\n        awk 'BEGIN{srand();fr=int(100*rand());print fr;}'      # 获取随机数\n        awk '{if(NR==3)F=1}{if(F){i++;if(i%7==1)print}}'       # 从第3行开始，每7行显示一次\n        awk '{if(NF<1){print i;i=0} else {i++;print $0}}'      # 显示空行分割各段的行数\n        echo +null:null  |awk -F: '$1!~\"^+\"&&$2!=\"null\"{print $0}'       # 关键列同时匹配\n        awk -v RS=@ 'NF{for(i=1;i<=NF;i++)if($i) printf $i;print \"\"}'    # 指定记录分隔符\n        awk '{b[$1]=b[$1]$2}END{for(i in b){print i,b[i]}}'              # 列叠加\n        awk '{ i=($1%100);if ( $i >= 0 ) {print $0,$i}}'                 # 求余数\n        awk '{b=a;a=$1; if(NR>1){print a-b}}'                            # 当前行减上一行\n        awk '{a[NR]=$1}END{for (i=1;i<=NR;i++){print a[i]-a[i-1]}}'      # 当前行减上一行\n        awk -F: '{name[x++]=$1};END{for(i=0;i<NR;i++)print i,name[i]}'   # END只打印最后的结果,END块里面处理数组内容\n        awk '{sum2+=$2;count=count+1}END{print sum2,sum2/count}'         # $2的总和  $2总和除个数(平均值)\n        awk -v a=0 -F 'B' '{for (i=1;i<NF;i++){ a=a+length($i)+1;print a  }}'     # 打印所以B的所在位置\n        awk 'BEGIN{ \"date\" | getline d; split(d,mon) ; print mon[2]}' file        # 将date值赋给d，并将d设置为数组mon，打印mon数组中第2个元素\n        awk 'BEGIN{info=\"this is a test2010test!\";print substr(info,4,10);}'      # 截取字符串(substr使用)\n        awk 'BEGIN{info=\"this is a test2010test!\";print index(info,\"test\")?\"ok\":\"no found\";}'      # 匹配字符串(index使用)\n        awk 'BEGIN{info=\"this is a test2010test!\";print match(info,/[0-9]+/)?\"ok\":\"no found\";}'    # 正则表达式匹配查找(match使用)\n        awk '{for(i=1;i<=4;i++)printf $i\"\"FS; for(y=10;y<=13;y++)  printf $y\"\"FS;print \"\"}'        # 打印前4列和后4列\n        awk 'BEGIN{for(n=0;n++<9;){for(i=0;i++<n;)printf i\"x\"n\"=\"i*n\" \";print \"\"}}'                # 乘法口诀\n        awk 'BEGIN{info=\"this is a test\";split(info,tA,\" \");print length(tA);for(k in tA){print k,tA[k];}}'             # 字符串分割(split使用)\n        awk '{if (system (\"grep \"$2\" tmp/* > /dev/null 2>&1\") == 0 ) {print $1,\"Y\"} else {print $1,\"N\"} }' a            # 执行系统命令判断返回状态\n        awk  '{for(i=1;i<=NF;i++) a[i,NR]=$i}END{for(i=1;i<=NF;i++) {for(j=1;j<=NR;j++) printf a[i,j] \" \";print \"\"}}'   # 将多行转多列\n        netstat -an|awk -v A=$IP -v B=$PORT 'BEGIN{print \"Clients\\tGuest_ip\"}$4~A\":\"B{split($5,ip,\":\");a[ip[1]]++}END{for(i in a)print a[i]\"\\t\"i|\"sort -nr\"}'    # 统计IP连接个数\n        cat 1.txt|awk -F\" # \" '{print \"insert into user (user,password,email)values(\"\"'\\''\"$1\"'\\'\\,'\"\"'\\''\"$2\"'\\'\\,'\"\"'\\''\"$3\"'\\'\\)\\;'\"}' >>insert_1.txt     # 处理sql语句\n        awk 'BEGIN{printf \"what is your name?\";getline name < \"/dev/tty\" } $1 ~name {print \"FOUND\" name \" on line \", NR \".\"} END{print \"see you,\" name \".\"}' file  # 两文件匹配\n        取本机IP{\n            /sbin/ifconfig |awk -v RS=\"Bcast:\" '{print $NF}'|awk -F: '/addr/{print $2}'\n            /sbin/ifconfig |awk '/inet/&&$2!~\"127.0.0.1\"{split($2,a,\":\");print a[2]}'\n            /sbin/ifconfig |awk -v RS='inet addr:' '$1!=\"eth0\"&&$1!=\"127.0.0.1\"{print $1}'|awk '{printf\"%s|\",$0}'\n            /sbin/ifconfig |awk  '{printf(\"line %d,%s\\n\",NR,$0)}'         # 指定类型(%d数字,%s字符)\n        }\n        查看磁盘空间{\n            df -h|awk -F\"[ ]+|%\" '$5>14{print $5}'\n            df -h|awk 'NR!=1{if ( NF == 6 ) {print $5} else if ( NF == 5) {print $4} }'\n            df -h|awk 'NR!=1 && /%/{sub(/%/,\"\");print $(NF-1)}'\n            df -h|sed '1d;/ /!N;s/\\n//;s/ \\+/ /;'    #将磁盘分区整理成一行   可直接用 df -P\n        }\n        排列打印{\n            awk 'END{printf \"%-10s%-10s\\n%-10s%-10s\\n%-10s%-10s\\n\",\"server\",\"name\",\"123\",\"12345\",\"234\",\"1234\"}' txt\n            awk 'BEGIN{printf \"|%-10s|%-10s|\\n|%-10s|%-10s|\\n|%-10s|%-10s|\\n\",\"server\",\"name\",\"123\",\"12345\",\"234\",\"1234\"}'\n            awk 'BEGIN{\n            print \"   *** 开 始 ***   \";\n            print \"+-----------------+\";\n            printf \"|%-5s|%-5s|%-5s|\\n\",\"id\",\"name\",\"ip\";\n            }\n            $1!=1 && NF==4{printf \"|%-5s|%-5s|%-5s|\\n\",$1,$2,$3\" \"$11}\n            END{\n            print \"+-----------------+\";\n            print \"   *** 结 束 ***   \"\n            }' txt\n        }\n        awk经典题{\n            分析图片服务日志，把日志（每个图片访问次数*图片大小的总和）排行，也就是计算每个url的总访问大小\n            说明：本题生产环境应用：这个功能可以用于IDC网站流量带宽很高，然后通过分析服务器日志哪些元素占用流量过大，进而进行优化或裁剪该图片，压缩js等措施。\n            本题需要输出三个指标： 【被访问次数】    【访问次数*单个被访问文件大小】   【文件名（带URL）】\n            测试数据\n            59.33.26.105 - - [08/Dec/2010:15:43:56 +0800] \"GET /static/images/photos/2.jpg HTTP/1.1\" 200 11299\n            awk '{array_num[$7]++;array_size[$7]+=$10}END{for(i in array_num) {print array_num[i]\" \"array_size[i]\" \"i}}'\n        }\n        awk练习题{\n            wang     4\n            cui      3\n            zhao     4\n            liu      3\n            liu      3\n            chang    5\n            li       2\n            1 通过第一个域找出字符长度为4的\n            2 当第二列值大于3时，创建空白文件，文件名为当前行第一个域$1 (touch $1)\n            3 将文档中 liu 字符串替换为 hong\n            4 求第二列的和\n            5 求第二列的平均值\n            6 求第二列中的最大值\n            7 将第一列过滤重复后，列出每一项，每一项的出现次数，每一项的大小总和\n            1、字符串长度\n                awk 'length($1)==\"4\"{print $1}'\n            2、执行系统命令\n                awk '{if($2>3){system (\"touch \"$1)}}'\n            3、gsub(/r/,\"s\",域) 在指定域(默认$0)中用s替代r  (sed 's///g')\n                awk '{gsub(/liu/,\"hong\",$1);print $0}' a.txt\n            4、列求和\n                awk '{a+=$2}END{print a}'\n            5、列求平均值\n                awk '{a+=$2}END{print a/NR}'\n                awk '{a+=$2;b++}END{print a,a/b}'\n            6、列求最大值\n                awk 'BEGIN{a=0}{if($2>a) a=$2 }END{print a}'\n            7、将第一列过滤重复列出每一项，每一项的出现次数，每一项的大小总和\n                awk '{a[$1]++;b[$1]+=$2}END{for(i in a){print i,a[i],b[i]}}'\n        }\n        awk处理复杂日志{\n            6.19：\n            DHB_014_号百总机服务业务日报：广州 到达数异常！\n            DHB_023_号百漏话提醒日报：珠海 到达数异常！\n            6.20：\n            DHB_014_号百总机服务业务日报：广州 到达数异常！到\n            awk -F '[_ ：]+' 'NF>2{print $4,$1\"_\"$2,b |\"sort\";next}{b=$1}'\n            # 当前行NF小于等于2 只针对{print $4,$1\"_\"$2,b |\"sort\";next} 有效 即 6.19：行跳过此操作,  {b=$1} 仍然执行\n            # 当前行NF大于2 执行到 next 强制跳过本行，即跳过后面的 {b=$1}\n            广州 DHB_014 6.19\n        }\n    }\n    sed{\n        # 先读取资料、存入模式空间、对其进行编辑、再输出、再用下一行替换模式空间内容\n        # 调试工具sedsed (参数 -d)   http://aurelio.net/sedsed/sedsed-1.0\n        -n   # 输出由编辑指令控制(取消默认的输出,必须与编辑指令一起配合)\n        -i   # 直接对文件操作\n        -e   # 多重编辑\n        -r   # 正则可不转移特殊字符\n        b    # 跳过匹配的行\n        p    # 打印\n        d    # 删除\n        s    # 替换\n        g    # 配合s全部替换\n        i    # 行前插入\n        a    # 行后插入\n        r    # 读\n        y    # 转换\n        q    # 退出\n        &    # 代表查找的串内容\n        *    # 任意多个 前驱字符(前导符)\n        ?    # 0或1个 最小匹配 没加-r参数需转义 \\?\n        $    # 最后一行\n        .*   # 匹配任意多个字符\n        \\(a\\)   # 保存a作为标签1(\\1)\n        模式空间{\n            # 模式空间(两行两行处理) 模式匹配的范围，一般而言，模式空间是输入文本中某一行，但是可以通过使用N函数把多于一行读入模式空间\n            # 暂存空间里默认存储一个空行\n            n   # 读入下一行(覆盖上一行)\n            h   # 把模式空间里的行拷贝到暂存空间\n            H   # 把模式空间里的行追加到暂存空间\n            g   # 用暂存空间的内容替换模式空间的行\n            G   # 把暂存空间的内容追加到模式空间的行后\n            x   # 将暂存空间的内容于模式空间里的当前行互换\n            ！  # 对其前面的要匹配的范围取反\n            D   # 删除当前模式空间中直到并包含第一个换行符的所有字符(/.*/匹配模式空间中所有内容，匹配到就执行D,没匹配到就结束D)\n            N   # 追加下一个输入行到模式空间后面并在第二者间嵌入一个换行符，改变当前行号码,模式匹配可以延伸跨域这个内嵌换行\n            p   # 打印模式空间中的直到并包含第一个换行的所有字符\n        }\n        标签函数{\n            : lable # 建立命令标记，配合b，t函数使用跳转\n            b lable # 分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。\n            t labe  # 判断分支，从最后一行开始，条件一旦满足或者T,t命令，将导致分支到带有标号的命令出，或者到脚本末尾。与b函数不同在于t在执行跳转前会先检查其前一个替换命令是否成功，如成功，则执行跳转。\n            sed -e '{:p1;/A/s/A/AA/;/B/s/B/BB/;/[AB]\\{10\\}/b;b p1;}'     # 文件内容第一行A第二行B:建立标签p1;两个替换函数(A替换成AA,B替换成BB)当A或者B达到10个以后调用b,返回\n            echo 'sd  f   f   [a    b      c    cddd    eee]' | sed ':n;s#\\(\\[[^ ]*\\)  *#\\1#;tn'  # 标签函数t使用方法,替换[]里的空格\n            echo \"198723124.03\"|sed -r ':a;s/([0-9]+)([0-9]{3})/\\1,\\2/;ta'  # 每三个字符加一个逗号\n        }\n        引用外部变量{\n            sed -n ''$a',10p'\n            sed -n \"\"$a\",10p\"\n        }\n\t\tsed -e 's/[()]//g'                            # 去除两边括号取得括号内内容\n        sed 10q                                       # 显示文件中的前10行 (模拟\"head\")\n        sed -n '$='                                   # 计算行数(模拟 \"wc -l\")\n        sed -n '5,/^no/p'                             # 打印从第5行到以no开头行之间的所有行\n        sed -i \"/^$f/d\" a     　　                  　 # 删除匹配行\n        sed -i '/aaa/,$d'                             # 删除匹配行到末尾\n        sed -i \"s/=/:/\" c                             # 直接对文本替换\n        sed -i \"/^pearls/s/$/j/\"                      # 找到pearls开头在行尾加j\n        sed '/1/,/3/p' file                           # 打印1和3之间的行\n        sed -n '1p' file                              # 取出指定行\n        sed '5i\\aaa' file                             # 在第5行之前插入行\n        sed '5a\\aaa' file                             # 在第5行之后抽入行\n        echo a|sed -e '/a/i\\b'                        # 在匹配行前插入一行\n        echo a|sed -e '/a/a\\b'                        # 在匹配行后插入一行\n        echo a|sed 's/a/&\\nb/g'                       # 在匹配行后插入一行\n        seq 10| sed -e{1,3}'s/./a/'                   # 匹配1和3行替换\n        sed -n '/regexp/!p'                           # 只显示不匹配正则表达式的行\n        sed '/regexp/d'                               # 只显示不匹配正则表达式的行\n        sed '$!N;s/\\n//'                              # 将每两行连接成一行\n        sed '/baz/s/foo/bar/g'                        # 只在行中出现字串\"baz\"的情况下将\"foo\"替换成\"bar\"\n        sed '/baz/!s/foo/bar/g'                       # 将\"foo\"替换成\"bar\"，并且只在行中未出现字串\"baz\"的情况下替换\n        echo a|sed -e 's/a/#&/g'                      # 在a前面加#号\n        sed 's/foo/bar/4'                             # 只替换每一行中的第四个字串\n        sed 's/\\(.*\\)foo/\\1bar/'                      # 替换每行最后一个字符串\n        sed 's/\\(.*\\)foo\\(.*foo\\)/\\1bar\\2/'           # 替换倒数第二个字符串\n        sed 's/[0-9][0-9]$/&5'                        # 在以[0-9][0-9]结尾的行后加5\n        sed -n ' /^eth\\|em[01][^:]/{n;p;}'            # 匹配多个关键字\n        sed -n -r ' /eth|em[01][^:]/{n;p;}'           # 匹配多个关键字\n        echo -e \"1\\n2\"|xargs -i -t sed 's/^/1/' {}    # 同时处理多个文件\n        sed '/west/,/east/s/$/*VACA*/'                # 修改west和east之间的所有行，在结尾处加*VACA*\n        sed  's/[^1-9]*\\([0-9]\\+\\).*/\\1/'             # 取出第一组数字，并且忽略掉开头的0\n        sed -n '/regexp/{g;1!p;};h'                   # 查找字符串并将匹配行的上一行显示出来，但并不显示匹配行\n        sed -n ' /regexp/{n;p;}'                      # 查找字符串并将匹配行的下一行显示出来，但并不显示匹配行\n        sed -n 's/\\(mar\\)got/\\1ianne/p'               # 保存\\(mar\\)作为标签1\n        sed -n 's/\\([0-9]\\+\\).*\\(t\\)/\\2\\1/p'          # 保存多个标签\n        sed -i -e '1,3d' -e 's/1/2/'                  # 多重编辑(先删除1-3行，在将1替换成2)\n        sed -e 's/@.*//g' -e '/^$/d'                  # 删除掉@后面所有字符，和空行\n        sed -n -e \"{s/^ *[0-9]*//p}\"                  # 打印并删除正则表达式的那部分内容\n        echo abcd|sed 'y/bd/BE/'                      # 匹配字符替换\n        sed '/^#/b;y/y/P/' 2                          # 非#号开头的行替换字符\n        sed '/suan/r readfile'                        # 找到含suan的行，在后面加上读入的文件内容\n        sed -n '/no/w writefile'                      # 找到含no的行，写入到指定文件中\n        sed '/regex/G'                                # 在匹配式样行之后插入一空行\n        sed '/regex/{x;p;x;G;}'                       # 在匹配式样行之前和之后各插入一空行\n        sed 'n;d'                                     # 删除所有偶数行\n        sed 'G;G'                                     # 在每一行后面增加两空行\n        sed '/^$/d;G'                                 # 在输出的文本中每一行后面将有且只有一空行\n        sed 'n;n;n;n;G;'                              # 在每5行后增加一空白行\n        sed -n '5~5p'                                 # 只打印行号为5的倍数\n        seq 1 30|sed  '5~5s/.*/a/'                    # 倍数行执行替换\n        sed -n '3,${p;n;n;n;n;n;n;}'                  # 从第3行开始，每7行显示一次\n        sed -n 'h;n;G;p'                              # 奇偶调换\n        seq 1 10|sed '1!G;h;$!d'                      # 倒叙排列\n        ls -l|sed -n '/^.rwx.*/p'                     # 查找属主权限为7的文件\n        sed = filename | sed 'N;s/\\n/\\t/'             # 为文件中的每一行进行编号(简单的左对齐方式)\n        sed 's/^[ \\t]*//'                             # 将每一行前导的\"空白字符\"(空格，制表符)删除,使之左对齐\n        sed 's/^[ \\t]*//;s/[ \\t]*$//'                 # 将每一行中的前导和拖尾的空白字符删除\n        sed '/{abc,def\\}\\/\\[111,222]/s/^/00000/'      # 匹配需要转行的字符: } / [\n        echo abcd\\\\nabcde |sed 's/\\\\n/@/g' |tr '@' '\\n'        # 将换行符转换为换行\n        cat tmp|awk '{print $1}'|sort -n|sed -n '$p'           # 取一列最大值\n        sed -n '{s/^[^\\/]*//;s/\\:.*//;p}' /etc/passwd          # 取用户家目录(匹配不为/的字符和匹配:到结尾的字符全部删除)\n        sed = filename | sed 'N;s/^/      /; s/ *\\(.\\{6,\\}\\)\\n/\\1   /'   # 对文件中的所有行编号(行号在左，文字右端对齐)\n        /sbin/ifconfig |sed 's/.*inet addr:\\(.*\\) Bca.*/\\1/g' |sed -n '/eth/{n;p}'   # 取所有IP\n        修改keepalive配置剔除后端服务器{\n            sed -i '/real_server.*10.0.1.158.*8888/,+8 s/^/#/' keepalived.conf\n            sed -i '/real_server.*10.0.1.158.*8888/,+8 s/^#//' keepalived.conf\n        }\n        模仿rev功能{\n            echo 123 |sed '/\\n/!G;s/\\(.\\)\\(.*\\n\\)/&\\2\\1/;//D;s/.//;'\n            /\\n/!G;         　　　　　　# 没有\\n换行符，要执行G,因为保留空间中为空，所以在模式空间追加一空行\n            s/\\(.\\)\\(.*\\n\\)/&\\2\\1/;     # 标签替换 &\\n23\\n1$ (关键在于& ,可以让后面//匹配到空行)\n            //D;            　　　　　　# D 命令会引起循环删除模式空间中的第一部分，如果删除后，模式空间中还有剩余行，则返回 D 之前的命令，重新执行，如果 D 后，模式空间中没有任何内容，则将退出。  //D 匹配空行执行D,如果上句s没有匹配到,//也无法匹配到空行, \"//D;\"命令结束\n            s/.//;          　　　　　　# D结束后,删除开头的 \\n\n        }\n    }\n    xargs{\n        # 命令替换\n        -t 先打印命令，然后再执行\n        -i 用每项替换 {}\n        find / -perm +7000 | xargs ls -l                    # 将前面的内容，作为后面命令的参数\n        seq 1 10 |xargs  -i date -d \"{} days \" +%Y-%m-%d    # 列出10天日期\n    }\n\tfind /data/records/ -mtime +3 -name \"*-*-*-*-*\"|xargs rm -rf\n\t*/5 * * * * find /data/record/tmp -mmin +120 |grep -E \".jpg|.mp4|.txt|.jpg|.ts|.m3u8|.png\"|xargs rm -f   ### 每隔5分钟，删除带有指定后缀且超过120分钟以上的文件\n\tfind /data/website*/storage/logs/ -mmin +360 -size +5G -name \"*.log\"|xargs -I {} truncate -s 0 {}\n    find /data/website*/storage/logs/ -mtime +1 -size +10M -name \"*.log\"|xargs gzip -9\n\t\n\t\n    dialog菜单{\n        # 默认将所有输出用 stderr 输出，不显示到屏幕   使用参数  --stdout 可将选择赋给变量\n        # 退出状态  0正确  1错误\n        窗体类型{\n            --calendar          # 日历\n            --checklist         # 允许你显示一个选项列表，每个选项都可以被单独的选择 (复选框)\n            --form              # 表单,允许您建立一个带标签的文本字段，并要求填写\n            --fselect           # 提供一个路径，让你选择浏览的文件\n            --gauge             # 显示一个表，呈现出完成的百分比，就是显示出进度条。\n            --infobox           # 显示消息后，（没有等待响应）对话框立刻返回，但不清除屏幕(信息框)\n            --inputbox          # 让用户输入文本(输入框)\n            --inputmenu         # 提供一个可供用户编辑的菜单（可编辑的菜单框）\n            --menu              # 显示一个列表供用户选择(菜单框)\n            --msgbox(message)   # 显示一条消息,并要求用户选择一个确定按钮(消息框)\n            --password          # 密码框，显示一个输入框，它隐藏文本\n            --pause             # 显示一个表格用来显示一个指定的暂停期的状态\n            --radiolist         # 提供一个菜单项目组，但是只有一个项目，可以选择(单选框)\n            --tailbox           # 在一个滚动窗口文件中使用tail命令来显示文本\n            --tailboxbg         # 跟tailbox类似，但是在background模式下操作\n            --textbox           # 在带有滚动条的文本框中显示文件的内容  (文本框)\n            --timebox           # 提供一个窗口，选择小时，分钟，秒\n            --yesno(yes/no)     # 提供一个带有yes和no按钮的简单信息框\n        }\n        窗体参数{\n            --separate-output          # 对于chicklist组件,输出结果一次输出一行,得到结果不加引号\n            --ok-label \"提交\"          # 确定按钮名称\n            --cancel-label \"取消\"      # 取消按钮名称\n            --title \"标题\"             # 标题名称\n            --stdout                   # 将所有输出用 stdout 输出\n            --backtitle \"上标\"         # 窗体上标\n            --no-shadow                # 去掉窗体阴影\n            --menu \"菜单名\" 20 60 14   # 菜单及窗口大小\n            --clear                    # 完成后清屏操作\n            --no-cancel                # 不显示取消项\n            --insecure                 # 使用星号来代表每个字符\n            --begin <y> <x>            # 指定对话框左上角在屏幕的上的做坐标\n            --timeout <秒>             # 超时,返回的错误代码255,如果用户在指定的时间内没有给出相应动作,就按超时处理\n            --defaultno                # 使选择默认为no\n            --default-item <str>       # 设置在一份清单，表格或菜单中的默认项目。通常在框中的第一项是默认\n            --sleep 5                  # 在处理完一个对话框后静止(延迟)的时间(秒)\n            --max-input size           # 限制输入的字符串在给定的大小之内。如果没有指定，默认是2048\n            --keep-window              # 退出时不清屏和重绘窗口。当几个组件在同一个程序中运行时，对于保留窗口内容很有用的\n        }\n        dialog --title \"Check me\" --checklist \"Pick Numbers\" 15 25 3 1 \"one\" \"off\" 2 \"two\" \"on\"         # 多选界面[方括号]\n        dialog --title \"title\" --radiolist \"checklist\" 20 60 14 tag1 \"item1\" on tag2 \"item2\" off        # 单选界面(圆括号)\n        dialog --title \"title\" --menu \"MENU\" 20 60 14 tag1 \"item1\" tag2 \"item2\"                         # 单选界面\n        dialog --title \"Installation\" --backtitle \"Star Linux\" --gauge \"Linux Kernel\"  10 60 50         # 进度条\n        dialog --title \"标题\" --backtitle \"Dialog\" --yesno \"说明\" 20 60                                 # 选择yes/no\n        dialog --title \"公告标题\" --backtitle \"Dialog\" --msgbox \"内容\" 20 60                            # 公告\n        dialog --title \"hey\" --backtitle \"Dialog\" --infobox \"Is everything okay?\" 10 60                 # 显示讯息后立即离开\n        dialog --title \"hey\" --backtitle \"Dialog\" --inputbox \"Is okay?\" 10 60 \"yes\"                     # 输入对话框\n        dialog --title \"Array 30\" --backtitle \"All \" --textbox /root/txt 20 75                          # 显示文档内容\n        dialog --title \"Add\" --form \"input\" 12 40 4 \"user\" 1 1 \"\" 1 15 15 0 \"name\" 2 1 \"\" 2 15 15 0     # 多条输入对话框\n        dialog --title  \"Password\"  --insecure  --passwordbox  \"请输入密码\"  10  35                     # 星号显示输入--insecure\n        dialog --stdout --title \"日历\"  --calendar \"请选择\" 0 0 9 1 2010                                # 选择日期\n        dialog --title \"title\" --menu \"MENU\" 20 60 14 tag1 \"item1\" tag2 \"item2\" 2>tmp                   # 取到结果放到文件中(以标准错误输出结果)\n        a=`dialog --title \"title\"  --stdout --menu \"MENU\" 20 60 14 tag1 \"item1\" tag2 \"item2\"`           # 选择操作赋给变量(使用标准输出)\n        dialog菜单实例{\n            while :\n            do\n            clear\n            menu=`dialog --title \"title\"  --stdout --menu \"MENU\" 20 60 14 1 system 2 custom`\n            [ $? -eq 0 ] && echo \"$menu\" || exit         # 判断dialog执行,取消退出\n                while :\n                do\n                    case $menu in\n                    1)\n                        list=\"1a \"item1\" 2a \"item2\"\"     # 定义菜单列表变量\n                    ;;\n                    2)\n                        list=\"1b \"item3\" 2b \"item4\"\"\n                    ;;\n                    esac\n                    result=`dialog --title \"title\"  --stdout --menu \"MENU\" 20 60 14 $list`\n                    [ $? -eq 0 ] && echo \"$result\" || break    # 判断dialog执行,取消返回菜单,注意:配合上层菜单循环\n                    read\n                done\n            done\n        }\n    }\n    select菜单{\n        # 输入项不在菜单自动会提示重新输入\n        select menuitem in pick1 pick2 pick3 退出\n        do\n            echo $menuitem\n            case $menuitem in\n            退出)\n                exit\n            ;;\n            *)\n                select area in area1 area2 area3 返回\n                do\n                    echo $area\n                    case $area in\n                    返回)\n                        break\n                    ;;\n                    *)\n                        echo \"对$area操作\"\n                    ;;\n                    esac\n                done\n            ;;\n            esac\n        done\n    }\n    shift{\n        ./cs.sh 1 2 3\n        #!/bin/sh\n        until [ $# -eq 0 ]\n        do\n            echo \"第一个参数为: $1 参数个数为: $#\"\n            #shift 命令执行前变量 $1 的值在shift命令执行后不可用\n            shift\n        done\n    }\n    getopts给脚本加参数{\n        #!/bin/sh\n        while getopts :ab: name\n        do\n            case $name in\n            a)\n                aflag=1\n            ;;\n            b)\n                bflag=1\n                bval=$OPTARG\n            ;;\n            \\?)\n                echo \"USAGE:`basename $0` [-a] [-b value]\"\n                exit  1\n            ;;\n            esac\n        done\n        if [ ! -z $aflag ] ; then\n            echo \"option -a specified\"\n            echo \"$aflag\"\n            echo \"$OPTIND\"\n        fi\n        if [ ! -z $bflag ] ; then\n            echo  \"option -b specified\"\n            echo  \"$bflag\"\n            echo  \"$bval\"\n            echo  \"$OPTIND\"\n        fi\n        echo \"here  $OPTIND\"\n        shift $(($OPTIND -1))\n        echo \"$OPTIND\"\n        echo \" `shift $(($OPTIND -1))`  \"\n    }\n    tclsh{\n        set foo \"a bc\"                   # 定义变量\n        set b {$a};                      # 转义  b的值为\" $a \" ,而不是变量结果\n        set a 3; incr a 3;               # 数字的自增.  将a加3,如果要减3,则为 incr a –3;\n        set c [expr 20/5];               # 计算  c的值为4\n        puts $foo;                       # 打印变量\n        set qian(123) f;                 # 定义数组\n        set qian(1,1,1) fs;              # 多维数组\n        parray qian;                     # 打印数组的所有信息\n        string length $qian;             # 将返回变量qian的长度\n        string option string1 string2;   # 字符相关串操作\n        # option 的操作选项:\n        # compare           按照字典的排序方式进行比较。根据string1 <,=,>string2分别返回-1,0,1\n        # first             返回string2中第一次出现string1的位置，如果没有出现string1则返回-1\n        # last              和first相反\n        # trim              从string1中删除开头和结尾的出现在string2中的字符\n        # tolower           返回string1中的所有字符被转换为小写字符后的新字符串\n        # toupper           返回string1中的所有字符串转换为大写后的字符串\n        # length            返回string1的长度\n        set a 1;while {$a < 3} { set a [incr a 1;]; };puts $a    # 判断变量a小于3既循环\n        for {initialization} {condition} {increment} {body}      # 初始化变量,条件,增量,具体操作\n        for {set i 0} {$i < 10} {incr i} {puts $i;}              # 将打印出0到9\n        if { 表达式 } {\n             #运算;\n        } else {\n             #其他运算;\n        }\n        switch $x {\n            字符串1 { 操作1 ;}\n            字符串2 { 操作2 ;}\n        }\n        foreach element {0 m n b v} {\n        # 将在一组变元中进行循环，并且每次都将执行他的循环体\n               switch $element {\n                     # 判断element的值\n             }\n        }\n        expect交互{\n            exp_continue         # 多个spawn命令时并行\n            interact             # 执行完成后保持交互状态，把控制权交给控制台\n            expect \"password:\"   # 判断关键字符\n            send \"passwd\\r\"      # 执行交互动作，与手工输入密码的动作等效。字符串结尾加\"\\r\"\n            ssh后sudo{\n                #!/bin/bash\n                #sudo注释下行允许后台运行\n                #Defaults requiretty\n                #sudo去掉!允许远程\n                #Defaults !visiblepw\n                /usr/bin/expect -c '\n                set timeout 5\n                spawn ssh -o StrictHostKeyChecking=no xuesong1@192.168.42.128 \"sudo grep xuesong1 /etc/passwd\"\n                expect {\n                    \"passphrase\" {\n                        send_user \"sshkey\\n\"\n                        send \"xuesong\\r\";\n                        expect {\n                            \"sudo\" {\n                            send_user \"sudo\\n\"\n                            send \"xuesong\\r\"\n                            interact\n                            }\n                            eof {\n                            send_user \"sudo eof\\n\"\n                            }\n                        }\n                    }\n                    \"password:\" {\n                        send_user \"ssh\\n\"\n                        send \"xuesong\\r\";\n                        expect {\n                            \"sudo\" {\n                            send_user \"sudo\\n\"\n                            send \"xuesong\\r\"\n                            interact\n                            }\n                            eof {\n                            send_user \"sudo eof\\n\"\n                            }\n                        }\n                    }\n                    \"sudo\" {\n                            send_user \"sudo\\n\"\n                            send \"xuesong\\r\"\n                            interact\n                            }\n                    eof {\n                        send_user \"ssh eof\\n\"\n                    }\n                }\n                '\n            }\n            ssh执行命令操作{\n                /usr/bin/expect -c \"\n                proc jiaohu {} {\n                    send_user expect_start\n                    expect {\n                        password {\n                            send ${RemotePasswd}\\r;\n                            send_user expect_eof\n                            expect {\n                                \\\"does not exist\\\" {\n                                    send_user expect_failure\n                                    exit 10\n                                }\n                                password {\n                                    send_user expect_failure\n                                    exit 5\n                                }\n                                Password {\n                                    send ${RemoteRootPasswd}\\r;\n                                    send_user expect_eof\n                                    expect {\n                                        incorrect {\n                                            send_user expect_failure\n                                            exit 6\n                                        }\n                                        eof\n                                    }\n                                }\n                                eof\n                            }\n                        }\n                        passphrase {\n                            send ${KeyPasswd}\\r;\n                            send_user expect_eof\n                            expect {\n                                \\\"does not exist\\\" {\n                                    send_user expect_failure\n                                    exit 10\n                                }\n                                passphrase{\n                                    send_user expect_failure\n                                    exit 7\n                                }\n                                Password {\n                                    send ${RemoteRootPasswd}\\r;\n                                    send_user expect_eof\n                                    expect {\n                                        incorrect {\n                                            send_user expect_failure\n                                            exit 6\n                                        }\n                                        eof\n                                    }\n                                }\n                                eof\n                            }\n                        }\n                        Password {\n                            send ${RemoteRootPasswd}\\r;\n                            send_user expect_eof\n                            expect {\n                                incorrect {\n                                    send_user expect_failure\n                                    exit 6\n                                }\n                                eof\n                            }\n                        }\n                        \\\"No route to host\\\" {\n                            send_user expect_failure\n                            exit 4\n                        }\n                        \\\"Invalid argument\\\" {\n                            send_user expect_failure\n                            exit 8\n                        }\n                        \\\"Connection refused\\\" {\n                            send_user expect_failure\n                            exit 9\n                        }\n                        \\\"does not exist\\\" {\n                            send_user expect_failure\n                            exit 10\n                        }\n                        \\\"Connection timed out\\\" {\n                            send_user expect_failure\n                            exit 11\n                        }\n                        timeout {\n                            send_user expect_failure\n                            exit 3\n                        }\n                        eof\n                    }\n                }\n                set timeout $TimeOut\n                switch $1 {\n                    Ssh_Cmd {\n                        spawn ssh -t -p $Port -o StrictHostKeyChecking=no $RemoteUser@$Ip /bin/su - root -c \\\\\\\"$Cmd\\\\\\\"\n                        jiaohu\n                    }\n                    Ssh_Script {\n                        spawn scp -P $Port -o StrictHostKeyChecking=no $ScriptPath $RemoteUser@$Ip:/tmp/${ScriptPath##*/};\n                        jiaohu\n                        spawn ssh -t -p $Port -o StrictHostKeyChecking=no $RemoteUser@$Ip /bin/su - root -c  \\\\\\\"/bin/sh /tmp/${ScriptPath##*/}\\\\\\\" ;\n                        jiaohu\n                    }\n                    Scp_File {\n                        spawn scp -P $Port -o StrictHostKeyChecking=no -r $ScpPath $RemoteUser@$Ip:${ScpRemotePath};\n                        jiaohu\n                    }\n                }\n                \"\n                state=`echo $?`\n            }\n            交互双引号引用较长变量{\n                #!/bin/bash\n                RemoteUser=xuesong12\n                Ip=192.168.1.2\n                RemotePasswd=xuesong\n                Cmd=\"/bin/echo \"$PubKey\" > \"$RemoteKey\"/authorized_keys\"\n                /usr/bin/expect -c \"\n                set timeout 10\n                spawn ssh -o StrictHostKeyChecking=no $RemoteUser@$Ip {$Cmd};\n                expect {\n                    password: {\n                        send_user RemotePasswd\\n\n                        send ${RemotePasswd}\\r;\n                        interact;\n                    }\n                    eof {\n                        send_user eof\\n\n                    }\n                }\n                \"\n            }\n            telnet交互{\n                #!/bin/bash\n                Ip=\"10.0.1.53\"\n                a=\"\\{\\'method\\'\\:\\'doLogin\\'\\,\\'params\\'\\:\\{\\'uName\\'\\:\\'bobbietest\\'\\}\"\n                /usr/bin/expect -c\"\n                        set timeout 15\n                        spawn telnet ${Ip} 8000\n                        expect \"Escape\"\n                        send \"${a}\\\\r\"\n                        expect {\n                                -re \"\\\"err.*none\\\"\" {\n                                        exit 0\n                                }\n                                timeout {\n                                        exit 1\n                                }\n                                eof {\n                                        exit 2\n                                }\n                        }\n                \"\n                echo $?\n            }\n            模拟ssh登录{\n                #好处:可加载环境变量\n                #!/bin/bash\n                Ip='192.168.1.6'            # 循环就行\n                RemoteUser='user'           # 普通用户\n                RemotePasswd='userpasswd'   # 普通用户的密码\n                RemoteRootPasswd='rootpasswd'\n                /usr/bin/expect -c \"\n                set timeout -1\n                spawn ssh -t -p $Port -o StrictHostKeyChecking=no $RemoteUser@$Ip\n                expect {\n                    password {\n                        send_user RemotePasswd\n                        send ${RemotePasswd}\\r;\n                        expect {\n                            \\\"does not exist\\\" {\n                                send_user \\\"root user does not exist\\n\\\"\n                                exit 10\n                            }\n                            password {\n                                send_user \\\"user passwd error\\n\\\"\n                                exit 5\n                            }\n                            Last {\n                                send \\\"su - batch\\n\\\"\n                                expect {\n                                    Password {\n                                        send_user RemoteRootPasswd\n                                        send ${RemoteRootPasswd}\\r;\n                                        expect {\n                                            \\\"]#\\\" {\n                                                send \\\"sh /tmp/update.sh update\\n \\\"\n                                                expect {\n                                                    \\\"]#\\\" {\n                                                        send_user ${Ip}_Update_Done\\n\n                                                    }\n                                                    eof\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    \\\"No route to host\\\" {\n                        send_user \\\"host not found\\n\\\"\n                        exit 4\n                    }\n                    \\\"Invalid argument\\\" {\n                        send_user \\\"incorrect parameter\\n\\\"\n                        exit 8\n                    }\n                    \\\"Connection refused\\\" {\n                        send_user \\\"invalid port parameters\\n\\\"\n                        exit 9\n                    }\n                    \\\"does not exist\\\" {\n                        send_user \\\"root user does not exist\\\"\n                        exit 10\n                    }\n                    timeout {\n                        send_user \\\"connection timeout \\n\\\"\n                        exit 3\n                    }\n                    eof\n                }\n                \"\n                state=`echo $?`\n            }\n        }\n    }\n}\n9 实例{\n    从1叠加到100{\n        echo $[$(echo +{1..100})]\n        echo $[(100+1)*(100/2)]\n        seq -s '+' 100 |bc\n    }\n    判断参数是否为空-空退出并打印null{\n        #!/bin/sh\n        echo $1\n        name=${1:?\"null\"}\n        echo $name\n    }\n    循环数组{\n        for ((i=0;i<${#o[*]};i++))\n        do\n            echo ${o[$i]}\n        done\n    }\n    判断路径{\n        if [ -d /root/Desktop/text/123 ];then\n            echo \"找到了123\"\n            if [ -d /root/Desktop/text ]\n            then echo \"找到了text\"\n            else echo \"没找到text\"\n            fi\n        else echo \"没找到123文件夹\"\n        fi\n    }\n    找出出现次数最多{\n        awk '{print $1}' file|sort |uniq -c|sort -k1r\n    }\n\t统计某一类进程占用内存总和{\n\t    ps aux|grep java|awk '{sum +=$6};END {print sum}'\n\t}\n    判断脚本参数是否正确{\n        ./test.sh  -p 123 -P 3306 -h 127.0.0.1 -u root\n        #!/bin/sh\n        if [ $# -ne 8 ];then\n            echo \"USAGE: $0 -u user -p passwd -P port -h host\"\n            exit 1\n        fi\n        while getopts :u:p:P:h: name\n        do\n            case $name in\n            u)\n                mysql_user=$OPTARG\n            ;;\n            p)\n                mysql_passwd=$OPTARG\n            ;;\n            P)\n                mysql_port=$OPTARG\n            ;;\n            h)\n                mysql_host=$OPTARG\n            ;;\n            *)\n                echo \"USAGE: $0 -u user -p passwd -P port -h host\"\n                exit 1\n            ;;\n            esac\n        done\n        if [ -z $mysql_user ] || [ -z $mysql_passwd ] || [ -z $mysql_port ] || [ -z $mysql_host ]\n        then\n            echo \"USAGE: $0 -u user -p passwd -P port -h host\"\n            exit 1\n        fi\n        echo $mysql_user $mysql_passwd $mysql_port  $mysql_host\n        #结果 root 123 3306 127.0.0.1\n    }\n    正则匹配邮箱{\n        ^[_a-z0-9-]+(\\.[_a-z0-9-]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*(\\.[a-z]{2,4})$\n    }\n    打印表格{\n        #!/bin/sh\n        clear\n        awk 'BEGIN{\n        print \"+--------------------+--------------------+\";\n        printf \"|%-20s|%-20s|\\n\",\"Name\",\"Number\";\n        print \"+--------------------+--------------------+\";\n        }'\n        a=`grep \"^[A-Z]\" a.txt |sort +1 -n |awk '{print $1\":\"$2}'`\n        #cat a.txt |sort +1 -n |while read list\n        for list in $a\n        do\n            name=`echo $list |awk -F: '{print $1}'`\n            number=`echo $list |awk -F: '{print $2}'`\n            awk 'BEGIN{printf \"|%-20s|%-20s|\\n\",\"'\"$name\"'\",\"'\"$number\"'\";\n            print \"+--------------------+--------------------+\";\n            }'\n        done\n        awk 'BEGIN{\n        print \"              *** The End ***              \"\n        print \"                                           \"\n        }'\n    }\n    判断日期是否合法{\n        #!/bin/sh\n        while read a\n        do\n          if echo $a | grep -q \"-\" && date -d $a +%Y%m%d > /dev/null 2>&1\n          then\n            if echo $a | grep -e '^[0-9]\\{4\\}-[01][0-9]-[0-3][0-9]$'\n            then\n                break\n            else\n                echo \"您输入的日期不合法，请从新输入！\"\n            fi\n          else\n            echo \"您输入的日期不合法，请从新输入！\"\n          fi\n        done\n        echo \"日期为$a\"\n    }\n    打印日期段所有日期{\n        #!/bin/bash\n        qsrq=20010101\n        jsrq=20010227\n        n=0\n        >tmp\n        while :;do\n        current=$(date +%Y%m%d -d\"$n day $qsrq\")\n        if [[ $current == $jsrq ]];then\n            echo $current >>tmp;break\n        else\n            echo $current >>tmp\n            ((n++))\n        fi\n        done\n        rq=`awk 'NR==1{print}' tmp`\n    }\n    数学计算的小算法{\n        #!/bin/sh\n        A=1\n        B=1\n        while [ $A -le 10 ]\n        do\n            SUM=`expr $A \\* $B`\n            echo \"$SUM\"\n            if [ $A = 10 ]\n            then\n                B=`expr $B + 1`\n                A=1\n            fi\n            A=`expr $A + 1`\n        done\n    }\n    多行合并{\n        sed '{N;s/\\n//}' file                   # 将两行合并一行(去掉换行符)\n        awk '{printf(NR%2!=0)?$0\" \":$0\" \\n\"}'   # 将两行合并一行\n        awk '{printf\"%s \",$0}'                  # 将所有行合并\n        awk '{if (NR%4==0){print $0} else {printf\"%s \",$0}}' file    # 将4行合并为一行(可扩展)\n    }\n    横竖转换{\n        cat a.txt | xargs           # 列转行\n        cat a.txt | xargs -n1       # 行转列\n    }\n    竖行转横行{\n        cat file|tr '\\n' ' '\n        echo $(cat file)\n        #!/bin/sh\n        for i in `cat file`\n        do\n              a=${a}\" \"${i}\n        done\n        echo $a\n    }\n    取用户的根目录{\n        #! /bin/bash\n        while read name pass uid gid gecos home shell\n        do\n            echo $home\n        done < /etc/passwd\n    }\n    远程打包{\n        ssh -n $ip 'find '$path' /data /opt -type f  -name \"*.sh\" -or -name \"*.py\" -or -name \"*.pl\" |xargs tar zcvpf /tmp/data_backup.tar.gz'\n    }\n    把汉字转成encode格式{\n        echo 论坛 | tr -d \"\\n\" | xxd -i | sed -e \"s/ 0x/%/g\" | tr -d \" ,\\n\"\n        %c2%db%cc%b3\n        echo 论坛 | tr -d \"\\n\" | xxd -i | sed -e \"s/ 0x/%/g\" | tr -d \" ,\\n\" | tr \"[a-f]\" \"[A-F]\"  # 大写的\n        %C2%DB%CC%B3\n    }\n    把目录带有大写字母的文件名改为全部小写{\n        #!/bin/bash\n        for f in *;do\n            mv $f `echo $f |tr \"[A-Z]\" \"[a-z]\"`\n        done\n    }\n    查找连续多行，在不连续的行前插入{\n        #/bin/bash\n        lastrow=null\n        i=0\n        cat incl|while read line\n        do\n        i=`expr $i + 1`\n        if echo \"$lastrow\" | grep \"#include <[A-Z].h>\"\n        then\n            if echo \"$line\" | grep -v  \"#include <[A-Z].h>\"\n            then\n                sed -i ''$i'i\\\\/\\/All header files are include' incl\n                i=`expr $i + 1`\n            fi\n        fi\n        lastrow=\"$line\"\n        done\n    }\n    查询数据库其它引擎{\n        #/bin/bash\n        path1=/data/mysql/data/\n        dbpasswd=db123\n        #MyISAM或InnoDB\n        engine=InnoDB\n        if [ -d $path1 ];then\n        dir=`ls -p $path1 |awk '/\\/$/'|awk -F'/' '{print $1}'`\n            for db in $dir\n            do\n            number=`mysql -uroot -p$dbpasswd -A -S \"$path1\"mysql.sock -e \"use ${db};show table status;\" |grep -c $engine`\n                if [ $number -ne 0 ];then\n                echo \"${db}\"\n                fi\n            done\n        fi\n    }\n    批量修改数据库引擎{\n        #/bin/bash\n        for db in test test1 test3\n        do\n            tables=`mysql -uroot -pdb123 -A -S /data/mysql/data/mysql.sock -e \"use $db;show tables;\" |awk 'NR != 1{print}'`\n            for table in $tables\n            do\n                mysql -uroot -pdb123 -A -S /data/mysql/data/mysql.sock -e \"use $db;alter table $table engine=MyISAM;\"\n            done\n        done\n    }\n    将shell取到的数据插入mysql数据库{\n        mysql -u$username -p$passwd -h$dbhost -P$dbport -A -e \"\n        use $dbname;\n        insert into data values ('','$ip','$date','$time','$data')\n        \"\n    }\n    两日期间隔天数{\n        D1=`date -d '20070409' +\"%s\"`\n        D2=`date -d '20070304 ' +\"%s\"`\n        D3=$(($D1 - $D2))\n        echo $(($D3/60/60/24))\n    }\n    while执行ssh只循环一次{\n        cat -    # 让cat读连接文件stdin的信息\n        seq 10 | while read line; do ssh localhost \"cat -\"; done        # 显示的9次是被ssh吃掉的\n        seq 10 | while read line; do ssh -n localhost \"cat -\"; done     # ssh加上-n参数可避免只循环一次\n    }\n    ssh批量执行命令{\n        #版本1\n        #!/bin/bash\n        while read line\n        do\n        Ip=`echo $line|awk '{print $1}'`\n        Passwd=`echo $line|awk '{print $2}'`\n        ssh -n localhost \"cat -\"\n        sshpass -p \"$Passwd\" ssh -n -t -o StrictHostKeyChecking=no root@$Ip \"id\"\n        done<iplist.txt\n        #版本2\n        #!/bin/bash\n        Iplist=`awk '{print $1}' iplist.txt`\n        for Ip in $Iplist\n        do\n        Passwd=`awk '/'$Ip'/{print $2}' iplist.txt`\n        sshpass -p \"$Passwd\" ssh -n -t -o StrictHostKeyChecking=no root@$Ip \"id\"\n        done\n    }\n    在同一位置打印字符{\n        #!/bin/bash\n        echo -ne \"\\t\"\n        for i in `seq -w 100 -1 1`\n        do\n            echo -ne \"$i\\b\\b\\b\";      # 关键\\b退格\n            sleep 1;\n        done\n    }\n    多进程后台并发简易控制{\n        #!/bin/bash\n        test () {\n            echo $a\n            sleep 5\n        }\n        for a in `seq 1 30`\n        do\n            test &\n            echo $!\n            ((num++))\n            if [ $num -eq 6 ];then\n            echo \"wait...\"\n            wait\n            num=0\n            fi\n        done\n        wait\n    }\n    shell并发{\n        #!/bin/bash\n        tmpfile=$$.fifo   # 创建管道名称\n        mkfifo $tmpfile   # 创建管道\n        exec 4<>$tmpfile  # 创建文件标示4，以读写方式操作管道$tmpfile\n        rm $tmpfile       # 将创建的管道文件清除\n        thred=4           # 指定并发个数\n        seq=(1 2 3 4 5 6 7 8 9 21 22 23 24 25 31 32 33 34 35) # 创建任务列表\n        # 为并发线程创建相应个数的占位\n        {\n        for (( i = 1;i<=${thred};i++ ))\n        do\n            echo;  # 因为read命令一次读取一行，一个echo默认输出一个换行符，所以为每个线程输出一个占位换行\n        done\n        } >&4      # 将占位信息写入管道\n        for id in ${seq}  # 从任务列表 seq 中按次序获取每一个任务\n        do\n          read  # 读取一行，即fd4中的一个占位符\n          (./ur_command ${id};echo >&4 ) &   # 在后台执行任务ur_command 并将任务 ${id} 赋给当前任务；任务执行完后在fd4种写入一个占位符\n        done <&4    # 指定fd4为整个for的标准输入\n        wait        # 等待所有在此shell脚本中启动的后台任务完成\n        exec 4>&-   # 关闭管道\n    }\n    shell并发函数{\n        function ConCurrentCmd()\n        {\n            #进程数\n            Thread=30\n            #列表文件\n            CurFileName=iplist.txt\n            #定义fifo文件\n            FifoFile=\"$$.fifo\"\n            #新建一个fifo类型的文件\n            mkfifo $FifoFile\n            #将fd6与此fifo类型文件以读写的方式连接起来\n            exec 6<>$FifoFile\n            rm $FifoFile\n            #事实上就是在文件描述符6中放置了$Thread个回车符\n            for ((i=0;i<=$Thread;i++));do echo;done >&6\n            #此后标准输入将来自fd5\n            exec 5<$CurFileName\n            #开始循环读取文件列表中的行\n            Count=0\n            while read -u5 line\n            do\n                read -u6\n                let Count+=1\n                # 此处定义一个子进程放到后台执行\n                # 一个read -u6命令执行一次,就从fd6中减去一个回车符，然后向下执行\n                # fd6中没有回车符的时候,就停在这了,从而实现了进程数量控制\n                {\n                    echo $Count\n                    #这段代码框就是执行具体的操作了\n                    function\n                    echo >&6\n                    #当进程结束以后,再向fd6中追加一个回车符,即补上了read -u6减去的那个\n                } &\n            done\n            #等待所有后台子进程结束\n            wait\n            #关闭fd6\n            exec 6>&-\n            #关闭fd5\n            exec 5>&-\n        }\n        并发例子{\n            #!/bin/bash\n            pnum=3\n            task () {\n                echo \"$u start\"\n                sleep 5\n                echo \"$u done\"\n            }\n            FifoFile=\"$$.fifo\"\n            mkfifo $FifoFile\n            exec 6<>$FifoFile\n            rm $FifoFile\n            \n            for ((i=0;i<=$pnum;i++));do echo;done >&6\n            for u in `seq 1 20`\n            do\n                read -u6\n                {\n                    task\n                    [ $? -eq 0 ] && echo \"${u} 次成功\" || echo \"${u} 次失败\"\n                    echo >&6\n                } &\n            done\n            wait\n            exec 6>&-\n        }\n    }\n    函数{\n        ip(){\n            echo \"a 1\"|awk '$1==\"'\"$1\"'\"{print $2}'\n        }\n        web=a\n        ip $web\n    }\n    检测软件包是否存在{\n        rpm -q dialog >/dev/null\n        if [ \"$?\" -ge 1 ];then\n            echo \"install dialog,Please wait...\"\n            yum -y install dialog\n            rpm -q dialog >/dev/null\n            [ $? -ge 1 ] && echo \"dialog installation failure,exit\" && exit\n            echo \"dialog done\"\n            read\n        fi\n    }\n    游戏维护菜单-修改配置文件{\n        #!/bin/bash\n        conf=serverlist.xml\n        AreaList=`awk -F '\"' '/<s/{print $2}' $conf`\n        select area in $AreaList 全部 退出\n        do\n            echo \"\"\n            echo $area\n            case $area in\n            退出)\n                exit\n            ;;\n            *)\n                select operate in \"修改版本号\" \"添加维护中\" \"删除维护中\" \"返回菜单\"\n                do\n                    echo \"\"\n                    echo $operate\n                    case $operate in\n                    修改版本号)\n                        echo 请输入版本号\n                        while read version\n                        do\n                            if echo $version | grep -w 10[12][0-9][0-9][0-9][0-9][0-9][0-9]\n                            then\n                                break\n                            fi\n                            echo 请从新输入正确的版本号\n                        done\n                        case $area in\n                        全部)\n                            case $version in\n                            101*)\n                                echo \"请确认操作对 $area 体验区 $operate\"\n                                read\n                                sed -i 's/101[0-9][0-9][0-9][0-9][0-9][0-9]/'$version'/' $conf\n                            ;;\n                            102*)\n                                echo \"请确认操作对 $area 正式区 $operate\"\n                                read\n                                sed -i 's/102[0-9][0-9][0-9][0-9][0-9][0-9]/'$version'/' $conf\n                            ;;\n                            esac\n                        ;;\n                        *)\n                            type=`awk -F '\"' '/'$area'/{print $14}' $conf |cut -c1-3`\n                            readtype=`echo $version |cut -c1-3`\n                            if [ $type != $readtype ]\n                            then\n                                echo \"版本号不对应，请从新操作\"\n                                continue\n                            fi\n                            echo \"请确认操作对 $area 区 $operate\"\n                            read\n                            awk -F '\"' '/'$area'/{print $12}' $conf |xargs -i sed -i '/'{}'/s/10[12][0-9][0-9][0-9][0-9][0-9][0-9]/'$version'/' $conf\n                        ;;\n                        esac\n                    ;;\n                    添加维护中)\n                        case $area in\n                        全部)\n                            echo \"请确认操作对 $area 区 $operate\"\n                            read\n                            awk -F '\"' '/<s/{print $2}' $conf |xargs -i sed -i 's/'{}'/&维护中/' $conf\n                        ;;\n                        *)\n                            echo \"请确认操作对 $area 区 $operate\"\n                            read\n                            sed -i 's/'$area'/&维护中/' $conf\n                        ;;\n                        esac\n                    ;;\n                    删除维护中)\n                        case $area in\n                        全部)\n                            echo \"请确认操作对 $area 区 $operate\"\n                            read\n                            sed -i 's/维护中//' $conf\n                        ;;\n                        *)\n                            echo \"请确认操作对 $area 区 $operate\"\n                            read\n                            sed -i '/'$area'/s/维护中//' $conf\n                        ;;\n                        esac\n                    ;;\n                    返回菜单)\n                        break\n                    ;;\n                    esac\n                done\n            ;;\n            esac\n            echo \"回车重新选择区\"\n        done\n    }\n    keepalive剔除后端服务{\n        #!/bin/bash\n        #行数请自定义,默认8行\n        if [ X$2 == X ];then\n            echo \"error: IP null\"\n            read\n            exit\n        fi\n        case $1 in\n        del)\n            sed -i '/real_server.*'$2'.*8888/,+8 s/^/#/' /etc/keepalived/keepalived.conf\n            /etc/init.d/keepalived reload\n        ;;\n        add)\n            sed -i '/real_server.*'$2'.*8888/,+8 s/^#//' /etc/keepalived/keepalived.conf\n            /etc/init.d/keepalived reload\n        ;;\n        *)\n            echo \"Parameter error\"\n        ;;\n        esac\n    }\n    抓取系统中负载最高的进程{\n        #!/bin/bash\n        LANG=C\n        PATH=/sbin:/usr/sbin:/bin:/usr/bin\n        interval=1\n        length=86400\n        for i in $(seq 1 $(expr ${length} / ${interval}));do\n        date\n        LANG=C ps -eT -o%cpu,pid,tid,ppid,comm | grep -v CPU | sort -n -r | head -20\n        date\n        LANG=C cat /proc/loadavg\n        { LANG=C ps -eT -o%cpu,pid,tid,ppid,comm | sed -e 's/^ *//' | tr -s ' ' | grep -v CPU | sort -n -r | cut -d ' ' -f 1 | xargs -I{} echo -n \"{} + \" && echo ' 0'; } | bc -l\n        sleep ${interval}\n        done\n        fuser -k $0\n    }\n    申诉中国反垃圾邮件联盟黑名单{\n        #!/bin/bash\n        IpList=`awk '$1!~\"^#\"&&$1!=\"\"{print $1}' host.list`\n        QueryAdd='http://www.anti-spam.org.cn/Rbl/Query/Result'\n        ComplaintAdd='http://www.anti-spam.org.cn/Rbl/Getout/Submit'\n        CONTENT='我们是一家正规的XXX。xxxxxxx。恳请将我们的发送服务器IP移出黑名单。谢谢！\n        处理措施：\n        1.XXXX。\n        2.XXXX。'\n        CORP='abc.com'\n        WWW='www.abc.cm'\n        NAME='def'\n        MAIL='def@163.com.cn'\n        TEL='010-50000000'\n        LEVEL='0'\n        for Ip in $IpList\n        do\n            Status=`curl -d \"IP=$Ip\" $QueryAdd |grep 'Getout/ShowForm?IP=' |grep -wc '申诉脱离'`\n            if [ $Status -ge 1 ];then\n                IpStatus=\"黑名单中\"\n                results=`curl -d \"IP=${Ip}&CONTENT=${CONTENT}&CORP=${CORP}&WWW=${WWW}&NAME=${NAME}&MAIL=${MAIL}&TEL=${TEL}&LEVEL=${LEVEL}\" $ComplaintAdd |grep -E '您的黑名单脱离申请已提交|该IP的脱离申请已被他人提交|申请由于近期内有被拒绝的记录'`\n                echo $results\n                if echo $results | grep '您的黑名单脱离申请已提交'  > /dev/null 2>&1\n                then\n                    complaint='申诉成功'\n                elif echo $results | grep '该IP的脱离申请已被他人提交'  > /dev/null 2>&1\n                then\n                    complaint='申诉重复'\n                elif echo $results | grep '申请由于近期内有被拒绝的记录'  > /dev/null 2>&1\n                then\n                    complaint='申诉拒绝'\n                else\n                    complaint='异常'\n                fi\n            else\n                IpStatus='正常'\n                complaint='无需申诉'\n            fi\n            echo \"$Ip    $IpStatus    $complaint\" >> $(date +%Y%m%d_%H%M%S).log\n        done\n}\n    Web Server in Awk{\n        #gawk -f file\n        BEGIN {\n          x        = 1                         # script exits if x < 1\n          port     = 8080                      # port number\n          host     = \"/inet/tcp/\" port \"/0/0\"  # host string\n          url      = \"http://localhost:\" port  # server url\n          status   = 200                       # 200 == OK\n          reason   = \"OK\"                      # server response\n          RS = ORS = \"\\r\\n\"                    # header line terminators\n          doc      = Setup()                   # html document\n          len      = length(doc) + length(ORS) # length of document\n          while (x) {\n             if ($1 == \"GET\") RunApp(substr($2, 2))\n             if (! x) break\n             print \"HTTP/1.0\", status, reason |& host\n             print \"Connection: Close\"        |& host\n             print \"Pragma: no-cache\"         |& host\n             print \"Content-length:\", len     |& host\n             print ORS doc                    |& host\n             close(host)     # close client connection\n             host |& getline # wait for new client request\n          }\n          # server terminated...\n          doc = Bye()\n          len = length(doc) + length(ORS)\n          print \"HTTP/1.0\", status, reason |& host\n          print \"Connection: Close\"        |& host\n          print \"Pragma: no-cache\"         |& host\n          print \"Content-length:\", len     |& host\n          print ORS doc                    |& host\n          close(host)\n        }\n        function Setup() {\n          tmp = \"<html>\\\n          <head><title>Simple gawk server</title></head>\\\n          <body>\\\n          <p><a href=\" url \"/xterm>xterm</a>\\\n          <p><a href=\" url \"/xcalc>xcalc</a>\\\n          <p><a href=\" url \"/xload>xload</a>\\\n          <p><a href=\" url \"/exit>terminate script</a>\\\n          </body>\\\n          </html>\"\n          return tmp\n        }\n        function Bye() {\n          tmp = \"<html>\\\n          <head><title>Simple gawk server</title></head>\\\n          <body><p>Script Terminated...</body>\\\n          </html>\"\n          return tmp\n        }\n        function RunApp(app) {\n          if (app == \"xterm\")  {system(\"xterm&\"); return}\n          if (app == \"xcalc\" ) {system(\"xcalc&\"); return}\n          if (app == \"xload\" ) {system(\"xload&\"); return}\n          if (app == \"exit\")   {x = 0}\n        }\n    }\n}\n10 经验{\n    1.服务上线,在启动注册流量时大量报错, 下游服务摘除,重启后, 上游还用原有的链接去链接, 导致请求失败.\n    2.systemd守护的进程,在tmp下找不到对应文件, 配置安全tmp项PrivateTmp改为false PrivateTmp=false\n    3.统一服务内部调用关系,一个服务对应一个域名\n    4.统一服务服务返回的状态码,报警只需要针对5xx就可以发现问题.\n    5.在服务雪崩后,恢复服务,用户可能有大量重试,所以放流量也要小比例放流量,逐步恢复\n}\n11 nginx\n   1 日志格式\n   log_format main '$remote_addr - $remote_user [$time_local] \"$request\" $status $body_bytes_sent \"$http_referer\" \"$http_user_agent\" \"$http_x_forwarded_for\" $request_time $upstream_response_time $upstream_addr \"$http_host\"';\n   \n   $remote_addr               # \n   [$time_local]              # 调用时间\n   \"$request\"                 # 显示[请求方法 请求接口 HTTP/1.1协议]\n   $status                    # 请求返回状态码\n   $body_bytes_sent           # 请求body大小\n   \"$http_referer\"            # \n   \"$http_user_agent\"         # 接口从哪个工具发出\n   \"$http_x_forwarder_for\"    # 远程客户端ip\n   $request_time              # 请求时间\n   $upstream_response_time    # 下游服务返回response时间\n   $upstream_addr             # 后端服务地址\n   \"$http_host\"               # 发送请求的host地址\n\n12 历史记录\n13 ansible\n   ansible hostname -m shell -a \"ls /tmp\"          # 在远端host执行shell\n   ansible -m ping all                             # 校验远程服务器是否ping通\n   \n   ## ansible-playbook\n   ansible-playbook playbook.yml                   # 调用playbook文件\n   vim /etc/ansible/hosts                          # 编辑ansible配置文件\n   \n   ## yum 模块\n   example1:安装单个软件\n   ```\n   - name: install yum package\n     yum:\n\t   name: git       # 安装指定版本：git-1.8.3.1-6.el7\n\t   state: present  # 如果不存在安装最新，存在不会更新；若为latest，无论存在与否安装最新\n   ```\n   \n   example2:安装多个软件\n   ```\n   - name: yum\n     yum:\n\t   name: \"{{ item}}\"\n\t   state: present\n\t with_items:\n\t - git\n\t - httpd\n   ```\n```","slug":"运维命令","published":1,"updated":"2024-03-06T07:03:22.578Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfgjt7f00189kln5a452n0o","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br><span class=\"line\">686</span><br><span class=\"line\">687</span><br><span class=\"line\">688</span><br><span class=\"line\">689</span><br><span class=\"line\">690</span><br><span class=\"line\">691</span><br><span class=\"line\">692</span><br><span class=\"line\">693</span><br><span class=\"line\">694</span><br><span class=\"line\">695</span><br><span class=\"line\">696</span><br><span class=\"line\">697</span><br><span class=\"line\">698</span><br><span class=\"line\">699</span><br><span class=\"line\">700</span><br><span class=\"line\">701</span><br><span class=\"line\">702</span><br><span class=\"line\">703</span><br><span class=\"line\">704</span><br><span class=\"line\">705</span><br><span class=\"line\">706</span><br><span class=\"line\">707</span><br><span class=\"line\">708</span><br><span class=\"line\">709</span><br><span class=\"line\">710</span><br><span class=\"line\">711</span><br><span class=\"line\">712</span><br><span class=\"line\">713</span><br><span class=\"line\">714</span><br><span class=\"line\">715</span><br><span class=\"line\">716</span><br><span class=\"line\">717</span><br><span class=\"line\">718</span><br><span class=\"line\">719</span><br><span class=\"line\">720</span><br><span class=\"line\">721</span><br><span class=\"line\">722</span><br><span class=\"line\">723</span><br><span class=\"line\">724</span><br><span class=\"line\">725</span><br><span class=\"line\">726</span><br><span class=\"line\">727</span><br><span class=\"line\">728</span><br><span class=\"line\">729</span><br><span class=\"line\">730</span><br><span class=\"line\">731</span><br><span class=\"line\">732</span><br><span class=\"line\">733</span><br><span class=\"line\">734</span><br><span class=\"line\">735</span><br><span class=\"line\">736</span><br><span class=\"line\">737</span><br><span class=\"line\">738</span><br><span class=\"line\">739</span><br><span class=\"line\">740</span><br><span class=\"line\">741</span><br><span class=\"line\">742</span><br><span class=\"line\">743</span><br><span class=\"line\">744</span><br><span class=\"line\">745</span><br><span class=\"line\">746</span><br><span class=\"line\">747</span><br><span class=\"line\">748</span><br><span class=\"line\">749</span><br><span class=\"line\">750</span><br><span class=\"line\">751</span><br><span class=\"line\">752</span><br><span class=\"line\">753</span><br><span class=\"line\">754</span><br><span class=\"line\">755</span><br><span class=\"line\">756</span><br><span class=\"line\">757</span><br><span class=\"line\">758</span><br><span class=\"line\">759</span><br><span class=\"line\">760</span><br><span class=\"line\">761</span><br><span class=\"line\">762</span><br><span class=\"line\">763</span><br><span class=\"line\">764</span><br><span class=\"line\">765</span><br><span class=\"line\">766</span><br><span class=\"line\">767</span><br><span class=\"line\">768</span><br><span class=\"line\">769</span><br><span class=\"line\">770</span><br><span class=\"line\">771</span><br><span class=\"line\">772</span><br><span class=\"line\">773</span><br><span class=\"line\">774</span><br><span class=\"line\">775</span><br><span class=\"line\">776</span><br><span class=\"line\">777</span><br><span class=\"line\">778</span><br><span class=\"line\">779</span><br><span class=\"line\">780</span><br><span class=\"line\">781</span><br><span class=\"line\">782</span><br><span class=\"line\">783</span><br><span class=\"line\">784</span><br><span class=\"line\">785</span><br><span class=\"line\">786</span><br><span class=\"line\">787</span><br><span class=\"line\">788</span><br><span class=\"line\">789</span><br><span class=\"line\">790</span><br><span class=\"line\">791</span><br><span class=\"line\">792</span><br><span class=\"line\">793</span><br><span class=\"line\">794</span><br><span class=\"line\">795</span><br><span class=\"line\">796</span><br><span class=\"line\">797</span><br><span class=\"line\">798</span><br><span class=\"line\">799</span><br><span class=\"line\">800</span><br><span class=\"line\">801</span><br><span class=\"line\">802</span><br><span class=\"line\">803</span><br><span class=\"line\">804</span><br><span class=\"line\">805</span><br><span class=\"line\">806</span><br><span class=\"line\">807</span><br><span class=\"line\">808</span><br><span class=\"line\">809</span><br><span class=\"line\">810</span><br><span class=\"line\">811</span><br><span class=\"line\">812</span><br><span class=\"line\">813</span><br><span class=\"line\">814</span><br><span class=\"line\">815</span><br><span class=\"line\">816</span><br><span class=\"line\">817</span><br><span class=\"line\">818</span><br><span class=\"line\">819</span><br><span class=\"line\">820</span><br><span class=\"line\">821</span><br><span class=\"line\">822</span><br><span class=\"line\">823</span><br><span class=\"line\">824</span><br><span class=\"line\">825</span><br><span class=\"line\">826</span><br><span class=\"line\">827</span><br><span class=\"line\">828</span><br><span class=\"line\">829</span><br><span class=\"line\">830</span><br><span class=\"line\">831</span><br><span class=\"line\">832</span><br><span class=\"line\">833</span><br><span class=\"line\">834</span><br><span class=\"line\">835</span><br><span class=\"line\">836</span><br><span class=\"line\">837</span><br><span class=\"line\">838</span><br><span class=\"line\">839</span><br><span class=\"line\">840</span><br><span class=\"line\">841</span><br><span class=\"line\">842</span><br><span class=\"line\">843</span><br><span class=\"line\">844</span><br><span class=\"line\">845</span><br><span class=\"line\">846</span><br><span class=\"line\">847</span><br><span class=\"line\">848</span><br><span class=\"line\">849</span><br><span class=\"line\">850</span><br><span class=\"line\">851</span><br><span class=\"line\">852</span><br><span class=\"line\">853</span><br><span class=\"line\">854</span><br><span class=\"line\">855</span><br><span class=\"line\">856</span><br><span class=\"line\">857</span><br><span class=\"line\">858</span><br><span class=\"line\">859</span><br><span class=\"line\">860</span><br><span class=\"line\">861</span><br><span class=\"line\">862</span><br><span class=\"line\">863</span><br><span class=\"line\">864</span><br><span class=\"line\">865</span><br><span class=\"line\">866</span><br><span class=\"line\">867</span><br><span class=\"line\">868</span><br><span class=\"line\">869</span><br><span class=\"line\">870</span><br><span class=\"line\">871</span><br><span class=\"line\">872</span><br><span class=\"line\">873</span><br><span class=\"line\">874</span><br><span class=\"line\">875</span><br><span class=\"line\">876</span><br><span class=\"line\">877</span><br><span class=\"line\">878</span><br><span class=\"line\">879</span><br><span class=\"line\">880</span><br><span class=\"line\">881</span><br><span class=\"line\">882</span><br><span class=\"line\">883</span><br><span class=\"line\">884</span><br><span class=\"line\">885</span><br><span class=\"line\">886</span><br><span class=\"line\">887</span><br><span class=\"line\">888</span><br><span class=\"line\">889</span><br><span class=\"line\">890</span><br><span class=\"line\">891</span><br><span class=\"line\">892</span><br><span class=\"line\">893</span><br><span class=\"line\">894</span><br><span class=\"line\">895</span><br><span class=\"line\">896</span><br><span class=\"line\">897</span><br><span class=\"line\">898</span><br><span class=\"line\">899</span><br><span class=\"line\">900</span><br><span class=\"line\">901</span><br><span class=\"line\">902</span><br><span class=\"line\">903</span><br><span class=\"line\">904</span><br><span class=\"line\">905</span><br><span class=\"line\">906</span><br><span class=\"line\">907</span><br><span class=\"line\">908</span><br><span class=\"line\">909</span><br><span class=\"line\">910</span><br><span class=\"line\">911</span><br><span class=\"line\">912</span><br><span class=\"line\">913</span><br><span class=\"line\">914</span><br><span class=\"line\">915</span><br><span class=\"line\">916</span><br><span class=\"line\">917</span><br><span class=\"line\">918</span><br><span class=\"line\">919</span><br><span class=\"line\">920</span><br><span class=\"line\">921</span><br><span class=\"line\">922</span><br><span class=\"line\">923</span><br><span class=\"line\">924</span><br><span class=\"line\">925</span><br><span class=\"line\">926</span><br><span class=\"line\">927</span><br><span class=\"line\">928</span><br><span class=\"line\">929</span><br><span class=\"line\">930</span><br><span class=\"line\">931</span><br><span class=\"line\">932</span><br><span class=\"line\">933</span><br><span class=\"line\">934</span><br><span class=\"line\">935</span><br><span class=\"line\">936</span><br><span class=\"line\">937</span><br><span class=\"line\">938</span><br><span class=\"line\">939</span><br><span class=\"line\">940</span><br><span class=\"line\">941</span><br><span class=\"line\">942</span><br><span class=\"line\">943</span><br><span class=\"line\">944</span><br><span class=\"line\">945</span><br><span class=\"line\">946</span><br><span class=\"line\">947</span><br><span class=\"line\">948</span><br><span class=\"line\">949</span><br><span class=\"line\">950</span><br><span class=\"line\">951</span><br><span class=\"line\">952</span><br><span class=\"line\">953</span><br><span class=\"line\">954</span><br><span class=\"line\">955</span><br><span class=\"line\">956</span><br><span class=\"line\">957</span><br><span class=\"line\">958</span><br><span class=\"line\">959</span><br><span class=\"line\">960</span><br><span class=\"line\">961</span><br><span class=\"line\">962</span><br><span class=\"line\">963</span><br><span class=\"line\">964</span><br><span class=\"line\">965</span><br><span class=\"line\">966</span><br><span class=\"line\">967</span><br><span class=\"line\">968</span><br><span class=\"line\">969</span><br><span class=\"line\">970</span><br><span class=\"line\">971</span><br><span class=\"line\">972</span><br><span class=\"line\">973</span><br><span class=\"line\">974</span><br><span class=\"line\">975</span><br><span class=\"line\">976</span><br><span class=\"line\">977</span><br><span class=\"line\">978</span><br><span class=\"line\">979</span><br><span class=\"line\">980</span><br><span class=\"line\">981</span><br><span class=\"line\">982</span><br><span class=\"line\">983</span><br><span class=\"line\">984</span><br><span class=\"line\">985</span><br><span class=\"line\">986</span><br><span class=\"line\">987</span><br><span class=\"line\">988</span><br><span class=\"line\">989</span><br><span class=\"line\">990</span><br><span class=\"line\">991</span><br><span class=\"line\">992</span><br><span class=\"line\">993</span><br><span class=\"line\">994</span><br><span class=\"line\">995</span><br><span class=\"line\">996</span><br><span class=\"line\">997</span><br><span class=\"line\">998</span><br><span class=\"line\">999</span><br><span class=\"line\">1000</span><br><span class=\"line\">1001</span><br><span class=\"line\">1002</span><br><span class=\"line\">1003</span><br><span class=\"line\">1004</span><br><span class=\"line\">1005</span><br><span class=\"line\">1006</span><br><span class=\"line\">1007</span><br><span class=\"line\">1008</span><br><span class=\"line\">1009</span><br><span class=\"line\">1010</span><br><span class=\"line\">1011</span><br><span class=\"line\">1012</span><br><span class=\"line\">1013</span><br><span class=\"line\">1014</span><br><span class=\"line\">1015</span><br><span class=\"line\">1016</span><br><span class=\"line\">1017</span><br><span class=\"line\">1018</span><br><span class=\"line\">1019</span><br><span class=\"line\">1020</span><br><span class=\"line\">1021</span><br><span class=\"line\">1022</span><br><span class=\"line\">1023</span><br><span class=\"line\">1024</span><br><span class=\"line\">1025</span><br><span class=\"line\">1026</span><br><span class=\"line\">1027</span><br><span class=\"line\">1028</span><br><span class=\"line\">1029</span><br><span class=\"line\">1030</span><br><span class=\"line\">1031</span><br><span class=\"line\">1032</span><br><span class=\"line\">1033</span><br><span class=\"line\">1034</span><br><span class=\"line\">1035</span><br><span class=\"line\">1036</span><br><span class=\"line\">1037</span><br><span class=\"line\">1038</span><br><span class=\"line\">1039</span><br><span class=\"line\">1040</span><br><span class=\"line\">1041</span><br><span class=\"line\">1042</span><br><span class=\"line\">1043</span><br><span class=\"line\">1044</span><br><span class=\"line\">1045</span><br><span class=\"line\">1046</span><br><span class=\"line\">1047</span><br><span class=\"line\">1048</span><br><span class=\"line\">1049</span><br><span class=\"line\">1050</span><br><span class=\"line\">1051</span><br><span class=\"line\">1052</span><br><span class=\"line\">1053</span><br><span class=\"line\">1054</span><br><span class=\"line\">1055</span><br><span class=\"line\">1056</span><br><span class=\"line\">1057</span><br><span class=\"line\">1058</span><br><span class=\"line\">1059</span><br><span class=\"line\">1060</span><br><span class=\"line\">1061</span><br><span class=\"line\">1062</span><br><span class=\"line\">1063</span><br><span class=\"line\">1064</span><br><span class=\"line\">1065</span><br><span class=\"line\">1066</span><br><span class=\"line\">1067</span><br><span class=\"line\">1068</span><br><span class=\"line\">1069</span><br><span class=\"line\">1070</span><br><span class=\"line\">1071</span><br><span class=\"line\">1072</span><br><span class=\"line\">1073</span><br><span class=\"line\">1074</span><br><span class=\"line\">1075</span><br><span class=\"line\">1076</span><br><span class=\"line\">1077</span><br><span class=\"line\">1078</span><br><span class=\"line\">1079</span><br><span class=\"line\">1080</span><br><span class=\"line\">1081</span><br><span class=\"line\">1082</span><br><span class=\"line\">1083</span><br><span class=\"line\">1084</span><br><span class=\"line\">1085</span><br><span class=\"line\">1086</span><br><span class=\"line\">1087</span><br><span class=\"line\">1088</span><br><span class=\"line\">1089</span><br><span class=\"line\">1090</span><br><span class=\"line\">1091</span><br><span class=\"line\">1092</span><br><span class=\"line\">1093</span><br><span class=\"line\">1094</span><br><span class=\"line\">1095</span><br><span class=\"line\">1096</span><br><span class=\"line\">1097</span><br><span class=\"line\">1098</span><br><span class=\"line\">1099</span><br><span class=\"line\">1100</span><br><span class=\"line\">1101</span><br><span class=\"line\">1102</span><br><span class=\"line\">1103</span><br><span class=\"line\">1104</span><br><span class=\"line\">1105</span><br><span class=\"line\">1106</span><br><span class=\"line\">1107</span><br><span class=\"line\">1108</span><br><span class=\"line\">1109</span><br><span class=\"line\">1110</span><br><span class=\"line\">1111</span><br><span class=\"line\">1112</span><br><span class=\"line\">1113</span><br><span class=\"line\">1114</span><br><span class=\"line\">1115</span><br><span class=\"line\">1116</span><br><span class=\"line\">1117</span><br><span class=\"line\">1118</span><br><span class=\"line\">1119</span><br><span class=\"line\">1120</span><br><span class=\"line\">1121</span><br><span class=\"line\">1122</span><br><span class=\"line\">1123</span><br><span class=\"line\">1124</span><br><span class=\"line\">1125</span><br><span class=\"line\">1126</span><br><span class=\"line\">1127</span><br><span class=\"line\">1128</span><br><span class=\"line\">1129</span><br><span class=\"line\">1130</span><br><span class=\"line\">1131</span><br><span class=\"line\">1132</span><br><span class=\"line\">1133</span><br><span class=\"line\">1134</span><br><span class=\"line\">1135</span><br><span class=\"line\">1136</span><br><span class=\"line\">1137</span><br><span class=\"line\">1138</span><br><span class=\"line\">1139</span><br><span class=\"line\">1140</span><br><span class=\"line\">1141</span><br><span class=\"line\">1142</span><br><span class=\"line\">1143</span><br><span class=\"line\">1144</span><br><span class=\"line\">1145</span><br><span class=\"line\">1146</span><br><span class=\"line\">1147</span><br><span class=\"line\">1148</span><br><span class=\"line\">1149</span><br><span class=\"line\">1150</span><br><span class=\"line\">1151</span><br><span class=\"line\">1152</span><br><span class=\"line\">1153</span><br><span class=\"line\">1154</span><br><span class=\"line\">1155</span><br><span class=\"line\">1156</span><br><span class=\"line\">1157</span><br><span class=\"line\">1158</span><br><span class=\"line\">1159</span><br><span class=\"line\">1160</span><br><span class=\"line\">1161</span><br><span class=\"line\">1162</span><br><span class=\"line\">1163</span><br><span class=\"line\">1164</span><br><span class=\"line\">1165</span><br><span class=\"line\">1166</span><br><span class=\"line\">1167</span><br><span class=\"line\">1168</span><br><span class=\"line\">1169</span><br><span class=\"line\">1170</span><br><span class=\"line\">1171</span><br><span class=\"line\">1172</span><br><span class=\"line\">1173</span><br><span class=\"line\">1174</span><br><span class=\"line\">1175</span><br><span class=\"line\">1176</span><br><span class=\"line\">1177</span><br><span class=\"line\">1178</span><br><span class=\"line\">1179</span><br><span class=\"line\">1180</span><br><span class=\"line\">1181</span><br><span class=\"line\">1182</span><br><span class=\"line\">1183</span><br><span class=\"line\">1184</span><br><span class=\"line\">1185</span><br><span class=\"line\">1186</span><br><span class=\"line\">1187</span><br><span class=\"line\">1188</span><br><span class=\"line\">1189</span><br><span class=\"line\">1190</span><br><span class=\"line\">1191</span><br><span class=\"line\">1192</span><br><span class=\"line\">1193</span><br><span class=\"line\">1194</span><br><span class=\"line\">1195</span><br><span class=\"line\">1196</span><br><span class=\"line\">1197</span><br><span class=\"line\">1198</span><br><span class=\"line\">1199</span><br><span class=\"line\">1200</span><br><span class=\"line\">1201</span><br><span class=\"line\">1202</span><br><span class=\"line\">1203</span><br><span class=\"line\">1204</span><br><span class=\"line\">1205</span><br><span class=\"line\">1206</span><br><span class=\"line\">1207</span><br><span class=\"line\">1208</span><br><span class=\"line\">1209</span><br><span class=\"line\">1210</span><br><span class=\"line\">1211</span><br><span class=\"line\">1212</span><br><span class=\"line\">1213</span><br><span class=\"line\">1214</span><br><span class=\"line\">1215</span><br><span class=\"line\">1216</span><br><span class=\"line\">1217</span><br><span class=\"line\">1218</span><br><span class=\"line\">1219</span><br><span class=\"line\">1220</span><br><span class=\"line\">1221</span><br><span class=\"line\">1222</span><br><span class=\"line\">1223</span><br><span class=\"line\">1224</span><br><span class=\"line\">1225</span><br><span class=\"line\">1226</span><br><span class=\"line\">1227</span><br><span class=\"line\">1228</span><br><span class=\"line\">1229</span><br><span class=\"line\">1230</span><br><span class=\"line\">1231</span><br><span class=\"line\">1232</span><br><span class=\"line\">1233</span><br><span class=\"line\">1234</span><br><span class=\"line\">1235</span><br><span class=\"line\">1236</span><br><span class=\"line\">1237</span><br><span class=\"line\">1238</span><br><span class=\"line\">1239</span><br><span class=\"line\">1240</span><br><span class=\"line\">1241</span><br><span class=\"line\">1242</span><br><span class=\"line\">1243</span><br><span class=\"line\">1244</span><br><span class=\"line\">1245</span><br><span class=\"line\">1246</span><br><span class=\"line\">1247</span><br><span class=\"line\">1248</span><br><span class=\"line\">1249</span><br><span class=\"line\">1250</span><br><span class=\"line\">1251</span><br><span class=\"line\">1252</span><br><span class=\"line\">1253</span><br><span class=\"line\">1254</span><br><span class=\"line\">1255</span><br><span class=\"line\">1256</span><br><span class=\"line\">1257</span><br><span class=\"line\">1258</span><br><span class=\"line\">1259</span><br><span class=\"line\">1260</span><br><span class=\"line\">1261</span><br><span class=\"line\">1262</span><br><span class=\"line\">1263</span><br><span class=\"line\">1264</span><br><span class=\"line\">1265</span><br><span class=\"line\">1266</span><br><span class=\"line\">1267</span><br><span class=\"line\">1268</span><br><span class=\"line\">1269</span><br><span class=\"line\">1270</span><br><span class=\"line\">1271</span><br><span class=\"line\">1272</span><br><span class=\"line\">1273</span><br><span class=\"line\">1274</span><br><span class=\"line\">1275</span><br><span class=\"line\">1276</span><br><span class=\"line\">1277</span><br><span class=\"line\">1278</span><br><span class=\"line\">1279</span><br><span class=\"line\">1280</span><br><span class=\"line\">1281</span><br><span class=\"line\">1282</span><br><span class=\"line\">1283</span><br><span class=\"line\">1284</span><br><span class=\"line\">1285</span><br><span class=\"line\">1286</span><br><span class=\"line\">1287</span><br><span class=\"line\">1288</span><br><span class=\"line\">1289</span><br><span class=\"line\">1290</span><br><span class=\"line\">1291</span><br><span class=\"line\">1292</span><br><span class=\"line\">1293</span><br><span class=\"line\">1294</span><br><span class=\"line\">1295</span><br><span class=\"line\">1296</span><br><span class=\"line\">1297</span><br><span class=\"line\">1298</span><br><span class=\"line\">1299</span><br><span class=\"line\">1300</span><br><span class=\"line\">1301</span><br><span class=\"line\">1302</span><br><span class=\"line\">1303</span><br><span class=\"line\">1304</span><br><span class=\"line\">1305</span><br><span class=\"line\">1306</span><br><span class=\"line\">1307</span><br><span class=\"line\">1308</span><br><span class=\"line\">1309</span><br><span class=\"line\">1310</span><br><span class=\"line\">1311</span><br><span class=\"line\">1312</span><br><span class=\"line\">1313</span><br><span class=\"line\">1314</span><br><span class=\"line\">1315</span><br><span class=\"line\">1316</span><br><span class=\"line\">1317</span><br><span class=\"line\">1318</span><br><span class=\"line\">1319</span><br><span class=\"line\">1320</span><br><span class=\"line\">1321</span><br><span class=\"line\">1322</span><br><span class=\"line\">1323</span><br><span class=\"line\">1324</span><br><span class=\"line\">1325</span><br><span class=\"line\">1326</span><br><span class=\"line\">1327</span><br><span class=\"line\">1328</span><br><span class=\"line\">1329</span><br><span class=\"line\">1330</span><br><span class=\"line\">1331</span><br><span class=\"line\">1332</span><br><span class=\"line\">1333</span><br><span class=\"line\">1334</span><br><span class=\"line\">1335</span><br><span class=\"line\">1336</span><br><span class=\"line\">1337</span><br><span class=\"line\">1338</span><br><span class=\"line\">1339</span><br><span class=\"line\">1340</span><br><span class=\"line\">1341</span><br><span class=\"line\">1342</span><br><span class=\"line\">1343</span><br><span class=\"line\">1344</span><br><span class=\"line\">1345</span><br><span class=\"line\">1346</span><br><span class=\"line\">1347</span><br><span class=\"line\">1348</span><br><span class=\"line\">1349</span><br><span class=\"line\">1350</span><br><span class=\"line\">1351</span><br><span class=\"line\">1352</span><br><span class=\"line\">1353</span><br><span class=\"line\">1354</span><br><span class=\"line\">1355</span><br><span class=\"line\">1356</span><br><span class=\"line\">1357</span><br><span class=\"line\">1358</span><br><span class=\"line\">1359</span><br><span class=\"line\">1360</span><br><span class=\"line\">1361</span><br><span class=\"line\">1362</span><br><span class=\"line\">1363</span><br><span class=\"line\">1364</span><br><span class=\"line\">1365</span><br><span class=\"line\">1366</span><br><span class=\"line\">1367</span><br><span class=\"line\">1368</span><br><span class=\"line\">1369</span><br><span class=\"line\">1370</span><br><span class=\"line\">1371</span><br><span class=\"line\">1372</span><br><span class=\"line\">1373</span><br><span class=\"line\">1374</span><br><span class=\"line\">1375</span><br><span class=\"line\">1376</span><br><span class=\"line\">1377</span><br><span class=\"line\">1378</span><br><span class=\"line\">1379</span><br><span class=\"line\">1380</span><br><span class=\"line\">1381</span><br><span class=\"line\">1382</span><br><span class=\"line\">1383</span><br><span class=\"line\">1384</span><br><span class=\"line\">1385</span><br><span class=\"line\">1386</span><br><span class=\"line\">1387</span><br><span class=\"line\">1388</span><br><span class=\"line\">1389</span><br><span class=\"line\">1390</span><br><span class=\"line\">1391</span><br><span class=\"line\">1392</span><br><span class=\"line\">1393</span><br><span class=\"line\">1394</span><br><span class=\"line\">1395</span><br><span class=\"line\">1396</span><br><span class=\"line\">1397</span><br><span class=\"line\">1398</span><br><span class=\"line\">1399</span><br><span class=\"line\">1400</span><br><span class=\"line\">1401</span><br><span class=\"line\">1402</span><br><span class=\"line\">1403</span><br><span class=\"line\">1404</span><br><span class=\"line\">1405</span><br><span class=\"line\">1406</span><br><span class=\"line\">1407</span><br><span class=\"line\">1408</span><br><span class=\"line\">1409</span><br><span class=\"line\">1410</span><br><span class=\"line\">1411</span><br><span class=\"line\">1412</span><br><span class=\"line\">1413</span><br><span class=\"line\">1414</span><br><span class=\"line\">1415</span><br><span class=\"line\">1416</span><br><span class=\"line\">1417</span><br><span class=\"line\">1418</span><br><span class=\"line\">1419</span><br><span class=\"line\">1420</span><br><span class=\"line\">1421</span><br><span class=\"line\">1422</span><br><span class=\"line\">1423</span><br><span class=\"line\">1424</span><br><span class=\"line\">1425</span><br><span class=\"line\">1426</span><br><span class=\"line\">1427</span><br><span class=\"line\">1428</span><br><span class=\"line\">1429</span><br><span class=\"line\">1430</span><br><span class=\"line\">1431</span><br><span class=\"line\">1432</span><br><span class=\"line\">1433</span><br><span class=\"line\">1434</span><br><span class=\"line\">1435</span><br><span class=\"line\">1436</span><br><span class=\"line\">1437</span><br><span class=\"line\">1438</span><br><span class=\"line\">1439</span><br><span class=\"line\">1440</span><br><span class=\"line\">1441</span><br><span class=\"line\">1442</span><br><span class=\"line\">1443</span><br><span class=\"line\">1444</span><br><span class=\"line\">1445</span><br><span class=\"line\">1446</span><br><span class=\"line\">1447</span><br><span class=\"line\">1448</span><br><span class=\"line\">1449</span><br><span class=\"line\">1450</span><br><span class=\"line\">1451</span><br><span class=\"line\">1452</span><br><span class=\"line\">1453</span><br><span class=\"line\">1454</span><br><span class=\"line\">1455</span><br><span class=\"line\">1456</span><br><span class=\"line\">1457</span><br><span class=\"line\">1458</span><br><span class=\"line\">1459</span><br><span class=\"line\">1460</span><br><span class=\"line\">1461</span><br><span class=\"line\">1462</span><br><span class=\"line\">1463</span><br><span class=\"line\">1464</span><br><span class=\"line\">1465</span><br><span class=\"line\">1466</span><br><span class=\"line\">1467</span><br><span class=\"line\">1468</span><br><span class=\"line\">1469</span><br><span class=\"line\">1470</span><br><span class=\"line\">1471</span><br><span class=\"line\">1472</span><br><span class=\"line\">1473</span><br><span class=\"line\">1474</span><br><span class=\"line\">1475</span><br><span class=\"line\">1476</span><br><span class=\"line\">1477</span><br><span class=\"line\">1478</span><br><span class=\"line\">1479</span><br><span class=\"line\">1480</span><br><span class=\"line\">1481</span><br><span class=\"line\">1482</span><br><span class=\"line\">1483</span><br><span class=\"line\">1484</span><br><span class=\"line\">1485</span><br><span class=\"line\">1486</span><br><span class=\"line\">1487</span><br><span class=\"line\">1488</span><br><span class=\"line\">1489</span><br><span class=\"line\">1490</span><br><span class=\"line\">1491</span><br><span class=\"line\">1492</span><br><span class=\"line\">1493</span><br><span class=\"line\">1494</span><br><span class=\"line\">1495</span><br><span class=\"line\">1496</span><br><span class=\"line\">1497</span><br><span class=\"line\">1498</span><br><span class=\"line\">1499</span><br><span class=\"line\">1500</span><br><span class=\"line\">1501</span><br><span class=\"line\">1502</span><br><span class=\"line\">1503</span><br><span class=\"line\">1504</span><br><span class=\"line\">1505</span><br><span class=\"line\">1506</span><br><span class=\"line\">1507</span><br><span class=\"line\">1508</span><br><span class=\"line\">1509</span><br><span class=\"line\">1510</span><br><span class=\"line\">1511</span><br><span class=\"line\">1512</span><br><span class=\"line\">1513</span><br><span class=\"line\">1514</span><br><span class=\"line\">1515</span><br><span class=\"line\">1516</span><br><span class=\"line\">1517</span><br><span class=\"line\">1518</span><br><span class=\"line\">1519</span><br><span class=\"line\">1520</span><br><span class=\"line\">1521</span><br><span class=\"line\">1522</span><br><span class=\"line\">1523</span><br><span class=\"line\">1524</span><br><span class=\"line\">1525</span><br><span class=\"line\">1526</span><br><span class=\"line\">1527</span><br><span class=\"line\">1528</span><br><span class=\"line\">1529</span><br><span class=\"line\">1530</span><br><span class=\"line\">1531</span><br><span class=\"line\">1532</span><br><span class=\"line\">1533</span><br><span class=\"line\">1534</span><br><span class=\"line\">1535</span><br><span class=\"line\">1536</span><br><span class=\"line\">1537</span><br><span class=\"line\">1538</span><br><span class=\"line\">1539</span><br><span class=\"line\">1540</span><br><span class=\"line\">1541</span><br><span class=\"line\">1542</span><br><span class=\"line\">1543</span><br><span class=\"line\">1544</span><br><span class=\"line\">1545</span><br><span class=\"line\">1546</span><br><span class=\"line\">1547</span><br><span class=\"line\">1548</span><br><span class=\"line\">1549</span><br><span class=\"line\">1550</span><br><span class=\"line\">1551</span><br><span class=\"line\">1552</span><br><span class=\"line\">1553</span><br><span class=\"line\">1554</span><br><span class=\"line\">1555</span><br><span class=\"line\">1556</span><br><span class=\"line\">1557</span><br><span class=\"line\">1558</span><br><span class=\"line\">1559</span><br><span class=\"line\">1560</span><br><span class=\"line\">1561</span><br><span class=\"line\">1562</span><br><span class=\"line\">1563</span><br><span class=\"line\">1564</span><br><span class=\"line\">1565</span><br><span class=\"line\">1566</span><br><span class=\"line\">1567</span><br><span class=\"line\">1568</span><br><span class=\"line\">1569</span><br><span class=\"line\">1570</span><br><span class=\"line\">1571</span><br><span class=\"line\">1572</span><br><span class=\"line\">1573</span><br><span class=\"line\">1574</span><br><span class=\"line\">1575</span><br><span class=\"line\">1576</span><br><span class=\"line\">1577</span><br><span class=\"line\">1578</span><br><span class=\"line\">1579</span><br><span class=\"line\">1580</span><br><span class=\"line\">1581</span><br><span class=\"line\">1582</span><br><span class=\"line\">1583</span><br><span class=\"line\">1584</span><br><span class=\"line\">1585</span><br><span class=\"line\">1586</span><br><span class=\"line\">1587</span><br><span class=\"line\">1588</span><br><span class=\"line\">1589</span><br><span class=\"line\">1590</span><br><span class=\"line\">1591</span><br><span class=\"line\">1592</span><br><span class=\"line\">1593</span><br><span class=\"line\">1594</span><br><span class=\"line\">1595</span><br><span class=\"line\">1596</span><br><span class=\"line\">1597</span><br><span class=\"line\">1598</span><br><span class=\"line\">1599</span><br><span class=\"line\">1600</span><br><span class=\"line\">1601</span><br><span class=\"line\">1602</span><br><span class=\"line\">1603</span><br><span class=\"line\">1604</span><br><span class=\"line\">1605</span><br><span class=\"line\">1606</span><br><span class=\"line\">1607</span><br><span class=\"line\">1608</span><br><span class=\"line\">1609</span><br><span class=\"line\">1610</span><br><span class=\"line\">1611</span><br><span class=\"line\">1612</span><br><span class=\"line\">1613</span><br><span class=\"line\">1614</span><br><span class=\"line\">1615</span><br><span class=\"line\">1616</span><br><span class=\"line\">1617</span><br><span class=\"line\">1618</span><br><span class=\"line\">1619</span><br><span class=\"line\">1620</span><br><span class=\"line\">1621</span><br><span class=\"line\">1622</span><br><span class=\"line\">1623</span><br><span class=\"line\">1624</span><br><span class=\"line\">1625</span><br><span class=\"line\">1626</span><br><span class=\"line\">1627</span><br><span class=\"line\">1628</span><br><span class=\"line\">1629</span><br><span class=\"line\">1630</span><br><span class=\"line\">1631</span><br><span class=\"line\">1632</span><br><span class=\"line\">1633</span><br><span class=\"line\">1634</span><br><span class=\"line\">1635</span><br><span class=\"line\">1636</span><br><span class=\"line\">1637</span><br><span class=\"line\">1638</span><br><span class=\"line\">1639</span><br><span class=\"line\">1640</span><br><span class=\"line\">1641</span><br><span class=\"line\">1642</span><br><span class=\"line\">1643</span><br><span class=\"line\">1644</span><br><span class=\"line\">1645</span><br><span class=\"line\">1646</span><br><span class=\"line\">1647</span><br><span class=\"line\">1648</span><br><span class=\"line\">1649</span><br><span class=\"line\">1650</span><br><span class=\"line\">1651</span><br><span class=\"line\">1652</span><br><span class=\"line\">1653</span><br><span class=\"line\">1654</span><br><span class=\"line\">1655</span><br><span class=\"line\">1656</span><br><span class=\"line\">1657</span><br><span class=\"line\">1658</span><br><span class=\"line\">1659</span><br><span class=\"line\">1660</span><br><span class=\"line\">1661</span><br><span class=\"line\">1662</span><br><span class=\"line\">1663</span><br><span class=\"line\">1664</span><br><span class=\"line\">1665</span><br><span class=\"line\">1666</span><br><span class=\"line\">1667</span><br><span class=\"line\">1668</span><br><span class=\"line\">1669</span><br><span class=\"line\">1670</span><br><span class=\"line\">1671</span><br><span class=\"line\">1672</span><br><span class=\"line\">1673</span><br><span class=\"line\">1674</span><br><span class=\"line\">1675</span><br><span class=\"line\">1676</span><br><span class=\"line\">1677</span><br><span class=\"line\">1678</span><br><span class=\"line\">1679</span><br><span class=\"line\">1680</span><br><span class=\"line\">1681</span><br><span class=\"line\">1682</span><br><span class=\"line\">1683</span><br><span class=\"line\">1684</span><br><span class=\"line\">1685</span><br><span class=\"line\">1686</span><br><span class=\"line\">1687</span><br><span class=\"line\">1688</span><br><span class=\"line\">1689</span><br><span class=\"line\">1690</span><br><span class=\"line\">1691</span><br><span class=\"line\">1692</span><br><span class=\"line\">1693</span><br><span class=\"line\">1694</span><br><span class=\"line\">1695</span><br><span class=\"line\">1696</span><br><span class=\"line\">1697</span><br><span class=\"line\">1698</span><br><span class=\"line\">1699</span><br><span class=\"line\">1700</span><br><span class=\"line\">1701</span><br><span class=\"line\">1702</span><br><span class=\"line\">1703</span><br><span class=\"line\">1704</span><br><span class=\"line\">1705</span><br><span class=\"line\">1706</span><br><span class=\"line\">1707</span><br><span class=\"line\">1708</span><br><span class=\"line\">1709</span><br><span class=\"line\">1710</span><br><span class=\"line\">1711</span><br><span class=\"line\">1712</span><br><span class=\"line\">1713</span><br><span class=\"line\">1714</span><br><span class=\"line\">1715</span><br><span class=\"line\">1716</span><br><span class=\"line\">1717</span><br><span class=\"line\">1718</span><br><span class=\"line\">1719</span><br><span class=\"line\">1720</span><br><span class=\"line\">1721</span><br><span class=\"line\">1722</span><br><span class=\"line\">1723</span><br><span class=\"line\">1724</span><br><span class=\"line\">1725</span><br><span class=\"line\">1726</span><br><span class=\"line\">1727</span><br><span class=\"line\">1728</span><br><span class=\"line\">1729</span><br><span class=\"line\">1730</span><br><span class=\"line\">1731</span><br><span class=\"line\">1732</span><br><span class=\"line\">1733</span><br><span class=\"line\">1734</span><br><span class=\"line\">1735</span><br><span class=\"line\">1736</span><br><span class=\"line\">1737</span><br><span class=\"line\">1738</span><br><span class=\"line\">1739</span><br><span class=\"line\">1740</span><br><span class=\"line\">1741</span><br><span class=\"line\">1742</span><br><span class=\"line\">1743</span><br><span class=\"line\">1744</span><br><span class=\"line\">1745</span><br><span class=\"line\">1746</span><br><span class=\"line\">1747</span><br><span class=\"line\">1748</span><br><span class=\"line\">1749</span><br><span class=\"line\">1750</span><br><span class=\"line\">1751</span><br><span class=\"line\">1752</span><br><span class=\"line\">1753</span><br><span class=\"line\">1754</span><br><span class=\"line\">1755</span><br><span class=\"line\">1756</span><br><span class=\"line\">1757</span><br><span class=\"line\">1758</span><br><span class=\"line\">1759</span><br><span class=\"line\">1760</span><br><span class=\"line\">1761</span><br><span class=\"line\">1762</span><br><span class=\"line\">1763</span><br><span class=\"line\">1764</span><br><span class=\"line\">1765</span><br><span class=\"line\">1766</span><br><span class=\"line\">1767</span><br><span class=\"line\">1768</span><br><span class=\"line\">1769</span><br><span class=\"line\">1770</span><br><span class=\"line\">1771</span><br><span class=\"line\">1772</span><br><span class=\"line\">1773</span><br><span class=\"line\">1774</span><br><span class=\"line\">1775</span><br><span class=\"line\">1776</span><br><span class=\"line\">1777</span><br><span class=\"line\">1778</span><br><span class=\"line\">1779</span><br><span class=\"line\">1780</span><br><span class=\"line\">1781</span><br><span class=\"line\">1782</span><br><span class=\"line\">1783</span><br><span class=\"line\">1784</span><br><span class=\"line\">1785</span><br><span class=\"line\">1786</span><br><span class=\"line\">1787</span><br><span class=\"line\">1788</span><br><span class=\"line\">1789</span><br><span class=\"line\">1790</span><br><span class=\"line\">1791</span><br><span class=\"line\">1792</span><br><span class=\"line\">1793</span><br><span class=\"line\">1794</span><br><span class=\"line\">1795</span><br><span class=\"line\">1796</span><br><span class=\"line\">1797</span><br><span class=\"line\">1798</span><br><span class=\"line\">1799</span><br><span class=\"line\">1800</span><br><span class=\"line\">1801</span><br><span class=\"line\">1802</span><br><span class=\"line\">1803</span><br><span class=\"line\">1804</span><br><span class=\"line\">1805</span><br><span class=\"line\">1806</span><br><span class=\"line\">1807</span><br><span class=\"line\">1808</span><br><span class=\"line\">1809</span><br><span class=\"line\">1810</span><br><span class=\"line\">1811</span><br><span class=\"line\">1812</span><br><span class=\"line\">1813</span><br><span class=\"line\">1814</span><br><span class=\"line\">1815</span><br><span class=\"line\">1816</span><br><span class=\"line\">1817</span><br><span class=\"line\">1818</span><br><span class=\"line\">1819</span><br><span class=\"line\">1820</span><br><span class=\"line\">1821</span><br><span class=\"line\">1822</span><br><span class=\"line\">1823</span><br><span class=\"line\">1824</span><br><span class=\"line\">1825</span><br><span class=\"line\">1826</span><br><span class=\"line\">1827</span><br><span class=\"line\">1828</span><br><span class=\"line\">1829</span><br><span class=\"line\">1830</span><br><span class=\"line\">1831</span><br><span class=\"line\">1832</span><br><span class=\"line\">1833</span><br><span class=\"line\">1834</span><br><span class=\"line\">1835</span><br><span class=\"line\">1836</span><br><span class=\"line\">1837</span><br><span class=\"line\">1838</span><br><span class=\"line\">1839</span><br><span class=\"line\">1840</span><br><span class=\"line\">1841</span><br><span class=\"line\">1842</span><br><span class=\"line\">1843</span><br><span class=\"line\">1844</span><br><span class=\"line\">1845</span><br><span class=\"line\">1846</span><br><span class=\"line\">1847</span><br><span class=\"line\">1848</span><br><span class=\"line\">1849</span><br><span class=\"line\">1850</span><br><span class=\"line\">1851</span><br><span class=\"line\">1852</span><br><span class=\"line\">1853</span><br><span class=\"line\">1854</span><br><span class=\"line\">1855</span><br><span class=\"line\">1856</span><br><span class=\"line\">1857</span><br><span class=\"line\">1858</span><br><span class=\"line\">1859</span><br><span class=\"line\">1860</span><br><span class=\"line\">1861</span><br><span class=\"line\">1862</span><br><span class=\"line\">1863</span><br><span class=\"line\">1864</span><br><span class=\"line\">1865</span><br><span class=\"line\">1866</span><br><span class=\"line\">1867</span><br><span class=\"line\">1868</span><br><span class=\"line\">1869</span><br><span class=\"line\">1870</span><br><span class=\"line\">1871</span><br><span class=\"line\">1872</span><br><span class=\"line\">1873</span><br><span class=\"line\">1874</span><br><span class=\"line\">1875</span><br><span class=\"line\">1876</span><br><span class=\"line\">1877</span><br><span class=\"line\">1878</span><br><span class=\"line\">1879</span><br><span class=\"line\">1880</span><br><span class=\"line\">1881</span><br><span class=\"line\">1882</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 文件&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ls -rtl                                    # 按时间倒叙列出所有目录和文件 ll -rt</span><br><span class=\"line\">    touch file                                 # 创建空白文件</span><br><span class=\"line\">    rm -rf dirname                             # 不提示删除非空目录(-r:递归删除 -f强制)</span><br><span class=\"line\">    dos2unix                                   # windows文本转linux文本</span><br><span class=\"line\">    unix2dos                                   # linux文本转windows文本</span><br><span class=\"line\">    enca filename                              # 查看编码  安装 yum install -y enca</span><br><span class=\"line\">    md5sum                                     # 查看md5值</span><br><span class=\"line\">    ln sourcefile newfile                      # 硬链接</span><br><span class=\"line\">    ln -s sourcefile newfile                   # 符号连接</span><br><span class=\"line\">    readlink -f /data                          # 查看连接真实目录</span><br><span class=\"line\">    cat file | nl |less                        # 查看上下翻页且显示行号  q退出</span><br><span class=\"line\">    head                                       # 查看文件开头内容</span><br><span class=\"line\">    head -c 10m                                # 截取文件中10M内容</span><br><span class=\"line\">    split -C 10M                               # 将文件切割大小为10M -C按行</span><br><span class=\"line\">    tail -f file                               # 查看结尾 监视日志文件</span><br><span class=\"line\">    tail -F file                               # 监视日志并重试, 针对文件被mv的情况可以持续读取</span><br><span class=\"line\">    file                                       # 检查文件类型</span><br><span class=\"line\">    umask                                      # 更改默认权限</span><br><span class=\"line\">    uniq                                       # 删除重复的行</span><br><span class=\"line\">    uniq -c                                    # 重复的行出现次数</span><br><span class=\"line\">    uniq -u                                    # 只显示不重复行</span><br><span class=\"line\">    paste a b                                  # 将两个文件合并用tab键分隔开</span><br><span class=\"line\">    paste -d&#x27;+&#x27; a b                            # 将两个文件合并指定&#x27;+&#x27;符号隔开</span><br><span class=\"line\">    paste -s a                                 # 将多行数据合并到一行用tab键隔开</span><br><span class=\"line\">    chattr +i /etc/passwd                      # 不得任意改变文件或目录 -i去掉锁 -R递归，lsattr file查看文件锁情况</span><br><span class=\"line\">    more                                       # 向下分面器</span><br><span class=\"line\">    locate aaa                                 # 搜索</span><br><span class=\"line\">    wc -l file                                 # 查看行数</span><br><span class=\"line\">    cp filename&#123;,.bak&#125;                         # 快速备份一个文件</span><br><span class=\"line\">    \\cp a b                                    # 拷贝不提示 既不使用别名 cp -i</span><br><span class=\"line\">    rev                                        # 将行中的字符逆序排列</span><br><span class=\"line\">    comm -12 2 3                               # 行和行比较匹配</span><br><span class=\"line\">    echo &quot;10.45aa&quot; |cksum                      # 字符串转数字编码，可做校验，也可用于文件校验</span><br><span class=\"line\">    iconv -f gbk -t utf8 source.txt &gt; new.txt  # 转换编码</span><br><span class=\"line\">    xxd /boot/grub/stage1                      # 16进制查看</span><br><span class=\"line\">    hexdump -C /boot/grub/stage1               # 16进制查看</span><br><span class=\"line\">    rename source new file                     # 重命名 可正则</span><br><span class=\"line\">    watch -d -n 1 &#x27;df; ls -FlAt /path&#x27;         # 实时某个目录下查看最新改动过的文件</span><br><span class=\"line\">    cp -v  /dev/dvd  /rhel4.6.iso9660          # 制作镜像</span><br><span class=\"line\">    diff suzu.c suzu2.c  &gt; sz.patch            # 制作补丁</span><br><span class=\"line\">    patch suzu.c &lt; sz.patch                    # 安装补丁</span><br><span class=\"line\"></span><br><span class=\"line\">    sort排序&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        -t                                     # 指定排序时所用的栏位分隔字符</span><br><span class=\"line\">        -n                                     # 依照数值的大小排序</span><br><span class=\"line\">        -r                                     # 以相反的顺序来排序</span><br><span class=\"line\">        -f                                     # 排序时，将小写字母视为大写字母</span><br><span class=\"line\">        -d                                     # 排序时，处理英文字母、数字及空格字符外，忽略其他的字符</span><br><span class=\"line\">        -c                                     # 检查文件是否已经按照顺序排序</span><br><span class=\"line\">        -b                                     # 忽略每行前面开始处的空格字符</span><br><span class=\"line\">        -M                                     # 前面3个字母依照月份的缩写进行排序</span><br><span class=\"line\">        -k                                     # 指定域</span><br><span class=\"line\">        -m                                     # 将几个排序好的文件进行合并</span><br><span class=\"line\">        -T                                     # 指定临时文件目录,默认在/tmp</span><br><span class=\"line\">        -o                                     # 将排序后的结果存入指定的文        </span><br><span class=\"line\"></span><br><span class=\"line\">        sort -n                                # 按数字排序</span><br><span class=\"line\">        sort -nr                               # 按数字倒叙</span><br><span class=\"line\">        sort -u                                # 过滤重复行</span><br><span class=\"line\">        sort -m a.txt c.txt                    # 将两个文件内容整合到一起</span><br><span class=\"line\">        sort -n -t&#x27; &#x27; -k 2 -k 3 a.txt          # 第二域相同，将从第三域进行升降处理</span><br><span class=\"line\">        sort -n -t&#x27;:&#x27; -k 3r a.txt              # 以:为分割域的第三域进行倒叙排列</span><br><span class=\"line\">        sort -k 1.3 a.txt                      # 从第三个字母起进行排序</span><br><span class=\"line\">        sort -t&quot; &quot; -k 2n -u  a.txt             # 以第二域进行排序，如果遇到重复的，就删除</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    find查找&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # linux文件无创建时间</span><br><span class=\"line\">        # Access 使用时间</span><br><span class=\"line\">        # Modify 内容修改时间</span><br><span class=\"line\">        # Change 状态改变时间(权限、属主)</span><br><span class=\"line\">        # 时间默认以24小时为单位,当前时间到向前24小时为0天,向前48-72小时为2天</span><br><span class=\"line\">        # -and 且 匹配两个条件 参数可以确定时间范围 -mtime +2 -and -mtime -4</span><br><span class=\"line\">        # -or 或 匹配任意一个条件</span><br><span class=\"line\"></span><br><span class=\"line\">        find /etc -name &quot;*http*&quot;                                # 按文件名查找</span><br><span class=\"line\">        find . -type f                                          # 查找某一类型文件</span><br><span class=\"line\">        find / -perm                                            # 按照文件权限查找</span><br><span class=\"line\">        find / -user                                            # 按照文件属主查找</span><br><span class=\"line\">        find / -group                                           # 按照文件所属的组来查找文件</span><br><span class=\"line\">        find / -atime -n                                        # 文件使用时间在N天以内</span><br><span class=\"line\">        find / -atime +n                                        # 文件使用时间在N天以前</span><br><span class=\"line\">        find / -mtime +n                                        # 文件内容改变时间在N天以前</span><br><span class=\"line\">        find / -ctime +n                                        # 文件状态改变时间在N天前</span><br><span class=\"line\">        find / -mmin +30                                        # 按分钟查找内容改变</span><br><span class=\"line\">        find / -size +1000000c -print                           # 查找文件长度大于1M字节的文件</span><br><span class=\"line\">        find /etc -name &quot;*passwd*&quot; -exec grep &quot;xuesong&quot; &#123;&#125; \\;   # 按名字查找文件传递给-exec后命令</span><br><span class=\"line\">        find . -name &#x27;t*&#x27; -exec basename &#123;&#125; \\;                  # 查找文件名,不取路径</span><br><span class=\"line\">        find . -type f -name &quot;err*&quot; -exec  rename err ERR &#123;&#125; \\; # 批量改名(查找err 替换为 ERR &#123;&#125;文件</span><br><span class=\"line\">        find path -name *name1* -or -name *name2*               # 查找任意一个关键字</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    vim编辑器&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 常用配置</span><br><span class=\"line\">        set smartindent</span><br><span class=\"line\">        set tabstop=4</span><br><span class=\"line\">        set shiftwidth=4</span><br><span class=\"line\">        set expandtab</span><br><span class=\"line\">        set softtabstop=4</span><br><span class=\"line\">        set noautoindent</span><br><span class=\"line\">        set nosmartindent</span><br><span class=\"line\">        set paste</span><br><span class=\"line\">        set clipboard=unnamed</span><br><span class=\"line\"></span><br><span class=\"line\">        gconf-editor           # 配置编辑器</span><br><span class=\"line\">        /etc/vimrc             # 配置文件路径</span><br><span class=\"line\">        vim +24 file           # 打开文件定位到指定行</span><br><span class=\"line\">        vim file1 file2        # 打开多个文件</span><br><span class=\"line\">        vim  -r file           # 恢复上次异常关闭的文件 .file.swp </span><br><span class=\"line\">        vim -O2 file1 file2    # 垂直分屏</span><br><span class=\"line\">        vim -on file1 file2    # 水平分屏</span><br><span class=\"line\">        Ctrl+ U                # 向前翻页</span><br><span class=\"line\">        Ctrl+ D                # 向后翻页</span><br><span class=\"line\">        Ctrl+ww                # 在窗口间切换</span><br><span class=\"line\">        Ctrl+w +or-or=         # 增减高度</span><br><span class=\"line\">        :sp filename           # 上下分割打开新文件</span><br><span class=\"line\">        :vs filename           # 左右分割打开新文件</span><br><span class=\"line\">        :set nu                # 打开行号</span><br><span class=\"line\">        :set nonu              # 取消行号</span><br><span class=\"line\">        :nohl                  # 取消高亮</span><br><span class=\"line\">        :set paste             # 取消缩进</span><br><span class=\"line\">        :set autoindent        # 设置自动缩进</span><br><span class=\"line\">\t\t:set list              # 显示制表符</span><br><span class=\"line\">        :set ff                # 查看文本格式</span><br><span class=\"line\">        :set binary            # 改为unix格式</span><br><span class=\"line\">        :%s/str/newstr/g       # 全部替换</span><br><span class=\"line\">        :200                   # 跳转到200  1 文件头</span><br><span class=\"line\">        G                      # 跳到行尾</span><br><span class=\"line\">        dd                     # 删除当前行 并复制 可直接p粘贴</span><br><span class=\"line\">        11111dd                # 删除11111行，可用来清空文件</span><br><span class=\"line\">        r                      # 替换单个字符</span><br><span class=\"line\">        R                      # 替换多个字符</span><br><span class=\"line\">        u                      # 撤销上次操作</span><br><span class=\"line\">        *                      # 全文匹配当前光标所在字符串</span><br><span class=\"line\">        $                      # 行尾</span><br><span class=\"line\">        0                      # 行首</span><br><span class=\"line\">        X                      # 文档加密</span><br><span class=\"line\">        v =                    # 自动格式化代码</span><br><span class=\"line\">        Ctrl+v                 # 可视模式</span><br><span class=\"line\">        Ctrl+v I ESC           # 多行操作</span><br><span class=\"line\">        Ctrl+v s ESC           # 批量取消注释</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    归档解压缩&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        tar zxvpf gz.tar.gz  dir                         # 解包指定tar.gz中的内容  不指定目录则全解压</span><br><span class=\"line\">        tar zcvpf /$path/gz.tar.gz *                     # 打包gz 注意*最好用相对路径</span><br><span class=\"line\">        tar zcf /$path/gz.tar.gz *                       # 打包正确不提示</span><br><span class=\"line\">        tar ztvpf gz.tar.gz                              # 查看gz</span><br><span class=\"line\">        tar xvf 1.tar -C dir                             # 解包tar 放到指定目录</span><br><span class=\"line\">        tar -cvf 1.tar *                                 # 打包tar</span><br><span class=\"line\">        tar tvf 1.tar                                    # 查看tar</span><br><span class=\"line\">        tar -rvf 1.tar filename                          # 给tar追加文件</span><br><span class=\"line\">        tar --exclude=/home/dmtsai --exclude=*.tar -zcvf myfile.tar.gz /home/* /etc      # 打包/home, /etc ，但排除 /home/dmtsai</span><br><span class=\"line\">        tar -N &quot;2005/06/01&quot; -zcvf home.tar.gz /home      # 在 /home 当中，比 2005/06/01 新的文件才备份</span><br><span class=\"line\">        tar -zcvfh home.tar.gz /home                     # 打包目录中包括连接目录</span><br><span class=\"line\">        tar zcf - ./ | ssh root@IP &quot;tar zxf - -C /xxxx&quot;  # 一边压缩一边解压</span><br><span class=\"line\">        zgrep str 1.gz                                   # 查看压缩包中文件字符行</span><br><span class=\"line\">        bzip2  -dv 1.tar.bz2                             # 解压bzip2</span><br><span class=\"line\">        bzip2 -v 1.tar                                   # bzip2压缩</span><br><span class=\"line\">        bzcat                                            # 查看bzip2</span><br><span class=\"line\">        gzip file                                        # 直接压缩文件 # 压缩后源文件消失</span><br><span class=\"line\">        gunzip file.gz                                   # 直接解压文件 # 解压后源文件消失</span><br><span class=\"line\">        gzip -r dir/                                     # 递归压缩目录</span><br><span class=\"line\">        gzip  -r -d dir/                                 # 递归解压目录</span><br><span class=\"line\">        gzip -dv 1.tar.gz                                # 解压gzip到tar</span><br><span class=\"line\">        gzip -v 1.tar                                    # 压缩tar到gz</span><br><span class=\"line\">        unzip zip.zip                                    # 解压zip</span><br><span class=\"line\">        zip zip.zip *                                    # 压缩zip</span><br><span class=\"line\">        rar a rar.rar *.jpg                              # 压缩文件为rar包</span><br><span class=\"line\">        unrar x rar.rar                                  # 解压rar包</span><br><span class=\"line\">\t\tpigz -9 -p 2 *.log                               # 压缩文件,pigz是gzip升级版，可并行压缩</span><br><span class=\"line\">\t\tpigz -9 -d *.gz                                  # 解压</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    文件ACL权限控制&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        getfacl 1.test                      # 查看文件ACL权限</span><br><span class=\"line\">        setfacl -R -m u:xuesong:rw- 1.test  # 对文件增加用户的读写权限 -R 递归</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    svn&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        --force # 强制覆盖</span><br><span class=\"line\">        /usr/bin/svn --username user --password passwd co  $Code  $&#123;SvnPath&#125;src/                 # 检出整个项目</span><br><span class=\"line\">        /usr/bin/svn --username user --password passwd up  $Code  $&#123;SvnPath&#125;src/                 # 更新项目</span><br><span class=\"line\">        /usr/bin/svn --username user --password passwd export  $Code$File $&#123;SvnPath&#125;src/$File    # 导出个别文件</span><br><span class=\"line\">        /usr/bin/svn --username user --password passwd export -r 版本号 svn路径 本地路径 --force   # 导出指定版本</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    git&#123;</span><br><span class=\"line\">\t    git push --set-upstream origin develop             # 推送新分支</span><br><span class=\"line\">\t    git rm -r ./*                                      # 置空分支代码</span><br><span class=\"line\">        git push origin --delete v2.9                      # 删除远程分支</span><br><span class=\"line\">        git clone git@10.10.10.10:gittest.git  ./gittest/  # 克隆项目到指定目录</span><br><span class=\"line\">        git clone  -b develop --depth=1 http://git.a.com/d.git   # 克隆指定分支 克隆一层</span><br><span class=\"line\">\t\tgit checkout .                                     # 放弃所有文件修改</span><br><span class=\"line\">\t\tgit checkout -- filename                           # 放弃单个文件修改</span><br><span class=\"line\">        git status                                         # Show the working tree(工作树) status</span><br><span class=\"line\">        git log -n 1 --stat                                # 查看最后一次日志文件</span><br><span class=\"line\">        git branch -a                                      # 列出远程跟踪分支(remote-tracking branches)和本地分支</span><br><span class=\"line\">        git checkout developing                            # 切换到developing分支</span><br><span class=\"line\">        git checkout -b release                            # 切换分支没有从当前分支创建</span><br><span class=\"line\">        git checkout -b release origin/master              # 从远程分支创建本地镜像分支</span><br><span class=\"line\">        git push origin --delete release                   # 从远端删除分区，服务端有可能设置保护不允许删除</span><br><span class=\"line\">        git push origin release                            # 把本地分支提交到远程</span><br><span class=\"line\">        git pull                                           # 更新项目 需要cd到项目目录中</span><br><span class=\"line\">        git fetch -f -p                                    # 抓取远端代码但不合并到当前</span><br><span class=\"line\">        git reset --hard origin/master                     # 和远端同步分支</span><br><span class=\"line\">        git add .                                          # 更新所有文件</span><br><span class=\"line\">        git commit -m &quot;gittest up&quot;                         # 提交操作并添加备注</span><br><span class=\"line\">        git push                                           # 正式提交到远程git服务器</span><br><span class=\"line\">        git push [-u origin master]                        # 正式提交到远程git服务器(master分支)</span><br><span class=\"line\">        git tag [-a] dev-v-0.11.54 [-m &#x27;fix #67&#x27;]          # 创建tag,名为dev-v-0.11.54,备注fix #67</span><br><span class=\"line\">        git tag -l dev-v-0.11.54                           # 查看tag(dev-v-0.11.5)</span><br><span class=\"line\">        git push origin --tags                             # 提交tag</span><br><span class=\"line\">        git reset --hard                                   # 本地恢复整个项目</span><br><span class=\"line\">        git rm -r -n --cached  ./img                       # -n执行命令时,不会删除任何文件,而是展示此命令要删除的文件列表预览</span><br><span class=\"line\">        git rm -r --cached  ./img                          # 执行删除命令 需要commit和push让远程生效</span><br><span class=\"line\">        git init --bare smc-content-check.git              # 初始化新git项目  需要手动创建此目录并给git用户权限 chown -R git:git smc-content-check.git</span><br><span class=\"line\">        git config --global credential.helper store        # 记住密码</span><br><span class=\"line\">        git config [--global] user.name &quot;your name&quot;        # 设置你的用户名, 希望在一个特定的项目中使用不同的用户或e-mail地址, 不要--global选项</span><br><span class=\"line\">        git config [--global] user.email &quot;your email&quot;      # 设置你的e-mail地址, 每次Git提交都会使用该信息</span><br><span class=\"line\">        git config [--global] user.name                    # 查看用户名</span><br><span class=\"line\">        git config [--global] user.email                   # 查看用户e-mail</span><br><span class=\"line\">        git config --global --edit                         # 编辑~/.gitconfig(User-specific)配置文件, 值优先级高于/etc/gitconfig(System-wide)</span><br><span class=\"line\">        git config --edit                                  # 编辑.git/config(Repository specific)配置文件, 值优先级高于~/.gitconfig</span><br><span class=\"line\">        git cherry-pick  &lt;commit id&gt;                       # 用于把另一个本地分支的commit修改应用到当前分支 需要push到远程</span><br><span class=\"line\">        git log --pretty=format:&#x27;%h: %s&#x27; 9378b62..HEAD     # 查看指定范围更新操作 commit id</span><br><span class=\"line\">        git config --global core.ignorecase false          # 设置全局大小写敏感</span><br><span class=\"line\">        git ls-remote --heads origin refs/heads/test       # 查看</span><br><span class=\"line\">        git config pull.rebase false                       # 默认将pull下来的代码与现有的代码进行合并，有可能造成冲突。   </span><br><span class=\"line\"></span><br><span class=\"line\">        从远端拉一份新的&#123;</span><br><span class=\"line\">            # You have not concluded your merge (MERGE_HEAD exists)  git拉取失败</span><br><span class=\"line\">            git fetch --hard origin/master</span><br><span class=\"line\">            git reset --hard origin/master</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        删除远程分支并新建&#123;</span><br><span class=\"line\">            git checkout master</span><br><span class=\"line\">            git branch -r -d origin/test       # 删除远程分支  但有时候并没有删除 可以尝试使用下面的语句</span><br><span class=\"line\">            git push origin :test              # 推送一个空分支到远程分支，相当于删除远程分支</span><br><span class=\"line\">            git branch -d test                 # 删除本地test分支, -D 强制</span><br><span class=\"line\">            git branch -a |grep test</span><br><span class=\"line\">            git checkout -b test</span><br><span class=\"line\">            git push origin test</span><br><span class=\"line\"></span><br><span class=\"line\">            git reset --hard origin/test </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        迁移git项目&#123;</span><br><span class=\"line\">            git branch -r | grep -v &#x27;\\-&gt;&#x27; | while read remote; do git branch --track &quot;$&#123;remote#origin/&#125;&quot; &quot;$remote&quot;; done</span><br><span class=\"line\">            git fetch --all</span><br><span class=\"line\">            git pull --all</span><br><span class=\"line\">            git remote set-url origin git@git.github.cn:server/gw.git</span><br><span class=\"line\">            git push --all</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    恢复rm删除的文件&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # debugfs针对 ext2   # ext3grep针对 ext3   # extundelete针对 ext4</span><br><span class=\"line\">        df -T   # 首先查看磁盘分区格式</span><br><span class=\"line\">        umount /data/     # 卸载挂载,数据丢失请首先卸载挂载,或重新挂载只读</span><br><span class=\"line\">        ext3grep /dev/sdb1 --ls --inode 2         # 记录信息继续查找目录下文件inode信息</span><br><span class=\"line\">        ext3grep /dev/sdb1 --ls --inode 131081    # 此处是inode</span><br><span class=\"line\">        ext3grep /dev/sdb1 --restore-inode 49153  # 记录下inode信息开始恢复目录</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    openssl&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        openssl rand 15 -base64            # 口令生成</span><br><span class=\"line\">        openssl sha1 filename              # 哈希算法校验文件</span><br><span class=\"line\">        openssl md5 filename               # MD5校验文件</span><br><span class=\"line\">        openssl base64   filename.txt      # base64编码/解码文件(发送邮件附件之类功能会可以使用)</span><br><span class=\"line\">        openssl base64 -d   filename.bin   # base64编码/解码二进制文件</span><br><span class=\"line\">        openssl enc -aes-128-cbc   filename.aes-128-cbc                  # 加密文档</span><br><span class=\"line\">        # 推荐使用的加密算法是bf(Blowfish)和-aes-128-cbc(运行在CBC模式的128位密匙AES加密算法)，加密强度有保障</span><br><span class=\"line\">        openssl enc -d -aes-128-cbc -in filename.aes-128-cbc &gt; filename  # 解密文档</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">2 软件&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    rpm&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        rpm -ivh lynx          # rpm安装</span><br><span class=\"line\">        rpm -e lynx            # 卸载包</span><br><span class=\"line\">        rpm -e lynx --nodeps   # 强制卸载</span><br><span class=\"line\">        rpm -qa                # 查看所有安装的rpm包</span><br><span class=\"line\">        rpm -qa | grep lynx    # 查找包是否安装</span><br><span class=\"line\">        rpm -ql                # 软件包路径</span><br><span class=\"line\">        rpm -Uvh               # 升级包</span><br><span class=\"line\">        rpm --test lynx        # 测试</span><br><span class=\"line\">        rpm -qc                # 软件包配置文档</span><br><span class=\"line\">        rpm --initdb           # 初始化rpm 数据库</span><br><span class=\"line\">        rpm --rebuilddb        # 重建rpm数据库  在rpm和yum无响应的情况使用 先 rm -f /var/lib/rpm/__db.00* 在重建</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    yum&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        yum list                 # 所有软件列表</span><br><span class=\"line\">        yum install 包名          # 安装包和依赖包</span><br><span class=\"line\">        yum -y update            # 升级所有包版本,依赖关系，系统版本内核都升级</span><br><span class=\"line\">        yum -y update 软件包名    # 升级指定的软件包</span><br><span class=\"line\">        yum -y upgrade           # 不改变软件设置更新软件，系统版本升级，内核不改变</span><br><span class=\"line\">        yum search mail          # yum搜索相关包</span><br><span class=\"line\">        yum grouplist            # 软件包组</span><br><span class=\"line\">        yum -y groupinstall &quot;Virtualization&quot;   # 安装软件包组</span><br><span class=\"line\">        repoquery -ql gstreamer  # 不安装软件查看包含文件</span><br><span class=\"line\">        yum clean all            # 清除var下缓存</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    yum使用epel源&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 包下载地址: http://download.fedoraproject.org/pub/epel   # 选择版本5\\6\\7</span><br><span class=\"line\">        rpm -Uvh  http://mirrors.hustunique.com/epel//6/x86_64/epel-release-6-8.noarch.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">        # 自适配版本</span><br><span class=\"line\">        yum install epel-release</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    自定义yum源&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        find /etc/yum.repos.d -name &quot;*.repo&quot; -exec mv &#123;&#125; &#123;&#125;.bak \\;</span><br><span class=\"line\"></span><br><span class=\"line\">        vim /etc/yum.repos.d/yum.repo</span><br><span class=\"line\">        [yum]</span><br><span class=\"line\">        #http</span><br><span class=\"line\">        baseurl=http://10.0.0.1/centos5.5</span><br><span class=\"line\">        #挂载iso</span><br><span class=\"line\">        #mount -o loop CentOS-5.8-x86_64-bin-DVD-1of2.iso /data/iso/</span><br><span class=\"line\">        #本地</span><br><span class=\"line\">        #baseurl=file:///data/iso/</span><br><span class=\"line\">        enable=1</span><br><span class=\"line\"></span><br><span class=\"line\">        #导入key</span><br><span class=\"line\">        rpm --import  /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-5</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    编译&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        源码安装&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            ./configure --help                   # 查看所有编译参数</span><br><span class=\"line\">            ./configure  --prefix=/usr/local/    # 配置参数</span><br><span class=\"line\">            make                                 # 编译</span><br><span class=\"line\">            # make -j 8                          # 多线程编译,速度较快,但有些软件不支持</span><br><span class=\"line\">            make install                         # 安装包</span><br><span class=\"line\">            make clean                           # 清除编译结果</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        perl程序编译&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            perl Makefile.PL</span><br><span class=\"line\">            make</span><br><span class=\"line\">            make test</span><br><span class=\"line\">            make install</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        python程序编译&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            python file.py</span><br><span class=\"line\"></span><br><span class=\"line\">            # 源码包编译安装</span><br><span class=\"line\">            python setup.py build</span><br><span class=\"line\">            python setup.py install</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        编译c程序&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            gcc -g hello.c -o hello</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">3 系统&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    wall                                          # 给其它用户发消息</span><br><span class=\"line\">    whereis ls                                    # 搜索程序名，而且只搜索二进制文件</span><br><span class=\"line\">    which                                         # 查找命令是否存在,及存放位置</span><br><span class=\"line\">    locate                                        # 不是实时查找，查找的结果不精确，但查找速度很快 每天更新 /var/lib/locatedb</span><br><span class=\"line\">    clear                                         # 清空整个屏幕</span><br><span class=\"line\">    reset                                         # 重新初始化屏幕</span><br><span class=\"line\">    cal                                           # 显示月历</span><br><span class=\"line\">    echo -n 123456 | md5sum                       # md5加密</span><br><span class=\"line\">    mkpasswd                                      # 随机生成密码   -l位数 -C大小 -c小写 -d数字 -s特殊字符</span><br><span class=\"line\">    netstat -ntupl | grep port                    # 是否打开了某个端口</span><br><span class=\"line\">    ntpdate cn.pool.ntp.org                       # 同步时间, pool.ntp.org: public ntp time server for everyone(http://www.pool.ntp.org/zh/)</span><br><span class=\"line\">\t5 * * * * /usr/sbin/ntpdate 133.100.11.8 133.100.9.2 time.nist.gov time.windows.com</span><br><span class=\"line\">    tzselect                                      # 选择时区 #+8=(5 9 1 1) # (TZ=&#x27;Asia/Shanghai&#x27;; export TZ)括号内写入 /etc/profile</span><br><span class=\"line\">    /sbin/hwclock -w                              # 时间保存到硬件</span><br><span class=\"line\">    /etc/shadow                                   # 账户影子文件</span><br><span class=\"line\">    LANG=en                                       # 修改语言</span><br><span class=\"line\">    vim /etc/sysconfig/i18n                       # 修改编码  LANG=&quot;en_US.UTF-8&quot;</span><br><span class=\"line\">    export LC_ALL=C                               # 强制字符集</span><br><span class=\"line\">    vi /etc/hosts                                 # 查询静态主机名</span><br><span class=\"line\">    alias                                         # 别名</span><br><span class=\"line\">    watch uptime                                  # 监测命令动态刷新 监视</span><br><span class=\"line\">    ipcs -a                                       # 查看Linux系统当前单个共享内存段的最大值</span><br><span class=\"line\">    ldconfig                                      # 动态链接库管理命令</span><br><span class=\"line\">    ldd `which cmd`                               # 查看命令的依赖库</span><br><span class=\"line\">    dist-upgrade                                  # 会改变配置文件,改变旧的依赖关系，改变系统版本</span><br><span class=\"line\">    /boot/grub/grub.conf                          # grub启动项配置</span><br><span class=\"line\">    ps -mfL &lt;PID&gt;                                 # 查看指定进程启动的线程 线程数受 max user processes 限制</span><br><span class=\"line\">    ps uxm |wc -l                                 # 查看当前用户占用的进程数 [包括线程]  max user processes</span><br><span class=\"line\">    top -p  PID -H                                # 查看指定PID进程及线程</span><br><span class=\"line\">    lsof |wc -l                                   # 查看当前文件句柄数使用数量  open files</span><br><span class=\"line\">\tlsof -p pid                                   # 查看进程占用文件</span><br><span class=\"line\">    lsof |grep /lib                               # 查看加载库文件</span><br><span class=\"line\">    sysctl -a                                     # 查看当前所有系统内核参数</span><br><span class=\"line\">    sysctl -p                                     # 修改内核参数/etc/sysctl.conf，让/etc/rc.d/rc.sysinit读取生效</span><br><span class=\"line\">    strace -p pid                                 # 跟踪系统调用</span><br><span class=\"line\">    ps -eo &quot;%p %C  %z  %a&quot;|sort -k3 -n            # 把进程按内存使用大小排序</span><br><span class=\"line\">    strace uptime 2&gt;&amp;1|grep open                  # 查看命令打开的相关文件</span><br><span class=\"line\">    grep Hugepagesize /proc/meminfo               # 内存分页大小</span><br><span class=\"line\">    mkpasswd -l 8  -C 2 -c 2 -d 4 -s 0            # 随机生成指定类型密码</span><br><span class=\"line\">    echo 1 &gt; /proc/sys/net/ipv4/tcp_syncookies    # 使TCP SYN Cookie 保护生效  # &quot;SYN Attack&quot;是一种拒绝服务的攻击方式</span><br><span class=\"line\">    grep Swap  /proc/25151/smaps |awk &#x27;&#123;a+=$2&#125;END&#123;print a&#125;&#x27;    # 查询某pid使用的swap大小</span><br><span class=\"line\">    redir --lport=33060 --caddr=10.10.10.78 --cport=3306       # 端口映射 yum安装 用supervisor守护</span><br><span class=\"line\">\t/usr/sbin/chroot --userspec=nobody.nobody / sh -c  &quot;echo hello &gt; /tmp/chroot.log&quot; ## 以nobody用户取执行命令</span><br><span class=\"line\"></span><br><span class=\"line\">    开机启动脚本顺序&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        /etc/profile</span><br><span class=\"line\">        /etc/profile.d/*.sh</span><br><span class=\"line\">        ~/bash_profile</span><br><span class=\"line\">        ~/.bashrc</span><br><span class=\"line\">        /etc/bashrc</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    进程管理&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ps -eaf               # 查看所有进程</span><br><span class=\"line\">        kill -9 PID           # 强制终止某个PID进程</span><br><span class=\"line\">        kill -15 PID          # 安全退出 需程序内部处理信号</span><br><span class=\"line\">\t\tkillall nginx         # 杀死nginx这一组进程</span><br><span class=\"line\">        cmd &amp;                 # 命令后台运行</span><br><span class=\"line\">        nohup cmd &amp;           # 后台运行不受shell退出影响</span><br><span class=\"line\">        ctrl+z                # 将前台放入后台(暂停)</span><br><span class=\"line\">        jobs                  # 查看后台运行程序</span><br><span class=\"line\">        bg 2                  # 启动后台暂停进程</span><br><span class=\"line\">        fg 2                  # 调回后台进程</span><br><span class=\"line\">        pstree                # 进程树</span><br><span class=\"line\">        vmstat 1 9            # 每隔一秒报告系统性能信息9次</span><br><span class=\"line\">        sar                   # 查看cpu等状态</span><br><span class=\"line\">        lsof file             # 显示打开指定文件的所有进程</span><br><span class=\"line\">        lsof -i:32768         # 查看端口的进程</span><br><span class=\"line\">        renice +1 180         # 把180号进程的优先级加1</span><br><span class=\"line\">        exec sh a.sh          # 子进程替换原来程序的pid， 避免supervisor无法强制杀死进程</span><br><span class=\"line\"></span><br><span class=\"line\">        ps&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            ps aux |grep -v USER | sort -nk +4 | tail       # 显示消耗内存最多的10个运行中的进程，以内存使用量排序.cpu +3</span><br><span class=\"line\">            # USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class=\"line\">            %CPU     # 进程的cpu占用率</span><br><span class=\"line\">            %MEM     # 进程的内存占用率</span><br><span class=\"line\">            VSZ      # 进程虚拟大小,单位K(即总占用内存大小,包括真实内存和虚拟内存)</span><br><span class=\"line\">            RSS      # 进程使用的驻留集大小即实际物理内存大小</span><br><span class=\"line\">            START    # 进程启动时间和日期</span><br><span class=\"line\">            占用的虚拟内存大小 = VSZ - RSS</span><br><span class=\"line\"></span><br><span class=\"line\">            ps -eo pid,lstart,etime,args         # 查看进程启动时间</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        top&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            前五行是系统整体的统计信息。</span><br><span class=\"line\">            第一行: 任务队列信息，同 uptime 命令的执行结果。内容如下：</span><br><span class=\"line\">                01:06:48 当前时间</span><br><span class=\"line\">                up 1:22 系统运行时间，格式为时:分</span><br><span class=\"line\">                1 user 当前登录用户数</span><br><span class=\"line\">                load average: 0.06, 0.60, 0.48 系统负载，即任务队列的平均长度。</span><br><span class=\"line\">                三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值。</span><br><span class=\"line\"></span><br><span class=\"line\">            第二、三行:为进程和CPU的信息。当有多个CPU时，这些内容可能会超过两行。内容如下：</span><br><span class=\"line\">                Tasks: 29 total 进程总数</span><br><span class=\"line\">                1 running 正在运行的进程数</span><br><span class=\"line\">                28 sleeping 睡眠的进程数</span><br><span class=\"line\">                0 stopped 停止的进程数</span><br><span class=\"line\">                0 zombie 僵尸进程数</span><br><span class=\"line\">                Cpu(s): 0.3% us 用户空间占用CPU百分比</span><br><span class=\"line\">                1.0% sy 内核空间占用CPU百分比</span><br><span class=\"line\">                0.0% ni 用户进程空间内改变过优先级的进程占用CPU百分比</span><br><span class=\"line\">                98.7% id 空闲CPU百分比</span><br><span class=\"line\">                0.0% wa 等待输入输出的CPU时间百分比</span><br><span class=\"line\">                0.0% hi</span><br><span class=\"line\">                0.0% si</span><br><span class=\"line\"></span><br><span class=\"line\">            第四、五行:为内存信息。内容如下：</span><br><span class=\"line\">                Mem: 191272k total 物理内存总量</span><br><span class=\"line\">                173656k used 使用的物理内存总量</span><br><span class=\"line\">                17616k free 空闲内存总量</span><br><span class=\"line\">                22052k buffers 用作内核缓存的内存量</span><br><span class=\"line\">                Swap: 192772k total 交换区总量</span><br><span class=\"line\">                0k used 使用的交换区总量</span><br><span class=\"line\">                192772k free 空闲交换区总量</span><br><span class=\"line\">                123988k cached 缓冲的交换区总量。</span><br><span class=\"line\">                内存中的内容被换出到交换区，而后又被换入到内存，但使用过的交换区尚未被覆盖，</span><br><span class=\"line\">                该数值即为这些内容已存在于内存中的交换区的大小。</span><br><span class=\"line\">                相应的内存再次被换出时可不必再对交换区写入。</span><br><span class=\"line\"></span><br><span class=\"line\">            进程信息区,各列的含义如下:  # 显示各个进程的详细信息</span><br><span class=\"line\"></span><br><span class=\"line\">            序号 列名    含义</span><br><span class=\"line\">            a   PID      进程id</span><br><span class=\"line\">            b   PPID     父进程id</span><br><span class=\"line\">            c   RUSER    Real user name</span><br><span class=\"line\">            d   UID      进程所有者的用户id</span><br><span class=\"line\">            e   USER     进程所有者的用户名</span><br><span class=\"line\">            f   GROUP    进程所有者的组名</span><br><span class=\"line\">            g   TTY      启动进程的终端名。不是从终端启动的进程则显示为 ?</span><br><span class=\"line\">            h   PR       优先级</span><br><span class=\"line\">            i   NI       nice值。负值表示高优先级，正值表示低优先级</span><br><span class=\"line\">            j   P        最后使用的CPU，仅在多CPU环境下有意义</span><br><span class=\"line\">            k   %CPU     上次更新到现在的CPU时间占用百分比</span><br><span class=\"line\">            l   TIME     进程使用的CPU时间总计，单位秒</span><br><span class=\"line\">            m   TIME+    进程使用的CPU时间总计，单位1/100秒</span><br><span class=\"line\">            n   %MEM     进程使用的物理内存百分比</span><br><span class=\"line\">            o   VIRT     进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES</span><br><span class=\"line\">            p   SWAP     进程使用的虚拟内存中，被换出的大小，单位kb。</span><br><span class=\"line\">            q   RES      进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA</span><br><span class=\"line\">            r   CODE     可执行代码占用的物理内存大小，单位kb</span><br><span class=\"line\">            s   DATA     可执行代码以外的部分(数据段+栈)占用的物理内存大小，单位kb</span><br><span class=\"line\">            t   SHR      共享内存大小，单位kb</span><br><span class=\"line\">            u   nFLT     页面错误次数</span><br><span class=\"line\">            v   nDRT     最后一次写入到现在，被修改过的页面数。</span><br><span class=\"line\">            w   S        进程状态。</span><br><span class=\"line\">                D=不可中断的睡眠状态</span><br><span class=\"line\">                R=运行</span><br><span class=\"line\">                S=睡眠</span><br><span class=\"line\">                T=跟踪/停止</span><br><span class=\"line\">                Z=僵尸进程 父进程在但并不等待子进程</span><br><span class=\"line\">            x   COMMAND  命令名/命令行</span><br><span class=\"line\">            y   WCHAN    若该进程在睡眠，则显示睡眠中的系统函数名</span><br><span class=\"line\">            z   Flags    任务标志，参考 sched.h</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        列出正在占用swap的进程&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            #!/bin/bash</span><br><span class=\"line\">            echo -e &quot;PID\\t\\tSwap\\t\\tProc_Name&quot;</span><br><span class=\"line\">            # 拿出/proc目录下所有以数字为名的目录（进程名是数字才是进程，其他如sys,net等存放的是其他信息）</span><br><span class=\"line\">            for pid in `ls -l /proc | grep ^d | awk &#x27;&#123; print $9 &#125;&#x27;| grep -v [^0-9]`</span><br><span class=\"line\">            do</span><br><span class=\"line\">                # 让进程释放swap的方法只有一个：就是重启该进程。或者等其自动释放。放</span><br><span class=\"line\">                # 如果进程会自动释放，那么我们就不会写脚本来找他了，找他都是因为他没有自动释放。</span><br><span class=\"line\">                # 所以我们要列出占用swap并需要重启的进程，但是init这个进程是系统里所有进程的祖先进程</span><br><span class=\"line\">                # 重启init进程意味着重启系统，这是万万不可以的，所以就不必检测他了，以免对系统造成影响。</span><br><span class=\"line\">                if [ $pid -eq 1 ];then continue;fi</span><br><span class=\"line\">                grep -q &quot;Swap&quot; /proc/$pid/smaps 2&gt;/dev/null</span><br><span class=\"line\">                if [ $? -eq 0 ];then</span><br><span class=\"line\">                    swap=$(grep Swap /proc/$pid/smaps \\</span><br><span class=\"line\">                        | gawk &#x27;&#123; sum+=$2;&#125; END&#123; print sum &#125;&#x27;)</span><br><span class=\"line\">                    proc_name=$(ps aux | grep -w &quot;$pid&quot; | grep -v grep \\</span><br><span class=\"line\">                        | awk &#x27;&#123; for(i=11;i&lt;=NF;i++)&#123; printf(&quot;%s &quot;,$i); &#125;&#125;&#x27;)</span><br><span class=\"line\">                    if [ $swap -gt 0 ];then</span><br><span class=\"line\">                        echo -e &quot;$&#123;pid&#125;\\t$&#123;swap&#125;\\t$&#123;proc_name&#125;&quot;</span><br><span class=\"line\">                    fi</span><br><span class=\"line\">                fi</span><br><span class=\"line\">            done | sort -k2 -n | awk -F&#x27;\\t&#x27; &#x27;&#123;</span><br><span class=\"line\">                pid[NR]=$1;</span><br><span class=\"line\">                size[NR]=$2;</span><br><span class=\"line\">                name[NR]=$3;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            END&#123;</span><br><span class=\"line\">                for(id=1;id&lt;=length(pid);id++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    if(size[id]&lt;1024)</span><br><span class=\"line\">                        printf(&quot;%-10s\\t%15sKB\\t%s\\n&quot;,pid[id],size[id],name[id]);</span><br><span class=\"line\">                    else if(size[id]&lt;1048576)</span><br><span class=\"line\">                        printf(&quot;%-10s\\t%15.2fMB\\t%s\\n&quot;,pid[id],size[id]/1024,name[id]);</span><br><span class=\"line\">                    else</span><br><span class=\"line\">                        printf(&quot;%-10s\\t%15.2fGB\\t%s\\n&quot;,pid[id],size[id]/1048576,name[id]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        linux操作系统提供的信号&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            kill -l                    # 查看linux提供的信号</span><br><span class=\"line\">            trap &quot;echo aaa&quot;  2 3 15    # shell使用 trap 捕捉退出信号</span><br><span class=\"line\"></span><br><span class=\"line\">            # 发送信号一般有两种原因:</span><br><span class=\"line\">            #   1(被动式)  内核检测到一个系统事件.例如子进程退出会像父进程发送SIGCHLD信号.键盘按下control+c会发送SIGINT信号</span><br><span class=\"line\">            #   2(主动式)  通过系统调用kill来向指定进程发送信号</span><br><span class=\"line\">            # 进程结束信号 SIGTERM 和 SIGKILL 的区别:  SIGTERM 比较友好，进程能捕捉这个信号，根据您的需要来关闭程序。在关闭程序之前，您可以结束打开的记录文件和完成正在做的任务。在某些情况下，假如进程正在进行作业而且不能中断，那么进程可以忽略这个SIGTERM信号。</span><br><span class=\"line\">            # 如果一个进程收到一个SIGUSR1信号，然后执行信号绑定函数，第二个SIGUSR2信号又来了，第一个信号没有被处理完毕的话，第二个信号就会丢弃。</span><br><span class=\"line\"></span><br><span class=\"line\">            SIGHUP  1          A     # 终端挂起或者控制进程终止</span><br><span class=\"line\">            SIGINT  2          A     # 键盘终端进程(如control+c)</span><br><span class=\"line\">            SIGQUIT 3          C     # 键盘的退出键被按下</span><br><span class=\"line\">            SIGILL  4          C     # 非法指令</span><br><span class=\"line\">            SIGABRT 6          C     # 由abort(3)发出的退出指令</span><br><span class=\"line\">            SIGFPE  8          C     # 浮点异常</span><br><span class=\"line\">            SIGKILL 9          AEF   # Kill信号  立刻停止</span><br><span class=\"line\">            SIGSEGV 11         C     # 无效的内存引用</span><br><span class=\"line\">            SIGPIPE 13         A     # 管道破裂: 写一个没有读端口的管道</span><br><span class=\"line\">            SIGALRM 14         A     # 闹钟信号 由alarm(2)发出的信号</span><br><span class=\"line\">            SIGTERM 15         A     # 终止信号,可让程序安全退出 kill -15</span><br><span class=\"line\">            SIGUSR1 30,10,16   A     # 用户自定义信号1</span><br><span class=\"line\">            SIGUSR2 31,12,17   A     # 用户自定义信号2</span><br><span class=\"line\">            SIGCHLD 20,17,18   B     # 子进程结束自动向父进程发送SIGCHLD信号</span><br><span class=\"line\">            SIGCONT 19,18,25         # 进程继续（曾被停止的进程）</span><br><span class=\"line\">            SIGSTOP 17,19,23   DEF   # 终止进程</span><br><span class=\"line\">            SIGTSTP 18,20,24   D     # 控制终端（tty）上按下停止键</span><br><span class=\"line\">            SIGTTIN 21,21,26   D     # 后台进程企图从控制终端读</span><br><span class=\"line\">            SIGTTOU 22,22,27   D     # 后台进程企图从控制终端写</span><br><span class=\"line\"></span><br><span class=\"line\">            缺省处理动作一项中的字母含义如下:</span><br><span class=\"line\">                A  缺省的动作是终止进程</span><br><span class=\"line\">                B  缺省的动作是忽略此信号，将该信号丢弃，不做处理</span><br><span class=\"line\">                C  缺省的动作是终止进程并进行内核映像转储(dump core),内核映像转储是指将进程数据在内存的映像和进程在内核结构中的部分内容以一定格式转储到文件系统，并且进程退出执行，这样做的好处是为程序员提供了方便，使得他们可以得到进程当时执行时的数据值，允许他们确定转储的原因，并且可以调试他们的程序。</span><br><span class=\"line\">                D  缺省的动作是停止进程，进入停止状况以后还能重新进行下去，一般是在调试的过程中（例如ptrace系统调用）</span><br><span class=\"line\">                E  信号不能被捕获</span><br><span class=\"line\">                F  信号不能被忽略</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        系统性能状态&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            vmstat 1 9</span><br><span class=\"line\"></span><br><span class=\"line\">            r      # 等待执行的任务数。当这个值超过了cpu线程数，就会出现cpu瓶颈。</span><br><span class=\"line\">            b      # 等待IO的进程数量,表示阻塞的进程。</span><br><span class=\"line\">            swpd   # 虚拟内存已使用的大小，如大于0，表示机器物理内存不足，如不是程序内存泄露，那么该升级内存。</span><br><span class=\"line\">            free   # 空闲的物理内存的大小</span><br><span class=\"line\">            buff   # 已用的buff大小，对块设备的读写进行缓冲</span><br><span class=\"line\">            cache  # cache直接用来记忆我们打开的文件,给文件做缓冲，(把空闲的物理内存的一部分拿来做文件和目录的缓存，是为了提高 程序执行的性能，当程序使用内存时，buffer/cached会很快地被使用。)</span><br><span class=\"line\">            inact  # 非活跃内存大小，即被标明可回收的内存，区别于free和active -a选项时显示</span><br><span class=\"line\">            active # 活跃的内存大小 -a选项时显示</span><br><span class=\"line\">            si   # 每秒从磁盘读入虚拟内存的大小，如果这个值大于0，表示物理内存不够用或者内存泄露，要查找耗内存进程解决掉。</span><br><span class=\"line\">            so   # 每秒虚拟内存写入磁盘的大小，如果这个值大于0，同上。</span><br><span class=\"line\">            bi   # 块设备每秒接收的块数量，这里的块设备是指系统上所有的磁盘和其他块设备，默认块大小是1024byte</span><br><span class=\"line\">            bo   # 块设备每秒发送的块数量，例如读取文件，bo就要大于0。bi和bo一般都要接近0，不然就是IO过于频繁，需要调整。</span><br><span class=\"line\">            in   # 每秒CPU的中断次数，包括时间中断。in和cs这两个值越大，会看到由内核消耗的cpu时间会越多</span><br><span class=\"line\">            cs   # 每秒上下文切换次数，例如我们调用系统函数，就要进行上下文切换，线程的切换，也要进程上下文切换，这个值要越小越好，太大了，要考虑调低线程或者进程的数目,例如在apache和nginx这种web服务器中，我们一般做性能测试时会进行几千并发甚至几万并发的测试，选择web服务器的进程可以由进程或者线程的峰值一直下调，压测，直到cs到一个比较小的值，这个进程和线程数就是比较合适的值了。系统调用也是，每次调用系统函数，我们的代码就会进入内核空间，导致上下文切换，这个是很耗资源，也要尽量避免频繁调用系统函数。上下文切换次数过多表示你的CPU大部分浪费在上下文切换，导致CPU干正经事的时间少了，CPU没有充分利用。</span><br><span class=\"line\">            us   # 用户进程执行消耗cpu时间(user time)  us的值比较高时，说明用户进程消耗的cpu时间多，但是如果长期超过50%的使用，那么我们就该考虑优化程序算法或其他措施</span><br><span class=\"line\">            sy   # 系统CPU时间，如果太高，表示系统调用时间长，例如是IO操作频繁。</span><br><span class=\"line\">            id   # 空闲 CPU时间，一般来说，id + us + sy = 100,一般认为id是空闲CPU使用率，us是用户CPU使用率，sy是系统CPU使用率。</span><br><span class=\"line\">            wt   # 等待IOCPU时间。Wa过高时，说明io等待比较严重，这可能是由于磁盘大量随机访问造成的，也有可能是磁盘的带宽出现瓶颈。</span><br><span class=\"line\"></span><br><span class=\"line\">            如果 r 经常大于4，且id经常少于40，表示cpu的负荷很重。</span><br><span class=\"line\">            如果 pi po 长期不等于0，表示内存不足。</span><br><span class=\"line\">            如果 b 队列经常大于3，表示io性能不好。</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    日志管理&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        history                      # 历时命令默认1000条</span><br><span class=\"line\">        HISTTIMEFORMAT=&quot;%Y-%m-%d %H:%M:%S &quot;   # 让history命令显示具体时间</span><br><span class=\"line\">        history  -c                  # 清除记录命令</span><br><span class=\"line\">        cat $HOME/.bash_history      # 历史命令记录文件</span><br><span class=\"line\">        lastb -a                     # 列出登录系统失败的用户相关信息  清空二进制日志记录文件 echo &gt; /var/log/btmp</span><br><span class=\"line\">        last                         # 查看登陆过的用户信息  清空二进制日志记录文件 echo &gt; /var/log/wtmp   默认打开乱码</span><br><span class=\"line\">        who /var/log/wtmp            # 查看登陆过的用户信息</span><br><span class=\"line\">        lastlog                      # 用户最后登录的时间</span><br><span class=\"line\">        tail -f /var/log/messages    # 系统日志</span><br><span class=\"line\">        tail -f /var/log/secure      # ssh日志</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t日志切割logrotate&#123;</span><br><span class=\"line\">\t\t/etc/logrotate.d/  # 配置目录</span><br><span class=\"line\">\t\t#示例：新建文件/etc/logrotate.d/apisix，配置内容如下：</span><br><span class=\"line\">\t\t/opt/apisix/logs/*.log &#123;</span><br><span class=\"line\">\t\t\tdaily           # 日志文件将按日轮循，还可用&#x27;weekly&#x27;，&#x27;monthly&#x27;</span><br><span class=\"line\">\t\t\tcompress        # 在轮循任务完成后，已轮循的归档将使用gzip进行压缩。</span><br><span class=\"line\">\t\t\tdelaycompress   # 总是与compress选项一起用，delaycompress选项指示logrotate不要将最近的归档压缩，压缩将在下一次轮循周期进行(最近一次不归档)</span><br><span class=\"line\">\t\t\trotate 365      # 一次将存储365个归档日志。对于第366个归档，时间最久的归档将被删除</span><br><span class=\"line\">\t\t\tmissingok       # 在日志轮循期间，任何错误将被忽略，例如“文件无法找到”之类的错误</span><br><span class=\"line\">\t\t\tnotifempty      # 如果日志文件为空，轮循不会进行</span><br><span class=\"line\">\t\t\tdateext</span><br><span class=\"line\">\t\t\tsharedscripts</span><br><span class=\"line\">\t\t\tpostrotate      # postrotate/endscript：在所有其它指令完成后，postrotate和endscript里面指定的命令将被执行。在这种情况下，rsyslogd 进程将立即再次读取其配置并继续运行。</span><br><span class=\"line\">\t\t\t\tif [ -f /opt/apisix/logs/nginx.pid ]; then</span><br><span class=\"line\">\t\t\t\t\t#重启nginx服务</span><br><span class=\"line\">\t\t\t\t\tkill -USR1 `cat /opt/apisix/logs/nginx.pid`</span><br><span class=\"line\">\t\t\t\tfi</span><br><span class=\"line\">\t\t\tendscript</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tlogrotate /etc/logrotate.conf  # 使新配置生效</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    man&#123;</span><br><span class=\"line\">        man 2 read   # 查看read函数的文档</span><br><span class=\"line\">        1 使用者在shell中可以操作的指令或可执行档</span><br><span class=\"line\">        2 系统核心可呼叫的函数与工具等</span><br><span class=\"line\">        3 一些常用的函数(function)与函数库(library),大部分是C的函数库(libc)</span><br><span class=\"line\">        4 装置档案的说明，通常在/dev下的档案</span><br><span class=\"line\">        5 设定档或者是某些档案的格式</span><br><span class=\"line\">        6 游戏games</span><br><span class=\"line\">        7 惯例与协定等，例如linux档案系统、网络协定、ascll code等说明</span><br><span class=\"line\">        8 系统管理员可用的管理指令</span><br><span class=\"line\">        9 跟kernel有关的文件</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    selinux&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        sestatus -v                    # 查看selinux状态</span><br><span class=\"line\">        getenforce                     # 查看selinux模式</span><br><span class=\"line\">        setenforce 0                   # 设置selinux为宽容模式(可避免阻止一些操作)</span><br><span class=\"line\">        semanage port -l               # 查看selinux端口限制规则</span><br><span class=\"line\">        semanage port -a -t http_port_t -p tcp 8000  # 在selinux中注册端口类型</span><br><span class=\"line\">        vi /etc/selinux/config         # selinux配置文件</span><br><span class=\"line\">        SELINUX=enfoceing              # 关闭selinux 把其修改为  SELINUX=disabled</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    查看剩余内存&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        free -m</span><br><span class=\"line\">        #-/+ buffers/cache:       6458       1649</span><br><span class=\"line\">        #6458M为真实使用内存  1649M为真实剩余内存(剩余内存+缓存+缓冲器)</span><br><span class=\"line\">        #linux会利用所有的剩余内存作为缓存，所以要保证linux运行速度，就需要保证内存的缓存大小</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    系统信息&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        uname -a              # 查看Linux内核版本信息</span><br><span class=\"line\">        cat /proc/version     # 查看内核版本</span><br><span class=\"line\">        cat /etc/issue        # 查看系统版本</span><br><span class=\"line\">        lsb_release -a        # 查看系统版本  需安装 centos-release</span><br><span class=\"line\">        locale -a             # 列出所有语系</span><br><span class=\"line\">        locale                # 当前环境变量中所有编码</span><br><span class=\"line\">        hwclock               # 查看时间</span><br><span class=\"line\">        who                   # 当前在线用户</span><br><span class=\"line\">        w                     # 当前在线用户</span><br><span class=\"line\">        whoami                # 查看当前用户名</span><br><span class=\"line\">        logname               # 查看初始登陆用户名</span><br><span class=\"line\">        uptime                # 查看服务器启动时间</span><br><span class=\"line\">        sar -n DEV 1 10       # 查看网卡网速流量</span><br><span class=\"line\">        dmesg                 # 显示开机信息</span><br><span class=\"line\">        lsmod                 # 查看内核模块</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    硬件信息&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        more /proc/cpuinfo                                       # 查看cpu信息</span><br><span class=\"line\">        lscpu                                                    # 查看cpu信息</span><br><span class=\"line\">        cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c    # 查看cpu型号和逻辑核心数</span><br><span class=\"line\">        getconf LONG_BIT                                         # cpu运行的位数</span><br><span class=\"line\">        cat /proc/cpuinfo | grep &#x27;physical id&#x27; |sort| uniq -c    # 物理cpu个数</span><br><span class=\"line\">        cat /proc/cpuinfo | grep flags | grep &#x27; lm &#x27; | wc -l     # 结果大于0支持64位</span><br><span class=\"line\">        cat /proc/cpuinfo|grep flags                             # 查看cpu是否支持虚拟化   pae支持半虚拟化  IntelVT 支持全虚拟化</span><br><span class=\"line\">        more /proc/meminfo                                       # 查看内存信息</span><br><span class=\"line\">        dmidecode                                                # 查看全面硬件信息</span><br><span class=\"line\">        dmidecode | grep &quot;Product Name&quot;                          # 查看服务器型号</span><br><span class=\"line\">        dmidecode | grep -P -A5 &quot;Memory\\s+Device&quot; | grep Size | grep -v Range       # 查看内存插槽</span><br><span class=\"line\">        cat /proc/mdstat                                         # 查看软raid信息</span><br><span class=\"line\">        cat /proc/scsi/scsi                                      # 查看Dell硬raid信息(IBM、HP需要官方检测工具)</span><br><span class=\"line\">        lspci                                                    # 查看硬件信息</span><br><span class=\"line\">        lspci|grep RAID                                          # 查看是否支持raid</span><br><span class=\"line\">        lspci -vvv |grep Ethernet                                # 查看网卡型号</span><br><span class=\"line\">        lspci -vvv |grep Kernel|grep driver                      # 查看驱动模块</span><br><span class=\"line\">        modinfo tg2                                              # 查看驱动版本(驱动模块)</span><br><span class=\"line\">        ethtool -i em1                                           # 查看网卡驱动版本</span><br><span class=\"line\">        ethtool em1                                              # 查看网卡带宽</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    终端快捷键&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Ctrl+A        　    # 行前</span><br><span class=\"line\">        Ctrl+E        　    # 行尾</span><br><span class=\"line\">        Ctrl+S        　    # 终端锁屏</span><br><span class=\"line\">        Ctrl+Q        　　  # 解锁屏</span><br><span class=\"line\">        Ctrl+D      　　    # 退出</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    开机启动模式&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        vi /etc/inittab</span><br><span class=\"line\">        id:3:initdefault:    # 3为多用户命令</span><br><span class=\"line\">        #ca::ctrlaltdel:/sbin/shutdown -t3 -r now   # 注释此行 禁止 ctrl+alt+del 关闭计算机</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    终端提示显示&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        echo $PS1                   # 环境变量控制提示显示</span><br><span class=\"line\">        PS1=&#x27;[\\u@ \\H \\w \\A \\@#]\\$&#x27;</span><br><span class=\"line\">        PS1=&#x27;[\\u@\\h \\W]\\$&#x27;</span><br><span class=\"line\">        export PS1=&#x27;[\\[\\e[32m\\]\\[\\e[31m\\]\\u@\\[\\e[36m\\]\\h \\w\\[\\e[m\\]]\\$ &#x27;     # 高亮显示终端</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    定时任务&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        at 5pm + 3 days /bin/ls  # 单次定时任务 指定三天后下午5:00执行/bin/ls</span><br><span class=\"line\"></span><br><span class=\"line\">        crontab -e               # 编辑周期任务</span><br><span class=\"line\">        #分钟  小时    天  月  星期   命令或脚本</span><br><span class=\"line\">        1,30  1-3/2    *   *   *      命令或脚本  &gt;&gt; file.log 2&gt;&amp;1</span><br><span class=\"line\">        echo &quot;40 7 * * 2 /root/sh&quot;&gt;&gt;/var/spool/cron/work    # 普通用户可直接写入定时任务</span><br><span class=\"line\">        crontab -l                                          # 查看自动周期性任务</span><br><span class=\"line\">        crontab -r                                          # 删除自动周期性任务</span><br><span class=\"line\">        cron.deny和cron.allow                               # 禁止或允许用户使用周期任务</span><br><span class=\"line\">        service crond start|stop|restart                    # 启动自动周期性服务</span><br><span class=\"line\">        * * * * *  echo &quot;d&quot; &gt;&gt;d$(date +\\%Y\\%m\\%d).log       # 让定时任务直接生成带日期的log  需要转义%</span><br><span class=\"line\">        0 0,6,12 * * * /opt/php/bin/php xxx                 # 每天0，6，12点各执行一次</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">    date&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        星期日[SUN] 星期一[MON] 星期二[TUE] 星期三[WED] 星期四[THU] 星期五[FRI] 星期六[SAT]</span><br><span class=\"line\">        一月[JAN] 二月[FEB] 三月[MAR] 四月[APR] 五月[MAY] 六月[JUN] 七月[JUL] 八月[AUG] 九月[SEP] 十月[OCT] 十一月[NOV] 十二月[DEC]</span><br><span class=\"line\"></span><br><span class=\"line\">        date -s 20091112                     # 设日期</span><br><span class=\"line\">        date -s 18:30:50                     # 设时间</span><br><span class=\"line\">        date -d &quot;7 days ago&quot; +%Y%m%d         # 7天前日期</span><br><span class=\"line\">        date -d &quot;5 minute ago&quot; +%H:%M        # 5分钟前时间</span><br><span class=\"line\">        date -d &quot;1 month ago&quot; +%Y%m%d        # 一个月前</span><br><span class=\"line\">        date -d &#x27;1 days&#x27; +%Y-%m-%d           # 一天后</span><br><span class=\"line\">        date -d &#x27;1 hours&#x27; +%H:%M:%S          # 一小时后</span><br><span class=\"line\">        date +%Y-%m-%d -d &#x27;20110902&#x27;         # 日期格式转换</span><br><span class=\"line\">        date +%Y-%m-%d_%X                    # 日期和时间</span><br><span class=\"line\">        date +%N                             # 纳秒</span><br><span class=\"line\">        date -d &quot;2012-08-13 14:00:23&quot; +%s    # 换算成秒计算(1970年至今的秒数)</span><br><span class=\"line\">        date -d &quot;@1363867952&quot; +%Y-%m-%d-%T   # 将时间戳换算成日期</span><br><span class=\"line\">        date -d &quot;1970-01-01 UTC 1363867952 seconds&quot; +%Y-%m-%d-%T  # 将时间戳换算成日期</span><br><span class=\"line\">        date -d &quot;`awk -F. &#x27;&#123;print $1&#125;&#x27; /proc/uptime` second ago&quot; +&quot;%Y-%m-%d %H:%M:%S&quot;    # 格式化系统启动时间(多少秒前)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    limits.conf&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ulimit -SHn 65535  # 临时设置文件描述符大小 进程最大打开文件柄数 还有socket最大连接数, 等同配置 nofile</span><br><span class=\"line\">        ulimit -SHu 65535  # 临时设置用户最大进程数</span><br><span class=\"line\">        ulimit -a          # 查看</span><br><span class=\"line\"></span><br><span class=\"line\">        /etc/security/limits.conf</span><br><span class=\"line\"></span><br><span class=\"line\">        # 文件描述符大小  open files</span><br><span class=\"line\">        # lsof |wc -l   查看当前文件句柄数使用数量</span><br><span class=\"line\">        * soft nofile 16384         # 设置太大，进程使用过多会把机器拖死</span><br><span class=\"line\">        * hard nofile 32768</span><br><span class=\"line\"></span><br><span class=\"line\">        # 用户最大进程数  max user processes</span><br><span class=\"line\">        # echo $((`ps uxm |wc -l`-`ps ux |wc -l`))  查看当前用户占用的进程数 [包括线程]</span><br><span class=\"line\">        user soft nproc 16384</span><br><span class=\"line\">        user hard nproc 32768</span><br><span class=\"line\"></span><br><span class=\"line\">        # 如果/etc/security/limits.d/有配置文件，将会覆盖/etc/security/limits.conf里的配置</span><br><span class=\"line\">        # 即/etc/security/limits.d/的配置文件里就不要有同样的参量设置</span><br><span class=\"line\">        /etc/security/limits.d/90-nproc.conf    # centos6.3的默认这个文件会覆盖 limits.conf</span><br><span class=\"line\">        user soft nproc 16384</span><br><span class=\"line\">        user hard nproc 32768</span><br><span class=\"line\"></span><br><span class=\"line\">        sysctl -p    # 修改配置文件后让系统生效</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    随机分配端口范围&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 本机连其它端口用的</span><br><span class=\"line\">        echo &quot;10000 65535&quot; &gt; /proc/sys/net/ipv4/ip_local_port_range</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    百万长链接设置&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 内存消耗需要较大</span><br><span class=\"line\">        vim /root/.bash_profile</span><br><span class=\"line\">        # 添加如下2行,退出bash重新登陆</span><br><span class=\"line\">        # 一个进程不能使用超过NR_OPEN文件描述符</span><br><span class=\"line\">        echo 20000500 &gt; /proc/sys/fs/nr_open</span><br><span class=\"line\">        # 当前用户最大文件数</span><br><span class=\"line\">        ulimit -n 10000000</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    core崩溃文件查看&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        gdb  core.13844</span><br><span class=\"line\">        bt   # 查看函数调用信息(堆栈)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    libc.so故障修复&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 由于升级glibc导致libc.so不稳定,突然报错,幸好还有未退出的终端</span><br><span class=\"line\">        grep: error while loading shared libraries: /lib64/libc.so.6: ELF file OS ABI invalid</span><br><span class=\"line\"></span><br><span class=\"line\">        # 看看当前系统有多少版本 libc.so</span><br><span class=\"line\">        ls /lib64/libc-[tab]</span><br><span class=\"line\"></span><br><span class=\"line\">        # 更改环境变量指向其他 libc.so 文件测试</span><br><span class=\"line\">        export LD_PRELOAD=/lib64/libc-2.7.so    # 如果不改变LD_PRELOAD变量,ln不能用,需要使用 /sbin/sln 命令做链接</span><br><span class=\"line\"></span><br><span class=\"line\">        # 当前如果好使了，在执行下面强制替换软链接。如不好使，测试其他版本的libc.so文件</span><br><span class=\"line\">        ln -f -s /lib64/libc-2.7.so /lib64/libc.so.6</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    无法分配内存 &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        fork: Cannot allocate memory</span><br><span class=\"line\">    </span><br><span class=\"line\">        # 报错不一定是内存不够用，进程数或者线程数满了也会报这个错误， 可以适当增加 kernel.pid_max 的值，</span><br><span class=\"line\">        cat /proc/sys/kernel/pid_max  # 默认3.2w</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    sudo&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        echo myPassword | sudo -S ls /tmp  # 直接输入sudo的密码非交互,从标准输入读取密码而不是终端设备</span><br><span class=\"line\">        visudo                             # sudo命令权限添加  /etc/sudoers</span><br><span class=\"line\">        用户  别名(可用all)=NOPASSWD:命令1,命令2</span><br><span class=\"line\">        user  ALL=NOPASSWD:/bin/su         # 免root密码切换root身份</span><br><span class=\"line\">        wangming linuxfan=NOPASSWD:/sbin/apache start,/sbin/apache restart</span><br><span class=\"line\">        UserName ALL=(ALL) ALL</span><br><span class=\"line\">        UserName ALL=(ALL) NOPASSWD: ALL</span><br><span class=\"line\">        peterli        ALL=(ALL)       NOPASSWD:/sbin/service</span><br><span class=\"line\">        Defaults requiretty                # sudo不允许后台运行,注释此行既允许</span><br><span class=\"line\">        Defaults !visiblepw                # sudo不允许远程,去掉!既允许</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    grub开机启动项添加&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        vim /etc/grub.conf</span><br><span class=\"line\">        title ms-dos</span><br><span class=\"line\">        rootnoverify (hd0,0)</span><br><span class=\"line\">        chainloader +1</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    stty&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        #stty时一个用来改变并打印终端行设置的常用命令</span><br><span class=\"line\"></span><br><span class=\"line\">        stty iuclc          # 在命令行下禁止输出大写</span><br><span class=\"line\">        stty -iuclc         # 恢复输出大写</span><br><span class=\"line\">        stty olcuc          # 在命令行下禁止输出小写</span><br><span class=\"line\">        stty -olcuc         # 恢复输出小写</span><br><span class=\"line\">        stty size           # 打印出终端的行数和列数</span><br><span class=\"line\">        stty eof &quot;string&quot;   # 改变系统默认ctrl+D来表示文件的结束</span><br><span class=\"line\">        stty -echo          # 禁止回显</span><br><span class=\"line\">        stty echo           # 打开回显</span><br><span class=\"line\">        stty -echo;read;stty echo;read  # 测试禁止回显</span><br><span class=\"line\">        stty igncr          # 忽略回车符</span><br><span class=\"line\">        stty -igncr         # 恢复回车符</span><br><span class=\"line\">        stty erase &#x27;#&#x27;      # 将#设置为退格字符</span><br><span class=\"line\">        stty erase &#x27;^?&#x27;     # 恢复退格字符</span><br><span class=\"line\"></span><br><span class=\"line\">        定时输入&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            timeout_read()&#123;</span><br><span class=\"line\">                timeout=$1</span><br><span class=\"line\">                old_stty_settings=`stty -g`　　# save current settings</span><br><span class=\"line\">                stty -icanon min 0 time 100　　# set 10seconds,not 100seconds</span><br><span class=\"line\">                eval read varname　　          # =read $varname</span><br><span class=\"line\">                stty &quot;$old_stty_settings&quot;　　  # recover settings</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            read -t 10 varname    # 更简单的方法就是利用read命令的-t选项</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        检测用户按键&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            #!/bin/bash</span><br><span class=\"line\">            old_tty_settings=$(stty -g)   # 保存老的设置(为什么?).</span><br><span class=\"line\">            stty -icanon</span><br><span class=\"line\">            Keypress=$(head -c1)          # 或者使用$(dd bs=1 count=1 2&gt; /dev/null)</span><br><span class=\"line\">            echo &quot;Key pressed was \\&quot;&quot;$Keypress&quot;\\&quot;.&quot;</span><br><span class=\"line\">            stty &quot;$old_tty_settings&quot;      # 恢复老的设置.</span><br><span class=\"line\">            exit 0</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    iptables&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        内建三个表：nat mangle 和 filter</span><br><span class=\"line\">        filter预设规则表，有INPUT、FORWARD 和 OUTPUT 三个规则链</span><br><span class=\"line\">        vi /etc/sysconfig/iptables    # 配置文件</span><br><span class=\"line\">        INPUT    # 进入</span><br><span class=\"line\">        FORWARD  # 转发</span><br><span class=\"line\">        OUTPUT   # 出去</span><br><span class=\"line\">        ACCEPT   # 将封包放行</span><br><span class=\"line\">        REJECT   # 拦阻该封包</span><br><span class=\"line\">        DROP     # 丢弃封包不予处理</span><br><span class=\"line\">        -A       # 在所选择的链(INPUT等)末添加一条或更多规则</span><br><span class=\"line\">        -D       # 删除一条</span><br><span class=\"line\">        -E       # 修改</span><br><span class=\"line\">        -p       # tcp、udp、icmp    0相当于所有all    !取反</span><br><span class=\"line\">        -P       # 设置缺省策略(与所有链都不匹配强制使用此策略)</span><br><span class=\"line\">        -s       # IP/掩码    (IP/24)    主机名、网络名和清楚的IP地址 !取反</span><br><span class=\"line\">        -j       # 目标跳转，立即决定包的命运的专用内建目标</span><br><span class=\"line\">        -i       # 进入的（网络）接口 [名称] eth0</span><br><span class=\"line\">        -o       # 输出接口[名称]</span><br><span class=\"line\">        -m       # 模块</span><br><span class=\"line\">        --sport  # 源端口</span><br><span class=\"line\">        --dport  # 目标端口</span><br><span class=\"line\"></span><br><span class=\"line\">        iptables -F                        # 将防火墙中的规则条目清除掉  # 注意: iptables -P INPUT ACCEPT</span><br><span class=\"line\">        iptables-restore &lt; 规则文件        # 导入防火墙规则</span><br><span class=\"line\">        /etc/init.d/iptables save          # 保存防火墙设置</span><br><span class=\"line\">        /etc/init.d/iptables restart       # 重启防火墙服务</span><br><span class=\"line\">        iptables -L -n                     # 查看规则</span><br><span class=\"line\">        iptables -t nat -nL                # 查看转发</span><br><span class=\"line\"></span><br><span class=\"line\">        iptables实例&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            iptables -L INPUT                   # 列出某规则链中的所有规则</span><br><span class=\"line\">            iptables -X allowed                 # 删除某个规则链 ,不加规则链，清除所有非内建的</span><br><span class=\"line\">            iptables -Z INPUT                   # 将封包计数器归零</span><br><span class=\"line\">            iptables -N allowed                 # 定义新的规则链</span><br><span class=\"line\">            iptables -P INPUT DROP              # 定义过滤政策</span><br><span class=\"line\">            iptables -A INPUT -s 192.168.1.1    # 比对封包的来源IP   # ! 192.168.0.0/24  ! 反向对比</span><br><span class=\"line\">            iptables -A INPUT -d 192.168.1.1    # 比对封包的目的地IP</span><br><span class=\"line\">            iptables -A INPUT -i eth0           # 比对封包是从哪片网卡进入</span><br><span class=\"line\">            iptables -A FORWARD -o eth0         # 比对封包要从哪片网卡送出 eth+表示所有的网卡</span><br><span class=\"line\">            iptables -A INPUT -p tcp            # -p ! tcp 排除tcp以外的udp、icmp。-p all所有类型</span><br><span class=\"line\">            iptables -D INPUT 8                 # 从某个规则链中删除一条规则</span><br><span class=\"line\">            iptables -D INPUT --dport 80 -j DROP         # 从某个规则链中删除一条规则</span><br><span class=\"line\">            iptables -R INPUT 8 -s 192.168.0.1 -j DROP   # 取代现行规则</span><br><span class=\"line\">            iptables -I INPUT 8 --dport 80 -j ACCEPT     # 插入一条规则</span><br><span class=\"line\">            iptables -A INPUT -i eth0 -j DROP            # 其它情况不允许</span><br><span class=\"line\">            iptables -A INPUT -p tcp -s IP -j DROP       # 禁止指定IP访问</span><br><span class=\"line\">            iptables -A INPUT -p tcp -s IP --dport port -j DROP               # 禁止指定IP访问端口</span><br><span class=\"line\">            iptables -A INPUT -s IP -p tcp --dport port -j ACCEPT             # 允许在IP访问指定端口</span><br><span class=\"line\">            iptables -A INPUT -p tcp --dport 22 -j DROP                       # 禁止使用某端口</span><br><span class=\"line\">            iptables -A INPUT -i eth0 -p icmp -m icmp --icmp-type 8 -j DROP   # 禁止icmp端口</span><br><span class=\"line\">            iptables -A INPUT -i eth0 -p icmp -j DROP                         # 禁止icmp端口</span><br><span class=\"line\">            iptables -t filter -A INPUT -i eth0 -p tcp --syn -j DROP                  # 阻止所有没有经过你系统授权的TCP连接</span><br><span class=\"line\">            iptables -A INPUT -f -m limit --limit 100/s --limit-burst 100 -j ACCEPT   # IP包流量限制</span><br><span class=\"line\">            iptables -A INPUT -i eth0 -s 192.168.62.1/32 -p icmp -m icmp --icmp-type 8 -j ACCEPT  # 除192.168.62.1外，禁止其它人ping我的主机</span><br><span class=\"line\">            iptables -A INPUT -p tcp -m tcp --dport 80 -m state --state NEW -m recent --update --seconds 5 --hitcount 20 --rttl --name WEB --rsource -j DROP  # 可防御cc攻击(未测试)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        iptables配置实例文件&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            # Generated by iptables-save v1.2.11 on Fri Feb  9 12:10:37 2007</span><br><span class=\"line\">            *filter</span><br><span class=\"line\">            :INPUT ACCEPT [637:58967]</span><br><span class=\"line\">            :FORWARD DROP [0:0]</span><br><span class=\"line\">            :OUTPUT ACCEPT [5091:1301533]</span><br><span class=\"line\">            # 允许的IP或IP段访问 建议多个</span><br><span class=\"line\">            -A INPUT -s 127.0.0.1 -p tcp -j ACCEPT</span><br><span class=\"line\">            -A INPUT -s 192.168.0.0/255.255.0.0 -p tcp -j ACCEPT</span><br><span class=\"line\">            # 开放对外开放端口</span><br><span class=\"line\">            -A INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class=\"line\">            # 指定某端口针对IP开放</span><br><span class=\"line\">            -A INPUT -s 192.168.10.37 -p tcp --dport 22 -j ACCEPT</span><br><span class=\"line\">            # 拒绝所有协议(INPUT允许)</span><br><span class=\"line\">            -A INPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,PSH,URG RST -j DROP</span><br><span class=\"line\">            # 允许已建立的或相关连的通行</span><br><span class=\"line\">            -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class=\"line\">            # 拒绝ping</span><br><span class=\"line\">            -A INPUT -p tcp -m tcp -j REJECT --reject-with icmp-port-unreachable</span><br><span class=\"line\">            COMMIT</span><br><span class=\"line\">            # Completed on Fri Feb  9 12:10:37 2007</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        iptables配置实例&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            # 允许某段IP访问任何端口</span><br><span class=\"line\">            iptables -A INPUT -s 192.168.0.3/24 -p tcp -j ACCEPT</span><br><span class=\"line\">            # 设定预设规则 (拒绝所有的数据包，再允许需要的,如只做WEB服务器.还是推荐三个链都是DROP)</span><br><span class=\"line\">            iptables -P INPUT DROP</span><br><span class=\"line\">            iptables -P FORWARD DROP</span><br><span class=\"line\">            iptables -P OUTPUT ACCEPT</span><br><span class=\"line\">            # 注意: 直接设置这三条会掉线</span><br><span class=\"line\">            # 开启22端口</span><br><span class=\"line\">            iptables -A INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class=\"line\">            # 如果OUTPUT 设置成DROP的，要写上下面一条</span><br><span class=\"line\">            iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT</span><br><span class=\"line\">            # 注:不写导致无法SSH.其他的端口一样,OUTPUT设置成DROP的话,也要添加一条链</span><br><span class=\"line\">            # 如果开启了web服务器,OUTPUT设置成DROP的话,同样也要添加一条链</span><br><span class=\"line\">            iptables -A OUTPUT -p tcp --sport 80 -j ACCEPT</span><br><span class=\"line\">            # 做WEB服务器,开启80端口 ,其他同理</span><br><span class=\"line\">            iptables -A INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class=\"line\">            # 做邮件服务器,开启25,110端口</span><br><span class=\"line\">            iptables -A INPUT -p tcp --dport 110 -j ACCEPT</span><br><span class=\"line\">            iptables -A INPUT -p tcp --dport 25 -j ACCEPT</span><br><span class=\"line\">            # 允许icmp包通过,允许ping</span><br><span class=\"line\">            iptables -A OUTPUT -p icmp -j ACCEPT (OUTPUT设置成DROP的话)</span><br><span class=\"line\">            iptables -A INPUT -p icmp -j ACCEPT  (INPUT设置成DROP的话)</span><br><span class=\"line\">            # 允许loopback!(不然会导致DNS无法正常关闭等问题)</span><br><span class=\"line\">            IPTABLES -A INPUT -i lo -p all -j ACCEPT (如果是INPUT DROP)</span><br><span class=\"line\">            IPTABLES -A OUTPUT -o lo -p all -j ACCEPT(如果是OUTPUT DROP)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        centos6的iptables基本配置&#123;</span><br><span class=\"line\">            *filter</span><br><span class=\"line\">            :INPUT ACCEPT [0:0]</span><br><span class=\"line\">            :FORWARD ACCEPT [0:0]</span><br><span class=\"line\">            :OUTPUT ACCEPT [0:0]</span><br><span class=\"line\">            -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class=\"line\">            -A INPUT -p icmp -j ACCEPT</span><br><span class=\"line\">            -A INPUT -i lo -j ACCEPT</span><br><span class=\"line\">            -A INPUT -s 222.186.135.61 -p tcp -j ACCEPT</span><br><span class=\"line\">            -A INPUT -p tcp  --dport 80 -j ACCEPT</span><br><span class=\"line\">            -A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT</span><br><span class=\"line\">            -A INPUT -j REJECT --reject-with icmp-host-prohibited</span><br><span class=\"line\">            -A INPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,PSH,URG RST -j DROP</span><br><span class=\"line\">            -A FORWARD -j REJECT --reject-with icmp-host-prohibited</span><br><span class=\"line\">            COMMIT</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        添加网段转发&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            # 例如通过vpn上网</span><br><span class=\"line\">            echo 1 &gt; /proc/sys/net/ipv4/ip_forward       # 在内核里打开ip转发功能</span><br><span class=\"line\">            iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -j MASQUERADE  # 添加网段转发</span><br><span class=\"line\">            iptables -t nat -A POSTROUTING -s 10.0.0.0/255.0.0.0 -o eth0 -j SNAT --to 192.168.10.158  # 原IP网段经过哪个网卡IP出去</span><br><span class=\"line\">            iptables -t nat -nL                # 查看转发</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        端口映射&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            # 内网通过有外网IP的机器映射端口</span><br><span class=\"line\">            # 内网主机添加路由</span><br><span class=\"line\">            route add -net 10.10.20.0 netmask 255.255.255.0 gw 10.10.20.111     # 内网需要添加默认网关，并且网关开启转发</span><br><span class=\"line\">            # 网关主机</span><br><span class=\"line\">            echo 1 &gt; /proc/sys/net/ipv4/ip_forward       # 在内核里打开ip转发功能</span><br><span class=\"line\">            iptables -t nat -A PREROUTING -d 外网IP  -p tcp --dport 9999 -j DNAT --to 10.10.20.55:22    # 进入</span><br><span class=\"line\">            iptables -t nat -A POSTROUTING -s 10.10.20.0/24 -j SNAT --to 外网IP                         # 转发回去</span><br><span class=\"line\">            iptables -t nat -nL                # 查看转发</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">4 服务&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /etc/init.d/sendmail start                   # 启动服务</span><br><span class=\"line\">    /etc/init.d/sendmail stop                    # 关闭服务</span><br><span class=\"line\">    /etc/init.d/sendmail status                  # 查看服务当前状态</span><br><span class=\"line\">    /date/mysql/bin/mysqld_safe --user=mysql &amp;   # 启动mysql后台运行</span><br><span class=\"line\">    /bin/systemctl restart  mysqld.service       # centos7启动服务</span><br><span class=\"line\">    vi /etc/rc.d/rc.local                        # 开机启动执行  可用于开机启动脚本</span><br><span class=\"line\">    /etc/rc.d/rc3.d/S55sshd                      # 开机启动和关机关闭服务连接    # S开机start  K关机stop  55级别 后跟服务名</span><br><span class=\"line\">    ln -s -f /date/httpd/bin/apachectl /etc/rc.d/rc3.d/S15httpd   # 将启动程序脚本连接到开机启动目录</span><br><span class=\"line\">    ipvsadm -ln                                  # lvs查看后端负载机并发</span><br><span class=\"line\">    ipvsadm -C                                   # lvs清除规则</span><br><span class=\"line\">    xm list                                      # 查看xen虚拟主机列表</span><br><span class=\"line\">    virsh                                        # 虚拟化(xen\\kvm)管理工具  yum groupinstall Virtual*</span><br><span class=\"line\">    ./bin/httpd -M                               # 查看httpd加载模块</span><br><span class=\"line\">    httpd -t -D DUMP_MODULES                     # rpm包httpd查看加载模块</span><br><span class=\"line\">    echo 内容| /bin/mail -s &quot;标题&quot; 收件箱 -f 发件人       # 发送邮件</span><br><span class=\"line\">    &quot;`echo &quot;内容&quot;|iconv -f utf8 -t gbk`&quot; | /bin/mail -s &quot;`echo &quot;标题&quot;|iconv -f utf8 -t gbk`&quot; 收件箱     # 解决邮件乱码</span><br><span class=\"line\">    /usr/local/nagios/bin/nagios -v /usr/local/nagios/etc/nagios.cfg   # 检测nagios配置文件</span><br><span class=\"line\"></span><br><span class=\"line\">    chkconfig&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        chkconfig service on|off|set             # 设置非独立服务启状态</span><br><span class=\"line\">        chkconfig --level 35   httpd   off       # 让服务不自动启动</span><br><span class=\"line\">        chkconfig --level 35   httpd   on        # 让服务自动启动 35指的是运行级别</span><br><span class=\"line\">        chkconfig --list                         # 查看所有服务的启动状态</span><br><span class=\"line\">        chkconfig --list |grep httpd             # 查看某个服务的启动状态</span><br><span class=\"line\">        chkconfig –-list [service]               # 查看服务的状态</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    systemctl&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        systemctl is-active *.service      # 查看服务是否运行</span><br><span class=\"line\">        systemctl is-enabled *.service     # 查询服务是否开机启动</span><br><span class=\"line\">        systemctl mask *.service           # 注销指定服务</span><br><span class=\"line\">        systemctl unmask cups.service      # 取消注销cups服务</span><br><span class=\"line\">        systemctl enable *.service         # 开机运行服务</span><br><span class=\"line\">        systemctl disable *.service        # 取消开机运行</span><br><span class=\"line\">        systemctl start *.service          # 启动服务</span><br><span class=\"line\">        systemctl stop *.service           # 停止服务</span><br><span class=\"line\">        systemctl restart *.service        # 重启服务</span><br><span class=\"line\">        systemctl reload *.service         # 重新加载服务配置文件</span><br><span class=\"line\">        systemctl status *.service         # 查询服务运行状态</span><br><span class=\"line\">        systemctl --failed                 # 显示启动失败的服务</span><br><span class=\"line\">        systemctl poweroff                 # 系统关机</span><br><span class=\"line\">        systemctl reboot                   # 重新启动</span><br><span class=\"line\">        systemctl rescue                   # 强制进入救援模式</span><br><span class=\"line\">        systemctl emergency                # 强制进入紧急救援模式</span><br><span class=\"line\">        systemctl list-dependencies        # 查看当前运行级别target(mult-user)启动了哪些服务</span><br><span class=\"line\">        systemctl list-unit-files          # 查看开机启动的状态</span><br><span class=\"line\">        journalctl -r -u elasticsearch.service  # 查看日志 r倒序 u服务名</span><br><span class=\"line\">        /etc/systemd/system/falcon-agent.service</span><br><span class=\"line\">            [Unit]</span><br><span class=\"line\">            Description=This is zuiyou monitor agent</span><br><span class=\"line\">            After=network.target remote-fs.target nss-lookup.target</span><br><span class=\"line\"></span><br><span class=\"line\">            [Service]</span><br><span class=\"line\">            User= root</span><br><span class=\"line\">            Type=simple</span><br><span class=\"line\">            PIDFile=/opt/falcon-agent/var/app.pid</span><br><span class=\"line\">            ExecStartPre=/usr/bin/rm -f /opt/falcon-agent/var/app.pid</span><br><span class=\"line\">            ExecStart=/opt/falcon-agent/control start</span><br><span class=\"line\">            ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class=\"line\">            KillMode=process</span><br><span class=\"line\">            KillSignal=SIGQUIT</span><br><span class=\"line\">            TimeoutStopSec=5</span><br><span class=\"line\">            PrivateTmp=true</span><br><span class=\"line\">            Restart=always</span><br><span class=\"line\">            LimitNOFILE=infinity</span><br><span class=\"line\"></span><br><span class=\"line\">            [Install]</span><br><span class=\"line\">            WantedBy=multi-user.target</span><br><span class=\"line\"></span><br><span class=\"line\">        systemctl daemon-reload           # 加载配置</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    nginx&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        yum install -y make gcc  openssl-devel pcre-devel  bzip2-devel libxml2 libxml2-devel curl-devel libmcrypt-devel libjpeg libjpeg-devel libpng libpng-devel openssl</span><br><span class=\"line\"></span><br><span class=\"line\">        groupadd nginx</span><br><span class=\"line\">        useradd nginx -g nginx -M -s /sbin/nologin</span><br><span class=\"line\"></span><br><span class=\"line\">        mkdir -p /opt/nginx-tmp</span><br><span class=\"line\"></span><br><span class=\"line\">        wget http://labs.frickle.com/files/ngx_cache_purge-1.6.tar.gz</span><br><span class=\"line\">        tar fxz ngx_cache_purge-1.6.tar.gz</span><br><span class=\"line\">        # ngx_cache_purge 清除指定url缓存</span><br><span class=\"line\">        # 假设一个URL为 http://192.168.12.133/test.txt</span><br><span class=\"line\">        # 通过访问      http://192.168.12.133/purge/test.txt  就可以清除该URL的缓存。</span><br><span class=\"line\"></span><br><span class=\"line\">        tar zxvpf nginx-1.4.4.tar.gz</span><br><span class=\"line\">        cd nginx-1.4.4</span><br><span class=\"line\"></span><br><span class=\"line\">        # ./configure --help</span><br><span class=\"line\">        # --with                 # 默认不加载 需指定编译此参数才使用</span><br><span class=\"line\">        # --without              # 默认加载，可用此参数禁用</span><br><span class=\"line\">        # --add-module=path      # 添加模块的路径</span><br><span class=\"line\">        # --add-module=/opt/ngx_module_upstream_check \\         # nginx 代理状态页面</span><br><span class=\"line\">        # ngx_module_upstream_check  编译前需要打对应版本补丁 patch -p1 &lt; /opt/nginx_upstream_check_module/check_1.2.6+.patch</span><br><span class=\"line\">        # --add-module=/opt/ngx_module_memc \\                   # 将请求页面数据存放在 memcached中</span><br><span class=\"line\">        # --add-module=/opt/ngx_module_lua \\                    # 支持lua脚本 yum install lua-devel lua</span><br><span class=\"line\"></span><br><span class=\"line\">        ./configure \\</span><br><span class=\"line\">        --user=nginx \\</span><br><span class=\"line\">        --group=nginx \\</span><br><span class=\"line\">        --prefix=/usr/local/nginx \\</span><br><span class=\"line\">        --with-http_ssl_module \\</span><br><span class=\"line\">        --with-http_realip_module \\</span><br><span class=\"line\">        --with-http_gzip_static_module \\</span><br><span class=\"line\">        --with-http_stub_status_module \\</span><br><span class=\"line\">        --add-module=/opt/ngx_cache_purge-1.6 \\</span><br><span class=\"line\">        --http-client-body-temp-path=/opt/nginx-tmp/client \\</span><br><span class=\"line\">        --http-proxy-temp-path=/opt/nginx-tmp/proxy \\</span><br><span class=\"line\">        --http-fastcgi-temp-path=/opt/nginx-tmp/fastcgi \\</span><br><span class=\"line\">        --http-uwsgi-temp-path=/opt/nginx-tmp/uwsgi \\</span><br><span class=\"line\">        --http-scgi-temp-path=/opt/nginx-tmp/scgi</span><br><span class=\"line\"></span><br><span class=\"line\">        make &amp;&amp; make install</span><br><span class=\"line\"></span><br><span class=\"line\">        /usr/local/nginx/sbin/nginx –t             # 检查Nginx配置文件 但并不执行</span><br><span class=\"line\">        /usr/local/nginx/sbin/nginx -t -c /opt/nginx/conf/nginx.conf  # 检查Nginx配置文件</span><br><span class=\"line\">        /usr/local/nginx/sbin/nginx                # 启动nginx</span><br><span class=\"line\">        /usr/local/nginx/sbin/nginx -s reload      # 重载配置</span><br><span class=\"line\">        /usr/local/nginx/sbin/nginx -s stop        # 关闭nginx服务</span><br><span class=\"line\"></span><br><span class=\"line\">        # location详解</span><br><span class=\"line\">\t\t## 匹配顺序：先普通location后正则location</span><br><span class=\"line\">\t\t- ~ 或 ~* 表正则location       # ~ 区分大小写, ~*不区分大小写</span><br><span class=\"line\">\t\t- 两种情况下只匹配普通location：当^~或严格匹配(如=a)</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t## 普通location</span><br><span class=\"line\">\t\t- 越具体越匹配</span><br><span class=\"line\">\t\t- 匹配最大前缀后还得正则匹配</span><br><span class=\"line\">\t\t## 正则匹配 </span><br><span class=\"line\">\t\t- 一匹配到就不再匹配(按顺序)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">    elasticsearch&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        vim /etc/sysctl.conf</span><br><span class=\"line\">        vm.max_map_count = 262144</span><br><span class=\"line\"></span><br><span class=\"line\">        vim /etc/security/limits.conf</span><br><span class=\"line\">        * soft memlock unlimited</span><br><span class=\"line\">        * hard memlock unlimited</span><br><span class=\"line\">        sysctl -p</span><br><span class=\"line\"></span><br><span class=\"line\">        curl &#x27;localhost:9200/_cat/health?v&#x27;                    # 健康检查</span><br><span class=\"line\">        curl &#x27;localhost:9200/_cat/nodes?v&#x27;                     # 获取集群的节点列表</span><br><span class=\"line\">        curl &#x27;localhost:9200/_cat/indices?v&#x27;                   # 列出所有索引</span><br><span class=\"line\">        curl 127.0.0.1:9200/indexname -XDELETE                 # 删除索引</span><br><span class=\"line\">        curl -XGET http://localhost:9200/_cat/shards           # 查看分片</span><br><span class=\"line\">        curl &#x27;127.0.0.1:9200/_cat/indices&#x27;                     # 查分片同步  unassigned_shards  # 没同步完成</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    mysql常用命令&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # mysql 可视化工具 MySQL Workbench</span><br><span class=\"line\"></span><br><span class=\"line\">        mysqlcheck -uroot -p -S mysql.sock --optimize --databases account       # 检查、修复、优化MyISAM表</span><br><span class=\"line\">        mysqlbinlog slave-relay-bin.000001              # 查看二进制日志</span><br><span class=\"line\">        mysqladmin -h myhost -u root -p create dbname   # 创建数据库</span><br><span class=\"line\"></span><br><span class=\"line\">        flush privileges;             # 刷新</span><br><span class=\"line\">        show databases;               # 显示所有数据库</span><br><span class=\"line\">        use dbname;                   # 打开数据库</span><br><span class=\"line\">        show tables;                  # 显示选中数据库中所有的表</span><br><span class=\"line\">        desc tables;                  # 查看表结构</span><br><span class=\"line\">        drop database name;           # 删除数据库</span><br><span class=\"line\">        drop table name;              # 删除表</span><br><span class=\"line\">        create database name;         # 创建数据库</span><br><span class=\"line\">        select column from table;     # 查询</span><br><span class=\"line\">        show processlist;             # 查看mysql进程</span><br><span class=\"line\">        show full processlist;        # 显示进程全的语句</span><br><span class=\"line\">        select user();                # 查看所有用户</span><br><span class=\"line\">        show slave status\\G;          # 查看主从状态</span><br><span class=\"line\">        show variables;               # 查看所有参数变量</span><br><span class=\"line\">        show status;                  # 运行状态</span><br><span class=\"line\">        show table status             # 查看表的引擎状态</span><br><span class=\"line\">        show grants for user@&#x27;%&#x27;                                    # 查看用户权限</span><br><span class=\"line\">        drop table if exists user                                   # 表存在就删除</span><br><span class=\"line\">        create table if not exists user                             # 表不存在就创建</span><br><span class=\"line\">        select host,user,password from user;                        # 查询用户权限 先use mysql</span><br><span class=\"line\">        create table ka(ka_id varchar(6),qianshu int);              # 创建表</span><br><span class=\"line\">        show variables like &#x27;character_set_%&#x27;;                      # 查看系统的字符集和排序方式的设定</span><br><span class=\"line\">        show variables like &#x27;%timeout%&#x27;;                            # 查看超时相关参数</span><br><span class=\"line\">        delete from user where user=&#x27;&#x27;;                             # 删除空用户</span><br><span class=\"line\">        delete from user where user=&#x27;sss&#x27; and host=&#x27;localhost&#x27; ;    # 删除用户</span><br><span class=\"line\">        drop user &#x27;sss&#x27;@&#x27;localhost&#x27;;                                # 使用此方法删除用户更为靠谱</span><br><span class=\"line\">        ALTER TABLE mytable ENGINE = MyISAM ;                       # 改变现有的表使用的存储引擎</span><br><span class=\"line\">        SHOW TABLE STATUS from  dbname  where Name=&#x27;tablename&#x27;;     # 查询表引擎</span><br><span class=\"line\">        mysql -uroot -p -A -ss -h10.10.10.5 -e &quot;show databases;&quot;    # shell中获取数据不带表格 -ss参数</span><br><span class=\"line\">        CREATE TABLE innodb (id int, title char(20)) ENGINE = INNODB                     # 创建表指定存储引擎的类型(MyISAM或INNODB)</span><br><span class=\"line\">        grant replication slave on *.* to &#x27;user&#x27;@&#x27;%&#x27; identified by &#x27;pwd&#x27;;                # 创建主从复制用户</span><br><span class=\"line\">        ALTER TABLE player ADD INDEX weekcredit_faction_index (weekcredit, faction);     # 添加索引</span><br><span class=\"line\">        alter table name add column accountid(column)  int(11) NOT NULL(column);         # 插入字段</span><br><span class=\"line\">        update host set monitor_state=&#x27;Y&#x27;,hostname=&#x27;xuesong&#x27; where ip=&#x27;192.168.1.1&#x27;;     # 更新数据</span><br><span class=\"line\">        select * from information_schema.processlist where command!=&#x27;sleep&#x27;;             # 查看当前进程</span><br><span class=\"line\">        select * from atable where name=&#x27;on&#x27; AND t&lt;15 AND host LIKE &#x27;10%&#x27; limit 1,10;    # 多条件查询</span><br><span class=\"line\">        show create database ops_deploy;                                                 # 查看数据库编码</span><br><span class=\"line\">        show create table updatelog;                                                     # 查看数据库表编码</span><br><span class=\"line\">        alter database ops_deploy CHARACTER SET utf8;                                    # 修改数据库编码</span><br><span class=\"line\">        alter table `updatelog` default character set utf8;                              # 修改表编码</span><br><span class=\"line\">        alter table `updatelog` convert to character set utf8;                           # 修改一张表的所有字段的编码格式</span><br><span class=\"line\"></span><br><span class=\"line\">        自增表&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            create table xuesong  (id INTEGER  PRIMARY KEY AUTO_INCREMENT, name CHAR(30) NOT NULL, age integer , sex CHAR(15) );  # 创建自增表</span><br><span class=\"line\">            insert into xuesong(name,age,sex) values(%s,%s,%s)  # 自增插入数据</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        登录mysql的命令&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            # 格式： mysql -h 主机地址 -u 用户名 -p 用户密码</span><br><span class=\"line\">            mysql -h110.110.110.110 -P3306 -uroot -p</span><br><span class=\"line\">            mysql -uroot -p -S /data1/mysql5/data/mysql.sock -A  --default-character-set=GBK</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        shell执行mysql命令&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            mysql -u root -p&#x27;123&#x27; xuesong &lt; file.sql   # 针对指定库执行sql文件中的语句,好处不需要转义特殊符号,一条语句可以换行.不指定库执行时语句中需要先use</span><br><span class=\"line\">            mysql -u$username -p$passwd -h$dbhost -P$dbport -A -e &quot;</span><br><span class=\"line\">            use $dbname;</span><br><span class=\"line\">            delete from data where date=(&#x27;$date1&#x27;);</span><br><span class=\"line\">            &quot;    # 执行多条mysql命令</span><br><span class=\"line\">            mysql -uroot -p -S mysql.sock -e &quot;use db;alter table gift add column accountid  int(11) NOT NULL;flush privileges;&quot;  2&gt;&amp;1 |grep -v Warning    # 不登陆mysql插入字段</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        mysql字符集相关&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            show variables like &#x27;%character%&#x27;;      # 查看数据库中设置字符集的参数</span><br><span class=\"line\">            # character_set_client、character_set_connection 以及 character_set_results 这几个参数都是客户端的设置</span><br><span class=\"line\">            # character_set_system、character_set_server 以及 character_set_database 是指服务器端的设置。</span><br><span class=\"line\">            # 而对于这三个服务器端的参数来说的优先级是:</span><br><span class=\"line\">            # 列级字符集 &gt; 表级字符集 &gt; character_set_database &gt; character_set_server &gt; character_set_system</span><br><span class=\"line\"></span><br><span class=\"line\">            show global variables like &#x27;%char%&#x27;;                                 #查看RDS实例字符集相关参数设置</span><br><span class=\"line\">            show global variables like &#x27;coll%&#x27;;                                  #查看当前会话字符序相关参数设置</span><br><span class=\"line\">            show character set;                                                  #查看实例支持的字符集</span><br><span class=\"line\">            show collation;                                                      #查看实例支持的字符序</span><br><span class=\"line\">            show create table table_name \\G                                      #查看表字符集设置</span><br><span class=\"line\">            show create database database_name \\G                                #查看数据库字符集设置</span><br><span class=\"line\">            show create procedure procedure_name \\G                              #查看存储过程字符集设置</span><br><span class=\"line\">            show procedure status \\G                                             #查看存储过程字符集设置</span><br><span class=\"line\">            alter database db_name default charset utf8;                         #修改数据库的字符集 </span><br><span class=\"line\">            create database db_name character set utf8;                          #创建数据库时指定字符集</span><br><span class=\"line\">            alter table tab_name default charset utf8 collate utf8_general_ci;   #修改表字符集和字符序</span><br><span class=\"line\"></span><br><span class=\"line\">            # 下面三条sql 分别将库 dbsdq , 表 tt2 , 表 tt2 中的 c2 列修改为utf8mb4 字符集</span><br><span class=\"line\">            alter database dbsdq character set utf8mb4 collate utf8mb4_unicode_ci;</span><br><span class=\"line\">            use dbsdq;</span><br><span class=\"line\">            alter table tt2 character set utf8mb4 collate utf8mb4_unicode_ci;</span><br><span class=\"line\">            alter table tt2 modify c2  varchar(10) character set utf8mb4;</span><br><span class=\"line\">            # 修改列时,当前列中的所有行都会立即转化为新的字符集;</span><br><span class=\"line\">            # alter table 会对表加元数据锁</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        备份数据库&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            mysqldump -h host -u root -p --default-character-set=utf8 dbname &gt;dbname_backup.sql               # 不包括库名，还原需先创建库，在use</span><br><span class=\"line\">            mysqldump -h host -u root -p --database --default-character-set=utf8 dbname &gt;dbname_backup.sql    # 包括库名，还原不需要创建库</span><br><span class=\"line\">            /bin/mysqlhotcopy -u root -p    # mysqlhotcopy只能备份MyISAM引擎</span><br><span class=\"line\">            mysqldump -u root -p -S mysql.sock --default-character-set=utf8 dbname table1 table2  &gt; /data/db.sql    # 备份表</span><br><span class=\"line\">            mysqldump -uroot -p123  -d database &gt; database.sql    # 备份数据库结构</span><br><span class=\"line\"></span><br><span class=\"line\">            # 最小权限备份</span><br><span class=\"line\">            grant select on db_name.* to dbbackup@&quot;localhost&quot; Identified by &quot;passwd&quot;;</span><br><span class=\"line\">            # --single-transaction  InnoDB有时间戳 只备份开始那一刻的数据,备份过程中的数据不会备份</span><br><span class=\"line\">            mysqldump -hlocalhost -P 3306 -u dbbackup --single-transaction  -p&quot;passwd&quot; --database dbname &gt;dbname.sql</span><br><span class=\"line\"></span><br><span class=\"line\">            # xtrabackup备份需单独安装软件 优点: 速度快,压力小,可直接恢复主从复制</span><br><span class=\"line\">            innobackupex --user=root --password=&quot;&quot; --defaults-file=/data/mysql5/data/my_3306.cnf --socket=/data/mysql5/data/mysql.sock --slave-info --stream=tar --tmpdir=/data/dbbackup/temp /data/dbbackup/ 2&gt;/data/dbbackup/dbbackup.log | gzip 1&gt;/data/dbbackup/db50.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        还原数据库&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            mysql -h host -u root -p dbname &lt; dbname_backup.sql</span><br><span class=\"line\">            source 路径.sql   # 登陆mysql后还原sql文件</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        赋权限&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            # 指定IP: $IP  本机: localhost   所有IP地址: %   # 通常指定多条</span><br><span class=\"line\">            grant all on zabbix.* to user@&quot;$IP&quot;;             # 对现有账号赋予权限</span><br><span class=\"line\">            grant select on database.* to user@&quot;%&quot; Identified by &quot;passwd&quot;;     # 赋予查询权限(没有用户，直接创建)</span><br><span class=\"line\">            grant all privileges on database.* to user@&quot;$IP&quot; identified by &#x27;passwd&#x27;;         # 赋予指定IP指定用户所有权限(不允许对当前库给其他用户赋权限)</span><br><span class=\"line\">            grant all privileges on database.* to user@&quot;localhost&quot; identified by &#x27;passwd&#x27; with grant option;   # 赋予本机指定用户所有权限(允许对当前库给其他用户赋权限)</span><br><span class=\"line\">            grant select, insert, update, delete on database.* to user@&#x27;ip&#x27;identified by &quot;passwd&quot;;   # 开放管理操作指令</span><br><span class=\"line\">            revoke all on *.* from user@localhost;     # 回收权限</span><br><span class=\"line\">            GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER, EXECUTE, CREATE ROUTINE, ALTER ROUTINE ON `storemisc_dev`.* TO &#x27;user&#x27;@&#x27;192.168.%&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        更改密码&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            update user set password=password(&#x27;passwd&#x27;) where user=&#x27;root&#x27;</span><br><span class=\"line\">            mysqladmin -u root password &#x27;xuesong&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        mysql忘记密码后重置&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            cd /data/mysql5</span><br><span class=\"line\">            /data/mysql5/bin/mysqld_safe --user=mysql --skip-grant-tables --skip-networking &amp;</span><br><span class=\"line\">            use mysql;</span><br><span class=\"line\">            update user set password=password(&#x27;123123&#x27;) where user=&#x27;root&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        mysql主从复制失败恢复&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            slave stop;</span><br><span class=\"line\">            reset slave;</span><br><span class=\"line\">            change master to master_host=&#x27;10.10.10.110&#x27;,master_port=3306,master_user=&#x27;repl&#x27;,master_password=&#x27;repl&#x27;,master_log_file=&#x27;master-bin.000010&#x27;,master_log_pos=107,master_connect_retry=60;</span><br><span class=\"line\">            slave start;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        sql语句使用变量&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            use xuesong;</span><br><span class=\"line\">            set @a=concat(&#x27;my&#x27;,weekday(curdate()));    # 组合时间变量</span><br><span class=\"line\">            set @sql := concat(&#x27;CREATE TABLE IF NOT EXISTS &#x27;,@a,&#x27;( id INT(11) NOT NULL )&#x27;);   # 组合sql语句</span><br><span class=\"line\">            select @sql;                    # 查看语句</span><br><span class=\"line\">            prepare create_tb from @sql;    # 准备</span><br><span class=\"line\">            execute create_tb;              # 执行</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        检测mysql主从复制延迟&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            1、在从库定时执行更新主库中的一个timeout数值</span><br><span class=\"line\">            2、同时取出从库中的timeout值对比判断从库与主库的延迟</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        死锁&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            show OPEN TABLES where In_use &gt; 0;                  # 查看当前锁信息</span><br><span class=\"line\">            show variables like &#x27;innodb_print_all_deadlocks&#x27;;   # 查看当前死锁参数</span><br><span class=\"line\">            set global innodb_print_all_deadlocks = 1;          # 设置死锁信息保存到错误日志</span><br><span class=\"line\">            innodb_print_all_deadlocks = 1                      # conf配置</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        mysql慢查询&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            select * from information_schema.processlist where command in (&#x27;Query&#x27;) and time &gt;5\\G      # 查询操作大于5S的进程</span><br><span class=\"line\"></span><br><span class=\"line\">            开启慢查询日志&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                # 配置文件 /etc/my.conf</span><br><span class=\"line\">                [mysqld]</span><br><span class=\"line\">                log-slow-queries=/var/lib/mysql/slowquery.log         # 指定日志文件存放位置，可以为空，系统会给一个缺省的文件host_name-slow.log</span><br><span class=\"line\">                long_query_time=5                                     # 记录超过的时间，默认为10s 建议0.5S</span><br><span class=\"line\">                log-queries-not-using-indexes                         # log下来没有使用索引的query,可以根据情况决定是否开启  可不加</span><br><span class=\"line\">                log-long-format                                       # 如果设置了，所有没有使用索引的查询也将被记录    可不加</span><br><span class=\"line\">                # 直接修改生效</span><br><span class=\"line\">                show variables like &quot;%slow%&quot;;                         # 查看慢查询状态</span><br><span class=\"line\">                set global slow_query_log=&#x27;ON&#x27;;                       # 开启慢查询日志 变量可能不同，看上句查询出来的变量</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            mysqldumpslow慢查询日志查看&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                -s  # 是order的顺序，包括看了代码，主要有 c,t,l,r和ac,at,al,ar，分别是按照query次数，时间，lock的时间和返回的记录数来排序，前面加了a的时倒序</span><br><span class=\"line\">                -t  # 是top n的意思，即为返回前面多少条的数据</span><br><span class=\"line\">                -g  # 后边可以写一个正则匹配模式，大小写不敏感的</span><br><span class=\"line\"></span><br><span class=\"line\">                mysqldumpslow -s c -t 20 host-slow.log                # 访问次数最多的20个sql语句</span><br><span class=\"line\">                mysqldumpslow -s r -t 20 host-slow.log                # 返回记录集最多的20个sql</span><br><span class=\"line\">                mysqldumpslow -t 10 -s t -g &quot;left join&quot; host-slow.log # 按照时间返回前10条里面含有左连接的sql语句</span><br><span class=\"line\"></span><br><span class=\"line\">                show global status like &#x27;%slow%&#x27;;                     # 查看现在这个session有多少个慢查询</span><br><span class=\"line\">                show variables like &#x27;%slow%&#x27;;                         # 查看慢查询日志是否开启，如果slow_query_log和log_slow_queries显示为on，说明服务器的慢查询日志已经开启</span><br><span class=\"line\">                show variables like &#x27;%long%&#x27;;                         # 查看超时阀值</span><br><span class=\"line\">                desc select * from wei where text=&#x27;xishizhaohua&#x27;\\G;   # 扫描整张表 tepe:ALL  没有使用索引 key:NULL</span><br><span class=\"line\">                create index text_index on wei(text);                 # 创建索引</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            Percona Toolkit 慢日志分析工具</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        mysql操作次数查询&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            select * from information_schema.global_status;</span><br><span class=\"line\"></span><br><span class=\"line\">            com_select</span><br><span class=\"line\">            com_delete</span><br><span class=\"line\">            com_insert</span><br><span class=\"line\">            com_update</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    mongodb&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # mongo可视管理工具 studio 3t  </span><br><span class=\"line\"></span><br><span class=\"line\">        一、启动&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            # 不启动认证</span><br><span class=\"line\">            ./mongod --port 27017 --fork --logpath=/opt/mongodb/mongodb.log --logappend --dbpath=/opt/mongodb/data/</span><br><span class=\"line\">            # 启动认证</span><br><span class=\"line\">            ./mongod --port 27017 --fork --logpath=/opt/mongodb/mongodb.log --logappend --dbpath=/opt/mongodb/data/ --auth</span><br><span class=\"line\"></span><br><span class=\"line\">            # 配置文件方式启动</span><br><span class=\"line\">            cat /opt/mongodb/mongodb.conf</span><br><span class=\"line\">              port=27017                       # 端口号</span><br><span class=\"line\">              fork=true                        # 以守护进程的方式运行，创建服务器进程</span><br><span class=\"line\">              auth=true                        # 开启用户认证</span><br><span class=\"line\">              logappend=true                   # 日志采用追加方式</span><br><span class=\"line\">              logpath=/opt/mongodb/mongodb.log # 日志输出文件路径</span><br><span class=\"line\">              dbpath=/opt/mongodb/data/        # 数据库路径</span><br><span class=\"line\">              shardsvr=true                    # 设置是否分片</span><br><span class=\"line\">              maxConns=600                     # 数据库的最大连接数</span><br><span class=\"line\">            ./mongod -f /opt/mongodb/mongodb.conf</span><br><span class=\"line\"></span><br><span class=\"line\">            # 其他参数</span><br><span class=\"line\">            bind_ip         # 绑定IP  使用mongo登录需要指定对应IP</span><br><span class=\"line\">            journal         # 开启日志功能,降低单机故障的恢复时间,取代dur参数</span><br><span class=\"line\">            syncdelay       # 系统同步刷新磁盘的时间,默认60秒</span><br><span class=\"line\">            directoryperdb  # 每个db单独存放目录,建议设置.与mysql独立表空间类似</span><br><span class=\"line\">            repairpath      # 执行repair时的临时目录.如果没开启journal,出现异常重启,必须执行repair操作</span><br><span class=\"line\">            # mongodb没有参数设置内存大小.使用os mmap机制缓存数据文件,在数据量不超过内存的情况下,效率非常高.数据量超过系统可用内存会影响写入性能</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        二、关闭&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            # 方法一:登录mongodb</span><br><span class=\"line\">            ./mongo</span><br><span class=\"line\">            use admin</span><br><span class=\"line\">            db.shutdownServer()</span><br><span class=\"line\"></span><br><span class=\"line\">            # 方法:kill传递信号  两种皆可</span><br><span class=\"line\">            kill -2 pid</span><br><span class=\"line\">            kill -15 pid</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        三、开启认证与用户管理&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            ./mongo                      # 先登录</span><br><span class=\"line\">            use admin                    # 切换到admin库</span><br><span class=\"line\">            db.addUser(&quot;root&quot;,&quot;123456&quot;)                     # 创建用户</span><br><span class=\"line\">            db.addUser(&#x27;zhansan&#x27;,&#x27;pass&#x27;,true)               # 如果用户的readOnly为true那么这个用户只能读取数据，添加一个readOnly用户zhansan</span><br><span class=\"line\">            ./mongo 127.0.0.1:27017/mydb -uroot -p123456    # 再次登录,只能针对用户所在库登录</span><br><span class=\"line\">            #虽然是超级管理员，但是admin不能直接登录其他数据库，否则报错</span><br><span class=\"line\">            #Fri Nov 22 15:03:21.886 Error: 18 &#123; code: 18, ok: 0.0, errmsg: &quot;auth fails&quot; &#125; at src/mongo/shell/db.js:228</span><br><span class=\"line\">            show collections                                # 查看链接状态 再次登录使用如下命令,显示错误未经授权</span><br><span class=\"line\">            db.system.users.find();                         # 查看创建用户信息</span><br><span class=\"line\">            db.system.users.remove(&#123;user:&quot;zhansan&quot;&#125;)        # 删除用户</span><br><span class=\"line\"></span><br><span class=\"line\">            #恢复密码只需要重启mongodb 不加--auth参数</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        四、登录&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            192.168.1.5:28017      # http登录后可查看状态</span><br><span class=\"line\">            mongo                  # 默认登录后打开 test 库</span><br><span class=\"line\">            mongo 192.168.1.5:27017/databaseName      # 直接连接某个库 不存在则创建  启动认证需要指定对应库才可登录</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        五、查看状态&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            #登录后执行命令查看状态</span><br><span class=\"line\">            db.runCommand(&#123;&quot;serverStatus&quot;:1&#125;)</span><br><span class=\"line\">                globalLock         # 表示全局写入锁占用了服务器多少时间(微秒)</span><br><span class=\"line\">                mem                # 包含服务器内存映射了多少数据,服务器进程的虚拟内存和常驻内存的占用情况(MB)</span><br><span class=\"line\">                indexCounters      # 表示B树在磁盘检索(misses)和内存检索(hits)的次数.如果这两个比值开始上升,就要考虑添加内存了</span><br><span class=\"line\">                backgroudFlushing  # 表示后台做了多少次fsync以及用了多少时间</span><br><span class=\"line\">                opcounters         # 包含每种主要擦撞的次数</span><br><span class=\"line\">                asserts            # 统计了断言的次数</span><br><span class=\"line\"></span><br><span class=\"line\">            #状态信息从服务器启动开始计算,如果过大就会复位,发送复位，所有计数都会复位,asserts中的roolovers值增加</span><br><span class=\"line\"></span><br><span class=\"line\">            #mongodb自带的命令</span><br><span class=\"line\">            ./mongostat</span><br><span class=\"line\">                insert     #每秒插入量</span><br><span class=\"line\">                query      #每秒查询量</span><br><span class=\"line\">                update     #每秒更新量</span><br><span class=\"line\">                delete     #每秒删除量</span><br><span class=\"line\">                locked     #锁定量</span><br><span class=\"line\">                qr|qw      #客户端查询排队长度(读|写)</span><br><span class=\"line\">                ar|aw      #活跃客户端量(读|写)</span><br><span class=\"line\">                conn       #连接数</span><br><span class=\"line\">                time       #当前时间</span><br><span class=\"line\"></span><br><span class=\"line\">            mongostat -h 127.0.0.1 --port 27047 --authenticationDatabase admin -u zadmin -p Keaphh9e    # 查看mongo状态</span><br><span class=\"line\">            mongotop  -h 127.0.0.1 --port 27047 --authenticationDatabase admin -u zadmin -p Keaphh9e    # 查看mongo集合的统计数据</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        六、常用命令&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            db.listCommands()     # 当前MongoDB支持的所有命令（同样可通过运行命令db.runCommand(&#123;&quot;listCommands&quot; : `1&#125;)来查询所有命令）</span><br><span class=\"line\"></span><br><span class=\"line\">            db.runCommand(&#123;&quot;buildInfo&quot; : 1&#125;)                                  # 返回MongoDB服务器的版本号和服务器OS的相关信息</span><br><span class=\"line\">            db.runCommand(&#123;&quot;collStats&quot; : tablename&#125;)                          # 返回该集合的统计信息，包括数据大小，已分配存储空间大小，索引的大小等</span><br><span class=\"line\">            db.runCommand(&#123;&quot;dropDatabase&quot; : 1&#125;)                               # 清空当前数据库的信息，包括删除所有的集合和索引</span><br><span class=\"line\">            db.runCommand(&#123;&quot;isMaster&quot; : 1&#125;)                                   # 检查本服务器是主服务器还是从服务器</span><br><span class=\"line\">            db.runCommand(&#123;&quot;ping&quot; : 1&#125;)                                       # 检查服务器链接是否正常。即便服务器上锁，该命令也会立即返回</span><br><span class=\"line\">            db.runCommand(&#123;&quot;repaireDatabase&quot; : 1&#125;)                            # 对当前数据库进行修复并压缩，如果数据库特别大，这个命令会非常耗时</span><br><span class=\"line\">            db.runCommand(&#123;&quot;serverStatus&quot; : 1&#125;)                               # 查看这台服务器的管理统计信息</span><br><span class=\"line\">            # 某些命令必须在admin数据库下运行，如下两个命令：</span><br><span class=\"line\">            db.runCommand(&#123;&quot;renameCollection&quot; : 集合名, &quot;to&quot;：集合名&#125;)          # 对集合重命名，注意两个集合名都要是完整的集合命名空间，如foo.bar, 表示数据库foo下的集合bar。</span><br><span class=\"line\">            db.runCommand(&#123;&quot;listDatabases&quot; : 1&#125;)                              # 列出服务器上所有的数据库</span><br><span class=\"line\"></span><br><span class=\"line\">            mongo  172.20.20.1:27072/mdb --eval &quot;db.tb.count();&quot;              # shell执行mongo语句</span><br><span class=\"line\">            mongo --host  172.20.20.1 --port 27049</span><br><span class=\"line\"></span><br><span class=\"line\">            rs.config();                                                      # 查看集群配置</span><br><span class=\"line\">            rs.status();                                                      # 查看集群节点的状态</span><br><span class=\"line\">            db.currentOp()                                                    # 获取当前正在执行的操作,可对应命令链接到ip:port</span><br><span class=\"line\">            db.runCommand( &#123; logRotate : 1 &#125; )                                # 日志轮转</span><br><span class=\"line\">            rs.slaveOk()                                                      # 设置从库shell可读</span><br><span class=\"line\">            rs.addArb(&quot;172.16.10.199:27020&quot;);                                 # 添加仲裁节点</span><br><span class=\"line\">            rs.add(&#123;host: &quot;10.2.2.2:27047&quot;, priority: 0, hidden: true&#125;)       # 添加从节点 hidden true隐藏节点[priority必须为0]  false不隐藏</span><br><span class=\"line\">            rs.remove(&quot;172.20.80.216:27047&quot;);                                 # 删除节点</span><br><span class=\"line\">            rs.stepDown(120)                                                  # 主库上执行切换为从,120秒后切换回主</span><br><span class=\"line\">            show dbs                                                          # 查询db</span><br><span class=\"line\">            use post                                                          # 选择db</span><br><span class=\"line\">            show tables                                                       # 查看文档列表</span><br><span class=\"line\">            db.tb.drop()                                                      # 删除集合 需要权限</span><br><span class=\"line\">            db.tb.remove(&#123;&#125;)                                                  # 删除所有数据</span><br><span class=\"line\">            db.tb.count()                                                     # 查询文档条数</span><br><span class=\"line\">            db.tb.find()                                                      # 查看文档内容</span><br><span class=\"line\">            db.tb.find(&#123;_id:37530555&#125;)                                        # 查询指定id</span><br><span class=\"line\">            db.tb.find().sort(&#123;_id:-1&#125;).limit(1)                              # 查询文档最后一条</span><br><span class=\"line\">            db.tb.find(&#123;&quot;processed&quot; : &#123;&quot;$ne&quot; : true&#125;&#125;).limit(1);              # 字段不为 true</span><br><span class=\"line\">            db.tb.find(&#123;&quot;processed&quot; : &#123;&quot;$eq&quot; : true&#125;&#125;).limit(1);              # 字段为 true</span><br><span class=\"line\">            db.tb.find(&#123;&quot;processed&quot; : &#123;&quot;$exists&quot; : false&#125;&#125;).limit(1);         # 字段不存在</span><br><span class=\"line\"></span><br><span class=\"line\">            db.tb.ensureIndex(&#123;&quot;status&quot;:1&#125;, &#123;background:true&#125;)                # 后台加索引</span><br><span class=\"line\">            db.tb.getIndexes()                                                # 查看索引</span><br><span class=\"line\">            db.tb.ensureIndex(&#123;&quot;c_type&quot;:1&#125;,&#123;backgrounnd:true&#125;)                # 后台添加索引  1正向  -1反向</span><br><span class=\"line\">            db.tb.dropIndex(&#123;&quot;c_type&quot;:1&#125;);                                    # 删除索引</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        七、进程控制&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            db.currentOp()                  # 查看活动进程</span><br><span class=\"line\">            db.$cmd.sys.inprog.findOne()    # 查看活动进程 与上面一样</span><br><span class=\"line\">                opid      # 操作进程号</span><br><span class=\"line\">                op        # 操作类型(查询\\更新)</span><br><span class=\"line\">                ns        # 命名空间,指操作的是哪个对象</span><br><span class=\"line\">                query     # 如果操作类型是查询,这里将显示具体的查询内容</span><br><span class=\"line\">                lockType  # 锁的类型,指明是读锁还是写锁</span><br><span class=\"line\"></span><br><span class=\"line\">            db.killOp(opid值)                         # 结束进程</span><br><span class=\"line\">            db.$cmd.sys.killop.findOne(&#123;op:opid值&#125;)   # 结束进程</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        八、备份还原&#123;</span><br><span class=\"line\">            # mongodump 虽然能不停机备份,但是为了获取实时数据视图的能力,使用fsync命令能在运行时复制数据目录并且不会损坏数据</span><br><span class=\"line\">            # fsync会强制服务器将所有缓冲区的数据写入磁盘.配合lock还阻止对数据库的进一步写入,知道释放锁为止</span><br><span class=\"line\">            db.runCommand(&#123;&quot;fsync&quot;:1,&quot;lock&quot;:1&#125;)   # 执行强制更新与写入锁</span><br><span class=\"line\">            db.$cmd.sys.unlock.findOne()          # 解锁</span><br><span class=\"line\">            db.currentOp()                        # 查看解锁是否正常</span><br><span class=\"line\"></span><br><span class=\"line\">            mongoexport -d test -c t1 -o t1.dat                 # 导出JSON格式</span><br><span class=\"line\">                -c         # 指明导出集合</span><br><span class=\"line\">                -d         # 使用库</span><br><span class=\"line\">            mongoexport -d test -c t1 -csv -f num -o t1.dat     # 导出csv格式</span><br><span class=\"line\">                -csv       # 指明导出csv格式</span><br><span class=\"line\">                -f         # 指明需要导出那些例</span><br><span class=\"line\"></span><br><span class=\"line\">            mongoimport -d test -c t1 -file t1.dat                           # mongoimport还原JSON格式</span><br><span class=\"line\">            mongoimport -d test -c t1 -type csv --headerline -file t1.dat    # mongoimport还原csv格式数据</span><br><span class=\"line\">                --headerline                # 指明不导入第一行 因为第一行是列名</span><br><span class=\"line\"></span><br><span class=\"line\">            mongodump -d test -o /bak/mongodump                # mongodump数据备份</span><br><span class=\"line\">            mongorestore -d test --drop /bak/mongodump/*       # mongorestore恢复</span><br><span class=\"line\">                --drop      # 恢复前先删除</span><br><span class=\"line\">                --gzip      # 压缩</span><br><span class=\"line\"></span><br><span class=\"line\">            # 备份一个表</span><br><span class=\"line\">            # --excludeCollection string # 排除指定的集合 要排除多个，使用多个</span><br><span class=\"line\">            mongodump --host 127.0.0.1:27080 -d dbname  -c tablename  -o /data/reports/</span><br><span class=\"line\">            mongodump --host 127.0.0.1:27080 -d dbname  -c tablename  -o /data/reports/reports  -u root -p tAvaa5yNUE --authenticationDatabase admin</span><br><span class=\"line\"></span><br><span class=\"line\">            # 恢复一个表</span><br><span class=\"line\">            mongorestore --host 127.0.0.1:27080 -d dbname  -c tablename --drop --dir=/data/reports/tablename.bson</span><br><span class=\"line\"></span><br><span class=\"line\">            # 在线拷贝一个库</span><br><span class=\"line\">            db.copyDatabase(fromdb, todb, fromhost, username, password, mechanism)</span><br><span class=\"line\">            db.copyDatabase(&#x27;mate&#x27;,&#x27;mate&#x27;, &#x27;172.16.255.176:27047&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        九、修复&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            # 当停电或其他故障引起不正常关闭时,会造成部分数据损坏丢失</span><br><span class=\"line\">            mongod --repair      # 修复操作:启动时候加上 --repair</span><br><span class=\"line\">            # 修复过程:将所有文档导出,然后马上导入,忽略无效文档.完成后重建索引。时间较长,会丢弃损坏文档</span><br><span class=\"line\">            # 修复数据还能起到压缩数据库的作用</span><br><span class=\"line\">            db.repairDatabase()    # 运行中的mongodb可使用 repairDatabase 修复当前使用的数据库</span><br><span class=\"line\">            &#123;&quot;repairDatabase&quot;:1&#125;   # 通过驱动程序</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        十、python使用mongodb&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            原文: http://blog.nosqlfan.com/html/2989.html</span><br><span class=\"line\"></span><br><span class=\"line\">            easy_install pymongo      # python2.7+</span><br><span class=\"line\">            import pymongo</span><br><span class=\"line\">            connection=pymongo.Connection(&#x27;localhost&#x27;,27017)   # 创建连接</span><br><span class=\"line\">            db = connection.test_database                      # 切换数据库</span><br><span class=\"line\">            collection = db.test_collection                    # 获取collection</span><br><span class=\"line\">            # db和collection都是延时创建的，在添加Document时才真正创建</span><br><span class=\"line\"></span><br><span class=\"line\">            文档添加, _id自动创建</span><br><span class=\"line\">                import datetime</span><br><span class=\"line\">                post = &#123;&quot;author&quot;: &quot;Mike&quot;,</span><br><span class=\"line\">                    &quot;text&quot;: &quot;My first blog post!&quot;,</span><br><span class=\"line\">                    &quot;tags&quot;: [&quot;mongodb&quot;, &quot;python&quot;, &quot;pymongo&quot;],</span><br><span class=\"line\">                    &quot;date&quot;: datetime.datetime.utcnow()&#125;</span><br><span class=\"line\">                posts = db.posts</span><br><span class=\"line\">                posts.insert(post)</span><br><span class=\"line\">                ObjectId(&#x27;...&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">            批量插入</span><br><span class=\"line\">                new_posts = [&#123;&quot;author&quot;: &quot;Mike&quot;,</span><br><span class=\"line\">                    &quot;text&quot;: &quot;Another post!&quot;,</span><br><span class=\"line\">                    &quot;tags&quot;: [&quot;bulk&quot;, &quot;insert&quot;],</span><br><span class=\"line\">                    &quot;date&quot;: datetime.datetime(2009, 11, 12, 11, 14)&#125;,</span><br><span class=\"line\">                    &#123;&quot;author&quot;: &quot;Eliot&quot;,</span><br><span class=\"line\">                    &quot;title&quot;: &quot;MongoDB is fun&quot;,</span><br><span class=\"line\">                    &quot;text&quot;: &quot;and pretty easy too!&quot;,</span><br><span class=\"line\">                    &quot;date&quot;: datetime.datetime(2009, 11, 10, 10, 45)&#125;]</span><br><span class=\"line\">                posts.insert(new_posts)</span><br><span class=\"line\">                [ObjectId(&#x27;...&#x27;), ObjectId(&#x27;...&#x27;)]</span><br><span class=\"line\"></span><br><span class=\"line\">            获取所有collection</span><br><span class=\"line\">                db.collection_names()    # 相当于SQL的show tables</span><br><span class=\"line\"></span><br><span class=\"line\">            获取单个文档</span><br><span class=\"line\">                posts.find_one()</span><br><span class=\"line\"></span><br><span class=\"line\">            查询多个文档</span><br><span class=\"line\">                for post in posts.find():</span><br><span class=\"line\">                    post</span><br><span class=\"line\"></span><br><span class=\"line\">            加条件的查询</span><br><span class=\"line\">                posts.find_one(&#123;&quot;author&quot;: &quot;Mike&quot;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">            高级查询</span><br><span class=\"line\">                posts.find(&#123;&quot;date&quot;: &#123;&quot;$lt&quot;: &quot;d&quot;&#125;&#125;).sort(&quot;author&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">            统计数量</span><br><span class=\"line\">                posts.count()</span><br><span class=\"line\"></span><br><span class=\"line\">            加索引</span><br><span class=\"line\">                from pymongo import ASCENDING, DESCENDING</span><br><span class=\"line\">                posts.create_index([(&quot;date&quot;, DESCENDING), (&quot;author&quot;, ASCENDING)])</span><br><span class=\"line\"></span><br><span class=\"line\">            查看查询语句的性能</span><br><span class=\"line\">                posts.find(&#123;&quot;date&quot;: &#123;&quot;$lt&quot;: &quot;d&quot;&#125;&#125;).sort(&quot;author&quot;).explain()[&quot;cursor&quot;]</span><br><span class=\"line\">                posts.find(&#123;&quot;date&quot;: &#123;&quot;$lt&quot;: &quot;d&quot;&#125;&#125;).sort(&quot;author&quot;).explain()[&quot;nscanned&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    JDK安装&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        vim /etc/profile.d/jdk.sh</span><br><span class=\"line\">        export JAVA_HOME=/usr/local/jdk1.8.0_151</span><br><span class=\"line\">        export PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\"></span><br><span class=\"line\">        . /etc/profile         # 加载新的环境变量</span><br><span class=\"line\">        jps -ml                # 查看java进程</span><br><span class=\"line\">        jstat -gc 18381 1s 30  # 查看java进程gc情况</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    redis动态加内存&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ./redis-cli -h 10.10.10.11 -p 6401</span><br><span class=\"line\">        save                                # 保存当前快照</span><br><span class=\"line\">        config get *                        # 列出所有当前配置</span><br><span class=\"line\">        config get maxmemory                # 查看指定配置</span><br><span class=\"line\">        config set maxmemory  15360000000   # 动态修改最大内存配置参数</span><br><span class=\"line\">\t\tselect 5                            # 选择数据库</span><br><span class=\"line\">\t\tCONFIG SET requirepass &quot;no&quot;         # 设置密码</span><br><span class=\"line\">\t\tauth &quot;no&quot;                           # 认证</span><br><span class=\"line\">\t\tset db redis                        # 添加key</span><br><span class=\"line\">\t\tget db                              # 获取key的value</span><br><span class=\"line\">\t\t------------------------------</span><br><span class=\"line\">\t\tredis键空间通知</span><br><span class=\"line\">\t\t1 /etc/redis.conf</span><br></pre></td></tr></table></figure>\n<pre><code>    notify-keyspace-events Ex\n    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 systemctl restart redis</span><br><span class=\"line\">3 终端1执行</span><br></pre></td></tr></table></figure>\n    PSUBSCRIBE __keyevent@0__:expired \n    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4 终端2</span><br></pre></td></tr></table></figure>\n    setex easubuac_auth_token 5 uac:192.168.1.189:e36b1f00034357fe3396b34d906778fe  # 设置10s后过期\n    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br><span class=\"line\">686</span><br><span class=\"line\">687</span><br><span class=\"line\">688</span><br><span class=\"line\">689</span><br><span class=\"line\">690</span><br><span class=\"line\">691</span><br><span class=\"line\">692</span><br><span class=\"line\">693</span><br><span class=\"line\">694</span><br><span class=\"line\">695</span><br><span class=\"line\">696</span><br><span class=\"line\">697</span><br><span class=\"line\">698</span><br><span class=\"line\">699</span><br><span class=\"line\">700</span><br><span class=\"line\">701</span><br><span class=\"line\">702</span><br><span class=\"line\">703</span><br><span class=\"line\">704</span><br><span class=\"line\">705</span><br><span class=\"line\">706</span><br><span class=\"line\">707</span><br><span class=\"line\">708</span><br><span class=\"line\">709</span><br><span class=\"line\">710</span><br><span class=\"line\">711</span><br><span class=\"line\">712</span><br><span class=\"line\">713</span><br><span class=\"line\">714</span><br><span class=\"line\">715</span><br><span class=\"line\">716</span><br><span class=\"line\">717</span><br><span class=\"line\">718</span><br><span class=\"line\">719</span><br><span class=\"line\">720</span><br><span class=\"line\">721</span><br><span class=\"line\">722</span><br><span class=\"line\">723</span><br><span class=\"line\">724</span><br><span class=\"line\">725</span><br><span class=\"line\">726</span><br><span class=\"line\">727</span><br><span class=\"line\">728</span><br><span class=\"line\">729</span><br><span class=\"line\">730</span><br><span class=\"line\">731</span><br><span class=\"line\">732</span><br><span class=\"line\">733</span><br><span class=\"line\">734</span><br><span class=\"line\">735</span><br><span class=\"line\">736</span><br><span class=\"line\">737</span><br><span class=\"line\">738</span><br><span class=\"line\">739</span><br><span class=\"line\">740</span><br><span class=\"line\">741</span><br><span class=\"line\">742</span><br><span class=\"line\">743</span><br><span class=\"line\">744</span><br><span class=\"line\">745</span><br><span class=\"line\">746</span><br><span class=\"line\">747</span><br><span class=\"line\">748</span><br><span class=\"line\">749</span><br><span class=\"line\">750</span><br><span class=\"line\">751</span><br><span class=\"line\">752</span><br><span class=\"line\">753</span><br><span class=\"line\">754</span><br><span class=\"line\">755</span><br><span class=\"line\">756</span><br><span class=\"line\">757</span><br><span class=\"line\">758</span><br><span class=\"line\">759</span><br><span class=\"line\">760</span><br><span class=\"line\">761</span><br><span class=\"line\">762</span><br><span class=\"line\">763</span><br><span class=\"line\">764</span><br><span class=\"line\">765</span><br><span class=\"line\">766</span><br><span class=\"line\">767</span><br><span class=\"line\">768</span><br><span class=\"line\">769</span><br><span class=\"line\">770</span><br><span class=\"line\">771</span><br><span class=\"line\">772</span><br><span class=\"line\">773</span><br><span class=\"line\">774</span><br><span class=\"line\">775</span><br><span class=\"line\">776</span><br><span class=\"line\">777</span><br><span class=\"line\">778</span><br><span class=\"line\">779</span><br><span class=\"line\">780</span><br><span class=\"line\">781</span><br><span class=\"line\">782</span><br><span class=\"line\">783</span><br><span class=\"line\">784</span><br><span class=\"line\">785</span><br><span class=\"line\">786</span><br><span class=\"line\">787</span><br><span class=\"line\">788</span><br><span class=\"line\">789</span><br><span class=\"line\">790</span><br><span class=\"line\">791</span><br><span class=\"line\">792</span><br><span class=\"line\">793</span><br><span class=\"line\">794</span><br><span class=\"line\">795</span><br><span class=\"line\">796</span><br><span class=\"line\">797</span><br><span class=\"line\">798</span><br><span class=\"line\">799</span><br><span class=\"line\">800</span><br><span class=\"line\">801</span><br><span class=\"line\">802</span><br><span class=\"line\">803</span><br><span class=\"line\">804</span><br><span class=\"line\">805</span><br><span class=\"line\">806</span><br><span class=\"line\">807</span><br><span class=\"line\">808</span><br><span class=\"line\">809</span><br><span class=\"line\">810</span><br><span class=\"line\">811</span><br><span class=\"line\">812</span><br><span class=\"line\">813</span><br><span class=\"line\">814</span><br><span class=\"line\">815</span><br><span class=\"line\">816</span><br><span class=\"line\">817</span><br><span class=\"line\">818</span><br><span class=\"line\">819</span><br><span class=\"line\">820</span><br><span class=\"line\">821</span><br><span class=\"line\">822</span><br><span class=\"line\">823</span><br><span class=\"line\">824</span><br><span class=\"line\">825</span><br><span class=\"line\">826</span><br><span class=\"line\">827</span><br><span class=\"line\">828</span><br><span class=\"line\">829</span><br><span class=\"line\">830</span><br><span class=\"line\">831</span><br><span class=\"line\">832</span><br><span class=\"line\">833</span><br><span class=\"line\">834</span><br><span class=\"line\">835</span><br><span class=\"line\">836</span><br><span class=\"line\">837</span><br><span class=\"line\">838</span><br><span class=\"line\">839</span><br><span class=\"line\">840</span><br><span class=\"line\">841</span><br><span class=\"line\">842</span><br><span class=\"line\">843</span><br><span class=\"line\">844</span><br><span class=\"line\">845</span><br><span class=\"line\">846</span><br><span class=\"line\">847</span><br><span class=\"line\">848</span><br><span class=\"line\">849</span><br><span class=\"line\">850</span><br><span class=\"line\">851</span><br><span class=\"line\">852</span><br><span class=\"line\">853</span><br><span class=\"line\">854</span><br><span class=\"line\">855</span><br><span class=\"line\">856</span><br><span class=\"line\">857</span><br><span class=\"line\">858</span><br><span class=\"line\">859</span><br><span class=\"line\">860</span><br><span class=\"line\">861</span><br><span class=\"line\">862</span><br><span class=\"line\">863</span><br><span class=\"line\">864</span><br><span class=\"line\">865</span><br><span class=\"line\">866</span><br><span class=\"line\">867</span><br><span class=\"line\">868</span><br><span class=\"line\">869</span><br><span class=\"line\">870</span><br><span class=\"line\">871</span><br><span class=\"line\">872</span><br><span class=\"line\">873</span><br><span class=\"line\">874</span><br><span class=\"line\">875</span><br><span class=\"line\">876</span><br><span class=\"line\">877</span><br><span class=\"line\">878</span><br><span class=\"line\">879</span><br><span class=\"line\">880</span><br><span class=\"line\">881</span><br><span class=\"line\">882</span><br><span class=\"line\">883</span><br><span class=\"line\">884</span><br><span class=\"line\">885</span><br><span class=\"line\">886</span><br><span class=\"line\">887</span><br><span class=\"line\">888</span><br><span class=\"line\">889</span><br><span class=\"line\">890</span><br><span class=\"line\">891</span><br><span class=\"line\">892</span><br><span class=\"line\">893</span><br><span class=\"line\">894</span><br><span class=\"line\">895</span><br><span class=\"line\">896</span><br><span class=\"line\">897</span><br><span class=\"line\">898</span><br><span class=\"line\">899</span><br><span class=\"line\">900</span><br><span class=\"line\">901</span><br><span class=\"line\">902</span><br><span class=\"line\">903</span><br><span class=\"line\">904</span><br><span class=\"line\">905</span><br><span class=\"line\">906</span><br><span class=\"line\">907</span><br><span class=\"line\">908</span><br><span class=\"line\">909</span><br><span class=\"line\">910</span><br><span class=\"line\">911</span><br><span class=\"line\">912</span><br><span class=\"line\">913</span><br><span class=\"line\">914</span><br><span class=\"line\">915</span><br><span class=\"line\">916</span><br><span class=\"line\">917</span><br><span class=\"line\">918</span><br><span class=\"line\">919</span><br><span class=\"line\">920</span><br><span class=\"line\">921</span><br><span class=\"line\">922</span><br><span class=\"line\">923</span><br><span class=\"line\">924</span><br><span class=\"line\">925</span><br><span class=\"line\">926</span><br><span class=\"line\">927</span><br><span class=\"line\">928</span><br><span class=\"line\">929</span><br><span class=\"line\">930</span><br><span class=\"line\">931</span><br><span class=\"line\">932</span><br><span class=\"line\">933</span><br><span class=\"line\">934</span><br><span class=\"line\">935</span><br><span class=\"line\">936</span><br><span class=\"line\">937</span><br><span class=\"line\">938</span><br><span class=\"line\">939</span><br><span class=\"line\">940</span><br><span class=\"line\">941</span><br><span class=\"line\">942</span><br><span class=\"line\">943</span><br><span class=\"line\">944</span><br><span class=\"line\">945</span><br><span class=\"line\">946</span><br><span class=\"line\">947</span><br><span class=\"line\">948</span><br><span class=\"line\">949</span><br><span class=\"line\">950</span><br><span class=\"line\">951</span><br><span class=\"line\">952</span><br><span class=\"line\">953</span><br><span class=\"line\">954</span><br><span class=\"line\">955</span><br><span class=\"line\">956</span><br><span class=\"line\">957</span><br><span class=\"line\">958</span><br><span class=\"line\">959</span><br><span class=\"line\">960</span><br><span class=\"line\">961</span><br><span class=\"line\">962</span><br><span class=\"line\">963</span><br><span class=\"line\">964</span><br><span class=\"line\">965</span><br><span class=\"line\">966</span><br><span class=\"line\">967</span><br><span class=\"line\">968</span><br><span class=\"line\">969</span><br><span class=\"line\">970</span><br><span class=\"line\">971</span><br><span class=\"line\">972</span><br><span class=\"line\">973</span><br><span class=\"line\">974</span><br><span class=\"line\">975</span><br><span class=\"line\">976</span><br><span class=\"line\">977</span><br><span class=\"line\">978</span><br><span class=\"line\">979</span><br><span class=\"line\">980</span><br><span class=\"line\">981</span><br><span class=\"line\">982</span><br><span class=\"line\">983</span><br><span class=\"line\">984</span><br><span class=\"line\">985</span><br><span class=\"line\">986</span><br><span class=\"line\">987</span><br><span class=\"line\">988</span><br><span class=\"line\">989</span><br><span class=\"line\">990</span><br><span class=\"line\">991</span><br><span class=\"line\">992</span><br><span class=\"line\">993</span><br><span class=\"line\">994</span><br><span class=\"line\">995</span><br><span class=\"line\">996</span><br><span class=\"line\">997</span><br><span class=\"line\">998</span><br><span class=\"line\">999</span><br><span class=\"line\">1000</span><br><span class=\"line\">1001</span><br><span class=\"line\">1002</span><br><span class=\"line\">1003</span><br><span class=\"line\">1004</span><br><span class=\"line\">1005</span><br><span class=\"line\">1006</span><br><span class=\"line\">1007</span><br><span class=\"line\">1008</span><br><span class=\"line\">1009</span><br><span class=\"line\">1010</span><br><span class=\"line\">1011</span><br><span class=\"line\">1012</span><br><span class=\"line\">1013</span><br><span class=\"line\">1014</span><br><span class=\"line\">1015</span><br><span class=\"line\">1016</span><br><span class=\"line\">1017</span><br><span class=\"line\">1018</span><br><span class=\"line\">1019</span><br><span class=\"line\">1020</span><br><span class=\"line\">1021</span><br><span class=\"line\">1022</span><br><span class=\"line\">1023</span><br><span class=\"line\">1024</span><br><span class=\"line\">1025</span><br><span class=\"line\">1026</span><br><span class=\"line\">1027</span><br><span class=\"line\">1028</span><br><span class=\"line\">1029</span><br><span class=\"line\">1030</span><br><span class=\"line\">1031</span><br><span class=\"line\">1032</span><br><span class=\"line\">1033</span><br><span class=\"line\">1034</span><br><span class=\"line\">1035</span><br><span class=\"line\">1036</span><br><span class=\"line\">1037</span><br><span class=\"line\">1038</span><br><span class=\"line\">1039</span><br><span class=\"line\">1040</span><br><span class=\"line\">1041</span><br><span class=\"line\">1042</span><br><span class=\"line\">1043</span><br><span class=\"line\">1044</span><br><span class=\"line\">1045</span><br><span class=\"line\">1046</span><br><span class=\"line\">1047</span><br><span class=\"line\">1048</span><br><span class=\"line\">1049</span><br><span class=\"line\">1050</span><br><span class=\"line\">1051</span><br><span class=\"line\">1052</span><br><span class=\"line\">1053</span><br><span class=\"line\">1054</span><br><span class=\"line\">1055</span><br><span class=\"line\">1056</span><br><span class=\"line\">1057</span><br><span class=\"line\">1058</span><br><span class=\"line\">1059</span><br><span class=\"line\">1060</span><br><span class=\"line\">1061</span><br><span class=\"line\">1062</span><br><span class=\"line\">1063</span><br><span class=\"line\">1064</span><br><span class=\"line\">1065</span><br><span class=\"line\">1066</span><br><span class=\"line\">1067</span><br><span class=\"line\">1068</span><br><span class=\"line\">1069</span><br><span class=\"line\">1070</span><br><span class=\"line\">1071</span><br><span class=\"line\">1072</span><br><span class=\"line\">1073</span><br><span class=\"line\">1074</span><br><span class=\"line\">1075</span><br><span class=\"line\">1076</span><br><span class=\"line\">1077</span><br><span class=\"line\">1078</span><br><span class=\"line\">1079</span><br><span class=\"line\">1080</span><br><span class=\"line\">1081</span><br><span class=\"line\">1082</span><br><span class=\"line\">1083</span><br><span class=\"line\">1084</span><br><span class=\"line\">1085</span><br><span class=\"line\">1086</span><br><span class=\"line\">1087</span><br><span class=\"line\">1088</span><br><span class=\"line\">1089</span><br><span class=\"line\">1090</span><br><span class=\"line\">1091</span><br><span class=\"line\">1092</span><br><span class=\"line\">1093</span><br><span class=\"line\">1094</span><br><span class=\"line\">1095</span><br><span class=\"line\">1096</span><br><span class=\"line\">1097</span><br><span class=\"line\">1098</span><br><span class=\"line\">1099</span><br><span class=\"line\">1100</span><br><span class=\"line\">1101</span><br><span class=\"line\">1102</span><br><span class=\"line\">1103</span><br><span class=\"line\">1104</span><br><span class=\"line\">1105</span><br><span class=\"line\">1106</span><br><span class=\"line\">1107</span><br><span class=\"line\">1108</span><br><span class=\"line\">1109</span><br><span class=\"line\">1110</span><br><span class=\"line\">1111</span><br><span class=\"line\">1112</span><br><span class=\"line\">1113</span><br><span class=\"line\">1114</span><br><span class=\"line\">1115</span><br><span class=\"line\">1116</span><br><span class=\"line\">1117</span><br><span class=\"line\">1118</span><br><span class=\"line\">1119</span><br><span class=\"line\">1120</span><br><span class=\"line\">1121</span><br><span class=\"line\">1122</span><br><span class=\"line\">1123</span><br><span class=\"line\">1124</span><br><span class=\"line\">1125</span><br><span class=\"line\">1126</span><br><span class=\"line\">1127</span><br><span class=\"line\">1128</span><br><span class=\"line\">1129</span><br><span class=\"line\">1130</span><br><span class=\"line\">1131</span><br><span class=\"line\">1132</span><br><span class=\"line\">1133</span><br><span class=\"line\">1134</span><br><span class=\"line\">1135</span><br><span class=\"line\">1136</span><br><span class=\"line\">1137</span><br><span class=\"line\">1138</span><br><span class=\"line\">1139</span><br><span class=\"line\">1140</span><br><span class=\"line\">1141</span><br><span class=\"line\">1142</span><br><span class=\"line\">1143</span><br><span class=\"line\">1144</span><br><span class=\"line\">1145</span><br><span class=\"line\">1146</span><br><span class=\"line\">1147</span><br><span class=\"line\">1148</span><br><span class=\"line\">1149</span><br><span class=\"line\">1150</span><br><span class=\"line\">1151</span><br><span class=\"line\">1152</span><br><span class=\"line\">1153</span><br><span class=\"line\">1154</span><br><span class=\"line\">1155</span><br><span class=\"line\">1156</span><br><span class=\"line\">1157</span><br><span class=\"line\">1158</span><br><span class=\"line\">1159</span><br><span class=\"line\">1160</span><br><span class=\"line\">1161</span><br><span class=\"line\">1162</span><br><span class=\"line\">1163</span><br><span class=\"line\">1164</span><br><span class=\"line\">1165</span><br><span class=\"line\">1166</span><br><span class=\"line\">1167</span><br><span class=\"line\">1168</span><br><span class=\"line\">1169</span><br><span class=\"line\">1170</span><br><span class=\"line\">1171</span><br><span class=\"line\">1172</span><br><span class=\"line\">1173</span><br><span class=\"line\">1174</span><br><span class=\"line\">1175</span><br><span class=\"line\">1176</span><br><span class=\"line\">1177</span><br><span class=\"line\">1178</span><br><span class=\"line\">1179</span><br><span class=\"line\">1180</span><br><span class=\"line\">1181</span><br><span class=\"line\">1182</span><br><span class=\"line\">1183</span><br><span class=\"line\">1184</span><br><span class=\"line\">1185</span><br><span class=\"line\">1186</span><br><span class=\"line\">1187</span><br><span class=\"line\">1188</span><br><span class=\"line\">1189</span><br><span class=\"line\">1190</span><br><span class=\"line\">1191</span><br><span class=\"line\">1192</span><br><span class=\"line\">1193</span><br><span class=\"line\">1194</span><br><span class=\"line\">1195</span><br><span class=\"line\">1196</span><br><span class=\"line\">1197</span><br><span class=\"line\">1198</span><br><span class=\"line\">1199</span><br><span class=\"line\">1200</span><br><span class=\"line\">1201</span><br><span class=\"line\">1202</span><br><span class=\"line\">1203</span><br><span class=\"line\">1204</span><br><span class=\"line\">1205</span><br><span class=\"line\">1206</span><br><span class=\"line\">1207</span><br><span class=\"line\">1208</span><br><span class=\"line\">1209</span><br><span class=\"line\">1210</span><br><span class=\"line\">1211</span><br><span class=\"line\">1212</span><br><span class=\"line\">1213</span><br><span class=\"line\">1214</span><br><span class=\"line\">1215</span><br><span class=\"line\">1216</span><br><span class=\"line\">1217</span><br><span class=\"line\">1218</span><br><span class=\"line\">1219</span><br><span class=\"line\">1220</span><br><span class=\"line\">1221</span><br><span class=\"line\">1222</span><br><span class=\"line\">1223</span><br><span class=\"line\">1224</span><br><span class=\"line\">1225</span><br><span class=\"line\">1226</span><br><span class=\"line\">1227</span><br><span class=\"line\">1228</span><br><span class=\"line\">1229</span><br><span class=\"line\">1230</span><br><span class=\"line\">1231</span><br><span class=\"line\">1232</span><br><span class=\"line\">1233</span><br><span class=\"line\">1234</span><br><span class=\"line\">1235</span><br><span class=\"line\">1236</span><br><span class=\"line\">1237</span><br><span class=\"line\">1238</span><br><span class=\"line\">1239</span><br><span class=\"line\">1240</span><br><span class=\"line\">1241</span><br><span class=\"line\">1242</span><br><span class=\"line\">1243</span><br><span class=\"line\">1244</span><br><span class=\"line\">1245</span><br><span class=\"line\">1246</span><br><span class=\"line\">1247</span><br><span class=\"line\">1248</span><br><span class=\"line\">1249</span><br><span class=\"line\">1250</span><br><span class=\"line\">1251</span><br><span class=\"line\">1252</span><br><span class=\"line\">1253</span><br><span class=\"line\">1254</span><br><span class=\"line\">1255</span><br><span class=\"line\">1256</span><br><span class=\"line\">1257</span><br><span class=\"line\">1258</span><br><span class=\"line\">1259</span><br><span class=\"line\">1260</span><br><span class=\"line\">1261</span><br><span class=\"line\">1262</span><br><span class=\"line\">1263</span><br><span class=\"line\">1264</span><br><span class=\"line\">1265</span><br><span class=\"line\">1266</span><br><span class=\"line\">1267</span><br><span class=\"line\">1268</span><br><span class=\"line\">1269</span><br><span class=\"line\">1270</span><br><span class=\"line\">1271</span><br><span class=\"line\">1272</span><br><span class=\"line\">1273</span><br><span class=\"line\">1274</span><br><span class=\"line\">1275</span><br><span class=\"line\">1276</span><br><span class=\"line\">1277</span><br><span class=\"line\">1278</span><br><span class=\"line\">1279</span><br><span class=\"line\">1280</span><br><span class=\"line\">1281</span><br><span class=\"line\">1282</span><br><span class=\"line\">1283</span><br><span class=\"line\">1284</span><br><span class=\"line\">1285</span><br><span class=\"line\">1286</span><br><span class=\"line\">1287</span><br><span class=\"line\">1288</span><br><span class=\"line\">1289</span><br><span class=\"line\">1290</span><br><span class=\"line\">1291</span><br><span class=\"line\">1292</span><br><span class=\"line\">1293</span><br><span class=\"line\">1294</span><br><span class=\"line\">1295</span><br><span class=\"line\">1296</span><br><span class=\"line\">1297</span><br><span class=\"line\">1298</span><br><span class=\"line\">1299</span><br><span class=\"line\">1300</span><br><span class=\"line\">1301</span><br><span class=\"line\">1302</span><br><span class=\"line\">1303</span><br><span class=\"line\">1304</span><br><span class=\"line\">1305</span><br><span class=\"line\">1306</span><br><span class=\"line\">1307</span><br><span class=\"line\">1308</span><br><span class=\"line\">1309</span><br><span class=\"line\">1310</span><br><span class=\"line\">1311</span><br><span class=\"line\">1312</span><br><span class=\"line\">1313</span><br><span class=\"line\">1314</span><br><span class=\"line\">1315</span><br><span class=\"line\">1316</span><br><span class=\"line\">1317</span><br><span class=\"line\">1318</span><br><span class=\"line\">1319</span><br><span class=\"line\">1320</span><br><span class=\"line\">1321</span><br><span class=\"line\">1322</span><br><span class=\"line\">1323</span><br><span class=\"line\">1324</span><br><span class=\"line\">1325</span><br><span class=\"line\">1326</span><br><span class=\"line\">1327</span><br><span class=\"line\">1328</span><br><span class=\"line\">1329</span><br><span class=\"line\">1330</span><br><span class=\"line\">1331</span><br><span class=\"line\">1332</span><br><span class=\"line\">1333</span><br><span class=\"line\">1334</span><br><span class=\"line\">1335</span><br><span class=\"line\">1336</span><br><span class=\"line\">1337</span><br><span class=\"line\">1338</span><br><span class=\"line\">1339</span><br><span class=\"line\">1340</span><br><span class=\"line\">1341</span><br><span class=\"line\">1342</span><br><span class=\"line\">1343</span><br><span class=\"line\">1344</span><br><span class=\"line\">1345</span><br><span class=\"line\">1346</span><br><span class=\"line\">1347</span><br><span class=\"line\">1348</span><br><span class=\"line\">1349</span><br><span class=\"line\">1350</span><br><span class=\"line\">1351</span><br><span class=\"line\">1352</span><br><span class=\"line\">1353</span><br><span class=\"line\">1354</span><br><span class=\"line\">1355</span><br><span class=\"line\">1356</span><br><span class=\"line\">1357</span><br><span class=\"line\">1358</span><br><span class=\"line\">1359</span><br><span class=\"line\">1360</span><br><span class=\"line\">1361</span><br><span class=\"line\">1362</span><br><span class=\"line\">1363</span><br><span class=\"line\">1364</span><br><span class=\"line\">1365</span><br><span class=\"line\">1366</span><br><span class=\"line\">1367</span><br><span class=\"line\">1368</span><br><span class=\"line\">1369</span><br><span class=\"line\">1370</span><br><span class=\"line\">1371</span><br><span class=\"line\">1372</span><br><span class=\"line\">1373</span><br><span class=\"line\">1374</span><br><span class=\"line\">1375</span><br><span class=\"line\">1376</span><br><span class=\"line\">1377</span><br><span class=\"line\">1378</span><br><span class=\"line\">1379</span><br><span class=\"line\">1380</span><br><span class=\"line\">1381</span><br><span class=\"line\">1382</span><br><span class=\"line\">1383</span><br><span class=\"line\">1384</span><br><span class=\"line\">1385</span><br><span class=\"line\">1386</span><br><span class=\"line\">1387</span><br><span class=\"line\">1388</span><br><span class=\"line\">1389</span><br><span class=\"line\">1390</span><br><span class=\"line\">1391</span><br><span class=\"line\">1392</span><br><span class=\"line\">1393</span><br><span class=\"line\">1394</span><br><span class=\"line\">1395</span><br><span class=\"line\">1396</span><br><span class=\"line\">1397</span><br><span class=\"line\">1398</span><br><span class=\"line\">1399</span><br><span class=\"line\">1400</span><br><span class=\"line\">1401</span><br><span class=\"line\">1402</span><br><span class=\"line\">1403</span><br><span class=\"line\">1404</span><br><span class=\"line\">1405</span><br><span class=\"line\">1406</span><br><span class=\"line\">1407</span><br><span class=\"line\">1408</span><br><span class=\"line\">1409</span><br><span class=\"line\">1410</span><br><span class=\"line\">1411</span><br><span class=\"line\">1412</span><br><span class=\"line\">1413</span><br><span class=\"line\">1414</span><br><span class=\"line\">1415</span><br><span class=\"line\">1416</span><br><span class=\"line\">1417</span><br><span class=\"line\">1418</span><br><span class=\"line\">1419</span><br><span class=\"line\">1420</span><br><span class=\"line\">1421</span><br><span class=\"line\">1422</span><br><span class=\"line\">1423</span><br><span class=\"line\">1424</span><br><span class=\"line\">1425</span><br><span class=\"line\">1426</span><br><span class=\"line\">1427</span><br><span class=\"line\">1428</span><br><span class=\"line\">1429</span><br><span class=\"line\">1430</span><br><span class=\"line\">1431</span><br><span class=\"line\">1432</span><br><span class=\"line\">1433</span><br><span class=\"line\">1434</span><br><span class=\"line\">1435</span><br><span class=\"line\">1436</span><br><span class=\"line\">1437</span><br><span class=\"line\">1438</span><br><span class=\"line\">1439</span><br><span class=\"line\">1440</span><br><span class=\"line\">1441</span><br><span class=\"line\">1442</span><br><span class=\"line\">1443</span><br><span class=\"line\">1444</span><br><span class=\"line\">1445</span><br><span class=\"line\">1446</span><br><span class=\"line\">1447</span><br><span class=\"line\">1448</span><br><span class=\"line\">1449</span><br><span class=\"line\">1450</span><br><span class=\"line\">1451</span><br><span class=\"line\">1452</span><br><span class=\"line\">1453</span><br><span class=\"line\">1454</span><br><span class=\"line\">1455</span><br><span class=\"line\">1456</span><br><span class=\"line\">1457</span><br><span class=\"line\">1458</span><br><span class=\"line\">1459</span><br><span class=\"line\">1460</span><br><span class=\"line\">1461</span><br><span class=\"line\">1462</span><br><span class=\"line\">1463</span><br><span class=\"line\">1464</span><br><span class=\"line\">1465</span><br><span class=\"line\">1466</span><br><span class=\"line\">1467</span><br><span class=\"line\">1468</span><br><span class=\"line\">1469</span><br><span class=\"line\">1470</span><br><span class=\"line\">1471</span><br><span class=\"line\">1472</span><br><span class=\"line\">1473</span><br><span class=\"line\">1474</span><br><span class=\"line\">1475</span><br><span class=\"line\">1476</span><br><span class=\"line\">1477</span><br><span class=\"line\">1478</span><br><span class=\"line\">1479</span><br><span class=\"line\">1480</span><br><span class=\"line\">1481</span><br><span class=\"line\">1482</span><br><span class=\"line\">1483</span><br><span class=\"line\">1484</span><br><span class=\"line\">1485</span><br><span class=\"line\">1486</span><br><span class=\"line\">1487</span><br><span class=\"line\">1488</span><br><span class=\"line\">1489</span><br><span class=\"line\">1490</span><br><span class=\"line\">1491</span><br><span class=\"line\">1492</span><br><span class=\"line\">1493</span><br><span class=\"line\">1494</span><br><span class=\"line\">1495</span><br><span class=\"line\">1496</span><br><span class=\"line\">1497</span><br><span class=\"line\">1498</span><br><span class=\"line\">1499</span><br><span class=\"line\">1500</span><br><span class=\"line\">1501</span><br><span class=\"line\">1502</span><br><span class=\"line\">1503</span><br><span class=\"line\">1504</span><br><span class=\"line\">1505</span><br><span class=\"line\">1506</span><br><span class=\"line\">1507</span><br><span class=\"line\">1508</span><br><span class=\"line\">1509</span><br><span class=\"line\">1510</span><br><span class=\"line\">1511</span><br><span class=\"line\">1512</span><br><span class=\"line\">1513</span><br><span class=\"line\">1514</span><br><span class=\"line\">1515</span><br><span class=\"line\">1516</span><br><span class=\"line\">1517</span><br><span class=\"line\">1518</span><br><span class=\"line\">1519</span><br><span class=\"line\">1520</span><br><span class=\"line\">1521</span><br><span class=\"line\">1522</span><br><span class=\"line\">1523</span><br><span class=\"line\">1524</span><br><span class=\"line\">1525</span><br><span class=\"line\">1526</span><br><span class=\"line\">1527</span><br><span class=\"line\">1528</span><br><span class=\"line\">1529</span><br><span class=\"line\">1530</span><br><span class=\"line\">1531</span><br><span class=\"line\">1532</span><br><span class=\"line\">1533</span><br><span class=\"line\">1534</span><br><span class=\"line\">1535</span><br><span class=\"line\">1536</span><br><span class=\"line\">1537</span><br><span class=\"line\">1538</span><br><span class=\"line\">1539</span><br><span class=\"line\">1540</span><br><span class=\"line\">1541</span><br><span class=\"line\">1542</span><br><span class=\"line\">1543</span><br><span class=\"line\">1544</span><br><span class=\"line\">1545</span><br><span class=\"line\">1546</span><br><span class=\"line\">1547</span><br><span class=\"line\">1548</span><br><span class=\"line\">1549</span><br><span class=\"line\">1550</span><br><span class=\"line\">1551</span><br><span class=\"line\">1552</span><br><span class=\"line\">1553</span><br><span class=\"line\">1554</span><br><span class=\"line\">1555</span><br><span class=\"line\">1556</span><br><span class=\"line\">1557</span><br><span class=\"line\">1558</span><br><span class=\"line\">1559</span><br><span class=\"line\">1560</span><br><span class=\"line\">1561</span><br><span class=\"line\">1562</span><br><span class=\"line\">1563</span><br><span class=\"line\">1564</span><br><span class=\"line\">1565</span><br><span class=\"line\">1566</span><br><span class=\"line\">1567</span><br><span class=\"line\">1568</span><br><span class=\"line\">1569</span><br><span class=\"line\">1570</span><br><span class=\"line\">1571</span><br><span class=\"line\">1572</span><br><span class=\"line\">1573</span><br><span class=\"line\">1574</span><br><span class=\"line\">1575</span><br><span class=\"line\">1576</span><br><span class=\"line\">1577</span><br><span class=\"line\">1578</span><br><span class=\"line\">1579</span><br><span class=\"line\">1580</span><br><span class=\"line\">1581</span><br><span class=\"line\">1582</span><br><span class=\"line\">1583</span><br><span class=\"line\">1584</span><br><span class=\"line\">1585</span><br><span class=\"line\">1586</span><br><span class=\"line\">1587</span><br><span class=\"line\">1588</span><br><span class=\"line\">1589</span><br><span class=\"line\">1590</span><br><span class=\"line\">1591</span><br><span class=\"line\">1592</span><br><span class=\"line\">1593</span><br><span class=\"line\">1594</span><br><span class=\"line\">1595</span><br><span class=\"line\">1596</span><br><span class=\"line\">1597</span><br><span class=\"line\">1598</span><br><span class=\"line\">1599</span><br><span class=\"line\">1600</span><br><span class=\"line\">1601</span><br><span class=\"line\">1602</span><br><span class=\"line\">1603</span><br><span class=\"line\">1604</span><br><span class=\"line\">1605</span><br><span class=\"line\">1606</span><br><span class=\"line\">1607</span><br><span class=\"line\">1608</span><br><span class=\"line\">1609</span><br><span class=\"line\">1610</span><br><span class=\"line\">1611</span><br><span class=\"line\">1612</span><br><span class=\"line\">1613</span><br><span class=\"line\">1614</span><br><span class=\"line\">1615</span><br><span class=\"line\">1616</span><br><span class=\"line\">1617</span><br><span class=\"line\">1618</span><br><span class=\"line\">1619</span><br><span class=\"line\">1620</span><br><span class=\"line\">1621</span><br><span class=\"line\">1622</span><br><span class=\"line\">1623</span><br><span class=\"line\">1624</span><br><span class=\"line\">1625</span><br><span class=\"line\">1626</span><br><span class=\"line\">1627</span><br><span class=\"line\">1628</span><br><span class=\"line\">1629</span><br><span class=\"line\">1630</span><br><span class=\"line\">1631</span><br><span class=\"line\">1632</span><br><span class=\"line\">1633</span><br><span class=\"line\">1634</span><br><span class=\"line\">1635</span><br><span class=\"line\">1636</span><br><span class=\"line\">1637</span><br><span class=\"line\">1638</span><br><span class=\"line\">1639</span><br><span class=\"line\">1640</span><br><span class=\"line\">1641</span><br><span class=\"line\">1642</span><br><span class=\"line\">1643</span><br><span class=\"line\">1644</span><br><span class=\"line\">1645</span><br><span class=\"line\">1646</span><br><span class=\"line\">1647</span><br><span class=\"line\">1648</span><br><span class=\"line\">1649</span><br><span class=\"line\">1650</span><br><span class=\"line\">1651</span><br><span class=\"line\">1652</span><br><span class=\"line\">1653</span><br><span class=\"line\">1654</span><br><span class=\"line\">1655</span><br><span class=\"line\">1656</span><br><span class=\"line\">1657</span><br><span class=\"line\">1658</span><br><span class=\"line\">1659</span><br><span class=\"line\">1660</span><br><span class=\"line\">1661</span><br><span class=\"line\">1662</span><br><span class=\"line\">1663</span><br><span class=\"line\">1664</span><br><span class=\"line\">1665</span><br><span class=\"line\">1666</span><br><span class=\"line\">1667</span><br><span class=\"line\">1668</span><br><span class=\"line\">1669</span><br><span class=\"line\">1670</span><br><span class=\"line\">1671</span><br><span class=\"line\">1672</span><br><span class=\"line\">1673</span><br><span class=\"line\">1674</span><br><span class=\"line\">1675</span><br><span class=\"line\">1676</span><br><span class=\"line\">1677</span><br><span class=\"line\">1678</span><br><span class=\"line\">1679</span><br><span class=\"line\">1680</span><br><span class=\"line\">1681</span><br><span class=\"line\">1682</span><br><span class=\"line\">1683</span><br><span class=\"line\">1684</span><br><span class=\"line\">1685</span><br><span class=\"line\">1686</span><br><span class=\"line\">1687</span><br><span class=\"line\">1688</span><br><span class=\"line\">1689</span><br><span class=\"line\">1690</span><br><span class=\"line\">1691</span><br><span class=\"line\">1692</span><br><span class=\"line\">1693</span><br><span class=\"line\">1694</span><br><span class=\"line\">1695</span><br><span class=\"line\">1696</span><br><span class=\"line\">1697</span><br><span class=\"line\">1698</span><br><span class=\"line\">1699</span><br><span class=\"line\">1700</span><br><span class=\"line\">1701</span><br><span class=\"line\">1702</span><br><span class=\"line\">1703</span><br><span class=\"line\">1704</span><br><span class=\"line\">1705</span><br><span class=\"line\">1706</span><br><span class=\"line\">1707</span><br><span class=\"line\">1708</span><br><span class=\"line\">1709</span><br><span class=\"line\">1710</span><br><span class=\"line\">1711</span><br><span class=\"line\">1712</span><br><span class=\"line\">1713</span><br><span class=\"line\">1714</span><br><span class=\"line\">1715</span><br><span class=\"line\">1716</span><br><span class=\"line\">1717</span><br><span class=\"line\">1718</span><br><span class=\"line\">1719</span><br><span class=\"line\">1720</span><br><span class=\"line\">1721</span><br><span class=\"line\">1722</span><br><span class=\"line\">1723</span><br><span class=\"line\">1724</span><br><span class=\"line\">1725</span><br><span class=\"line\">1726</span><br><span class=\"line\">1727</span><br><span class=\"line\">1728</span><br><span class=\"line\">1729</span><br><span class=\"line\">1730</span><br><span class=\"line\">1731</span><br><span class=\"line\">1732</span><br><span class=\"line\">1733</span><br><span class=\"line\">1734</span><br><span class=\"line\">1735</span><br><span class=\"line\">1736</span><br><span class=\"line\">1737</span><br><span class=\"line\">1738</span><br><span class=\"line\">1739</span><br><span class=\"line\">1740</span><br><span class=\"line\">1741</span><br><span class=\"line\">1742</span><br><span class=\"line\">1743</span><br><span class=\"line\">1744</span><br><span class=\"line\">1745</span><br><span class=\"line\">1746</span><br><span class=\"line\">1747</span><br><span class=\"line\">1748</span><br><span class=\"line\">1749</span><br><span class=\"line\">1750</span><br><span class=\"line\">1751</span><br><span class=\"line\">1752</span><br><span class=\"line\">1753</span><br><span class=\"line\">1754</span><br><span class=\"line\">1755</span><br><span class=\"line\">1756</span><br><span class=\"line\">1757</span><br><span class=\"line\">1758</span><br><span class=\"line\">1759</span><br><span class=\"line\">1760</span><br><span class=\"line\">1761</span><br><span class=\"line\">1762</span><br><span class=\"line\">1763</span><br><span class=\"line\">1764</span><br><span class=\"line\">1765</span><br><span class=\"line\">1766</span><br><span class=\"line\">1767</span><br><span class=\"line\">1768</span><br><span class=\"line\">1769</span><br><span class=\"line\">1770</span><br><span class=\"line\">1771</span><br><span class=\"line\">1772</span><br><span class=\"line\">1773</span><br><span class=\"line\">1774</span><br><span class=\"line\">1775</span><br><span class=\"line\">1776</span><br><span class=\"line\">1777</span><br><span class=\"line\">1778</span><br><span class=\"line\">1779</span><br><span class=\"line\">1780</span><br><span class=\"line\">1781</span><br><span class=\"line\">1782</span><br><span class=\"line\">1783</span><br><span class=\"line\">1784</span><br><span class=\"line\">1785</span><br><span class=\"line\">1786</span><br><span class=\"line\">1787</span><br><span class=\"line\">1788</span><br><span class=\"line\">1789</span><br><span class=\"line\">1790</span><br><span class=\"line\">1791</span><br><span class=\"line\">1792</span><br><span class=\"line\">1793</span><br><span class=\"line\">1794</span><br><span class=\"line\">1795</span><br><span class=\"line\">1796</span><br><span class=\"line\">1797</span><br><span class=\"line\">1798</span><br><span class=\"line\">1799</span><br><span class=\"line\">1800</span><br><span class=\"line\">1801</span><br><span class=\"line\">1802</span><br><span class=\"line\">1803</span><br><span class=\"line\">1804</span><br><span class=\"line\">1805</span><br><span class=\"line\">1806</span><br><span class=\"line\">1807</span><br><span class=\"line\">1808</span><br><span class=\"line\">1809</span><br><span class=\"line\">1810</span><br><span class=\"line\">1811</span><br><span class=\"line\">1812</span><br><span class=\"line\">1813</span><br><span class=\"line\">1814</span><br><span class=\"line\">1815</span><br><span class=\"line\">1816</span><br><span class=\"line\">1817</span><br><span class=\"line\">1818</span><br><span class=\"line\">1819</span><br><span class=\"line\">1820</span><br><span class=\"line\">1821</span><br><span class=\"line\">1822</span><br><span class=\"line\">1823</span><br><span class=\"line\">1824</span><br><span class=\"line\">1825</span><br><span class=\"line\">1826</span><br><span class=\"line\">1827</span><br><span class=\"line\">1828</span><br><span class=\"line\">1829</span><br><span class=\"line\">1830</span><br><span class=\"line\">1831</span><br><span class=\"line\">1832</span><br><span class=\"line\">1833</span><br><span class=\"line\">1834</span><br><span class=\"line\">1835</span><br><span class=\"line\">1836</span><br><span class=\"line\">1837</span><br><span class=\"line\">1838</span><br><span class=\"line\">1839</span><br><span class=\"line\">1840</span><br><span class=\"line\">1841</span><br><span class=\"line\">1842</span><br><span class=\"line\">1843</span><br><span class=\"line\">1844</span><br><span class=\"line\">1845</span><br><span class=\"line\">1846</span><br><span class=\"line\">1847</span><br><span class=\"line\">1848</span><br><span class=\"line\">1849</span><br><span class=\"line\">1850</span><br><span class=\"line\">1851</span><br><span class=\"line\">1852</span><br><span class=\"line\">1853</span><br><span class=\"line\">1854</span><br><span class=\"line\">1855</span><br><span class=\"line\">1856</span><br><span class=\"line\">1857</span><br><span class=\"line\">1858</span><br><span class=\"line\">1859</span><br><span class=\"line\">1860</span><br><span class=\"line\">1861</span><br><span class=\"line\">1862</span><br><span class=\"line\">1863</span><br><span class=\"line\">1864</span><br><span class=\"line\">1865</span><br><span class=\"line\">1866</span><br><span class=\"line\">1867</span><br><span class=\"line\">1868</span><br><span class=\"line\">1869</span><br><span class=\"line\">1870</span><br><span class=\"line\">1871</span><br><span class=\"line\">1872</span><br><span class=\"line\">1873</span><br><span class=\"line\">1874</span><br><span class=\"line\">1875</span><br><span class=\"line\">1876</span><br><span class=\"line\">1877</span><br><span class=\"line\">1878</span><br><span class=\"line\">1879</span><br><span class=\"line\">1880</span><br><span class=\"line\">1881</span><br><span class=\"line\">1882</span><br><span class=\"line\">1883</span><br><span class=\"line\">1884</span><br><span class=\"line\">1885</span><br><span class=\"line\">1886</span><br><span class=\"line\">1887</span><br><span class=\"line\">1888</span><br><span class=\"line\">1889</span><br><span class=\"line\">1890</span><br><span class=\"line\">1891</span><br><span class=\"line\">1892</span><br><span class=\"line\">1893</span><br><span class=\"line\">1894</span><br><span class=\"line\">1895</span><br><span class=\"line\">1896</span><br><span class=\"line\">1897</span><br><span class=\"line\">1898</span><br><span class=\"line\">1899</span><br><span class=\"line\">1900</span><br><span class=\"line\">1901</span><br><span class=\"line\">1902</span><br><span class=\"line\">1903</span><br><span class=\"line\">1904</span><br><span class=\"line\">1905</span><br><span class=\"line\">1906</span><br><span class=\"line\">1907</span><br><span class=\"line\">1908</span><br><span class=\"line\">1909</span><br><span class=\"line\">1910</span><br><span class=\"line\">1911</span><br><span class=\"line\">1912</span><br><span class=\"line\">1913</span><br><span class=\"line\">1914</span><br><span class=\"line\">1915</span><br><span class=\"line\">1916</span><br><span class=\"line\">1917</span><br><span class=\"line\">1918</span><br><span class=\"line\">1919</span><br><span class=\"line\">1920</span><br><span class=\"line\">1921</span><br><span class=\"line\">1922</span><br><span class=\"line\">1923</span><br><span class=\"line\">1924</span><br><span class=\"line\">1925</span><br><span class=\"line\">1926</span><br><span class=\"line\">1927</span><br><span class=\"line\">1928</span><br><span class=\"line\">1929</span><br><span class=\"line\">1930</span><br><span class=\"line\">1931</span><br><span class=\"line\">1932</span><br><span class=\"line\">1933</span><br><span class=\"line\">1934</span><br><span class=\"line\">1935</span><br><span class=\"line\">1936</span><br><span class=\"line\">1937</span><br><span class=\"line\">1938</span><br><span class=\"line\">1939</span><br><span class=\"line\">1940</span><br><span class=\"line\">1941</span><br><span class=\"line\">1942</span><br><span class=\"line\">1943</span><br><span class=\"line\">1944</span><br><span class=\"line\">1945</span><br><span class=\"line\">1946</span><br><span class=\"line\">1947</span><br><span class=\"line\">1948</span><br><span class=\"line\">1949</span><br><span class=\"line\">1950</span><br><span class=\"line\">1951</span><br><span class=\"line\">1952</span><br><span class=\"line\">1953</span><br><span class=\"line\">1954</span><br><span class=\"line\">1955</span><br><span class=\"line\">1956</span><br><span class=\"line\">1957</span><br><span class=\"line\">1958</span><br><span class=\"line\">1959</span><br><span class=\"line\">1960</span><br><span class=\"line\">1961</span><br><span class=\"line\">1962</span><br><span class=\"line\">1963</span><br><span class=\"line\">1964</span><br><span class=\"line\">1965</span><br><span class=\"line\">1966</span><br><span class=\"line\">1967</span><br><span class=\"line\">1968</span><br><span class=\"line\">1969</span><br><span class=\"line\">1970</span><br><span class=\"line\">1971</span><br><span class=\"line\">1972</span><br><span class=\"line\">1973</span><br><span class=\"line\">1974</span><br><span class=\"line\">1975</span><br><span class=\"line\">1976</span><br><span class=\"line\">1977</span><br><span class=\"line\">1978</span><br><span class=\"line\">1979</span><br><span class=\"line\">1980</span><br><span class=\"line\">1981</span><br><span class=\"line\">1982</span><br><span class=\"line\">1983</span><br><span class=\"line\">1984</span><br><span class=\"line\">1985</span><br><span class=\"line\">1986</span><br><span class=\"line\">1987</span><br><span class=\"line\">1988</span><br><span class=\"line\">1989</span><br><span class=\"line\">1990</span><br><span class=\"line\">1991</span><br><span class=\"line\">1992</span><br><span class=\"line\">1993</span><br><span class=\"line\">1994</span><br><span class=\"line\">1995</span><br><span class=\"line\">1996</span><br><span class=\"line\">1997</span><br><span class=\"line\">1998</span><br><span class=\"line\">1999</span><br><span class=\"line\">2000</span><br><span class=\"line\">2001</span><br><span class=\"line\">2002</span><br><span class=\"line\">2003</span><br><span class=\"line\">2004</span><br><span class=\"line\">2005</span><br><span class=\"line\">2006</span><br><span class=\"line\">2007</span><br><span class=\"line\">2008</span><br><span class=\"line\">2009</span><br><span class=\"line\">2010</span><br><span class=\"line\">2011</span><br><span class=\"line\">2012</span><br><span class=\"line\">2013</span><br><span class=\"line\">2014</span><br><span class=\"line\">2015</span><br><span class=\"line\">2016</span><br><span class=\"line\">2017</span><br><span class=\"line\">2018</span><br><span class=\"line\">2019</span><br><span class=\"line\">2020</span><br><span class=\"line\">2021</span><br><span class=\"line\">2022</span><br><span class=\"line\">2023</span><br><span class=\"line\">2024</span><br><span class=\"line\">2025</span><br><span class=\"line\">2026</span><br><span class=\"line\">2027</span><br><span class=\"line\">2028</span><br><span class=\"line\">2029</span><br><span class=\"line\">2030</span><br><span class=\"line\">2031</span><br><span class=\"line\">2032</span><br><span class=\"line\">2033</span><br><span class=\"line\">2034</span><br><span class=\"line\">2035</span><br><span class=\"line\">2036</span><br><span class=\"line\">2037</span><br><span class=\"line\">2038</span><br><span class=\"line\">2039</span><br><span class=\"line\">2040</span><br><span class=\"line\">2041</span><br><span class=\"line\">2042</span><br><span class=\"line\">2043</span><br><span class=\"line\">2044</span><br><span class=\"line\">2045</span><br><span class=\"line\">2046</span><br><span class=\"line\">2047</span><br><span class=\"line\">2048</span><br><span class=\"line\">2049</span><br><span class=\"line\">2050</span><br><span class=\"line\">2051</span><br><span class=\"line\">2052</span><br><span class=\"line\">2053</span><br><span class=\"line\">2054</span><br><span class=\"line\">2055</span><br><span class=\"line\">2056</span><br><span class=\"line\">2057</span><br><span class=\"line\">2058</span><br><span class=\"line\">2059</span><br><span class=\"line\">2060</span><br><span class=\"line\">2061</span><br><span class=\"line\">2062</span><br><span class=\"line\">2063</span><br><span class=\"line\">2064</span><br><span class=\"line\">2065</span><br><span class=\"line\">2066</span><br><span class=\"line\">2067</span><br><span class=\"line\">2068</span><br><span class=\"line\">2069</span><br><span class=\"line\">2070</span><br><span class=\"line\">2071</span><br><span class=\"line\">2072</span><br><span class=\"line\">2073</span><br><span class=\"line\">2074</span><br><span class=\"line\">2075</span><br><span class=\"line\">2076</span><br><span class=\"line\">2077</span><br><span class=\"line\">2078</span><br><span class=\"line\">2079</span><br><span class=\"line\">2080</span><br><span class=\"line\">2081</span><br><span class=\"line\">2082</span><br><span class=\"line\">2083</span><br><span class=\"line\">2084</span><br><span class=\"line\">2085</span><br><span class=\"line\">2086</span><br><span class=\"line\">2087</span><br><span class=\"line\">2088</span><br><span class=\"line\">2089</span><br><span class=\"line\">2090</span><br><span class=\"line\">2091</span><br><span class=\"line\">2092</span><br><span class=\"line\">2093</span><br><span class=\"line\">2094</span><br><span class=\"line\">2095</span><br><span class=\"line\">2096</span><br><span class=\"line\">2097</span><br><span class=\"line\">2098</span><br><span class=\"line\">2099</span><br><span class=\"line\">2100</span><br><span class=\"line\">2101</span><br><span class=\"line\">2102</span><br><span class=\"line\">2103</span><br><span class=\"line\">2104</span><br><span class=\"line\">2105</span><br><span class=\"line\">2106</span><br><span class=\"line\">2107</span><br><span class=\"line\">2108</span><br><span class=\"line\">2109</span><br><span class=\"line\">2110</span><br><span class=\"line\">2111</span><br><span class=\"line\">2112</span><br><span class=\"line\">2113</span><br><span class=\"line\">2114</span><br><span class=\"line\">2115</span><br><span class=\"line\">2116</span><br><span class=\"line\">2117</span><br><span class=\"line\">2118</span><br><span class=\"line\">2119</span><br><span class=\"line\">2120</span><br><span class=\"line\">2121</span><br><span class=\"line\">2122</span><br><span class=\"line\">2123</span><br><span class=\"line\">2124</span><br><span class=\"line\">2125</span><br><span class=\"line\">2126</span><br><span class=\"line\">2127</span><br><span class=\"line\">2128</span><br><span class=\"line\">2129</span><br><span class=\"line\">2130</span><br><span class=\"line\">2131</span><br><span class=\"line\">2132</span><br><span class=\"line\">2133</span><br><span class=\"line\">2134</span><br><span class=\"line\">2135</span><br><span class=\"line\">2136</span><br><span class=\"line\">2137</span><br><span class=\"line\">2138</span><br><span class=\"line\">2139</span><br><span class=\"line\">2140</span><br><span class=\"line\">2141</span><br><span class=\"line\">2142</span><br><span class=\"line\">2143</span><br><span class=\"line\">2144</span><br><span class=\"line\">2145</span><br><span class=\"line\">2146</span><br><span class=\"line\">2147</span><br><span class=\"line\">2148</span><br><span class=\"line\">2149</span><br><span class=\"line\">2150</span><br><span class=\"line\">2151</span><br><span class=\"line\">2152</span><br><span class=\"line\">2153</span><br><span class=\"line\">2154</span><br><span class=\"line\">2155</span><br><span class=\"line\">2156</span><br><span class=\"line\">2157</span><br><span class=\"line\">2158</span><br><span class=\"line\">2159</span><br><span class=\"line\">2160</span><br><span class=\"line\">2161</span><br><span class=\"line\">2162</span><br><span class=\"line\">2163</span><br><span class=\"line\">2164</span><br><span class=\"line\">2165</span><br><span class=\"line\">2166</span><br><span class=\"line\">2167</span><br><span class=\"line\">2168</span><br><span class=\"line\">2169</span><br><span class=\"line\">2170</span><br><span class=\"line\">2171</span><br><span class=\"line\">2172</span><br><span class=\"line\">2173</span><br><span class=\"line\">2174</span><br><span class=\"line\">2175</span><br><span class=\"line\">2176</span><br><span class=\"line\">2177</span><br><span class=\"line\">2178</span><br><span class=\"line\">2179</span><br><span class=\"line\">2180</span><br><span class=\"line\">2181</span><br><span class=\"line\">2182</span><br><span class=\"line\">2183</span><br><span class=\"line\">2184</span><br><span class=\"line\">2185</span><br><span class=\"line\">2186</span><br><span class=\"line\">2187</span><br><span class=\"line\">2188</span><br><span class=\"line\">2189</span><br><span class=\"line\">2190</span><br><span class=\"line\">2191</span><br><span class=\"line\">2192</span><br><span class=\"line\">2193</span><br><span class=\"line\">2194</span><br><span class=\"line\">2195</span><br><span class=\"line\">2196</span><br><span class=\"line\">2197</span><br><span class=\"line\">2198</span><br><span class=\"line\">2199</span><br><span class=\"line\">2200</span><br><span class=\"line\">2201</span><br><span class=\"line\">2202</span><br><span class=\"line\">2203</span><br><span class=\"line\">2204</span><br><span class=\"line\">2205</span><br><span class=\"line\">2206</span><br><span class=\"line\">2207</span><br><span class=\"line\">2208</span><br><span class=\"line\">2209</span><br><span class=\"line\">2210</span><br><span class=\"line\">2211</span><br><span class=\"line\">2212</span><br><span class=\"line\">2213</span><br><span class=\"line\">2214</span><br><span class=\"line\">2215</span><br><span class=\"line\">2216</span><br><span class=\"line\">2217</span><br><span class=\"line\">2218</span><br><span class=\"line\">2219</span><br><span class=\"line\">2220</span><br><span class=\"line\">2221</span><br><span class=\"line\">2222</span><br><span class=\"line\">2223</span><br><span class=\"line\">2224</span><br><span class=\"line\">2225</span><br><span class=\"line\">2226</span><br><span class=\"line\">2227</span><br><span class=\"line\">2228</span><br><span class=\"line\">2229</span><br><span class=\"line\">2230</span><br><span class=\"line\">2231</span><br><span class=\"line\">2232</span><br><span class=\"line\">2233</span><br><span class=\"line\">2234</span><br><span class=\"line\">2235</span><br><span class=\"line\">2236</span><br><span class=\"line\">2237</span><br><span class=\"line\">2238</span><br><span class=\"line\">2239</span><br><span class=\"line\">2240</span><br><span class=\"line\">2241</span><br><span class=\"line\">2242</span><br><span class=\"line\">2243</span><br><span class=\"line\">2244</span><br><span class=\"line\">2245</span><br><span class=\"line\">2246</span><br><span class=\"line\">2247</span><br><span class=\"line\">2248</span><br><span class=\"line\">2249</span><br><span class=\"line\">2250</span><br><span class=\"line\">2251</span><br><span class=\"line\">2252</span><br><span class=\"line\">2253</span><br><span class=\"line\">2254</span><br><span class=\"line\">2255</span><br><span class=\"line\">2256</span><br><span class=\"line\">2257</span><br><span class=\"line\">2258</span><br><span class=\"line\">2259</span><br><span class=\"line\">2260</span><br><span class=\"line\">2261</span><br><span class=\"line\">2262</span><br><span class=\"line\">2263</span><br><span class=\"line\">2264</span><br><span class=\"line\">2265</span><br><span class=\"line\">2266</span><br><span class=\"line\">2267</span><br><span class=\"line\">2268</span><br><span class=\"line\">2269</span><br><span class=\"line\">2270</span><br><span class=\"line\">2271</span><br><span class=\"line\">2272</span><br><span class=\"line\">2273</span><br><span class=\"line\">2274</span><br><span class=\"line\">2275</span><br><span class=\"line\">2276</span><br><span class=\"line\">2277</span><br><span class=\"line\">2278</span><br><span class=\"line\">2279</span><br><span class=\"line\">2280</span><br><span class=\"line\">2281</span><br><span class=\"line\">2282</span><br><span class=\"line\">2283</span><br><span class=\"line\">2284</span><br><span class=\"line\">2285</span><br><span class=\"line\">2286</span><br><span class=\"line\">2287</span><br><span class=\"line\">2288</span><br><span class=\"line\">2289</span><br><span class=\"line\">2290</span><br><span class=\"line\">2291</span><br><span class=\"line\">2292</span><br><span class=\"line\">2293</span><br><span class=\"line\">2294</span><br><span class=\"line\">2295</span><br><span class=\"line\">2296</span><br><span class=\"line\">2297</span><br><span class=\"line\">2298</span><br><span class=\"line\">2299</span><br><span class=\"line\">2300</span><br><span class=\"line\">2301</span><br><span class=\"line\">2302</span><br><span class=\"line\">2303</span><br><span class=\"line\">2304</span><br><span class=\"line\">2305</span><br><span class=\"line\">2306</span><br><span class=\"line\">2307</span><br><span class=\"line\">2308</span><br><span class=\"line\">2309</span><br><span class=\"line\">2310</span><br><span class=\"line\">2311</span><br><span class=\"line\">2312</span><br><span class=\"line\">2313</span><br><span class=\"line\">2314</span><br><span class=\"line\">2315</span><br><span class=\"line\">2316</span><br><span class=\"line\">2317</span><br><span class=\"line\">2318</span><br><span class=\"line\">2319</span><br><span class=\"line\">2320</span><br><span class=\"line\">2321</span><br><span class=\"line\">2322</span><br><span class=\"line\">2323</span><br><span class=\"line\">2324</span><br><span class=\"line\">2325</span><br><span class=\"line\">2326</span><br><span class=\"line\">2327</span><br><span class=\"line\">2328</span><br><span class=\"line\">2329</span><br><span class=\"line\">2330</span><br><span class=\"line\">2331</span><br><span class=\"line\">2332</span><br><span class=\"line\">2333</span><br><span class=\"line\">2334</span><br><span class=\"line\">2335</span><br><span class=\"line\">2336</span><br><span class=\"line\">2337</span><br><span class=\"line\">2338</span><br><span class=\"line\">2339</span><br><span class=\"line\">2340</span><br><span class=\"line\">2341</span><br><span class=\"line\">2342</span><br><span class=\"line\">2343</span><br><span class=\"line\">2344</span><br><span class=\"line\">2345</span><br><span class=\"line\">2346</span><br><span class=\"line\">2347</span><br><span class=\"line\">2348</span><br><span class=\"line\">2349</span><br><span class=\"line\">2350</span><br><span class=\"line\">2351</span><br><span class=\"line\">2352</span><br><span class=\"line\">2353</span><br><span class=\"line\">2354</span><br><span class=\"line\">2355</span><br><span class=\"line\">2356</span><br><span class=\"line\">2357</span><br><span class=\"line\">2358</span><br><span class=\"line\">2359</span><br><span class=\"line\">2360</span><br><span class=\"line\">2361</span><br><span class=\"line\">2362</span><br><span class=\"line\">2363</span><br><span class=\"line\">2364</span><br><span class=\"line\">2365</span><br><span class=\"line\">2366</span><br><span class=\"line\">2367</span><br><span class=\"line\">2368</span><br><span class=\"line\">2369</span><br><span class=\"line\">2370</span><br><span class=\"line\">2371</span><br><span class=\"line\">2372</span><br><span class=\"line\">2373</span><br><span class=\"line\">2374</span><br><span class=\"line\">2375</span><br><span class=\"line\">2376</span><br><span class=\"line\">2377</span><br><span class=\"line\">2378</span><br><span class=\"line\">2379</span><br><span class=\"line\">2380</span><br><span class=\"line\">2381</span><br><span class=\"line\">2382</span><br><span class=\"line\">2383</span><br><span class=\"line\">2384</span><br><span class=\"line\">2385</span><br><span class=\"line\">2386</span><br><span class=\"line\">2387</span><br><span class=\"line\">2388</span><br><span class=\"line\">2389</span><br><span class=\"line\">2390</span><br><span class=\"line\">2391</span><br><span class=\"line\">2392</span><br><span class=\"line\">2393</span><br><span class=\"line\">2394</span><br><span class=\"line\">2395</span><br><span class=\"line\">2396</span><br><span class=\"line\">2397</span><br><span class=\"line\">2398</span><br><span class=\"line\">2399</span><br><span class=\"line\">2400</span><br><span class=\"line\">2401</span><br><span class=\"line\">2402</span><br><span class=\"line\">2403</span><br><span class=\"line\">2404</span><br><span class=\"line\">2405</span><br><span class=\"line\">2406</span><br><span class=\"line\">2407</span><br><span class=\"line\">2408</span><br><span class=\"line\">2409</span><br><span class=\"line\">2410</span><br><span class=\"line\">2411</span><br><span class=\"line\">2412</span><br><span class=\"line\">2413</span><br><span class=\"line\">2414</span><br><span class=\"line\">2415</span><br><span class=\"line\">2416</span><br><span class=\"line\">2417</span><br><span class=\"line\">2418</span><br><span class=\"line\">2419</span><br><span class=\"line\">2420</span><br><span class=\"line\">2421</span><br><span class=\"line\">2422</span><br><span class=\"line\">2423</span><br><span class=\"line\">2424</span><br><span class=\"line\">2425</span><br><span class=\"line\">2426</span><br><span class=\"line\">2427</span><br><span class=\"line\">2428</span><br><span class=\"line\">2429</span><br><span class=\"line\">2430</span><br><span class=\"line\">2431</span><br><span class=\"line\">2432</span><br><span class=\"line\">2433</span><br><span class=\"line\">2434</span><br><span class=\"line\">2435</span><br><span class=\"line\">2436</span><br><span class=\"line\">2437</span><br><span class=\"line\">2438</span><br><span class=\"line\">2439</span><br><span class=\"line\">2440</span><br><span class=\"line\">2441</span><br><span class=\"line\">2442</span><br><span class=\"line\">2443</span><br><span class=\"line\">2444</span><br><span class=\"line\">2445</span><br><span class=\"line\">2446</span><br><span class=\"line\">2447</span><br><span class=\"line\">2448</span><br><span class=\"line\">2449</span><br><span class=\"line\">2450</span><br><span class=\"line\">2451</span><br><span class=\"line\">2452</span><br><span class=\"line\">2453</span><br><span class=\"line\">2454</span><br><span class=\"line\">2455</span><br><span class=\"line\">2456</span><br><span class=\"line\">2457</span><br><span class=\"line\">2458</span><br><span class=\"line\">2459</span><br><span class=\"line\">2460</span><br><span class=\"line\">2461</span><br><span class=\"line\">2462</span><br><span class=\"line\">2463</span><br><span class=\"line\">2464</span><br><span class=\"line\">2465</span><br><span class=\"line\">2466</span><br><span class=\"line\">2467</span><br><span class=\"line\">2468</span><br><span class=\"line\">2469</span><br><span class=\"line\">2470</span><br><span class=\"line\">2471</span><br><span class=\"line\">2472</span><br><span class=\"line\">2473</span><br><span class=\"line\">2474</span><br><span class=\"line\">2475</span><br><span class=\"line\">2476</span><br><span class=\"line\">2477</span><br><span class=\"line\">2478</span><br><span class=\"line\">2479</span><br><span class=\"line\">2480</span><br><span class=\"line\">2481</span><br><span class=\"line\">2482</span><br><span class=\"line\">2483</span><br><span class=\"line\">2484</span><br><span class=\"line\">2485</span><br><span class=\"line\">2486</span><br><span class=\"line\">2487</span><br><span class=\"line\">2488</span><br><span class=\"line\">2489</span><br><span class=\"line\">2490</span><br><span class=\"line\">2491</span><br><span class=\"line\">2492</span><br><span class=\"line\">2493</span><br><span class=\"line\">2494</span><br><span class=\"line\">2495</span><br><span class=\"line\">2496</span><br><span class=\"line\">2497</span><br><span class=\"line\">2498</span><br><span class=\"line\">2499</span><br><span class=\"line\">2500</span><br><span class=\"line\">2501</span><br><span class=\"line\">2502</span><br><span class=\"line\">2503</span><br><span class=\"line\">2504</span><br><span class=\"line\">2505</span><br><span class=\"line\">2506</span><br><span class=\"line\">2507</span><br><span class=\"line\">2508</span><br><span class=\"line\">2509</span><br><span class=\"line\">2510</span><br><span class=\"line\">2511</span><br><span class=\"line\">2512</span><br><span class=\"line\">2513</span><br><span class=\"line\">2514</span><br><span class=\"line\">2515</span><br><span class=\"line\">2516</span><br><span class=\"line\">2517</span><br><span class=\"line\">2518</span><br><span class=\"line\">2519</span><br><span class=\"line\">2520</span><br><span class=\"line\">2521</span><br><span class=\"line\">2522</span><br><span class=\"line\">2523</span><br><span class=\"line\">2524</span><br><span class=\"line\">2525</span><br><span class=\"line\">2526</span><br><span class=\"line\">2527</span><br><span class=\"line\">2528</span><br><span class=\"line\">2529</span><br><span class=\"line\">2530</span><br><span class=\"line\">2531</span><br><span class=\"line\">2532</span><br><span class=\"line\">2533</span><br><span class=\"line\">2534</span><br><span class=\"line\">2535</span><br><span class=\"line\">2536</span><br><span class=\"line\">2537</span><br><span class=\"line\">2538</span><br><span class=\"line\">2539</span><br><span class=\"line\">2540</span><br><span class=\"line\">2541</span><br><span class=\"line\">2542</span><br><span class=\"line\">2543</span><br><span class=\"line\">2544</span><br><span class=\"line\">2545</span><br><span class=\"line\">2546</span><br><span class=\"line\">2547</span><br><span class=\"line\">2548</span><br><span class=\"line\">2549</span><br><span class=\"line\">2550</span><br><span class=\"line\">2551</span><br><span class=\"line\">2552</span><br><span class=\"line\">2553</span><br><span class=\"line\">2554</span><br><span class=\"line\">2555</span><br><span class=\"line\">2556</span><br><span class=\"line\">2557</span><br><span class=\"line\">2558</span><br><span class=\"line\">2559</span><br><span class=\"line\">2560</span><br><span class=\"line\">2561</span><br><span class=\"line\">2562</span><br><span class=\"line\">2563</span><br><span class=\"line\">2564</span><br><span class=\"line\">2565</span><br><span class=\"line\">2566</span><br><span class=\"line\">2567</span><br><span class=\"line\">2568</span><br><span class=\"line\">2569</span><br><span class=\"line\">2570</span><br><span class=\"line\">2571</span><br><span class=\"line\">2572</span><br><span class=\"line\">2573</span><br><span class=\"line\">2574</span><br><span class=\"line\">2575</span><br><span class=\"line\">2576</span><br><span class=\"line\">2577</span><br><span class=\"line\">2578</span><br><span class=\"line\">2579</span><br><span class=\"line\">2580</span><br><span class=\"line\">2581</span><br><span class=\"line\">2582</span><br><span class=\"line\">2583</span><br><span class=\"line\">2584</span><br><span class=\"line\">2585</span><br><span class=\"line\">2586</span><br><span class=\"line\">2587</span><br><span class=\"line\">2588</span><br><span class=\"line\">2589</span><br><span class=\"line\">2590</span><br><span class=\"line\">2591</span><br><span class=\"line\">2592</span><br><span class=\"line\">2593</span><br><span class=\"line\">2594</span><br><span class=\"line\">2595</span><br><span class=\"line\">2596</span><br><span class=\"line\">2597</span><br><span class=\"line\">2598</span><br><span class=\"line\">2599</span><br><span class=\"line\">2600</span><br><span class=\"line\">2601</span><br><span class=\"line\">2602</span><br><span class=\"line\">2603</span><br><span class=\"line\">2604</span><br><span class=\"line\">2605</span><br><span class=\"line\">2606</span><br><span class=\"line\">2607</span><br><span class=\"line\">2608</span><br><span class=\"line\">2609</span><br><span class=\"line\">2610</span><br><span class=\"line\">2611</span><br><span class=\"line\">2612</span><br><span class=\"line\">2613</span><br><span class=\"line\">2614</span><br><span class=\"line\">2615</span><br><span class=\"line\">2616</span><br><span class=\"line\">2617</span><br><span class=\"line\">2618</span><br><span class=\"line\">2619</span><br><span class=\"line\">2620</span><br><span class=\"line\">2621</span><br><span class=\"line\">2622</span><br><span class=\"line\">2623</span><br><span class=\"line\">2624</span><br><span class=\"line\">2625</span><br><span class=\"line\">2626</span><br><span class=\"line\">2627</span><br><span class=\"line\">2628</span><br><span class=\"line\">2629</span><br><span class=\"line\">2630</span><br><span class=\"line\">2631</span><br><span class=\"line\">2632</span><br><span class=\"line\">2633</span><br><span class=\"line\">2634</span><br><span class=\"line\">2635</span><br><span class=\"line\">2636</span><br><span class=\"line\">2637</span><br><span class=\"line\">2638</span><br><span class=\"line\">2639</span><br><span class=\"line\">2640</span><br><span class=\"line\">2641</span><br><span class=\"line\">2642</span><br><span class=\"line\">2643</span><br><span class=\"line\">2644</span><br><span class=\"line\">2645</span><br><span class=\"line\">2646</span><br><span class=\"line\">2647</span><br><span class=\"line\">2648</span><br><span class=\"line\">2649</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t5 10s之后可以在终端1内看到test过期了</span><br><span class=\"line\">\t\t-------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    nfs&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 依赖rpc服务通信 portmap[centos5] 或 rpcbind[centos6]</span><br><span class=\"line\">        yum install nfs-utils portmap    # centos5安装</span><br><span class=\"line\">        yum install nfs-utils rpcbind    # centos6安装</span><br><span class=\"line\"></span><br><span class=\"line\">        vim /etc/exports                 # 配置文件</span><br><span class=\"line\">        # sync                           # 同步写入</span><br><span class=\"line\">        # async                          # 暂存并非直接写入</span><br><span class=\"line\">        # no_root_squash                 # 开放用户端使用root身份操作</span><br><span class=\"line\">        # root_squash                    # 使用者身份为root则被压缩成匿名使用,即nobody,相对安全</span><br><span class=\"line\">        # all_squash                     # 所有NFS的使用者身份都被压缩为匿名</span><br><span class=\"line\">        /data/images 10.10.10.0/24(rw,sync,no_root_squash)</span><br><span class=\"line\"></span><br><span class=\"line\">        service  portmap restart         # 重启centos5的nfs依赖的rpc服务</span><br><span class=\"line\">        service  rpcbind restart         # 重启centos6的nfs依赖的rpc服务</span><br><span class=\"line\">        service  nfs restart             # 重启nfs服务  确保依赖 portmap 或 rpcbind 服务已启动</span><br><span class=\"line\">        service  nfs reload              # 重载NFS服务配置文件</span><br><span class=\"line\">        showmount -e                     # 服务端查看自己共享的服务</span><br><span class=\"line\">        showmount -a                     # 显示已经与客户端连接上的目录信息</span><br><span class=\"line\">        showmount -e 10.10.10.3          # 列出服务端可供使用的NFS共享  客户端测试能否访问nfs服务</span><br><span class=\"line\">        mount -t nfs 10.10.10.3:/data/images/  /data/img   # 挂载nfs  如果延迟影响大加参数 noac</span><br><span class=\"line\"></span><br><span class=\"line\">        # 服务端的 portmap 或 rpcbind 被停止后，nfs仍然工作正常，但是umout财会提示： not found / mounted or server not reachable  重启服务器的portmap 或 rpcbind 也无济于事。 nfs也要跟着重启，否则nfs工作仍然是不正常的。</span><br><span class=\"line\">        # 同时已挂载会造成NFS客户端df卡住和挂载目录无法访问。请先用 mount 查看当前挂载情况，记录挂载信息，在强制卸载挂载目录，重新挂载</span><br><span class=\"line\">        umount -f /data/img/             # 强制卸载挂载目录  如还不可以  umount -l /data/img/</span><br><span class=\"line\"></span><br><span class=\"line\">        nfsstat -c                       # 客户机发送和拒绝的RPC和NFS调用数目的信息</span><br><span class=\"line\">        nfsstat -cn                      # 显示和打印与客户机NFS调用相关的信息</span><br><span class=\"line\">        nfsstat -r                       # 显示和打印客户机和服务器的与RPC调用相关的信息</span><br><span class=\"line\">        nfsstat –s                       # 显示关于服务器接收和拒绝的RPC和NFS调用数目的信息</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    hdfs&#123;</span><br><span class=\"line\">        hdfs --help                  # 所有参数</span><br><span class=\"line\"></span><br><span class=\"line\">        hdfs dfs -help               # 运行文件系统命令在Hadoop文件系统</span><br><span class=\"line\">        hdfs dfs -ls /logs           # 查看</span><br><span class=\"line\">        hdfs dfs -ls /user/          # 查看用户</span><br><span class=\"line\">        hdfs dfs -cat</span><br><span class=\"line\">        hdfs dfs -df</span><br><span class=\"line\">        hdfs dfs -du</span><br><span class=\"line\">        hdfs dfs -rm</span><br><span class=\"line\">        hdfs dfs -tail</span><br><span class=\"line\">        hdfs dfs –put localSrc dest  # 上传文件</span><br><span class=\"line\"></span><br><span class=\"line\">        hdfs dfsadmin -help          # hdfs集群节点管理</span><br><span class=\"line\">        hdfs dfsadmin -report        # 基本的文件系统统计信息</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">5 网络&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    rz                                                                    # 通过ssh上传小文件</span><br><span class=\"line\">    sz                                                                    # 通过ssh下载小文件</span><br><span class=\"line\">    ifconfig eth0 down                                                    # 禁用网卡</span><br><span class=\"line\">    ifconfig eth0 up                                                      # 启用网卡</span><br><span class=\"line\">    ifup eth0:0                                                           # 启用网卡</span><br><span class=\"line\">    mii-tool em1                                                          # 查看网线是否连接</span><br><span class=\"line\">    traceroute www.baidu.com                                              # 测试跳数</span><br><span class=\"line\">    vi /etc/resolv.conf                                                   # 设置DNS  nameserver IP 定义DNS服务器的IP地址</span><br><span class=\"line\">    nslookup www.moon.com                                                 # 解析域名IP</span><br><span class=\"line\">    dig -x www.baidu.com                                                  # 解析域名IP</span><br><span class=\"line\">    dig +trace -t A domainname                                            # 跟踪dns</span><br><span class=\"line\">    dig +short txt hacker.wp.dg.cx                                        # 通过 DNS 来读取 Wikipedia 的hacker词条</span><br><span class=\"line\">    host -t txt hacker.wp.dg.cx                                           # 通过 DNS 来读取 Wikipedia 的hacker词条</span><br><span class=\"line\">    lynx                                                                  # 文本上网</span><br><span class=\"line\">    wget -P path -O name url                                              # 下载  包名:wgetrc   -q 安静 -c 续传</span><br><span class=\"line\">    dhclient eth1                                                         # 自动获取IP</span><br><span class=\"line\">    mtr -r www.baidu.com                                                  # 测试网络链路节点响应时间 # trace ping 结合</span><br><span class=\"line\">    ipcalc -m &quot;$ip&quot; -p &quot;$num&quot;                                             # 根据IP和主机最大数计算掩码</span><br><span class=\"line\">    curl -I www.baidu.com                                                 # 查看网页http头</span><br><span class=\"line\">    curl -s www.baidu.com                                                 # 不显示进度</span><br><span class=\"line\">    queryperf -d list -s DNS_IP -l 2                                      # BIND自带DNS压力测试  [list 文件格式:www.turku.fi A]</span><br><span class=\"line\">    telnet ip port                                                        # 测试端口是否开放,有些服务可直接输入命令得到返回状态</span><br><span class=\"line\">    echo &quot;show &quot; |nc $ip $port                                            # 适用于telnet一类登录得到命令返回</span><br><span class=\"line\">    nc -l -p port                                                         # 监听指定端口</span><br><span class=\"line\">    nc -nv -z 10.10.10.11 1080 |grep succeeded                            # 检查主机端口是否开放</span><br><span class=\"line\">    curl -o /dev/null -s -m 10 --connect-timeout 10 -w %&#123;http_code&#125; $URL  # 检查页面状态</span><br><span class=\"line\">    curl -X POST -d &quot;user=xuesong&amp;pwd=123&quot; http://www.abc.cn/Result       # 提交POST请求</span><br><span class=\"line\">    curl -s http://20140507.ip138.com/ic.asp                              # 通过IP138取本机出口外网IP</span><br><span class=\"line\">    curl http://IP/ -H &quot;X-Forwarded-For: ip&quot; -H &quot;Host: www.ttlsa.com&quot;     # 连到指定IP的响应主机,HTTPserver只看 Host字段</span><br><span class=\"line\">    ifconfig eth0:0 192.168.1.221 netmask 255.255.255.0                   # 增加逻辑IP地址</span><br><span class=\"line\">    echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all                      # 禁ping</span><br><span class=\"line\">    net rpc shutdown -I IP_ADDRESS -U username%password                   # 远程关掉一台WINDOWS机器</span><br><span class=\"line\">    wget --random-wait -r -p -e robots=off -U Mozilla www.example.com     # 递归方式下载整个网站</span><br><span class=\"line\">    sshpass -p &quot;$pwd&quot; rsync -avzP /dir  user@$IP:/dir/                    # 指定密码避免交互同步目录</span><br><span class=\"line\">    rsync -avzP --delete /dir/ user@$IP:/dir/                             # 无差同步目录 可以快速清空大目录,末尾带/同步目录</span><br><span class=\"line\">    rsync -avzP -e &quot;ssh -p 22 -e -o StrictHostKeyChecking=no&quot; /dir user@$IP:/dir         # 指定ssh参数同步</span><br><span class=\"line\">    rsync -rvze &#x27;ssh -p 58022&#x27; ffmpeg@114.55.24.131:/opt/ffmpeg/bin/ /opt/ffmpeg/bin/</span><br><span class=\"line\">    抓包&#123;</span><br><span class=\"line\">        -D                                  # 打印接口</span><br><span class=\"line\">        -i eth1                             # 只抓经过接口eth1的包</span><br><span class=\"line\">        -t                                  # 不显示时间戳</span><br><span class=\"line\">        -s 0                                # 抓取数据包时默认抓取长度为68字节。加上-s 0 后可以抓到完整的数据包</span><br><span class=\"line\">        -c 100                              # 只抓取100个数据包</span><br><span class=\"line\">        dst port ! 22                       # 不抓取目标端口是22的数据包</span><br><span class=\"line\">        tcpdump tcp port 22                 # 抓包</span><br><span class=\"line\">        tcpdump -n -vv udp port 53          # 抓udp的dns包 并显示ip</span><br><span class=\"line\">        tcpdump port 10001 -A -s0           # 完整显示ascii数据包</span><br><span class=\"line\">        tcpdump -i any  host x.x.x.x -s 0 -w /tmp/cap.pcap   # 对端ip</span><br><span class=\"line\">        tcpdump -i any -s 0 host 172.20.81.107 or host 172.16.3.72 -C 50 -W 5 -w /tmp/20190122ng.cap</span><br><span class=\"line\">\t\ttcpdump -A -i ens33 -w pp.txt host www.baidu.com               \t\t# 存储到抓包文件\t-A 查看详细报文</span><br><span class=\"line\">\t\ttcpdump -AS -r pp.txt               \t\t\t\t\t\t\t\t# 查看抓包文件\t\t-S 查看ack绝对值</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t## 1. tcpdump -vvv tcp port 80 -w /tmp/cap.pcap  # 抓取tcp(http)协议且端口为80的数据包并存到cap.pcap</span><br><span class=\"line\">\t## 2. wireshark打开cap.pcap查看数据</span><br><span class=\"line\">\t## 3. 根据域名筛选数据：http.host contains www.macrozheng.com</span><br><span class=\"line\">\t\t\t根据目标ip筛选：ip.addr == 47.95.117.211</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    一次短链接失败故障定位&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # php和python程序调用接口,通过阿里云slb,到后端nginx,偶尔超时,后端nginx无请求,怀疑没到nginx,但通过检查,无法与nginx建立tcp链接</span><br><span class=\"line\">        ss -nl |grep :80  # 查看 accept 队列值,短连接应该大一点</span><br><span class=\"line\">        watch -n 1 &#x27;nstat -z -t 1 | grep -e TcpActiveOpens -e TcpExtListenOverflows -e TcpAttemptFails -e TcpPassiveOpen -e TcpExtTCPSynRetrans -e TcpRetransSegs  -e TcpOutSegs -e TcpInSegs&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">        TcpAttemptFails         TCP建立链接失败,包括前后端</span><br><span class=\"line\">        TcpExtTCPSynRetrans     TCP向后端建立链接失败</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        # nginx 和内核都需要调整才生效,程序监听端口,需要加socket参数</span><br><span class=\"line\">        listen 10.87.128.29:51528 default_server backlog=4096;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        https://m.aliyun.com/yunqi/articles/118472?spm=5176.8091938.0.0.11e86ccF4oOeZ</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    网卡流量查看&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        watch more /proc/net/dev    # 实时监控流量文件系统 累计值</span><br><span class=\"line\">        iptraf                      # 网卡流量查看工具</span><br><span class=\"line\">        nethogs -d 5 eth0 eth1      # 按进程实时统计网络流量 epel源nethogs</span><br><span class=\"line\">        iftop -i eth0 -n -P         # 实时流量监控</span><br><span class=\"line\"></span><br><span class=\"line\">        sar &#123;</span><br><span class=\"line\">            -n参数有6个不同的开关: DEV | EDEV | NFS | NFSD | SOCK | ALL</span><br><span class=\"line\">            DEV显示网络接口信息</span><br><span class=\"line\">            EDEV显示关于网络错误的统计数据</span><br><span class=\"line\">            NFS统计活动的NFS客户端的信息</span><br><span class=\"line\">            NFSD统计NFS服务器的信息</span><br><span class=\"line\">            SOCK显示套 接字信息</span><br><span class=\"line\">            ALL显示所有5个开关</span><br><span class=\"line\"></span><br><span class=\"line\">            sar -n DEV 1 10</span><br><span class=\"line\"></span><br><span class=\"line\">            rxpck/s   # 每秒钟接收的数据包</span><br><span class=\"line\">            txpck/s   # 每秒钟发送的数据包</span><br><span class=\"line\">            rxbyt/s   # 每秒钟接收的字节数</span><br><span class=\"line\">            txbyt/s   # 每秒钟发送的字节数</span><br><span class=\"line\">            rxcmp/s   # 每秒钟接收的压缩数据包</span><br><span class=\"line\">            txcmp/s   # 每秒钟发送的压缩数据包</span><br><span class=\"line\">            rxmcst/s  # 每秒钟接收的多播数据包</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    netstat&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 几十万并发的情况下netstat会没有响应，建议使用 ss 命令</span><br><span class=\"line\">        -a     # 显示所有连接中的Socket</span><br><span class=\"line\">        -t     # 显示TCP连接</span><br><span class=\"line\">        -u     # 显示UDP连接</span><br><span class=\"line\">        -n     # 显示所有已建立的有效连接</span><br><span class=\"line\">        netstat -anlp           # 查看链接</span><br><span class=\"line\">        netstat -tnlp           # 只查看tcp监听端口</span><br><span class=\"line\">        netstat -r              # 查看路由表</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ss&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # netstat是遍历/proc下面每个PID目录，ss直接读/proc/net下面的统计信息。所以ss执行的时候消耗资源以及消耗的时间都比netstat少很多</span><br><span class=\"line\">        ss -s                          # 列出当前socket详细信息</span><br><span class=\"line\">        ss -l                          # 显示本地打开的所有端口</span><br><span class=\"line\">        ss -tnlp                       # 显示每个进程具体打开的socket</span><br><span class=\"line\">        ss -ant                        # 显示所有TCP socket</span><br><span class=\"line\">        ss -u -a                       # 显示所有UDP Socekt</span><br><span class=\"line\">        ss dst 192.168.119.113         # 匹配远程地址</span><br><span class=\"line\">        ss dst 192.168.119.113:http    # 匹配远程地址和端口号</span><br><span class=\"line\">        ss dst 192.168.119.113:3844    # 匹配远程地址和端口号</span><br><span class=\"line\">        ss src 192.168.119.103:16021   # 匹配本地地址和端口号</span><br><span class=\"line\">        ss -o state established &#x27;( dport = :smtp or sport = :smtp )&#x27;        # 显示所有已建立的SMTP连接</span><br><span class=\"line\">        ss -o state established &#x27;( dport = :http or sport = :http )&#x27;        # 显示所有已建立的HTTP连接</span><br><span class=\"line\">        ss -x src /tmp/.X11-unix/*         # 找出所有连接X服务器的进程</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    并发数查看&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        netstat -n | awk &#x27;/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;&#x27;</span><br><span class=\"line\">        SYN_RECV     # 正在等待处理的请求</span><br><span class=\"line\">        ESTABLISHED  # 正常数据传输状态,既当前并发数</span><br><span class=\"line\">        TIME_WAIT    # 处理完毕，等待超时结束的请求</span><br><span class=\"line\">        CLOSE_WAIT   # 客户端异常关闭,没有完成4次挥手  如大量可能存在攻击行为</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssh&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ssh -p 22 user@192.168.1.209                            # 从linux ssh登录另一台linux</span><br><span class=\"line\">        ssh -p 22 root@192.168.1.209 CMD                        # 利用ssh操作远程主机</span><br><span class=\"line\">        scp -P 22 file root@ip:/dir                             # 把本地文件拷贝到远程主机</span><br><span class=\"line\">        scp -l 100000  file root@ip:/dir                        # 传输文件到远程，限制速度100M</span><br><span class=\"line\">        sshpass -p &#x27;pwd&#x27; ssh -n root@$IP &quot;echo hello&quot;           # 指定密码远程操作</span><br><span class=\"line\">        ssh -o StrictHostKeyChecking=no $IP                     # ssh连接不提示yes</span><br><span class=\"line\">        ssh -t &quot;su -&quot;                                           # 指定伪终端 客户端以交互模式工作</span><br><span class=\"line\">        scp root@192.168.1.209:/RemoteDir /localDir             # 把远程指定文件拷贝到本地</span><br><span class=\"line\">        pscp -h host.ip /a.sh /opt/sbin/                        # 批量传输文件</span><br><span class=\"line\">        ssh -N -L2001:remotehost:80 user@somemachine            # 用SSH创建端口转发通道</span><br><span class=\"line\">        ssh -t host_A ssh host_B                                # 嵌套使用SSH</span><br><span class=\"line\">        ssh -t -p 22 $user@$Ip /bin/su - root -c &#123;$Cmd&#125;;        # 远程su执行命令 Cmd=&quot;\\&quot;/sbin/ifconfig eth0\\&quot;&quot;</span><br><span class=\"line\">        ssh-keygen -t rsa                                       # 生成密钥</span><br><span class=\"line\">        ssh-copy-id -i xuesong@10.10.10.133                     # 传送key</span><br><span class=\"line\">        vi $HOME/.ssh/authorized_keys                           # 公钥存放位置</span><br><span class=\"line\">        sshfs name@server:/path/to/folder /path/to/mount/point  # 通过ssh挂载远程主机上的文件夹</span><br><span class=\"line\">        fusermount -u /path/to/mount/point                      # 卸载ssh挂载的目录</span><br><span class=\"line\">        ssh user@host cat /path/to/remotefile | diff /path/to/localfile -                # 用DIFF对比远程文件跟本地文件</span><br><span class=\"line\">        su - user -c &quot;ssh user@192.168.1.1 \\&quot;echo -e aa |mail -s test mail@163.com\\&quot;&quot;    # 切换用户登录远程发送邮件</span><br><span class=\"line\">        pssh -h ip.txt -i uptime                                # 批量执行ssh yum install pssh</span><br><span class=\"line\"></span><br><span class=\"line\">        SSH反向连接&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            # 外网A要控制内网B</span><br><span class=\"line\"></span><br><span class=\"line\">            ssh -NfR 1234:localhost:2223 user1@123.123.123.123 -p22    # 将A主机的1234端口和B主机的2223端口绑定，相当于远程端口映射</span><br><span class=\"line\">            ss -ant   # 这时在A主机上sshd会listen本地1234端口</span><br><span class=\"line\">            # LISTEN     0    128    127.0.0.1:1234       *:*</span><br><span class=\"line\">            ssh localhost -p1234    # 在A主机连接本地1234端口</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    网卡配置文件&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        vi /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class=\"line\"></span><br><span class=\"line\">        DEVICE=eth0</span><br><span class=\"line\">        BOOTPROTO=none</span><br><span class=\"line\">        BROADCAST=192.168.1.255</span><br><span class=\"line\">        HWADDR=00:0C:29:3F:E1:EA</span><br><span class=\"line\">        IPADDR=192.168.1.55</span><br><span class=\"line\">        NETMASK=255.255.255.0</span><br><span class=\"line\">        NETWORK=192.168.1.0</span><br><span class=\"line\">        ONBOOT=yes</span><br><span class=\"line\">        TYPE=Ethernet</span><br><span class=\"line\">        GATEWAY=192.168.1.1</span><br><span class=\"line\">        #ARPCHECK=no     # 进制arp检查</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    route &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        route                           # 查看路由表</span><br><span class=\"line\">        route add default  gw 192.168.1.1  dev eth0                        # 添加默认路由</span><br><span class=\"line\">        route add -net 172.16.0.0 netmask 255.255.0.0 gw 10.39.111.254     # 添加静态路由网关</span><br><span class=\"line\">        route del -net 172.16.0.0 netmask 255.255.0.0 gw 10.39.111.254     # 删除静态路由网关</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    静态路由&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        vim /etc/sysconfig/static-routes</span><br><span class=\"line\">        any net 192.168.12.0/24 gw 192.168.0.254</span><br><span class=\"line\">        any net 192.168.13.0/24 gw 192.168.0.254</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    解决ssh链接慢&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        sed -i &#x27;s/GSSAPIAuthentication yes/GSSAPIAuthentication no/&#x27; /etc/ssh/sshd_config</span><br><span class=\"line\">        sed -i &#x27;/#UseDNS yes/a\\UseDNS no&#x27; /etc/ssh/sshd_config</span><br><span class=\"line\">        /etc/init.d/sshd reload</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    nmap&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        nmap -PT 192.168.1.1-111             # 先ping在扫描主机开放端口</span><br><span class=\"line\">        nmap -O 192.168.1.1                  # 扫描出系统内核版本</span><br><span class=\"line\">        nmap -sV 192.168.1.1-111             # 扫描端口的软件版本</span><br><span class=\"line\">        nmap -sS 192.168.1.1-111             # 半开扫描(通常不会记录日志)</span><br><span class=\"line\">        nmap -P0 192.168.1.1-111             # 不ping直接扫描</span><br><span class=\"line\">        nmap -d 192.168.1.1-111              # 详细信息</span><br><span class=\"line\">        nmap -D 192.168.1.1-111              # 无法找出真正扫描主机(隐藏IP)</span><br><span class=\"line\">        nmap -p 20-30,139,60000-             # 端口范围  表示：扫描20到30号端口，139号端口以及所有大于60000的端口</span><br><span class=\"line\">        nmap -P0 -sV -O -v 192.168.30.251    # 组合扫描(不ping、软件版本、内核版本、详细信息)</span><br><span class=\"line\"></span><br><span class=\"line\">        # 不支持windows的扫描(可用于判断是否是windows)</span><br><span class=\"line\">        nmap -sF 192.168.1.1-111</span><br><span class=\"line\">        nmap -sX 192.168.1.1-111</span><br><span class=\"line\">        nmap -sN 192.168.1.1-111</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    流量切分线路&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 程序判断进入IP线路，设置服务器路由规则控制返回</span><br><span class=\"line\">        vi /etc/iproute2/rt_tables</span><br><span class=\"line\">        #添加一条策略</span><br><span class=\"line\">        252   bgp2  #注意策略的序号顺序</span><br><span class=\"line\">        ip route add default via 第二个出口上线IP(非默认网关) dev eth1 table bgp2</span><br><span class=\"line\">        ip route add from 本机第二个ip table bgp2</span><br><span class=\"line\">        #查看</span><br><span class=\"line\">        ip route list table 252</span><br><span class=\"line\">        ip rule list</span><br><span class=\"line\">        #成功后将语句添加开机启动</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    snmp&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        snmptranslate .1.3.6.1.2.1.1.3.0    # 查看映射关系</span><br><span class=\"line\">            DISMAN-EVENT-MIB::sysUpTimeInstance</span><br><span class=\"line\">        snmpdf -v 1 -c public localhost                            # SNMP监视远程主机的磁盘空间</span><br><span class=\"line\">        snmpnetstat -v 2c -c public -a 192.168.6.53                # SNMP获取指定IP的所有开放端口状态</span><br><span class=\"line\">        snmpwalk -v 2c -c public 10.152.14.117 .1.3.6.1.2.1.1.3.0  # SNMP获取主机启动时间</span><br><span class=\"line\">        # MIB安装(ubuntu)</span><br><span class=\"line\">        # sudo apt-get install snmp-mibs-downloader</span><br><span class=\"line\">        # sudo download-mibs</span><br><span class=\"line\">        snmpwalk -v 2c -c public 10.152.14.117 sysUpTimeInstance   # SNMP通过MIB库获取主机启动时间</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    TC流量控制&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 针对ip段下载速率控制</span><br><span class=\"line\">        tc qdisc del dev eth0 root handle 1:                                                              # 删除控制1:</span><br><span class=\"line\">        tc qdisc add dev eth0 root handle 1: htb r2q 1                                                    # 添加控制1:</span><br><span class=\"line\">        tc class add dev eth0 parent 1: classid 1:1 htb rate 12mbit ceil 15mbit                           # 设置速率</span><br><span class=\"line\">        tc filter add dev eth0 parent 1: protocol ip prio 16 u32 match ip dst 10.10.10.1/24 flowid 1:1    # 指定ip段控制规则</span><br><span class=\"line\"></span><br><span class=\"line\">        # 检查命令</span><br><span class=\"line\">        tc -s -d qdisc show dev eth0</span><br><span class=\"line\">        tc class show dev eth0</span><br><span class=\"line\">        tc filter show dev eth0</span><br><span class=\"line\"></span><br><span class=\"line\">        限制上传下载&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            tc qdisc del dev tun0 root</span><br><span class=\"line\">            tc qdisc add dev tun0 root handle 2:0 htb</span><br><span class=\"line\">            tc class add dev tun0 parent 2:1 classid 2:10 htb rate 30kbps</span><br><span class=\"line\">            tc class add dev tun0 parent 2:2 classid 2:11 htb rate 30kbps</span><br><span class=\"line\">            tc qdisc add dev tun0 parent 2:10 handle 1: sfq perturb 1</span><br><span class=\"line\">            tc filter add dev tun0 protocol ip parent 2:0 u32 match ip dst 10.18.0.0/24 flowid 2:10</span><br><span class=\"line\">            tc filter add dev tun0 parent ffff: protocol ip u32 match ip src 10.18.0.0/24 police rate 30kbps burst 10k drop flowid 2:11</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            tc qdisc del dev tun0 root                                     # 删除原有策略</span><br><span class=\"line\">            tc qdisc add dev tun0 root handle 2:0 htb                      # 定义最顶层(根)队列规则，并指定 default 类别编号，为网络接口 eth1 绑定一个队列，类型为 htb，并指定了一个 handle 句柄 2:0 用于标识它下面的子类</span><br><span class=\"line\">            tc class add dev tun0 parent 2:1 classid 2:10 htb rate 30kbps  # 设置一个规则速度是30kbps</span><br><span class=\"line\">            tc class add dev tun0 parent 2:2 classid 2:11 htb rate 30kbps</span><br><span class=\"line\">            tc qdisc add dev tun0 parent 2:10 handle 1: sfq perturb 1      # 调用随机公平算法</span><br><span class=\"line\">            tc filter add dev tun0 protocol ip parent 2:0 u32 match ip dst 10.18.0.0/24 flowid 2:10  # 规则2:10应用在目标地址上，即下载</span><br><span class=\"line\">            tc filter add dev tun0 parent ffff: protocol ip u32 match ip src 10.18.0.0/24 police rate 30kbps burst 10k drop flowid 2:11 # 上传限速</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">6 磁盘&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    df -Ph                                          # 查看硬盘容量</span><br><span class=\"line\">    df -T                                           # 查看磁盘分区格式</span><br><span class=\"line\">    df -i                                           # 查看inode节点   如果inode用满后无法创建文件</span><br><span class=\"line\">    du -h dir                                       # 检测目录下所有文件大小</span><br><span class=\"line\">    du -sh *                                        # 显示当前目录中子目录的大小</span><br><span class=\"line\">    mount -l                                        # 查看分区挂载情况</span><br><span class=\"line\">    fdisk -l                                        # 查看磁盘分区状态</span><br><span class=\"line\">    fdisk /dev/hda3                                 # 分区</span><br><span class=\"line\">    mkfs -t ext4  /dev/hda3                         # 格式化分区</span><br><span class=\"line\">    fsck -y /dev/sda6                               # 对文件系统修复</span><br><span class=\"line\">    lsof |grep delete                               # 释放进程占用磁盘空间  列出进程后，查看文件是否存在，不存在则kill掉此进程</span><br><span class=\"line\">    tmpwatch -afv 10   /tmp                         # 删除10小时内未使用的文件  勿在重要目录使用</span><br><span class=\"line\">    cat /proc/filesystems                           # 查看当前系统支持文件系统</span><br><span class=\"line\">    mount -o remount,rw /                           # 修改只读文件系统为读写</span><br><span class=\"line\">    iotop                                           # 进程占用磁盘IO情况   yum install iotop</span><br><span class=\"line\">    smartctl -H /dev/sda                            # 检测硬盘状态  # yum install smartmontools</span><br><span class=\"line\">    smartctl -i /dev/sda                            # 检测硬盘信息</span><br><span class=\"line\">    smartctl -a /dev/sda                            # 检测所有信息</span><br><span class=\"line\">    e2label /dev/sda5                               # 查看卷标</span><br><span class=\"line\">    e2label /dev/sda5 new-label                     # 创建卷标</span><br><span class=\"line\">    ntfslabel -v /dev/sda8 new-label                # NTFS添加卷标</span><br><span class=\"line\">    tune2fs -j /dev/sda                             # ext2分区转ext3分区</span><br><span class=\"line\">    tune2fs -l /dev/sda                             # 查看文件系统信息</span><br><span class=\"line\">    mke2fs -b 2048 /dev/sda5                        # 指定索引块大小</span><br><span class=\"line\">    dumpe2fs -h /dev/sda5                           # 查看超级块的信息</span><br><span class=\"line\">    mount -t iso9660 /dev/dvd  /mnt                 # 挂载光驱</span><br><span class=\"line\">    mount -t ntfs-3g /dev/sdc1 /media/yidong        # 挂载ntfs硬盘</span><br><span class=\"line\">    mount -t nfs 10.0.0.3:/opt/images/  /data/img   # 挂载nfs 需要重载 /etc/init.d/nfs reload  重启需要先启动 portmap 服务</span><br><span class=\"line\">    mount -o loop  /software/rhel4.6.iso   /mnt/    # 挂载镜像文件</span><br><span class=\"line\"></span><br><span class=\"line\">    磁盘IO性能检测&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        iostat -x 1 10</span><br><span class=\"line\"></span><br><span class=\"line\">        % user       # 显示了在用户级(应用程序)执行时生成的 CPU 使用率百分比。</span><br><span class=\"line\">        % system     # 显示了在系统级(内核)执行时生成的 CPU 使用率百分比。</span><br><span class=\"line\">        % idle       # 显示了在 CPU 空闲并且系统没有未完成的磁盘 I/O 请求时的时间百分比。</span><br><span class=\"line\">        % iowait     # 显示了 CPU 空闲期间系统有未完成的磁盘 I/O 请求时的时间百分比。</span><br><span class=\"line\"></span><br><span class=\"line\">        rrqm/s       # 每秒进行 merge 的读操作数目。即 delta(rmerge)/s</span><br><span class=\"line\">        wrqm/s       # 每秒进行 merge 的写操作数目。即 delta(wmerge)/s</span><br><span class=\"line\">        r/s          # 每秒完成的读 I/O 设备次数。即 delta(rio)/s</span><br><span class=\"line\">        w/s          # 每秒完成的写 I/O 设备次数。即 delta(wio)/s</span><br><span class=\"line\">        rsec/s       # 每秒读扇区数。即 delta(rsect)/s</span><br><span class=\"line\">        wsec/s       # 每秒写扇区数。即 delta(wsect)/s</span><br><span class=\"line\">        rkB/s        # 每秒读K字节数。是 rsect/s 的一半，因为每扇区大小为512字节。(需要计算)</span><br><span class=\"line\">        wkB/s        # 每秒写K字节数。是 wsect/s 的一半。(需要计算)</span><br><span class=\"line\">        avgrq-sz     # 平均每次设备I/O操作的数据大小 (扇区)。delta(rsect+wsect)/delta(rio+wio)</span><br><span class=\"line\">        avgqu-sz     # 平均I/O队列长度。即 delta(aveq)/s/1000 (因为aveq的单位为毫秒)。</span><br><span class=\"line\">        await        # 平均每次设备I/O操作的等待时间 (毫秒)。即 delta(ruse+wuse)/delta(rio+wio)</span><br><span class=\"line\">        svctm        # 平均每次设备I/O操作的服务时间 (毫秒)。即 delta(use)/delta(rio+wio)</span><br><span class=\"line\">        %util        # 一秒中有百分之多少的时间用于 I/O 操作，或者说一秒中有多少时间 I/O 队列是非空的。即 delta(use)/s/1000 (因为use的单位为毫秒)</span><br><span class=\"line\"></span><br><span class=\"line\">        IO性能衡量标准&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            1、 如果 %util 接近 100%，说明产生的I/O请求太多，I/O系统已经满负荷，该磁盘可能存在瓶颈。</span><br><span class=\"line\">            2、 idle 小于70% IO压力就较大了,一般读取速度有较多的wait.</span><br><span class=\"line\">            3、 同时可以结合 vmstat 查看查看b参数(等待资源的进程数)和wa参数(IO等待所占用的CPU时间的百分比,高过30%时IO压力高)</span><br><span class=\"line\">            4、 svctm 一般要小于 await (因为同时等待的请求的等待时间被重复计算了),svctm 的大小一般和磁盘性能有关,CPU/内存的负荷也会对其有影响,请求过多也会间接导致 svctm 的增加. await 的大小一般取决于服务时间(svctm) 以及 I/O 队列的长度和 I/O 请求的发出模式. 如果 svctm 比较接近 await,说明 I/O 几乎没有等待时间;如果 await 远大于 svctm,说明 I/O 队列太长,应用得到的响应时间变慢,如果响应时间超过了用户可以容许的范围,这时可以考虑更换更快的磁盘,调整内核 elevator 算法,优化应用,或者升级 CPU</span><br><span class=\"line\">            5、 队列长度(avgqu-sz)也可作为衡量系统 I/O 负荷的指标，但由于 avgqu-sz 是按照单位时间的平均值，所以不能反映瞬间的 I/O 洪水。</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    iotop&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 监视进程磁盘I/O</span><br><span class=\"line\"></span><br><span class=\"line\">        yum install iotop</span><br><span class=\"line\"></span><br><span class=\"line\">        -o        # 只显示有io操作的进程</span><br><span class=\"line\">        -b        # 批量显示，无交互，主要用作记录到文件。</span><br><span class=\"line\">        -n NUM    # 显示NUM次，主要用于非交互式模式。</span><br><span class=\"line\">        -d SEC    # 间隔SEC秒显示一次。</span><br><span class=\"line\">        -p PID    # 监控的进程pid。</span><br><span class=\"line\">        -u USER   # 监控的进程用户。</span><br><span class=\"line\"></span><br><span class=\"line\">        # 左右箭头：改变排序方式，默认是按IO排序。</span><br><span class=\"line\">        r         # 改变排序顺序。</span><br><span class=\"line\">        o         # 只显示有IO输出的进程。</span><br><span class=\"line\">        p         # 进程/线程的显示方式的切换。</span><br><span class=\"line\">        a         # 显示累积使用量。</span><br><span class=\"line\">        q         # 退出。</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    创建swap文件方法&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        dd if=/dev/zero of=/swap bs=1024 count=4096000            # 创建一个足够大的文件</span><br><span class=\"line\">        # count的值等于1024 x 你想要的文件大小, 4096000是4G</span><br><span class=\"line\">        mkswap /swap                      # 把这个文件变成swap文件</span><br><span class=\"line\">        swapon /swap                      # 启用这个swap文件</span><br><span class=\"line\">        /swap swap swap defaults 0 0      # 在每次开机的时候自动加载swap文件, 需要在 /etc/fstab 文件中增加一行</span><br><span class=\"line\">        cat /proc/swaps                   # 查看swap</span><br><span class=\"line\">        swapoff -a                        # 关闭swap</span><br><span class=\"line\">        swapon -a                         # 开启swap</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    新硬盘挂载&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        fdisk /dev/sdc</span><br><span class=\"line\">        p    #  打印分区</span><br><span class=\"line\">        d    #  删除分区</span><br><span class=\"line\">        n    #  创建分区，（一块硬盘最多4个主分区，扩展占一个主分区位置。p主分区 e扩展）</span><br><span class=\"line\">        w    #  保存退出</span><br><span class=\"line\">        mkfs.ext4 -L 卷标  /dev/sdc1            # 格式化相应分区</span><br><span class=\"line\">        mount /dev/sdc1  /mnt                  # 挂载</span><br><span class=\"line\">        vi /etc/fstab                          # 添加开机挂载分区</span><br><span class=\"line\">        LABEL=/data            /data                   ext4    defaults        1 2      # 用卷标挂载</span><br><span class=\"line\">        /dev/sdb1              /data4                  ext4    defaults        1 2      # 用真实分区挂载</span><br><span class=\"line\">        /dev/sdb2              /data4                  ext4    noatime,defaults        1 2</span><br><span class=\"line\"></span><br><span class=\"line\">        第一个数字&quot;1&quot;该选项被&quot;dump&quot;命令使用来检查一个文件系统应该以多快频率进行转储，若不需要转储就设置该字段为0</span><br><span class=\"line\">        第二个数字&quot;2&quot;该字段被fsck命令用来决定在启动时需要被扫描的文件系统的顺序，根文件系统&quot;/&quot;对应该字段的值应该为1，其他文件系统应该为2。若该文件系统无需在启动时扫描则设置该字段为0</span><br><span class=\"line\">        当以 noatime 选项加载（mount）文件系统时，对文件的读取不会更新文件属性中的atime信息。设置noatime的重要性是消除了文件系统对文件的写操作，文件只是简单地被系统读取。由于写操作相对读来说要更消耗系统资源，所以这样设置可以明显提高服务器的性能.wtime信息仍然有效，任何时候文件被写，该信息仍被更新。</span><br><span class=\"line\"></span><br><span class=\"line\">        mount -a    # 自动加载 fstab 文件挂载，避免配置错误，系统无法重启</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    大磁盘2T和16T分区&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        parted /dev/sdb                # 针对磁盘分区</span><br><span class=\"line\">        (parted) mklabel gpt           # 设置为 gpt</span><br><span class=\"line\">        (parted) print</span><br><span class=\"line\">        (parted) mkpart  primary 0KB 22.0TB        # 指定分区大小</span><br><span class=\"line\">        Is this still acceptable to you?</span><br><span class=\"line\">        Yes/No? Yes</span><br><span class=\"line\">        Ignore/Cancel? Ignore</span><br><span class=\"line\">        (parted) print</span><br><span class=\"line\">        Model: LSI MR9271-8i (scsi)</span><br><span class=\"line\">        Disk /dev/sdb: 22.0TB</span><br><span class=\"line\">        Sector size (logical/physical): 512B/512B</span><br><span class=\"line\">        Partition Table: gpt</span><br><span class=\"line\">        Number  Start   End     Size    File system  Name     Flags</span><br><span class=\"line\">         1      17.4kB  22.0TB  22.0TB               primary</span><br><span class=\"line\">        (parted) quit</span><br><span class=\"line\"></span><br><span class=\"line\">        mkfs.ext4 /dev/sdb1        # e2fsprogs升级后支持大于16T硬盘</span><br><span class=\"line\"></span><br><span class=\"line\">        # 大于16T的单个分区ext4格式化报错，需要升级e2fsprogs</span><br><span class=\"line\">        Size of device /dev/sdb1 too big to be expressed in 32 bits using a blocksize of 4096.</span><br><span class=\"line\"></span><br><span class=\"line\">        yum -y install xfsprogs</span><br><span class=\"line\">        mkfs.xfs -f /dev/sdb1              # 大于16T单个分区也可以使用XFS分区,但inode占用很大,对大量的小文件支持不太好</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    阿里云扩容磁盘&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 进入ECS 本实例磁盘，勾选在线扩容, 选择扩容磁盘</span><br><span class=\"line\">        yum install cloud-utils-growpart</span><br><span class=\"line\">        yum install xfsprogs</span><br><span class=\"line\">        df -h    # 查看目前分区大小</span><br><span class=\"line\">        fdisk -l # 查看磁盘设备</span><br><span class=\"line\">        growpart /dev/vda 1         # 扩容分区 如果没有分区,默认整块,不需要执行</span><br><span class=\"line\">        resize2fs /dev/vda1         # 扩容文件系统 ext4文件系统 </span><br><span class=\"line\">        xfs_growfs /dev/vda1        # 扩容文件系统 xfs文件系统</span><br><span class=\"line\">        df -h                       # 再查看分区大小,是否扩容</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    raid原理与区别&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        raid0至少2块硬盘.吞吐量大,性能好,同时读写,但损坏一个就完蛋</span><br><span class=\"line\">        raid1至少2块硬盘.相当镜像,一个存储,一个备份.安全性比较高.但是性能比0弱</span><br><span class=\"line\">        raid5至少3块硬盘.分别存储校验信息和数据，坏了一个根据校验信息能恢复</span><br><span class=\"line\">        raid6至少4块硬盘.两个独立的奇偶系统,可坏两块磁盘,写性能非常差</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">7 用户&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    users                                      # 显示所有的登录用户</span><br><span class=\"line\">    groups                                     # 列出当前用户和他所属的组</span><br><span class=\"line\">    who -q                                     # 显示所有的登录用户</span><br><span class=\"line\">    groupadd                                   # 添加组</span><br><span class=\"line\">    useradd user                               # 建立用户</span><br><span class=\"line\">    passwd username                            # 修改密码</span><br><span class=\"line\">    userdel -r                                 # 删除帐号及家目录</span><br><span class=\"line\">    chown -R user:group                        # 修改目录拥有者(R递归)</span><br><span class=\"line\">    chown y\\.li:mysql                          # 修改所有者用户中包含点&quot;.&quot;</span><br><span class=\"line\">    umask                                      # 设置用户文件和目录的文件创建缺省屏蔽值</span><br><span class=\"line\">    chgrp                                      # 修改用户组</span><br><span class=\"line\">    finger                                     # 查找用户显示信息</span><br><span class=\"line\">    echo &quot;xuesong&quot; | passwd user --stdin       # 非交互修改密码</span><br><span class=\"line\">    useradd -g www -M  -s /sbin/nologin  www   # 指定组并不允许登录的用户,nologin允许使用服务</span><br><span class=\"line\">    useradd -g www -M  -s /bin/false  www      # 指定组并不允许登录的用户,false最为严格</span><br><span class=\"line\">    useradd -d /data/song -g song song         # 创建用户并指定家目录和组</span><br><span class=\"line\">    usermod -l newuser olduser                 # 修改用户名</span><br><span class=\"line\">    usermod -g user group                      # 修改用户所属组</span><br><span class=\"line\">    usermod -d dir -m user                     # 修改用户家目录</span><br><span class=\"line\">    usermod -G group user                      # 将用户添加到附加组</span><br><span class=\"line\">    gpasswd -d user group                      # 从组中删除用户</span><br><span class=\"line\">    su - user -c &quot; #cmd1; &quot;                    # 切换用户执行</span><br><span class=\"line\"></span><br><span class=\"line\">    恢复密码&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 即进入单用户模式: 在linux出现grub后，在安装的系统上面按&quot;e&quot;，然后出现grub的配置文件，按键盘移动光标到第二行&quot;Ker……&quot;，再按&quot;e&quot;，然后在这一行的结尾加上：空格 single或者空格1回车，然后按&quot;b&quot;重启，就进入了&quot;单用户模式&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    特殊权限&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        s或 S （SUID）：对应数值4</span><br><span class=\"line\">        s或 S （SGID）：对应数值2</span><br><span class=\"line\">        t或 T ：对应数值1</span><br><span class=\"line\">        大S：代表拥有root权限，但是没有执行权限</span><br><span class=\"line\">        小s：拥有特权且拥有执行权限，这个文件可以访问系统任何root用户可以访问的资源</span><br><span class=\"line\">        T或T（Sticky）：/tmp和 /var/tmp目录供所有用户暂时存取文件，亦即每位用户皆拥有完整的权限进入该目录，去浏览、删除和移动文件</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">8 脚本&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    #!/bin/sh                             # 在脚本第一行脚本头 # sh为当前系统默认shell,可指定为bash等shell</span><br><span class=\"line\">    shopt                                 # 显示和设置shell中的行为选项</span><br><span class=\"line\">    sh -x                                 # 执行过程</span><br><span class=\"line\">    sh -n                                 # 检查语法</span><br><span class=\"line\">    set -e                                # 若指令传回值不等于0，则立即退出shell</span><br><span class=\"line\">    (a=bbk)                               # 括号创建子shell运行</span><br><span class=\"line\">    basename /a/b/c                       # 从全路径中保留最后一层文件名或目录</span><br><span class=\"line\">    dirname                               # 取路径</span><br><span class=\"line\">    $RANDOM                               # 随机数</span><br><span class=\"line\">    $$                                    # 进程号</span><br><span class=\"line\">    source FileName                       # 在当前bash环境下读取并执行FileName中的命令  # 等同 . FileName</span><br><span class=\"line\">    sleep 5                               # 间隔睡眠5秒</span><br><span class=\"line\">    trap                                  # 在接收到信号后将要采取的行动</span><br><span class=\"line\">    trap &quot;&quot; 2 3                           # 禁止ctrl+c</span><br><span class=\"line\">    $PWD                                  # 当前目录</span><br><span class=\"line\">    $HOME                                 # 家目录</span><br><span class=\"line\">    $OLDPWD                               # 之前一个目录的路径</span><br><span class=\"line\">    cd -                                  # 返回上一个目录路径</span><br><span class=\"line\">    local ret                             # 局部变量</span><br><span class=\"line\">    yes                                   # 重复打印</span><br><span class=\"line\">    yes |rm -i *                          # 自动回答y或者其他</span><br><span class=\"line\">    ls -p /home                           # 区分目录和文件夹</span><br><span class=\"line\">    ls -d /home/                          # 查看匹配完整路径</span><br><span class=\"line\">    time a.sh                             # 测试程序执行时间</span><br><span class=\"line\">    echo -n aa;echo bb                    # 不换行执行下一句话 将字符串原样输出</span><br><span class=\"line\">    echo -e &quot;s\\tss\\n\\n\\n&quot;                 # 使转义生效</span><br><span class=\"line\">    echo $a | cut -c2-6                   # 取字符串中字元</span><br><span class=\"line\">    echo &#123;a,b,c&#125;&#123;a,b,c&#125;&#123;a,b,c&#125;            # 排列组合(括号内一个元素分别和其他括号内元素组合)</span><br><span class=\"line\">    echo $((2#11010))                     # 二进制转10进制</span><br><span class=\"line\">    echo aaa | tee file                   # 打印同时写入文件 默认覆盖 -a追加</span><br><span class=\"line\">    echo &#123;1..10&#125;                          # 打印10个字符</span><br><span class=\"line\">    printf &#x27;%10s\\n&#x27;|tr &quot; &quot; a              # 打印10个字符</span><br><span class=\"line\">    pwd | awk -F/ &#x27;&#123; print $2 &#125;&#x27;          # 返回目录名</span><br><span class=\"line\">    tac file |sed 1,3d|tac                # 倒置读取文件  # 删除最后3行</span><br><span class=\"line\">    tail -3 file                          # 取最后3行</span><br><span class=\"line\">    outtmp=/tmp/$$`date +%s%N`.outtmp     # 临时文件定义</span><br><span class=\"line\">    :()&#123; :|:&amp; &#125;;:                         # fork炸弹,系统执行海量的进程,直到系统僵死</span><br><span class=\"line\">    echo -e &quot;\\e[32mcolour\\e[0m&quot;           # 打印颜色</span><br><span class=\"line\">    echo -e &quot;\\033[32mcolour\\033[m&quot;        # 打印颜色</span><br><span class=\"line\">    echo -e &quot;\\033[0;31mL\\033[0;32mO\\033[0;33mV\\033[0;34mE\\t\\033[0;35mY\\033[0;36mO\\033[0;32mU\\e[m&quot;    # 打印颜色</span><br><span class=\"line\"></span><br><span class=\"line\">    正则表达式&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ^                       # 行首定位</span><br><span class=\"line\">        $                       # 行尾定位</span><br><span class=\"line\">        .                       # 匹配除换行符以外的任意字符</span><br><span class=\"line\">        *                       # 匹配0或多个重复字符</span><br><span class=\"line\">        +                       # 重复一次或更多次</span><br><span class=\"line\">        ?                       # 重复零次或一次</span><br><span class=\"line\">        ?                       # 结束贪婪因子 .*? 表示最小匹配</span><br><span class=\"line\">        []                      # 匹配一组中任意一个字符</span><br><span class=\"line\">        [^]                     # 匹配不在指定组内的字符</span><br><span class=\"line\">        \\                       # 用来转义元字符</span><br><span class=\"line\">        &lt;                       # 词首定位符(支持vi和grep)  &lt;love</span><br><span class=\"line\">        &gt;                       # 词尾定位符(支持vi和grep)  love&gt;</span><br><span class=\"line\">        x\\&#123;m\\&#125;                  # 重复出现m次</span><br><span class=\"line\">        x\\&#123;m,\\&#125;                 # 重复出现至少m次</span><br><span class=\"line\">        x\\&#123;m,n\\&#125;                # 重复出现至少m次不超过n次</span><br><span class=\"line\">        X?                      # 匹配出现零次或一次的大写字母 X</span><br><span class=\"line\">        X+                      # 匹配一个或多个字母 X</span><br><span class=\"line\">        ()                      # 括号内的字符为一组</span><br><span class=\"line\">        (ab|de)+                # 匹配一连串的（最少一个） abc 或 def；abc 和 def 将匹配</span><br><span class=\"line\">        [[:alpha:]]             # 代表所有字母不论大小写</span><br><span class=\"line\">        [[:lower:]]             # 表示小写字母</span><br><span class=\"line\">        [[:upper:]]             # 表示大写字母</span><br><span class=\"line\">        [[:digit:]]             # 表示数字字符</span><br><span class=\"line\">        [[:digit:][:lower:]]    # 表示数字字符加小写字母</span><br><span class=\"line\"></span><br><span class=\"line\">        元字符&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            \\d       # 匹配任意一位数字</span><br><span class=\"line\">            \\D       # 匹配任意单个非数字字符</span><br><span class=\"line\">            \\w       # 匹配任意单个字母数字下划线字符，同义词是 [:alnum:]</span><br><span class=\"line\">            \\W       # 匹配非数字型的字符</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        字符类:空白字符&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            \\s       # 匹配任意的空白符</span><br><span class=\"line\">            \\S       # 匹配非空白字符</span><br><span class=\"line\">            \\b       # 匹配单词的开始或结束</span><br><span class=\"line\">            \\n       # 匹配换行符</span><br><span class=\"line\">            \\r       # 匹配回车符</span><br><span class=\"line\">            \\t       # 匹配制表符</span><br><span class=\"line\">            \\b       # 匹配退格符</span><br><span class=\"line\">            \\0       # 匹配空值字符</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        字符类:锚定字符&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            \\b       # 匹配字边界(不在[]中时)</span><br><span class=\"line\">            \\B       # 匹配非字边界</span><br><span class=\"line\">            \\A       # 匹配字符串开头</span><br><span class=\"line\">            \\Z       # 匹配字符串或行的末尾</span><br><span class=\"line\">            \\z       # 只匹配字符串末尾</span><br><span class=\"line\">            \\G       # 匹配前一次m//g离开之处</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        捕获&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            (exp)                # 匹配exp,并捕获文本到自动命名的组里</span><br><span class=\"line\">            (?&lt;name&gt;exp)         # 匹配exp,并捕获文本到名称为name的组里，也可以写成(?&#x27;name&#x27;exp)</span><br><span class=\"line\">            (?:exp)              # 匹配exp,不捕获匹配的文本，也不给此分组分配组号</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        零宽断言&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            (?=exp)              # 匹配exp前面的位置</span><br><span class=\"line\">            (?&lt;=exp)             # 匹配exp后面的位置</span><br><span class=\"line\">            (?!exp)              # 匹配后面跟的不是exp的位置</span><br><span class=\"line\">            (?&lt;!exp)             # 匹配前面不是exp的位置</span><br><span class=\"line\">            (?#comment)          # 注释不对正则表达式的处理产生任何影响，用于注释</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        特殊字符&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            http://en.wikipedia.org/wiki/Ascii_table</span><br><span class=\"line\">            ^H  \\010 \\b</span><br><span class=\"line\">            ^M  \\015 \\r</span><br><span class=\"line\">            匹配特殊字符: ctrl+V ctrl不放在按H或M 即可输出^H,用于匹配</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    流程结构&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        if判断&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            if [ $a == $b ]</span><br><span class=\"line\">            then</span><br><span class=\"line\">                echo &quot;等于&quot;</span><br><span class=\"line\">            else</span><br><span class=\"line\">                echo &quot;不等于&quot;</span><br><span class=\"line\">            fi</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        case分支选择&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            case $xs in</span><br><span class=\"line\">            0) echo &quot;0&quot; ;;</span><br><span class=\"line\">            1) echo &quot;1&quot; ;;</span><br><span class=\"line\">            *) echo &quot;其他&quot; ;;</span><br><span class=\"line\">            esac</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        while循环&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            # while true  等同   while :</span><br><span class=\"line\">            # 读文件为整行读入</span><br><span class=\"line\">            num=1</span><br><span class=\"line\">            while [ $num -lt 10 ]</span><br><span class=\"line\">            do</span><br><span class=\"line\">            echo $num</span><br><span class=\"line\">            ((num=$num+2))</span><br><span class=\"line\">            done</span><br><span class=\"line\">            ###########################</span><br><span class=\"line\">            grep a  a.txt | while read a</span><br><span class=\"line\">            do</span><br><span class=\"line\">                echo $a</span><br><span class=\"line\">            done</span><br><span class=\"line\">            ###########################</span><br><span class=\"line\">            while read a</span><br><span class=\"line\">            do</span><br><span class=\"line\">                echo $a</span><br><span class=\"line\">            done &lt; a.txt</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        for循环&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            # 读文件已空格分隔</span><br><span class=\"line\">            w=`awk -F &quot;:&quot; &#x27;&#123;print $1&#125;&#x27; c`</span><br><span class=\"line\">            for d in $w</span><br><span class=\"line\">            do</span><br><span class=\"line\">                $d</span><br><span class=\"line\">            done</span><br><span class=\"line\">            ###########################</span><br><span class=\"line\">            for ((i=0;i&lt;$&#123;#o[*]&#125;;i++))</span><br><span class=\"line\">            do</span><br><span class=\"line\">            echo $&#123;o[$i]&#125;</span><br><span class=\"line\">            done</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        until循环&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            #  当command不为0时循环</span><br><span class=\"line\">            until command</span><br><span class=\"line\">            do</span><br><span class=\"line\">                body</span><br><span class=\"line\">            done</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        流程控制&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            break N     #  跳出几层循环</span><br><span class=\"line\">            continue N  #  跳出几层循环，循环次数不变</span><br><span class=\"line\">            continue    #  重新循环次数不变</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    变量&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        A=&quot;a b c def&quot;           # 将字符串复制给变量</span><br><span class=\"line\">        A=`cmd`                 # 将命令结果赋给变量</span><br><span class=\"line\">        A=$(cmd)                # 将命令结果赋给变量</span><br><span class=\"line\">        eval a=\\$$a             # 间接调用</span><br><span class=\"line\">        i=2&amp;&amp;echo $((i+3))      # 计算后打印新变量结果</span><br><span class=\"line\">        i=2&amp;&amp;echo $[i+3]        # 计算后打印新变量结果</span><br><span class=\"line\">        a=$((2&gt;6?5:8))          # 判断两个值满足条件的赋值给变量</span><br><span class=\"line\">        $1  $2  $*              # 位置参数 *代表所有</span><br><span class=\"line\">        env                     # 查看环境变量</span><br><span class=\"line\">        env | grep &quot;name&quot;       # 查看定义的环境变量</span><br><span class=\"line\">        set                     # 查看环境变量和本地变量</span><br><span class=\"line\">        read name               # 输入变量</span><br><span class=\"line\">        readonly name           # 把name这个变量设置为只读变量,不允许再次设置</span><br><span class=\"line\">        readonly                # 查看系统存在的只读文件</span><br><span class=\"line\">        export name             # 变量name由本地升为环境</span><br><span class=\"line\">        export name=&quot;RedHat&quot;    # 直接定义name为环境变量</span><br><span class=\"line\">        export Stat$nu=2222     # 变量引用变量赋值</span><br><span class=\"line\">        unset name              # 变量清除</span><br><span class=\"line\">        export -n name          # 去掉只读变量</span><br><span class=\"line\">        shift                   # 用于移动位置变量,调整位置变量,使$3的值赋给$2.$2的值赋予$1</span><br><span class=\"line\">        name + 0                # 将字符串转换为数字</span><br><span class=\"line\">        number &quot; &quot;              # 将数字转换成字符串</span><br><span class=\"line\">        a=&#x27;ee&#x27;;b=&#x27;a&#x27;;echo $&#123;!b&#125; # 间接引用name变量的值</span><br><span class=\"line\">        : $&#123;a=&quot;cc&quot;&#125;             # 如果a有值则不改变,如果a无值则赋值a变量为cc</span><br><span class=\"line\"></span><br><span class=\"line\">        数组&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            A=(a b c def)         # 将变量定义为数組</span><br><span class=\"line\">            $&#123;#A[*]&#125;              # 数组个数</span><br><span class=\"line\">            $&#123;A[*]&#125;               # 数组所有元素,大字符串</span><br><span class=\"line\">            $&#123;A[@]&#125;               # 数组所有元素,类似列表可迭代</span><br><span class=\"line\">            $&#123;A[2]&#125;               # 脚本的一个参数或数组第三位</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        定义变量类型&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            declare 或 typeset</span><br><span class=\"line\">            -r 只读(readonly一样)</span><br><span class=\"line\">            -i 整形</span><br><span class=\"line\">            -a 数组</span><br><span class=\"line\">            -f 函数</span><br><span class=\"line\">            -x export</span><br><span class=\"line\">            declare -i n=0</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        系统变量&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            $0   #  脚本启动名(包括路径)</span><br><span class=\"line\">            $n   #  第n个参数,n=1,2,…9</span><br><span class=\"line\">            $*   #  所有参数列表(不包括脚本本身)</span><br><span class=\"line\">            $@   #  所有参数列表(独立字符串)</span><br><span class=\"line\">            $#   #  参数个数(不包括脚本本身)</span><br><span class=\"line\">            $$   #  当前程式的PID</span><br><span class=\"line\">            $!   #  执行上一个指令的PID</span><br><span class=\"line\">            $?   #  执行上一个指令的返回值</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        变量引用技巧&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            $&#123;name:+value&#125;        # 如果设置了name,就把value显示,未设置则为空</span><br><span class=\"line\">            $&#123;name:-value&#125;        # 如果设置了name,就显示它,未设置就显示value</span><br><span class=\"line\">            $&#123;name:?value&#125;        # 未设置提示用户错误信息value </span><br><span class=\"line\">            $&#123;name:=value&#125;        # 如未设置就把value设置并显示&lt;写入本地中&gt;</span><br><span class=\"line\">            $&#123;#A&#125;                 # 可得到变量中字节</span><br><span class=\"line\">            $&#123;A:4:9&#125;              # 取变量中第4位到后面9位</span><br><span class=\"line\">            $&#123;A:(-1)&#125;             # 倒叙取最后一个字符</span><br><span class=\"line\">            $&#123;A/www/http&#125;         # 取变量并且替换每行第一个关键字</span><br><span class=\"line\">            $&#123;A//www/http&#125;        # 取变量并且全部替换每行关键字</span><br><span class=\"line\"></span><br><span class=\"line\">            定义了一个变量： file=/dir1/dir2/dir3/my.file.txt</span><br><span class=\"line\">            $&#123;file#*/&#125;     # 去掉第一条 / 及其左边的字串：dir1/dir2/dir3/my.file.txt</span><br><span class=\"line\">            $&#123;file##*/&#125;    # 去掉最后一条 / 及其左边的字串：my.file.txt</span><br><span class=\"line\">            $&#123;file#*.&#125;     # 去掉第一个 .  及其左边的字串：file.txt</span><br><span class=\"line\">            $&#123;file##*.&#125;    # 去掉最后一个 .  及其左边的字串：txt</span><br><span class=\"line\">            $&#123;file%/*&#125;     # 去掉最后条 / 及其右边的字串：/dir1/dir2/dir3</span><br><span class=\"line\">            $&#123;file%%/*&#125;    # 去掉第一条 / 及其右边的字串：(空值)</span><br><span class=\"line\">            $&#123;file%.*&#125;     # 去掉最后一个 .  及其右边的字串：/dir1/dir2/dir3/my.file</span><br><span class=\"line\">            $&#123;file%%.*&#125;    # 去掉第一个 .  及其右边的字串：/dir1/dir2/dir3/my</span><br><span class=\"line\">            #   # 是去掉左边(在键盘上 # 在 $ 之左边)</span><br><span class=\"line\">            #   % 是去掉右边(在键盘上 % 在 $ 之右边)</span><br><span class=\"line\">            #   单一符号是最小匹配﹔两个符号是最大匹配</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    test条件判断&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 符号 [ ] 等同  test命令</span><br><span class=\"line\"></span><br><span class=\"line\">        expression为字符串操作&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            -n str   # 字符串str是否不为空</span><br><span class=\"line\">            -z str   # 字符串str是否为空</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        expression为文件操作&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            -a     # 并且，两条件为真</span><br><span class=\"line\">            -b     # 是否块文件</span><br><span class=\"line\">            -p     # 文件是否为一个命名管道</span><br><span class=\"line\">            -c     # 是否字符文件</span><br><span class=\"line\">            -r     # 文件是否可读</span><br><span class=\"line\">            -d     # 是否一个目录</span><br><span class=\"line\">            -s     # 文件的长度是否不为零</span><br><span class=\"line\">            -e     # 文件是否存在</span><br><span class=\"line\">            -S     # 是否为套接字文件</span><br><span class=\"line\">            -f     # 是否普通文件</span><br><span class=\"line\">            -x     # 文件是否可执行，则为真</span><br><span class=\"line\">            -g     # 是否设置了文件的 SGID 位</span><br><span class=\"line\">            -u     # 是否设置了文件的 SUID 位</span><br><span class=\"line\">            -G     # 文件是否存在且归该组所有</span><br><span class=\"line\">            -w     # 文件是否可写，则为真</span><br><span class=\"line\">            -k     # 文件是否设置了的粘贴位</span><br><span class=\"line\">            -t fd  # fd 是否是个和终端相连的打开的文件描述符（fd 默认为 1）</span><br><span class=\"line\">            -o     # 或，一个条件为真</span><br><span class=\"line\">            -O     # 文件是否存在且归该用户所有</span><br><span class=\"line\">            !      # 取反</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        expression为整数操作&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            expr1 -a expr2   # 如果 expr1 和 expr2 评估为真，则为真</span><br><span class=\"line\">            expr1 -o expr2   # 如果 expr1 或 expr2 评估为真，则为真</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        两值比较&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            整数     字符串</span><br><span class=\"line\">            -lt      &lt;         # 小于</span><br><span class=\"line\">            -gt      &gt;         # 大于</span><br><span class=\"line\">            -le      &lt;=        # 小于或等于</span><br><span class=\"line\">            -ge      &gt;=        # 大于或等于</span><br><span class=\"line\">            -eq      ==        # 等于</span><br><span class=\"line\">            -ne      !=        # 不等于</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        test 10 -lt 5       # 判断大小</span><br><span class=\"line\">        echo $?             # 查看上句test命令返回状态  # 结果0为真,1为假</span><br><span class=\"line\">        test -n &quot;hello&quot;     # 判断字符串长度是否为0</span><br><span class=\"line\">        [ $? -eq 0 ] &amp;&amp; echo &quot;success&quot; || exit　　　# 判断成功提示,失败则退出</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    重定向&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        #  标准输出 stdout 和 标准错误 stderr  标准输入stdin</span><br><span class=\"line\">        cmd 1&gt; fiel              # 把 标准输出 重定向到 file 文件中</span><br><span class=\"line\">        cmd &gt; file 2&gt;&amp;1          # 把 标准输出 和 标准错误 一起重定向到 file 文件中</span><br><span class=\"line\">        cmd 2&gt; file              # 把 标准错误 重定向到 file 文件中</span><br><span class=\"line\">        cmd 2&gt;&gt; file             # 把 标准错误 重定向到 file 文件中(追加)</span><br><span class=\"line\">        cmd &gt;&gt; file 2&gt;&amp;1         # 把 标准输出 和 标准错误 一起重定向到 file 文件中(追加)</span><br><span class=\"line\">        cmd &lt; file &gt;file2        # cmd 命令以 file 文件作为 stdin(标准输入)，以 file2 文件作为 标准输出</span><br><span class=\"line\">        cat &lt;&gt;file               # 以读写的方式打开 file</span><br><span class=\"line\">        cmd &lt; file cmd           # 命令以 file 文件作为 stdin</span><br><span class=\"line\">        cmd &lt;&lt; delimiter</span><br><span class=\"line\">        cmd; #从 stdin 中读入，直至遇到 delimiter 分界符</span><br><span class=\"line\">delimiter</span><br><span class=\"line\"></span><br><span class=\"line\">        &gt;&amp;n    # 使用系统调用 dup (2) 复制文件描述符 n 并把结果用作标准输出</span><br><span class=\"line\">        &lt;&amp;n    # 标准输入复制自文件描述符 n</span><br><span class=\"line\">        &lt;&amp;-    # 关闭标准输入（键盘）</span><br><span class=\"line\">        &gt;&amp;-    # 关闭标准输出</span><br><span class=\"line\">        n&lt;&amp;-   # 表示将 n 号输入关闭</span><br><span class=\"line\">        n&gt;&amp;-   # 表示将 n 号输出关闭</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    运算符&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        $[]等同于$(())  # $[]表示形式告诉shell求中括号中的表达式的值</span><br><span class=\"line\">        ~var            # 按位取反运算符,把var中所有的二进制为1的变为0,为0的变为1</span><br><span class=\"line\">        var\\&lt;&lt;str       # 左移运算符,把var中的二进制位向左移动str位,忽略最左端移出的各位,最右端的各位上补上0值,每做一次按位左移就有var乘2</span><br><span class=\"line\">        var&gt;&gt;str        # 右移运算符,把var中所有的二进制位向右移动str位,忽略最右移出的各位,最左的各位上补0,每次做一次右移就有实现var除以2</span><br><span class=\"line\">        var&amp;str         # 与比较运算符,var和str对应位,对于每个二进制来说,如果二都为1,结果为1.否则为0</span><br><span class=\"line\">        var^str         # 异或运算符,比较var和str对应位,对于二进制来说如果二者互补,结果为1,否则为0</span><br><span class=\"line\">        var|str         # 或运算符,比较var和str的对应位,对于每个二进制来说,如二都该位有一个1或都是1,结果为1,否则为0</span><br><span class=\"line\"></span><br><span class=\"line\">        运算符优先级&#123;</span><br><span class=\"line\">            级别      运算符                                  说明</span><br><span class=\"line\">            1      =,+=,-=,/=,%=,*=,&amp;=,^=,|=,&lt;&lt;=,&gt;&gt;=      # 赋值运算符</span><br><span class=\"line\">            2         ||                                  # 逻辑或 前面不成功执行</span><br><span class=\"line\">            3         &amp;&amp;                                  # 逻辑与 前面成功后执行</span><br><span class=\"line\">            4         |                                   # 按位或</span><br><span class=\"line\">            5         ^                                   # 按位异或</span><br><span class=\"line\">            6         &amp;                                   # 按位与</span><br><span class=\"line\">            7         ==,!=                               # 等于/不等于</span><br><span class=\"line\">            8         &lt;=,&gt;=,&lt;,&gt;                           # 小于或等于/大于或等于/小于/大于</span><br><span class=\"line\">            9        \\&lt;&lt;,&gt;&gt;                               # 按位左移/按位右移 (无转意符号)</span><br><span class=\"line\">            10        +,-                                 # 加减</span><br><span class=\"line\">            11        *,/,%                               # 乘,除,取余</span><br><span class=\"line\">            12        ! ,~                                # 逻辑非,按位取反或补码</span><br><span class=\"line\">            13        -,+                                 # 正负</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    数学运算&#123;</span><br><span class=\"line\">        $(( ))        # 整数运算</span><br><span class=\"line\">        + - * / **    # 分別为 &quot;加、減、乘、除、密运算&quot;</span><br><span class=\"line\">        &amp; | ^ !       # 分別为 &quot;AND、OR、XOR、NOT&quot; 运算</span><br><span class=\"line\">        %             # 余数运算</span><br><span class=\"line\">        let&#123;</span><br><span class=\"line\">            let # 运算</span><br><span class=\"line\">            let x=16/4</span><br><span class=\"line\">            let x=5**5</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        expr&#123;</span><br><span class=\"line\">            expr 14 % 9                    # 整数运算</span><br><span class=\"line\">            SUM=`expr 2 \\* 3`              # 乘后结果赋值给变量</span><br><span class=\"line\">            LOOP=`expr $LOOP + 1`          # 增量计数(加循环即可) LOOP=0</span><br><span class=\"line\">            expr length &quot;bkeep zbb&quot;        # 计算字串长度</span><br><span class=\"line\">            expr substr &quot;bkeep zbb&quot; 4 9    # 抓取字串</span><br><span class=\"line\">            expr index &quot;bkeep zbb&quot; e       # 抓取第一个字符数字串出现的位置</span><br><span class=\"line\">            expr 30 / 3 / 2                # 运算符号有空格</span><br><span class=\"line\">            expr bkeep.doc : &#x27;.*&#x27;          # 模式匹配(可以使用expr通过指定冒号选项计算字符串中字符数)</span><br><span class=\"line\">            expr bkeep.doc : &#x27;\\(.*\\).doc&#x27;  # 在expr中可以使用字符串匹配操作，这里使用模式抽取.doc文件附属名</span><br><span class=\"line\">            数值测试&#123;</span><br><span class=\"line\">                #如果试图计算非整数，则会返回错误</span><br><span class=\"line\">                rr=3.4</span><br><span class=\"line\">                expr $rr + 1</span><br><span class=\"line\">                expr: non-numeric argument</span><br><span class=\"line\">                rr=5</span><br><span class=\"line\">                expr $rr + 1</span><br><span class=\"line\">                6</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        bc&#123;</span><br><span class=\"line\">            echo &quot;m^n&quot;|bc            # 次方计算</span><br><span class=\"line\">            seq -s &#x27;+&#x27; 1000 |bc      # 从1加到1000</span><br><span class=\"line\">            seq 1 1000 |tr &quot;\\n&quot; &quot;+&quot;|sed &#x27;s/+$/\\n/&#x27;|bc   # 从1加到1000</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    grep&#123;</span><br><span class=\"line\">        -c    # 显示匹配到得行的数目，不显示内容</span><br><span class=\"line\">        -h    # 不显示文件名</span><br><span class=\"line\">        -i    # 忽略大小写</span><br><span class=\"line\">        -l    # 只列出匹配行所在文件的文件名</span><br><span class=\"line\">        -n    # 在每一行中加上相对行号</span><br><span class=\"line\">        -s    # 无声操作只显示报错，检查退出状态</span><br><span class=\"line\">        -v    # 反向查找</span><br><span class=\"line\">        -e    # 使用正则表达式</span><br><span class=\"line\">        -w    # 精确匹配</span><br><span class=\"line\">        -wc   # 精确匹配次数</span><br><span class=\"line\">        -o    # 查询所有匹配字段</span><br><span class=\"line\">        -P    # 使用perl正则表达式</span><br><span class=\"line\">        -A3   # 打印匹配行和下三行</span><br><span class=\"line\">        -B3   # 打印匹配行和上三行</span><br><span class=\"line\">        -C3   # 打印匹配行和上下三行</span><br><span class=\"line\">        grep -v &quot;a&quot; txt                              # 过滤关键字符行</span><br><span class=\"line\">        grep -w &#x27;a\\&gt;&#x27; txt                            # 精确匹配字符串</span><br><span class=\"line\">        grep -i &quot;a&quot; txt                              # 大小写敏感</span><br><span class=\"line\">        grep  &quot;a[bB]&quot; txt                            # 同时匹配大小写</span><br><span class=\"line\">        grep &#x27;[0-9]\\&#123;3\\&#125;&#x27; txt                        # 查找0-9重复三次的所在行</span><br><span class=\"line\">        grep -E &quot;word1|word2|word3&quot;   file           # 任意条件匹配</span><br><span class=\"line\">        grep word1 file | grep word2 |grep word3     # 同时匹配三个</span><br><span class=\"line\">        echo quan@163.com |grep -Po &#x27;(?&lt;=@.).*(?=.$)&#x27;                           # 零宽断言截取字符串  #　63.co</span><br><span class=\"line\">        echo &quot;I&#x27;m singing while you&#x27;re dancing&quot; |grep -Po &#x27;\\b\\w+(?=ing\\b)&#x27;      # 零宽断言匹配</span><br><span class=\"line\">        echo &#x27;Rx Optical Power: -5.01dBm, Tx Optical Power: -2.41dBm&#x27; |grep -Po &#x27;(?&lt;=:).*?(?=d)&#x27;           # 取出d前面数字 # ?为最小匹配</span><br><span class=\"line\">        echo &#x27;Rx Optical Power: -5.01dBm, Tx Optical Power: -2.41dBm&#x27; | grep -Po &#x27;[-0-9.]+&#x27;                # 取出d前面数字 # ?为最小匹配</span><br><span class=\"line\">        echo &#x27;[&quot;mem&quot;,ok],[&quot;hardware&quot;,false],[&quot;filesystem&quot;,false]&#x27; |grep -Po &#x27;[^&quot;]+(?=&quot;,false)&#x27;             # 取出false前面的字母</span><br><span class=\"line\">        echo &#x27;[&quot;mem&quot;,ok],[&quot;hardware&quot;,false],[&quot;filesystem&quot;,false]&#x27; |grep -Po &#x27;\\w+&quot;,false&#x27;|grep -Po &#x27;^\\w+&#x27;   # 取出false前面的字母</span><br><span class=\"line\">        grep用于if判断&#123;</span><br><span class=\"line\">            if echo abc | grep &quot;a&quot;  &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">            then</span><br><span class=\"line\">                echo &quot;abc&quot;</span><br><span class=\"line\">            else</span><br><span class=\"line\">                echo &quot;null&quot;</span><br><span class=\"line\">            fi</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tr&#123;</span><br><span class=\"line\">        -c          # 用字符串1中字符集的补集替换此字符集，要求字符集为ASCII</span><br><span class=\"line\">        -d          # 删除字符串1中所有输入字符</span><br><span class=\"line\">        -s          # 删除所有重复出现字符序列，只保留第一个:即将重复出现字符串压缩为一个字符串</span><br><span class=\"line\">        [a-z]       # a-z内的字符组成的字符串</span><br><span class=\"line\">        [A-Z]       # A-Z内的字符组成的字符串</span><br><span class=\"line\">        [0-9]       # 数字串</span><br><span class=\"line\">        \\octal      # 一个三位的八进制数，对应有效的ASCII字符</span><br><span class=\"line\">        [O*n]       # 表示字符O重复出现指定次数n。因此[O*2]匹配OO的字符串</span><br><span class=\"line\">        tr中特定控制字符表达方式&#123;</span><br><span class=\"line\">            \\a Ctrl-G    \\007    # 铃声</span><br><span class=\"line\">            \\b Ctrl-H    \\010    # 退格符</span><br><span class=\"line\">            \\f Ctrl-L    \\014    # 走行换页</span><br><span class=\"line\">            \\n Ctrl-J    \\012    # 新行</span><br><span class=\"line\">            \\r Ctrl-M    \\015    # 回车</span><br><span class=\"line\">            \\t Ctrl-I    \\011    # tab键</span><br><span class=\"line\">            \\v Ctrl-X    \\030</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tr A-Z a-z                             # 将所有大写转换成小写字母</span><br><span class=\"line\">        tr &quot; &quot; &quot;\\n&quot;                            # 将空格替换为换行</span><br><span class=\"line\">        tr -s &quot;[\\012]&quot; &lt; plan.txt              # 删除空行</span><br><span class=\"line\">        tr -s [&quot;\\n&quot;] &lt; plan.txt                # 删除空行</span><br><span class=\"line\">        tr -s &quot;[\\015]&quot; &quot;[\\n]&quot; &lt; file           # 删除文件中的^M，并代之以换行</span><br><span class=\"line\">        tr -s &quot;[\\r]&quot; &quot;[\\n]&quot; &lt; file             # 删除文件中的^M，并代之以换行</span><br><span class=\"line\">        tr -s &quot;[:]&quot; &quot;[\\011]&quot; &lt; /etc/passwd     # 替换passwd文件中所有冒号，代之以tab键</span><br><span class=\"line\">        tr -s &quot;[:]&quot; &quot;[\\t]&quot; &lt; /etc/passwd       # 替换passwd文件中所有冒号，代之以tab键</span><br><span class=\"line\">        echo $PATH | tr &quot;:&quot; &quot;\\n&quot;               # 增加显示路径可读性</span><br><span class=\"line\">        1,$!tr -d &#x27;\\t&#x27;                         # tr在vi内使用，在tr前加处理行范围和感叹号(&#x27;$&#x27;表示最后一行)</span><br><span class=\"line\">        tr &quot;\\r&quot; &quot;\\n&quot;&lt;macfile &gt; unixfile        # Mac -&gt; UNIX</span><br><span class=\"line\">        tr &quot;\\n&quot; &quot;\\r&quot;&lt;unixfile &gt; macfile        # UNIX -&gt; Mac</span><br><span class=\"line\">        tr -d &quot;\\r&quot;&lt;dosfile &gt; unixfile          # DOS -&gt; UNIX  Microsoft DOS/Windows 约定，文本的每行以回车字符(\\r)并后跟换行符(\\n)结束</span><br><span class=\"line\">        awk &#x27;&#123; print $0&quot;\\r&quot; &#125;&#x27;&lt;unixfile &gt; dosfile   # UNIX -&gt; DOS：在这种情况下，需要用awk，因为tr不能插入两个字符来替换一个字符</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    seq&#123;</span><br><span class=\"line\">        # 不指定起始数值，则默认为 1</span><br><span class=\"line\">        -s   # 选项主要改变输出的分格符, 预设是 \\n</span><br><span class=\"line\">        -w   # 等位补全，就是宽度相等，不足的前面补 0</span><br><span class=\"line\">        -f   # 格式化输出，就是指定打印的格式</span><br><span class=\"line\">        seq 10 100               # 列出10-100</span><br><span class=\"line\">        seq 1 10 |tac            # 倒叙列出</span><br><span class=\"line\">        seq -s &#x27;+&#x27; 90 100 |bc    # 从90加到100</span><br><span class=\"line\">        seq -f &#x27;dir%g&#x27; 1 10 | xargs mkdir     # 创建dir1-10</span><br><span class=\"line\">        seq -f &#x27;dir%03g&#x27; 1 10 | xargs mkdir   # 创建dir001-010</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    trap&#123;</span><br><span class=\"line\">        信号         说明</span><br><span class=\"line\">        HUP(1)     # 挂起，通常因终端掉线或用户退出而引发</span><br><span class=\"line\">        INT(2)     # 中断，通常因按下Ctrl+C组合键而引发</span><br><span class=\"line\">        QUIT(3)    # 退出，通常因按下Ctrl+\\组合键而引发</span><br><span class=\"line\">        ABRT(6)    # 中止，通常因某些严重的执行错误而引发</span><br><span class=\"line\">        ALRM(14)   # 报警，通常用来处理超时</span><br><span class=\"line\">        TERM(15)   # 终止，通常在系统关机时发送</span><br><span class=\"line\">        trap捕捉到信号之后，可以有三种反应方式：</span><br><span class=\"line\">            1、执行一段程序来处理这一信号</span><br><span class=\"line\">            2、接受信号的默认操作</span><br><span class=\"line\">            3、忽视这一信号</span><br><span class=\"line\">        第一种形式的trap命令在shell接收到 signal list 清单中数值相同的信号时，将执行双引号中的命令串：</span><br><span class=\"line\">        trap &#x27;commands&#x27; signal-list   # 单引号，要在shell探测到信号来的时候才执行命令和变量的替换，时间一直变</span><br><span class=\"line\">        trap &quot;commands&quot; signal-list   # 双引号，shell第一次设置信号的时候就执行命令和变量的替换，时间不变</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    awk&#123;</span><br><span class=\"line\">        # 默认是执行打印全部 print $0</span><br><span class=\"line\">        # 1为真 打印$0</span><br><span class=\"line\">        # 0为假 不打印</span><br><span class=\"line\">        -F   # 改变FS值(分隔符)</span><br><span class=\"line\">        ~    # 域匹配</span><br><span class=\"line\">        ==   # 变量匹配</span><br><span class=\"line\">        !~   # 匹配不包含</span><br><span class=\"line\">        =    # 赋值</span><br><span class=\"line\">        !=   # 不等于</span><br><span class=\"line\">        +=   # 叠加</span><br><span class=\"line\">        \\b   # 退格</span><br><span class=\"line\">        \\f   # 换页</span><br><span class=\"line\">        \\n   # 换行</span><br><span class=\"line\">        \\r   # 回车</span><br><span class=\"line\">        \\t   # 制表符Tab</span><br><span class=\"line\">        \\c   # 代表任一其他字符</span><br><span class=\"line\">        -F&quot;[ ]+|[%]+&quot;  # 多个空格或多个%为分隔符</span><br><span class=\"line\">        [a-z]+         # 多个小写字母</span><br><span class=\"line\">        [a-Z]          # 代表所有大小写字母(aAbB...zZ)</span><br><span class=\"line\">        [a-z]          # 代表所有大小写字母(ab...z)</span><br><span class=\"line\">        [:alnum:]      # 字母数字字符</span><br><span class=\"line\">        [:alpha:]      # 字母字符</span><br><span class=\"line\">        [:cntrl:]      # 控制字符</span><br><span class=\"line\">        [:digit:]      # 数字字符</span><br><span class=\"line\">        [:graph:]      # 非空白字符(非空格、控制字符等)</span><br><span class=\"line\">        [:lower:]      # 小写字母</span><br><span class=\"line\">        [:print:]      # 与[:graph:]相似，但是包含空格字符</span><br><span class=\"line\">        [:punct:]      # 标点字符</span><br><span class=\"line\">        [:space:]      # 所有的空白字符(换行符、空格、制表符)</span><br><span class=\"line\">        [:upper:]      # 大写字母</span><br><span class=\"line\">        [:xdigit:]     # 十六进制的数字(0-9a-fA-F)</span><br><span class=\"line\">        [[:digit:][:lower:]]    # 数字和小写字母(占一个字符)</span><br><span class=\"line\">        内建变量&#123;</span><br><span class=\"line\">            $n            # 当前记录的第 n 个字段，字段间由 FS 分隔</span><br><span class=\"line\">            $0            # 完整的输入记录</span><br><span class=\"line\">            ARGC          # 命令行参数的数目</span><br><span class=\"line\">            ARGIND        # 命令行中当前文件的位置 ( 从 0 开始算 )</span><br><span class=\"line\">            ARGV          # 包含命令行参数的数组</span><br><span class=\"line\">            CONVFMT       # 数字转换格式 ( 默认值为 %.6g)</span><br><span class=\"line\">            ENVIRON       # 环境变量关联数组</span><br><span class=\"line\">            ERRNO         # 最后一个系统错误的描述</span><br><span class=\"line\">            FIELDWIDTHS   # 字段宽度列表 ( 用空格键分隔 )</span><br><span class=\"line\">            FILENAME      # 当前文件名</span><br><span class=\"line\">            FNR           # 同 NR ，但相对于当前文件</span><br><span class=\"line\">            FS            # 字段分隔符 ( 默认是任何空格 )</span><br><span class=\"line\">            IGNORECASE    # 如果为真（即非 0 值），则进行忽略大小写的匹配</span><br><span class=\"line\">            NF            # 当前记录中的字段数(列)</span><br><span class=\"line\">            NR            # 当前行数</span><br><span class=\"line\">            OFMT          # 数字的输出格式 ( 默认值是 %.6g)</span><br><span class=\"line\">            OFS           # 输出字段分隔符 ( 默认值是一个空格 )</span><br><span class=\"line\">            ORS           # 输出记录分隔符 ( 默认值是一个换行符 )</span><br><span class=\"line\">            RLENGTH       # 由 match 函数所匹配的字符串的长度</span><br><span class=\"line\">            RS            # 记录分隔符 ( 默认是一个换行符 )</span><br><span class=\"line\">            RSTART        # 由 match 函数所匹配的字符串的第一个位置</span><br><span class=\"line\">            SUBSEP        # 数组下标分隔符 ( 默认值是 /034)</span><br><span class=\"line\">            BEGIN         # 先处理(可不加文件参数)</span><br><span class=\"line\">            END           # 结束时处理</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        内置函数&#123;</span><br><span class=\"line\">            gsub(r,s)          # 在整个$0中用s替代r   相当于 sed &#x27;s///g&#x27;</span><br><span class=\"line\">            gsub(r,s,t)        # 在整个t中用s替代r</span><br><span class=\"line\">            index(s,t)         # 返回s中字符串t的第一位置</span><br><span class=\"line\">            length(s)          # 返回s长度</span><br><span class=\"line\">            match(s,r)         # 测试s是否包含匹配r的字符串</span><br><span class=\"line\">            split(s,a,fs)      # 在fs上将s分成序列a</span><br><span class=\"line\">            sprint(fmt,exp)    # 返回经fmt格式化后的exp</span><br><span class=\"line\">            sub(r,s)           # 用$0中最左边最长的子串代替s   相当于 sed &#x27;s///&#x27;</span><br><span class=\"line\">            substr(s,p)        # 返回字符串s中从p开始的后缀部分</span><br><span class=\"line\">            substr(s,p,n)      # 返回字符串s中从p开始长度为n的后缀部分</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        awk判断&#123;</span><br><span class=\"line\">\t\t    zgrep &quot; 200 &quot; access.log-202109*.gz |awk &#x27;&#123;if ( $10 &gt; 200) &#123; print $7 &#125;&#125;&#x27; |awk -F&quot;?&quot; &#x27;&#123; print $1 &#125;&#x27;|sort|uniq -c|sort -nr</span><br><span class=\"line\">            awk &#x27;&#123;print ($1&gt;$2)?&quot;第一排&quot;$1:&quot;第二排&quot;$2&#125;&#x27;      # 条件判断 括号代表if语句判断 &quot;?&quot;代表then &quot;:&quot;代表else</span><br><span class=\"line\">            awk &#x27;&#123;max=($1&gt;$2)? $1 : $2; print max&#125;&#x27;          # 条件判断 如果$1大于$2,max值为为$1,否则为$2</span><br><span class=\"line\">            awk &#x27;&#123;if ( $6 &gt; 50) print $1 &quot; Too high&quot; ;\\</span><br><span class=\"line\">            else print &quot;Range is OK&quot;&#125;&#x27; file</span><br><span class=\"line\">            awk &#x27;&#123;if ( $6 &gt; 50) &#123; count++;print $3 &#125; \\</span><br><span class=\"line\">            else &#123; x+5; print $2 &#125; &#125;&#x27; file</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        awk循环&#123;</span><br><span class=\"line\">            awk &#x27;&#123;i = 1; while ( i &lt;= NF ) &#123; print NF, $i ; i++ &#125; &#125;&#x27; file</span><br><span class=\"line\">            awk &#x27;&#123; for ( i = 1; i &lt;= NF; i++ ) print NF,$i &#125;&#x27; file</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        awk &#x27;/Tom/&#x27; file               # 打印匹配到得行</span><br><span class=\"line\">        awk &#x27;/^Tom/&#123;print $1&#125;&#x27;         # 匹配Tom开头的行 打印第一个字段</span><br><span class=\"line\">        awk &#x27;$1 !~ /ly$/&#x27;              # 显示所有第一个字段不是以ly结尾的行</span><br><span class=\"line\">        awk &#x27;$3 &lt;40&#x27;                   # 如果第三个字段值小于40才打印</span><br><span class=\"line\">        awk &#x27;$4==90&#123;print $5&#125;&#x27;         # 取出第四列等于90的第五列</span><br><span class=\"line\">        awk &#x27;/^(no|so)/&#x27; test          # 打印所有以模式no或so开头的行</span><br><span class=\"line\">        awk &#x27;$3 * $4 &gt; 500&#x27;            # 算术运算(第三个字段和第四个字段乘积大于500则显示)</span><br><span class=\"line\">        awk &#x27;&#123;print NR&quot; &quot;$0&#125;&#x27;          # 加行号</span><br><span class=\"line\">        awk &#x27;/tom/,/suz/&#x27;              # 打印tom到suz之间的行</span><br><span class=\"line\">        awk &#x27;&#123;a+=$1&#125;END&#123;print a&#125;&#x27;      # 列求和</span><br><span class=\"line\">        awk &#x27;sum+=$1&#123;print sum&#125;&#x27;       # 将$1的值叠加后赋给sum</span><br><span class=\"line\">        awk &#x27;&#123;a+=$1&#125;END&#123;print a/NR&#125;&#x27;   # 列求平均值</span><br><span class=\"line\">        awk &#x27;!s[$1 $3]++&#x27; file         # 根据第一列和第三列过滤重复行</span><br><span class=\"line\">        awk -F&#x27;[ :\\t]&#x27; &#x27;&#123;print $1,$2&#125;&#x27;           # 以空格、:、制表符Tab为分隔符</span><br><span class=\"line\">        awk &#x27;&#123;print &quot;&#x27;&quot;$a&quot;&#x27;&quot;,&quot;&#x27;&quot;$b&quot;&#x27;&quot;&#125;&#x27;          # 引用外部变量</span><br><span class=\"line\">        awk &#x27;&#123;if(NR==52)&#123;print;exit&#125;&#125;&#x27;           # 显示第52行</span><br><span class=\"line\">        awk &#x27;/关键字/&#123;a=NR+2&#125;a==NR &#123;print&#125;&#x27;      # 取关键字下第几行</span><br><span class=\"line\">        awk &#x27;gsub(/liu/,&quot;aaaa&quot;,$1)&#123;print $0&#125;&#x27;    # 只打印匹配替换后的行</span><br><span class=\"line\">        ll | awk -F&#x27;[ ]+|[ ][ ]+&#x27; &#x27;/^$/&#123;print $8&#125;&#x27;             # 提取时间,空格不固定</span><br><span class=\"line\">        awk &#x27;&#123;$1=&quot;&quot;;$2=&quot;&quot;;$3=&quot;&quot;;print&#125;&#x27;                        # 去掉前三列</span><br><span class=\"line\">        echo aada:aba|awk &#x27;/d/||/b/&#123;print&#125;&#x27;                    # 匹配两内容之一</span><br><span class=\"line\">        echo aada:abaa|awk -F: &#x27;$1~/d/||$2~/b/&#123;print&#125;&#x27;         # 关键列匹配两内容之一</span><br><span class=\"line\">        echo Ma asdas|awk &#x27;$1~/^[a-Z][a-Z]$/&#123;print &#125;&#x27;          # 第一个域匹配正则</span><br><span class=\"line\">        echo aada:aaba|awk &#x27;/d/&amp;&amp;/b/&#123;print&#125;&#x27;                   # 同时匹配两条件</span><br><span class=\"line\">        awk &#x27;length($1)==&quot;4&quot;&#123;print $1&#125;&#x27;                        # 字符串位数</span><br><span class=\"line\">        awk &#x27;&#123;if($2&gt;3)&#123;system (&quot;touch &quot;$1)&#125;&#125;&#x27;                  # 执行系统命令</span><br><span class=\"line\">        awk &#x27;&#123;sub(/Mac/,&quot;Macintosh&quot;,$0);print&#125;&#x27;                # 用Macintosh替换Mac</span><br><span class=\"line\">        awk &#x27;&#123;gsub(/Mac/,&quot;MacIntosh&quot;,$1); print&#125;&#x27;              # 第一个域内用Macintosh替换Mac</span><br><span class=\"line\">        awk -F &#x27;&#x27; &#x27;&#123; for(i=1;i&lt;NF+1;i++)a+=$i  ;print a&#125;&#x27;      # 多位数算出其每位数的总和.比如 1234， 得到 10</span><br><span class=\"line\">        awk &#x27;&#123; i=$1%10;if ( i == 0 ) &#123;print i&#125;&#125;&#x27;               # 判断$1是否整除(awk中定义变量引用时不能带 $ )</span><br><span class=\"line\">        awk &#x27;BEGIN&#123;a=0&#125;&#123;if ($1&gt;a) a=$1 fi&#125;END&#123;print a&#125;&#x27;        # 列求最大值  设定一个变量开始为0，遇到比该数大的值，就赋值给该变量，直到结束</span><br><span class=\"line\">        awk &#x27;BEGIN&#123;a=11111&#125;&#123;if ($1&lt;a) a=$1 fi&#125;END&#123;print a&#125;&#x27;    # 求最小值</span><br><span class=\"line\">        awk &#x27;&#123;if(A)print;A=0&#125;/regexp/&#123;A=1&#125;&#x27;                    # 查找字符串并将匹配行的下一行显示出来，但并不显示匹配行</span><br><span class=\"line\">        awk &#x27;/regexp/&#123;print A&#125;&#123;A=$0&#125;&#x27;                          # 查找字符串并将匹配行的上一行显示出来，但并不显示匹配行</span><br><span class=\"line\">        awk &#x27;&#123;if(!/mysql/)gsub(/1/,&quot;a&quot;);print $0&#125;&#x27;             # 将1替换成a，并且只在行中未出现字串mysql的情况下替换</span><br><span class=\"line\">        awk &#x27;BEGIN&#123;srand();fr=int(100*rand());print fr;&#125;&#x27;      # 获取随机数</span><br><span class=\"line\">        awk &#x27;&#123;if(NR==3)F=1&#125;&#123;if(F)&#123;i++;if(i%7==1)print&#125;&#125;&#x27;       # 从第3行开始，每7行显示一次</span><br><span class=\"line\">        awk &#x27;&#123;if(NF&lt;1)&#123;print i;i=0&#125; else &#123;i++;print $0&#125;&#125;&#x27;      # 显示空行分割各段的行数</span><br><span class=\"line\">        echo +null:null  |awk -F: &#x27;$1!~&quot;^+&quot;&amp;&amp;$2!=&quot;null&quot;&#123;print $0&#125;&#x27;       # 关键列同时匹配</span><br><span class=\"line\">        awk -v RS=@ &#x27;NF&#123;for(i=1;i&lt;=NF;i++)if($i) printf $i;print &quot;&quot;&#125;&#x27;    # 指定记录分隔符</span><br><span class=\"line\">        awk &#x27;&#123;b[$1]=b[$1]$2&#125;END&#123;for(i in b)&#123;print i,b[i]&#125;&#125;&#x27;              # 列叠加</span><br><span class=\"line\">        awk &#x27;&#123; i=($1%100);if ( $i &gt;= 0 ) &#123;print $0,$i&#125;&#125;&#x27;                 # 求余数</span><br><span class=\"line\">        awk &#x27;&#123;b=a;a=$1; if(NR&gt;1)&#123;print a-b&#125;&#125;&#x27;                            # 当前行减上一行</span><br><span class=\"line\">        awk &#x27;&#123;a[NR]=$1&#125;END&#123;for (i=1;i&lt;=NR;i++)&#123;print a[i]-a[i-1]&#125;&#125;&#x27;      # 当前行减上一行</span><br><span class=\"line\">        awk -F: &#x27;&#123;name[x++]=$1&#125;;END&#123;for(i=0;i&lt;NR;i++)print i,name[i]&#125;&#x27;   # END只打印最后的结果,END块里面处理数组内容</span><br><span class=\"line\">        awk &#x27;&#123;sum2+=$2;count=count+1&#125;END&#123;print sum2,sum2/count&#125;&#x27;         # $2的总和  $2总和除个数(平均值)</span><br><span class=\"line\">        awk -v a=0 -F &#x27;B&#x27; &#x27;&#123;for (i=1;i&lt;NF;i++)&#123; a=a+length($i)+1;print a  &#125;&#125;&#x27;     # 打印所以B的所在位置</span><br><span class=\"line\">        awk &#x27;BEGIN&#123; &quot;date&quot; | getline d; split(d,mon) ; print mon[2]&#125;&#x27; file        # 将date值赋给d，并将d设置为数组mon，打印mon数组中第2个元素</span><br><span class=\"line\">        awk &#x27;BEGIN&#123;info=&quot;this is a test2010test!&quot;;print substr(info,4,10);&#125;&#x27;      # 截取字符串(substr使用)</span><br><span class=\"line\">        awk &#x27;BEGIN&#123;info=&quot;this is a test2010test!&quot;;print index(info,&quot;test&quot;)?&quot;ok&quot;:&quot;no found&quot;;&#125;&#x27;      # 匹配字符串(index使用)</span><br><span class=\"line\">        awk &#x27;BEGIN&#123;info=&quot;this is a test2010test!&quot;;print match(info,/[0-9]+/)?&quot;ok&quot;:&quot;no found&quot;;&#125;&#x27;    # 正则表达式匹配查找(match使用)</span><br><span class=\"line\">        awk &#x27;&#123;for(i=1;i&lt;=4;i++)printf $i&quot;&quot;FS; for(y=10;y&lt;=13;y++)  printf $y&quot;&quot;FS;print &quot;&quot;&#125;&#x27;        # 打印前4列和后4列</span><br><span class=\"line\">        awk &#x27;BEGIN&#123;for(n=0;n++&lt;9;)&#123;for(i=0;i++&lt;n;)printf i&quot;x&quot;n&quot;=&quot;i*n&quot; &quot;;print &quot;&quot;&#125;&#125;&#x27;                # 乘法口诀</span><br><span class=\"line\">        awk &#x27;BEGIN&#123;info=&quot;this is a test&quot;;split(info,tA,&quot; &quot;);print length(tA);for(k in tA)&#123;print k,tA[k];&#125;&#125;&#x27;             # 字符串分割(split使用)</span><br><span class=\"line\">        awk &#x27;&#123;if (system (&quot;grep &quot;$2&quot; tmp/* &gt; /dev/null 2&gt;&amp;1&quot;) == 0 ) &#123;print $1,&quot;Y&quot;&#125; else &#123;print $1,&quot;N&quot;&#125; &#125;&#x27; a            # 执行系统命令判断返回状态</span><br><span class=\"line\">        awk  &#x27;&#123;for(i=1;i&lt;=NF;i++) a[i,NR]=$i&#125;END&#123;for(i=1;i&lt;=NF;i++) &#123;for(j=1;j&lt;=NR;j++) printf a[i,j] &quot; &quot;;print &quot;&quot;&#125;&#125;&#x27;   # 将多行转多列</span><br><span class=\"line\">        netstat -an|awk -v A=$IP -v B=$PORT &#x27;BEGIN&#123;print &quot;Clients\\tGuest_ip&quot;&#125;$4~A&quot;:&quot;B&#123;split($5,ip,&quot;:&quot;);a[ip[1]]++&#125;END&#123;for(i in a)print a[i]&quot;\\t&quot;i|&quot;sort -nr&quot;&#125;&#x27;    # 统计IP连接个数</span><br><span class=\"line\">        cat 1.txt|awk -F&quot; # &quot; &#x27;&#123;print &quot;insert into user (user,password,email)values(&quot;&quot;&#x27;\\&#x27;&#x27;&quot;$1&quot;&#x27;\\&#x27;\\,&#x27;&quot;&quot;&#x27;\\&#x27;&#x27;&quot;$2&quot;&#x27;\\&#x27;\\,&#x27;&quot;&quot;&#x27;\\&#x27;&#x27;&quot;$3&quot;&#x27;\\&#x27;\\)\\;&#x27;&quot;&#125;&#x27; &gt;&gt;insert_1.txt     # 处理sql语句</span><br><span class=\"line\">        awk &#x27;BEGIN&#123;printf &quot;what is your name?&quot;;getline name &lt; &quot;/dev/tty&quot; &#125; $1 ~name &#123;print &quot;FOUND&quot; name &quot; on line &quot;, NR &quot;.&quot;&#125; END&#123;print &quot;see you,&quot; name &quot;.&quot;&#125;&#x27; file  # 两文件匹配</span><br><span class=\"line\">        取本机IP&#123;</span><br><span class=\"line\">            /sbin/ifconfig |awk -v RS=&quot;Bcast:&quot; &#x27;&#123;print $NF&#125;&#x27;|awk -F: &#x27;/addr/&#123;print $2&#125;&#x27;</span><br><span class=\"line\">            /sbin/ifconfig |awk &#x27;/inet/&amp;&amp;$2!~&quot;127.0.0.1&quot;&#123;split($2,a,&quot;:&quot;);print a[2]&#125;&#x27;</span><br><span class=\"line\">            /sbin/ifconfig |awk -v RS=&#x27;inet addr:&#x27; &#x27;$1!=&quot;eth0&quot;&amp;&amp;$1!=&quot;127.0.0.1&quot;&#123;print $1&#125;&#x27;|awk &#x27;&#123;printf&quot;%s|&quot;,$0&#125;&#x27;</span><br><span class=\"line\">            /sbin/ifconfig |awk  &#x27;&#123;printf(&quot;line %d,%s\\n&quot;,NR,$0)&#125;&#x27;         # 指定类型(%d数字,%s字符)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        查看磁盘空间&#123;</span><br><span class=\"line\">            df -h|awk -F&quot;[ ]+|%&quot; &#x27;$5&gt;14&#123;print $5&#125;&#x27;</span><br><span class=\"line\">            df -h|awk &#x27;NR!=1&#123;if ( NF == 6 ) &#123;print $5&#125; else if ( NF == 5) &#123;print $4&#125; &#125;&#x27;</span><br><span class=\"line\">            df -h|awk &#x27;NR!=1 &amp;&amp; /%/&#123;sub(/%/,&quot;&quot;);print $(NF-1)&#125;&#x27;</span><br><span class=\"line\">            df -h|sed &#x27;1d;/ /!N;s/\\n//;s/ \\+/ /;&#x27;    #将磁盘分区整理成一行   可直接用 df -P</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        排列打印&#123;</span><br><span class=\"line\">            awk &#x27;END&#123;printf &quot;%-10s%-10s\\n%-10s%-10s\\n%-10s%-10s\\n&quot;,&quot;server&quot;,&quot;name&quot;,&quot;123&quot;,&quot;12345&quot;,&quot;234&quot;,&quot;1234&quot;&#125;&#x27; txt</span><br><span class=\"line\">            awk &#x27;BEGIN&#123;printf &quot;|%-10s|%-10s|\\n|%-10s|%-10s|\\n|%-10s|%-10s|\\n&quot;,&quot;server&quot;,&quot;name&quot;,&quot;123&quot;,&quot;12345&quot;,&quot;234&quot;,&quot;1234&quot;&#125;&#x27;</span><br><span class=\"line\">            awk &#x27;BEGIN&#123;</span><br><span class=\"line\">            print &quot;   *** 开 始 ***   &quot;;</span><br><span class=\"line\">            print &quot;+-----------------+&quot;;</span><br><span class=\"line\">            printf &quot;|%-5s|%-5s|%-5s|\\n&quot;,&quot;id&quot;,&quot;name&quot;,&quot;ip&quot;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            $1!=1 &amp;&amp; NF==4&#123;printf &quot;|%-5s|%-5s|%-5s|\\n&quot;,$1,$2,$3&quot; &quot;$11&#125;</span><br><span class=\"line\">            END&#123;</span><br><span class=\"line\">            print &quot;+-----------------+&quot;;</span><br><span class=\"line\">            print &quot;   *** 结 束 ***   &quot;</span><br><span class=\"line\">            &#125;&#x27; txt</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        awk经典题&#123;</span><br><span class=\"line\">            分析图片服务日志，把日志（每个图片访问次数*图片大小的总和）排行，也就是计算每个url的总访问大小</span><br><span class=\"line\">            说明：本题生产环境应用：这个功能可以用于IDC网站流量带宽很高，然后通过分析服务器日志哪些元素占用流量过大，进而进行优化或裁剪该图片，压缩js等措施。</span><br><span class=\"line\">            本题需要输出三个指标： 【被访问次数】    【访问次数*单个被访问文件大小】   【文件名（带URL）】</span><br><span class=\"line\">            测试数据</span><br><span class=\"line\">            59.33.26.105 - - [08/Dec/2010:15:43:56 +0800] &quot;GET /static/images/photos/2.jpg HTTP/1.1&quot; 200 11299</span><br><span class=\"line\">            awk &#x27;&#123;array_num[$7]++;array_size[$7]+=$10&#125;END&#123;for(i in array_num) &#123;print array_num[i]&quot; &quot;array_size[i]&quot; &quot;i&#125;&#125;&#x27;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        awk练习题&#123;</span><br><span class=\"line\">            wang     4</span><br><span class=\"line\">            cui      3</span><br><span class=\"line\">            zhao     4</span><br><span class=\"line\">            liu      3</span><br><span class=\"line\">            liu      3</span><br><span class=\"line\">            chang    5</span><br><span class=\"line\">            li       2</span><br><span class=\"line\">            1 通过第一个域找出字符长度为4的</span><br><span class=\"line\">            2 当第二列值大于3时，创建空白文件，文件名为当前行第一个域$1 (touch $1)</span><br><span class=\"line\">            3 将文档中 liu 字符串替换为 hong</span><br><span class=\"line\">            4 求第二列的和</span><br><span class=\"line\">            5 求第二列的平均值</span><br><span class=\"line\">            6 求第二列中的最大值</span><br><span class=\"line\">            7 将第一列过滤重复后，列出每一项，每一项的出现次数，每一项的大小总和</span><br><span class=\"line\">            1、字符串长度</span><br><span class=\"line\">                awk &#x27;length($1)==&quot;4&quot;&#123;print $1&#125;&#x27;</span><br><span class=\"line\">            2、执行系统命令</span><br><span class=\"line\">                awk &#x27;&#123;if($2&gt;3)&#123;system (&quot;touch &quot;$1)&#125;&#125;&#x27;</span><br><span class=\"line\">            3、gsub(/r/,&quot;s&quot;,域) 在指定域(默认$0)中用s替代r  (sed &#x27;s///g&#x27;)</span><br><span class=\"line\">                awk &#x27;&#123;gsub(/liu/,&quot;hong&quot;,$1);print $0&#125;&#x27; a.txt</span><br><span class=\"line\">            4、列求和</span><br><span class=\"line\">                awk &#x27;&#123;a+=$2&#125;END&#123;print a&#125;&#x27;</span><br><span class=\"line\">            5、列求平均值</span><br><span class=\"line\">                awk &#x27;&#123;a+=$2&#125;END&#123;print a/NR&#125;&#x27;</span><br><span class=\"line\">                awk &#x27;&#123;a+=$2;b++&#125;END&#123;print a,a/b&#125;&#x27;</span><br><span class=\"line\">            6、列求最大值</span><br><span class=\"line\">                awk &#x27;BEGIN&#123;a=0&#125;&#123;if($2&gt;a) a=$2 &#125;END&#123;print a&#125;&#x27;</span><br><span class=\"line\">            7、将第一列过滤重复列出每一项，每一项的出现次数，每一项的大小总和</span><br><span class=\"line\">                awk &#x27;&#123;a[$1]++;b[$1]+=$2&#125;END&#123;for(i in a)&#123;print i,a[i],b[i]&#125;&#125;&#x27;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        awk处理复杂日志&#123;</span><br><span class=\"line\">            6.19：</span><br><span class=\"line\">            DHB_014_号百总机服务业务日报：广州 到达数异常！</span><br><span class=\"line\">            DHB_023_号百漏话提醒日报：珠海 到达数异常！</span><br><span class=\"line\">            6.20：</span><br><span class=\"line\">            DHB_014_号百总机服务业务日报：广州 到达数异常！到</span><br><span class=\"line\">            awk -F &#x27;[_ ：]+&#x27; &#x27;NF&gt;2&#123;print $4,$1&quot;_&quot;$2,b |&quot;sort&quot;;next&#125;&#123;b=$1&#125;&#x27;</span><br><span class=\"line\">            # 当前行NF小于等于2 只针对&#123;print $4,$1&quot;_&quot;$2,b |&quot;sort&quot;;next&#125; 有效 即 6.19：行跳过此操作,  &#123;b=$1&#125; 仍然执行</span><br><span class=\"line\">            # 当前行NF大于2 执行到 next 强制跳过本行，即跳过后面的 &#123;b=$1&#125;</span><br><span class=\"line\">            广州 DHB_014 6.19</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sed&#123;</span><br><span class=\"line\">        # 先读取资料、存入模式空间、对其进行编辑、再输出、再用下一行替换模式空间内容</span><br><span class=\"line\">        # 调试工具sedsed (参数 -d)   http://aurelio.net/sedsed/sedsed-1.0</span><br><span class=\"line\">        -n   # 输出由编辑指令控制(取消默认的输出,必须与编辑指令一起配合)</span><br><span class=\"line\">        -i   # 直接对文件操作</span><br><span class=\"line\">        -e   # 多重编辑</span><br><span class=\"line\">        -r   # 正则可不转移特殊字符</span><br><span class=\"line\">        b    # 跳过匹配的行</span><br><span class=\"line\">        p    # 打印</span><br><span class=\"line\">        d    # 删除</span><br><span class=\"line\">        s    # 替换</span><br><span class=\"line\">        g    # 配合s全部替换</span><br><span class=\"line\">        i    # 行前插入</span><br><span class=\"line\">        a    # 行后插入</span><br><span class=\"line\">        r    # 读</span><br><span class=\"line\">        y    # 转换</span><br><span class=\"line\">        q    # 退出</span><br><span class=\"line\">        &amp;    # 代表查找的串内容</span><br><span class=\"line\">        *    # 任意多个 前驱字符(前导符)</span><br><span class=\"line\">        ?    # 0或1个 最小匹配 没加-r参数需转义 \\?</span><br><span class=\"line\">        $    # 最后一行</span><br><span class=\"line\">        .*   # 匹配任意多个字符</span><br><span class=\"line\">        \\(a\\)   # 保存a作为标签1(\\1)</span><br><span class=\"line\">        模式空间&#123;</span><br><span class=\"line\">            # 模式空间(两行两行处理) 模式匹配的范围，一般而言，模式空间是输入文本中某一行，但是可以通过使用N函数把多于一行读入模式空间</span><br><span class=\"line\">            # 暂存空间里默认存储一个空行</span><br><span class=\"line\">            n   # 读入下一行(覆盖上一行)</span><br><span class=\"line\">            h   # 把模式空间里的行拷贝到暂存空间</span><br><span class=\"line\">            H   # 把模式空间里的行追加到暂存空间</span><br><span class=\"line\">            g   # 用暂存空间的内容替换模式空间的行</span><br><span class=\"line\">            G   # 把暂存空间的内容追加到模式空间的行后</span><br><span class=\"line\">            x   # 将暂存空间的内容于模式空间里的当前行互换</span><br><span class=\"line\">            ！  # 对其前面的要匹配的范围取反</span><br><span class=\"line\">            D   # 删除当前模式空间中直到并包含第一个换行符的所有字符(/.*/匹配模式空间中所有内容，匹配到就执行D,没匹配到就结束D)</span><br><span class=\"line\">            N   # 追加下一个输入行到模式空间后面并在第二者间嵌入一个换行符，改变当前行号码,模式匹配可以延伸跨域这个内嵌换行</span><br><span class=\"line\">            p   # 打印模式空间中的直到并包含第一个换行的所有字符</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        标签函数&#123;</span><br><span class=\"line\">            : lable # 建立命令标记，配合b，t函数使用跳转</span><br><span class=\"line\">            b lable # 分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。</span><br><span class=\"line\">            t labe  # 判断分支，从最后一行开始，条件一旦满足或者T,t命令，将导致分支到带有标号的命令出，或者到脚本末尾。与b函数不同在于t在执行跳转前会先检查其前一个替换命令是否成功，如成功，则执行跳转。</span><br><span class=\"line\">            sed -e &#x27;&#123;:p1;/A/s/A/AA/;/B/s/B/BB/;/[AB]\\&#123;10\\&#125;/b;b p1;&#125;&#x27;     # 文件内容第一行A第二行B:建立标签p1;两个替换函数(A替换成AA,B替换成BB)当A或者B达到10个以后调用b,返回</span><br><span class=\"line\">            echo &#x27;sd  f   f   [a    b      c    cddd    eee]&#x27; | sed &#x27;:n;s#\\(\\[[^ ]*\\)  *#\\1#;tn&#x27;  # 标签函数t使用方法,替换[]里的空格</span><br><span class=\"line\">            echo &quot;198723124.03&quot;|sed -r &#x27;:a;s/([0-9]+)([0-9]&#123;3&#125;)/\\1,\\2/;ta&#x27;  # 每三个字符加一个逗号</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        引用外部变量&#123;</span><br><span class=\"line\">            sed -n &#x27;&#x27;$a&#x27;,10p&#x27;</span><br><span class=\"line\">            sed -n &quot;&quot;$a&quot;,10p&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\tsed -e &#x27;s/[()]//g&#x27;                            # 去除两边括号取得括号内内容</span><br><span class=\"line\">        sed 10q                                       # 显示文件中的前10行 (模拟&quot;head&quot;)</span><br><span class=\"line\">        sed -n &#x27;$=&#x27;                                   # 计算行数(模拟 &quot;wc -l&quot;)</span><br><span class=\"line\">        sed -n &#x27;5,/^no/p&#x27;                             # 打印从第5行到以no开头行之间的所有行</span><br><span class=\"line\">        sed -i &quot;/^$f/d&quot; a     　　                  　 # 删除匹配行</span><br><span class=\"line\">        sed -i &#x27;/aaa/,$d&#x27;                             # 删除匹配行到末尾</span><br><span class=\"line\">        sed -i &quot;s/=/:/&quot; c                             # 直接对文本替换</span><br><span class=\"line\">        sed -i &quot;/^pearls/s/$/j/&quot;                      # 找到pearls开头在行尾加j</span><br><span class=\"line\">        sed &#x27;/1/,/3/p&#x27; file                           # 打印1和3之间的行</span><br><span class=\"line\">        sed -n &#x27;1p&#x27; file                              # 取出指定行</span><br><span class=\"line\">        sed &#x27;5i\\aaa&#x27; file                             # 在第5行之前插入行</span><br><span class=\"line\">        sed &#x27;5a\\aaa&#x27; file                             # 在第5行之后抽入行</span><br><span class=\"line\">        echo a|sed -e &#x27;/a/i\\b&#x27;                        # 在匹配行前插入一行</span><br><span class=\"line\">        echo a|sed -e &#x27;/a/a\\b&#x27;                        # 在匹配行后插入一行</span><br><span class=\"line\">        echo a|sed &#x27;s/a/&amp;\\nb/g&#x27;                       # 在匹配行后插入一行</span><br><span class=\"line\">        seq 10| sed -e&#123;1,3&#125;&#x27;s/./a/&#x27;                   # 匹配1和3行替换</span><br><span class=\"line\">        sed -n &#x27;/regexp/!p&#x27;                           # 只显示不匹配正则表达式的行</span><br><span class=\"line\">        sed &#x27;/regexp/d&#x27;                               # 只显示不匹配正则表达式的行</span><br><span class=\"line\">        sed &#x27;$!N;s/\\n//&#x27;                              # 将每两行连接成一行</span><br><span class=\"line\">        sed &#x27;/baz/s/foo/bar/g&#x27;                        # 只在行中出现字串&quot;baz&quot;的情况下将&quot;foo&quot;替换成&quot;bar&quot;</span><br><span class=\"line\">        sed &#x27;/baz/!s/foo/bar/g&#x27;                       # 将&quot;foo&quot;替换成&quot;bar&quot;，并且只在行中未出现字串&quot;baz&quot;的情况下替换</span><br><span class=\"line\">        echo a|sed -e &#x27;s/a/#&amp;/g&#x27;                      # 在a前面加#号</span><br><span class=\"line\">        sed &#x27;s/foo/bar/4&#x27;                             # 只替换每一行中的第四个字串</span><br><span class=\"line\">        sed &#x27;s/\\(.*\\)foo/\\1bar/&#x27;                      # 替换每行最后一个字符串</span><br><span class=\"line\">        sed &#x27;s/\\(.*\\)foo\\(.*foo\\)/\\1bar\\2/&#x27;           # 替换倒数第二个字符串</span><br><span class=\"line\">        sed &#x27;s/[0-9][0-9]$/&amp;5&#x27;                        # 在以[0-9][0-9]结尾的行后加5</span><br><span class=\"line\">        sed -n &#x27; /^eth\\|em[01][^:]/&#123;n;p;&#125;&#x27;            # 匹配多个关键字</span><br><span class=\"line\">        sed -n -r &#x27; /eth|em[01][^:]/&#123;n;p;&#125;&#x27;           # 匹配多个关键字</span><br><span class=\"line\">        echo -e &quot;1\\n2&quot;|xargs -i -t sed &#x27;s/^/1/&#x27; &#123;&#125;    # 同时处理多个文件</span><br><span class=\"line\">        sed &#x27;/west/,/east/s/$/*VACA*/&#x27;                # 修改west和east之间的所有行，在结尾处加*VACA*</span><br><span class=\"line\">        sed  &#x27;s/[^1-9]*\\([0-9]\\+\\).*/\\1/&#x27;             # 取出第一组数字，并且忽略掉开头的0</span><br><span class=\"line\">        sed -n &#x27;/regexp/&#123;g;1!p;&#125;;h&#x27;                   # 查找字符串并将匹配行的上一行显示出来，但并不显示匹配行</span><br><span class=\"line\">        sed -n &#x27; /regexp/&#123;n;p;&#125;&#x27;                      # 查找字符串并将匹配行的下一行显示出来，但并不显示匹配行</span><br><span class=\"line\">        sed -n &#x27;s/\\(mar\\)got/\\1ianne/p&#x27;               # 保存\\(mar\\)作为标签1</span><br><span class=\"line\">        sed -n &#x27;s/\\([0-9]\\+\\).*\\(t\\)/\\2\\1/p&#x27;          # 保存多个标签</span><br><span class=\"line\">        sed -i -e &#x27;1,3d&#x27; -e &#x27;s/1/2/&#x27;                  # 多重编辑(先删除1-3行，在将1替换成2)</span><br><span class=\"line\">        sed -e &#x27;s/@.*//g&#x27; -e &#x27;/^$/d&#x27;                  # 删除掉@后面所有字符，和空行</span><br><span class=\"line\">        sed -n -e &quot;&#123;s/^ *[0-9]*//p&#125;&quot;                  # 打印并删除正则表达式的那部分内容</span><br><span class=\"line\">        echo abcd|sed &#x27;y/bd/BE/&#x27;                      # 匹配字符替换</span><br><span class=\"line\">        sed &#x27;/^#/b;y/y/P/&#x27; 2                          # 非#号开头的行替换字符</span><br><span class=\"line\">        sed &#x27;/suan/r readfile&#x27;                        # 找到含suan的行，在后面加上读入的文件内容</span><br><span class=\"line\">        sed -n &#x27;/no/w writefile&#x27;                      # 找到含no的行，写入到指定文件中</span><br><span class=\"line\">        sed &#x27;/regex/G&#x27;                                # 在匹配式样行之后插入一空行</span><br><span class=\"line\">        sed &#x27;/regex/&#123;x;p;x;G;&#125;&#x27;                       # 在匹配式样行之前和之后各插入一空行</span><br><span class=\"line\">        sed &#x27;n;d&#x27;                                     # 删除所有偶数行</span><br><span class=\"line\">        sed &#x27;G;G&#x27;                                     # 在每一行后面增加两空行</span><br><span class=\"line\">        sed &#x27;/^$/d;G&#x27;                                 # 在输出的文本中每一行后面将有且只有一空行</span><br><span class=\"line\">        sed &#x27;n;n;n;n;G;&#x27;                              # 在每5行后增加一空白行</span><br><span class=\"line\">        sed -n &#x27;5~5p&#x27;                                 # 只打印行号为5的倍数</span><br><span class=\"line\">        seq 1 30|sed  &#x27;5~5s/.*/a/&#x27;                    # 倍数行执行替换</span><br><span class=\"line\">        sed -n &#x27;3,$&#123;p;n;n;n;n;n;n;&#125;&#x27;                  # 从第3行开始，每7行显示一次</span><br><span class=\"line\">        sed -n &#x27;h;n;G;p&#x27;                              # 奇偶调换</span><br><span class=\"line\">        seq 1 10|sed &#x27;1!G;h;$!d&#x27;                      # 倒叙排列</span><br><span class=\"line\">        ls -l|sed -n &#x27;/^.rwx.*/p&#x27;                     # 查找属主权限为7的文件</span><br><span class=\"line\">        sed = filename | sed &#x27;N;s/\\n/\\t/&#x27;             # 为文件中的每一行进行编号(简单的左对齐方式)</span><br><span class=\"line\">        sed &#x27;s/^[ \\t]*//&#x27;                             # 将每一行前导的&quot;空白字符&quot;(空格，制表符)删除,使之左对齐</span><br><span class=\"line\">        sed &#x27;s/^[ \\t]*//;s/[ \\t]*$//&#x27;                 # 将每一行中的前导和拖尾的空白字符删除</span><br><span class=\"line\">        sed &#x27;/&#123;abc,def\\&#125;\\/\\[111,222]/s/^/00000/&#x27;      # 匹配需要转行的字符: &#125; / [</span><br><span class=\"line\">        echo abcd\\\\nabcde |sed &#x27;s/\\\\n/@/g&#x27; |tr &#x27;@&#x27; &#x27;\\n&#x27;        # 将换行符转换为换行</span><br><span class=\"line\">        cat tmp|awk &#x27;&#123;print $1&#125;&#x27;|sort -n|sed -n &#x27;$p&#x27;           # 取一列最大值</span><br><span class=\"line\">        sed -n &#x27;&#123;s/^[^\\/]*//;s/\\:.*//;p&#125;&#x27; /etc/passwd          # 取用户家目录(匹配不为/的字符和匹配:到结尾的字符全部删除)</span><br><span class=\"line\">        sed = filename | sed &#x27;N;s/^/      /; s/ *\\(.\\&#123;6,\\&#125;\\)\\n/\\1   /&#x27;   # 对文件中的所有行编号(行号在左，文字右端对齐)</span><br><span class=\"line\">        /sbin/ifconfig |sed &#x27;s/.*inet addr:\\(.*\\) Bca.*/\\1/g&#x27; |sed -n &#x27;/eth/&#123;n;p&#125;&#x27;   # 取所有IP</span><br><span class=\"line\">        修改keepalive配置剔除后端服务器&#123;</span><br><span class=\"line\">            sed -i &#x27;/real_server.*10.0.1.158.*8888/,+8 s/^/#/&#x27; keepalived.conf</span><br><span class=\"line\">            sed -i &#x27;/real_server.*10.0.1.158.*8888/,+8 s/^#//&#x27; keepalived.conf</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        模仿rev功能&#123;</span><br><span class=\"line\">            echo 123 |sed &#x27;/\\n/!G;s/\\(.\\)\\(.*\\n\\)/&amp;\\2\\1/;//D;s/.//;&#x27;</span><br><span class=\"line\">            /\\n/!G;         　　　　　　# 没有\\n换行符，要执行G,因为保留空间中为空，所以在模式空间追加一空行</span><br><span class=\"line\">            s/\\(.\\)\\(.*\\n\\)/&amp;\\2\\1/;     # 标签替换 &amp;\\n23\\n1$ (关键在于&amp; ,可以让后面//匹配到空行)</span><br><span class=\"line\">            //D;            　　　　　　# D 命令会引起循环删除模式空间中的第一部分，如果删除后，模式空间中还有剩余行，则返回 D 之前的命令，重新执行，如果 D 后，模式空间中没有任何内容，则将退出。  //D 匹配空行执行D,如果上句s没有匹配到,//也无法匹配到空行, &quot;//D;&quot;命令结束</span><br><span class=\"line\">            s/.//;          　　　　　　# D结束后,删除开头的 \\n</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    xargs&#123;</span><br><span class=\"line\">        # 命令替换</span><br><span class=\"line\">        -t 先打印命令，然后再执行</span><br><span class=\"line\">        -i 用每项替换 &#123;&#125;</span><br><span class=\"line\">        find / -perm +7000 | xargs ls -l                    # 将前面的内容，作为后面命令的参数</span><br><span class=\"line\">        seq 1 10 |xargs  -i date -d &quot;&#123;&#125; days &quot; +%Y-%m-%d    # 列出10天日期</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\tfind /data/records/ -mtime +3 -name &quot;*-*-*-*-*&quot;|xargs rm -rf</span><br><span class=\"line\">\t*/5 * * * * find /data/record/tmp -mmin +120 |grep -E &quot;.jpg|.mp4|.txt|.jpg|.ts|.m3u8|.png&quot;|xargs rm -f   ### 每隔5分钟，删除带有指定后缀且超过120分钟以上的文件</span><br><span class=\"line\">\tfind /data/website*/storage/logs/ -mmin +360 -size +5G -name &quot;*.log&quot;|xargs -I &#123;&#125; truncate -s 0 &#123;&#125;</span><br><span class=\"line\">    find /data/website*/storage/logs/ -mtime +1 -size +10M -name &quot;*.log&quot;|xargs gzip -9</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">    dialog菜单&#123;</span><br><span class=\"line\">        # 默认将所有输出用 stderr 输出，不显示到屏幕   使用参数  --stdout 可将选择赋给变量</span><br><span class=\"line\">        # 退出状态  0正确  1错误</span><br><span class=\"line\">        窗体类型&#123;</span><br><span class=\"line\">            --calendar          # 日历</span><br><span class=\"line\">            --checklist         # 允许你显示一个选项列表，每个选项都可以被单独的选择 (复选框)</span><br><span class=\"line\">            --form              # 表单,允许您建立一个带标签的文本字段，并要求填写</span><br><span class=\"line\">            --fselect           # 提供一个路径，让你选择浏览的文件</span><br><span class=\"line\">            --gauge             # 显示一个表，呈现出完成的百分比，就是显示出进度条。</span><br><span class=\"line\">            --infobox           # 显示消息后，（没有等待响应）对话框立刻返回，但不清除屏幕(信息框)</span><br><span class=\"line\">            --inputbox          # 让用户输入文本(输入框)</span><br><span class=\"line\">            --inputmenu         # 提供一个可供用户编辑的菜单（可编辑的菜单框）</span><br><span class=\"line\">            --menu              # 显示一个列表供用户选择(菜单框)</span><br><span class=\"line\">            --msgbox(message)   # 显示一条消息,并要求用户选择一个确定按钮(消息框)</span><br><span class=\"line\">            --password          # 密码框，显示一个输入框，它隐藏文本</span><br><span class=\"line\">            --pause             # 显示一个表格用来显示一个指定的暂停期的状态</span><br><span class=\"line\">            --radiolist         # 提供一个菜单项目组，但是只有一个项目，可以选择(单选框)</span><br><span class=\"line\">            --tailbox           # 在一个滚动窗口文件中使用tail命令来显示文本</span><br><span class=\"line\">            --tailboxbg         # 跟tailbox类似，但是在background模式下操作</span><br><span class=\"line\">            --textbox           # 在带有滚动条的文本框中显示文件的内容  (文本框)</span><br><span class=\"line\">            --timebox           # 提供一个窗口，选择小时，分钟，秒</span><br><span class=\"line\">            --yesno(yes/no)     # 提供一个带有yes和no按钮的简单信息框</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        窗体参数&#123;</span><br><span class=\"line\">            --separate-output          # 对于chicklist组件,输出结果一次输出一行,得到结果不加引号</span><br><span class=\"line\">            --ok-label &quot;提交&quot;          # 确定按钮名称</span><br><span class=\"line\">            --cancel-label &quot;取消&quot;      # 取消按钮名称</span><br><span class=\"line\">            --title &quot;标题&quot;             # 标题名称</span><br><span class=\"line\">            --stdout                   # 将所有输出用 stdout 输出</span><br><span class=\"line\">            --backtitle &quot;上标&quot;         # 窗体上标</span><br><span class=\"line\">            --no-shadow                # 去掉窗体阴影</span><br><span class=\"line\">            --menu &quot;菜单名&quot; 20 60 14   # 菜单及窗口大小</span><br><span class=\"line\">            --clear                    # 完成后清屏操作</span><br><span class=\"line\">            --no-cancel                # 不显示取消项</span><br><span class=\"line\">            --insecure                 # 使用星号来代表每个字符</span><br><span class=\"line\">            --begin &lt;y&gt; &lt;x&gt;            # 指定对话框左上角在屏幕的上的做坐标</span><br><span class=\"line\">            --timeout &lt;秒&gt;             # 超时,返回的错误代码255,如果用户在指定的时间内没有给出相应动作,就按超时处理</span><br><span class=\"line\">            --defaultno                # 使选择默认为no</span><br><span class=\"line\">            --default-item &lt;str&gt;       # 设置在一份清单，表格或菜单中的默认项目。通常在框中的第一项是默认</span><br><span class=\"line\">            --sleep 5                  # 在处理完一个对话框后静止(延迟)的时间(秒)</span><br><span class=\"line\">            --max-input size           # 限制输入的字符串在给定的大小之内。如果没有指定，默认是2048</span><br><span class=\"line\">            --keep-window              # 退出时不清屏和重绘窗口。当几个组件在同一个程序中运行时，对于保留窗口内容很有用的</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dialog --title &quot;Check me&quot; --checklist &quot;Pick Numbers&quot; 15 25 3 1 &quot;one&quot; &quot;off&quot; 2 &quot;two&quot; &quot;on&quot;         # 多选界面[方括号]</span><br><span class=\"line\">        dialog --title &quot;title&quot; --radiolist &quot;checklist&quot; 20 60 14 tag1 &quot;item1&quot; on tag2 &quot;item2&quot; off        # 单选界面(圆括号)</span><br><span class=\"line\">        dialog --title &quot;title&quot; --menu &quot;MENU&quot; 20 60 14 tag1 &quot;item1&quot; tag2 &quot;item2&quot;                         # 单选界面</span><br><span class=\"line\">        dialog --title &quot;Installation&quot; --backtitle &quot;Star Linux&quot; --gauge &quot;Linux Kernel&quot;  10 60 50         # 进度条</span><br><span class=\"line\">        dialog --title &quot;标题&quot; --backtitle &quot;Dialog&quot; --yesno &quot;说明&quot; 20 60                                 # 选择yes/no</span><br><span class=\"line\">        dialog --title &quot;公告标题&quot; --backtitle &quot;Dialog&quot; --msgbox &quot;内容&quot; 20 60                            # 公告</span><br><span class=\"line\">        dialog --title &quot;hey&quot; --backtitle &quot;Dialog&quot; --infobox &quot;Is everything okay?&quot; 10 60                 # 显示讯息后立即离开</span><br><span class=\"line\">        dialog --title &quot;hey&quot; --backtitle &quot;Dialog&quot; --inputbox &quot;Is okay?&quot; 10 60 &quot;yes&quot;                     # 输入对话框</span><br><span class=\"line\">        dialog --title &quot;Array 30&quot; --backtitle &quot;All &quot; --textbox /root/txt 20 75                          # 显示文档内容</span><br><span class=\"line\">        dialog --title &quot;Add&quot; --form &quot;input&quot; 12 40 4 &quot;user&quot; 1 1 &quot;&quot; 1 15 15 0 &quot;name&quot; 2 1 &quot;&quot; 2 15 15 0     # 多条输入对话框</span><br><span class=\"line\">        dialog --title  &quot;Password&quot;  --insecure  --passwordbox  &quot;请输入密码&quot;  10  35                     # 星号显示输入--insecure</span><br><span class=\"line\">        dialog --stdout --title &quot;日历&quot;  --calendar &quot;请选择&quot; 0 0 9 1 2010                                # 选择日期</span><br><span class=\"line\">        dialog --title &quot;title&quot; --menu &quot;MENU&quot; 20 60 14 tag1 &quot;item1&quot; tag2 &quot;item2&quot; 2&gt;tmp                   # 取到结果放到文件中(以标准错误输出结果)</span><br><span class=\"line\">        a=`dialog --title &quot;title&quot;  --stdout --menu &quot;MENU&quot; 20 60 14 tag1 &quot;item1&quot; tag2 &quot;item2&quot;`           # 选择操作赋给变量(使用标准输出)</span><br><span class=\"line\">        dialog菜单实例&#123;</span><br><span class=\"line\">            while :</span><br><span class=\"line\">            do</span><br><span class=\"line\">            clear</span><br><span class=\"line\">            menu=`dialog --title &quot;title&quot;  --stdout --menu &quot;MENU&quot; 20 60 14 1 system 2 custom`</span><br><span class=\"line\">            [ $? -eq 0 ] &amp;&amp; echo &quot;$menu&quot; || exit         # 判断dialog执行,取消退出</span><br><span class=\"line\">                while :</span><br><span class=\"line\">                do</span><br><span class=\"line\">                    case $menu in</span><br><span class=\"line\">                    1)</span><br><span class=\"line\">                        list=&quot;1a &quot;item1&quot; 2a &quot;item2&quot;&quot;     # 定义菜单列表变量</span><br><span class=\"line\">                    ;;</span><br><span class=\"line\">                    2)</span><br><span class=\"line\">                        list=&quot;1b &quot;item3&quot; 2b &quot;item4&quot;&quot;</span><br><span class=\"line\">                    ;;</span><br><span class=\"line\">                    esac</span><br><span class=\"line\">                    result=`dialog --title &quot;title&quot;  --stdout --menu &quot;MENU&quot; 20 60 14 $list`</span><br><span class=\"line\">                    [ $? -eq 0 ] &amp;&amp; echo &quot;$result&quot; || break    # 判断dialog执行,取消返回菜单,注意:配合上层菜单循环</span><br><span class=\"line\">                    read</span><br><span class=\"line\">                done</span><br><span class=\"line\">            done</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    select菜单&#123;</span><br><span class=\"line\">        # 输入项不在菜单自动会提示重新输入</span><br><span class=\"line\">        select menuitem in pick1 pick2 pick3 退出</span><br><span class=\"line\">        do</span><br><span class=\"line\">            echo $menuitem</span><br><span class=\"line\">            case $menuitem in</span><br><span class=\"line\">            退出)</span><br><span class=\"line\">                exit</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">            *)</span><br><span class=\"line\">                select area in area1 area2 area3 返回</span><br><span class=\"line\">                do</span><br><span class=\"line\">                    echo $area</span><br><span class=\"line\">                    case $area in</span><br><span class=\"line\">                    返回)</span><br><span class=\"line\">                        break</span><br><span class=\"line\">                    ;;</span><br><span class=\"line\">                    *)</span><br><span class=\"line\">                        echo &quot;对$area操作&quot;</span><br><span class=\"line\">                    ;;</span><br><span class=\"line\">                    esac</span><br><span class=\"line\">                done</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">            esac</span><br><span class=\"line\">        done</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    shift&#123;</span><br><span class=\"line\">        ./cs.sh 1 2 3</span><br><span class=\"line\">        #!/bin/sh</span><br><span class=\"line\">        until [ $# -eq 0 ]</span><br><span class=\"line\">        do</span><br><span class=\"line\">            echo &quot;第一个参数为: $1 参数个数为: $#&quot;</span><br><span class=\"line\">            #shift 命令执行前变量 $1 的值在shift命令执行后不可用</span><br><span class=\"line\">            shift</span><br><span class=\"line\">        done</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    getopts给脚本加参数&#123;</span><br><span class=\"line\">        #!/bin/sh</span><br><span class=\"line\">        while getopts :ab: name</span><br><span class=\"line\">        do</span><br><span class=\"line\">            case $name in</span><br><span class=\"line\">            a)</span><br><span class=\"line\">                aflag=1</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">            b)</span><br><span class=\"line\">                bflag=1</span><br><span class=\"line\">                bval=$OPTARG</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">            \\?)</span><br><span class=\"line\">                echo &quot;USAGE:`basename $0` [-a] [-b value]&quot;</span><br><span class=\"line\">                exit  1</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">            esac</span><br><span class=\"line\">        done</span><br><span class=\"line\">        if [ ! -z $aflag ] ; then</span><br><span class=\"line\">            echo &quot;option -a specified&quot;</span><br><span class=\"line\">            echo &quot;$aflag&quot;</span><br><span class=\"line\">            echo &quot;$OPTIND&quot;</span><br><span class=\"line\">        fi</span><br><span class=\"line\">        if [ ! -z $bflag ] ; then</span><br><span class=\"line\">            echo  &quot;option -b specified&quot;</span><br><span class=\"line\">            echo  &quot;$bflag&quot;</span><br><span class=\"line\">            echo  &quot;$bval&quot;</span><br><span class=\"line\">            echo  &quot;$OPTIND&quot;</span><br><span class=\"line\">        fi</span><br><span class=\"line\">        echo &quot;here  $OPTIND&quot;</span><br><span class=\"line\">        shift $(($OPTIND -1))</span><br><span class=\"line\">        echo &quot;$OPTIND&quot;</span><br><span class=\"line\">        echo &quot; `shift $(($OPTIND -1))`  &quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tclsh&#123;</span><br><span class=\"line\">        set foo &quot;a bc&quot;                   # 定义变量</span><br><span class=\"line\">        set b &#123;$a&#125;;                      # 转义  b的值为&quot; $a &quot; ,而不是变量结果</span><br><span class=\"line\">        set a 3; incr a 3;               # 数字的自增.  将a加3,如果要减3,则为 incr a –3;</span><br><span class=\"line\">        set c [expr 20/5];               # 计算  c的值为4</span><br><span class=\"line\">        puts $foo;                       # 打印变量</span><br><span class=\"line\">        set qian(123) f;                 # 定义数组</span><br><span class=\"line\">        set qian(1,1,1) fs;              # 多维数组</span><br><span class=\"line\">        parray qian;                     # 打印数组的所有信息</span><br><span class=\"line\">        string length $qian;             # 将返回变量qian的长度</span><br><span class=\"line\">        string option string1 string2;   # 字符相关串操作</span><br><span class=\"line\">        # option 的操作选项:</span><br><span class=\"line\">        # compare           按照字典的排序方式进行比较。根据string1 &lt;,=,&gt;string2分别返回-1,0,1</span><br><span class=\"line\">        # first             返回string2中第一次出现string1的位置，如果没有出现string1则返回-1</span><br><span class=\"line\">        # last              和first相反</span><br><span class=\"line\">        # trim              从string1中删除开头和结尾的出现在string2中的字符</span><br><span class=\"line\">        # tolower           返回string1中的所有字符被转换为小写字符后的新字符串</span><br><span class=\"line\">        # toupper           返回string1中的所有字符串转换为大写后的字符串</span><br><span class=\"line\">        # length            返回string1的长度</span><br><span class=\"line\">        set a 1;while &#123;$a &lt; 3&#125; &#123; set a [incr a 1;]; &#125;;puts $a    # 判断变量a小于3既循环</span><br><span class=\"line\">        for &#123;initialization&#125; &#123;condition&#125; &#123;increment&#125; &#123;body&#125;      # 初始化变量,条件,增量,具体操作</span><br><span class=\"line\">        for &#123;set i 0&#125; &#123;$i &lt; 10&#125; &#123;incr i&#125; &#123;puts $i;&#125;              # 将打印出0到9</span><br><span class=\"line\">        if &#123; 表达式 &#125; &#123;</span><br><span class=\"line\">             #运算;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">             #其他运算;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        switch $x &#123;</span><br><span class=\"line\">            字符串1 &#123; 操作1 ;&#125;</span><br><span class=\"line\">            字符串2 &#123; 操作2 ;&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        foreach element &#123;0 m n b v&#125; &#123;</span><br><span class=\"line\">        # 将在一组变元中进行循环，并且每次都将执行他的循环体</span><br><span class=\"line\">               switch $element &#123;</span><br><span class=\"line\">                     # 判断element的值</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        expect交互&#123;</span><br><span class=\"line\">            exp_continue         # 多个spawn命令时并行</span><br><span class=\"line\">            interact             # 执行完成后保持交互状态，把控制权交给控制台</span><br><span class=\"line\">            expect &quot;password:&quot;   # 判断关键字符</span><br><span class=\"line\">            send &quot;passwd\\r&quot;      # 执行交互动作，与手工输入密码的动作等效。字符串结尾加&quot;\\r&quot;</span><br><span class=\"line\">            ssh后sudo&#123;</span><br><span class=\"line\">                #!/bin/bash</span><br><span class=\"line\">                #sudo注释下行允许后台运行</span><br><span class=\"line\">                #Defaults requiretty</span><br><span class=\"line\">                #sudo去掉!允许远程</span><br><span class=\"line\">                #Defaults !visiblepw</span><br><span class=\"line\">                /usr/bin/expect -c &#x27;</span><br><span class=\"line\">                set timeout 5</span><br><span class=\"line\">                spawn ssh -o StrictHostKeyChecking=no xuesong1@192.168.42.128 &quot;sudo grep xuesong1 /etc/passwd&quot;</span><br><span class=\"line\">                expect &#123;</span><br><span class=\"line\">                    &quot;passphrase&quot; &#123;</span><br><span class=\"line\">                        send_user &quot;sshkey\\n&quot;</span><br><span class=\"line\">                        send &quot;xuesong\\r&quot;;</span><br><span class=\"line\">                        expect &#123;</span><br><span class=\"line\">                            &quot;sudo&quot; &#123;</span><br><span class=\"line\">                            send_user &quot;sudo\\n&quot;</span><br><span class=\"line\">                            send &quot;xuesong\\r&quot;</span><br><span class=\"line\">                            interact</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            eof &#123;</span><br><span class=\"line\">                            send_user &quot;sudo eof\\n&quot;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    &quot;password:&quot; &#123;</span><br><span class=\"line\">                        send_user &quot;ssh\\n&quot;</span><br><span class=\"line\">                        send &quot;xuesong\\r&quot;;</span><br><span class=\"line\">                        expect &#123;</span><br><span class=\"line\">                            &quot;sudo&quot; &#123;</span><br><span class=\"line\">                            send_user &quot;sudo\\n&quot;</span><br><span class=\"line\">                            send &quot;xuesong\\r&quot;</span><br><span class=\"line\">                            interact</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            eof &#123;</span><br><span class=\"line\">                            send_user &quot;sudo eof\\n&quot;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    &quot;sudo&quot; &#123;</span><br><span class=\"line\">                            send_user &quot;sudo\\n&quot;</span><br><span class=\"line\">                            send &quot;xuesong\\r&quot;</span><br><span class=\"line\">                            interact</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                    eof &#123;</span><br><span class=\"line\">                        send_user &quot;ssh eof\\n&quot;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                &#x27;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ssh执行命令操作&#123;</span><br><span class=\"line\">                /usr/bin/expect -c &quot;</span><br><span class=\"line\">                proc jiaohu &#123;&#125; &#123;</span><br><span class=\"line\">                    send_user expect_start</span><br><span class=\"line\">                    expect &#123;</span><br><span class=\"line\">                        password &#123;</span><br><span class=\"line\">                            send $&#123;RemotePasswd&#125;\\r;</span><br><span class=\"line\">                            send_user expect_eof</span><br><span class=\"line\">                            expect &#123;</span><br><span class=\"line\">                                \\&quot;does not exist\\&quot; &#123;</span><br><span class=\"line\">                                    send_user expect_failure</span><br><span class=\"line\">                                    exit 10</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                password &#123;</span><br><span class=\"line\">                                    send_user expect_failure</span><br><span class=\"line\">                                    exit 5</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                Password &#123;</span><br><span class=\"line\">                                    send $&#123;RemoteRootPasswd&#125;\\r;</span><br><span class=\"line\">                                    send_user expect_eof</span><br><span class=\"line\">                                    expect &#123;</span><br><span class=\"line\">                                        incorrect &#123;</span><br><span class=\"line\">                                            send_user expect_failure</span><br><span class=\"line\">                                            exit 6</span><br><span class=\"line\">                                        &#125;</span><br><span class=\"line\">                                        eof</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                eof</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        passphrase &#123;</span><br><span class=\"line\">                            send $&#123;KeyPasswd&#125;\\r;</span><br><span class=\"line\">                            send_user expect_eof</span><br><span class=\"line\">                            expect &#123;</span><br><span class=\"line\">                                \\&quot;does not exist\\&quot; &#123;</span><br><span class=\"line\">                                    send_user expect_failure</span><br><span class=\"line\">                                    exit 10</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                passphrase&#123;</span><br><span class=\"line\">                                    send_user expect_failure</span><br><span class=\"line\">                                    exit 7</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                Password &#123;</span><br><span class=\"line\">                                    send $&#123;RemoteRootPasswd&#125;\\r;</span><br><span class=\"line\">                                    send_user expect_eof</span><br><span class=\"line\">                                    expect &#123;</span><br><span class=\"line\">                                        incorrect &#123;</span><br><span class=\"line\">                                            send_user expect_failure</span><br><span class=\"line\">                                            exit 6</span><br><span class=\"line\">                                        &#125;</span><br><span class=\"line\">                                        eof</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                eof</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        Password &#123;</span><br><span class=\"line\">                            send $&#123;RemoteRootPasswd&#125;\\r;</span><br><span class=\"line\">                            send_user expect_eof</span><br><span class=\"line\">                            expect &#123;</span><br><span class=\"line\">                                incorrect &#123;</span><br><span class=\"line\">                                    send_user expect_failure</span><br><span class=\"line\">                                    exit 6</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                eof</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        \\&quot;No route to host\\&quot; &#123;</span><br><span class=\"line\">                            send_user expect_failure</span><br><span class=\"line\">                            exit 4</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        \\&quot;Invalid argument\\&quot; &#123;</span><br><span class=\"line\">                            send_user expect_failure</span><br><span class=\"line\">                            exit 8</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        \\&quot;Connection refused\\&quot; &#123;</span><br><span class=\"line\">                            send_user expect_failure</span><br><span class=\"line\">                            exit 9</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        \\&quot;does not exist\\&quot; &#123;</span><br><span class=\"line\">                            send_user expect_failure</span><br><span class=\"line\">                            exit 10</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        \\&quot;Connection timed out\\&quot; &#123;</span><br><span class=\"line\">                            send_user expect_failure</span><br><span class=\"line\">                            exit 11</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        timeout &#123;</span><br><span class=\"line\">                            send_user expect_failure</span><br><span class=\"line\">                            exit 3</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        eof</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                set timeout $TimeOut</span><br><span class=\"line\">                switch $1 &#123;</span><br><span class=\"line\">                    Ssh_Cmd &#123;</span><br><span class=\"line\">                        spawn ssh -t -p $Port -o StrictHostKeyChecking=no $RemoteUser@$Ip /bin/su - root -c \\\\\\&quot;$Cmd\\\\\\&quot;</span><br><span class=\"line\">                        jiaohu</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    Ssh_Script &#123;</span><br><span class=\"line\">                        spawn scp -P $Port -o StrictHostKeyChecking=no $ScriptPath $RemoteUser@$Ip:/tmp/$&#123;ScriptPath##*/&#125;;</span><br><span class=\"line\">                        jiaohu</span><br><span class=\"line\">                        spawn ssh -t -p $Port -o StrictHostKeyChecking=no $RemoteUser@$Ip /bin/su - root -c  \\\\\\&quot;/bin/sh /tmp/$&#123;ScriptPath##*/&#125;\\\\\\&quot; ;</span><br><span class=\"line\">                        jiaohu</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    Scp_File &#123;</span><br><span class=\"line\">                        spawn scp -P $Port -o StrictHostKeyChecking=no -r $ScpPath $RemoteUser@$Ip:$&#123;ScpRemotePath&#125;;</span><br><span class=\"line\">                        jiaohu</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                &quot;</span><br><span class=\"line\">                state=`echo $?`</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            交互双引号引用较长变量&#123;</span><br><span class=\"line\">                #!/bin/bash</span><br><span class=\"line\">                RemoteUser=xuesong12</span><br><span class=\"line\">                Ip=192.168.1.2</span><br><span class=\"line\">                RemotePasswd=xuesong</span><br><span class=\"line\">                Cmd=&quot;/bin/echo &quot;$PubKey&quot; &gt; &quot;$RemoteKey&quot;/authorized_keys&quot;</span><br><span class=\"line\">                /usr/bin/expect -c &quot;</span><br><span class=\"line\">                set timeout 10</span><br><span class=\"line\">                spawn ssh -o StrictHostKeyChecking=no $RemoteUser@$Ip &#123;$Cmd&#125;;</span><br><span class=\"line\">                expect &#123;</span><br><span class=\"line\">                    password: &#123;</span><br><span class=\"line\">                        send_user RemotePasswd\\n</span><br><span class=\"line\">                        send $&#123;RemotePasswd&#125;\\r;</span><br><span class=\"line\">                        interact;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    eof &#123;</span><br><span class=\"line\">                        send_user eof\\n</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                &quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            telnet交互&#123;</span><br><span class=\"line\">                #!/bin/bash</span><br><span class=\"line\">                Ip=&quot;10.0.1.53&quot;</span><br><span class=\"line\">                a=&quot;\\&#123;\\&#x27;method\\&#x27;\\:\\&#x27;doLogin\\&#x27;\\,\\&#x27;params\\&#x27;\\:\\&#123;\\&#x27;uName\\&#x27;\\:\\&#x27;bobbietest\\&#x27;\\&#125;&quot;</span><br><span class=\"line\">                /usr/bin/expect -c&quot;</span><br><span class=\"line\">                        set timeout 15</span><br><span class=\"line\">                        spawn telnet $&#123;Ip&#125; 8000</span><br><span class=\"line\">                        expect &quot;Escape&quot;</span><br><span class=\"line\">                        send &quot;$&#123;a&#125;\\\\r&quot;</span><br><span class=\"line\">                        expect &#123;</span><br><span class=\"line\">                                -re &quot;\\&quot;err.*none\\&quot;&quot; &#123;</span><br><span class=\"line\">                                        exit 0</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                timeout &#123;</span><br><span class=\"line\">                                        exit 1</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                eof &#123;</span><br><span class=\"line\">                                        exit 2</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                &quot;</span><br><span class=\"line\">                echo $?</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            模拟ssh登录&#123;</span><br><span class=\"line\">                #好处:可加载环境变量</span><br><span class=\"line\">                #!/bin/bash</span><br><span class=\"line\">                Ip=&#x27;192.168.1.6&#x27;            # 循环就行</span><br><span class=\"line\">                RemoteUser=&#x27;user&#x27;           # 普通用户</span><br><span class=\"line\">                RemotePasswd=&#x27;userpasswd&#x27;   # 普通用户的密码</span><br><span class=\"line\">                RemoteRootPasswd=&#x27;rootpasswd&#x27;</span><br><span class=\"line\">                /usr/bin/expect -c &quot;</span><br><span class=\"line\">                set timeout -1</span><br><span class=\"line\">                spawn ssh -t -p $Port -o StrictHostKeyChecking=no $RemoteUser@$Ip</span><br><span class=\"line\">                expect &#123;</span><br><span class=\"line\">                    password &#123;</span><br><span class=\"line\">                        send_user RemotePasswd</span><br><span class=\"line\">                        send $&#123;RemotePasswd&#125;\\r;</span><br><span class=\"line\">                        expect &#123;</span><br><span class=\"line\">                            \\&quot;does not exist\\&quot; &#123;</span><br><span class=\"line\">                                send_user \\&quot;root user does not exist\\n\\&quot;</span><br><span class=\"line\">                                exit 10</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            password &#123;</span><br><span class=\"line\">                                send_user \\&quot;user passwd error\\n\\&quot;</span><br><span class=\"line\">                                exit 5</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            Last &#123;</span><br><span class=\"line\">                                send \\&quot;su - batch\\n\\&quot;</span><br><span class=\"line\">                                expect &#123;</span><br><span class=\"line\">                                    Password &#123;</span><br><span class=\"line\">                                        send_user RemoteRootPasswd</span><br><span class=\"line\">                                        send $&#123;RemoteRootPasswd&#125;\\r;</span><br><span class=\"line\">                                        expect &#123;</span><br><span class=\"line\">                                            \\&quot;]#\\&quot; &#123;</span><br><span class=\"line\">                                                send \\&quot;sh /tmp/update.sh update\\n \\&quot;</span><br><span class=\"line\">                                                expect &#123;</span><br><span class=\"line\">                                                    \\&quot;]#\\&quot; &#123;</span><br><span class=\"line\">                                                        send_user $&#123;Ip&#125;_Update_Done\\n</span><br><span class=\"line\">                                                    &#125;</span><br><span class=\"line\">                                                    eof</span><br><span class=\"line\">                                                &#125;</span><br><span class=\"line\">                                            &#125;</span><br><span class=\"line\">                                        &#125;</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    \\&quot;No route to host\\&quot; &#123;</span><br><span class=\"line\">                        send_user \\&quot;host not found\\n\\&quot;</span><br><span class=\"line\">                        exit 4</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    \\&quot;Invalid argument\\&quot; &#123;</span><br><span class=\"line\">                        send_user \\&quot;incorrect parameter\\n\\&quot;</span><br><span class=\"line\">                        exit 8</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    \\&quot;Connection refused\\&quot; &#123;</span><br><span class=\"line\">                        send_user \\&quot;invalid port parameters\\n\\&quot;</span><br><span class=\"line\">                        exit 9</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    \\&quot;does not exist\\&quot; &#123;</span><br><span class=\"line\">                        send_user \\&quot;root user does not exist\\&quot;</span><br><span class=\"line\">                        exit 10</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    timeout &#123;</span><br><span class=\"line\">                        send_user \\&quot;connection timeout \\n\\&quot;</span><br><span class=\"line\">                        exit 3</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    eof</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                &quot;</span><br><span class=\"line\">                state=`echo $?`</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">9 实例&#123;</span><br><span class=\"line\">    从1叠加到100&#123;</span><br><span class=\"line\">        echo $[$(echo +&#123;1..100&#125;)]</span><br><span class=\"line\">        echo $[(100+1)*(100/2)]</span><br><span class=\"line\">        seq -s &#x27;+&#x27; 100 |bc</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    判断参数是否为空-空退出并打印null&#123;</span><br><span class=\"line\">        #!/bin/sh</span><br><span class=\"line\">        echo $1</span><br><span class=\"line\">        name=$&#123;1:?&quot;null&quot;&#125;</span><br><span class=\"line\">        echo $name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    循环数组&#123;</span><br><span class=\"line\">        for ((i=0;i&lt;$&#123;#o[*]&#125;;i++))</span><br><span class=\"line\">        do</span><br><span class=\"line\">            echo $&#123;o[$i]&#125;</span><br><span class=\"line\">        done</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    判断路径&#123;</span><br><span class=\"line\">        if [ -d /root/Desktop/text/123 ];then</span><br><span class=\"line\">            echo &quot;找到了123&quot;</span><br><span class=\"line\">            if [ -d /root/Desktop/text ]</span><br><span class=\"line\">            then echo &quot;找到了text&quot;</span><br><span class=\"line\">            else echo &quot;没找到text&quot;</span><br><span class=\"line\">            fi</span><br><span class=\"line\">        else echo &quot;没找到123文件夹&quot;</span><br><span class=\"line\">        fi</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    找出出现次数最多&#123;</span><br><span class=\"line\">        awk &#x27;&#123;print $1&#125;&#x27; file|sort |uniq -c|sort -k1r</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t统计某一类进程占用内存总和&#123;</span><br><span class=\"line\">\t    ps aux|grep java|awk &#x27;&#123;sum +=$6&#125;;END &#123;print sum&#125;&#x27;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    判断脚本参数是否正确&#123;</span><br><span class=\"line\">        ./test.sh  -p 123 -P 3306 -h 127.0.0.1 -u root</span><br><span class=\"line\">        #!/bin/sh</span><br><span class=\"line\">        if [ $# -ne 8 ];then</span><br><span class=\"line\">            echo &quot;USAGE: $0 -u user -p passwd -P port -h host&quot;</span><br><span class=\"line\">            exit 1</span><br><span class=\"line\">        fi</span><br><span class=\"line\">        while getopts :u:p:P:h: name</span><br><span class=\"line\">        do</span><br><span class=\"line\">            case $name in</span><br><span class=\"line\">            u)</span><br><span class=\"line\">                mysql_user=$OPTARG</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">            p)</span><br><span class=\"line\">                mysql_passwd=$OPTARG</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">            P)</span><br><span class=\"line\">                mysql_port=$OPTARG</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">            h)</span><br><span class=\"line\">                mysql_host=$OPTARG</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">            *)</span><br><span class=\"line\">                echo &quot;USAGE: $0 -u user -p passwd -P port -h host&quot;</span><br><span class=\"line\">                exit 1</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">            esac</span><br><span class=\"line\">        done</span><br><span class=\"line\">        if [ -z $mysql_user ] || [ -z $mysql_passwd ] || [ -z $mysql_port ] || [ -z $mysql_host ]</span><br><span class=\"line\">        then</span><br><span class=\"line\">            echo &quot;USAGE: $0 -u user -p passwd -P port -h host&quot;</span><br><span class=\"line\">            exit 1</span><br><span class=\"line\">        fi</span><br><span class=\"line\">        echo $mysql_user $mysql_passwd $mysql_port  $mysql_host</span><br><span class=\"line\">        #结果 root 123 3306 127.0.0.1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    正则匹配邮箱&#123;</span><br><span class=\"line\">        ^[_a-z0-9-]+(\\.[_a-z0-9-]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*(\\.[a-z]&#123;2,4&#125;)$</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    打印表格&#123;</span><br><span class=\"line\">        #!/bin/sh</span><br><span class=\"line\">        clear</span><br><span class=\"line\">        awk &#x27;BEGIN&#123;</span><br><span class=\"line\">        print &quot;+--------------------+--------------------+&quot;;</span><br><span class=\"line\">        printf &quot;|%-20s|%-20s|\\n&quot;,&quot;Name&quot;,&quot;Number&quot;;</span><br><span class=\"line\">        print &quot;+--------------------+--------------------+&quot;;</span><br><span class=\"line\">        &#125;&#x27;</span><br><span class=\"line\">        a=`grep &quot;^[A-Z]&quot; a.txt |sort +1 -n |awk &#x27;&#123;print $1&quot;:&quot;$2&#125;&#x27;`</span><br><span class=\"line\">        #cat a.txt |sort +1 -n |while read list</span><br><span class=\"line\">        for list in $a</span><br><span class=\"line\">        do</span><br><span class=\"line\">            name=`echo $list |awk -F: &#x27;&#123;print $1&#125;&#x27;`</span><br><span class=\"line\">            number=`echo $list |awk -F: &#x27;&#123;print $2&#125;&#x27;`</span><br><span class=\"line\">            awk &#x27;BEGIN&#123;printf &quot;|%-20s|%-20s|\\n&quot;,&quot;&#x27;&quot;$name&quot;&#x27;&quot;,&quot;&#x27;&quot;$number&quot;&#x27;&quot;;</span><br><span class=\"line\">            print &quot;+--------------------+--------------------+&quot;;</span><br><span class=\"line\">            &#125;&#x27;</span><br><span class=\"line\">        done</span><br><span class=\"line\">        awk &#x27;BEGIN&#123;</span><br><span class=\"line\">        print &quot;              *** The End ***              &quot;</span><br><span class=\"line\">        print &quot;                                           &quot;</span><br><span class=\"line\">        &#125;&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    判断日期是否合法&#123;</span><br><span class=\"line\">        #!/bin/sh</span><br><span class=\"line\">        while read a</span><br><span class=\"line\">        do</span><br><span class=\"line\">          if echo $a | grep -q &quot;-&quot; &amp;&amp; date -d $a +%Y%m%d &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">          then</span><br><span class=\"line\">            if echo $a | grep -e &#x27;^[0-9]\\&#123;4\\&#125;-[01][0-9]-[0-3][0-9]$&#x27;</span><br><span class=\"line\">            then</span><br><span class=\"line\">                break</span><br><span class=\"line\">            else</span><br><span class=\"line\">                echo &quot;您输入的日期不合法，请从新输入！&quot;</span><br><span class=\"line\">            fi</span><br><span class=\"line\">          else</span><br><span class=\"line\">            echo &quot;您输入的日期不合法，请从新输入！&quot;</span><br><span class=\"line\">          fi</span><br><span class=\"line\">        done</span><br><span class=\"line\">        echo &quot;日期为$a&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    打印日期段所有日期&#123;</span><br><span class=\"line\">        #!/bin/bash</span><br><span class=\"line\">        qsrq=20010101</span><br><span class=\"line\">        jsrq=20010227</span><br><span class=\"line\">        n=0</span><br><span class=\"line\">        &gt;tmp</span><br><span class=\"line\">        while :;do</span><br><span class=\"line\">        current=$(date +%Y%m%d -d&quot;$n day $qsrq&quot;)</span><br><span class=\"line\">        if [[ $current == $jsrq ]];then</span><br><span class=\"line\">            echo $current &gt;&gt;tmp;break</span><br><span class=\"line\">        else</span><br><span class=\"line\">            echo $current &gt;&gt;tmp</span><br><span class=\"line\">            ((n++))</span><br><span class=\"line\">        fi</span><br><span class=\"line\">        done</span><br><span class=\"line\">        rq=`awk &#x27;NR==1&#123;print&#125;&#x27; tmp`</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    数学计算的小算法&#123;</span><br><span class=\"line\">        #!/bin/sh</span><br><span class=\"line\">        A=1</span><br><span class=\"line\">        B=1</span><br><span class=\"line\">        while [ $A -le 10 ]</span><br><span class=\"line\">        do</span><br><span class=\"line\">            SUM=`expr $A \\* $B`</span><br><span class=\"line\">            echo &quot;$SUM&quot;</span><br><span class=\"line\">            if [ $A = 10 ]</span><br><span class=\"line\">            then</span><br><span class=\"line\">                B=`expr $B + 1`</span><br><span class=\"line\">                A=1</span><br><span class=\"line\">            fi</span><br><span class=\"line\">            A=`expr $A + 1`</span><br><span class=\"line\">        done</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    多行合并&#123;</span><br><span class=\"line\">        sed &#x27;&#123;N;s/\\n//&#125;&#x27; file                   # 将两行合并一行(去掉换行符)</span><br><span class=\"line\">        awk &#x27;&#123;printf(NR%2!=0)?$0&quot; &quot;:$0&quot; \\n&quot;&#125;&#x27;   # 将两行合并一行</span><br><span class=\"line\">        awk &#x27;&#123;printf&quot;%s &quot;,$0&#125;&#x27;                  # 将所有行合并</span><br><span class=\"line\">        awk &#x27;&#123;if (NR%4==0)&#123;print $0&#125; else &#123;printf&quot;%s &quot;,$0&#125;&#125;&#x27; file    # 将4行合并为一行(可扩展)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    横竖转换&#123;</span><br><span class=\"line\">        cat a.txt | xargs           # 列转行</span><br><span class=\"line\">        cat a.txt | xargs -n1       # 行转列</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    竖行转横行&#123;</span><br><span class=\"line\">        cat file|tr &#x27;\\n&#x27; &#x27; &#x27;</span><br><span class=\"line\">        echo $(cat file)</span><br><span class=\"line\">        #!/bin/sh</span><br><span class=\"line\">        for i in `cat file`</span><br><span class=\"line\">        do</span><br><span class=\"line\">              a=$&#123;a&#125;&quot; &quot;$&#123;i&#125;</span><br><span class=\"line\">        done</span><br><span class=\"line\">        echo $a</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    取用户的根目录&#123;</span><br><span class=\"line\">        #! /bin/bash</span><br><span class=\"line\">        while read name pass uid gid gecos home shell</span><br><span class=\"line\">        do</span><br><span class=\"line\">            echo $home</span><br><span class=\"line\">        done &lt; /etc/passwd</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    远程打包&#123;</span><br><span class=\"line\">        ssh -n $ip &#x27;find &#x27;$path&#x27; /data /opt -type f  -name &quot;*.sh&quot; -or -name &quot;*.py&quot; -or -name &quot;*.pl&quot; |xargs tar zcvpf /tmp/data_backup.tar.gz&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    把汉字转成encode格式&#123;</span><br><span class=\"line\">        echo 论坛 | tr -d &quot;\\n&quot; | xxd -i | sed -e &quot;s/ 0x/%/g&quot; | tr -d &quot; ,\\n&quot;</span><br><span class=\"line\">        %c2%db%cc%b3</span><br><span class=\"line\">        echo 论坛 | tr -d &quot;\\n&quot; | xxd -i | sed -e &quot;s/ 0x/%/g&quot; | tr -d &quot; ,\\n&quot; | tr &quot;[a-f]&quot; &quot;[A-F]&quot;  # 大写的</span><br><span class=\"line\">        %C2%DB%CC%B3</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    把目录带有大写字母的文件名改为全部小写&#123;</span><br><span class=\"line\">        #!/bin/bash</span><br><span class=\"line\">        for f in *;do</span><br><span class=\"line\">            mv $f `echo $f |tr &quot;[A-Z]&quot; &quot;[a-z]&quot;`</span><br><span class=\"line\">        done</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    查找连续多行，在不连续的行前插入&#123;</span><br><span class=\"line\">        #/bin/bash</span><br><span class=\"line\">        lastrow=null</span><br><span class=\"line\">        i=0</span><br><span class=\"line\">        cat incl|while read line</span><br><span class=\"line\">        do</span><br><span class=\"line\">        i=`expr $i + 1`</span><br><span class=\"line\">        if echo &quot;$lastrow&quot; | grep &quot;#include &lt;[A-Z].h&gt;&quot;</span><br><span class=\"line\">        then</span><br><span class=\"line\">            if echo &quot;$line&quot; | grep -v  &quot;#include &lt;[A-Z].h&gt;&quot;</span><br><span class=\"line\">            then</span><br><span class=\"line\">                sed -i &#x27;&#x27;$i&#x27;i\\\\/\\/All header files are include&#x27; incl</span><br><span class=\"line\">                i=`expr $i + 1`</span><br><span class=\"line\">            fi</span><br><span class=\"line\">        fi</span><br><span class=\"line\">        lastrow=&quot;$line&quot;</span><br><span class=\"line\">        done</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    查询数据库其它引擎&#123;</span><br><span class=\"line\">        #/bin/bash</span><br><span class=\"line\">        path1=/data/mysql/data/</span><br><span class=\"line\">        dbpasswd=db123</span><br><span class=\"line\">        #MyISAM或InnoDB</span><br><span class=\"line\">        engine=InnoDB</span><br><span class=\"line\">        if [ -d $path1 ];then</span><br><span class=\"line\">        dir=`ls -p $path1 |awk &#x27;/\\/$/&#x27;|awk -F&#x27;/&#x27; &#x27;&#123;print $1&#125;&#x27;`</span><br><span class=\"line\">            for db in $dir</span><br><span class=\"line\">            do</span><br><span class=\"line\">            number=`mysql -uroot -p$dbpasswd -A -S &quot;$path1&quot;mysql.sock -e &quot;use $&#123;db&#125;;show table status;&quot; |grep -c $engine`</span><br><span class=\"line\">                if [ $number -ne 0 ];then</span><br><span class=\"line\">                echo &quot;$&#123;db&#125;&quot;</span><br><span class=\"line\">                fi</span><br><span class=\"line\">            done</span><br><span class=\"line\">        fi</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    批量修改数据库引擎&#123;</span><br><span class=\"line\">        #/bin/bash</span><br><span class=\"line\">        for db in test test1 test3</span><br><span class=\"line\">        do</span><br><span class=\"line\">            tables=`mysql -uroot -pdb123 -A -S /data/mysql/data/mysql.sock -e &quot;use $db;show tables;&quot; |awk &#x27;NR != 1&#123;print&#125;&#x27;`</span><br><span class=\"line\">            for table in $tables</span><br><span class=\"line\">            do</span><br><span class=\"line\">                mysql -uroot -pdb123 -A -S /data/mysql/data/mysql.sock -e &quot;use $db;alter table $table engine=MyISAM;&quot;</span><br><span class=\"line\">            done</span><br><span class=\"line\">        done</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    将shell取到的数据插入mysql数据库&#123;</span><br><span class=\"line\">        mysql -u$username -p$passwd -h$dbhost -P$dbport -A -e &quot;</span><br><span class=\"line\">        use $dbname;</span><br><span class=\"line\">        insert into data values (&#x27;&#x27;,&#x27;$ip&#x27;,&#x27;$date&#x27;,&#x27;$time&#x27;,&#x27;$data&#x27;)</span><br><span class=\"line\">        &quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    两日期间隔天数&#123;</span><br><span class=\"line\">        D1=`date -d &#x27;20070409&#x27; +&quot;%s&quot;`</span><br><span class=\"line\">        D2=`date -d &#x27;20070304 &#x27; +&quot;%s&quot;`</span><br><span class=\"line\">        D3=$(($D1 - $D2))</span><br><span class=\"line\">        echo $(($D3/60/60/24))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    while执行ssh只循环一次&#123;</span><br><span class=\"line\">        cat -    # 让cat读连接文件stdin的信息</span><br><span class=\"line\">        seq 10 | while read line; do ssh localhost &quot;cat -&quot;; done        # 显示的9次是被ssh吃掉的</span><br><span class=\"line\">        seq 10 | while read line; do ssh -n localhost &quot;cat -&quot;; done     # ssh加上-n参数可避免只循环一次</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ssh批量执行命令&#123;</span><br><span class=\"line\">        #版本1</span><br><span class=\"line\">        #!/bin/bash</span><br><span class=\"line\">        while read line</span><br><span class=\"line\">        do</span><br><span class=\"line\">        Ip=`echo $line|awk &#x27;&#123;print $1&#125;&#x27;`</span><br><span class=\"line\">        Passwd=`echo $line|awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class=\"line\">        ssh -n localhost &quot;cat -&quot;</span><br><span class=\"line\">        sshpass -p &quot;$Passwd&quot; ssh -n -t -o StrictHostKeyChecking=no root@$Ip &quot;id&quot;</span><br><span class=\"line\">        done&lt;iplist.txt</span><br><span class=\"line\">        #版本2</span><br><span class=\"line\">        #!/bin/bash</span><br><span class=\"line\">        Iplist=`awk &#x27;&#123;print $1&#125;&#x27; iplist.txt`</span><br><span class=\"line\">        for Ip in $Iplist</span><br><span class=\"line\">        do</span><br><span class=\"line\">        Passwd=`awk &#x27;/&#x27;$Ip&#x27;/&#123;print $2&#125;&#x27; iplist.txt`</span><br><span class=\"line\">        sshpass -p &quot;$Passwd&quot; ssh -n -t -o StrictHostKeyChecking=no root@$Ip &quot;id&quot;</span><br><span class=\"line\">        done</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    在同一位置打印字符&#123;</span><br><span class=\"line\">        #!/bin/bash</span><br><span class=\"line\">        echo -ne &quot;\\t&quot;</span><br><span class=\"line\">        for i in `seq -w 100 -1 1`</span><br><span class=\"line\">        do</span><br><span class=\"line\">            echo -ne &quot;$i\\b\\b\\b&quot;;      # 关键\\b退格</span><br><span class=\"line\">            sleep 1;</span><br><span class=\"line\">        done</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    多进程后台并发简易控制&#123;</span><br><span class=\"line\">        #!/bin/bash</span><br><span class=\"line\">        test () &#123;</span><br><span class=\"line\">            echo $a</span><br><span class=\"line\">            sleep 5</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for a in `seq 1 30`</span><br><span class=\"line\">        do</span><br><span class=\"line\">            test &amp;</span><br><span class=\"line\">            echo $!</span><br><span class=\"line\">            ((num++))</span><br><span class=\"line\">            if [ $num -eq 6 ];then</span><br><span class=\"line\">            echo &quot;wait...&quot;</span><br><span class=\"line\">            wait</span><br><span class=\"line\">            num=0</span><br><span class=\"line\">            fi</span><br><span class=\"line\">        done</span><br><span class=\"line\">        wait</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    shell并发&#123;</span><br><span class=\"line\">        #!/bin/bash</span><br><span class=\"line\">        tmpfile=$$.fifo   # 创建管道名称</span><br><span class=\"line\">        mkfifo $tmpfile   # 创建管道</span><br><span class=\"line\">        exec 4&lt;&gt;$tmpfile  # 创建文件标示4，以读写方式操作管道$tmpfile</span><br><span class=\"line\">        rm $tmpfile       # 将创建的管道文件清除</span><br><span class=\"line\">        thred=4           # 指定并发个数</span><br><span class=\"line\">        seq=(1 2 3 4 5 6 7 8 9 21 22 23 24 25 31 32 33 34 35) # 创建任务列表</span><br><span class=\"line\">        # 为并发线程创建相应个数的占位</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        for (( i = 1;i&lt;=$&#123;thred&#125;;i++ ))</span><br><span class=\"line\">        do</span><br><span class=\"line\">            echo;  # 因为read命令一次读取一行，一个echo默认输出一个换行符，所以为每个线程输出一个占位换行</span><br><span class=\"line\">        done</span><br><span class=\"line\">        &#125; &gt;&amp;4      # 将占位信息写入管道</span><br><span class=\"line\">        for id in $&#123;seq&#125;  # 从任务列表 seq 中按次序获取每一个任务</span><br><span class=\"line\">        do</span><br><span class=\"line\">          read  # 读取一行，即fd4中的一个占位符</span><br><span class=\"line\">          (./ur_command $&#123;id&#125;;echo &gt;&amp;4 ) &amp;   # 在后台执行任务ur_command 并将任务 $&#123;id&#125; 赋给当前任务；任务执行完后在fd4种写入一个占位符</span><br><span class=\"line\">        done &lt;&amp;4    # 指定fd4为整个for的标准输入</span><br><span class=\"line\">        wait        # 等待所有在此shell脚本中启动的后台任务完成</span><br><span class=\"line\">        exec 4&gt;&amp;-   # 关闭管道</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    shell并发函数&#123;</span><br><span class=\"line\">        function ConCurrentCmd()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            #进程数</span><br><span class=\"line\">            Thread=30</span><br><span class=\"line\">            #列表文件</span><br><span class=\"line\">            CurFileName=iplist.txt</span><br><span class=\"line\">            #定义fifo文件</span><br><span class=\"line\">            FifoFile=&quot;$$.fifo&quot;</span><br><span class=\"line\">            #新建一个fifo类型的文件</span><br><span class=\"line\">            mkfifo $FifoFile</span><br><span class=\"line\">            #将fd6与此fifo类型文件以读写的方式连接起来</span><br><span class=\"line\">            exec 6&lt;&gt;$FifoFile</span><br><span class=\"line\">            rm $FifoFile</span><br><span class=\"line\">            #事实上就是在文件描述符6中放置了$Thread个回车符</span><br><span class=\"line\">            for ((i=0;i&lt;=$Thread;i++));do echo;done &gt;&amp;6</span><br><span class=\"line\">            #此后标准输入将来自fd5</span><br><span class=\"line\">            exec 5&lt;$CurFileName</span><br><span class=\"line\">            #开始循环读取文件列表中的行</span><br><span class=\"line\">            Count=0</span><br><span class=\"line\">            while read -u5 line</span><br><span class=\"line\">            do</span><br><span class=\"line\">                read -u6</span><br><span class=\"line\">                let Count+=1</span><br><span class=\"line\">                # 此处定义一个子进程放到后台执行</span><br><span class=\"line\">                # 一个read -u6命令执行一次,就从fd6中减去一个回车符，然后向下执行</span><br><span class=\"line\">                # fd6中没有回车符的时候,就停在这了,从而实现了进程数量控制</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    echo $Count</span><br><span class=\"line\">                    #这段代码框就是执行具体的操作了</span><br><span class=\"line\">                    function</span><br><span class=\"line\">                    echo &gt;&amp;6</span><br><span class=\"line\">                    #当进程结束以后,再向fd6中追加一个回车符,即补上了read -u6减去的那个</span><br><span class=\"line\">                &#125; &amp;</span><br><span class=\"line\">            done</span><br><span class=\"line\">            #等待所有后台子进程结束</span><br><span class=\"line\">            wait</span><br><span class=\"line\">            #关闭fd6</span><br><span class=\"line\">            exec 6&gt;&amp;-</span><br><span class=\"line\">            #关闭fd5</span><br><span class=\"line\">            exec 5&gt;&amp;-</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        并发例子&#123;</span><br><span class=\"line\">            #!/bin/bash</span><br><span class=\"line\">            pnum=3</span><br><span class=\"line\">            task () &#123;</span><br><span class=\"line\">                echo &quot;$u start&quot;</span><br><span class=\"line\">                sleep 5</span><br><span class=\"line\">                echo &quot;$u done&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            FifoFile=&quot;$$.fifo&quot;</span><br><span class=\"line\">            mkfifo $FifoFile</span><br><span class=\"line\">            exec 6&lt;&gt;$FifoFile</span><br><span class=\"line\">            rm $FifoFile</span><br><span class=\"line\">            </span><br><span class=\"line\">            for ((i=0;i&lt;=$pnum;i++));do echo;done &gt;&amp;6</span><br><span class=\"line\">            for u in `seq 1 20`</span><br><span class=\"line\">            do</span><br><span class=\"line\">                read -u6</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    task</span><br><span class=\"line\">                    [ $? -eq 0 ] &amp;&amp; echo &quot;$&#123;u&#125; 次成功&quot; || echo &quot;$&#123;u&#125; 次失败&quot;</span><br><span class=\"line\">                    echo &gt;&amp;6</span><br><span class=\"line\">                &#125; &amp;</span><br><span class=\"line\">            done</span><br><span class=\"line\">            wait</span><br><span class=\"line\">            exec 6&gt;&amp;-</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    函数&#123;</span><br><span class=\"line\">        ip()&#123;</span><br><span class=\"line\">            echo &quot;a 1&quot;|awk &#x27;$1==&quot;&#x27;&quot;$1&quot;&#x27;&quot;&#123;print $2&#125;&#x27;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        web=a</span><br><span class=\"line\">        ip $web</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    检测软件包是否存在&#123;</span><br><span class=\"line\">        rpm -q dialog &gt;/dev/null</span><br><span class=\"line\">        if [ &quot;$?&quot; -ge 1 ];then</span><br><span class=\"line\">            echo &quot;install dialog,Please wait...&quot;</span><br><span class=\"line\">            yum -y install dialog</span><br><span class=\"line\">            rpm -q dialog &gt;/dev/null</span><br><span class=\"line\">            [ $? -ge 1 ] &amp;&amp; echo &quot;dialog installation failure,exit&quot; &amp;&amp; exit</span><br><span class=\"line\">            echo &quot;dialog done&quot;</span><br><span class=\"line\">            read</span><br><span class=\"line\">        fi</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    游戏维护菜单-修改配置文件&#123;</span><br><span class=\"line\">        #!/bin/bash</span><br><span class=\"line\">        conf=serverlist.xml</span><br><span class=\"line\">        AreaList=`awk -F &#x27;&quot;&#x27; &#x27;/&lt;s/&#123;print $2&#125;&#x27; $conf`</span><br><span class=\"line\">        select area in $AreaList 全部 退出</span><br><span class=\"line\">        do</span><br><span class=\"line\">            echo &quot;&quot;</span><br><span class=\"line\">            echo $area</span><br><span class=\"line\">            case $area in</span><br><span class=\"line\">            退出)</span><br><span class=\"line\">                exit</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">            *)</span><br><span class=\"line\">                select operate in &quot;修改版本号&quot; &quot;添加维护中&quot; &quot;删除维护中&quot; &quot;返回菜单&quot;</span><br><span class=\"line\">                do</span><br><span class=\"line\">                    echo &quot;&quot;</span><br><span class=\"line\">                    echo $operate</span><br><span class=\"line\">                    case $operate in</span><br><span class=\"line\">                    修改版本号)</span><br><span class=\"line\">                        echo 请输入版本号</span><br><span class=\"line\">                        while read version</span><br><span class=\"line\">                        do</span><br><span class=\"line\">                            if echo $version | grep -w 10[12][0-9][0-9][0-9][0-9][0-9][0-9]</span><br><span class=\"line\">                            then</span><br><span class=\"line\">                                break</span><br><span class=\"line\">                            fi</span><br><span class=\"line\">                            echo 请从新输入正确的版本号</span><br><span class=\"line\">                        done</span><br><span class=\"line\">                        case $area in</span><br><span class=\"line\">                        全部)</span><br><span class=\"line\">                            case $version in</span><br><span class=\"line\">                            101*)</span><br><span class=\"line\">                                echo &quot;请确认操作对 $area 体验区 $operate&quot;</span><br><span class=\"line\">                                read</span><br><span class=\"line\">                                sed -i &#x27;s/101[0-9][0-9][0-9][0-9][0-9][0-9]/&#x27;$version&#x27;/&#x27; $conf</span><br><span class=\"line\">                            ;;</span><br><span class=\"line\">                            102*)</span><br><span class=\"line\">                                echo &quot;请确认操作对 $area 正式区 $operate&quot;</span><br><span class=\"line\">                                read</span><br><span class=\"line\">                                sed -i &#x27;s/102[0-9][0-9][0-9][0-9][0-9][0-9]/&#x27;$version&#x27;/&#x27; $conf</span><br><span class=\"line\">                            ;;</span><br><span class=\"line\">                            esac</span><br><span class=\"line\">                        ;;</span><br><span class=\"line\">                        *)</span><br><span class=\"line\">                            type=`awk -F &#x27;&quot;&#x27; &#x27;/&#x27;$area&#x27;/&#123;print $14&#125;&#x27; $conf |cut -c1-3`</span><br><span class=\"line\">                            readtype=`echo $version |cut -c1-3`</span><br><span class=\"line\">                            if [ $type != $readtype ]</span><br><span class=\"line\">                            then</span><br><span class=\"line\">                                echo &quot;版本号不对应，请从新操作&quot;</span><br><span class=\"line\">                                continue</span><br><span class=\"line\">                            fi</span><br><span class=\"line\">                            echo &quot;请确认操作对 $area 区 $operate&quot;</span><br><span class=\"line\">                            read</span><br><span class=\"line\">                            awk -F &#x27;&quot;&#x27; &#x27;/&#x27;$area&#x27;/&#123;print $12&#125;&#x27; $conf |xargs -i sed -i &#x27;/&#x27;&#123;&#125;&#x27;/s/10[12][0-9][0-9][0-9][0-9][0-9][0-9]/&#x27;$version&#x27;/&#x27; $conf</span><br><span class=\"line\">                        ;;</span><br><span class=\"line\">                        esac</span><br><span class=\"line\">                    ;;</span><br><span class=\"line\">                    添加维护中)</span><br><span class=\"line\">                        case $area in</span><br><span class=\"line\">                        全部)</span><br><span class=\"line\">                            echo &quot;请确认操作对 $area 区 $operate&quot;</span><br><span class=\"line\">                            read</span><br><span class=\"line\">                            awk -F &#x27;&quot;&#x27; &#x27;/&lt;s/&#123;print $2&#125;&#x27; $conf |xargs -i sed -i &#x27;s/&#x27;&#123;&#125;&#x27;/&amp;维护中/&#x27; $conf</span><br><span class=\"line\">                        ;;</span><br><span class=\"line\">                        *)</span><br><span class=\"line\">                            echo &quot;请确认操作对 $area 区 $operate&quot;</span><br><span class=\"line\">                            read</span><br><span class=\"line\">                            sed -i &#x27;s/&#x27;$area&#x27;/&amp;维护中/&#x27; $conf</span><br><span class=\"line\">                        ;;</span><br><span class=\"line\">                        esac</span><br><span class=\"line\">                    ;;</span><br><span class=\"line\">                    删除维护中)</span><br><span class=\"line\">                        case $area in</span><br><span class=\"line\">                        全部)</span><br><span class=\"line\">                            echo &quot;请确认操作对 $area 区 $operate&quot;</span><br><span class=\"line\">                            read</span><br><span class=\"line\">                            sed -i &#x27;s/维护中//&#x27; $conf</span><br><span class=\"line\">                        ;;</span><br><span class=\"line\">                        *)</span><br><span class=\"line\">                            echo &quot;请确认操作对 $area 区 $operate&quot;</span><br><span class=\"line\">                            read</span><br><span class=\"line\">                            sed -i &#x27;/&#x27;$area&#x27;/s/维护中//&#x27; $conf</span><br><span class=\"line\">                        ;;</span><br><span class=\"line\">                        esac</span><br><span class=\"line\">                    ;;</span><br><span class=\"line\">                    返回菜单)</span><br><span class=\"line\">                        break</span><br><span class=\"line\">                    ;;</span><br><span class=\"line\">                    esac</span><br><span class=\"line\">                done</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">            esac</span><br><span class=\"line\">            echo &quot;回车重新选择区&quot;</span><br><span class=\"line\">        done</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    keepalive剔除后端服务&#123;</span><br><span class=\"line\">        #!/bin/bash</span><br><span class=\"line\">        #行数请自定义,默认8行</span><br><span class=\"line\">        if [ X$2 == X ];then</span><br><span class=\"line\">            echo &quot;error: IP null&quot;</span><br><span class=\"line\">            read</span><br><span class=\"line\">            exit</span><br><span class=\"line\">        fi</span><br><span class=\"line\">        case $1 in</span><br><span class=\"line\">        del)</span><br><span class=\"line\">            sed -i &#x27;/real_server.*&#x27;$2&#x27;.*8888/,+8 s/^/#/&#x27; /etc/keepalived/keepalived.conf</span><br><span class=\"line\">            /etc/init.d/keepalived reload</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">        add)</span><br><span class=\"line\">            sed -i &#x27;/real_server.*&#x27;$2&#x27;.*8888/,+8 s/^#//&#x27; /etc/keepalived/keepalived.conf</span><br><span class=\"line\">            /etc/init.d/keepalived reload</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">        *)</span><br><span class=\"line\">            echo &quot;Parameter error&quot;</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">        esac</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    抓取系统中负载最高的进程&#123;</span><br><span class=\"line\">        #!/bin/bash</span><br><span class=\"line\">        LANG=C</span><br><span class=\"line\">        PATH=/sbin:/usr/sbin:/bin:/usr/bin</span><br><span class=\"line\">        interval=1</span><br><span class=\"line\">        length=86400</span><br><span class=\"line\">        for i in $(seq 1 $(expr $&#123;length&#125; / $&#123;interval&#125;));do</span><br><span class=\"line\">        date</span><br><span class=\"line\">        LANG=C ps -eT -o%cpu,pid,tid,ppid,comm | grep -v CPU | sort -n -r | head -20</span><br><span class=\"line\">        date</span><br><span class=\"line\">        LANG=C cat /proc/loadavg</span><br><span class=\"line\">        &#123; LANG=C ps -eT -o%cpu,pid,tid,ppid,comm | sed -e &#x27;s/^ *//&#x27; | tr -s &#x27; &#x27; | grep -v CPU | sort -n -r | cut -d &#x27; &#x27; -f 1 | xargs -I&#123;&#125; echo -n &quot;&#123;&#125; + &quot; &amp;&amp; echo &#x27; 0&#x27;; &#125; | bc -l</span><br><span class=\"line\">        sleep $&#123;interval&#125;</span><br><span class=\"line\">        done</span><br><span class=\"line\">        fuser -k $0</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    申诉中国反垃圾邮件联盟黑名单&#123;</span><br><span class=\"line\">        #!/bin/bash</span><br><span class=\"line\">        IpList=`awk &#x27;$1!~&quot;^#&quot;&amp;&amp;$1!=&quot;&quot;&#123;print $1&#125;&#x27; host.list`</span><br><span class=\"line\">        QueryAdd=&#x27;http://www.anti-spam.org.cn/Rbl/Query/Result&#x27;</span><br><span class=\"line\">        ComplaintAdd=&#x27;http://www.anti-spam.org.cn/Rbl/Getout/Submit&#x27;</span><br><span class=\"line\">        CONTENT=&#x27;我们是一家正规的XXX。xxxxxxx。恳请将我们的发送服务器IP移出黑名单。谢谢！</span><br><span class=\"line\">        处理措施：</span><br><span class=\"line\">        1.XXXX。</span><br><span class=\"line\">        2.XXXX。&#x27;</span><br><span class=\"line\">        CORP=&#x27;abc.com&#x27;</span><br><span class=\"line\">        WWW=&#x27;www.abc.cm&#x27;</span><br><span class=\"line\">        NAME=&#x27;def&#x27;</span><br><span class=\"line\">        MAIL=&#x27;def@163.com.cn&#x27;</span><br><span class=\"line\">        TEL=&#x27;010-50000000&#x27;</span><br><span class=\"line\">        LEVEL=&#x27;0&#x27;</span><br><span class=\"line\">        for Ip in $IpList</span><br><span class=\"line\">        do</span><br><span class=\"line\">            Status=`curl -d &quot;IP=$Ip&quot; $QueryAdd |grep &#x27;Getout/ShowForm?IP=&#x27; |grep -wc &#x27;申诉脱离&#x27;`</span><br><span class=\"line\">            if [ $Status -ge 1 ];then</span><br><span class=\"line\">                IpStatus=&quot;黑名单中&quot;</span><br><span class=\"line\">                results=`curl -d &quot;IP=$&#123;Ip&#125;&amp;CONTENT=$&#123;CONTENT&#125;&amp;CORP=$&#123;CORP&#125;&amp;WWW=$&#123;WWW&#125;&amp;NAME=$&#123;NAME&#125;&amp;MAIL=$&#123;MAIL&#125;&amp;TEL=$&#123;TEL&#125;&amp;LEVEL=$&#123;LEVEL&#125;&quot; $ComplaintAdd |grep -E &#x27;您的黑名单脱离申请已提交|该IP的脱离申请已被他人提交|申请由于近期内有被拒绝的记录&#x27;`</span><br><span class=\"line\">                echo $results</span><br><span class=\"line\">                if echo $results | grep &#x27;您的黑名单脱离申请已提交&#x27;  &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">                then</span><br><span class=\"line\">                    complaint=&#x27;申诉成功&#x27;</span><br><span class=\"line\">                elif echo $results | grep &#x27;该IP的脱离申请已被他人提交&#x27;  &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">                then</span><br><span class=\"line\">                    complaint=&#x27;申诉重复&#x27;</span><br><span class=\"line\">                elif echo $results | grep &#x27;申请由于近期内有被拒绝的记录&#x27;  &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">                then</span><br><span class=\"line\">                    complaint=&#x27;申诉拒绝&#x27;</span><br><span class=\"line\">                else</span><br><span class=\"line\">                    complaint=&#x27;异常&#x27;</span><br><span class=\"line\">                fi</span><br><span class=\"line\">            else</span><br><span class=\"line\">                IpStatus=&#x27;正常&#x27;</span><br><span class=\"line\">                complaint=&#x27;无需申诉&#x27;</span><br><span class=\"line\">            fi</span><br><span class=\"line\">            echo &quot;$Ip    $IpStatus    $complaint&quot; &gt;&gt; $(date +%Y%m%d_%H%M%S).log</span><br><span class=\"line\">        done</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    Web Server in Awk&#123;</span><br><span class=\"line\">        #gawk -f file</span><br><span class=\"line\">        BEGIN &#123;</span><br><span class=\"line\">          x        = 1                         # script exits if x &lt; 1</span><br><span class=\"line\">          port     = 8080                      # port number</span><br><span class=\"line\">          host     = &quot;/inet/tcp/&quot; port &quot;/0/0&quot;  # host string</span><br><span class=\"line\">          url      = &quot;http://localhost:&quot; port  # server url</span><br><span class=\"line\">          status   = 200                       # 200 == OK</span><br><span class=\"line\">          reason   = &quot;OK&quot;                      # server response</span><br><span class=\"line\">          RS = ORS = &quot;\\r\\n&quot;                    # header line terminators</span><br><span class=\"line\">          doc      = Setup()                   # html document</span><br><span class=\"line\">          len      = length(doc) + length(ORS) # length of document</span><br><span class=\"line\">          while (x) &#123;</span><br><span class=\"line\">             if ($1 == &quot;GET&quot;) RunApp(substr($2, 2))</span><br><span class=\"line\">             if (! x) break</span><br><span class=\"line\">             print &quot;HTTP/1.0&quot;, status, reason |&amp; host</span><br><span class=\"line\">             print &quot;Connection: Close&quot;        |&amp; host</span><br><span class=\"line\">             print &quot;Pragma: no-cache&quot;         |&amp; host</span><br><span class=\"line\">             print &quot;Content-length:&quot;, len     |&amp; host</span><br><span class=\"line\">             print ORS doc                    |&amp; host</span><br><span class=\"line\">             close(host)     # close client connection</span><br><span class=\"line\">             host |&amp; getline # wait for new client request</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          # server terminated...</span><br><span class=\"line\">          doc = Bye()</span><br><span class=\"line\">          len = length(doc) + length(ORS)</span><br><span class=\"line\">          print &quot;HTTP/1.0&quot;, status, reason |&amp; host</span><br><span class=\"line\">          print &quot;Connection: Close&quot;        |&amp; host</span><br><span class=\"line\">          print &quot;Pragma: no-cache&quot;         |&amp; host</span><br><span class=\"line\">          print &quot;Content-length:&quot;, len     |&amp; host</span><br><span class=\"line\">          print ORS doc                    |&amp; host</span><br><span class=\"line\">          close(host)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        function Setup() &#123;</span><br><span class=\"line\">          tmp = &quot;&lt;html&gt;\\</span><br><span class=\"line\">          &lt;head&gt;&lt;title&gt;Simple gawk server&lt;/title&gt;&lt;/head&gt;\\</span><br><span class=\"line\">          &lt;body&gt;\\</span><br><span class=\"line\">          &lt;p&gt;&lt;a href=&quot; url &quot;/xterm&gt;xterm&lt;/a&gt;\\</span><br><span class=\"line\">          &lt;p&gt;&lt;a href=&quot; url &quot;/xcalc&gt;xcalc&lt;/a&gt;\\</span><br><span class=\"line\">          &lt;p&gt;&lt;a href=&quot; url &quot;/xload&gt;xload&lt;/a&gt;\\</span><br><span class=\"line\">          &lt;p&gt;&lt;a href=&quot; url &quot;/exit&gt;terminate script&lt;/a&gt;\\</span><br><span class=\"line\">          &lt;/body&gt;\\</span><br><span class=\"line\">          &lt;/html&gt;&quot;</span><br><span class=\"line\">          return tmp</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        function Bye() &#123;</span><br><span class=\"line\">          tmp = &quot;&lt;html&gt;\\</span><br><span class=\"line\">          &lt;head&gt;&lt;title&gt;Simple gawk server&lt;/title&gt;&lt;/head&gt;\\</span><br><span class=\"line\">          &lt;body&gt;&lt;p&gt;Script Terminated...&lt;/body&gt;\\</span><br><span class=\"line\">          &lt;/html&gt;&quot;</span><br><span class=\"line\">          return tmp</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        function RunApp(app) &#123;</span><br><span class=\"line\">          if (app == &quot;xterm&quot;)  &#123;system(&quot;xterm&amp;&quot;); return&#125;</span><br><span class=\"line\">          if (app == &quot;xcalc&quot; ) &#123;system(&quot;xcalc&amp;&quot;); return&#125;</span><br><span class=\"line\">          if (app == &quot;xload&quot; ) &#123;system(&quot;xload&amp;&quot;); return&#125;</span><br><span class=\"line\">          if (app == &quot;exit&quot;)   &#123;x = 0&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">10 经验&#123;</span><br><span class=\"line\">    1.服务上线,在启动注册流量时大量报错, 下游服务摘除,重启后, 上游还用原有的链接去链接, 导致请求失败.</span><br><span class=\"line\">    2.systemd守护的进程,在tmp下找不到对应文件, 配置安全tmp项PrivateTmp改为false PrivateTmp=false</span><br><span class=\"line\">    3.统一服务内部调用关系,一个服务对应一个域名</span><br><span class=\"line\">    4.统一服务服务返回的状态码,报警只需要针对5xx就可以发现问题.</span><br><span class=\"line\">    5.在服务雪崩后,恢复服务,用户可能有大量重试,所以放流量也要小比例放流量,逐步恢复</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">11 nginx</span><br><span class=\"line\">   1 日志格式</span><br><span class=\"line\">   log_format main &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; $status $body_bytes_sent &quot;$http_referer&quot; &quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot; $request_time $upstream_response_time $upstream_addr &quot;$http_host&quot;&#x27;;</span><br><span class=\"line\">   </span><br><span class=\"line\">   $remote_addr               # </span><br><span class=\"line\">   [$time_local]              # 调用时间</span><br><span class=\"line\">   &quot;$request&quot;                 # 显示[请求方法 请求接口 HTTP/1.1协议]</span><br><span class=\"line\">   $status                    # 请求返回状态码</span><br><span class=\"line\">   $body_bytes_sent           # 请求body大小</span><br><span class=\"line\">   &quot;$http_referer&quot;            # </span><br><span class=\"line\">   &quot;$http_user_agent&quot;         # 接口从哪个工具发出</span><br><span class=\"line\">   &quot;$http_x_forwarder_for&quot;    # 远程客户端ip</span><br><span class=\"line\">   $request_time              # 请求时间</span><br><span class=\"line\">   $upstream_response_time    # 下游服务返回response时间</span><br><span class=\"line\">   $upstream_addr             # 后端服务地址</span><br><span class=\"line\">   &quot;$http_host&quot;               # 发送请求的host地址</span><br><span class=\"line\"></span><br><span class=\"line\">12 历史记录</span><br><span class=\"line\">13 ansible</span><br><span class=\"line\">   ansible hostname -m shell -a &quot;ls /tmp&quot;          # 在远端host执行shell</span><br><span class=\"line\">   ansible -m ping all                             # 校验远程服务器是否ping通</span><br><span class=\"line\">   </span><br><span class=\"line\">   ## ansible-playbook</span><br><span class=\"line\">   ansible-playbook playbook.yml                   # 调用playbook文件</span><br><span class=\"line\">   vim /etc/ansible/hosts                          # 编辑ansible配置文件</span><br><span class=\"line\">   </span><br><span class=\"line\">   ## yum 模块</span><br><span class=\"line\">   example1:安装单个软件</span><br></pre></td></tr></table></figure>\n</code></pre>\n<ul>\n<li>name: install yum package<br>yum:<br>  name: git       # 安装指定版本：git-1.8.3.1-6.el7<br>  state: present  # 如果不存在安装最新，存在不会更新；若为latest，无论存在与否安装最新   <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">example2:安装多个软件</span><br></pre></td></tr></table></figure></li>\n<li>name: yum<br>yum:<br>  name: ““<br>  state: present<br>with_items:<ul>\n<li>git</li>\n<li>httpd <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br><span class=\"line\">686</span><br><span class=\"line\">687</span><br><span class=\"line\">688</span><br><span class=\"line\">689</span><br><span class=\"line\">690</span><br><span class=\"line\">691</span><br><span class=\"line\">692</span><br><span class=\"line\">693</span><br><span class=\"line\">694</span><br><span class=\"line\">695</span><br><span class=\"line\">696</span><br><span class=\"line\">697</span><br><span class=\"line\">698</span><br><span class=\"line\">699</span><br><span class=\"line\">700</span><br><span class=\"line\">701</span><br><span class=\"line\">702</span><br><span class=\"line\">703</span><br><span class=\"line\">704</span><br><span class=\"line\">705</span><br><span class=\"line\">706</span><br><span class=\"line\">707</span><br><span class=\"line\">708</span><br><span class=\"line\">709</span><br><span class=\"line\">710</span><br><span class=\"line\">711</span><br><span class=\"line\">712</span><br><span class=\"line\">713</span><br><span class=\"line\">714</span><br><span class=\"line\">715</span><br><span class=\"line\">716</span><br><span class=\"line\">717</span><br><span class=\"line\">718</span><br><span class=\"line\">719</span><br><span class=\"line\">720</span><br><span class=\"line\">721</span><br><span class=\"line\">722</span><br><span class=\"line\">723</span><br><span class=\"line\">724</span><br><span class=\"line\">725</span><br><span class=\"line\">726</span><br><span class=\"line\">727</span><br><span class=\"line\">728</span><br><span class=\"line\">729</span><br><span class=\"line\">730</span><br><span class=\"line\">731</span><br><span class=\"line\">732</span><br><span class=\"line\">733</span><br><span class=\"line\">734</span><br><span class=\"line\">735</span><br><span class=\"line\">736</span><br><span class=\"line\">737</span><br><span class=\"line\">738</span><br><span class=\"line\">739</span><br><span class=\"line\">740</span><br><span class=\"line\">741</span><br><span class=\"line\">742</span><br><span class=\"line\">743</span><br><span class=\"line\">744</span><br><span class=\"line\">745</span><br><span class=\"line\">746</span><br><span class=\"line\">747</span><br><span class=\"line\">748</span><br><span class=\"line\">749</span><br><span class=\"line\">750</span><br><span class=\"line\">751</span><br><span class=\"line\">752</span><br><span class=\"line\">753</span><br><span class=\"line\">754</span><br><span class=\"line\">755</span><br><span class=\"line\">756</span><br><span class=\"line\">757</span><br><span class=\"line\">758</span><br><span class=\"line\">759</span><br><span class=\"line\">760</span><br><span class=\"line\">761</span><br><span class=\"line\">762</span><br><span class=\"line\">763</span><br><span class=\"line\">764</span><br><span class=\"line\">765</span><br><span class=\"line\">766</span><br><span class=\"line\">767</span><br><span class=\"line\">768</span><br><span class=\"line\">769</span><br><span class=\"line\">770</span><br><span class=\"line\">771</span><br><span class=\"line\">772</span><br><span class=\"line\">773</span><br><span class=\"line\">774</span><br><span class=\"line\">775</span><br><span class=\"line\">776</span><br><span class=\"line\">777</span><br><span class=\"line\">778</span><br><span class=\"line\">779</span><br><span class=\"line\">780</span><br><span class=\"line\">781</span><br><span class=\"line\">782</span><br><span class=\"line\">783</span><br><span class=\"line\">784</span><br><span class=\"line\">785</span><br><span class=\"line\">786</span><br><span class=\"line\">787</span><br><span class=\"line\">788</span><br><span class=\"line\">789</span><br><span class=\"line\">790</span><br><span class=\"line\">791</span><br><span class=\"line\">792</span><br><span class=\"line\">793</span><br><span class=\"line\">794</span><br><span class=\"line\">795</span><br><span class=\"line\">796</span><br><span class=\"line\">797</span><br><span class=\"line\">798</span><br><span class=\"line\">799</span><br><span class=\"line\">800</span><br><span class=\"line\">801</span><br><span class=\"line\">802</span><br><span class=\"line\">803</span><br><span class=\"line\">804</span><br><span class=\"line\">805</span><br><span class=\"line\">806</span><br><span class=\"line\">807</span><br><span class=\"line\">808</span><br><span class=\"line\">809</span><br><span class=\"line\">810</span><br><span class=\"line\">811</span><br><span class=\"line\">812</span><br><span class=\"line\">813</span><br><span class=\"line\">814</span><br><span class=\"line\">815</span><br><span class=\"line\">816</span><br><span class=\"line\">817</span><br><span class=\"line\">818</span><br><span class=\"line\">819</span><br><span class=\"line\">820</span><br><span class=\"line\">821</span><br><span class=\"line\">822</span><br><span class=\"line\">823</span><br><span class=\"line\">824</span><br><span class=\"line\">825</span><br><span class=\"line\">826</span><br><span class=\"line\">827</span><br><span class=\"line\">828</span><br><span class=\"line\">829</span><br><span class=\"line\">830</span><br><span class=\"line\">831</span><br><span class=\"line\">832</span><br><span class=\"line\">833</span><br><span class=\"line\">834</span><br><span class=\"line\">835</span><br><span class=\"line\">836</span><br><span class=\"line\">837</span><br><span class=\"line\">838</span><br><span class=\"line\">839</span><br><span class=\"line\">840</span><br><span class=\"line\">841</span><br><span class=\"line\">842</span><br><span class=\"line\">843</span><br><span class=\"line\">844</span><br><span class=\"line\">845</span><br><span class=\"line\">846</span><br><span class=\"line\">847</span><br><span class=\"line\">848</span><br><span class=\"line\">849</span><br><span class=\"line\">850</span><br><span class=\"line\">851</span><br><span class=\"line\">852</span><br><span class=\"line\">853</span><br><span class=\"line\">854</span><br><span class=\"line\">855</span><br><span class=\"line\">856</span><br><span class=\"line\">857</span><br><span class=\"line\">858</span><br><span class=\"line\">859</span><br><span class=\"line\">860</span><br><span class=\"line\">861</span><br><span class=\"line\">862</span><br><span class=\"line\">863</span><br><span class=\"line\">864</span><br><span class=\"line\">865</span><br><span class=\"line\">866</span><br><span class=\"line\">867</span><br><span class=\"line\">868</span><br><span class=\"line\">869</span><br><span class=\"line\">870</span><br><span class=\"line\">871</span><br><span class=\"line\">872</span><br><span class=\"line\">873</span><br><span class=\"line\">874</span><br><span class=\"line\">875</span><br><span class=\"line\">876</span><br><span class=\"line\">877</span><br><span class=\"line\">878</span><br><span class=\"line\">879</span><br><span class=\"line\">880</span><br><span class=\"line\">881</span><br><span class=\"line\">882</span><br><span class=\"line\">883</span><br><span class=\"line\">884</span><br><span class=\"line\">885</span><br><span class=\"line\">886</span><br><span class=\"line\">887</span><br><span class=\"line\">888</span><br><span class=\"line\">889</span><br><span class=\"line\">890</span><br><span class=\"line\">891</span><br><span class=\"line\">892</span><br><span class=\"line\">893</span><br><span class=\"line\">894</span><br><span class=\"line\">895</span><br><span class=\"line\">896</span><br><span class=\"line\">897</span><br><span class=\"line\">898</span><br><span class=\"line\">899</span><br><span class=\"line\">900</span><br><span class=\"line\">901</span><br><span class=\"line\">902</span><br><span class=\"line\">903</span><br><span class=\"line\">904</span><br><span class=\"line\">905</span><br><span class=\"line\">906</span><br><span class=\"line\">907</span><br><span class=\"line\">908</span><br><span class=\"line\">909</span><br><span class=\"line\">910</span><br><span class=\"line\">911</span><br><span class=\"line\">912</span><br><span class=\"line\">913</span><br><span class=\"line\">914</span><br><span class=\"line\">915</span><br><span class=\"line\">916</span><br><span class=\"line\">917</span><br><span class=\"line\">918</span><br><span class=\"line\">919</span><br><span class=\"line\">920</span><br><span class=\"line\">921</span><br><span class=\"line\">922</span><br><span class=\"line\">923</span><br><span class=\"line\">924</span><br><span class=\"line\">925</span><br><span class=\"line\">926</span><br><span class=\"line\">927</span><br><span class=\"line\">928</span><br><span class=\"line\">929</span><br><span class=\"line\">930</span><br><span class=\"line\">931</span><br><span class=\"line\">932</span><br><span class=\"line\">933</span><br><span class=\"line\">934</span><br><span class=\"line\">935</span><br><span class=\"line\">936</span><br><span class=\"line\">937</span><br><span class=\"line\">938</span><br><span class=\"line\">939</span><br><span class=\"line\">940</span><br><span class=\"line\">941</span><br><span class=\"line\">942</span><br><span class=\"line\">943</span><br><span class=\"line\">944</span><br><span class=\"line\">945</span><br><span class=\"line\">946</span><br><span class=\"line\">947</span><br><span class=\"line\">948</span><br><span class=\"line\">949</span><br><span class=\"line\">950</span><br><span class=\"line\">951</span><br><span class=\"line\">952</span><br><span class=\"line\">953</span><br><span class=\"line\">954</span><br><span class=\"line\">955</span><br><span class=\"line\">956</span><br><span class=\"line\">957</span><br><span class=\"line\">958</span><br><span class=\"line\">959</span><br><span class=\"line\">960</span><br><span class=\"line\">961</span><br><span class=\"line\">962</span><br><span class=\"line\">963</span><br><span class=\"line\">964</span><br><span class=\"line\">965</span><br><span class=\"line\">966</span><br><span class=\"line\">967</span><br><span class=\"line\">968</span><br><span class=\"line\">969</span><br><span class=\"line\">970</span><br><span class=\"line\">971</span><br><span class=\"line\">972</span><br><span class=\"line\">973</span><br><span class=\"line\">974</span><br><span class=\"line\">975</span><br><span class=\"line\">976</span><br><span class=\"line\">977</span><br><span class=\"line\">978</span><br><span class=\"line\">979</span><br><span class=\"line\">980</span><br><span class=\"line\">981</span><br><span class=\"line\">982</span><br><span class=\"line\">983</span><br><span class=\"line\">984</span><br><span class=\"line\">985</span><br><span class=\"line\">986</span><br><span class=\"line\">987</span><br><span class=\"line\">988</span><br><span class=\"line\">989</span><br><span class=\"line\">990</span><br><span class=\"line\">991</span><br><span class=\"line\">992</span><br><span class=\"line\">993</span><br><span class=\"line\">994</span><br><span class=\"line\">995</span><br><span class=\"line\">996</span><br><span class=\"line\">997</span><br><span class=\"line\">998</span><br><span class=\"line\">999</span><br><span class=\"line\">1000</span><br><span class=\"line\">1001</span><br><span class=\"line\">1002</span><br><span class=\"line\">1003</span><br><span class=\"line\">1004</span><br><span class=\"line\">1005</span><br><span class=\"line\">1006</span><br><span class=\"line\">1007</span><br><span class=\"line\">1008</span><br><span class=\"line\">1009</span><br><span class=\"line\">1010</span><br><span class=\"line\">1011</span><br><span class=\"line\">1012</span><br><span class=\"line\">1013</span><br><span class=\"line\">1014</span><br><span class=\"line\">1015</span><br><span class=\"line\">1016</span><br><span class=\"line\">1017</span><br><span class=\"line\">1018</span><br><span class=\"line\">1019</span><br><span class=\"line\">1020</span><br><span class=\"line\">1021</span><br><span class=\"line\">1022</span><br><span class=\"line\">1023</span><br><span class=\"line\">1024</span><br><span class=\"line\">1025</span><br><span class=\"line\">1026</span><br><span class=\"line\">1027</span><br><span class=\"line\">1028</span><br><span class=\"line\">1029</span><br><span class=\"line\">1030</span><br><span class=\"line\">1031</span><br><span class=\"line\">1032</span><br><span class=\"line\">1033</span><br><span class=\"line\">1034</span><br><span class=\"line\">1035</span><br><span class=\"line\">1036</span><br><span class=\"line\">1037</span><br><span class=\"line\">1038</span><br><span class=\"line\">1039</span><br><span class=\"line\">1040</span><br><span class=\"line\">1041</span><br><span class=\"line\">1042</span><br><span class=\"line\">1043</span><br><span class=\"line\">1044</span><br><span class=\"line\">1045</span><br><span class=\"line\">1046</span><br><span class=\"line\">1047</span><br><span class=\"line\">1048</span><br><span class=\"line\">1049</span><br><span class=\"line\">1050</span><br><span class=\"line\">1051</span><br><span class=\"line\">1052</span><br><span class=\"line\">1053</span><br><span class=\"line\">1054</span><br><span class=\"line\">1055</span><br><span class=\"line\">1056</span><br><span class=\"line\">1057</span><br><span class=\"line\">1058</span><br><span class=\"line\">1059</span><br><span class=\"line\">1060</span><br><span class=\"line\">1061</span><br><span class=\"line\">1062</span><br><span class=\"line\">1063</span><br><span class=\"line\">1064</span><br><span class=\"line\">1065</span><br><span class=\"line\">1066</span><br><span class=\"line\">1067</span><br><span class=\"line\">1068</span><br><span class=\"line\">1069</span><br><span class=\"line\">1070</span><br><span class=\"line\">1071</span><br><span class=\"line\">1072</span><br><span class=\"line\">1073</span><br><span class=\"line\">1074</span><br><span class=\"line\">1075</span><br><span class=\"line\">1076</span><br><span class=\"line\">1077</span><br><span class=\"line\">1078</span><br><span class=\"line\">1079</span><br><span class=\"line\">1080</span><br><span class=\"line\">1081</span><br><span class=\"line\">1082</span><br><span class=\"line\">1083</span><br><span class=\"line\">1084</span><br><span class=\"line\">1085</span><br><span class=\"line\">1086</span><br><span class=\"line\">1087</span><br><span class=\"line\">1088</span><br><span class=\"line\">1089</span><br><span class=\"line\">1090</span><br><span class=\"line\">1091</span><br><span class=\"line\">1092</span><br><span class=\"line\">1093</span><br><span class=\"line\">1094</span><br><span class=\"line\">1095</span><br><span class=\"line\">1096</span><br><span class=\"line\">1097</span><br><span class=\"line\">1098</span><br><span class=\"line\">1099</span><br><span class=\"line\">1100</span><br><span class=\"line\">1101</span><br><span class=\"line\">1102</span><br><span class=\"line\">1103</span><br><span class=\"line\">1104</span><br><span class=\"line\">1105</span><br><span class=\"line\">1106</span><br><span class=\"line\">1107</span><br><span class=\"line\">1108</span><br><span class=\"line\">1109</span><br><span class=\"line\">1110</span><br><span class=\"line\">1111</span><br><span class=\"line\">1112</span><br><span class=\"line\">1113</span><br><span class=\"line\">1114</span><br><span class=\"line\">1115</span><br><span class=\"line\">1116</span><br><span class=\"line\">1117</span><br><span class=\"line\">1118</span><br><span class=\"line\">1119</span><br><span class=\"line\">1120</span><br><span class=\"line\">1121</span><br><span class=\"line\">1122</span><br><span class=\"line\">1123</span><br><span class=\"line\">1124</span><br><span class=\"line\">1125</span><br><span class=\"line\">1126</span><br><span class=\"line\">1127</span><br><span class=\"line\">1128</span><br><span class=\"line\">1129</span><br><span class=\"line\">1130</span><br><span class=\"line\">1131</span><br><span class=\"line\">1132</span><br><span class=\"line\">1133</span><br><span class=\"line\">1134</span><br><span class=\"line\">1135</span><br><span class=\"line\">1136</span><br><span class=\"line\">1137</span><br><span class=\"line\">1138</span><br><span class=\"line\">1139</span><br><span class=\"line\">1140</span><br><span class=\"line\">1141</span><br><span class=\"line\">1142</span><br><span class=\"line\">1143</span><br><span class=\"line\">1144</span><br><span class=\"line\">1145</span><br><span class=\"line\">1146</span><br><span class=\"line\">1147</span><br><span class=\"line\">1148</span><br><span class=\"line\">1149</span><br><span class=\"line\">1150</span><br><span class=\"line\">1151</span><br><span class=\"line\">1152</span><br><span class=\"line\">1153</span><br><span class=\"line\">1154</span><br><span class=\"line\">1155</span><br><span class=\"line\">1156</span><br><span class=\"line\">1157</span><br><span class=\"line\">1158</span><br><span class=\"line\">1159</span><br><span class=\"line\">1160</span><br><span class=\"line\">1161</span><br><span class=\"line\">1162</span><br><span class=\"line\">1163</span><br><span class=\"line\">1164</span><br><span class=\"line\">1165</span><br><span class=\"line\">1166</span><br><span class=\"line\">1167</span><br><span class=\"line\">1168</span><br><span class=\"line\">1169</span><br><span class=\"line\">1170</span><br><span class=\"line\">1171</span><br><span class=\"line\">1172</span><br><span class=\"line\">1173</span><br><span class=\"line\">1174</span><br><span class=\"line\">1175</span><br><span class=\"line\">1176</span><br><span class=\"line\">1177</span><br><span class=\"line\">1178</span><br><span class=\"line\">1179</span><br><span class=\"line\">1180</span><br><span class=\"line\">1181</span><br><span class=\"line\">1182</span><br><span class=\"line\">1183</span><br><span class=\"line\">1184</span><br><span class=\"line\">1185</span><br><span class=\"line\">1186</span><br><span class=\"line\">1187</span><br><span class=\"line\">1188</span><br><span class=\"line\">1189</span><br><span class=\"line\">1190</span><br><span class=\"line\">1191</span><br><span class=\"line\">1192</span><br><span class=\"line\">1193</span><br><span class=\"line\">1194</span><br><span class=\"line\">1195</span><br><span class=\"line\">1196</span><br><span class=\"line\">1197</span><br><span class=\"line\">1198</span><br><span class=\"line\">1199</span><br><span class=\"line\">1200</span><br><span class=\"line\">1201</span><br><span class=\"line\">1202</span><br><span class=\"line\">1203</span><br><span class=\"line\">1204</span><br><span class=\"line\">1205</span><br><span class=\"line\">1206</span><br><span class=\"line\">1207</span><br><span class=\"line\">1208</span><br><span class=\"line\">1209</span><br><span class=\"line\">1210</span><br><span class=\"line\">1211</span><br><span class=\"line\">1212</span><br><span class=\"line\">1213</span><br><span class=\"line\">1214</span><br><span class=\"line\">1215</span><br><span class=\"line\">1216</span><br><span class=\"line\">1217</span><br><span class=\"line\">1218</span><br><span class=\"line\">1219</span><br><span class=\"line\">1220</span><br><span class=\"line\">1221</span><br><span class=\"line\">1222</span><br><span class=\"line\">1223</span><br><span class=\"line\">1224</span><br><span class=\"line\">1225</span><br><span class=\"line\">1226</span><br><span class=\"line\">1227</span><br><span class=\"line\">1228</span><br><span class=\"line\">1229</span><br><span class=\"line\">1230</span><br><span class=\"line\">1231</span><br><span class=\"line\">1232</span><br><span class=\"line\">1233</span><br><span class=\"line\">1234</span><br><span class=\"line\">1235</span><br><span class=\"line\">1236</span><br><span class=\"line\">1237</span><br><span class=\"line\">1238</span><br><span class=\"line\">1239</span><br><span class=\"line\">1240</span><br><span class=\"line\">1241</span><br><span class=\"line\">1242</span><br><span class=\"line\">1243</span><br><span class=\"line\">1244</span><br><span class=\"line\">1245</span><br><span class=\"line\">1246</span><br><span class=\"line\">1247</span><br><span class=\"line\">1248</span><br><span class=\"line\">1249</span><br><span class=\"line\">1250</span><br><span class=\"line\">1251</span><br><span class=\"line\">1252</span><br><span class=\"line\">1253</span><br><span class=\"line\">1254</span><br><span class=\"line\">1255</span><br><span class=\"line\">1256</span><br><span class=\"line\">1257</span><br><span class=\"line\">1258</span><br><span class=\"line\">1259</span><br><span class=\"line\">1260</span><br><span class=\"line\">1261</span><br><span class=\"line\">1262</span><br><span class=\"line\">1263</span><br><span class=\"line\">1264</span><br><span class=\"line\">1265</span><br><span class=\"line\">1266</span><br><span class=\"line\">1267</span><br><span class=\"line\">1268</span><br><span class=\"line\">1269</span><br><span class=\"line\">1270</span><br><span class=\"line\">1271</span><br><span class=\"line\">1272</span><br><span class=\"line\">1273</span><br><span class=\"line\">1274</span><br><span class=\"line\">1275</span><br><span class=\"line\">1276</span><br><span class=\"line\">1277</span><br><span class=\"line\">1278</span><br><span class=\"line\">1279</span><br><span class=\"line\">1280</span><br><span class=\"line\">1281</span><br><span class=\"line\">1282</span><br><span class=\"line\">1283</span><br><span class=\"line\">1284</span><br><span class=\"line\">1285</span><br><span class=\"line\">1286</span><br><span class=\"line\">1287</span><br><span class=\"line\">1288</span><br><span class=\"line\">1289</span><br><span class=\"line\">1290</span><br><span class=\"line\">1291</span><br><span class=\"line\">1292</span><br><span class=\"line\">1293</span><br><span class=\"line\">1294</span><br><span class=\"line\">1295</span><br><span class=\"line\">1296</span><br><span class=\"line\">1297</span><br><span class=\"line\">1298</span><br><span class=\"line\">1299</span><br><span class=\"line\">1300</span><br><span class=\"line\">1301</span><br><span class=\"line\">1302</span><br><span class=\"line\">1303</span><br><span class=\"line\">1304</span><br><span class=\"line\">1305</span><br><span class=\"line\">1306</span><br><span class=\"line\">1307</span><br><span class=\"line\">1308</span><br><span class=\"line\">1309</span><br><span class=\"line\">1310</span><br><span class=\"line\">1311</span><br><span class=\"line\">1312</span><br><span class=\"line\">1313</span><br><span class=\"line\">1314</span><br><span class=\"line\">1315</span><br><span class=\"line\">1316</span><br><span class=\"line\">1317</span><br><span class=\"line\">1318</span><br><span class=\"line\">1319</span><br><span class=\"line\">1320</span><br><span class=\"line\">1321</span><br><span class=\"line\">1322</span><br><span class=\"line\">1323</span><br><span class=\"line\">1324</span><br><span class=\"line\">1325</span><br><span class=\"line\">1326</span><br><span class=\"line\">1327</span><br><span class=\"line\">1328</span><br><span class=\"line\">1329</span><br><span class=\"line\">1330</span><br><span class=\"line\">1331</span><br><span class=\"line\">1332</span><br><span class=\"line\">1333</span><br><span class=\"line\">1334</span><br><span class=\"line\">1335</span><br><span class=\"line\">1336</span><br><span class=\"line\">1337</span><br><span class=\"line\">1338</span><br><span class=\"line\">1339</span><br><span class=\"line\">1340</span><br><span class=\"line\">1341</span><br><span class=\"line\">1342</span><br><span class=\"line\">1343</span><br><span class=\"line\">1344</span><br><span class=\"line\">1345</span><br><span class=\"line\">1346</span><br><span class=\"line\">1347</span><br><span class=\"line\">1348</span><br><span class=\"line\">1349</span><br><span class=\"line\">1350</span><br><span class=\"line\">1351</span><br><span class=\"line\">1352</span><br><span class=\"line\">1353</span><br><span class=\"line\">1354</span><br><span class=\"line\">1355</span><br><span class=\"line\">1356</span><br><span class=\"line\">1357</span><br><span class=\"line\">1358</span><br><span class=\"line\">1359</span><br><span class=\"line\">1360</span><br><span class=\"line\">1361</span><br><span class=\"line\">1362</span><br><span class=\"line\">1363</span><br><span class=\"line\">1364</span><br><span class=\"line\">1365</span><br><span class=\"line\">1366</span><br><span class=\"line\">1367</span><br><span class=\"line\">1368</span><br><span class=\"line\">1369</span><br><span class=\"line\">1370</span><br><span class=\"line\">1371</span><br><span class=\"line\">1372</span><br><span class=\"line\">1373</span><br><span class=\"line\">1374</span><br><span class=\"line\">1375</span><br><span class=\"line\">1376</span><br><span class=\"line\">1377</span><br><span class=\"line\">1378</span><br><span class=\"line\">1379</span><br><span class=\"line\">1380</span><br><span class=\"line\">1381</span><br><span class=\"line\">1382</span><br><span class=\"line\">1383</span><br><span class=\"line\">1384</span><br><span class=\"line\">1385</span><br><span class=\"line\">1386</span><br><span class=\"line\">1387</span><br><span class=\"line\">1388</span><br><span class=\"line\">1389</span><br><span class=\"line\">1390</span><br><span class=\"line\">1391</span><br><span class=\"line\">1392</span><br><span class=\"line\">1393</span><br><span class=\"line\">1394</span><br><span class=\"line\">1395</span><br><span class=\"line\">1396</span><br><span class=\"line\">1397</span><br><span class=\"line\">1398</span><br><span class=\"line\">1399</span><br><span class=\"line\">1400</span><br><span class=\"line\">1401</span><br><span class=\"line\">1402</span><br><span class=\"line\">1403</span><br><span class=\"line\">1404</span><br><span class=\"line\">1405</span><br><span class=\"line\">1406</span><br><span class=\"line\">1407</span><br><span class=\"line\">1408</span><br><span class=\"line\">1409</span><br><span class=\"line\">1410</span><br><span class=\"line\">1411</span><br><span class=\"line\">1412</span><br><span class=\"line\">1413</span><br><span class=\"line\">1414</span><br><span class=\"line\">1415</span><br><span class=\"line\">1416</span><br><span class=\"line\">1417</span><br><span class=\"line\">1418</span><br><span class=\"line\">1419</span><br><span class=\"line\">1420</span><br><span class=\"line\">1421</span><br><span class=\"line\">1422</span><br><span class=\"line\">1423</span><br><span class=\"line\">1424</span><br><span class=\"line\">1425</span><br><span class=\"line\">1426</span><br><span class=\"line\">1427</span><br><span class=\"line\">1428</span><br><span class=\"line\">1429</span><br><span class=\"line\">1430</span><br><span class=\"line\">1431</span><br><span class=\"line\">1432</span><br><span class=\"line\">1433</span><br><span class=\"line\">1434</span><br><span class=\"line\">1435</span><br><span class=\"line\">1436</span><br><span class=\"line\">1437</span><br><span class=\"line\">1438</span><br><span class=\"line\">1439</span><br><span class=\"line\">1440</span><br><span class=\"line\">1441</span><br><span class=\"line\">1442</span><br><span class=\"line\">1443</span><br><span class=\"line\">1444</span><br><span class=\"line\">1445</span><br><span class=\"line\">1446</span><br><span class=\"line\">1447</span><br><span class=\"line\">1448</span><br><span class=\"line\">1449</span><br><span class=\"line\">1450</span><br><span class=\"line\">1451</span><br><span class=\"line\">1452</span><br><span class=\"line\">1453</span><br><span class=\"line\">1454</span><br><span class=\"line\">1455</span><br><span class=\"line\">1456</span><br><span class=\"line\">1457</span><br><span class=\"line\">1458</span><br><span class=\"line\">1459</span><br><span class=\"line\">1460</span><br><span class=\"line\">1461</span><br><span class=\"line\">1462</span><br><span class=\"line\">1463</span><br><span class=\"line\">1464</span><br><span class=\"line\">1465</span><br><span class=\"line\">1466</span><br><span class=\"line\">1467</span><br><span class=\"line\">1468</span><br><span class=\"line\">1469</span><br><span class=\"line\">1470</span><br><span class=\"line\">1471</span><br><span class=\"line\">1472</span><br><span class=\"line\">1473</span><br><span class=\"line\">1474</span><br><span class=\"line\">1475</span><br><span class=\"line\">1476</span><br><span class=\"line\">1477</span><br><span class=\"line\">1478</span><br><span class=\"line\">1479</span><br><span class=\"line\">1480</span><br><span class=\"line\">1481</span><br><span class=\"line\">1482</span><br><span class=\"line\">1483</span><br><span class=\"line\">1484</span><br><span class=\"line\">1485</span><br><span class=\"line\">1486</span><br><span class=\"line\">1487</span><br><span class=\"line\">1488</span><br><span class=\"line\">1489</span><br><span class=\"line\">1490</span><br><span class=\"line\">1491</span><br><span class=\"line\">1492</span><br><span class=\"line\">1493</span><br><span class=\"line\">1494</span><br><span class=\"line\">1495</span><br><span class=\"line\">1496</span><br><span class=\"line\">1497</span><br><span class=\"line\">1498</span><br><span class=\"line\">1499</span><br><span class=\"line\">1500</span><br><span class=\"line\">1501</span><br><span class=\"line\">1502</span><br><span class=\"line\">1503</span><br><span class=\"line\">1504</span><br><span class=\"line\">1505</span><br><span class=\"line\">1506</span><br><span class=\"line\">1507</span><br><span class=\"line\">1508</span><br><span class=\"line\">1509</span><br><span class=\"line\">1510</span><br><span class=\"line\">1511</span><br><span class=\"line\">1512</span><br><span class=\"line\">1513</span><br><span class=\"line\">1514</span><br><span class=\"line\">1515</span><br><span class=\"line\">1516</span><br><span class=\"line\">1517</span><br><span class=\"line\">1518</span><br><span class=\"line\">1519</span><br><span class=\"line\">1520</span><br><span class=\"line\">1521</span><br><span class=\"line\">1522</span><br><span class=\"line\">1523</span><br><span class=\"line\">1524</span><br><span class=\"line\">1525</span><br><span class=\"line\">1526</span><br><span class=\"line\">1527</span><br><span class=\"line\">1528</span><br><span class=\"line\">1529</span><br><span class=\"line\">1530</span><br><span class=\"line\">1531</span><br><span class=\"line\">1532</span><br><span class=\"line\">1533</span><br><span class=\"line\">1534</span><br><span class=\"line\">1535</span><br><span class=\"line\">1536</span><br><span class=\"line\">1537</span><br><span class=\"line\">1538</span><br><span class=\"line\">1539</span><br><span class=\"line\">1540</span><br><span class=\"line\">1541</span><br><span class=\"line\">1542</span><br><span class=\"line\">1543</span><br><span class=\"line\">1544</span><br><span class=\"line\">1545</span><br><span class=\"line\">1546</span><br><span class=\"line\">1547</span><br><span class=\"line\">1548</span><br><span class=\"line\">1549</span><br><span class=\"line\">1550</span><br><span class=\"line\">1551</span><br><span class=\"line\">1552</span><br><span class=\"line\">1553</span><br><span class=\"line\">1554</span><br><span class=\"line\">1555</span><br><span class=\"line\">1556</span><br><span class=\"line\">1557</span><br><span class=\"line\">1558</span><br><span class=\"line\">1559</span><br><span class=\"line\">1560</span><br><span class=\"line\">1561</span><br><span class=\"line\">1562</span><br><span class=\"line\">1563</span><br><span class=\"line\">1564</span><br><span class=\"line\">1565</span><br><span class=\"line\">1566</span><br><span class=\"line\">1567</span><br><span class=\"line\">1568</span><br><span class=\"line\">1569</span><br><span class=\"line\">1570</span><br><span class=\"line\">1571</span><br><span class=\"line\">1572</span><br><span class=\"line\">1573</span><br><span class=\"line\">1574</span><br><span class=\"line\">1575</span><br><span class=\"line\">1576</span><br><span class=\"line\">1577</span><br><span class=\"line\">1578</span><br><span class=\"line\">1579</span><br><span class=\"line\">1580</span><br><span class=\"line\">1581</span><br><span class=\"line\">1582</span><br><span class=\"line\">1583</span><br><span class=\"line\">1584</span><br><span class=\"line\">1585</span><br><span class=\"line\">1586</span><br><span class=\"line\">1587</span><br><span class=\"line\">1588</span><br><span class=\"line\">1589</span><br><span class=\"line\">1590</span><br><span class=\"line\">1591</span><br><span class=\"line\">1592</span><br><span class=\"line\">1593</span><br><span class=\"line\">1594</span><br><span class=\"line\">1595</span><br><span class=\"line\">1596</span><br><span class=\"line\">1597</span><br><span class=\"line\">1598</span><br><span class=\"line\">1599</span><br><span class=\"line\">1600</span><br><span class=\"line\">1601</span><br><span class=\"line\">1602</span><br><span class=\"line\">1603</span><br><span class=\"line\">1604</span><br><span class=\"line\">1605</span><br><span class=\"line\">1606</span><br><span class=\"line\">1607</span><br><span class=\"line\">1608</span><br><span class=\"line\">1609</span><br><span class=\"line\">1610</span><br><span class=\"line\">1611</span><br><span class=\"line\">1612</span><br><span class=\"line\">1613</span><br><span class=\"line\">1614</span><br><span class=\"line\">1615</span><br><span class=\"line\">1616</span><br><span class=\"line\">1617</span><br><span class=\"line\">1618</span><br><span class=\"line\">1619</span><br><span class=\"line\">1620</span><br><span class=\"line\">1621</span><br><span class=\"line\">1622</span><br><span class=\"line\">1623</span><br><span class=\"line\">1624</span><br><span class=\"line\">1625</span><br><span class=\"line\">1626</span><br><span class=\"line\">1627</span><br><span class=\"line\">1628</span><br><span class=\"line\">1629</span><br><span class=\"line\">1630</span><br><span class=\"line\">1631</span><br><span class=\"line\">1632</span><br><span class=\"line\">1633</span><br><span class=\"line\">1634</span><br><span class=\"line\">1635</span><br><span class=\"line\">1636</span><br><span class=\"line\">1637</span><br><span class=\"line\">1638</span><br><span class=\"line\">1639</span><br><span class=\"line\">1640</span><br><span class=\"line\">1641</span><br><span class=\"line\">1642</span><br><span class=\"line\">1643</span><br><span class=\"line\">1644</span><br><span class=\"line\">1645</span><br><span class=\"line\">1646</span><br><span class=\"line\">1647</span><br><span class=\"line\">1648</span><br><span class=\"line\">1649</span><br><span class=\"line\">1650</span><br><span class=\"line\">1651</span><br><span class=\"line\">1652</span><br><span class=\"line\">1653</span><br><span class=\"line\">1654</span><br><span class=\"line\">1655</span><br><span class=\"line\">1656</span><br><span class=\"line\">1657</span><br><span class=\"line\">1658</span><br><span class=\"line\">1659</span><br><span class=\"line\">1660</span><br><span class=\"line\">1661</span><br><span class=\"line\">1662</span><br><span class=\"line\">1663</span><br><span class=\"line\">1664</span><br><span class=\"line\">1665</span><br><span class=\"line\">1666</span><br><span class=\"line\">1667</span><br><span class=\"line\">1668</span><br><span class=\"line\">1669</span><br><span class=\"line\">1670</span><br><span class=\"line\">1671</span><br><span class=\"line\">1672</span><br><span class=\"line\">1673</span><br><span class=\"line\">1674</span><br><span class=\"line\">1675</span><br><span class=\"line\">1676</span><br><span class=\"line\">1677</span><br><span class=\"line\">1678</span><br><span class=\"line\">1679</span><br><span class=\"line\">1680</span><br><span class=\"line\">1681</span><br><span class=\"line\">1682</span><br><span class=\"line\">1683</span><br><span class=\"line\">1684</span><br><span class=\"line\">1685</span><br><span class=\"line\">1686</span><br><span class=\"line\">1687</span><br><span class=\"line\">1688</span><br><span class=\"line\">1689</span><br><span class=\"line\">1690</span><br><span class=\"line\">1691</span><br><span class=\"line\">1692</span><br><span class=\"line\">1693</span><br><span class=\"line\">1694</span><br><span class=\"line\">1695</span><br><span class=\"line\">1696</span><br><span class=\"line\">1697</span><br><span class=\"line\">1698</span><br><span class=\"line\">1699</span><br><span class=\"line\">1700</span><br><span class=\"line\">1701</span><br><span class=\"line\">1702</span><br><span class=\"line\">1703</span><br><span class=\"line\">1704</span><br><span class=\"line\">1705</span><br><span class=\"line\">1706</span><br><span class=\"line\">1707</span><br><span class=\"line\">1708</span><br><span class=\"line\">1709</span><br><span class=\"line\">1710</span><br><span class=\"line\">1711</span><br><span class=\"line\">1712</span><br><span class=\"line\">1713</span><br><span class=\"line\">1714</span><br><span class=\"line\">1715</span><br><span class=\"line\">1716</span><br><span class=\"line\">1717</span><br><span class=\"line\">1718</span><br><span class=\"line\">1719</span><br><span class=\"line\">1720</span><br><span class=\"line\">1721</span><br><span class=\"line\">1722</span><br><span class=\"line\">1723</span><br><span class=\"line\">1724</span><br><span class=\"line\">1725</span><br><span class=\"line\">1726</span><br><span class=\"line\">1727</span><br><span class=\"line\">1728</span><br><span class=\"line\">1729</span><br><span class=\"line\">1730</span><br><span class=\"line\">1731</span><br><span class=\"line\">1732</span><br><span class=\"line\">1733</span><br><span class=\"line\">1734</span><br><span class=\"line\">1735</span><br><span class=\"line\">1736</span><br><span class=\"line\">1737</span><br><span class=\"line\">1738</span><br><span class=\"line\">1739</span><br><span class=\"line\">1740</span><br><span class=\"line\">1741</span><br><span class=\"line\">1742</span><br><span class=\"line\">1743</span><br><span class=\"line\">1744</span><br><span class=\"line\">1745</span><br><span class=\"line\">1746</span><br><span class=\"line\">1747</span><br><span class=\"line\">1748</span><br><span class=\"line\">1749</span><br><span class=\"line\">1750</span><br><span class=\"line\">1751</span><br><span class=\"line\">1752</span><br><span class=\"line\">1753</span><br><span class=\"line\">1754</span><br><span class=\"line\">1755</span><br><span class=\"line\">1756</span><br><span class=\"line\">1757</span><br><span class=\"line\">1758</span><br><span class=\"line\">1759</span><br><span class=\"line\">1760</span><br><span class=\"line\">1761</span><br><span class=\"line\">1762</span><br><span class=\"line\">1763</span><br><span class=\"line\">1764</span><br><span class=\"line\">1765</span><br><span class=\"line\">1766</span><br><span class=\"line\">1767</span><br><span class=\"line\">1768</span><br><span class=\"line\">1769</span><br><span class=\"line\">1770</span><br><span class=\"line\">1771</span><br><span class=\"line\">1772</span><br><span class=\"line\">1773</span><br><span class=\"line\">1774</span><br><span class=\"line\">1775</span><br><span class=\"line\">1776</span><br><span class=\"line\">1777</span><br><span class=\"line\">1778</span><br><span class=\"line\">1779</span><br><span class=\"line\">1780</span><br><span class=\"line\">1781</span><br><span class=\"line\">1782</span><br><span class=\"line\">1783</span><br><span class=\"line\">1784</span><br><span class=\"line\">1785</span><br><span class=\"line\">1786</span><br><span class=\"line\">1787</span><br><span class=\"line\">1788</span><br><span class=\"line\">1789</span><br><span class=\"line\">1790</span><br><span class=\"line\">1791</span><br><span class=\"line\">1792</span><br><span class=\"line\">1793</span><br><span class=\"line\">1794</span><br><span class=\"line\">1795</span><br><span class=\"line\">1796</span><br><span class=\"line\">1797</span><br><span class=\"line\">1798</span><br><span class=\"line\">1799</span><br><span class=\"line\">1800</span><br><span class=\"line\">1801</span><br><span class=\"line\">1802</span><br><span class=\"line\">1803</span><br><span class=\"line\">1804</span><br><span class=\"line\">1805</span><br><span class=\"line\">1806</span><br><span class=\"line\">1807</span><br><span class=\"line\">1808</span><br><span class=\"line\">1809</span><br><span class=\"line\">1810</span><br><span class=\"line\">1811</span><br><span class=\"line\">1812</span><br><span class=\"line\">1813</span><br><span class=\"line\">1814</span><br><span class=\"line\">1815</span><br><span class=\"line\">1816</span><br><span class=\"line\">1817</span><br><span class=\"line\">1818</span><br><span class=\"line\">1819</span><br><span class=\"line\">1820</span><br><span class=\"line\">1821</span><br><span class=\"line\">1822</span><br><span class=\"line\">1823</span><br><span class=\"line\">1824</span><br><span class=\"line\">1825</span><br><span class=\"line\">1826</span><br><span class=\"line\">1827</span><br><span class=\"line\">1828</span><br><span class=\"line\">1829</span><br><span class=\"line\">1830</span><br><span class=\"line\">1831</span><br><span class=\"line\">1832</span><br><span class=\"line\">1833</span><br><span class=\"line\">1834</span><br><span class=\"line\">1835</span><br><span class=\"line\">1836</span><br><span class=\"line\">1837</span><br><span class=\"line\">1838</span><br><span class=\"line\">1839</span><br><span class=\"line\">1840</span><br><span class=\"line\">1841</span><br><span class=\"line\">1842</span><br><span class=\"line\">1843</span><br><span class=\"line\">1844</span><br><span class=\"line\">1845</span><br><span class=\"line\">1846</span><br><span class=\"line\">1847</span><br><span class=\"line\">1848</span><br><span class=\"line\">1849</span><br><span class=\"line\">1850</span><br><span class=\"line\">1851</span><br><span class=\"line\">1852</span><br><span class=\"line\">1853</span><br><span class=\"line\">1854</span><br><span class=\"line\">1855</span><br><span class=\"line\">1856</span><br><span class=\"line\">1857</span><br><span class=\"line\">1858</span><br><span class=\"line\">1859</span><br><span class=\"line\">1860</span><br><span class=\"line\">1861</span><br><span class=\"line\">1862</span><br><span class=\"line\">1863</span><br><span class=\"line\">1864</span><br><span class=\"line\">1865</span><br><span class=\"line\">1866</span><br><span class=\"line\">1867</span><br><span class=\"line\">1868</span><br><span class=\"line\">1869</span><br><span class=\"line\">1870</span><br><span class=\"line\">1871</span><br><span class=\"line\">1872</span><br><span class=\"line\">1873</span><br><span class=\"line\">1874</span><br><span class=\"line\">1875</span><br><span class=\"line\">1876</span><br><span class=\"line\">1877</span><br><span class=\"line\">1878</span><br><span class=\"line\">1879</span><br><span class=\"line\">1880</span><br><span class=\"line\">1881</span><br><span class=\"line\">1882</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 文件&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    ls -rtl                                    # 按时间倒叙列出所有目录和文件 ll -rt</span><br><span class=\"line\">    touch file                                 # 创建空白文件</span><br><span class=\"line\">    rm -rf dirname                             # 不提示删除非空目录(-r:递归删除 -f强制)</span><br><span class=\"line\">    dos2unix                                   # windows文本转linux文本</span><br><span class=\"line\">    unix2dos                                   # linux文本转windows文本</span><br><span class=\"line\">    enca filename                              # 查看编码  安装 yum install -y enca</span><br><span class=\"line\">    md5sum                                     # 查看md5值</span><br><span class=\"line\">    ln sourcefile newfile                      # 硬链接</span><br><span class=\"line\">    ln -s sourcefile newfile                   # 符号连接</span><br><span class=\"line\">    readlink -f /data                          # 查看连接真实目录</span><br><span class=\"line\">    cat file | nl |less                        # 查看上下翻页且显示行号  q退出</span><br><span class=\"line\">    head                                       # 查看文件开头内容</span><br><span class=\"line\">    head -c 10m                                # 截取文件中10M内容</span><br><span class=\"line\">    split -C 10M                               # 将文件切割大小为10M -C按行</span><br><span class=\"line\">    tail -f file                               # 查看结尾 监视日志文件</span><br><span class=\"line\">    tail -F file                               # 监视日志并重试, 针对文件被mv的情况可以持续读取</span><br><span class=\"line\">    file                                       # 检查文件类型</span><br><span class=\"line\">    umask                                      # 更改默认权限</span><br><span class=\"line\">    uniq                                       # 删除重复的行</span><br><span class=\"line\">    uniq -c                                    # 重复的行出现次数</span><br><span class=\"line\">    uniq -u                                    # 只显示不重复行</span><br><span class=\"line\">    paste a b                                  # 将两个文件合并用tab键分隔开</span><br><span class=\"line\">    paste -d&#x27;+&#x27; a b                            # 将两个文件合并指定&#x27;+&#x27;符号隔开</span><br><span class=\"line\">    paste -s a                                 # 将多行数据合并到一行用tab键隔开</span><br><span class=\"line\">    chattr +i /etc/passwd                      # 不得任意改变文件或目录 -i去掉锁 -R递归，lsattr file查看文件锁情况</span><br><span class=\"line\">    more                                       # 向下分面器</span><br><span class=\"line\">    locate aaa                                 # 搜索</span><br><span class=\"line\">    wc -l file                                 # 查看行数</span><br><span class=\"line\">    cp filename&#123;,.bak&#125;                         # 快速备份一个文件</span><br><span class=\"line\">    \\cp a b                                    # 拷贝不提示 既不使用别名 cp -i</span><br><span class=\"line\">    rev                                        # 将行中的字符逆序排列</span><br><span class=\"line\">    comm -12 2 3                               # 行和行比较匹配</span><br><span class=\"line\">    echo &quot;10.45aa&quot; |cksum                      # 字符串转数字编码，可做校验，也可用于文件校验</span><br><span class=\"line\">    iconv -f gbk -t utf8 source.txt &gt; new.txt  # 转换编码</span><br><span class=\"line\">    xxd /boot/grub/stage1                      # 16进制查看</span><br><span class=\"line\">    hexdump -C /boot/grub/stage1               # 16进制查看</span><br><span class=\"line\">    rename source new file                     # 重命名 可正则</span><br><span class=\"line\">    watch -d -n 1 &#x27;df; ls -FlAt /path&#x27;         # 实时某个目录下查看最新改动过的文件</span><br><span class=\"line\">    cp -v  /dev/dvd  /rhel4.6.iso9660          # 制作镜像</span><br><span class=\"line\">    diff suzu.c suzu2.c  &gt; sz.patch            # 制作补丁</span><br><span class=\"line\">    patch suzu.c &lt; sz.patch                    # 安装补丁</span><br><span class=\"line\"></span><br><span class=\"line\">    sort排序&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        -t                                     # 指定排序时所用的栏位分隔字符</span><br><span class=\"line\">        -n                                     # 依照数值的大小排序</span><br><span class=\"line\">        -r                                     # 以相反的顺序来排序</span><br><span class=\"line\">        -f                                     # 排序时，将小写字母视为大写字母</span><br><span class=\"line\">        -d                                     # 排序时，处理英文字母、数字及空格字符外，忽略其他的字符</span><br><span class=\"line\">        -c                                     # 检查文件是否已经按照顺序排序</span><br><span class=\"line\">        -b                                     # 忽略每行前面开始处的空格字符</span><br><span class=\"line\">        -M                                     # 前面3个字母依照月份的缩写进行排序</span><br><span class=\"line\">        -k                                     # 指定域</span><br><span class=\"line\">        -m                                     # 将几个排序好的文件进行合并</span><br><span class=\"line\">        -T                                     # 指定临时文件目录,默认在/tmp</span><br><span class=\"line\">        -o                                     # 将排序后的结果存入指定的文        </span><br><span class=\"line\"></span><br><span class=\"line\">        sort -n                                # 按数字排序</span><br><span class=\"line\">        sort -nr                               # 按数字倒叙</span><br><span class=\"line\">        sort -u                                # 过滤重复行</span><br><span class=\"line\">        sort -m a.txt c.txt                    # 将两个文件内容整合到一起</span><br><span class=\"line\">        sort -n -t&#x27; &#x27; -k 2 -k 3 a.txt          # 第二域相同，将从第三域进行升降处理</span><br><span class=\"line\">        sort -n -t&#x27;:&#x27; -k 3r a.txt              # 以:为分割域的第三域进行倒叙排列</span><br><span class=\"line\">        sort -k 1.3 a.txt                      # 从第三个字母起进行排序</span><br><span class=\"line\">        sort -t&quot; &quot; -k 2n -u  a.txt             # 以第二域进行排序，如果遇到重复的，就删除</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    find查找&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # linux文件无创建时间</span><br><span class=\"line\">        # Access 使用时间</span><br><span class=\"line\">        # Modify 内容修改时间</span><br><span class=\"line\">        # Change 状态改变时间(权限、属主)</span><br><span class=\"line\">        # 时间默认以24小时为单位,当前时间到向前24小时为0天,向前48-72小时为2天</span><br><span class=\"line\">        # -and 且 匹配两个条件 参数可以确定时间范围 -mtime +2 -and -mtime -4</span><br><span class=\"line\">        # -or 或 匹配任意一个条件</span><br><span class=\"line\"></span><br><span class=\"line\">        find /etc -name &quot;*http*&quot;                                # 按文件名查找</span><br><span class=\"line\">        find . -type f                                          # 查找某一类型文件</span><br><span class=\"line\">        find / -perm                                            # 按照文件权限查找</span><br><span class=\"line\">        find / -user                                            # 按照文件属主查找</span><br><span class=\"line\">        find / -group                                           # 按照文件所属的组来查找文件</span><br><span class=\"line\">        find / -atime -n                                        # 文件使用时间在N天以内</span><br><span class=\"line\">        find / -atime +n                                        # 文件使用时间在N天以前</span><br><span class=\"line\">        find / -mtime +n                                        # 文件内容改变时间在N天以前</span><br><span class=\"line\">        find / -ctime +n                                        # 文件状态改变时间在N天前</span><br><span class=\"line\">        find / -mmin +30                                        # 按分钟查找内容改变</span><br><span class=\"line\">        find / -size +1000000c -print                           # 查找文件长度大于1M字节的文件</span><br><span class=\"line\">        find /etc -name &quot;*passwd*&quot; -exec grep &quot;xuesong&quot; &#123;&#125; \\;   # 按名字查找文件传递给-exec后命令</span><br><span class=\"line\">        find . -name &#x27;t*&#x27; -exec basename &#123;&#125; \\;                  # 查找文件名,不取路径</span><br><span class=\"line\">        find . -type f -name &quot;err*&quot; -exec  rename err ERR &#123;&#125; \\; # 批量改名(查找err 替换为 ERR &#123;&#125;文件</span><br><span class=\"line\">        find path -name *name1* -or -name *name2*               # 查找任意一个关键字</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    vim编辑器&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 常用配置</span><br><span class=\"line\">        set smartindent</span><br><span class=\"line\">        set tabstop=4</span><br><span class=\"line\">        set shiftwidth=4</span><br><span class=\"line\">        set expandtab</span><br><span class=\"line\">        set softtabstop=4</span><br><span class=\"line\">        set noautoindent</span><br><span class=\"line\">        set nosmartindent</span><br><span class=\"line\">        set paste</span><br><span class=\"line\">        set clipboard=unnamed</span><br><span class=\"line\"></span><br><span class=\"line\">        gconf-editor           # 配置编辑器</span><br><span class=\"line\">        /etc/vimrc             # 配置文件路径</span><br><span class=\"line\">        vim +24 file           # 打开文件定位到指定行</span><br><span class=\"line\">        vim file1 file2        # 打开多个文件</span><br><span class=\"line\">        vim  -r file           # 恢复上次异常关闭的文件 .file.swp </span><br><span class=\"line\">        vim -O2 file1 file2    # 垂直分屏</span><br><span class=\"line\">        vim -on file1 file2    # 水平分屏</span><br><span class=\"line\">        Ctrl+ U                # 向前翻页</span><br><span class=\"line\">        Ctrl+ D                # 向后翻页</span><br><span class=\"line\">        Ctrl+ww                # 在窗口间切换</span><br><span class=\"line\">        Ctrl+w +or-or=         # 增减高度</span><br><span class=\"line\">        :sp filename           # 上下分割打开新文件</span><br><span class=\"line\">        :vs filename           # 左右分割打开新文件</span><br><span class=\"line\">        :set nu                # 打开行号</span><br><span class=\"line\">        :set nonu              # 取消行号</span><br><span class=\"line\">        :nohl                  # 取消高亮</span><br><span class=\"line\">        :set paste             # 取消缩进</span><br><span class=\"line\">        :set autoindent        # 设置自动缩进</span><br><span class=\"line\">\t\t:set list              # 显示制表符</span><br><span class=\"line\">        :set ff                # 查看文本格式</span><br><span class=\"line\">        :set binary            # 改为unix格式</span><br><span class=\"line\">        :%s/str/newstr/g       # 全部替换</span><br><span class=\"line\">        :200                   # 跳转到200  1 文件头</span><br><span class=\"line\">        G                      # 跳到行尾</span><br><span class=\"line\">        dd                     # 删除当前行 并复制 可直接p粘贴</span><br><span class=\"line\">        11111dd                # 删除11111行，可用来清空文件</span><br><span class=\"line\">        r                      # 替换单个字符</span><br><span class=\"line\">        R                      # 替换多个字符</span><br><span class=\"line\">        u                      # 撤销上次操作</span><br><span class=\"line\">        *                      # 全文匹配当前光标所在字符串</span><br><span class=\"line\">        $                      # 行尾</span><br><span class=\"line\">        0                      # 行首</span><br><span class=\"line\">        X                      # 文档加密</span><br><span class=\"line\">        v =                    # 自动格式化代码</span><br><span class=\"line\">        Ctrl+v                 # 可视模式</span><br><span class=\"line\">        Ctrl+v I ESC           # 多行操作</span><br><span class=\"line\">        Ctrl+v s ESC           # 批量取消注释</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    归档解压缩&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        tar zxvpf gz.tar.gz  dir                         # 解包指定tar.gz中的内容  不指定目录则全解压</span><br><span class=\"line\">        tar zcvpf /$path/gz.tar.gz *                     # 打包gz 注意*最好用相对路径</span><br><span class=\"line\">        tar zcf /$path/gz.tar.gz *                       # 打包正确不提示</span><br><span class=\"line\">        tar ztvpf gz.tar.gz                              # 查看gz</span><br><span class=\"line\">        tar xvf 1.tar -C dir                             # 解包tar 放到指定目录</span><br><span class=\"line\">        tar -cvf 1.tar *                                 # 打包tar</span><br><span class=\"line\">        tar tvf 1.tar                                    # 查看tar</span><br><span class=\"line\">        tar -rvf 1.tar filename                          # 给tar追加文件</span><br><span class=\"line\">        tar --exclude=/home/dmtsai --exclude=*.tar -zcvf myfile.tar.gz /home/* /etc      # 打包/home, /etc ，但排除 /home/dmtsai</span><br><span class=\"line\">        tar -N &quot;2005/06/01&quot; -zcvf home.tar.gz /home      # 在 /home 当中，比 2005/06/01 新的文件才备份</span><br><span class=\"line\">        tar -zcvfh home.tar.gz /home                     # 打包目录中包括连接目录</span><br><span class=\"line\">        tar zcf - ./ | ssh root@IP &quot;tar zxf - -C /xxxx&quot;  # 一边压缩一边解压</span><br><span class=\"line\">        zgrep str 1.gz                                   # 查看压缩包中文件字符行</span><br><span class=\"line\">        bzip2  -dv 1.tar.bz2                             # 解压bzip2</span><br><span class=\"line\">        bzip2 -v 1.tar                                   # bzip2压缩</span><br><span class=\"line\">        bzcat                                            # 查看bzip2</span><br><span class=\"line\">        gzip file                                        # 直接压缩文件 # 压缩后源文件消失</span><br><span class=\"line\">        gunzip file.gz                                   # 直接解压文件 # 解压后源文件消失</span><br><span class=\"line\">        gzip -r dir/                                     # 递归压缩目录</span><br><span class=\"line\">        gzip  -r -d dir/                                 # 递归解压目录</span><br><span class=\"line\">        gzip -dv 1.tar.gz                                # 解压gzip到tar</span><br><span class=\"line\">        gzip -v 1.tar                                    # 压缩tar到gz</span><br><span class=\"line\">        unzip zip.zip                                    # 解压zip</span><br><span class=\"line\">        zip zip.zip *                                    # 压缩zip</span><br><span class=\"line\">        rar a rar.rar *.jpg                              # 压缩文件为rar包</span><br><span class=\"line\">        unrar x rar.rar                                  # 解压rar包</span><br><span class=\"line\">\t\tpigz -9 -p 2 *.log                               # 压缩文件,pigz是gzip升级版，可并行压缩</span><br><span class=\"line\">\t\tpigz -9 -d *.gz                                  # 解压</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    文件ACL权限控制&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        getfacl 1.test                      # 查看文件ACL权限</span><br><span class=\"line\">        setfacl -R -m u:xuesong:rw- 1.test  # 对文件增加用户的读写权限 -R 递归</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    svn&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        --force # 强制覆盖</span><br><span class=\"line\">        /usr/bin/svn --username user --password passwd co  $Code  $&#123;SvnPath&#125;src/                 # 检出整个项目</span><br><span class=\"line\">        /usr/bin/svn --username user --password passwd up  $Code  $&#123;SvnPath&#125;src/                 # 更新项目</span><br><span class=\"line\">        /usr/bin/svn --username user --password passwd export  $Code$File $&#123;SvnPath&#125;src/$File    # 导出个别文件</span><br><span class=\"line\">        /usr/bin/svn --username user --password passwd export -r 版本号 svn路径 本地路径 --force   # 导出指定版本</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    git&#123;</span><br><span class=\"line\">\t    git push --set-upstream origin develop             # 推送新分支</span><br><span class=\"line\">\t    git rm -r ./*                                      # 置空分支代码</span><br><span class=\"line\">        git push origin --delete v2.9                      # 删除远程分支</span><br><span class=\"line\">        git clone git@10.10.10.10:gittest.git  ./gittest/  # 克隆项目到指定目录</span><br><span class=\"line\">        git clone  -b develop --depth=1 http://git.a.com/d.git   # 克隆指定分支 克隆一层</span><br><span class=\"line\">\t\tgit checkout .                                     # 放弃所有文件修改</span><br><span class=\"line\">\t\tgit checkout -- filename                           # 放弃单个文件修改</span><br><span class=\"line\">        git status                                         # Show the working tree(工作树) status</span><br><span class=\"line\">        git log -n 1 --stat                                # 查看最后一次日志文件</span><br><span class=\"line\">        git branch -a                                      # 列出远程跟踪分支(remote-tracking branches)和本地分支</span><br><span class=\"line\">        git checkout developing                            # 切换到developing分支</span><br><span class=\"line\">        git checkout -b release                            # 切换分支没有从当前分支创建</span><br><span class=\"line\">        git checkout -b release origin/master              # 从远程分支创建本地镜像分支</span><br><span class=\"line\">        git push origin --delete release                   # 从远端删除分区，服务端有可能设置保护不允许删除</span><br><span class=\"line\">        git push origin release                            # 把本地分支提交到远程</span><br><span class=\"line\">        git pull                                           # 更新项目 需要cd到项目目录中</span><br><span class=\"line\">        git fetch -f -p                                    # 抓取远端代码但不合并到当前</span><br><span class=\"line\">        git reset --hard origin/master                     # 和远端同步分支</span><br><span class=\"line\">        git add .                                          # 更新所有文件</span><br><span class=\"line\">        git commit -m &quot;gittest up&quot;                         # 提交操作并添加备注</span><br><span class=\"line\">        git push                                           # 正式提交到远程git服务器</span><br><span class=\"line\">        git push [-u origin master]                        # 正式提交到远程git服务器(master分支)</span><br><span class=\"line\">        git tag [-a] dev-v-0.11.54 [-m &#x27;fix #67&#x27;]          # 创建tag,名为dev-v-0.11.54,备注fix #67</span><br><span class=\"line\">        git tag -l dev-v-0.11.54                           # 查看tag(dev-v-0.11.5)</span><br><span class=\"line\">        git push origin --tags                             # 提交tag</span><br><span class=\"line\">        git reset --hard                                   # 本地恢复整个项目</span><br><span class=\"line\">        git rm -r -n --cached  ./img                       # -n执行命令时,不会删除任何文件,而是展示此命令要删除的文件列表预览</span><br><span class=\"line\">        git rm -r --cached  ./img                          # 执行删除命令 需要commit和push让远程生效</span><br><span class=\"line\">        git init --bare smc-content-check.git              # 初始化新git项目  需要手动创建此目录并给git用户权限 chown -R git:git smc-content-check.git</span><br><span class=\"line\">        git config --global credential.helper store        # 记住密码</span><br><span class=\"line\">        git config [--global] user.name &quot;your name&quot;        # 设置你的用户名, 希望在一个特定的项目中使用不同的用户或e-mail地址, 不要--global选项</span><br><span class=\"line\">        git config [--global] user.email &quot;your email&quot;      # 设置你的e-mail地址, 每次Git提交都会使用该信息</span><br><span class=\"line\">        git config [--global] user.name                    # 查看用户名</span><br><span class=\"line\">        git config [--global] user.email                   # 查看用户e-mail</span><br><span class=\"line\">        git config --global --edit                         # 编辑~/.gitconfig(User-specific)配置文件, 值优先级高于/etc/gitconfig(System-wide)</span><br><span class=\"line\">        git config --edit                                  # 编辑.git/config(Repository specific)配置文件, 值优先级高于~/.gitconfig</span><br><span class=\"line\">        git cherry-pick  &lt;commit id&gt;                       # 用于把另一个本地分支的commit修改应用到当前分支 需要push到远程</span><br><span class=\"line\">        git log --pretty=format:&#x27;%h: %s&#x27; 9378b62..HEAD     # 查看指定范围更新操作 commit id</span><br><span class=\"line\">        git config --global core.ignorecase false          # 设置全局大小写敏感</span><br><span class=\"line\">        git ls-remote --heads origin refs/heads/test       # 查看</span><br><span class=\"line\">        git config pull.rebase false                       # 默认将pull下来的代码与现有的代码进行合并，有可能造成冲突。   </span><br><span class=\"line\"></span><br><span class=\"line\">        从远端拉一份新的&#123;</span><br><span class=\"line\">            # You have not concluded your merge (MERGE_HEAD exists)  git拉取失败</span><br><span class=\"line\">            git fetch --hard origin/master</span><br><span class=\"line\">            git reset --hard origin/master</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        删除远程分支并新建&#123;</span><br><span class=\"line\">            git checkout master</span><br><span class=\"line\">            git branch -r -d origin/test       # 删除远程分支  但有时候并没有删除 可以尝试使用下面的语句</span><br><span class=\"line\">            git push origin :test              # 推送一个空分支到远程分支，相当于删除远程分支</span><br><span class=\"line\">            git branch -d test                 # 删除本地test分支, -D 强制</span><br><span class=\"line\">            git branch -a |grep test</span><br><span class=\"line\">            git checkout -b test</span><br><span class=\"line\">            git push origin test</span><br><span class=\"line\"></span><br><span class=\"line\">            git reset --hard origin/test </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        迁移git项目&#123;</span><br><span class=\"line\">            git branch -r | grep -v &#x27;\\-&gt;&#x27; | while read remote; do git branch --track &quot;$&#123;remote#origin/&#125;&quot; &quot;$remote&quot;; done</span><br><span class=\"line\">            git fetch --all</span><br><span class=\"line\">            git pull --all</span><br><span class=\"line\">            git remote set-url origin git@git.github.cn:server/gw.git</span><br><span class=\"line\">            git push --all</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    恢复rm删除的文件&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # debugfs针对 ext2   # ext3grep针对 ext3   # extundelete针对 ext4</span><br><span class=\"line\">        df -T   # 首先查看磁盘分区格式</span><br><span class=\"line\">        umount /data/     # 卸载挂载,数据丢失请首先卸载挂载,或重新挂载只读</span><br><span class=\"line\">        ext3grep /dev/sdb1 --ls --inode 2         # 记录信息继续查找目录下文件inode信息</span><br><span class=\"line\">        ext3grep /dev/sdb1 --ls --inode 131081    # 此处是inode</span><br><span class=\"line\">        ext3grep /dev/sdb1 --restore-inode 49153  # 记录下inode信息开始恢复目录</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    openssl&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        openssl rand 15 -base64            # 口令生成</span><br><span class=\"line\">        openssl sha1 filename              # 哈希算法校验文件</span><br><span class=\"line\">        openssl md5 filename               # MD5校验文件</span><br><span class=\"line\">        openssl base64   filename.txt      # base64编码/解码文件(发送邮件附件之类功能会可以使用)</span><br><span class=\"line\">        openssl base64 -d   filename.bin   # base64编码/解码二进制文件</span><br><span class=\"line\">        openssl enc -aes-128-cbc   filename.aes-128-cbc                  # 加密文档</span><br><span class=\"line\">        # 推荐使用的加密算法是bf(Blowfish)和-aes-128-cbc(运行在CBC模式的128位密匙AES加密算法)，加密强度有保障</span><br><span class=\"line\">        openssl enc -d -aes-128-cbc -in filename.aes-128-cbc &gt; filename  # 解密文档</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">2 软件&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    rpm&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        rpm -ivh lynx          # rpm安装</span><br><span class=\"line\">        rpm -e lynx            # 卸载包</span><br><span class=\"line\">        rpm -e lynx --nodeps   # 强制卸载</span><br><span class=\"line\">        rpm -qa                # 查看所有安装的rpm包</span><br><span class=\"line\">        rpm -qa | grep lynx    # 查找包是否安装</span><br><span class=\"line\">        rpm -ql                # 软件包路径</span><br><span class=\"line\">        rpm -Uvh               # 升级包</span><br><span class=\"line\">        rpm --test lynx        # 测试</span><br><span class=\"line\">        rpm -qc                # 软件包配置文档</span><br><span class=\"line\">        rpm --initdb           # 初始化rpm 数据库</span><br><span class=\"line\">        rpm --rebuilddb        # 重建rpm数据库  在rpm和yum无响应的情况使用 先 rm -f /var/lib/rpm/__db.00* 在重建</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    yum&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        yum list                 # 所有软件列表</span><br><span class=\"line\">        yum install 包名          # 安装包和依赖包</span><br><span class=\"line\">        yum -y update            # 升级所有包版本,依赖关系，系统版本内核都升级</span><br><span class=\"line\">        yum -y update 软件包名    # 升级指定的软件包</span><br><span class=\"line\">        yum -y upgrade           # 不改变软件设置更新软件，系统版本升级，内核不改变</span><br><span class=\"line\">        yum search mail          # yum搜索相关包</span><br><span class=\"line\">        yum grouplist            # 软件包组</span><br><span class=\"line\">        yum -y groupinstall &quot;Virtualization&quot;   # 安装软件包组</span><br><span class=\"line\">        repoquery -ql gstreamer  # 不安装软件查看包含文件</span><br><span class=\"line\">        yum clean all            # 清除var下缓存</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    yum使用epel源&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 包下载地址: http://download.fedoraproject.org/pub/epel   # 选择版本5\\6\\7</span><br><span class=\"line\">        rpm -Uvh  http://mirrors.hustunique.com/epel//6/x86_64/epel-release-6-8.noarch.rpm</span><br><span class=\"line\"></span><br><span class=\"line\">        # 自适配版本</span><br><span class=\"line\">        yum install epel-release</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    自定义yum源&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        find /etc/yum.repos.d -name &quot;*.repo&quot; -exec mv &#123;&#125; &#123;&#125;.bak \\;</span><br><span class=\"line\"></span><br><span class=\"line\">        vim /etc/yum.repos.d/yum.repo</span><br><span class=\"line\">        [yum]</span><br><span class=\"line\">        #http</span><br><span class=\"line\">        baseurl=http://10.0.0.1/centos5.5</span><br><span class=\"line\">        #挂载iso</span><br><span class=\"line\">        #mount -o loop CentOS-5.8-x86_64-bin-DVD-1of2.iso /data/iso/</span><br><span class=\"line\">        #本地</span><br><span class=\"line\">        #baseurl=file:///data/iso/</span><br><span class=\"line\">        enable=1</span><br><span class=\"line\"></span><br><span class=\"line\">        #导入key</span><br><span class=\"line\">        rpm --import  /etc/pki/rpm-gpg/RPM-GPG-KEY-CentOS-5</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    编译&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        源码安装&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            ./configure --help                   # 查看所有编译参数</span><br><span class=\"line\">            ./configure  --prefix=/usr/local/    # 配置参数</span><br><span class=\"line\">            make                                 # 编译</span><br><span class=\"line\">            # make -j 8                          # 多线程编译,速度较快,但有些软件不支持</span><br><span class=\"line\">            make install                         # 安装包</span><br><span class=\"line\">            make clean                           # 清除编译结果</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        perl程序编译&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            perl Makefile.PL</span><br><span class=\"line\">            make</span><br><span class=\"line\">            make test</span><br><span class=\"line\">            make install</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        python程序编译&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            python file.py</span><br><span class=\"line\"></span><br><span class=\"line\">            # 源码包编译安装</span><br><span class=\"line\">            python setup.py build</span><br><span class=\"line\">            python setup.py install</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        编译c程序&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            gcc -g hello.c -o hello</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">3 系统&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    wall                                          # 给其它用户发消息</span><br><span class=\"line\">    whereis ls                                    # 搜索程序名，而且只搜索二进制文件</span><br><span class=\"line\">    which                                         # 查找命令是否存在,及存放位置</span><br><span class=\"line\">    locate                                        # 不是实时查找，查找的结果不精确，但查找速度很快 每天更新 /var/lib/locatedb</span><br><span class=\"line\">    clear                                         # 清空整个屏幕</span><br><span class=\"line\">    reset                                         # 重新初始化屏幕</span><br><span class=\"line\">    cal                                           # 显示月历</span><br><span class=\"line\">    echo -n 123456 | md5sum                       # md5加密</span><br><span class=\"line\">    mkpasswd                                      # 随机生成密码   -l位数 -C大小 -c小写 -d数字 -s特殊字符</span><br><span class=\"line\">    netstat -ntupl | grep port                    # 是否打开了某个端口</span><br><span class=\"line\">    ntpdate cn.pool.ntp.org                       # 同步时间, pool.ntp.org: public ntp time server for everyone(http://www.pool.ntp.org/zh/)</span><br><span class=\"line\">\t5 * * * * /usr/sbin/ntpdate 133.100.11.8 133.100.9.2 time.nist.gov time.windows.com</span><br><span class=\"line\">    tzselect                                      # 选择时区 #+8=(5 9 1 1) # (TZ=&#x27;Asia/Shanghai&#x27;; export TZ)括号内写入 /etc/profile</span><br><span class=\"line\">    /sbin/hwclock -w                              # 时间保存到硬件</span><br><span class=\"line\">    /etc/shadow                                   # 账户影子文件</span><br><span class=\"line\">    LANG=en                                       # 修改语言</span><br><span class=\"line\">    vim /etc/sysconfig/i18n                       # 修改编码  LANG=&quot;en_US.UTF-8&quot;</span><br><span class=\"line\">    export LC_ALL=C                               # 强制字符集</span><br><span class=\"line\">    vi /etc/hosts                                 # 查询静态主机名</span><br><span class=\"line\">    alias                                         # 别名</span><br><span class=\"line\">    watch uptime                                  # 监测命令动态刷新 监视</span><br><span class=\"line\">    ipcs -a                                       # 查看Linux系统当前单个共享内存段的最大值</span><br><span class=\"line\">    ldconfig                                      # 动态链接库管理命令</span><br><span class=\"line\">    ldd `which cmd`                               # 查看命令的依赖库</span><br><span class=\"line\">    dist-upgrade                                  # 会改变配置文件,改变旧的依赖关系，改变系统版本</span><br><span class=\"line\">    /boot/grub/grub.conf                          # grub启动项配置</span><br><span class=\"line\">    ps -mfL &lt;PID&gt;                                 # 查看指定进程启动的线程 线程数受 max user processes 限制</span><br><span class=\"line\">    ps uxm |wc -l                                 # 查看当前用户占用的进程数 [包括线程]  max user processes</span><br><span class=\"line\">    top -p  PID -H                                # 查看指定PID进程及线程</span><br><span class=\"line\">    lsof |wc -l                                   # 查看当前文件句柄数使用数量  open files</span><br><span class=\"line\">\tlsof -p pid                                   # 查看进程占用文件</span><br><span class=\"line\">    lsof |grep /lib                               # 查看加载库文件</span><br><span class=\"line\">    sysctl -a                                     # 查看当前所有系统内核参数</span><br><span class=\"line\">    sysctl -p                                     # 修改内核参数/etc/sysctl.conf，让/etc/rc.d/rc.sysinit读取生效</span><br><span class=\"line\">    strace -p pid                                 # 跟踪系统调用</span><br><span class=\"line\">    ps -eo &quot;%p %C  %z  %a&quot;|sort -k3 -n            # 把进程按内存使用大小排序</span><br><span class=\"line\">    strace uptime 2&gt;&amp;1|grep open                  # 查看命令打开的相关文件</span><br><span class=\"line\">    grep Hugepagesize /proc/meminfo               # 内存分页大小</span><br><span class=\"line\">    mkpasswd -l 8  -C 2 -c 2 -d 4 -s 0            # 随机生成指定类型密码</span><br><span class=\"line\">    echo 1 &gt; /proc/sys/net/ipv4/tcp_syncookies    # 使TCP SYN Cookie 保护生效  # &quot;SYN Attack&quot;是一种拒绝服务的攻击方式</span><br><span class=\"line\">    grep Swap  /proc/25151/smaps |awk &#x27;&#123;a+=$2&#125;END&#123;print a&#125;&#x27;    # 查询某pid使用的swap大小</span><br><span class=\"line\">    redir --lport=33060 --caddr=10.10.10.78 --cport=3306       # 端口映射 yum安装 用supervisor守护</span><br><span class=\"line\">\t/usr/sbin/chroot --userspec=nobody.nobody / sh -c  &quot;echo hello &gt; /tmp/chroot.log&quot; ## 以nobody用户取执行命令</span><br><span class=\"line\"></span><br><span class=\"line\">    开机启动脚本顺序&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        /etc/profile</span><br><span class=\"line\">        /etc/profile.d/*.sh</span><br><span class=\"line\">        ~/bash_profile</span><br><span class=\"line\">        ~/.bashrc</span><br><span class=\"line\">        /etc/bashrc</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    进程管理&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ps -eaf               # 查看所有进程</span><br><span class=\"line\">        kill -9 PID           # 强制终止某个PID进程</span><br><span class=\"line\">        kill -15 PID          # 安全退出 需程序内部处理信号</span><br><span class=\"line\">\t\tkillall nginx         # 杀死nginx这一组进程</span><br><span class=\"line\">        cmd &amp;                 # 命令后台运行</span><br><span class=\"line\">        nohup cmd &amp;           # 后台运行不受shell退出影响</span><br><span class=\"line\">        ctrl+z                # 将前台放入后台(暂停)</span><br><span class=\"line\">        jobs                  # 查看后台运行程序</span><br><span class=\"line\">        bg 2                  # 启动后台暂停进程</span><br><span class=\"line\">        fg 2                  # 调回后台进程</span><br><span class=\"line\">        pstree                # 进程树</span><br><span class=\"line\">        vmstat 1 9            # 每隔一秒报告系统性能信息9次</span><br><span class=\"line\">        sar                   # 查看cpu等状态</span><br><span class=\"line\">        lsof file             # 显示打开指定文件的所有进程</span><br><span class=\"line\">        lsof -i:32768         # 查看端口的进程</span><br><span class=\"line\">        renice +1 180         # 把180号进程的优先级加1</span><br><span class=\"line\">        exec sh a.sh          # 子进程替换原来程序的pid， 避免supervisor无法强制杀死进程</span><br><span class=\"line\"></span><br><span class=\"line\">        ps&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            ps aux |grep -v USER | sort -nk +4 | tail       # 显示消耗内存最多的10个运行中的进程，以内存使用量排序.cpu +3</span><br><span class=\"line\">            # USER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND</span><br><span class=\"line\">            %CPU     # 进程的cpu占用率</span><br><span class=\"line\">            %MEM     # 进程的内存占用率</span><br><span class=\"line\">            VSZ      # 进程虚拟大小,单位K(即总占用内存大小,包括真实内存和虚拟内存)</span><br><span class=\"line\">            RSS      # 进程使用的驻留集大小即实际物理内存大小</span><br><span class=\"line\">            START    # 进程启动时间和日期</span><br><span class=\"line\">            占用的虚拟内存大小 = VSZ - RSS</span><br><span class=\"line\"></span><br><span class=\"line\">            ps -eo pid,lstart,etime,args         # 查看进程启动时间</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        top&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            前五行是系统整体的统计信息。</span><br><span class=\"line\">            第一行: 任务队列信息，同 uptime 命令的执行结果。内容如下：</span><br><span class=\"line\">                01:06:48 当前时间</span><br><span class=\"line\">                up 1:22 系统运行时间，格式为时:分</span><br><span class=\"line\">                1 user 当前登录用户数</span><br><span class=\"line\">                load average: 0.06, 0.60, 0.48 系统负载，即任务队列的平均长度。</span><br><span class=\"line\">                三个数值分别为 1分钟、5分钟、15分钟前到现在的平均值。</span><br><span class=\"line\"></span><br><span class=\"line\">            第二、三行:为进程和CPU的信息。当有多个CPU时，这些内容可能会超过两行。内容如下：</span><br><span class=\"line\">                Tasks: 29 total 进程总数</span><br><span class=\"line\">                1 running 正在运行的进程数</span><br><span class=\"line\">                28 sleeping 睡眠的进程数</span><br><span class=\"line\">                0 stopped 停止的进程数</span><br><span class=\"line\">                0 zombie 僵尸进程数</span><br><span class=\"line\">                Cpu(s): 0.3% us 用户空间占用CPU百分比</span><br><span class=\"line\">                1.0% sy 内核空间占用CPU百分比</span><br><span class=\"line\">                0.0% ni 用户进程空间内改变过优先级的进程占用CPU百分比</span><br><span class=\"line\">                98.7% id 空闲CPU百分比</span><br><span class=\"line\">                0.0% wa 等待输入输出的CPU时间百分比</span><br><span class=\"line\">                0.0% hi</span><br><span class=\"line\">                0.0% si</span><br><span class=\"line\"></span><br><span class=\"line\">            第四、五行:为内存信息。内容如下：</span><br><span class=\"line\">                Mem: 191272k total 物理内存总量</span><br><span class=\"line\">                173656k used 使用的物理内存总量</span><br><span class=\"line\">                17616k free 空闲内存总量</span><br><span class=\"line\">                22052k buffers 用作内核缓存的内存量</span><br><span class=\"line\">                Swap: 192772k total 交换区总量</span><br><span class=\"line\">                0k used 使用的交换区总量</span><br><span class=\"line\">                192772k free 空闲交换区总量</span><br><span class=\"line\">                123988k cached 缓冲的交换区总量。</span><br><span class=\"line\">                内存中的内容被换出到交换区，而后又被换入到内存，但使用过的交换区尚未被覆盖，</span><br><span class=\"line\">                该数值即为这些内容已存在于内存中的交换区的大小。</span><br><span class=\"line\">                相应的内存再次被换出时可不必再对交换区写入。</span><br><span class=\"line\"></span><br><span class=\"line\">            进程信息区,各列的含义如下:  # 显示各个进程的详细信息</span><br><span class=\"line\"></span><br><span class=\"line\">            序号 列名    含义</span><br><span class=\"line\">            a   PID      进程id</span><br><span class=\"line\">            b   PPID     父进程id</span><br><span class=\"line\">            c   RUSER    Real user name</span><br><span class=\"line\">            d   UID      进程所有者的用户id</span><br><span class=\"line\">            e   USER     进程所有者的用户名</span><br><span class=\"line\">            f   GROUP    进程所有者的组名</span><br><span class=\"line\">            g   TTY      启动进程的终端名。不是从终端启动的进程则显示为 ?</span><br><span class=\"line\">            h   PR       优先级</span><br><span class=\"line\">            i   NI       nice值。负值表示高优先级，正值表示低优先级</span><br><span class=\"line\">            j   P        最后使用的CPU，仅在多CPU环境下有意义</span><br><span class=\"line\">            k   %CPU     上次更新到现在的CPU时间占用百分比</span><br><span class=\"line\">            l   TIME     进程使用的CPU时间总计，单位秒</span><br><span class=\"line\">            m   TIME+    进程使用的CPU时间总计，单位1/100秒</span><br><span class=\"line\">            n   %MEM     进程使用的物理内存百分比</span><br><span class=\"line\">            o   VIRT     进程使用的虚拟内存总量，单位kb。VIRT=SWAP+RES</span><br><span class=\"line\">            p   SWAP     进程使用的虚拟内存中，被换出的大小，单位kb。</span><br><span class=\"line\">            q   RES      进程使用的、未被换出的物理内存大小，单位kb。RES=CODE+DATA</span><br><span class=\"line\">            r   CODE     可执行代码占用的物理内存大小，单位kb</span><br><span class=\"line\">            s   DATA     可执行代码以外的部分(数据段+栈)占用的物理内存大小，单位kb</span><br><span class=\"line\">            t   SHR      共享内存大小，单位kb</span><br><span class=\"line\">            u   nFLT     页面错误次数</span><br><span class=\"line\">            v   nDRT     最后一次写入到现在，被修改过的页面数。</span><br><span class=\"line\">            w   S        进程状态。</span><br><span class=\"line\">                D=不可中断的睡眠状态</span><br><span class=\"line\">                R=运行</span><br><span class=\"line\">                S=睡眠</span><br><span class=\"line\">                T=跟踪/停止</span><br><span class=\"line\">                Z=僵尸进程 父进程在但并不等待子进程</span><br><span class=\"line\">            x   COMMAND  命令名/命令行</span><br><span class=\"line\">            y   WCHAN    若该进程在睡眠，则显示睡眠中的系统函数名</span><br><span class=\"line\">            z   Flags    任务标志，参考 sched.h</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        列出正在占用swap的进程&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            #!/bin/bash</span><br><span class=\"line\">            echo -e &quot;PID\\t\\tSwap\\t\\tProc_Name&quot;</span><br><span class=\"line\">            # 拿出/proc目录下所有以数字为名的目录（进程名是数字才是进程，其他如sys,net等存放的是其他信息）</span><br><span class=\"line\">            for pid in `ls -l /proc | grep ^d | awk &#x27;&#123; print $9 &#125;&#x27;| grep -v [^0-9]`</span><br><span class=\"line\">            do</span><br><span class=\"line\">                # 让进程释放swap的方法只有一个：就是重启该进程。或者等其自动释放。放</span><br><span class=\"line\">                # 如果进程会自动释放，那么我们就不会写脚本来找他了，找他都是因为他没有自动释放。</span><br><span class=\"line\">                # 所以我们要列出占用swap并需要重启的进程，但是init这个进程是系统里所有进程的祖先进程</span><br><span class=\"line\">                # 重启init进程意味着重启系统，这是万万不可以的，所以就不必检测他了，以免对系统造成影响。</span><br><span class=\"line\">                if [ $pid -eq 1 ];then continue;fi</span><br><span class=\"line\">                grep -q &quot;Swap&quot; /proc/$pid/smaps 2&gt;/dev/null</span><br><span class=\"line\">                if [ $? -eq 0 ];then</span><br><span class=\"line\">                    swap=$(grep Swap /proc/$pid/smaps \\</span><br><span class=\"line\">                        | gawk &#x27;&#123; sum+=$2;&#125; END&#123; print sum &#125;&#x27;)</span><br><span class=\"line\">                    proc_name=$(ps aux | grep -w &quot;$pid&quot; | grep -v grep \\</span><br><span class=\"line\">                        | awk &#x27;&#123; for(i=11;i&lt;=NF;i++)&#123; printf(&quot;%s &quot;,$i); &#125;&#125;&#x27;)</span><br><span class=\"line\">                    if [ $swap -gt 0 ];then</span><br><span class=\"line\">                        echo -e &quot;$&#123;pid&#125;\\t$&#123;swap&#125;\\t$&#123;proc_name&#125;&quot;</span><br><span class=\"line\">                    fi</span><br><span class=\"line\">                fi</span><br><span class=\"line\">            done | sort -k2 -n | awk -F&#x27;\\t&#x27; &#x27;&#123;</span><br><span class=\"line\">                pid[NR]=$1;</span><br><span class=\"line\">                size[NR]=$2;</span><br><span class=\"line\">                name[NR]=$3;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            END&#123;</span><br><span class=\"line\">                for(id=1;id&lt;=length(pid);id++)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    if(size[id]&lt;1024)</span><br><span class=\"line\">                        printf(&quot;%-10s\\t%15sKB\\t%s\\n&quot;,pid[id],size[id],name[id]);</span><br><span class=\"line\">                    else if(size[id]&lt;1048576)</span><br><span class=\"line\">                        printf(&quot;%-10s\\t%15.2fMB\\t%s\\n&quot;,pid[id],size[id]/1024,name[id]);</span><br><span class=\"line\">                    else</span><br><span class=\"line\">                        printf(&quot;%-10s\\t%15.2fGB\\t%s\\n&quot;,pid[id],size[id]/1048576,name[id]);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        linux操作系统提供的信号&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            kill -l                    # 查看linux提供的信号</span><br><span class=\"line\">            trap &quot;echo aaa&quot;  2 3 15    # shell使用 trap 捕捉退出信号</span><br><span class=\"line\"></span><br><span class=\"line\">            # 发送信号一般有两种原因:</span><br><span class=\"line\">            #   1(被动式)  内核检测到一个系统事件.例如子进程退出会像父进程发送SIGCHLD信号.键盘按下control+c会发送SIGINT信号</span><br><span class=\"line\">            #   2(主动式)  通过系统调用kill来向指定进程发送信号</span><br><span class=\"line\">            # 进程结束信号 SIGTERM 和 SIGKILL 的区别:  SIGTERM 比较友好，进程能捕捉这个信号，根据您的需要来关闭程序。在关闭程序之前，您可以结束打开的记录文件和完成正在做的任务。在某些情况下，假如进程正在进行作业而且不能中断，那么进程可以忽略这个SIGTERM信号。</span><br><span class=\"line\">            # 如果一个进程收到一个SIGUSR1信号，然后执行信号绑定函数，第二个SIGUSR2信号又来了，第一个信号没有被处理完毕的话，第二个信号就会丢弃。</span><br><span class=\"line\"></span><br><span class=\"line\">            SIGHUP  1          A     # 终端挂起或者控制进程终止</span><br><span class=\"line\">            SIGINT  2          A     # 键盘终端进程(如control+c)</span><br><span class=\"line\">            SIGQUIT 3          C     # 键盘的退出键被按下</span><br><span class=\"line\">            SIGILL  4          C     # 非法指令</span><br><span class=\"line\">            SIGABRT 6          C     # 由abort(3)发出的退出指令</span><br><span class=\"line\">            SIGFPE  8          C     # 浮点异常</span><br><span class=\"line\">            SIGKILL 9          AEF   # Kill信号  立刻停止</span><br><span class=\"line\">            SIGSEGV 11         C     # 无效的内存引用</span><br><span class=\"line\">            SIGPIPE 13         A     # 管道破裂: 写一个没有读端口的管道</span><br><span class=\"line\">            SIGALRM 14         A     # 闹钟信号 由alarm(2)发出的信号</span><br><span class=\"line\">            SIGTERM 15         A     # 终止信号,可让程序安全退出 kill -15</span><br><span class=\"line\">            SIGUSR1 30,10,16   A     # 用户自定义信号1</span><br><span class=\"line\">            SIGUSR2 31,12,17   A     # 用户自定义信号2</span><br><span class=\"line\">            SIGCHLD 20,17,18   B     # 子进程结束自动向父进程发送SIGCHLD信号</span><br><span class=\"line\">            SIGCONT 19,18,25         # 进程继续（曾被停止的进程）</span><br><span class=\"line\">            SIGSTOP 17,19,23   DEF   # 终止进程</span><br><span class=\"line\">            SIGTSTP 18,20,24   D     # 控制终端（tty）上按下停止键</span><br><span class=\"line\">            SIGTTIN 21,21,26   D     # 后台进程企图从控制终端读</span><br><span class=\"line\">            SIGTTOU 22,22,27   D     # 后台进程企图从控制终端写</span><br><span class=\"line\"></span><br><span class=\"line\">            缺省处理动作一项中的字母含义如下:</span><br><span class=\"line\">                A  缺省的动作是终止进程</span><br><span class=\"line\">                B  缺省的动作是忽略此信号，将该信号丢弃，不做处理</span><br><span class=\"line\">                C  缺省的动作是终止进程并进行内核映像转储(dump core),内核映像转储是指将进程数据在内存的映像和进程在内核结构中的部分内容以一定格式转储到文件系统，并且进程退出执行，这样做的好处是为程序员提供了方便，使得他们可以得到进程当时执行时的数据值，允许他们确定转储的原因，并且可以调试他们的程序。</span><br><span class=\"line\">                D  缺省的动作是停止进程，进入停止状况以后还能重新进行下去，一般是在调试的过程中（例如ptrace系统调用）</span><br><span class=\"line\">                E  信号不能被捕获</span><br><span class=\"line\">                F  信号不能被忽略</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        系统性能状态&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            vmstat 1 9</span><br><span class=\"line\"></span><br><span class=\"line\">            r      # 等待执行的任务数。当这个值超过了cpu线程数，就会出现cpu瓶颈。</span><br><span class=\"line\">            b      # 等待IO的进程数量,表示阻塞的进程。</span><br><span class=\"line\">            swpd   # 虚拟内存已使用的大小，如大于0，表示机器物理内存不足，如不是程序内存泄露，那么该升级内存。</span><br><span class=\"line\">            free   # 空闲的物理内存的大小</span><br><span class=\"line\">            buff   # 已用的buff大小，对块设备的读写进行缓冲</span><br><span class=\"line\">            cache  # cache直接用来记忆我们打开的文件,给文件做缓冲，(把空闲的物理内存的一部分拿来做文件和目录的缓存，是为了提高 程序执行的性能，当程序使用内存时，buffer/cached会很快地被使用。)</span><br><span class=\"line\">            inact  # 非活跃内存大小，即被标明可回收的内存，区别于free和active -a选项时显示</span><br><span class=\"line\">            active # 活跃的内存大小 -a选项时显示</span><br><span class=\"line\">            si   # 每秒从磁盘读入虚拟内存的大小，如果这个值大于0，表示物理内存不够用或者内存泄露，要查找耗内存进程解决掉。</span><br><span class=\"line\">            so   # 每秒虚拟内存写入磁盘的大小，如果这个值大于0，同上。</span><br><span class=\"line\">            bi   # 块设备每秒接收的块数量，这里的块设备是指系统上所有的磁盘和其他块设备，默认块大小是1024byte</span><br><span class=\"line\">            bo   # 块设备每秒发送的块数量，例如读取文件，bo就要大于0。bi和bo一般都要接近0，不然就是IO过于频繁，需要调整。</span><br><span class=\"line\">            in   # 每秒CPU的中断次数，包括时间中断。in和cs这两个值越大，会看到由内核消耗的cpu时间会越多</span><br><span class=\"line\">            cs   # 每秒上下文切换次数，例如我们调用系统函数，就要进行上下文切换，线程的切换，也要进程上下文切换，这个值要越小越好，太大了，要考虑调低线程或者进程的数目,例如在apache和nginx这种web服务器中，我们一般做性能测试时会进行几千并发甚至几万并发的测试，选择web服务器的进程可以由进程或者线程的峰值一直下调，压测，直到cs到一个比较小的值，这个进程和线程数就是比较合适的值了。系统调用也是，每次调用系统函数，我们的代码就会进入内核空间，导致上下文切换，这个是很耗资源，也要尽量避免频繁调用系统函数。上下文切换次数过多表示你的CPU大部分浪费在上下文切换，导致CPU干正经事的时间少了，CPU没有充分利用。</span><br><span class=\"line\">            us   # 用户进程执行消耗cpu时间(user time)  us的值比较高时，说明用户进程消耗的cpu时间多，但是如果长期超过50%的使用，那么我们就该考虑优化程序算法或其他措施</span><br><span class=\"line\">            sy   # 系统CPU时间，如果太高，表示系统调用时间长，例如是IO操作频繁。</span><br><span class=\"line\">            id   # 空闲 CPU时间，一般来说，id + us + sy = 100,一般认为id是空闲CPU使用率，us是用户CPU使用率，sy是系统CPU使用率。</span><br><span class=\"line\">            wt   # 等待IOCPU时间。Wa过高时，说明io等待比较严重，这可能是由于磁盘大量随机访问造成的，也有可能是磁盘的带宽出现瓶颈。</span><br><span class=\"line\"></span><br><span class=\"line\">            如果 r 经常大于4，且id经常少于40，表示cpu的负荷很重。</span><br><span class=\"line\">            如果 pi po 长期不等于0，表示内存不足。</span><br><span class=\"line\">            如果 b 队列经常大于3，表示io性能不好。</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    日志管理&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        history                      # 历时命令默认1000条</span><br><span class=\"line\">        HISTTIMEFORMAT=&quot;%Y-%m-%d %H:%M:%S &quot;   # 让history命令显示具体时间</span><br><span class=\"line\">        history  -c                  # 清除记录命令</span><br><span class=\"line\">        cat $HOME/.bash_history      # 历史命令记录文件</span><br><span class=\"line\">        lastb -a                     # 列出登录系统失败的用户相关信息  清空二进制日志记录文件 echo &gt; /var/log/btmp</span><br><span class=\"line\">        last                         # 查看登陆过的用户信息  清空二进制日志记录文件 echo &gt; /var/log/wtmp   默认打开乱码</span><br><span class=\"line\">        who /var/log/wtmp            # 查看登陆过的用户信息</span><br><span class=\"line\">        lastlog                      # 用户最后登录的时间</span><br><span class=\"line\">        tail -f /var/log/messages    # 系统日志</span><br><span class=\"line\">        tail -f /var/log/secure      # ssh日志</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t日志切割logrotate&#123;</span><br><span class=\"line\">\t\t/etc/logrotate.d/  # 配置目录</span><br><span class=\"line\">\t\t#示例：新建文件/etc/logrotate.d/apisix，配置内容如下：</span><br><span class=\"line\">\t\t/opt/apisix/logs/*.log &#123;</span><br><span class=\"line\">\t\t\tdaily           # 日志文件将按日轮循，还可用&#x27;weekly&#x27;，&#x27;monthly&#x27;</span><br><span class=\"line\">\t\t\tcompress        # 在轮循任务完成后，已轮循的归档将使用gzip进行压缩。</span><br><span class=\"line\">\t\t\tdelaycompress   # 总是与compress选项一起用，delaycompress选项指示logrotate不要将最近的归档压缩，压缩将在下一次轮循周期进行(最近一次不归档)</span><br><span class=\"line\">\t\t\trotate 365      # 一次将存储365个归档日志。对于第366个归档，时间最久的归档将被删除</span><br><span class=\"line\">\t\t\tmissingok       # 在日志轮循期间，任何错误将被忽略，例如“文件无法找到”之类的错误</span><br><span class=\"line\">\t\t\tnotifempty      # 如果日志文件为空，轮循不会进行</span><br><span class=\"line\">\t\t\tdateext</span><br><span class=\"line\">\t\t\tsharedscripts</span><br><span class=\"line\">\t\t\tpostrotate      # postrotate/endscript：在所有其它指令完成后，postrotate和endscript里面指定的命令将被执行。在这种情况下，rsyslogd 进程将立即再次读取其配置并继续运行。</span><br><span class=\"line\">\t\t\t\tif [ -f /opt/apisix/logs/nginx.pid ]; then</span><br><span class=\"line\">\t\t\t\t\t#重启nginx服务</span><br><span class=\"line\">\t\t\t\t\tkill -USR1 `cat /opt/apisix/logs/nginx.pid`</span><br><span class=\"line\">\t\t\t\tfi</span><br><span class=\"line\">\t\t\tendscript</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\tlogrotate /etc/logrotate.conf  # 使新配置生效</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    man&#123;</span><br><span class=\"line\">        man 2 read   # 查看read函数的文档</span><br><span class=\"line\">        1 使用者在shell中可以操作的指令或可执行档</span><br><span class=\"line\">        2 系统核心可呼叫的函数与工具等</span><br><span class=\"line\">        3 一些常用的函数(function)与函数库(library),大部分是C的函数库(libc)</span><br><span class=\"line\">        4 装置档案的说明，通常在/dev下的档案</span><br><span class=\"line\">        5 设定档或者是某些档案的格式</span><br><span class=\"line\">        6 游戏games</span><br><span class=\"line\">        7 惯例与协定等，例如linux档案系统、网络协定、ascll code等说明</span><br><span class=\"line\">        8 系统管理员可用的管理指令</span><br><span class=\"line\">        9 跟kernel有关的文件</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    selinux&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        sestatus -v                    # 查看selinux状态</span><br><span class=\"line\">        getenforce                     # 查看selinux模式</span><br><span class=\"line\">        setenforce 0                   # 设置selinux为宽容模式(可避免阻止一些操作)</span><br><span class=\"line\">        semanage port -l               # 查看selinux端口限制规则</span><br><span class=\"line\">        semanage port -a -t http_port_t -p tcp 8000  # 在selinux中注册端口类型</span><br><span class=\"line\">        vi /etc/selinux/config         # selinux配置文件</span><br><span class=\"line\">        SELINUX=enfoceing              # 关闭selinux 把其修改为  SELINUX=disabled</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    查看剩余内存&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        free -m</span><br><span class=\"line\">        #-/+ buffers/cache:       6458       1649</span><br><span class=\"line\">        #6458M为真实使用内存  1649M为真实剩余内存(剩余内存+缓存+缓冲器)</span><br><span class=\"line\">        #linux会利用所有的剩余内存作为缓存，所以要保证linux运行速度，就需要保证内存的缓存大小</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    系统信息&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        uname -a              # 查看Linux内核版本信息</span><br><span class=\"line\">        cat /proc/version     # 查看内核版本</span><br><span class=\"line\">        cat /etc/issue        # 查看系统版本</span><br><span class=\"line\">        lsb_release -a        # 查看系统版本  需安装 centos-release</span><br><span class=\"line\">        locale -a             # 列出所有语系</span><br><span class=\"line\">        locale                # 当前环境变量中所有编码</span><br><span class=\"line\">        hwclock               # 查看时间</span><br><span class=\"line\">        who                   # 当前在线用户</span><br><span class=\"line\">        w                     # 当前在线用户</span><br><span class=\"line\">        whoami                # 查看当前用户名</span><br><span class=\"line\">        logname               # 查看初始登陆用户名</span><br><span class=\"line\">        uptime                # 查看服务器启动时间</span><br><span class=\"line\">        sar -n DEV 1 10       # 查看网卡网速流量</span><br><span class=\"line\">        dmesg                 # 显示开机信息</span><br><span class=\"line\">        lsmod                 # 查看内核模块</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    硬件信息&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        more /proc/cpuinfo                                       # 查看cpu信息</span><br><span class=\"line\">        lscpu                                                    # 查看cpu信息</span><br><span class=\"line\">        cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c    # 查看cpu型号和逻辑核心数</span><br><span class=\"line\">        getconf LONG_BIT                                         # cpu运行的位数</span><br><span class=\"line\">        cat /proc/cpuinfo | grep &#x27;physical id&#x27; |sort| uniq -c    # 物理cpu个数</span><br><span class=\"line\">        cat /proc/cpuinfo | grep flags | grep &#x27; lm &#x27; | wc -l     # 结果大于0支持64位</span><br><span class=\"line\">        cat /proc/cpuinfo|grep flags                             # 查看cpu是否支持虚拟化   pae支持半虚拟化  IntelVT 支持全虚拟化</span><br><span class=\"line\">        more /proc/meminfo                                       # 查看内存信息</span><br><span class=\"line\">        dmidecode                                                # 查看全面硬件信息</span><br><span class=\"line\">        dmidecode | grep &quot;Product Name&quot;                          # 查看服务器型号</span><br><span class=\"line\">        dmidecode | grep -P -A5 &quot;Memory\\s+Device&quot; | grep Size | grep -v Range       # 查看内存插槽</span><br><span class=\"line\">        cat /proc/mdstat                                         # 查看软raid信息</span><br><span class=\"line\">        cat /proc/scsi/scsi                                      # 查看Dell硬raid信息(IBM、HP需要官方检测工具)</span><br><span class=\"line\">        lspci                                                    # 查看硬件信息</span><br><span class=\"line\">        lspci|grep RAID                                          # 查看是否支持raid</span><br><span class=\"line\">        lspci -vvv |grep Ethernet                                # 查看网卡型号</span><br><span class=\"line\">        lspci -vvv |grep Kernel|grep driver                      # 查看驱动模块</span><br><span class=\"line\">        modinfo tg2                                              # 查看驱动版本(驱动模块)</span><br><span class=\"line\">        ethtool -i em1                                           # 查看网卡驱动版本</span><br><span class=\"line\">        ethtool em1                                              # 查看网卡带宽</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    终端快捷键&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        Ctrl+A        　    # 行前</span><br><span class=\"line\">        Ctrl+E        　    # 行尾</span><br><span class=\"line\">        Ctrl+S        　    # 终端锁屏</span><br><span class=\"line\">        Ctrl+Q        　　  # 解锁屏</span><br><span class=\"line\">        Ctrl+D      　　    # 退出</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    开机启动模式&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        vi /etc/inittab</span><br><span class=\"line\">        id:3:initdefault:    # 3为多用户命令</span><br><span class=\"line\">        #ca::ctrlaltdel:/sbin/shutdown -t3 -r now   # 注释此行 禁止 ctrl+alt+del 关闭计算机</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    终端提示显示&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        echo $PS1                   # 环境变量控制提示显示</span><br><span class=\"line\">        PS1=&#x27;[\\u@ \\H \\w \\A \\@#]\\$&#x27;</span><br><span class=\"line\">        PS1=&#x27;[\\u@\\h \\W]\\$&#x27;</span><br><span class=\"line\">        export PS1=&#x27;[\\[\\e[32m\\]\\[\\e[31m\\]\\u@\\[\\e[36m\\]\\h \\w\\[\\e[m\\]]\\$ &#x27;     # 高亮显示终端</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    定时任务&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        at 5pm + 3 days /bin/ls  # 单次定时任务 指定三天后下午5:00执行/bin/ls</span><br><span class=\"line\"></span><br><span class=\"line\">        crontab -e               # 编辑周期任务</span><br><span class=\"line\">        #分钟  小时    天  月  星期   命令或脚本</span><br><span class=\"line\">        1,30  1-3/2    *   *   *      命令或脚本  &gt;&gt; file.log 2&gt;&amp;1</span><br><span class=\"line\">        echo &quot;40 7 * * 2 /root/sh&quot;&gt;&gt;/var/spool/cron/work    # 普通用户可直接写入定时任务</span><br><span class=\"line\">        crontab -l                                          # 查看自动周期性任务</span><br><span class=\"line\">        crontab -r                                          # 删除自动周期性任务</span><br><span class=\"line\">        cron.deny和cron.allow                               # 禁止或允许用户使用周期任务</span><br><span class=\"line\">        service crond start|stop|restart                    # 启动自动周期性服务</span><br><span class=\"line\">        * * * * *  echo &quot;d&quot; &gt;&gt;d$(date +\\%Y\\%m\\%d).log       # 让定时任务直接生成带日期的log  需要转义%</span><br><span class=\"line\">        0 0,6,12 * * * /opt/php/bin/php xxx                 # 每天0，6，12点各执行一次</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\"></span><br><span class=\"line\">    date&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        星期日[SUN] 星期一[MON] 星期二[TUE] 星期三[WED] 星期四[THU] 星期五[FRI] 星期六[SAT]</span><br><span class=\"line\">        一月[JAN] 二月[FEB] 三月[MAR] 四月[APR] 五月[MAY] 六月[JUN] 七月[JUL] 八月[AUG] 九月[SEP] 十月[OCT] 十一月[NOV] 十二月[DEC]</span><br><span class=\"line\"></span><br><span class=\"line\">        date -s 20091112                     # 设日期</span><br><span class=\"line\">        date -s 18:30:50                     # 设时间</span><br><span class=\"line\">        date -d &quot;7 days ago&quot; +%Y%m%d         # 7天前日期</span><br><span class=\"line\">        date -d &quot;5 minute ago&quot; +%H:%M        # 5分钟前时间</span><br><span class=\"line\">        date -d &quot;1 month ago&quot; +%Y%m%d        # 一个月前</span><br><span class=\"line\">        date -d &#x27;1 days&#x27; +%Y-%m-%d           # 一天后</span><br><span class=\"line\">        date -d &#x27;1 hours&#x27; +%H:%M:%S          # 一小时后</span><br><span class=\"line\">        date +%Y-%m-%d -d &#x27;20110902&#x27;         # 日期格式转换</span><br><span class=\"line\">        date +%Y-%m-%d_%X                    # 日期和时间</span><br><span class=\"line\">        date +%N                             # 纳秒</span><br><span class=\"line\">        date -d &quot;2012-08-13 14:00:23&quot; +%s    # 换算成秒计算(1970年至今的秒数)</span><br><span class=\"line\">        date -d &quot;@1363867952&quot; +%Y-%m-%d-%T   # 将时间戳换算成日期</span><br><span class=\"line\">        date -d &quot;1970-01-01 UTC 1363867952 seconds&quot; +%Y-%m-%d-%T  # 将时间戳换算成日期</span><br><span class=\"line\">        date -d &quot;`awk -F. &#x27;&#123;print $1&#125;&#x27; /proc/uptime` second ago&quot; +&quot;%Y-%m-%d %H:%M:%S&quot;    # 格式化系统启动时间(多少秒前)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    limits.conf&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ulimit -SHn 65535  # 临时设置文件描述符大小 进程最大打开文件柄数 还有socket最大连接数, 等同配置 nofile</span><br><span class=\"line\">        ulimit -SHu 65535  # 临时设置用户最大进程数</span><br><span class=\"line\">        ulimit -a          # 查看</span><br><span class=\"line\"></span><br><span class=\"line\">        /etc/security/limits.conf</span><br><span class=\"line\"></span><br><span class=\"line\">        # 文件描述符大小  open files</span><br><span class=\"line\">        # lsof |wc -l   查看当前文件句柄数使用数量</span><br><span class=\"line\">        * soft nofile 16384         # 设置太大，进程使用过多会把机器拖死</span><br><span class=\"line\">        * hard nofile 32768</span><br><span class=\"line\"></span><br><span class=\"line\">        # 用户最大进程数  max user processes</span><br><span class=\"line\">        # echo $((`ps uxm |wc -l`-`ps ux |wc -l`))  查看当前用户占用的进程数 [包括线程]</span><br><span class=\"line\">        user soft nproc 16384</span><br><span class=\"line\">        user hard nproc 32768</span><br><span class=\"line\"></span><br><span class=\"line\">        # 如果/etc/security/limits.d/有配置文件，将会覆盖/etc/security/limits.conf里的配置</span><br><span class=\"line\">        # 即/etc/security/limits.d/的配置文件里就不要有同样的参量设置</span><br><span class=\"line\">        /etc/security/limits.d/90-nproc.conf    # centos6.3的默认这个文件会覆盖 limits.conf</span><br><span class=\"line\">        user soft nproc 16384</span><br><span class=\"line\">        user hard nproc 32768</span><br><span class=\"line\"></span><br><span class=\"line\">        sysctl -p    # 修改配置文件后让系统生效</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    随机分配端口范围&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 本机连其它端口用的</span><br><span class=\"line\">        echo &quot;10000 65535&quot; &gt; /proc/sys/net/ipv4/ip_local_port_range</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    百万长链接设置&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 内存消耗需要较大</span><br><span class=\"line\">        vim /root/.bash_profile</span><br><span class=\"line\">        # 添加如下2行,退出bash重新登陆</span><br><span class=\"line\">        # 一个进程不能使用超过NR_OPEN文件描述符</span><br><span class=\"line\">        echo 20000500 &gt; /proc/sys/fs/nr_open</span><br><span class=\"line\">        # 当前用户最大文件数</span><br><span class=\"line\">        ulimit -n 10000000</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    core崩溃文件查看&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        gdb  core.13844</span><br><span class=\"line\">        bt   # 查看函数调用信息(堆栈)</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    libc.so故障修复&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 由于升级glibc导致libc.so不稳定,突然报错,幸好还有未退出的终端</span><br><span class=\"line\">        grep: error while loading shared libraries: /lib64/libc.so.6: ELF file OS ABI invalid</span><br><span class=\"line\"></span><br><span class=\"line\">        # 看看当前系统有多少版本 libc.so</span><br><span class=\"line\">        ls /lib64/libc-[tab]</span><br><span class=\"line\"></span><br><span class=\"line\">        # 更改环境变量指向其他 libc.so 文件测试</span><br><span class=\"line\">        export LD_PRELOAD=/lib64/libc-2.7.so    # 如果不改变LD_PRELOAD变量,ln不能用,需要使用 /sbin/sln 命令做链接</span><br><span class=\"line\"></span><br><span class=\"line\">        # 当前如果好使了，在执行下面强制替换软链接。如不好使，测试其他版本的libc.so文件</span><br><span class=\"line\">        ln -f -s /lib64/libc-2.7.so /lib64/libc.so.6</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    无法分配内存 &#123;</span><br><span class=\"line\">    </span><br><span class=\"line\">        fork: Cannot allocate memory</span><br><span class=\"line\">    </span><br><span class=\"line\">        # 报错不一定是内存不够用，进程数或者线程数满了也会报这个错误， 可以适当增加 kernel.pid_max 的值，</span><br><span class=\"line\">        cat /proc/sys/kernel/pid_max  # 默认3.2w</span><br><span class=\"line\">    </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    sudo&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        echo myPassword | sudo -S ls /tmp  # 直接输入sudo的密码非交互,从标准输入读取密码而不是终端设备</span><br><span class=\"line\">        visudo                             # sudo命令权限添加  /etc/sudoers</span><br><span class=\"line\">        用户  别名(可用all)=NOPASSWD:命令1,命令2</span><br><span class=\"line\">        user  ALL=NOPASSWD:/bin/su         # 免root密码切换root身份</span><br><span class=\"line\">        wangming linuxfan=NOPASSWD:/sbin/apache start,/sbin/apache restart</span><br><span class=\"line\">        UserName ALL=(ALL) ALL</span><br><span class=\"line\">        UserName ALL=(ALL) NOPASSWD: ALL</span><br><span class=\"line\">        peterli        ALL=(ALL)       NOPASSWD:/sbin/service</span><br><span class=\"line\">        Defaults requiretty                # sudo不允许后台运行,注释此行既允许</span><br><span class=\"line\">        Defaults !visiblepw                # sudo不允许远程,去掉!既允许</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    grub开机启动项添加&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        vim /etc/grub.conf</span><br><span class=\"line\">        title ms-dos</span><br><span class=\"line\">        rootnoverify (hd0,0)</span><br><span class=\"line\">        chainloader +1</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    stty&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        #stty时一个用来改变并打印终端行设置的常用命令</span><br><span class=\"line\"></span><br><span class=\"line\">        stty iuclc          # 在命令行下禁止输出大写</span><br><span class=\"line\">        stty -iuclc         # 恢复输出大写</span><br><span class=\"line\">        stty olcuc          # 在命令行下禁止输出小写</span><br><span class=\"line\">        stty -olcuc         # 恢复输出小写</span><br><span class=\"line\">        stty size           # 打印出终端的行数和列数</span><br><span class=\"line\">        stty eof &quot;string&quot;   # 改变系统默认ctrl+D来表示文件的结束</span><br><span class=\"line\">        stty -echo          # 禁止回显</span><br><span class=\"line\">        stty echo           # 打开回显</span><br><span class=\"line\">        stty -echo;read;stty echo;read  # 测试禁止回显</span><br><span class=\"line\">        stty igncr          # 忽略回车符</span><br><span class=\"line\">        stty -igncr         # 恢复回车符</span><br><span class=\"line\">        stty erase &#x27;#&#x27;      # 将#设置为退格字符</span><br><span class=\"line\">        stty erase &#x27;^?&#x27;     # 恢复退格字符</span><br><span class=\"line\"></span><br><span class=\"line\">        定时输入&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            timeout_read()&#123;</span><br><span class=\"line\">                timeout=$1</span><br><span class=\"line\">                old_stty_settings=`stty -g`　　# save current settings</span><br><span class=\"line\">                stty -icanon min 0 time 100　　# set 10seconds,not 100seconds</span><br><span class=\"line\">                eval read varname　　          # =read $varname</span><br><span class=\"line\">                stty &quot;$old_stty_settings&quot;　　  # recover settings</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            read -t 10 varname    # 更简单的方法就是利用read命令的-t选项</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        检测用户按键&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            #!/bin/bash</span><br><span class=\"line\">            old_tty_settings=$(stty -g)   # 保存老的设置(为什么?).</span><br><span class=\"line\">            stty -icanon</span><br><span class=\"line\">            Keypress=$(head -c1)          # 或者使用$(dd bs=1 count=1 2&gt; /dev/null)</span><br><span class=\"line\">            echo &quot;Key pressed was \\&quot;&quot;$Keypress&quot;\\&quot;.&quot;</span><br><span class=\"line\">            stty &quot;$old_tty_settings&quot;      # 恢复老的设置.</span><br><span class=\"line\">            exit 0</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    iptables&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        内建三个表：nat mangle 和 filter</span><br><span class=\"line\">        filter预设规则表，有INPUT、FORWARD 和 OUTPUT 三个规则链</span><br><span class=\"line\">        vi /etc/sysconfig/iptables    # 配置文件</span><br><span class=\"line\">        INPUT    # 进入</span><br><span class=\"line\">        FORWARD  # 转发</span><br><span class=\"line\">        OUTPUT   # 出去</span><br><span class=\"line\">        ACCEPT   # 将封包放行</span><br><span class=\"line\">        REJECT   # 拦阻该封包</span><br><span class=\"line\">        DROP     # 丢弃封包不予处理</span><br><span class=\"line\">        -A       # 在所选择的链(INPUT等)末添加一条或更多规则</span><br><span class=\"line\">        -D       # 删除一条</span><br><span class=\"line\">        -E       # 修改</span><br><span class=\"line\">        -p       # tcp、udp、icmp    0相当于所有all    !取反</span><br><span class=\"line\">        -P       # 设置缺省策略(与所有链都不匹配强制使用此策略)</span><br><span class=\"line\">        -s       # IP/掩码    (IP/24)    主机名、网络名和清楚的IP地址 !取反</span><br><span class=\"line\">        -j       # 目标跳转，立即决定包的命运的专用内建目标</span><br><span class=\"line\">        -i       # 进入的（网络）接口 [名称] eth0</span><br><span class=\"line\">        -o       # 输出接口[名称]</span><br><span class=\"line\">        -m       # 模块</span><br><span class=\"line\">        --sport  # 源端口</span><br><span class=\"line\">        --dport  # 目标端口</span><br><span class=\"line\"></span><br><span class=\"line\">        iptables -F                        # 将防火墙中的规则条目清除掉  # 注意: iptables -P INPUT ACCEPT</span><br><span class=\"line\">        iptables-restore &lt; 规则文件        # 导入防火墙规则</span><br><span class=\"line\">        /etc/init.d/iptables save          # 保存防火墙设置</span><br><span class=\"line\">        /etc/init.d/iptables restart       # 重启防火墙服务</span><br><span class=\"line\">        iptables -L -n                     # 查看规则</span><br><span class=\"line\">        iptables -t nat -nL                # 查看转发</span><br><span class=\"line\"></span><br><span class=\"line\">        iptables实例&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            iptables -L INPUT                   # 列出某规则链中的所有规则</span><br><span class=\"line\">            iptables -X allowed                 # 删除某个规则链 ,不加规则链，清除所有非内建的</span><br><span class=\"line\">            iptables -Z INPUT                   # 将封包计数器归零</span><br><span class=\"line\">            iptables -N allowed                 # 定义新的规则链</span><br><span class=\"line\">            iptables -P INPUT DROP              # 定义过滤政策</span><br><span class=\"line\">            iptables -A INPUT -s 192.168.1.1    # 比对封包的来源IP   # ! 192.168.0.0/24  ! 反向对比</span><br><span class=\"line\">            iptables -A INPUT -d 192.168.1.1    # 比对封包的目的地IP</span><br><span class=\"line\">            iptables -A INPUT -i eth0           # 比对封包是从哪片网卡进入</span><br><span class=\"line\">            iptables -A FORWARD -o eth0         # 比对封包要从哪片网卡送出 eth+表示所有的网卡</span><br><span class=\"line\">            iptables -A INPUT -p tcp            # -p ! tcp 排除tcp以外的udp、icmp。-p all所有类型</span><br><span class=\"line\">            iptables -D INPUT 8                 # 从某个规则链中删除一条规则</span><br><span class=\"line\">            iptables -D INPUT --dport 80 -j DROP         # 从某个规则链中删除一条规则</span><br><span class=\"line\">            iptables -R INPUT 8 -s 192.168.0.1 -j DROP   # 取代现行规则</span><br><span class=\"line\">            iptables -I INPUT 8 --dport 80 -j ACCEPT     # 插入一条规则</span><br><span class=\"line\">            iptables -A INPUT -i eth0 -j DROP            # 其它情况不允许</span><br><span class=\"line\">            iptables -A INPUT -p tcp -s IP -j DROP       # 禁止指定IP访问</span><br><span class=\"line\">            iptables -A INPUT -p tcp -s IP --dport port -j DROP               # 禁止指定IP访问端口</span><br><span class=\"line\">            iptables -A INPUT -s IP -p tcp --dport port -j ACCEPT             # 允许在IP访问指定端口</span><br><span class=\"line\">            iptables -A INPUT -p tcp --dport 22 -j DROP                       # 禁止使用某端口</span><br><span class=\"line\">            iptables -A INPUT -i eth0 -p icmp -m icmp --icmp-type 8 -j DROP   # 禁止icmp端口</span><br><span class=\"line\">            iptables -A INPUT -i eth0 -p icmp -j DROP                         # 禁止icmp端口</span><br><span class=\"line\">            iptables -t filter -A INPUT -i eth0 -p tcp --syn -j DROP                  # 阻止所有没有经过你系统授权的TCP连接</span><br><span class=\"line\">            iptables -A INPUT -f -m limit --limit 100/s --limit-burst 100 -j ACCEPT   # IP包流量限制</span><br><span class=\"line\">            iptables -A INPUT -i eth0 -s 192.168.62.1/32 -p icmp -m icmp --icmp-type 8 -j ACCEPT  # 除192.168.62.1外，禁止其它人ping我的主机</span><br><span class=\"line\">            iptables -A INPUT -p tcp -m tcp --dport 80 -m state --state NEW -m recent --update --seconds 5 --hitcount 20 --rttl --name WEB --rsource -j DROP  # 可防御cc攻击(未测试)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        iptables配置实例文件&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            # Generated by iptables-save v1.2.11 on Fri Feb  9 12:10:37 2007</span><br><span class=\"line\">            *filter</span><br><span class=\"line\">            :INPUT ACCEPT [637:58967]</span><br><span class=\"line\">            :FORWARD DROP [0:0]</span><br><span class=\"line\">            :OUTPUT ACCEPT [5091:1301533]</span><br><span class=\"line\">            # 允许的IP或IP段访问 建议多个</span><br><span class=\"line\">            -A INPUT -s 127.0.0.1 -p tcp -j ACCEPT</span><br><span class=\"line\">            -A INPUT -s 192.168.0.0/255.255.0.0 -p tcp -j ACCEPT</span><br><span class=\"line\">            # 开放对外开放端口</span><br><span class=\"line\">            -A INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class=\"line\">            # 指定某端口针对IP开放</span><br><span class=\"line\">            -A INPUT -s 192.168.10.37 -p tcp --dport 22 -j ACCEPT</span><br><span class=\"line\">            # 拒绝所有协议(INPUT允许)</span><br><span class=\"line\">            -A INPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,PSH,URG RST -j DROP</span><br><span class=\"line\">            # 允许已建立的或相关连的通行</span><br><span class=\"line\">            -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class=\"line\">            # 拒绝ping</span><br><span class=\"line\">            -A INPUT -p tcp -m tcp -j REJECT --reject-with icmp-port-unreachable</span><br><span class=\"line\">            COMMIT</span><br><span class=\"line\">            # Completed on Fri Feb  9 12:10:37 2007</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        iptables配置实例&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            # 允许某段IP访问任何端口</span><br><span class=\"line\">            iptables -A INPUT -s 192.168.0.3/24 -p tcp -j ACCEPT</span><br><span class=\"line\">            # 设定预设规则 (拒绝所有的数据包，再允许需要的,如只做WEB服务器.还是推荐三个链都是DROP)</span><br><span class=\"line\">            iptables -P INPUT DROP</span><br><span class=\"line\">            iptables -P FORWARD DROP</span><br><span class=\"line\">            iptables -P OUTPUT ACCEPT</span><br><span class=\"line\">            # 注意: 直接设置这三条会掉线</span><br><span class=\"line\">            # 开启22端口</span><br><span class=\"line\">            iptables -A INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class=\"line\">            # 如果OUTPUT 设置成DROP的，要写上下面一条</span><br><span class=\"line\">            iptables -A OUTPUT -p tcp --sport 22 -j ACCEPT</span><br><span class=\"line\">            # 注:不写导致无法SSH.其他的端口一样,OUTPUT设置成DROP的话,也要添加一条链</span><br><span class=\"line\">            # 如果开启了web服务器,OUTPUT设置成DROP的话,同样也要添加一条链</span><br><span class=\"line\">            iptables -A OUTPUT -p tcp --sport 80 -j ACCEPT</span><br><span class=\"line\">            # 做WEB服务器,开启80端口 ,其他同理</span><br><span class=\"line\">            iptables -A INPUT -p tcp --dport 80 -j ACCEPT</span><br><span class=\"line\">            # 做邮件服务器,开启25,110端口</span><br><span class=\"line\">            iptables -A INPUT -p tcp --dport 110 -j ACCEPT</span><br><span class=\"line\">            iptables -A INPUT -p tcp --dport 25 -j ACCEPT</span><br><span class=\"line\">            # 允许icmp包通过,允许ping</span><br><span class=\"line\">            iptables -A OUTPUT -p icmp -j ACCEPT (OUTPUT设置成DROP的话)</span><br><span class=\"line\">            iptables -A INPUT -p icmp -j ACCEPT  (INPUT设置成DROP的话)</span><br><span class=\"line\">            # 允许loopback!(不然会导致DNS无法正常关闭等问题)</span><br><span class=\"line\">            IPTABLES -A INPUT -i lo -p all -j ACCEPT (如果是INPUT DROP)</span><br><span class=\"line\">            IPTABLES -A OUTPUT -o lo -p all -j ACCEPT(如果是OUTPUT DROP)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        centos6的iptables基本配置&#123;</span><br><span class=\"line\">            *filter</span><br><span class=\"line\">            :INPUT ACCEPT [0:0]</span><br><span class=\"line\">            :FORWARD ACCEPT [0:0]</span><br><span class=\"line\">            :OUTPUT ACCEPT [0:0]</span><br><span class=\"line\">            -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class=\"line\">            -A INPUT -p icmp -j ACCEPT</span><br><span class=\"line\">            -A INPUT -i lo -j ACCEPT</span><br><span class=\"line\">            -A INPUT -s 222.186.135.61 -p tcp -j ACCEPT</span><br><span class=\"line\">            -A INPUT -p tcp  --dport 80 -j ACCEPT</span><br><span class=\"line\">            -A INPUT -m state --state NEW -m tcp -p tcp --dport 22 -j ACCEPT</span><br><span class=\"line\">            -A INPUT -j REJECT --reject-with icmp-host-prohibited</span><br><span class=\"line\">            -A INPUT -p tcp -m tcp --tcp-flags FIN,SYN,RST,PSH,URG RST -j DROP</span><br><span class=\"line\">            -A FORWARD -j REJECT --reject-with icmp-host-prohibited</span><br><span class=\"line\">            COMMIT</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        添加网段转发&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            # 例如通过vpn上网</span><br><span class=\"line\">            echo 1 &gt; /proc/sys/net/ipv4/ip_forward       # 在内核里打开ip转发功能</span><br><span class=\"line\">            iptables -t nat -A POSTROUTING -s 10.8.0.0/24 -j MASQUERADE  # 添加网段转发</span><br><span class=\"line\">            iptables -t nat -A POSTROUTING -s 10.0.0.0/255.0.0.0 -o eth0 -j SNAT --to 192.168.10.158  # 原IP网段经过哪个网卡IP出去</span><br><span class=\"line\">            iptables -t nat -nL                # 查看转发</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        端口映射&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            # 内网通过有外网IP的机器映射端口</span><br><span class=\"line\">            # 内网主机添加路由</span><br><span class=\"line\">            route add -net 10.10.20.0 netmask 255.255.255.0 gw 10.10.20.111     # 内网需要添加默认网关，并且网关开启转发</span><br><span class=\"line\">            # 网关主机</span><br><span class=\"line\">            echo 1 &gt; /proc/sys/net/ipv4/ip_forward       # 在内核里打开ip转发功能</span><br><span class=\"line\">            iptables -t nat -A PREROUTING -d 外网IP  -p tcp --dport 9999 -j DNAT --to 10.10.20.55:22    # 进入</span><br><span class=\"line\">            iptables -t nat -A POSTROUTING -s 10.10.20.0/24 -j SNAT --to 外网IP                         # 转发回去</span><br><span class=\"line\">            iptables -t nat -nL                # 查看转发</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">4 服务&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /etc/init.d/sendmail start                   # 启动服务</span><br><span class=\"line\">    /etc/init.d/sendmail stop                    # 关闭服务</span><br><span class=\"line\">    /etc/init.d/sendmail status                  # 查看服务当前状态</span><br><span class=\"line\">    /date/mysql/bin/mysqld_safe --user=mysql &amp;   # 启动mysql后台运行</span><br><span class=\"line\">    /bin/systemctl restart  mysqld.service       # centos7启动服务</span><br><span class=\"line\">    vi /etc/rc.d/rc.local                        # 开机启动执行  可用于开机启动脚本</span><br><span class=\"line\">    /etc/rc.d/rc3.d/S55sshd                      # 开机启动和关机关闭服务连接    # S开机start  K关机stop  55级别 后跟服务名</span><br><span class=\"line\">    ln -s -f /date/httpd/bin/apachectl /etc/rc.d/rc3.d/S15httpd   # 将启动程序脚本连接到开机启动目录</span><br><span class=\"line\">    ipvsadm -ln                                  # lvs查看后端负载机并发</span><br><span class=\"line\">    ipvsadm -C                                   # lvs清除规则</span><br><span class=\"line\">    xm list                                      # 查看xen虚拟主机列表</span><br><span class=\"line\">    virsh                                        # 虚拟化(xen\\kvm)管理工具  yum groupinstall Virtual*</span><br><span class=\"line\">    ./bin/httpd -M                               # 查看httpd加载模块</span><br><span class=\"line\">    httpd -t -D DUMP_MODULES                     # rpm包httpd查看加载模块</span><br><span class=\"line\">    echo 内容| /bin/mail -s &quot;标题&quot; 收件箱 -f 发件人       # 发送邮件</span><br><span class=\"line\">    &quot;`echo &quot;内容&quot;|iconv -f utf8 -t gbk`&quot; | /bin/mail -s &quot;`echo &quot;标题&quot;|iconv -f utf8 -t gbk`&quot; 收件箱     # 解决邮件乱码</span><br><span class=\"line\">    /usr/local/nagios/bin/nagios -v /usr/local/nagios/etc/nagios.cfg   # 检测nagios配置文件</span><br><span class=\"line\"></span><br><span class=\"line\">    chkconfig&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        chkconfig service on|off|set             # 设置非独立服务启状态</span><br><span class=\"line\">        chkconfig --level 35   httpd   off       # 让服务不自动启动</span><br><span class=\"line\">        chkconfig --level 35   httpd   on        # 让服务自动启动 35指的是运行级别</span><br><span class=\"line\">        chkconfig --list                         # 查看所有服务的启动状态</span><br><span class=\"line\">        chkconfig --list |grep httpd             # 查看某个服务的启动状态</span><br><span class=\"line\">        chkconfig –-list [service]               # 查看服务的状态</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    systemctl&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        systemctl is-active *.service      # 查看服务是否运行</span><br><span class=\"line\">        systemctl is-enabled *.service     # 查询服务是否开机启动</span><br><span class=\"line\">        systemctl mask *.service           # 注销指定服务</span><br><span class=\"line\">        systemctl unmask cups.service      # 取消注销cups服务</span><br><span class=\"line\">        systemctl enable *.service         # 开机运行服务</span><br><span class=\"line\">        systemctl disable *.service        # 取消开机运行</span><br><span class=\"line\">        systemctl start *.service          # 启动服务</span><br><span class=\"line\">        systemctl stop *.service           # 停止服务</span><br><span class=\"line\">        systemctl restart *.service        # 重启服务</span><br><span class=\"line\">        systemctl reload *.service         # 重新加载服务配置文件</span><br><span class=\"line\">        systemctl status *.service         # 查询服务运行状态</span><br><span class=\"line\">        systemctl --failed                 # 显示启动失败的服务</span><br><span class=\"line\">        systemctl poweroff                 # 系统关机</span><br><span class=\"line\">        systemctl reboot                   # 重新启动</span><br><span class=\"line\">        systemctl rescue                   # 强制进入救援模式</span><br><span class=\"line\">        systemctl emergency                # 强制进入紧急救援模式</span><br><span class=\"line\">        systemctl list-dependencies        # 查看当前运行级别target(mult-user)启动了哪些服务</span><br><span class=\"line\">        systemctl list-unit-files          # 查看开机启动的状态</span><br><span class=\"line\">        journalctl -r -u elasticsearch.service  # 查看日志 r倒序 u服务名</span><br><span class=\"line\">        /etc/systemd/system/falcon-agent.service</span><br><span class=\"line\">            [Unit]</span><br><span class=\"line\">            Description=This is zuiyou monitor agent</span><br><span class=\"line\">            After=network.target remote-fs.target nss-lookup.target</span><br><span class=\"line\"></span><br><span class=\"line\">            [Service]</span><br><span class=\"line\">            User= root</span><br><span class=\"line\">            Type=simple</span><br><span class=\"line\">            PIDFile=/opt/falcon-agent/var/app.pid</span><br><span class=\"line\">            ExecStartPre=/usr/bin/rm -f /opt/falcon-agent/var/app.pid</span><br><span class=\"line\">            ExecStart=/opt/falcon-agent/control start</span><br><span class=\"line\">            ExecReload=/bin/kill -s HUP $MAINPID</span><br><span class=\"line\">            KillMode=process</span><br><span class=\"line\">            KillSignal=SIGQUIT</span><br><span class=\"line\">            TimeoutStopSec=5</span><br><span class=\"line\">            PrivateTmp=true</span><br><span class=\"line\">            Restart=always</span><br><span class=\"line\">            LimitNOFILE=infinity</span><br><span class=\"line\"></span><br><span class=\"line\">            [Install]</span><br><span class=\"line\">            WantedBy=multi-user.target</span><br><span class=\"line\"></span><br><span class=\"line\">        systemctl daemon-reload           # 加载配置</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    nginx&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        yum install -y make gcc  openssl-devel pcre-devel  bzip2-devel libxml2 libxml2-devel curl-devel libmcrypt-devel libjpeg libjpeg-devel libpng libpng-devel openssl</span><br><span class=\"line\"></span><br><span class=\"line\">        groupadd nginx</span><br><span class=\"line\">        useradd nginx -g nginx -M -s /sbin/nologin</span><br><span class=\"line\"></span><br><span class=\"line\">        mkdir -p /opt/nginx-tmp</span><br><span class=\"line\"></span><br><span class=\"line\">        wget http://labs.frickle.com/files/ngx_cache_purge-1.6.tar.gz</span><br><span class=\"line\">        tar fxz ngx_cache_purge-1.6.tar.gz</span><br><span class=\"line\">        # ngx_cache_purge 清除指定url缓存</span><br><span class=\"line\">        # 假设一个URL为 http://192.168.12.133/test.txt</span><br><span class=\"line\">        # 通过访问      http://192.168.12.133/purge/test.txt  就可以清除该URL的缓存。</span><br><span class=\"line\"></span><br><span class=\"line\">        tar zxvpf nginx-1.4.4.tar.gz</span><br><span class=\"line\">        cd nginx-1.4.4</span><br><span class=\"line\"></span><br><span class=\"line\">        # ./configure --help</span><br><span class=\"line\">        # --with                 # 默认不加载 需指定编译此参数才使用</span><br><span class=\"line\">        # --without              # 默认加载，可用此参数禁用</span><br><span class=\"line\">        # --add-module=path      # 添加模块的路径</span><br><span class=\"line\">        # --add-module=/opt/ngx_module_upstream_check \\         # nginx 代理状态页面</span><br><span class=\"line\">        # ngx_module_upstream_check  编译前需要打对应版本补丁 patch -p1 &lt; /opt/nginx_upstream_check_module/check_1.2.6+.patch</span><br><span class=\"line\">        # --add-module=/opt/ngx_module_memc \\                   # 将请求页面数据存放在 memcached中</span><br><span class=\"line\">        # --add-module=/opt/ngx_module_lua \\                    # 支持lua脚本 yum install lua-devel lua</span><br><span class=\"line\"></span><br><span class=\"line\">        ./configure \\</span><br><span class=\"line\">        --user=nginx \\</span><br><span class=\"line\">        --group=nginx \\</span><br><span class=\"line\">        --prefix=/usr/local/nginx \\</span><br><span class=\"line\">        --with-http_ssl_module \\</span><br><span class=\"line\">        --with-http_realip_module \\</span><br><span class=\"line\">        --with-http_gzip_static_module \\</span><br><span class=\"line\">        --with-http_stub_status_module \\</span><br><span class=\"line\">        --add-module=/opt/ngx_cache_purge-1.6 \\</span><br><span class=\"line\">        --http-client-body-temp-path=/opt/nginx-tmp/client \\</span><br><span class=\"line\">        --http-proxy-temp-path=/opt/nginx-tmp/proxy \\</span><br><span class=\"line\">        --http-fastcgi-temp-path=/opt/nginx-tmp/fastcgi \\</span><br><span class=\"line\">        --http-uwsgi-temp-path=/opt/nginx-tmp/uwsgi \\</span><br><span class=\"line\">        --http-scgi-temp-path=/opt/nginx-tmp/scgi</span><br><span class=\"line\"></span><br><span class=\"line\">        make &amp;&amp; make install</span><br><span class=\"line\"></span><br><span class=\"line\">        /usr/local/nginx/sbin/nginx –t             # 检查Nginx配置文件 但并不执行</span><br><span class=\"line\">        /usr/local/nginx/sbin/nginx -t -c /opt/nginx/conf/nginx.conf  # 检查Nginx配置文件</span><br><span class=\"line\">        /usr/local/nginx/sbin/nginx                # 启动nginx</span><br><span class=\"line\">        /usr/local/nginx/sbin/nginx -s reload      # 重载配置</span><br><span class=\"line\">        /usr/local/nginx/sbin/nginx -s stop        # 关闭nginx服务</span><br><span class=\"line\"></span><br><span class=\"line\">        # location详解</span><br><span class=\"line\">\t\t## 匹配顺序：先普通location后正则location</span><br><span class=\"line\">\t\t- ~ 或 ~* 表正则location       # ~ 区分大小写, ~*不区分大小写</span><br><span class=\"line\">\t\t- 两种情况下只匹配普通location：当^~或严格匹配(如=a)</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t## 普通location</span><br><span class=\"line\">\t\t- 越具体越匹配</span><br><span class=\"line\">\t\t- 匹配最大前缀后还得正则匹配</span><br><span class=\"line\">\t\t## 正则匹配 </span><br><span class=\"line\">\t\t- 一匹配到就不再匹配(按顺序)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">    elasticsearch&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        vim /etc/sysctl.conf</span><br><span class=\"line\">        vm.max_map_count = 262144</span><br><span class=\"line\"></span><br><span class=\"line\">        vim /etc/security/limits.conf</span><br><span class=\"line\">        * soft memlock unlimited</span><br><span class=\"line\">        * hard memlock unlimited</span><br><span class=\"line\">        sysctl -p</span><br><span class=\"line\"></span><br><span class=\"line\">        curl &#x27;localhost:9200/_cat/health?v&#x27;                    # 健康检查</span><br><span class=\"line\">        curl &#x27;localhost:9200/_cat/nodes?v&#x27;                     # 获取集群的节点列表</span><br><span class=\"line\">        curl &#x27;localhost:9200/_cat/indices?v&#x27;                   # 列出所有索引</span><br><span class=\"line\">        curl 127.0.0.1:9200/indexname -XDELETE                 # 删除索引</span><br><span class=\"line\">        curl -XGET http://localhost:9200/_cat/shards           # 查看分片</span><br><span class=\"line\">        curl &#x27;127.0.0.1:9200/_cat/indices&#x27;                     # 查分片同步  unassigned_shards  # 没同步完成</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    mysql常用命令&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # mysql 可视化工具 MySQL Workbench</span><br><span class=\"line\"></span><br><span class=\"line\">        mysqlcheck -uroot -p -S mysql.sock --optimize --databases account       # 检查、修复、优化MyISAM表</span><br><span class=\"line\">        mysqlbinlog slave-relay-bin.000001              # 查看二进制日志</span><br><span class=\"line\">        mysqladmin -h myhost -u root -p create dbname   # 创建数据库</span><br><span class=\"line\"></span><br><span class=\"line\">        flush privileges;             # 刷新</span><br><span class=\"line\">        show databases;               # 显示所有数据库</span><br><span class=\"line\">        use dbname;                   # 打开数据库</span><br><span class=\"line\">        show tables;                  # 显示选中数据库中所有的表</span><br><span class=\"line\">        desc tables;                  # 查看表结构</span><br><span class=\"line\">        drop database name;           # 删除数据库</span><br><span class=\"line\">        drop table name;              # 删除表</span><br><span class=\"line\">        create database name;         # 创建数据库</span><br><span class=\"line\">        select column from table;     # 查询</span><br><span class=\"line\">        show processlist;             # 查看mysql进程</span><br><span class=\"line\">        show full processlist;        # 显示进程全的语句</span><br><span class=\"line\">        select user();                # 查看所有用户</span><br><span class=\"line\">        show slave status\\G;          # 查看主从状态</span><br><span class=\"line\">        show variables;               # 查看所有参数变量</span><br><span class=\"line\">        show status;                  # 运行状态</span><br><span class=\"line\">        show table status             # 查看表的引擎状态</span><br><span class=\"line\">        show grants for user@&#x27;%&#x27;                                    # 查看用户权限</span><br><span class=\"line\">        drop table if exists user                                   # 表存在就删除</span><br><span class=\"line\">        create table if not exists user                             # 表不存在就创建</span><br><span class=\"line\">        select host,user,password from user;                        # 查询用户权限 先use mysql</span><br><span class=\"line\">        create table ka(ka_id varchar(6),qianshu int);              # 创建表</span><br><span class=\"line\">        show variables like &#x27;character_set_%&#x27;;                      # 查看系统的字符集和排序方式的设定</span><br><span class=\"line\">        show variables like &#x27;%timeout%&#x27;;                            # 查看超时相关参数</span><br><span class=\"line\">        delete from user where user=&#x27;&#x27;;                             # 删除空用户</span><br><span class=\"line\">        delete from user where user=&#x27;sss&#x27; and host=&#x27;localhost&#x27; ;    # 删除用户</span><br><span class=\"line\">        drop user &#x27;sss&#x27;@&#x27;localhost&#x27;;                                # 使用此方法删除用户更为靠谱</span><br><span class=\"line\">        ALTER TABLE mytable ENGINE = MyISAM ;                       # 改变现有的表使用的存储引擎</span><br><span class=\"line\">        SHOW TABLE STATUS from  dbname  where Name=&#x27;tablename&#x27;;     # 查询表引擎</span><br><span class=\"line\">        mysql -uroot -p -A -ss -h10.10.10.5 -e &quot;show databases;&quot;    # shell中获取数据不带表格 -ss参数</span><br><span class=\"line\">        CREATE TABLE innodb (id int, title char(20)) ENGINE = INNODB                     # 创建表指定存储引擎的类型(MyISAM或INNODB)</span><br><span class=\"line\">        grant replication slave on *.* to &#x27;user&#x27;@&#x27;%&#x27; identified by &#x27;pwd&#x27;;                # 创建主从复制用户</span><br><span class=\"line\">        ALTER TABLE player ADD INDEX weekcredit_faction_index (weekcredit, faction);     # 添加索引</span><br><span class=\"line\">        alter table name add column accountid(column)  int(11) NOT NULL(column);         # 插入字段</span><br><span class=\"line\">        update host set monitor_state=&#x27;Y&#x27;,hostname=&#x27;xuesong&#x27; where ip=&#x27;192.168.1.1&#x27;;     # 更新数据</span><br><span class=\"line\">        select * from information_schema.processlist where command!=&#x27;sleep&#x27;;             # 查看当前进程</span><br><span class=\"line\">        select * from atable where name=&#x27;on&#x27; AND t&lt;15 AND host LIKE &#x27;10%&#x27; limit 1,10;    # 多条件查询</span><br><span class=\"line\">        show create database ops_deploy;                                                 # 查看数据库编码</span><br><span class=\"line\">        show create table updatelog;                                                     # 查看数据库表编码</span><br><span class=\"line\">        alter database ops_deploy CHARACTER SET utf8;                                    # 修改数据库编码</span><br><span class=\"line\">        alter table `updatelog` default character set utf8;                              # 修改表编码</span><br><span class=\"line\">        alter table `updatelog` convert to character set utf8;                           # 修改一张表的所有字段的编码格式</span><br><span class=\"line\"></span><br><span class=\"line\">        自增表&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            create table xuesong  (id INTEGER  PRIMARY KEY AUTO_INCREMENT, name CHAR(30) NOT NULL, age integer , sex CHAR(15) );  # 创建自增表</span><br><span class=\"line\">            insert into xuesong(name,age,sex) values(%s,%s,%s)  # 自增插入数据</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        登录mysql的命令&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            # 格式： mysql -h 主机地址 -u 用户名 -p 用户密码</span><br><span class=\"line\">            mysql -h110.110.110.110 -P3306 -uroot -p</span><br><span class=\"line\">            mysql -uroot -p -S /data1/mysql5/data/mysql.sock -A  --default-character-set=GBK</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        shell执行mysql命令&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            mysql -u root -p&#x27;123&#x27; xuesong &lt; file.sql   # 针对指定库执行sql文件中的语句,好处不需要转义特殊符号,一条语句可以换行.不指定库执行时语句中需要先use</span><br><span class=\"line\">            mysql -u$username -p$passwd -h$dbhost -P$dbport -A -e &quot;</span><br><span class=\"line\">            use $dbname;</span><br><span class=\"line\">            delete from data where date=(&#x27;$date1&#x27;);</span><br><span class=\"line\">            &quot;    # 执行多条mysql命令</span><br><span class=\"line\">            mysql -uroot -p -S mysql.sock -e &quot;use db;alter table gift add column accountid  int(11) NOT NULL;flush privileges;&quot;  2&gt;&amp;1 |grep -v Warning    # 不登陆mysql插入字段</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        mysql字符集相关&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            show variables like &#x27;%character%&#x27;;      # 查看数据库中设置字符集的参数</span><br><span class=\"line\">            # character_set_client、character_set_connection 以及 character_set_results 这几个参数都是客户端的设置</span><br><span class=\"line\">            # character_set_system、character_set_server 以及 character_set_database 是指服务器端的设置。</span><br><span class=\"line\">            # 而对于这三个服务器端的参数来说的优先级是:</span><br><span class=\"line\">            # 列级字符集 &gt; 表级字符集 &gt; character_set_database &gt; character_set_server &gt; character_set_system</span><br><span class=\"line\"></span><br><span class=\"line\">            show global variables like &#x27;%char%&#x27;;                                 #查看RDS实例字符集相关参数设置</span><br><span class=\"line\">            show global variables like &#x27;coll%&#x27;;                                  #查看当前会话字符序相关参数设置</span><br><span class=\"line\">            show character set;                                                  #查看实例支持的字符集</span><br><span class=\"line\">            show collation;                                                      #查看实例支持的字符序</span><br><span class=\"line\">            show create table table_name \\G                                      #查看表字符集设置</span><br><span class=\"line\">            show create database database_name \\G                                #查看数据库字符集设置</span><br><span class=\"line\">            show create procedure procedure_name \\G                              #查看存储过程字符集设置</span><br><span class=\"line\">            show procedure status \\G                                             #查看存储过程字符集设置</span><br><span class=\"line\">            alter database db_name default charset utf8;                         #修改数据库的字符集 </span><br><span class=\"line\">            create database db_name character set utf8;                          #创建数据库时指定字符集</span><br><span class=\"line\">            alter table tab_name default charset utf8 collate utf8_general_ci;   #修改表字符集和字符序</span><br><span class=\"line\"></span><br><span class=\"line\">            # 下面三条sql 分别将库 dbsdq , 表 tt2 , 表 tt2 中的 c2 列修改为utf8mb4 字符集</span><br><span class=\"line\">            alter database dbsdq character set utf8mb4 collate utf8mb4_unicode_ci;</span><br><span class=\"line\">            use dbsdq;</span><br><span class=\"line\">            alter table tt2 character set utf8mb4 collate utf8mb4_unicode_ci;</span><br><span class=\"line\">            alter table tt2 modify c2  varchar(10) character set utf8mb4;</span><br><span class=\"line\">            # 修改列时,当前列中的所有行都会立即转化为新的字符集;</span><br><span class=\"line\">            # alter table 会对表加元数据锁</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        备份数据库&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            mysqldump -h host -u root -p --default-character-set=utf8 dbname &gt;dbname_backup.sql               # 不包括库名，还原需先创建库，在use</span><br><span class=\"line\">            mysqldump -h host -u root -p --database --default-character-set=utf8 dbname &gt;dbname_backup.sql    # 包括库名，还原不需要创建库</span><br><span class=\"line\">            /bin/mysqlhotcopy -u root -p    # mysqlhotcopy只能备份MyISAM引擎</span><br><span class=\"line\">            mysqldump -u root -p -S mysql.sock --default-character-set=utf8 dbname table1 table2  &gt; /data/db.sql    # 备份表</span><br><span class=\"line\">            mysqldump -uroot -p123  -d database &gt; database.sql    # 备份数据库结构</span><br><span class=\"line\"></span><br><span class=\"line\">            # 最小权限备份</span><br><span class=\"line\">            grant select on db_name.* to dbbackup@&quot;localhost&quot; Identified by &quot;passwd&quot;;</span><br><span class=\"line\">            # --single-transaction  InnoDB有时间戳 只备份开始那一刻的数据,备份过程中的数据不会备份</span><br><span class=\"line\">            mysqldump -hlocalhost -P 3306 -u dbbackup --single-transaction  -p&quot;passwd&quot; --database dbname &gt;dbname.sql</span><br><span class=\"line\"></span><br><span class=\"line\">            # xtrabackup备份需单独安装软件 优点: 速度快,压力小,可直接恢复主从复制</span><br><span class=\"line\">            innobackupex --user=root --password=&quot;&quot; --defaults-file=/data/mysql5/data/my_3306.cnf --socket=/data/mysql5/data/mysql.sock --slave-info --stream=tar --tmpdir=/data/dbbackup/temp /data/dbbackup/ 2&gt;/data/dbbackup/dbbackup.log | gzip 1&gt;/data/dbbackup/db50.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        还原数据库&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            mysql -h host -u root -p dbname &lt; dbname_backup.sql</span><br><span class=\"line\">            source 路径.sql   # 登陆mysql后还原sql文件</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        赋权限&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            # 指定IP: $IP  本机: localhost   所有IP地址: %   # 通常指定多条</span><br><span class=\"line\">            grant all on zabbix.* to user@&quot;$IP&quot;;             # 对现有账号赋予权限</span><br><span class=\"line\">            grant select on database.* to user@&quot;%&quot; Identified by &quot;passwd&quot;;     # 赋予查询权限(没有用户，直接创建)</span><br><span class=\"line\">            grant all privileges on database.* to user@&quot;$IP&quot; identified by &#x27;passwd&#x27;;         # 赋予指定IP指定用户所有权限(不允许对当前库给其他用户赋权限)</span><br><span class=\"line\">            grant all privileges on database.* to user@&quot;localhost&quot; identified by &#x27;passwd&#x27; with grant option;   # 赋予本机指定用户所有权限(允许对当前库给其他用户赋权限)</span><br><span class=\"line\">            grant select, insert, update, delete on database.* to user@&#x27;ip&#x27;identified by &quot;passwd&quot;;   # 开放管理操作指令</span><br><span class=\"line\">            revoke all on *.* from user@localhost;     # 回收权限</span><br><span class=\"line\">            GRANT SELECT, INSERT, UPDATE, DELETE, CREATE, DROP, INDEX, ALTER, EXECUTE, CREATE ROUTINE, ALTER ROUTINE ON `storemisc_dev`.* TO &#x27;user&#x27;@&#x27;192.168.%&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        更改密码&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            update user set password=password(&#x27;passwd&#x27;) where user=&#x27;root&#x27;</span><br><span class=\"line\">            mysqladmin -u root password &#x27;xuesong&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        mysql忘记密码后重置&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            cd /data/mysql5</span><br><span class=\"line\">            /data/mysql5/bin/mysqld_safe --user=mysql --skip-grant-tables --skip-networking &amp;</span><br><span class=\"line\">            use mysql;</span><br><span class=\"line\">            update user set password=password(&#x27;123123&#x27;) where user=&#x27;root&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        mysql主从复制失败恢复&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            slave stop;</span><br><span class=\"line\">            reset slave;</span><br><span class=\"line\">            change master to master_host=&#x27;10.10.10.110&#x27;,master_port=3306,master_user=&#x27;repl&#x27;,master_password=&#x27;repl&#x27;,master_log_file=&#x27;master-bin.000010&#x27;,master_log_pos=107,master_connect_retry=60;</span><br><span class=\"line\">            slave start;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        sql语句使用变量&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            use xuesong;</span><br><span class=\"line\">            set @a=concat(&#x27;my&#x27;,weekday(curdate()));    # 组合时间变量</span><br><span class=\"line\">            set @sql := concat(&#x27;CREATE TABLE IF NOT EXISTS &#x27;,@a,&#x27;( id INT(11) NOT NULL )&#x27;);   # 组合sql语句</span><br><span class=\"line\">            select @sql;                    # 查看语句</span><br><span class=\"line\">            prepare create_tb from @sql;    # 准备</span><br><span class=\"line\">            execute create_tb;              # 执行</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        检测mysql主从复制延迟&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            1、在从库定时执行更新主库中的一个timeout数值</span><br><span class=\"line\">            2、同时取出从库中的timeout值对比判断从库与主库的延迟</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        死锁&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            show OPEN TABLES where In_use &gt; 0;                  # 查看当前锁信息</span><br><span class=\"line\">            show variables like &#x27;innodb_print_all_deadlocks&#x27;;   # 查看当前死锁参数</span><br><span class=\"line\">            set global innodb_print_all_deadlocks = 1;          # 设置死锁信息保存到错误日志</span><br><span class=\"line\">            innodb_print_all_deadlocks = 1                      # conf配置</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        mysql慢查询&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            select * from information_schema.processlist where command in (&#x27;Query&#x27;) and time &gt;5\\G      # 查询操作大于5S的进程</span><br><span class=\"line\"></span><br><span class=\"line\">            开启慢查询日志&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                # 配置文件 /etc/my.conf</span><br><span class=\"line\">                [mysqld]</span><br><span class=\"line\">                log-slow-queries=/var/lib/mysql/slowquery.log         # 指定日志文件存放位置，可以为空，系统会给一个缺省的文件host_name-slow.log</span><br><span class=\"line\">                long_query_time=5                                     # 记录超过的时间，默认为10s 建议0.5S</span><br><span class=\"line\">                log-queries-not-using-indexes                         # log下来没有使用索引的query,可以根据情况决定是否开启  可不加</span><br><span class=\"line\">                log-long-format                                       # 如果设置了，所有没有使用索引的查询也将被记录    可不加</span><br><span class=\"line\">                # 直接修改生效</span><br><span class=\"line\">                show variables like &quot;%slow%&quot;;                         # 查看慢查询状态</span><br><span class=\"line\">                set global slow_query_log=&#x27;ON&#x27;;                       # 开启慢查询日志 变量可能不同，看上句查询出来的变量</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            mysqldumpslow慢查询日志查看&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">                -s  # 是order的顺序，包括看了代码，主要有 c,t,l,r和ac,at,al,ar，分别是按照query次数，时间，lock的时间和返回的记录数来排序，前面加了a的时倒序</span><br><span class=\"line\">                -t  # 是top n的意思，即为返回前面多少条的数据</span><br><span class=\"line\">                -g  # 后边可以写一个正则匹配模式，大小写不敏感的</span><br><span class=\"line\"></span><br><span class=\"line\">                mysqldumpslow -s c -t 20 host-slow.log                # 访问次数最多的20个sql语句</span><br><span class=\"line\">                mysqldumpslow -s r -t 20 host-slow.log                # 返回记录集最多的20个sql</span><br><span class=\"line\">                mysqldumpslow -t 10 -s t -g &quot;left join&quot; host-slow.log # 按照时间返回前10条里面含有左连接的sql语句</span><br><span class=\"line\"></span><br><span class=\"line\">                show global status like &#x27;%slow%&#x27;;                     # 查看现在这个session有多少个慢查询</span><br><span class=\"line\">                show variables like &#x27;%slow%&#x27;;                         # 查看慢查询日志是否开启，如果slow_query_log和log_slow_queries显示为on，说明服务器的慢查询日志已经开启</span><br><span class=\"line\">                show variables like &#x27;%long%&#x27;;                         # 查看超时阀值</span><br><span class=\"line\">                desc select * from wei where text=&#x27;xishizhaohua&#x27;\\G;   # 扫描整张表 tepe:ALL  没有使用索引 key:NULL</span><br><span class=\"line\">                create index text_index on wei(text);                 # 创建索引</span><br><span class=\"line\"></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            Percona Toolkit 慢日志分析工具</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        mysql操作次数查询&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            select * from information_schema.global_status;</span><br><span class=\"line\"></span><br><span class=\"line\">            com_select</span><br><span class=\"line\">            com_delete</span><br><span class=\"line\">            com_insert</span><br><span class=\"line\">            com_update</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    mongodb&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # mongo可视管理工具 studio 3t  </span><br><span class=\"line\"></span><br><span class=\"line\">        一、启动&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            # 不启动认证</span><br><span class=\"line\">            ./mongod --port 27017 --fork --logpath=/opt/mongodb/mongodb.log --logappend --dbpath=/opt/mongodb/data/</span><br><span class=\"line\">            # 启动认证</span><br><span class=\"line\">            ./mongod --port 27017 --fork --logpath=/opt/mongodb/mongodb.log --logappend --dbpath=/opt/mongodb/data/ --auth</span><br><span class=\"line\"></span><br><span class=\"line\">            # 配置文件方式启动</span><br><span class=\"line\">            cat /opt/mongodb/mongodb.conf</span><br><span class=\"line\">              port=27017                       # 端口号</span><br><span class=\"line\">              fork=true                        # 以守护进程的方式运行，创建服务器进程</span><br><span class=\"line\">              auth=true                        # 开启用户认证</span><br><span class=\"line\">              logappend=true                   # 日志采用追加方式</span><br><span class=\"line\">              logpath=/opt/mongodb/mongodb.log # 日志输出文件路径</span><br><span class=\"line\">              dbpath=/opt/mongodb/data/        # 数据库路径</span><br><span class=\"line\">              shardsvr=true                    # 设置是否分片</span><br><span class=\"line\">              maxConns=600                     # 数据库的最大连接数</span><br><span class=\"line\">            ./mongod -f /opt/mongodb/mongodb.conf</span><br><span class=\"line\"></span><br><span class=\"line\">            # 其他参数</span><br><span class=\"line\">            bind_ip         # 绑定IP  使用mongo登录需要指定对应IP</span><br><span class=\"line\">            journal         # 开启日志功能,降低单机故障的恢复时间,取代dur参数</span><br><span class=\"line\">            syncdelay       # 系统同步刷新磁盘的时间,默认60秒</span><br><span class=\"line\">            directoryperdb  # 每个db单独存放目录,建议设置.与mysql独立表空间类似</span><br><span class=\"line\">            repairpath      # 执行repair时的临时目录.如果没开启journal,出现异常重启,必须执行repair操作</span><br><span class=\"line\">            # mongodb没有参数设置内存大小.使用os mmap机制缓存数据文件,在数据量不超过内存的情况下,效率非常高.数据量超过系统可用内存会影响写入性能</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        二、关闭&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            # 方法一:登录mongodb</span><br><span class=\"line\">            ./mongo</span><br><span class=\"line\">            use admin</span><br><span class=\"line\">            db.shutdownServer()</span><br><span class=\"line\"></span><br><span class=\"line\">            # 方法:kill传递信号  两种皆可</span><br><span class=\"line\">            kill -2 pid</span><br><span class=\"line\">            kill -15 pid</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        三、开启认证与用户管理&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            ./mongo                      # 先登录</span><br><span class=\"line\">            use admin                    # 切换到admin库</span><br><span class=\"line\">            db.addUser(&quot;root&quot;,&quot;123456&quot;)                     # 创建用户</span><br><span class=\"line\">            db.addUser(&#x27;zhansan&#x27;,&#x27;pass&#x27;,true)               # 如果用户的readOnly为true那么这个用户只能读取数据，添加一个readOnly用户zhansan</span><br><span class=\"line\">            ./mongo 127.0.0.1:27017/mydb -uroot -p123456    # 再次登录,只能针对用户所在库登录</span><br><span class=\"line\">            #虽然是超级管理员，但是admin不能直接登录其他数据库，否则报错</span><br><span class=\"line\">            #Fri Nov 22 15:03:21.886 Error: 18 &#123; code: 18, ok: 0.0, errmsg: &quot;auth fails&quot; &#125; at src/mongo/shell/db.js:228</span><br><span class=\"line\">            show collections                                # 查看链接状态 再次登录使用如下命令,显示错误未经授权</span><br><span class=\"line\">            db.system.users.find();                         # 查看创建用户信息</span><br><span class=\"line\">            db.system.users.remove(&#123;user:&quot;zhansan&quot;&#125;)        # 删除用户</span><br><span class=\"line\"></span><br><span class=\"line\">            #恢复密码只需要重启mongodb 不加--auth参数</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        四、登录&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            192.168.1.5:28017      # http登录后可查看状态</span><br><span class=\"line\">            mongo                  # 默认登录后打开 test 库</span><br><span class=\"line\">            mongo 192.168.1.5:27017/databaseName      # 直接连接某个库 不存在则创建  启动认证需要指定对应库才可登录</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        五、查看状态&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            #登录后执行命令查看状态</span><br><span class=\"line\">            db.runCommand(&#123;&quot;serverStatus&quot;:1&#125;)</span><br><span class=\"line\">                globalLock         # 表示全局写入锁占用了服务器多少时间(微秒)</span><br><span class=\"line\">                mem                # 包含服务器内存映射了多少数据,服务器进程的虚拟内存和常驻内存的占用情况(MB)</span><br><span class=\"line\">                indexCounters      # 表示B树在磁盘检索(misses)和内存检索(hits)的次数.如果这两个比值开始上升,就要考虑添加内存了</span><br><span class=\"line\">                backgroudFlushing  # 表示后台做了多少次fsync以及用了多少时间</span><br><span class=\"line\">                opcounters         # 包含每种主要擦撞的次数</span><br><span class=\"line\">                asserts            # 统计了断言的次数</span><br><span class=\"line\"></span><br><span class=\"line\">            #状态信息从服务器启动开始计算,如果过大就会复位,发送复位，所有计数都会复位,asserts中的roolovers值增加</span><br><span class=\"line\"></span><br><span class=\"line\">            #mongodb自带的命令</span><br><span class=\"line\">            ./mongostat</span><br><span class=\"line\">                insert     #每秒插入量</span><br><span class=\"line\">                query      #每秒查询量</span><br><span class=\"line\">                update     #每秒更新量</span><br><span class=\"line\">                delete     #每秒删除量</span><br><span class=\"line\">                locked     #锁定量</span><br><span class=\"line\">                qr|qw      #客户端查询排队长度(读|写)</span><br><span class=\"line\">                ar|aw      #活跃客户端量(读|写)</span><br><span class=\"line\">                conn       #连接数</span><br><span class=\"line\">                time       #当前时间</span><br><span class=\"line\"></span><br><span class=\"line\">            mongostat -h 127.0.0.1 --port 27047 --authenticationDatabase admin -u zadmin -p Keaphh9e    # 查看mongo状态</span><br><span class=\"line\">            mongotop  -h 127.0.0.1 --port 27047 --authenticationDatabase admin -u zadmin -p Keaphh9e    # 查看mongo集合的统计数据</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        六、常用命令&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            db.listCommands()     # 当前MongoDB支持的所有命令（同样可通过运行命令db.runCommand(&#123;&quot;listCommands&quot; : `1&#125;)来查询所有命令）</span><br><span class=\"line\"></span><br><span class=\"line\">            db.runCommand(&#123;&quot;buildInfo&quot; : 1&#125;)                                  # 返回MongoDB服务器的版本号和服务器OS的相关信息</span><br><span class=\"line\">            db.runCommand(&#123;&quot;collStats&quot; : tablename&#125;)                          # 返回该集合的统计信息，包括数据大小，已分配存储空间大小，索引的大小等</span><br><span class=\"line\">            db.runCommand(&#123;&quot;dropDatabase&quot; : 1&#125;)                               # 清空当前数据库的信息，包括删除所有的集合和索引</span><br><span class=\"line\">            db.runCommand(&#123;&quot;isMaster&quot; : 1&#125;)                                   # 检查本服务器是主服务器还是从服务器</span><br><span class=\"line\">            db.runCommand(&#123;&quot;ping&quot; : 1&#125;)                                       # 检查服务器链接是否正常。即便服务器上锁，该命令也会立即返回</span><br><span class=\"line\">            db.runCommand(&#123;&quot;repaireDatabase&quot; : 1&#125;)                            # 对当前数据库进行修复并压缩，如果数据库特别大，这个命令会非常耗时</span><br><span class=\"line\">            db.runCommand(&#123;&quot;serverStatus&quot; : 1&#125;)                               # 查看这台服务器的管理统计信息</span><br><span class=\"line\">            # 某些命令必须在admin数据库下运行，如下两个命令：</span><br><span class=\"line\">            db.runCommand(&#123;&quot;renameCollection&quot; : 集合名, &quot;to&quot;：集合名&#125;)          # 对集合重命名，注意两个集合名都要是完整的集合命名空间，如foo.bar, 表示数据库foo下的集合bar。</span><br><span class=\"line\">            db.runCommand(&#123;&quot;listDatabases&quot; : 1&#125;)                              # 列出服务器上所有的数据库</span><br><span class=\"line\"></span><br><span class=\"line\">            mongo  172.20.20.1:27072/mdb --eval &quot;db.tb.count();&quot;              # shell执行mongo语句</span><br><span class=\"line\">            mongo --host  172.20.20.1 --port 27049</span><br><span class=\"line\"></span><br><span class=\"line\">            rs.config();                                                      # 查看集群配置</span><br><span class=\"line\">            rs.status();                                                      # 查看集群节点的状态</span><br><span class=\"line\">            db.currentOp()                                                    # 获取当前正在执行的操作,可对应命令链接到ip:port</span><br><span class=\"line\">            db.runCommand( &#123; logRotate : 1 &#125; )                                # 日志轮转</span><br><span class=\"line\">            rs.slaveOk()                                                      # 设置从库shell可读</span><br><span class=\"line\">            rs.addArb(&quot;172.16.10.199:27020&quot;);                                 # 添加仲裁节点</span><br><span class=\"line\">            rs.add(&#123;host: &quot;10.2.2.2:27047&quot;, priority: 0, hidden: true&#125;)       # 添加从节点 hidden true隐藏节点[priority必须为0]  false不隐藏</span><br><span class=\"line\">            rs.remove(&quot;172.20.80.216:27047&quot;);                                 # 删除节点</span><br><span class=\"line\">            rs.stepDown(120)                                                  # 主库上执行切换为从,120秒后切换回主</span><br><span class=\"line\">            show dbs                                                          # 查询db</span><br><span class=\"line\">            use post                                                          # 选择db</span><br><span class=\"line\">            show tables                                                       # 查看文档列表</span><br><span class=\"line\">            db.tb.drop()                                                      # 删除集合 需要权限</span><br><span class=\"line\">            db.tb.remove(&#123;&#125;)                                                  # 删除所有数据</span><br><span class=\"line\">            db.tb.count()                                                     # 查询文档条数</span><br><span class=\"line\">            db.tb.find()                                                      # 查看文档内容</span><br><span class=\"line\">            db.tb.find(&#123;_id:37530555&#125;)                                        # 查询指定id</span><br><span class=\"line\">            db.tb.find().sort(&#123;_id:-1&#125;).limit(1)                              # 查询文档最后一条</span><br><span class=\"line\">            db.tb.find(&#123;&quot;processed&quot; : &#123;&quot;$ne&quot; : true&#125;&#125;).limit(1);              # 字段不为 true</span><br><span class=\"line\">            db.tb.find(&#123;&quot;processed&quot; : &#123;&quot;$eq&quot; : true&#125;&#125;).limit(1);              # 字段为 true</span><br><span class=\"line\">            db.tb.find(&#123;&quot;processed&quot; : &#123;&quot;$exists&quot; : false&#125;&#125;).limit(1);         # 字段不存在</span><br><span class=\"line\"></span><br><span class=\"line\">            db.tb.ensureIndex(&#123;&quot;status&quot;:1&#125;, &#123;background:true&#125;)                # 后台加索引</span><br><span class=\"line\">            db.tb.getIndexes()                                                # 查看索引</span><br><span class=\"line\">            db.tb.ensureIndex(&#123;&quot;c_type&quot;:1&#125;,&#123;backgrounnd:true&#125;)                # 后台添加索引  1正向  -1反向</span><br><span class=\"line\">            db.tb.dropIndex(&#123;&quot;c_type&quot;:1&#125;);                                    # 删除索引</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        七、进程控制&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            db.currentOp()                  # 查看活动进程</span><br><span class=\"line\">            db.$cmd.sys.inprog.findOne()    # 查看活动进程 与上面一样</span><br><span class=\"line\">                opid      # 操作进程号</span><br><span class=\"line\">                op        # 操作类型(查询\\更新)</span><br><span class=\"line\">                ns        # 命名空间,指操作的是哪个对象</span><br><span class=\"line\">                query     # 如果操作类型是查询,这里将显示具体的查询内容</span><br><span class=\"line\">                lockType  # 锁的类型,指明是读锁还是写锁</span><br><span class=\"line\"></span><br><span class=\"line\">            db.killOp(opid值)                         # 结束进程</span><br><span class=\"line\">            db.$cmd.sys.killop.findOne(&#123;op:opid值&#125;)   # 结束进程</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        八、备份还原&#123;</span><br><span class=\"line\">            # mongodump 虽然能不停机备份,但是为了获取实时数据视图的能力,使用fsync命令能在运行时复制数据目录并且不会损坏数据</span><br><span class=\"line\">            # fsync会强制服务器将所有缓冲区的数据写入磁盘.配合lock还阻止对数据库的进一步写入,知道释放锁为止</span><br><span class=\"line\">            db.runCommand(&#123;&quot;fsync&quot;:1,&quot;lock&quot;:1&#125;)   # 执行强制更新与写入锁</span><br><span class=\"line\">            db.$cmd.sys.unlock.findOne()          # 解锁</span><br><span class=\"line\">            db.currentOp()                        # 查看解锁是否正常</span><br><span class=\"line\"></span><br><span class=\"line\">            mongoexport -d test -c t1 -o t1.dat                 # 导出JSON格式</span><br><span class=\"line\">                -c         # 指明导出集合</span><br><span class=\"line\">                -d         # 使用库</span><br><span class=\"line\">            mongoexport -d test -c t1 -csv -f num -o t1.dat     # 导出csv格式</span><br><span class=\"line\">                -csv       # 指明导出csv格式</span><br><span class=\"line\">                -f         # 指明需要导出那些例</span><br><span class=\"line\"></span><br><span class=\"line\">            mongoimport -d test -c t1 -file t1.dat                           # mongoimport还原JSON格式</span><br><span class=\"line\">            mongoimport -d test -c t1 -type csv --headerline -file t1.dat    # mongoimport还原csv格式数据</span><br><span class=\"line\">                --headerline                # 指明不导入第一行 因为第一行是列名</span><br><span class=\"line\"></span><br><span class=\"line\">            mongodump -d test -o /bak/mongodump                # mongodump数据备份</span><br><span class=\"line\">            mongorestore -d test --drop /bak/mongodump/*       # mongorestore恢复</span><br><span class=\"line\">                --drop      # 恢复前先删除</span><br><span class=\"line\">                --gzip      # 压缩</span><br><span class=\"line\"></span><br><span class=\"line\">            # 备份一个表</span><br><span class=\"line\">            # --excludeCollection string # 排除指定的集合 要排除多个，使用多个</span><br><span class=\"line\">            mongodump --host 127.0.0.1:27080 -d dbname  -c tablename  -o /data/reports/</span><br><span class=\"line\">            mongodump --host 127.0.0.1:27080 -d dbname  -c tablename  -o /data/reports/reports  -u root -p tAvaa5yNUE --authenticationDatabase admin</span><br><span class=\"line\"></span><br><span class=\"line\">            # 恢复一个表</span><br><span class=\"line\">            mongorestore --host 127.0.0.1:27080 -d dbname  -c tablename --drop --dir=/data/reports/tablename.bson</span><br><span class=\"line\"></span><br><span class=\"line\">            # 在线拷贝一个库</span><br><span class=\"line\">            db.copyDatabase(fromdb, todb, fromhost, username, password, mechanism)</span><br><span class=\"line\">            db.copyDatabase(&#x27;mate&#x27;,&#x27;mate&#x27;, &#x27;172.16.255.176:27047&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        九、修复&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            # 当停电或其他故障引起不正常关闭时,会造成部分数据损坏丢失</span><br><span class=\"line\">            mongod --repair      # 修复操作:启动时候加上 --repair</span><br><span class=\"line\">            # 修复过程:将所有文档导出,然后马上导入,忽略无效文档.完成后重建索引。时间较长,会丢弃损坏文档</span><br><span class=\"line\">            # 修复数据还能起到压缩数据库的作用</span><br><span class=\"line\">            db.repairDatabase()    # 运行中的mongodb可使用 repairDatabase 修复当前使用的数据库</span><br><span class=\"line\">            &#123;&quot;repairDatabase&quot;:1&#125;   # 通过驱动程序</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        十、python使用mongodb&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            原文: http://blog.nosqlfan.com/html/2989.html</span><br><span class=\"line\"></span><br><span class=\"line\">            easy_install pymongo      # python2.7+</span><br><span class=\"line\">            import pymongo</span><br><span class=\"line\">            connection=pymongo.Connection(&#x27;localhost&#x27;,27017)   # 创建连接</span><br><span class=\"line\">            db = connection.test_database                      # 切换数据库</span><br><span class=\"line\">            collection = db.test_collection                    # 获取collection</span><br><span class=\"line\">            # db和collection都是延时创建的，在添加Document时才真正创建</span><br><span class=\"line\"></span><br><span class=\"line\">            文档添加, _id自动创建</span><br><span class=\"line\">                import datetime</span><br><span class=\"line\">                post = &#123;&quot;author&quot;: &quot;Mike&quot;,</span><br><span class=\"line\">                    &quot;text&quot;: &quot;My first blog post!&quot;,</span><br><span class=\"line\">                    &quot;tags&quot;: [&quot;mongodb&quot;, &quot;python&quot;, &quot;pymongo&quot;],</span><br><span class=\"line\">                    &quot;date&quot;: datetime.datetime.utcnow()&#125;</span><br><span class=\"line\">                posts = db.posts</span><br><span class=\"line\">                posts.insert(post)</span><br><span class=\"line\">                ObjectId(&#x27;...&#x27;)</span><br><span class=\"line\"></span><br><span class=\"line\">            批量插入</span><br><span class=\"line\">                new_posts = [&#123;&quot;author&quot;: &quot;Mike&quot;,</span><br><span class=\"line\">                    &quot;text&quot;: &quot;Another post!&quot;,</span><br><span class=\"line\">                    &quot;tags&quot;: [&quot;bulk&quot;, &quot;insert&quot;],</span><br><span class=\"line\">                    &quot;date&quot;: datetime.datetime(2009, 11, 12, 11, 14)&#125;,</span><br><span class=\"line\">                    &#123;&quot;author&quot;: &quot;Eliot&quot;,</span><br><span class=\"line\">                    &quot;title&quot;: &quot;MongoDB is fun&quot;,</span><br><span class=\"line\">                    &quot;text&quot;: &quot;and pretty easy too!&quot;,</span><br><span class=\"line\">                    &quot;date&quot;: datetime.datetime(2009, 11, 10, 10, 45)&#125;]</span><br><span class=\"line\">                posts.insert(new_posts)</span><br><span class=\"line\">                [ObjectId(&#x27;...&#x27;), ObjectId(&#x27;...&#x27;)]</span><br><span class=\"line\"></span><br><span class=\"line\">            获取所有collection</span><br><span class=\"line\">                db.collection_names()    # 相当于SQL的show tables</span><br><span class=\"line\"></span><br><span class=\"line\">            获取单个文档</span><br><span class=\"line\">                posts.find_one()</span><br><span class=\"line\"></span><br><span class=\"line\">            查询多个文档</span><br><span class=\"line\">                for post in posts.find():</span><br><span class=\"line\">                    post</span><br><span class=\"line\"></span><br><span class=\"line\">            加条件的查询</span><br><span class=\"line\">                posts.find_one(&#123;&quot;author&quot;: &quot;Mike&quot;&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">            高级查询</span><br><span class=\"line\">                posts.find(&#123;&quot;date&quot;: &#123;&quot;$lt&quot;: &quot;d&quot;&#125;&#125;).sort(&quot;author&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">            统计数量</span><br><span class=\"line\">                posts.count()</span><br><span class=\"line\"></span><br><span class=\"line\">            加索引</span><br><span class=\"line\">                from pymongo import ASCENDING, DESCENDING</span><br><span class=\"line\">                posts.create_index([(&quot;date&quot;, DESCENDING), (&quot;author&quot;, ASCENDING)])</span><br><span class=\"line\"></span><br><span class=\"line\">            查看查询语句的性能</span><br><span class=\"line\">                posts.find(&#123;&quot;date&quot;: &#123;&quot;$lt&quot;: &quot;d&quot;&#125;&#125;).sort(&quot;author&quot;).explain()[&quot;cursor&quot;]</span><br><span class=\"line\">                posts.find(&#123;&quot;date&quot;: &#123;&quot;$lt&quot;: &quot;d&quot;&#125;&#125;).sort(&quot;author&quot;).explain()[&quot;nscanned&quot;]</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    JDK安装&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        vim /etc/profile.d/jdk.sh</span><br><span class=\"line\">        export JAVA_HOME=/usr/local/jdk1.8.0_151</span><br><span class=\"line\">        export PATH=$JAVA_HOME/bin:$PATH</span><br><span class=\"line\"></span><br><span class=\"line\">        . /etc/profile         # 加载新的环境变量</span><br><span class=\"line\">        jps -ml                # 查看java进程</span><br><span class=\"line\">        jstat -gc 18381 1s 30  # 查看java进程gc情况</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    redis动态加内存&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ./redis-cli -h 10.10.10.11 -p 6401</span><br><span class=\"line\">        save                                # 保存当前快照</span><br><span class=\"line\">        config get *                        # 列出所有当前配置</span><br><span class=\"line\">        config get maxmemory                # 查看指定配置</span><br><span class=\"line\">        config set maxmemory  15360000000   # 动态修改最大内存配置参数</span><br><span class=\"line\">\t\tselect 5                            # 选择数据库</span><br><span class=\"line\">\t\tCONFIG SET requirepass &quot;no&quot;         # 设置密码</span><br><span class=\"line\">\t\tauth &quot;no&quot;                           # 认证</span><br><span class=\"line\">\t\tset db redis                        # 添加key</span><br><span class=\"line\">\t\tget db                              # 获取key的value</span><br><span class=\"line\">\t\t------------------------------</span><br><span class=\"line\">\t\tredis键空间通知</span><br><span class=\"line\">\t\t1 /etc/redis.conf</span><br></pre></td></tr></table></figure>\n<pre><code>    notify-keyspace-events Ex\n    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">2 systemctl restart redis</span><br><span class=\"line\">3 终端1执行</span><br></pre></td></tr></table></figure>\n    PSUBSCRIBE __keyevent@0__:expired \n    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">4 终端2</span><br></pre></td></tr></table></figure>\n    setex easubuac_auth_token 5 uac:192.168.1.189:e36b1f00034357fe3396b34d906778fe  # 设置10s后过期\n    <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br><span class=\"line\">282</span><br><span class=\"line\">283</span><br><span class=\"line\">284</span><br><span class=\"line\">285</span><br><span class=\"line\">286</span><br><span class=\"line\">287</span><br><span class=\"line\">288</span><br><span class=\"line\">289</span><br><span class=\"line\">290</span><br><span class=\"line\">291</span><br><span class=\"line\">292</span><br><span class=\"line\">293</span><br><span class=\"line\">294</span><br><span class=\"line\">295</span><br><span class=\"line\">296</span><br><span class=\"line\">297</span><br><span class=\"line\">298</span><br><span class=\"line\">299</span><br><span class=\"line\">300</span><br><span class=\"line\">301</span><br><span class=\"line\">302</span><br><span class=\"line\">303</span><br><span class=\"line\">304</span><br><span class=\"line\">305</span><br><span class=\"line\">306</span><br><span class=\"line\">307</span><br><span class=\"line\">308</span><br><span class=\"line\">309</span><br><span class=\"line\">310</span><br><span class=\"line\">311</span><br><span class=\"line\">312</span><br><span class=\"line\">313</span><br><span class=\"line\">314</span><br><span class=\"line\">315</span><br><span class=\"line\">316</span><br><span class=\"line\">317</span><br><span class=\"line\">318</span><br><span class=\"line\">319</span><br><span class=\"line\">320</span><br><span class=\"line\">321</span><br><span class=\"line\">322</span><br><span class=\"line\">323</span><br><span class=\"line\">324</span><br><span class=\"line\">325</span><br><span class=\"line\">326</span><br><span class=\"line\">327</span><br><span class=\"line\">328</span><br><span class=\"line\">329</span><br><span class=\"line\">330</span><br><span class=\"line\">331</span><br><span class=\"line\">332</span><br><span class=\"line\">333</span><br><span class=\"line\">334</span><br><span class=\"line\">335</span><br><span class=\"line\">336</span><br><span class=\"line\">337</span><br><span class=\"line\">338</span><br><span class=\"line\">339</span><br><span class=\"line\">340</span><br><span class=\"line\">341</span><br><span class=\"line\">342</span><br><span class=\"line\">343</span><br><span class=\"line\">344</span><br><span class=\"line\">345</span><br><span class=\"line\">346</span><br><span class=\"line\">347</span><br><span class=\"line\">348</span><br><span class=\"line\">349</span><br><span class=\"line\">350</span><br><span class=\"line\">351</span><br><span class=\"line\">352</span><br><span class=\"line\">353</span><br><span class=\"line\">354</span><br><span class=\"line\">355</span><br><span class=\"line\">356</span><br><span class=\"line\">357</span><br><span class=\"line\">358</span><br><span class=\"line\">359</span><br><span class=\"line\">360</span><br><span class=\"line\">361</span><br><span class=\"line\">362</span><br><span class=\"line\">363</span><br><span class=\"line\">364</span><br><span class=\"line\">365</span><br><span class=\"line\">366</span><br><span class=\"line\">367</span><br><span class=\"line\">368</span><br><span class=\"line\">369</span><br><span class=\"line\">370</span><br><span class=\"line\">371</span><br><span class=\"line\">372</span><br><span class=\"line\">373</span><br><span class=\"line\">374</span><br><span class=\"line\">375</span><br><span class=\"line\">376</span><br><span class=\"line\">377</span><br><span class=\"line\">378</span><br><span class=\"line\">379</span><br><span class=\"line\">380</span><br><span class=\"line\">381</span><br><span class=\"line\">382</span><br><span class=\"line\">383</span><br><span class=\"line\">384</span><br><span class=\"line\">385</span><br><span class=\"line\">386</span><br><span class=\"line\">387</span><br><span class=\"line\">388</span><br><span class=\"line\">389</span><br><span class=\"line\">390</span><br><span class=\"line\">391</span><br><span class=\"line\">392</span><br><span class=\"line\">393</span><br><span class=\"line\">394</span><br><span class=\"line\">395</span><br><span class=\"line\">396</span><br><span class=\"line\">397</span><br><span class=\"line\">398</span><br><span class=\"line\">399</span><br><span class=\"line\">400</span><br><span class=\"line\">401</span><br><span class=\"line\">402</span><br><span class=\"line\">403</span><br><span class=\"line\">404</span><br><span class=\"line\">405</span><br><span class=\"line\">406</span><br><span class=\"line\">407</span><br><span class=\"line\">408</span><br><span class=\"line\">409</span><br><span class=\"line\">410</span><br><span class=\"line\">411</span><br><span class=\"line\">412</span><br><span class=\"line\">413</span><br><span class=\"line\">414</span><br><span class=\"line\">415</span><br><span class=\"line\">416</span><br><span class=\"line\">417</span><br><span class=\"line\">418</span><br><span class=\"line\">419</span><br><span class=\"line\">420</span><br><span class=\"line\">421</span><br><span class=\"line\">422</span><br><span class=\"line\">423</span><br><span class=\"line\">424</span><br><span class=\"line\">425</span><br><span class=\"line\">426</span><br><span class=\"line\">427</span><br><span class=\"line\">428</span><br><span class=\"line\">429</span><br><span class=\"line\">430</span><br><span class=\"line\">431</span><br><span class=\"line\">432</span><br><span class=\"line\">433</span><br><span class=\"line\">434</span><br><span class=\"line\">435</span><br><span class=\"line\">436</span><br><span class=\"line\">437</span><br><span class=\"line\">438</span><br><span class=\"line\">439</span><br><span class=\"line\">440</span><br><span class=\"line\">441</span><br><span class=\"line\">442</span><br><span class=\"line\">443</span><br><span class=\"line\">444</span><br><span class=\"line\">445</span><br><span class=\"line\">446</span><br><span class=\"line\">447</span><br><span class=\"line\">448</span><br><span class=\"line\">449</span><br><span class=\"line\">450</span><br><span class=\"line\">451</span><br><span class=\"line\">452</span><br><span class=\"line\">453</span><br><span class=\"line\">454</span><br><span class=\"line\">455</span><br><span class=\"line\">456</span><br><span class=\"line\">457</span><br><span class=\"line\">458</span><br><span class=\"line\">459</span><br><span class=\"line\">460</span><br><span class=\"line\">461</span><br><span class=\"line\">462</span><br><span class=\"line\">463</span><br><span class=\"line\">464</span><br><span class=\"line\">465</span><br><span class=\"line\">466</span><br><span class=\"line\">467</span><br><span class=\"line\">468</span><br><span class=\"line\">469</span><br><span class=\"line\">470</span><br><span class=\"line\">471</span><br><span class=\"line\">472</span><br><span class=\"line\">473</span><br><span class=\"line\">474</span><br><span class=\"line\">475</span><br><span class=\"line\">476</span><br><span class=\"line\">477</span><br><span class=\"line\">478</span><br><span class=\"line\">479</span><br><span class=\"line\">480</span><br><span class=\"line\">481</span><br><span class=\"line\">482</span><br><span class=\"line\">483</span><br><span class=\"line\">484</span><br><span class=\"line\">485</span><br><span class=\"line\">486</span><br><span class=\"line\">487</span><br><span class=\"line\">488</span><br><span class=\"line\">489</span><br><span class=\"line\">490</span><br><span class=\"line\">491</span><br><span class=\"line\">492</span><br><span class=\"line\">493</span><br><span class=\"line\">494</span><br><span class=\"line\">495</span><br><span class=\"line\">496</span><br><span class=\"line\">497</span><br><span class=\"line\">498</span><br><span class=\"line\">499</span><br><span class=\"line\">500</span><br><span class=\"line\">501</span><br><span class=\"line\">502</span><br><span class=\"line\">503</span><br><span class=\"line\">504</span><br><span class=\"line\">505</span><br><span class=\"line\">506</span><br><span class=\"line\">507</span><br><span class=\"line\">508</span><br><span class=\"line\">509</span><br><span class=\"line\">510</span><br><span class=\"line\">511</span><br><span class=\"line\">512</span><br><span class=\"line\">513</span><br><span class=\"line\">514</span><br><span class=\"line\">515</span><br><span class=\"line\">516</span><br><span class=\"line\">517</span><br><span class=\"line\">518</span><br><span class=\"line\">519</span><br><span class=\"line\">520</span><br><span class=\"line\">521</span><br><span class=\"line\">522</span><br><span class=\"line\">523</span><br><span class=\"line\">524</span><br><span class=\"line\">525</span><br><span class=\"line\">526</span><br><span class=\"line\">527</span><br><span class=\"line\">528</span><br><span class=\"line\">529</span><br><span class=\"line\">530</span><br><span class=\"line\">531</span><br><span class=\"line\">532</span><br><span class=\"line\">533</span><br><span class=\"line\">534</span><br><span class=\"line\">535</span><br><span class=\"line\">536</span><br><span class=\"line\">537</span><br><span class=\"line\">538</span><br><span class=\"line\">539</span><br><span class=\"line\">540</span><br><span class=\"line\">541</span><br><span class=\"line\">542</span><br><span class=\"line\">543</span><br><span class=\"line\">544</span><br><span class=\"line\">545</span><br><span class=\"line\">546</span><br><span class=\"line\">547</span><br><span class=\"line\">548</span><br><span class=\"line\">549</span><br><span class=\"line\">550</span><br><span class=\"line\">551</span><br><span class=\"line\">552</span><br><span class=\"line\">553</span><br><span class=\"line\">554</span><br><span class=\"line\">555</span><br><span class=\"line\">556</span><br><span class=\"line\">557</span><br><span class=\"line\">558</span><br><span class=\"line\">559</span><br><span class=\"line\">560</span><br><span class=\"line\">561</span><br><span class=\"line\">562</span><br><span class=\"line\">563</span><br><span class=\"line\">564</span><br><span class=\"line\">565</span><br><span class=\"line\">566</span><br><span class=\"line\">567</span><br><span class=\"line\">568</span><br><span class=\"line\">569</span><br><span class=\"line\">570</span><br><span class=\"line\">571</span><br><span class=\"line\">572</span><br><span class=\"line\">573</span><br><span class=\"line\">574</span><br><span class=\"line\">575</span><br><span class=\"line\">576</span><br><span class=\"line\">577</span><br><span class=\"line\">578</span><br><span class=\"line\">579</span><br><span class=\"line\">580</span><br><span class=\"line\">581</span><br><span class=\"line\">582</span><br><span class=\"line\">583</span><br><span class=\"line\">584</span><br><span class=\"line\">585</span><br><span class=\"line\">586</span><br><span class=\"line\">587</span><br><span class=\"line\">588</span><br><span class=\"line\">589</span><br><span class=\"line\">590</span><br><span class=\"line\">591</span><br><span class=\"line\">592</span><br><span class=\"line\">593</span><br><span class=\"line\">594</span><br><span class=\"line\">595</span><br><span class=\"line\">596</span><br><span class=\"line\">597</span><br><span class=\"line\">598</span><br><span class=\"line\">599</span><br><span class=\"line\">600</span><br><span class=\"line\">601</span><br><span class=\"line\">602</span><br><span class=\"line\">603</span><br><span class=\"line\">604</span><br><span class=\"line\">605</span><br><span class=\"line\">606</span><br><span class=\"line\">607</span><br><span class=\"line\">608</span><br><span class=\"line\">609</span><br><span class=\"line\">610</span><br><span class=\"line\">611</span><br><span class=\"line\">612</span><br><span class=\"line\">613</span><br><span class=\"line\">614</span><br><span class=\"line\">615</span><br><span class=\"line\">616</span><br><span class=\"line\">617</span><br><span class=\"line\">618</span><br><span class=\"line\">619</span><br><span class=\"line\">620</span><br><span class=\"line\">621</span><br><span class=\"line\">622</span><br><span class=\"line\">623</span><br><span class=\"line\">624</span><br><span class=\"line\">625</span><br><span class=\"line\">626</span><br><span class=\"line\">627</span><br><span class=\"line\">628</span><br><span class=\"line\">629</span><br><span class=\"line\">630</span><br><span class=\"line\">631</span><br><span class=\"line\">632</span><br><span class=\"line\">633</span><br><span class=\"line\">634</span><br><span class=\"line\">635</span><br><span class=\"line\">636</span><br><span class=\"line\">637</span><br><span class=\"line\">638</span><br><span class=\"line\">639</span><br><span class=\"line\">640</span><br><span class=\"line\">641</span><br><span class=\"line\">642</span><br><span class=\"line\">643</span><br><span class=\"line\">644</span><br><span class=\"line\">645</span><br><span class=\"line\">646</span><br><span class=\"line\">647</span><br><span class=\"line\">648</span><br><span class=\"line\">649</span><br><span class=\"line\">650</span><br><span class=\"line\">651</span><br><span class=\"line\">652</span><br><span class=\"line\">653</span><br><span class=\"line\">654</span><br><span class=\"line\">655</span><br><span class=\"line\">656</span><br><span class=\"line\">657</span><br><span class=\"line\">658</span><br><span class=\"line\">659</span><br><span class=\"line\">660</span><br><span class=\"line\">661</span><br><span class=\"line\">662</span><br><span class=\"line\">663</span><br><span class=\"line\">664</span><br><span class=\"line\">665</span><br><span class=\"line\">666</span><br><span class=\"line\">667</span><br><span class=\"line\">668</span><br><span class=\"line\">669</span><br><span class=\"line\">670</span><br><span class=\"line\">671</span><br><span class=\"line\">672</span><br><span class=\"line\">673</span><br><span class=\"line\">674</span><br><span class=\"line\">675</span><br><span class=\"line\">676</span><br><span class=\"line\">677</span><br><span class=\"line\">678</span><br><span class=\"line\">679</span><br><span class=\"line\">680</span><br><span class=\"line\">681</span><br><span class=\"line\">682</span><br><span class=\"line\">683</span><br><span class=\"line\">684</span><br><span class=\"line\">685</span><br><span class=\"line\">686</span><br><span class=\"line\">687</span><br><span class=\"line\">688</span><br><span class=\"line\">689</span><br><span class=\"line\">690</span><br><span class=\"line\">691</span><br><span class=\"line\">692</span><br><span class=\"line\">693</span><br><span class=\"line\">694</span><br><span class=\"line\">695</span><br><span class=\"line\">696</span><br><span class=\"line\">697</span><br><span class=\"line\">698</span><br><span class=\"line\">699</span><br><span class=\"line\">700</span><br><span class=\"line\">701</span><br><span class=\"line\">702</span><br><span class=\"line\">703</span><br><span class=\"line\">704</span><br><span class=\"line\">705</span><br><span class=\"line\">706</span><br><span class=\"line\">707</span><br><span class=\"line\">708</span><br><span class=\"line\">709</span><br><span class=\"line\">710</span><br><span class=\"line\">711</span><br><span class=\"line\">712</span><br><span class=\"line\">713</span><br><span class=\"line\">714</span><br><span class=\"line\">715</span><br><span class=\"line\">716</span><br><span class=\"line\">717</span><br><span class=\"line\">718</span><br><span class=\"line\">719</span><br><span class=\"line\">720</span><br><span class=\"line\">721</span><br><span class=\"line\">722</span><br><span class=\"line\">723</span><br><span class=\"line\">724</span><br><span class=\"line\">725</span><br><span class=\"line\">726</span><br><span class=\"line\">727</span><br><span class=\"line\">728</span><br><span class=\"line\">729</span><br><span class=\"line\">730</span><br><span class=\"line\">731</span><br><span class=\"line\">732</span><br><span class=\"line\">733</span><br><span class=\"line\">734</span><br><span class=\"line\">735</span><br><span class=\"line\">736</span><br><span class=\"line\">737</span><br><span class=\"line\">738</span><br><span class=\"line\">739</span><br><span class=\"line\">740</span><br><span class=\"line\">741</span><br><span class=\"line\">742</span><br><span class=\"line\">743</span><br><span class=\"line\">744</span><br><span class=\"line\">745</span><br><span class=\"line\">746</span><br><span class=\"line\">747</span><br><span class=\"line\">748</span><br><span class=\"line\">749</span><br><span class=\"line\">750</span><br><span class=\"line\">751</span><br><span class=\"line\">752</span><br><span class=\"line\">753</span><br><span class=\"line\">754</span><br><span class=\"line\">755</span><br><span class=\"line\">756</span><br><span class=\"line\">757</span><br><span class=\"line\">758</span><br><span class=\"line\">759</span><br><span class=\"line\">760</span><br><span class=\"line\">761</span><br><span class=\"line\">762</span><br><span class=\"line\">763</span><br><span class=\"line\">764</span><br><span class=\"line\">765</span><br><span class=\"line\">766</span><br><span class=\"line\">767</span><br><span class=\"line\">768</span><br><span class=\"line\">769</span><br><span class=\"line\">770</span><br><span class=\"line\">771</span><br><span class=\"line\">772</span><br><span class=\"line\">773</span><br><span class=\"line\">774</span><br><span class=\"line\">775</span><br><span class=\"line\">776</span><br><span class=\"line\">777</span><br><span class=\"line\">778</span><br><span class=\"line\">779</span><br><span class=\"line\">780</span><br><span class=\"line\">781</span><br><span class=\"line\">782</span><br><span class=\"line\">783</span><br><span class=\"line\">784</span><br><span class=\"line\">785</span><br><span class=\"line\">786</span><br><span class=\"line\">787</span><br><span class=\"line\">788</span><br><span class=\"line\">789</span><br><span class=\"line\">790</span><br><span class=\"line\">791</span><br><span class=\"line\">792</span><br><span class=\"line\">793</span><br><span class=\"line\">794</span><br><span class=\"line\">795</span><br><span class=\"line\">796</span><br><span class=\"line\">797</span><br><span class=\"line\">798</span><br><span class=\"line\">799</span><br><span class=\"line\">800</span><br><span class=\"line\">801</span><br><span class=\"line\">802</span><br><span class=\"line\">803</span><br><span class=\"line\">804</span><br><span class=\"line\">805</span><br><span class=\"line\">806</span><br><span class=\"line\">807</span><br><span class=\"line\">808</span><br><span class=\"line\">809</span><br><span class=\"line\">810</span><br><span class=\"line\">811</span><br><span class=\"line\">812</span><br><span class=\"line\">813</span><br><span class=\"line\">814</span><br><span class=\"line\">815</span><br><span class=\"line\">816</span><br><span class=\"line\">817</span><br><span class=\"line\">818</span><br><span class=\"line\">819</span><br><span class=\"line\">820</span><br><span class=\"line\">821</span><br><span class=\"line\">822</span><br><span class=\"line\">823</span><br><span class=\"line\">824</span><br><span class=\"line\">825</span><br><span class=\"line\">826</span><br><span class=\"line\">827</span><br><span class=\"line\">828</span><br><span class=\"line\">829</span><br><span class=\"line\">830</span><br><span class=\"line\">831</span><br><span class=\"line\">832</span><br><span class=\"line\">833</span><br><span class=\"line\">834</span><br><span class=\"line\">835</span><br><span class=\"line\">836</span><br><span class=\"line\">837</span><br><span class=\"line\">838</span><br><span class=\"line\">839</span><br><span class=\"line\">840</span><br><span class=\"line\">841</span><br><span class=\"line\">842</span><br><span class=\"line\">843</span><br><span class=\"line\">844</span><br><span class=\"line\">845</span><br><span class=\"line\">846</span><br><span class=\"line\">847</span><br><span class=\"line\">848</span><br><span class=\"line\">849</span><br><span class=\"line\">850</span><br><span class=\"line\">851</span><br><span class=\"line\">852</span><br><span class=\"line\">853</span><br><span class=\"line\">854</span><br><span class=\"line\">855</span><br><span class=\"line\">856</span><br><span class=\"line\">857</span><br><span class=\"line\">858</span><br><span class=\"line\">859</span><br><span class=\"line\">860</span><br><span class=\"line\">861</span><br><span class=\"line\">862</span><br><span class=\"line\">863</span><br><span class=\"line\">864</span><br><span class=\"line\">865</span><br><span class=\"line\">866</span><br><span class=\"line\">867</span><br><span class=\"line\">868</span><br><span class=\"line\">869</span><br><span class=\"line\">870</span><br><span class=\"line\">871</span><br><span class=\"line\">872</span><br><span class=\"line\">873</span><br><span class=\"line\">874</span><br><span class=\"line\">875</span><br><span class=\"line\">876</span><br><span class=\"line\">877</span><br><span class=\"line\">878</span><br><span class=\"line\">879</span><br><span class=\"line\">880</span><br><span class=\"line\">881</span><br><span class=\"line\">882</span><br><span class=\"line\">883</span><br><span class=\"line\">884</span><br><span class=\"line\">885</span><br><span class=\"line\">886</span><br><span class=\"line\">887</span><br><span class=\"line\">888</span><br><span class=\"line\">889</span><br><span class=\"line\">890</span><br><span class=\"line\">891</span><br><span class=\"line\">892</span><br><span class=\"line\">893</span><br><span class=\"line\">894</span><br><span class=\"line\">895</span><br><span class=\"line\">896</span><br><span class=\"line\">897</span><br><span class=\"line\">898</span><br><span class=\"line\">899</span><br><span class=\"line\">900</span><br><span class=\"line\">901</span><br><span class=\"line\">902</span><br><span class=\"line\">903</span><br><span class=\"line\">904</span><br><span class=\"line\">905</span><br><span class=\"line\">906</span><br><span class=\"line\">907</span><br><span class=\"line\">908</span><br><span class=\"line\">909</span><br><span class=\"line\">910</span><br><span class=\"line\">911</span><br><span class=\"line\">912</span><br><span class=\"line\">913</span><br><span class=\"line\">914</span><br><span class=\"line\">915</span><br><span class=\"line\">916</span><br><span class=\"line\">917</span><br><span class=\"line\">918</span><br><span class=\"line\">919</span><br><span class=\"line\">920</span><br><span class=\"line\">921</span><br><span class=\"line\">922</span><br><span class=\"line\">923</span><br><span class=\"line\">924</span><br><span class=\"line\">925</span><br><span class=\"line\">926</span><br><span class=\"line\">927</span><br><span class=\"line\">928</span><br><span class=\"line\">929</span><br><span class=\"line\">930</span><br><span class=\"line\">931</span><br><span class=\"line\">932</span><br><span class=\"line\">933</span><br><span class=\"line\">934</span><br><span class=\"line\">935</span><br><span class=\"line\">936</span><br><span class=\"line\">937</span><br><span class=\"line\">938</span><br><span class=\"line\">939</span><br><span class=\"line\">940</span><br><span class=\"line\">941</span><br><span class=\"line\">942</span><br><span class=\"line\">943</span><br><span class=\"line\">944</span><br><span class=\"line\">945</span><br><span class=\"line\">946</span><br><span class=\"line\">947</span><br><span class=\"line\">948</span><br><span class=\"line\">949</span><br><span class=\"line\">950</span><br><span class=\"line\">951</span><br><span class=\"line\">952</span><br><span class=\"line\">953</span><br><span class=\"line\">954</span><br><span class=\"line\">955</span><br><span class=\"line\">956</span><br><span class=\"line\">957</span><br><span class=\"line\">958</span><br><span class=\"line\">959</span><br><span class=\"line\">960</span><br><span class=\"line\">961</span><br><span class=\"line\">962</span><br><span class=\"line\">963</span><br><span class=\"line\">964</span><br><span class=\"line\">965</span><br><span class=\"line\">966</span><br><span class=\"line\">967</span><br><span class=\"line\">968</span><br><span class=\"line\">969</span><br><span class=\"line\">970</span><br><span class=\"line\">971</span><br><span class=\"line\">972</span><br><span class=\"line\">973</span><br><span class=\"line\">974</span><br><span class=\"line\">975</span><br><span class=\"line\">976</span><br><span class=\"line\">977</span><br><span class=\"line\">978</span><br><span class=\"line\">979</span><br><span class=\"line\">980</span><br><span class=\"line\">981</span><br><span class=\"line\">982</span><br><span class=\"line\">983</span><br><span class=\"line\">984</span><br><span class=\"line\">985</span><br><span class=\"line\">986</span><br><span class=\"line\">987</span><br><span class=\"line\">988</span><br><span class=\"line\">989</span><br><span class=\"line\">990</span><br><span class=\"line\">991</span><br><span class=\"line\">992</span><br><span class=\"line\">993</span><br><span class=\"line\">994</span><br><span class=\"line\">995</span><br><span class=\"line\">996</span><br><span class=\"line\">997</span><br><span class=\"line\">998</span><br><span class=\"line\">999</span><br><span class=\"line\">1000</span><br><span class=\"line\">1001</span><br><span class=\"line\">1002</span><br><span class=\"line\">1003</span><br><span class=\"line\">1004</span><br><span class=\"line\">1005</span><br><span class=\"line\">1006</span><br><span class=\"line\">1007</span><br><span class=\"line\">1008</span><br><span class=\"line\">1009</span><br><span class=\"line\">1010</span><br><span class=\"line\">1011</span><br><span class=\"line\">1012</span><br><span class=\"line\">1013</span><br><span class=\"line\">1014</span><br><span class=\"line\">1015</span><br><span class=\"line\">1016</span><br><span class=\"line\">1017</span><br><span class=\"line\">1018</span><br><span class=\"line\">1019</span><br><span class=\"line\">1020</span><br><span class=\"line\">1021</span><br><span class=\"line\">1022</span><br><span class=\"line\">1023</span><br><span class=\"line\">1024</span><br><span class=\"line\">1025</span><br><span class=\"line\">1026</span><br><span class=\"line\">1027</span><br><span class=\"line\">1028</span><br><span class=\"line\">1029</span><br><span class=\"line\">1030</span><br><span class=\"line\">1031</span><br><span class=\"line\">1032</span><br><span class=\"line\">1033</span><br><span class=\"line\">1034</span><br><span class=\"line\">1035</span><br><span class=\"line\">1036</span><br><span class=\"line\">1037</span><br><span class=\"line\">1038</span><br><span class=\"line\">1039</span><br><span class=\"line\">1040</span><br><span class=\"line\">1041</span><br><span class=\"line\">1042</span><br><span class=\"line\">1043</span><br><span class=\"line\">1044</span><br><span class=\"line\">1045</span><br><span class=\"line\">1046</span><br><span class=\"line\">1047</span><br><span class=\"line\">1048</span><br><span class=\"line\">1049</span><br><span class=\"line\">1050</span><br><span class=\"line\">1051</span><br><span class=\"line\">1052</span><br><span class=\"line\">1053</span><br><span class=\"line\">1054</span><br><span class=\"line\">1055</span><br><span class=\"line\">1056</span><br><span class=\"line\">1057</span><br><span class=\"line\">1058</span><br><span class=\"line\">1059</span><br><span class=\"line\">1060</span><br><span class=\"line\">1061</span><br><span class=\"line\">1062</span><br><span class=\"line\">1063</span><br><span class=\"line\">1064</span><br><span class=\"line\">1065</span><br><span class=\"line\">1066</span><br><span class=\"line\">1067</span><br><span class=\"line\">1068</span><br><span class=\"line\">1069</span><br><span class=\"line\">1070</span><br><span class=\"line\">1071</span><br><span class=\"line\">1072</span><br><span class=\"line\">1073</span><br><span class=\"line\">1074</span><br><span class=\"line\">1075</span><br><span class=\"line\">1076</span><br><span class=\"line\">1077</span><br><span class=\"line\">1078</span><br><span class=\"line\">1079</span><br><span class=\"line\">1080</span><br><span class=\"line\">1081</span><br><span class=\"line\">1082</span><br><span class=\"line\">1083</span><br><span class=\"line\">1084</span><br><span class=\"line\">1085</span><br><span class=\"line\">1086</span><br><span class=\"line\">1087</span><br><span class=\"line\">1088</span><br><span class=\"line\">1089</span><br><span class=\"line\">1090</span><br><span class=\"line\">1091</span><br><span class=\"line\">1092</span><br><span class=\"line\">1093</span><br><span class=\"line\">1094</span><br><span class=\"line\">1095</span><br><span class=\"line\">1096</span><br><span class=\"line\">1097</span><br><span class=\"line\">1098</span><br><span class=\"line\">1099</span><br><span class=\"line\">1100</span><br><span class=\"line\">1101</span><br><span class=\"line\">1102</span><br><span class=\"line\">1103</span><br><span class=\"line\">1104</span><br><span class=\"line\">1105</span><br><span class=\"line\">1106</span><br><span class=\"line\">1107</span><br><span class=\"line\">1108</span><br><span class=\"line\">1109</span><br><span class=\"line\">1110</span><br><span class=\"line\">1111</span><br><span class=\"line\">1112</span><br><span class=\"line\">1113</span><br><span class=\"line\">1114</span><br><span class=\"line\">1115</span><br><span class=\"line\">1116</span><br><span class=\"line\">1117</span><br><span class=\"line\">1118</span><br><span class=\"line\">1119</span><br><span class=\"line\">1120</span><br><span class=\"line\">1121</span><br><span class=\"line\">1122</span><br><span class=\"line\">1123</span><br><span class=\"line\">1124</span><br><span class=\"line\">1125</span><br><span class=\"line\">1126</span><br><span class=\"line\">1127</span><br><span class=\"line\">1128</span><br><span class=\"line\">1129</span><br><span class=\"line\">1130</span><br><span class=\"line\">1131</span><br><span class=\"line\">1132</span><br><span class=\"line\">1133</span><br><span class=\"line\">1134</span><br><span class=\"line\">1135</span><br><span class=\"line\">1136</span><br><span class=\"line\">1137</span><br><span class=\"line\">1138</span><br><span class=\"line\">1139</span><br><span class=\"line\">1140</span><br><span class=\"line\">1141</span><br><span class=\"line\">1142</span><br><span class=\"line\">1143</span><br><span class=\"line\">1144</span><br><span class=\"line\">1145</span><br><span class=\"line\">1146</span><br><span class=\"line\">1147</span><br><span class=\"line\">1148</span><br><span class=\"line\">1149</span><br><span class=\"line\">1150</span><br><span class=\"line\">1151</span><br><span class=\"line\">1152</span><br><span class=\"line\">1153</span><br><span class=\"line\">1154</span><br><span class=\"line\">1155</span><br><span class=\"line\">1156</span><br><span class=\"line\">1157</span><br><span class=\"line\">1158</span><br><span class=\"line\">1159</span><br><span class=\"line\">1160</span><br><span class=\"line\">1161</span><br><span class=\"line\">1162</span><br><span class=\"line\">1163</span><br><span class=\"line\">1164</span><br><span class=\"line\">1165</span><br><span class=\"line\">1166</span><br><span class=\"line\">1167</span><br><span class=\"line\">1168</span><br><span class=\"line\">1169</span><br><span class=\"line\">1170</span><br><span class=\"line\">1171</span><br><span class=\"line\">1172</span><br><span class=\"line\">1173</span><br><span class=\"line\">1174</span><br><span class=\"line\">1175</span><br><span class=\"line\">1176</span><br><span class=\"line\">1177</span><br><span class=\"line\">1178</span><br><span class=\"line\">1179</span><br><span class=\"line\">1180</span><br><span class=\"line\">1181</span><br><span class=\"line\">1182</span><br><span class=\"line\">1183</span><br><span class=\"line\">1184</span><br><span class=\"line\">1185</span><br><span class=\"line\">1186</span><br><span class=\"line\">1187</span><br><span class=\"line\">1188</span><br><span class=\"line\">1189</span><br><span class=\"line\">1190</span><br><span class=\"line\">1191</span><br><span class=\"line\">1192</span><br><span class=\"line\">1193</span><br><span class=\"line\">1194</span><br><span class=\"line\">1195</span><br><span class=\"line\">1196</span><br><span class=\"line\">1197</span><br><span class=\"line\">1198</span><br><span class=\"line\">1199</span><br><span class=\"line\">1200</span><br><span class=\"line\">1201</span><br><span class=\"line\">1202</span><br><span class=\"line\">1203</span><br><span class=\"line\">1204</span><br><span class=\"line\">1205</span><br><span class=\"line\">1206</span><br><span class=\"line\">1207</span><br><span class=\"line\">1208</span><br><span class=\"line\">1209</span><br><span class=\"line\">1210</span><br><span class=\"line\">1211</span><br><span class=\"line\">1212</span><br><span class=\"line\">1213</span><br><span class=\"line\">1214</span><br><span class=\"line\">1215</span><br><span class=\"line\">1216</span><br><span class=\"line\">1217</span><br><span class=\"line\">1218</span><br><span class=\"line\">1219</span><br><span class=\"line\">1220</span><br><span class=\"line\">1221</span><br><span class=\"line\">1222</span><br><span class=\"line\">1223</span><br><span class=\"line\">1224</span><br><span class=\"line\">1225</span><br><span class=\"line\">1226</span><br><span class=\"line\">1227</span><br><span class=\"line\">1228</span><br><span class=\"line\">1229</span><br><span class=\"line\">1230</span><br><span class=\"line\">1231</span><br><span class=\"line\">1232</span><br><span class=\"line\">1233</span><br><span class=\"line\">1234</span><br><span class=\"line\">1235</span><br><span class=\"line\">1236</span><br><span class=\"line\">1237</span><br><span class=\"line\">1238</span><br><span class=\"line\">1239</span><br><span class=\"line\">1240</span><br><span class=\"line\">1241</span><br><span class=\"line\">1242</span><br><span class=\"line\">1243</span><br><span class=\"line\">1244</span><br><span class=\"line\">1245</span><br><span class=\"line\">1246</span><br><span class=\"line\">1247</span><br><span class=\"line\">1248</span><br><span class=\"line\">1249</span><br><span class=\"line\">1250</span><br><span class=\"line\">1251</span><br><span class=\"line\">1252</span><br><span class=\"line\">1253</span><br><span class=\"line\">1254</span><br><span class=\"line\">1255</span><br><span class=\"line\">1256</span><br><span class=\"line\">1257</span><br><span class=\"line\">1258</span><br><span class=\"line\">1259</span><br><span class=\"line\">1260</span><br><span class=\"line\">1261</span><br><span class=\"line\">1262</span><br><span class=\"line\">1263</span><br><span class=\"line\">1264</span><br><span class=\"line\">1265</span><br><span class=\"line\">1266</span><br><span class=\"line\">1267</span><br><span class=\"line\">1268</span><br><span class=\"line\">1269</span><br><span class=\"line\">1270</span><br><span class=\"line\">1271</span><br><span class=\"line\">1272</span><br><span class=\"line\">1273</span><br><span class=\"line\">1274</span><br><span class=\"line\">1275</span><br><span class=\"line\">1276</span><br><span class=\"line\">1277</span><br><span class=\"line\">1278</span><br><span class=\"line\">1279</span><br><span class=\"line\">1280</span><br><span class=\"line\">1281</span><br><span class=\"line\">1282</span><br><span class=\"line\">1283</span><br><span class=\"line\">1284</span><br><span class=\"line\">1285</span><br><span class=\"line\">1286</span><br><span class=\"line\">1287</span><br><span class=\"line\">1288</span><br><span class=\"line\">1289</span><br><span class=\"line\">1290</span><br><span class=\"line\">1291</span><br><span class=\"line\">1292</span><br><span class=\"line\">1293</span><br><span class=\"line\">1294</span><br><span class=\"line\">1295</span><br><span class=\"line\">1296</span><br><span class=\"line\">1297</span><br><span class=\"line\">1298</span><br><span class=\"line\">1299</span><br><span class=\"line\">1300</span><br><span class=\"line\">1301</span><br><span class=\"line\">1302</span><br><span class=\"line\">1303</span><br><span class=\"line\">1304</span><br><span class=\"line\">1305</span><br><span class=\"line\">1306</span><br><span class=\"line\">1307</span><br><span class=\"line\">1308</span><br><span class=\"line\">1309</span><br><span class=\"line\">1310</span><br><span class=\"line\">1311</span><br><span class=\"line\">1312</span><br><span class=\"line\">1313</span><br><span class=\"line\">1314</span><br><span class=\"line\">1315</span><br><span class=\"line\">1316</span><br><span class=\"line\">1317</span><br><span class=\"line\">1318</span><br><span class=\"line\">1319</span><br><span class=\"line\">1320</span><br><span class=\"line\">1321</span><br><span class=\"line\">1322</span><br><span class=\"line\">1323</span><br><span class=\"line\">1324</span><br><span class=\"line\">1325</span><br><span class=\"line\">1326</span><br><span class=\"line\">1327</span><br><span class=\"line\">1328</span><br><span class=\"line\">1329</span><br><span class=\"line\">1330</span><br><span class=\"line\">1331</span><br><span class=\"line\">1332</span><br><span class=\"line\">1333</span><br><span class=\"line\">1334</span><br><span class=\"line\">1335</span><br><span class=\"line\">1336</span><br><span class=\"line\">1337</span><br><span class=\"line\">1338</span><br><span class=\"line\">1339</span><br><span class=\"line\">1340</span><br><span class=\"line\">1341</span><br><span class=\"line\">1342</span><br><span class=\"line\">1343</span><br><span class=\"line\">1344</span><br><span class=\"line\">1345</span><br><span class=\"line\">1346</span><br><span class=\"line\">1347</span><br><span class=\"line\">1348</span><br><span class=\"line\">1349</span><br><span class=\"line\">1350</span><br><span class=\"line\">1351</span><br><span class=\"line\">1352</span><br><span class=\"line\">1353</span><br><span class=\"line\">1354</span><br><span class=\"line\">1355</span><br><span class=\"line\">1356</span><br><span class=\"line\">1357</span><br><span class=\"line\">1358</span><br><span class=\"line\">1359</span><br><span class=\"line\">1360</span><br><span class=\"line\">1361</span><br><span class=\"line\">1362</span><br><span class=\"line\">1363</span><br><span class=\"line\">1364</span><br><span class=\"line\">1365</span><br><span class=\"line\">1366</span><br><span class=\"line\">1367</span><br><span class=\"line\">1368</span><br><span class=\"line\">1369</span><br><span class=\"line\">1370</span><br><span class=\"line\">1371</span><br><span class=\"line\">1372</span><br><span class=\"line\">1373</span><br><span class=\"line\">1374</span><br><span class=\"line\">1375</span><br><span class=\"line\">1376</span><br><span class=\"line\">1377</span><br><span class=\"line\">1378</span><br><span class=\"line\">1379</span><br><span class=\"line\">1380</span><br><span class=\"line\">1381</span><br><span class=\"line\">1382</span><br><span class=\"line\">1383</span><br><span class=\"line\">1384</span><br><span class=\"line\">1385</span><br><span class=\"line\">1386</span><br><span class=\"line\">1387</span><br><span class=\"line\">1388</span><br><span class=\"line\">1389</span><br><span class=\"line\">1390</span><br><span class=\"line\">1391</span><br><span class=\"line\">1392</span><br><span class=\"line\">1393</span><br><span class=\"line\">1394</span><br><span class=\"line\">1395</span><br><span class=\"line\">1396</span><br><span class=\"line\">1397</span><br><span class=\"line\">1398</span><br><span class=\"line\">1399</span><br><span class=\"line\">1400</span><br><span class=\"line\">1401</span><br><span class=\"line\">1402</span><br><span class=\"line\">1403</span><br><span class=\"line\">1404</span><br><span class=\"line\">1405</span><br><span class=\"line\">1406</span><br><span class=\"line\">1407</span><br><span class=\"line\">1408</span><br><span class=\"line\">1409</span><br><span class=\"line\">1410</span><br><span class=\"line\">1411</span><br><span class=\"line\">1412</span><br><span class=\"line\">1413</span><br><span class=\"line\">1414</span><br><span class=\"line\">1415</span><br><span class=\"line\">1416</span><br><span class=\"line\">1417</span><br><span class=\"line\">1418</span><br><span class=\"line\">1419</span><br><span class=\"line\">1420</span><br><span class=\"line\">1421</span><br><span class=\"line\">1422</span><br><span class=\"line\">1423</span><br><span class=\"line\">1424</span><br><span class=\"line\">1425</span><br><span class=\"line\">1426</span><br><span class=\"line\">1427</span><br><span class=\"line\">1428</span><br><span class=\"line\">1429</span><br><span class=\"line\">1430</span><br><span class=\"line\">1431</span><br><span class=\"line\">1432</span><br><span class=\"line\">1433</span><br><span class=\"line\">1434</span><br><span class=\"line\">1435</span><br><span class=\"line\">1436</span><br><span class=\"line\">1437</span><br><span class=\"line\">1438</span><br><span class=\"line\">1439</span><br><span class=\"line\">1440</span><br><span class=\"line\">1441</span><br><span class=\"line\">1442</span><br><span class=\"line\">1443</span><br><span class=\"line\">1444</span><br><span class=\"line\">1445</span><br><span class=\"line\">1446</span><br><span class=\"line\">1447</span><br><span class=\"line\">1448</span><br><span class=\"line\">1449</span><br><span class=\"line\">1450</span><br><span class=\"line\">1451</span><br><span class=\"line\">1452</span><br><span class=\"line\">1453</span><br><span class=\"line\">1454</span><br><span class=\"line\">1455</span><br><span class=\"line\">1456</span><br><span class=\"line\">1457</span><br><span class=\"line\">1458</span><br><span class=\"line\">1459</span><br><span class=\"line\">1460</span><br><span class=\"line\">1461</span><br><span class=\"line\">1462</span><br><span class=\"line\">1463</span><br><span class=\"line\">1464</span><br><span class=\"line\">1465</span><br><span class=\"line\">1466</span><br><span class=\"line\">1467</span><br><span class=\"line\">1468</span><br><span class=\"line\">1469</span><br><span class=\"line\">1470</span><br><span class=\"line\">1471</span><br><span class=\"line\">1472</span><br><span class=\"line\">1473</span><br><span class=\"line\">1474</span><br><span class=\"line\">1475</span><br><span class=\"line\">1476</span><br><span class=\"line\">1477</span><br><span class=\"line\">1478</span><br><span class=\"line\">1479</span><br><span class=\"line\">1480</span><br><span class=\"line\">1481</span><br><span class=\"line\">1482</span><br><span class=\"line\">1483</span><br><span class=\"line\">1484</span><br><span class=\"line\">1485</span><br><span class=\"line\">1486</span><br><span class=\"line\">1487</span><br><span class=\"line\">1488</span><br><span class=\"line\">1489</span><br><span class=\"line\">1490</span><br><span class=\"line\">1491</span><br><span class=\"line\">1492</span><br><span class=\"line\">1493</span><br><span class=\"line\">1494</span><br><span class=\"line\">1495</span><br><span class=\"line\">1496</span><br><span class=\"line\">1497</span><br><span class=\"line\">1498</span><br><span class=\"line\">1499</span><br><span class=\"line\">1500</span><br><span class=\"line\">1501</span><br><span class=\"line\">1502</span><br><span class=\"line\">1503</span><br><span class=\"line\">1504</span><br><span class=\"line\">1505</span><br><span class=\"line\">1506</span><br><span class=\"line\">1507</span><br><span class=\"line\">1508</span><br><span class=\"line\">1509</span><br><span class=\"line\">1510</span><br><span class=\"line\">1511</span><br><span class=\"line\">1512</span><br><span class=\"line\">1513</span><br><span class=\"line\">1514</span><br><span class=\"line\">1515</span><br><span class=\"line\">1516</span><br><span class=\"line\">1517</span><br><span class=\"line\">1518</span><br><span class=\"line\">1519</span><br><span class=\"line\">1520</span><br><span class=\"line\">1521</span><br><span class=\"line\">1522</span><br><span class=\"line\">1523</span><br><span class=\"line\">1524</span><br><span class=\"line\">1525</span><br><span class=\"line\">1526</span><br><span class=\"line\">1527</span><br><span class=\"line\">1528</span><br><span class=\"line\">1529</span><br><span class=\"line\">1530</span><br><span class=\"line\">1531</span><br><span class=\"line\">1532</span><br><span class=\"line\">1533</span><br><span class=\"line\">1534</span><br><span class=\"line\">1535</span><br><span class=\"line\">1536</span><br><span class=\"line\">1537</span><br><span class=\"line\">1538</span><br><span class=\"line\">1539</span><br><span class=\"line\">1540</span><br><span class=\"line\">1541</span><br><span class=\"line\">1542</span><br><span class=\"line\">1543</span><br><span class=\"line\">1544</span><br><span class=\"line\">1545</span><br><span class=\"line\">1546</span><br><span class=\"line\">1547</span><br><span class=\"line\">1548</span><br><span class=\"line\">1549</span><br><span class=\"line\">1550</span><br><span class=\"line\">1551</span><br><span class=\"line\">1552</span><br><span class=\"line\">1553</span><br><span class=\"line\">1554</span><br><span class=\"line\">1555</span><br><span class=\"line\">1556</span><br><span class=\"line\">1557</span><br><span class=\"line\">1558</span><br><span class=\"line\">1559</span><br><span class=\"line\">1560</span><br><span class=\"line\">1561</span><br><span class=\"line\">1562</span><br><span class=\"line\">1563</span><br><span class=\"line\">1564</span><br><span class=\"line\">1565</span><br><span class=\"line\">1566</span><br><span class=\"line\">1567</span><br><span class=\"line\">1568</span><br><span class=\"line\">1569</span><br><span class=\"line\">1570</span><br><span class=\"line\">1571</span><br><span class=\"line\">1572</span><br><span class=\"line\">1573</span><br><span class=\"line\">1574</span><br><span class=\"line\">1575</span><br><span class=\"line\">1576</span><br><span class=\"line\">1577</span><br><span class=\"line\">1578</span><br><span class=\"line\">1579</span><br><span class=\"line\">1580</span><br><span class=\"line\">1581</span><br><span class=\"line\">1582</span><br><span class=\"line\">1583</span><br><span class=\"line\">1584</span><br><span class=\"line\">1585</span><br><span class=\"line\">1586</span><br><span class=\"line\">1587</span><br><span class=\"line\">1588</span><br><span class=\"line\">1589</span><br><span class=\"line\">1590</span><br><span class=\"line\">1591</span><br><span class=\"line\">1592</span><br><span class=\"line\">1593</span><br><span class=\"line\">1594</span><br><span class=\"line\">1595</span><br><span class=\"line\">1596</span><br><span class=\"line\">1597</span><br><span class=\"line\">1598</span><br><span class=\"line\">1599</span><br><span class=\"line\">1600</span><br><span class=\"line\">1601</span><br><span class=\"line\">1602</span><br><span class=\"line\">1603</span><br><span class=\"line\">1604</span><br><span class=\"line\">1605</span><br><span class=\"line\">1606</span><br><span class=\"line\">1607</span><br><span class=\"line\">1608</span><br><span class=\"line\">1609</span><br><span class=\"line\">1610</span><br><span class=\"line\">1611</span><br><span class=\"line\">1612</span><br><span class=\"line\">1613</span><br><span class=\"line\">1614</span><br><span class=\"line\">1615</span><br><span class=\"line\">1616</span><br><span class=\"line\">1617</span><br><span class=\"line\">1618</span><br><span class=\"line\">1619</span><br><span class=\"line\">1620</span><br><span class=\"line\">1621</span><br><span class=\"line\">1622</span><br><span class=\"line\">1623</span><br><span class=\"line\">1624</span><br><span class=\"line\">1625</span><br><span class=\"line\">1626</span><br><span class=\"line\">1627</span><br><span class=\"line\">1628</span><br><span class=\"line\">1629</span><br><span class=\"line\">1630</span><br><span class=\"line\">1631</span><br><span class=\"line\">1632</span><br><span class=\"line\">1633</span><br><span class=\"line\">1634</span><br><span class=\"line\">1635</span><br><span class=\"line\">1636</span><br><span class=\"line\">1637</span><br><span class=\"line\">1638</span><br><span class=\"line\">1639</span><br><span class=\"line\">1640</span><br><span class=\"line\">1641</span><br><span class=\"line\">1642</span><br><span class=\"line\">1643</span><br><span class=\"line\">1644</span><br><span class=\"line\">1645</span><br><span class=\"line\">1646</span><br><span class=\"line\">1647</span><br><span class=\"line\">1648</span><br><span class=\"line\">1649</span><br><span class=\"line\">1650</span><br><span class=\"line\">1651</span><br><span class=\"line\">1652</span><br><span class=\"line\">1653</span><br><span class=\"line\">1654</span><br><span class=\"line\">1655</span><br><span class=\"line\">1656</span><br><span class=\"line\">1657</span><br><span class=\"line\">1658</span><br><span class=\"line\">1659</span><br><span class=\"line\">1660</span><br><span class=\"line\">1661</span><br><span class=\"line\">1662</span><br><span class=\"line\">1663</span><br><span class=\"line\">1664</span><br><span class=\"line\">1665</span><br><span class=\"line\">1666</span><br><span class=\"line\">1667</span><br><span class=\"line\">1668</span><br><span class=\"line\">1669</span><br><span class=\"line\">1670</span><br><span class=\"line\">1671</span><br><span class=\"line\">1672</span><br><span class=\"line\">1673</span><br><span class=\"line\">1674</span><br><span class=\"line\">1675</span><br><span class=\"line\">1676</span><br><span class=\"line\">1677</span><br><span class=\"line\">1678</span><br><span class=\"line\">1679</span><br><span class=\"line\">1680</span><br><span class=\"line\">1681</span><br><span class=\"line\">1682</span><br><span class=\"line\">1683</span><br><span class=\"line\">1684</span><br><span class=\"line\">1685</span><br><span class=\"line\">1686</span><br><span class=\"line\">1687</span><br><span class=\"line\">1688</span><br><span class=\"line\">1689</span><br><span class=\"line\">1690</span><br><span class=\"line\">1691</span><br><span class=\"line\">1692</span><br><span class=\"line\">1693</span><br><span class=\"line\">1694</span><br><span class=\"line\">1695</span><br><span class=\"line\">1696</span><br><span class=\"line\">1697</span><br><span class=\"line\">1698</span><br><span class=\"line\">1699</span><br><span class=\"line\">1700</span><br><span class=\"line\">1701</span><br><span class=\"line\">1702</span><br><span class=\"line\">1703</span><br><span class=\"line\">1704</span><br><span class=\"line\">1705</span><br><span class=\"line\">1706</span><br><span class=\"line\">1707</span><br><span class=\"line\">1708</span><br><span class=\"line\">1709</span><br><span class=\"line\">1710</span><br><span class=\"line\">1711</span><br><span class=\"line\">1712</span><br><span class=\"line\">1713</span><br><span class=\"line\">1714</span><br><span class=\"line\">1715</span><br><span class=\"line\">1716</span><br><span class=\"line\">1717</span><br><span class=\"line\">1718</span><br><span class=\"line\">1719</span><br><span class=\"line\">1720</span><br><span class=\"line\">1721</span><br><span class=\"line\">1722</span><br><span class=\"line\">1723</span><br><span class=\"line\">1724</span><br><span class=\"line\">1725</span><br><span class=\"line\">1726</span><br><span class=\"line\">1727</span><br><span class=\"line\">1728</span><br><span class=\"line\">1729</span><br><span class=\"line\">1730</span><br><span class=\"line\">1731</span><br><span class=\"line\">1732</span><br><span class=\"line\">1733</span><br><span class=\"line\">1734</span><br><span class=\"line\">1735</span><br><span class=\"line\">1736</span><br><span class=\"line\">1737</span><br><span class=\"line\">1738</span><br><span class=\"line\">1739</span><br><span class=\"line\">1740</span><br><span class=\"line\">1741</span><br><span class=\"line\">1742</span><br><span class=\"line\">1743</span><br><span class=\"line\">1744</span><br><span class=\"line\">1745</span><br><span class=\"line\">1746</span><br><span class=\"line\">1747</span><br><span class=\"line\">1748</span><br><span class=\"line\">1749</span><br><span class=\"line\">1750</span><br><span class=\"line\">1751</span><br><span class=\"line\">1752</span><br><span class=\"line\">1753</span><br><span class=\"line\">1754</span><br><span class=\"line\">1755</span><br><span class=\"line\">1756</span><br><span class=\"line\">1757</span><br><span class=\"line\">1758</span><br><span class=\"line\">1759</span><br><span class=\"line\">1760</span><br><span class=\"line\">1761</span><br><span class=\"line\">1762</span><br><span class=\"line\">1763</span><br><span class=\"line\">1764</span><br><span class=\"line\">1765</span><br><span class=\"line\">1766</span><br><span class=\"line\">1767</span><br><span class=\"line\">1768</span><br><span class=\"line\">1769</span><br><span class=\"line\">1770</span><br><span class=\"line\">1771</span><br><span class=\"line\">1772</span><br><span class=\"line\">1773</span><br><span class=\"line\">1774</span><br><span class=\"line\">1775</span><br><span class=\"line\">1776</span><br><span class=\"line\">1777</span><br><span class=\"line\">1778</span><br><span class=\"line\">1779</span><br><span class=\"line\">1780</span><br><span class=\"line\">1781</span><br><span class=\"line\">1782</span><br><span class=\"line\">1783</span><br><span class=\"line\">1784</span><br><span class=\"line\">1785</span><br><span class=\"line\">1786</span><br><span class=\"line\">1787</span><br><span class=\"line\">1788</span><br><span class=\"line\">1789</span><br><span class=\"line\">1790</span><br><span class=\"line\">1791</span><br><span class=\"line\">1792</span><br><span class=\"line\">1793</span><br><span class=\"line\">1794</span><br><span class=\"line\">1795</span><br><span class=\"line\">1796</span><br><span class=\"line\">1797</span><br><span class=\"line\">1798</span><br><span class=\"line\">1799</span><br><span class=\"line\">1800</span><br><span class=\"line\">1801</span><br><span class=\"line\">1802</span><br><span class=\"line\">1803</span><br><span class=\"line\">1804</span><br><span class=\"line\">1805</span><br><span class=\"line\">1806</span><br><span class=\"line\">1807</span><br><span class=\"line\">1808</span><br><span class=\"line\">1809</span><br><span class=\"line\">1810</span><br><span class=\"line\">1811</span><br><span class=\"line\">1812</span><br><span class=\"line\">1813</span><br><span class=\"line\">1814</span><br><span class=\"line\">1815</span><br><span class=\"line\">1816</span><br><span class=\"line\">1817</span><br><span class=\"line\">1818</span><br><span class=\"line\">1819</span><br><span class=\"line\">1820</span><br><span class=\"line\">1821</span><br><span class=\"line\">1822</span><br><span class=\"line\">1823</span><br><span class=\"line\">1824</span><br><span class=\"line\">1825</span><br><span class=\"line\">1826</span><br><span class=\"line\">1827</span><br><span class=\"line\">1828</span><br><span class=\"line\">1829</span><br><span class=\"line\">1830</span><br><span class=\"line\">1831</span><br><span class=\"line\">1832</span><br><span class=\"line\">1833</span><br><span class=\"line\">1834</span><br><span class=\"line\">1835</span><br><span class=\"line\">1836</span><br><span class=\"line\">1837</span><br><span class=\"line\">1838</span><br><span class=\"line\">1839</span><br><span class=\"line\">1840</span><br><span class=\"line\">1841</span><br><span class=\"line\">1842</span><br><span class=\"line\">1843</span><br><span class=\"line\">1844</span><br><span class=\"line\">1845</span><br><span class=\"line\">1846</span><br><span class=\"line\">1847</span><br><span class=\"line\">1848</span><br><span class=\"line\">1849</span><br><span class=\"line\">1850</span><br><span class=\"line\">1851</span><br><span class=\"line\">1852</span><br><span class=\"line\">1853</span><br><span class=\"line\">1854</span><br><span class=\"line\">1855</span><br><span class=\"line\">1856</span><br><span class=\"line\">1857</span><br><span class=\"line\">1858</span><br><span class=\"line\">1859</span><br><span class=\"line\">1860</span><br><span class=\"line\">1861</span><br><span class=\"line\">1862</span><br><span class=\"line\">1863</span><br><span class=\"line\">1864</span><br><span class=\"line\">1865</span><br><span class=\"line\">1866</span><br><span class=\"line\">1867</span><br><span class=\"line\">1868</span><br><span class=\"line\">1869</span><br><span class=\"line\">1870</span><br><span class=\"line\">1871</span><br><span class=\"line\">1872</span><br><span class=\"line\">1873</span><br><span class=\"line\">1874</span><br><span class=\"line\">1875</span><br><span class=\"line\">1876</span><br><span class=\"line\">1877</span><br><span class=\"line\">1878</span><br><span class=\"line\">1879</span><br><span class=\"line\">1880</span><br><span class=\"line\">1881</span><br><span class=\"line\">1882</span><br><span class=\"line\">1883</span><br><span class=\"line\">1884</span><br><span class=\"line\">1885</span><br><span class=\"line\">1886</span><br><span class=\"line\">1887</span><br><span class=\"line\">1888</span><br><span class=\"line\">1889</span><br><span class=\"line\">1890</span><br><span class=\"line\">1891</span><br><span class=\"line\">1892</span><br><span class=\"line\">1893</span><br><span class=\"line\">1894</span><br><span class=\"line\">1895</span><br><span class=\"line\">1896</span><br><span class=\"line\">1897</span><br><span class=\"line\">1898</span><br><span class=\"line\">1899</span><br><span class=\"line\">1900</span><br><span class=\"line\">1901</span><br><span class=\"line\">1902</span><br><span class=\"line\">1903</span><br><span class=\"line\">1904</span><br><span class=\"line\">1905</span><br><span class=\"line\">1906</span><br><span class=\"line\">1907</span><br><span class=\"line\">1908</span><br><span class=\"line\">1909</span><br><span class=\"line\">1910</span><br><span class=\"line\">1911</span><br><span class=\"line\">1912</span><br><span class=\"line\">1913</span><br><span class=\"line\">1914</span><br><span class=\"line\">1915</span><br><span class=\"line\">1916</span><br><span class=\"line\">1917</span><br><span class=\"line\">1918</span><br><span class=\"line\">1919</span><br><span class=\"line\">1920</span><br><span class=\"line\">1921</span><br><span class=\"line\">1922</span><br><span class=\"line\">1923</span><br><span class=\"line\">1924</span><br><span class=\"line\">1925</span><br><span class=\"line\">1926</span><br><span class=\"line\">1927</span><br><span class=\"line\">1928</span><br><span class=\"line\">1929</span><br><span class=\"line\">1930</span><br><span class=\"line\">1931</span><br><span class=\"line\">1932</span><br><span class=\"line\">1933</span><br><span class=\"line\">1934</span><br><span class=\"line\">1935</span><br><span class=\"line\">1936</span><br><span class=\"line\">1937</span><br><span class=\"line\">1938</span><br><span class=\"line\">1939</span><br><span class=\"line\">1940</span><br><span class=\"line\">1941</span><br><span class=\"line\">1942</span><br><span class=\"line\">1943</span><br><span class=\"line\">1944</span><br><span class=\"line\">1945</span><br><span class=\"line\">1946</span><br><span class=\"line\">1947</span><br><span class=\"line\">1948</span><br><span class=\"line\">1949</span><br><span class=\"line\">1950</span><br><span class=\"line\">1951</span><br><span class=\"line\">1952</span><br><span class=\"line\">1953</span><br><span class=\"line\">1954</span><br><span class=\"line\">1955</span><br><span class=\"line\">1956</span><br><span class=\"line\">1957</span><br><span class=\"line\">1958</span><br><span class=\"line\">1959</span><br><span class=\"line\">1960</span><br><span class=\"line\">1961</span><br><span class=\"line\">1962</span><br><span class=\"line\">1963</span><br><span class=\"line\">1964</span><br><span class=\"line\">1965</span><br><span class=\"line\">1966</span><br><span class=\"line\">1967</span><br><span class=\"line\">1968</span><br><span class=\"line\">1969</span><br><span class=\"line\">1970</span><br><span class=\"line\">1971</span><br><span class=\"line\">1972</span><br><span class=\"line\">1973</span><br><span class=\"line\">1974</span><br><span class=\"line\">1975</span><br><span class=\"line\">1976</span><br><span class=\"line\">1977</span><br><span class=\"line\">1978</span><br><span class=\"line\">1979</span><br><span class=\"line\">1980</span><br><span class=\"line\">1981</span><br><span class=\"line\">1982</span><br><span class=\"line\">1983</span><br><span class=\"line\">1984</span><br><span class=\"line\">1985</span><br><span class=\"line\">1986</span><br><span class=\"line\">1987</span><br><span class=\"line\">1988</span><br><span class=\"line\">1989</span><br><span class=\"line\">1990</span><br><span class=\"line\">1991</span><br><span class=\"line\">1992</span><br><span class=\"line\">1993</span><br><span class=\"line\">1994</span><br><span class=\"line\">1995</span><br><span class=\"line\">1996</span><br><span class=\"line\">1997</span><br><span class=\"line\">1998</span><br><span class=\"line\">1999</span><br><span class=\"line\">2000</span><br><span class=\"line\">2001</span><br><span class=\"line\">2002</span><br><span class=\"line\">2003</span><br><span class=\"line\">2004</span><br><span class=\"line\">2005</span><br><span class=\"line\">2006</span><br><span class=\"line\">2007</span><br><span class=\"line\">2008</span><br><span class=\"line\">2009</span><br><span class=\"line\">2010</span><br><span class=\"line\">2011</span><br><span class=\"line\">2012</span><br><span class=\"line\">2013</span><br><span class=\"line\">2014</span><br><span class=\"line\">2015</span><br><span class=\"line\">2016</span><br><span class=\"line\">2017</span><br><span class=\"line\">2018</span><br><span class=\"line\">2019</span><br><span class=\"line\">2020</span><br><span class=\"line\">2021</span><br><span class=\"line\">2022</span><br><span class=\"line\">2023</span><br><span class=\"line\">2024</span><br><span class=\"line\">2025</span><br><span class=\"line\">2026</span><br><span class=\"line\">2027</span><br><span class=\"line\">2028</span><br><span class=\"line\">2029</span><br><span class=\"line\">2030</span><br><span class=\"line\">2031</span><br><span class=\"line\">2032</span><br><span class=\"line\">2033</span><br><span class=\"line\">2034</span><br><span class=\"line\">2035</span><br><span class=\"line\">2036</span><br><span class=\"line\">2037</span><br><span class=\"line\">2038</span><br><span class=\"line\">2039</span><br><span class=\"line\">2040</span><br><span class=\"line\">2041</span><br><span class=\"line\">2042</span><br><span class=\"line\">2043</span><br><span class=\"line\">2044</span><br><span class=\"line\">2045</span><br><span class=\"line\">2046</span><br><span class=\"line\">2047</span><br><span class=\"line\">2048</span><br><span class=\"line\">2049</span><br><span class=\"line\">2050</span><br><span class=\"line\">2051</span><br><span class=\"line\">2052</span><br><span class=\"line\">2053</span><br><span class=\"line\">2054</span><br><span class=\"line\">2055</span><br><span class=\"line\">2056</span><br><span class=\"line\">2057</span><br><span class=\"line\">2058</span><br><span class=\"line\">2059</span><br><span class=\"line\">2060</span><br><span class=\"line\">2061</span><br><span class=\"line\">2062</span><br><span class=\"line\">2063</span><br><span class=\"line\">2064</span><br><span class=\"line\">2065</span><br><span class=\"line\">2066</span><br><span class=\"line\">2067</span><br><span class=\"line\">2068</span><br><span class=\"line\">2069</span><br><span class=\"line\">2070</span><br><span class=\"line\">2071</span><br><span class=\"line\">2072</span><br><span class=\"line\">2073</span><br><span class=\"line\">2074</span><br><span class=\"line\">2075</span><br><span class=\"line\">2076</span><br><span class=\"line\">2077</span><br><span class=\"line\">2078</span><br><span class=\"line\">2079</span><br><span class=\"line\">2080</span><br><span class=\"line\">2081</span><br><span class=\"line\">2082</span><br><span class=\"line\">2083</span><br><span class=\"line\">2084</span><br><span class=\"line\">2085</span><br><span class=\"line\">2086</span><br><span class=\"line\">2087</span><br><span class=\"line\">2088</span><br><span class=\"line\">2089</span><br><span class=\"line\">2090</span><br><span class=\"line\">2091</span><br><span class=\"line\">2092</span><br><span class=\"line\">2093</span><br><span class=\"line\">2094</span><br><span class=\"line\">2095</span><br><span class=\"line\">2096</span><br><span class=\"line\">2097</span><br><span class=\"line\">2098</span><br><span class=\"line\">2099</span><br><span class=\"line\">2100</span><br><span class=\"line\">2101</span><br><span class=\"line\">2102</span><br><span class=\"line\">2103</span><br><span class=\"line\">2104</span><br><span class=\"line\">2105</span><br><span class=\"line\">2106</span><br><span class=\"line\">2107</span><br><span class=\"line\">2108</span><br><span class=\"line\">2109</span><br><span class=\"line\">2110</span><br><span class=\"line\">2111</span><br><span class=\"line\">2112</span><br><span class=\"line\">2113</span><br><span class=\"line\">2114</span><br><span class=\"line\">2115</span><br><span class=\"line\">2116</span><br><span class=\"line\">2117</span><br><span class=\"line\">2118</span><br><span class=\"line\">2119</span><br><span class=\"line\">2120</span><br><span class=\"line\">2121</span><br><span class=\"line\">2122</span><br><span class=\"line\">2123</span><br><span class=\"line\">2124</span><br><span class=\"line\">2125</span><br><span class=\"line\">2126</span><br><span class=\"line\">2127</span><br><span class=\"line\">2128</span><br><span class=\"line\">2129</span><br><span class=\"line\">2130</span><br><span class=\"line\">2131</span><br><span class=\"line\">2132</span><br><span class=\"line\">2133</span><br><span class=\"line\">2134</span><br><span class=\"line\">2135</span><br><span class=\"line\">2136</span><br><span class=\"line\">2137</span><br><span class=\"line\">2138</span><br><span class=\"line\">2139</span><br><span class=\"line\">2140</span><br><span class=\"line\">2141</span><br><span class=\"line\">2142</span><br><span class=\"line\">2143</span><br><span class=\"line\">2144</span><br><span class=\"line\">2145</span><br><span class=\"line\">2146</span><br><span class=\"line\">2147</span><br><span class=\"line\">2148</span><br><span class=\"line\">2149</span><br><span class=\"line\">2150</span><br><span class=\"line\">2151</span><br><span class=\"line\">2152</span><br><span class=\"line\">2153</span><br><span class=\"line\">2154</span><br><span class=\"line\">2155</span><br><span class=\"line\">2156</span><br><span class=\"line\">2157</span><br><span class=\"line\">2158</span><br><span class=\"line\">2159</span><br><span class=\"line\">2160</span><br><span class=\"line\">2161</span><br><span class=\"line\">2162</span><br><span class=\"line\">2163</span><br><span class=\"line\">2164</span><br><span class=\"line\">2165</span><br><span class=\"line\">2166</span><br><span class=\"line\">2167</span><br><span class=\"line\">2168</span><br><span class=\"line\">2169</span><br><span class=\"line\">2170</span><br><span class=\"line\">2171</span><br><span class=\"line\">2172</span><br><span class=\"line\">2173</span><br><span class=\"line\">2174</span><br><span class=\"line\">2175</span><br><span class=\"line\">2176</span><br><span class=\"line\">2177</span><br><span class=\"line\">2178</span><br><span class=\"line\">2179</span><br><span class=\"line\">2180</span><br><span class=\"line\">2181</span><br><span class=\"line\">2182</span><br><span class=\"line\">2183</span><br><span class=\"line\">2184</span><br><span class=\"line\">2185</span><br><span class=\"line\">2186</span><br><span class=\"line\">2187</span><br><span class=\"line\">2188</span><br><span class=\"line\">2189</span><br><span class=\"line\">2190</span><br><span class=\"line\">2191</span><br><span class=\"line\">2192</span><br><span class=\"line\">2193</span><br><span class=\"line\">2194</span><br><span class=\"line\">2195</span><br><span class=\"line\">2196</span><br><span class=\"line\">2197</span><br><span class=\"line\">2198</span><br><span class=\"line\">2199</span><br><span class=\"line\">2200</span><br><span class=\"line\">2201</span><br><span class=\"line\">2202</span><br><span class=\"line\">2203</span><br><span class=\"line\">2204</span><br><span class=\"line\">2205</span><br><span class=\"line\">2206</span><br><span class=\"line\">2207</span><br><span class=\"line\">2208</span><br><span class=\"line\">2209</span><br><span class=\"line\">2210</span><br><span class=\"line\">2211</span><br><span class=\"line\">2212</span><br><span class=\"line\">2213</span><br><span class=\"line\">2214</span><br><span class=\"line\">2215</span><br><span class=\"line\">2216</span><br><span class=\"line\">2217</span><br><span class=\"line\">2218</span><br><span class=\"line\">2219</span><br><span class=\"line\">2220</span><br><span class=\"line\">2221</span><br><span class=\"line\">2222</span><br><span class=\"line\">2223</span><br><span class=\"line\">2224</span><br><span class=\"line\">2225</span><br><span class=\"line\">2226</span><br><span class=\"line\">2227</span><br><span class=\"line\">2228</span><br><span class=\"line\">2229</span><br><span class=\"line\">2230</span><br><span class=\"line\">2231</span><br><span class=\"line\">2232</span><br><span class=\"line\">2233</span><br><span class=\"line\">2234</span><br><span class=\"line\">2235</span><br><span class=\"line\">2236</span><br><span class=\"line\">2237</span><br><span class=\"line\">2238</span><br><span class=\"line\">2239</span><br><span class=\"line\">2240</span><br><span class=\"line\">2241</span><br><span class=\"line\">2242</span><br><span class=\"line\">2243</span><br><span class=\"line\">2244</span><br><span class=\"line\">2245</span><br><span class=\"line\">2246</span><br><span class=\"line\">2247</span><br><span class=\"line\">2248</span><br><span class=\"line\">2249</span><br><span class=\"line\">2250</span><br><span class=\"line\">2251</span><br><span class=\"line\">2252</span><br><span class=\"line\">2253</span><br><span class=\"line\">2254</span><br><span class=\"line\">2255</span><br><span class=\"line\">2256</span><br><span class=\"line\">2257</span><br><span class=\"line\">2258</span><br><span class=\"line\">2259</span><br><span class=\"line\">2260</span><br><span class=\"line\">2261</span><br><span class=\"line\">2262</span><br><span class=\"line\">2263</span><br><span class=\"line\">2264</span><br><span class=\"line\">2265</span><br><span class=\"line\">2266</span><br><span class=\"line\">2267</span><br><span class=\"line\">2268</span><br><span class=\"line\">2269</span><br><span class=\"line\">2270</span><br><span class=\"line\">2271</span><br><span class=\"line\">2272</span><br><span class=\"line\">2273</span><br><span class=\"line\">2274</span><br><span class=\"line\">2275</span><br><span class=\"line\">2276</span><br><span class=\"line\">2277</span><br><span class=\"line\">2278</span><br><span class=\"line\">2279</span><br><span class=\"line\">2280</span><br><span class=\"line\">2281</span><br><span class=\"line\">2282</span><br><span class=\"line\">2283</span><br><span class=\"line\">2284</span><br><span class=\"line\">2285</span><br><span class=\"line\">2286</span><br><span class=\"line\">2287</span><br><span class=\"line\">2288</span><br><span class=\"line\">2289</span><br><span class=\"line\">2290</span><br><span class=\"line\">2291</span><br><span class=\"line\">2292</span><br><span class=\"line\">2293</span><br><span class=\"line\">2294</span><br><span class=\"line\">2295</span><br><span class=\"line\">2296</span><br><span class=\"line\">2297</span><br><span class=\"line\">2298</span><br><span class=\"line\">2299</span><br><span class=\"line\">2300</span><br><span class=\"line\">2301</span><br><span class=\"line\">2302</span><br><span class=\"line\">2303</span><br><span class=\"line\">2304</span><br><span class=\"line\">2305</span><br><span class=\"line\">2306</span><br><span class=\"line\">2307</span><br><span class=\"line\">2308</span><br><span class=\"line\">2309</span><br><span class=\"line\">2310</span><br><span class=\"line\">2311</span><br><span class=\"line\">2312</span><br><span class=\"line\">2313</span><br><span class=\"line\">2314</span><br><span class=\"line\">2315</span><br><span class=\"line\">2316</span><br><span class=\"line\">2317</span><br><span class=\"line\">2318</span><br><span class=\"line\">2319</span><br><span class=\"line\">2320</span><br><span class=\"line\">2321</span><br><span class=\"line\">2322</span><br><span class=\"line\">2323</span><br><span class=\"line\">2324</span><br><span class=\"line\">2325</span><br><span class=\"line\">2326</span><br><span class=\"line\">2327</span><br><span class=\"line\">2328</span><br><span class=\"line\">2329</span><br><span class=\"line\">2330</span><br><span class=\"line\">2331</span><br><span class=\"line\">2332</span><br><span class=\"line\">2333</span><br><span class=\"line\">2334</span><br><span class=\"line\">2335</span><br><span class=\"line\">2336</span><br><span class=\"line\">2337</span><br><span class=\"line\">2338</span><br><span class=\"line\">2339</span><br><span class=\"line\">2340</span><br><span class=\"line\">2341</span><br><span class=\"line\">2342</span><br><span class=\"line\">2343</span><br><span class=\"line\">2344</span><br><span class=\"line\">2345</span><br><span class=\"line\">2346</span><br><span class=\"line\">2347</span><br><span class=\"line\">2348</span><br><span class=\"line\">2349</span><br><span class=\"line\">2350</span><br><span class=\"line\">2351</span><br><span class=\"line\">2352</span><br><span class=\"line\">2353</span><br><span class=\"line\">2354</span><br><span class=\"line\">2355</span><br><span class=\"line\">2356</span><br><span class=\"line\">2357</span><br><span class=\"line\">2358</span><br><span class=\"line\">2359</span><br><span class=\"line\">2360</span><br><span class=\"line\">2361</span><br><span class=\"line\">2362</span><br><span class=\"line\">2363</span><br><span class=\"line\">2364</span><br><span class=\"line\">2365</span><br><span class=\"line\">2366</span><br><span class=\"line\">2367</span><br><span class=\"line\">2368</span><br><span class=\"line\">2369</span><br><span class=\"line\">2370</span><br><span class=\"line\">2371</span><br><span class=\"line\">2372</span><br><span class=\"line\">2373</span><br><span class=\"line\">2374</span><br><span class=\"line\">2375</span><br><span class=\"line\">2376</span><br><span class=\"line\">2377</span><br><span class=\"line\">2378</span><br><span class=\"line\">2379</span><br><span class=\"line\">2380</span><br><span class=\"line\">2381</span><br><span class=\"line\">2382</span><br><span class=\"line\">2383</span><br><span class=\"line\">2384</span><br><span class=\"line\">2385</span><br><span class=\"line\">2386</span><br><span class=\"line\">2387</span><br><span class=\"line\">2388</span><br><span class=\"line\">2389</span><br><span class=\"line\">2390</span><br><span class=\"line\">2391</span><br><span class=\"line\">2392</span><br><span class=\"line\">2393</span><br><span class=\"line\">2394</span><br><span class=\"line\">2395</span><br><span class=\"line\">2396</span><br><span class=\"line\">2397</span><br><span class=\"line\">2398</span><br><span class=\"line\">2399</span><br><span class=\"line\">2400</span><br><span class=\"line\">2401</span><br><span class=\"line\">2402</span><br><span class=\"line\">2403</span><br><span class=\"line\">2404</span><br><span class=\"line\">2405</span><br><span class=\"line\">2406</span><br><span class=\"line\">2407</span><br><span class=\"line\">2408</span><br><span class=\"line\">2409</span><br><span class=\"line\">2410</span><br><span class=\"line\">2411</span><br><span class=\"line\">2412</span><br><span class=\"line\">2413</span><br><span class=\"line\">2414</span><br><span class=\"line\">2415</span><br><span class=\"line\">2416</span><br><span class=\"line\">2417</span><br><span class=\"line\">2418</span><br><span class=\"line\">2419</span><br><span class=\"line\">2420</span><br><span class=\"line\">2421</span><br><span class=\"line\">2422</span><br><span class=\"line\">2423</span><br><span class=\"line\">2424</span><br><span class=\"line\">2425</span><br><span class=\"line\">2426</span><br><span class=\"line\">2427</span><br><span class=\"line\">2428</span><br><span class=\"line\">2429</span><br><span class=\"line\">2430</span><br><span class=\"line\">2431</span><br><span class=\"line\">2432</span><br><span class=\"line\">2433</span><br><span class=\"line\">2434</span><br><span class=\"line\">2435</span><br><span class=\"line\">2436</span><br><span class=\"line\">2437</span><br><span class=\"line\">2438</span><br><span class=\"line\">2439</span><br><span class=\"line\">2440</span><br><span class=\"line\">2441</span><br><span class=\"line\">2442</span><br><span class=\"line\">2443</span><br><span class=\"line\">2444</span><br><span class=\"line\">2445</span><br><span class=\"line\">2446</span><br><span class=\"line\">2447</span><br><span class=\"line\">2448</span><br><span class=\"line\">2449</span><br><span class=\"line\">2450</span><br><span class=\"line\">2451</span><br><span class=\"line\">2452</span><br><span class=\"line\">2453</span><br><span class=\"line\">2454</span><br><span class=\"line\">2455</span><br><span class=\"line\">2456</span><br><span class=\"line\">2457</span><br><span class=\"line\">2458</span><br><span class=\"line\">2459</span><br><span class=\"line\">2460</span><br><span class=\"line\">2461</span><br><span class=\"line\">2462</span><br><span class=\"line\">2463</span><br><span class=\"line\">2464</span><br><span class=\"line\">2465</span><br><span class=\"line\">2466</span><br><span class=\"line\">2467</span><br><span class=\"line\">2468</span><br><span class=\"line\">2469</span><br><span class=\"line\">2470</span><br><span class=\"line\">2471</span><br><span class=\"line\">2472</span><br><span class=\"line\">2473</span><br><span class=\"line\">2474</span><br><span class=\"line\">2475</span><br><span class=\"line\">2476</span><br><span class=\"line\">2477</span><br><span class=\"line\">2478</span><br><span class=\"line\">2479</span><br><span class=\"line\">2480</span><br><span class=\"line\">2481</span><br><span class=\"line\">2482</span><br><span class=\"line\">2483</span><br><span class=\"line\">2484</span><br><span class=\"line\">2485</span><br><span class=\"line\">2486</span><br><span class=\"line\">2487</span><br><span class=\"line\">2488</span><br><span class=\"line\">2489</span><br><span class=\"line\">2490</span><br><span class=\"line\">2491</span><br><span class=\"line\">2492</span><br><span class=\"line\">2493</span><br><span class=\"line\">2494</span><br><span class=\"line\">2495</span><br><span class=\"line\">2496</span><br><span class=\"line\">2497</span><br><span class=\"line\">2498</span><br><span class=\"line\">2499</span><br><span class=\"line\">2500</span><br><span class=\"line\">2501</span><br><span class=\"line\">2502</span><br><span class=\"line\">2503</span><br><span class=\"line\">2504</span><br><span class=\"line\">2505</span><br><span class=\"line\">2506</span><br><span class=\"line\">2507</span><br><span class=\"line\">2508</span><br><span class=\"line\">2509</span><br><span class=\"line\">2510</span><br><span class=\"line\">2511</span><br><span class=\"line\">2512</span><br><span class=\"line\">2513</span><br><span class=\"line\">2514</span><br><span class=\"line\">2515</span><br><span class=\"line\">2516</span><br><span class=\"line\">2517</span><br><span class=\"line\">2518</span><br><span class=\"line\">2519</span><br><span class=\"line\">2520</span><br><span class=\"line\">2521</span><br><span class=\"line\">2522</span><br><span class=\"line\">2523</span><br><span class=\"line\">2524</span><br><span class=\"line\">2525</span><br><span class=\"line\">2526</span><br><span class=\"line\">2527</span><br><span class=\"line\">2528</span><br><span class=\"line\">2529</span><br><span class=\"line\">2530</span><br><span class=\"line\">2531</span><br><span class=\"line\">2532</span><br><span class=\"line\">2533</span><br><span class=\"line\">2534</span><br><span class=\"line\">2535</span><br><span class=\"line\">2536</span><br><span class=\"line\">2537</span><br><span class=\"line\">2538</span><br><span class=\"line\">2539</span><br><span class=\"line\">2540</span><br><span class=\"line\">2541</span><br><span class=\"line\">2542</span><br><span class=\"line\">2543</span><br><span class=\"line\">2544</span><br><span class=\"line\">2545</span><br><span class=\"line\">2546</span><br><span class=\"line\">2547</span><br><span class=\"line\">2548</span><br><span class=\"line\">2549</span><br><span class=\"line\">2550</span><br><span class=\"line\">2551</span><br><span class=\"line\">2552</span><br><span class=\"line\">2553</span><br><span class=\"line\">2554</span><br><span class=\"line\">2555</span><br><span class=\"line\">2556</span><br><span class=\"line\">2557</span><br><span class=\"line\">2558</span><br><span class=\"line\">2559</span><br><span class=\"line\">2560</span><br><span class=\"line\">2561</span><br><span class=\"line\">2562</span><br><span class=\"line\">2563</span><br><span class=\"line\">2564</span><br><span class=\"line\">2565</span><br><span class=\"line\">2566</span><br><span class=\"line\">2567</span><br><span class=\"line\">2568</span><br><span class=\"line\">2569</span><br><span class=\"line\">2570</span><br><span class=\"line\">2571</span><br><span class=\"line\">2572</span><br><span class=\"line\">2573</span><br><span class=\"line\">2574</span><br><span class=\"line\">2575</span><br><span class=\"line\">2576</span><br><span class=\"line\">2577</span><br><span class=\"line\">2578</span><br><span class=\"line\">2579</span><br><span class=\"line\">2580</span><br><span class=\"line\">2581</span><br><span class=\"line\">2582</span><br><span class=\"line\">2583</span><br><span class=\"line\">2584</span><br><span class=\"line\">2585</span><br><span class=\"line\">2586</span><br><span class=\"line\">2587</span><br><span class=\"line\">2588</span><br><span class=\"line\">2589</span><br><span class=\"line\">2590</span><br><span class=\"line\">2591</span><br><span class=\"line\">2592</span><br><span class=\"line\">2593</span><br><span class=\"line\">2594</span><br><span class=\"line\">2595</span><br><span class=\"line\">2596</span><br><span class=\"line\">2597</span><br><span class=\"line\">2598</span><br><span class=\"line\">2599</span><br><span class=\"line\">2600</span><br><span class=\"line\">2601</span><br><span class=\"line\">2602</span><br><span class=\"line\">2603</span><br><span class=\"line\">2604</span><br><span class=\"line\">2605</span><br><span class=\"line\">2606</span><br><span class=\"line\">2607</span><br><span class=\"line\">2608</span><br><span class=\"line\">2609</span><br><span class=\"line\">2610</span><br><span class=\"line\">2611</span><br><span class=\"line\">2612</span><br><span class=\"line\">2613</span><br><span class=\"line\">2614</span><br><span class=\"line\">2615</span><br><span class=\"line\">2616</span><br><span class=\"line\">2617</span><br><span class=\"line\">2618</span><br><span class=\"line\">2619</span><br><span class=\"line\">2620</span><br><span class=\"line\">2621</span><br><span class=\"line\">2622</span><br><span class=\"line\">2623</span><br><span class=\"line\">2624</span><br><span class=\"line\">2625</span><br><span class=\"line\">2626</span><br><span class=\"line\">2627</span><br><span class=\"line\">2628</span><br><span class=\"line\">2629</span><br><span class=\"line\">2630</span><br><span class=\"line\">2631</span><br><span class=\"line\">2632</span><br><span class=\"line\">2633</span><br><span class=\"line\">2634</span><br><span class=\"line\">2635</span><br><span class=\"line\">2636</span><br><span class=\"line\">2637</span><br><span class=\"line\">2638</span><br><span class=\"line\">2639</span><br><span class=\"line\">2640</span><br><span class=\"line\">2641</span><br><span class=\"line\">2642</span><br><span class=\"line\">2643</span><br><span class=\"line\">2644</span><br><span class=\"line\">2645</span><br><span class=\"line\">2646</span><br><span class=\"line\">2647</span><br><span class=\"line\">2648</span><br><span class=\"line\">2649</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t\t5 10s之后可以在终端1内看到test过期了</span><br><span class=\"line\">\t\t-------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    nfs&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 依赖rpc服务通信 portmap[centos5] 或 rpcbind[centos6]</span><br><span class=\"line\">        yum install nfs-utils portmap    # centos5安装</span><br><span class=\"line\">        yum install nfs-utils rpcbind    # centos6安装</span><br><span class=\"line\"></span><br><span class=\"line\">        vim /etc/exports                 # 配置文件</span><br><span class=\"line\">        # sync                           # 同步写入</span><br><span class=\"line\">        # async                          # 暂存并非直接写入</span><br><span class=\"line\">        # no_root_squash                 # 开放用户端使用root身份操作</span><br><span class=\"line\">        # root_squash                    # 使用者身份为root则被压缩成匿名使用,即nobody,相对安全</span><br><span class=\"line\">        # all_squash                     # 所有NFS的使用者身份都被压缩为匿名</span><br><span class=\"line\">        /data/images 10.10.10.0/24(rw,sync,no_root_squash)</span><br><span class=\"line\"></span><br><span class=\"line\">        service  portmap restart         # 重启centos5的nfs依赖的rpc服务</span><br><span class=\"line\">        service  rpcbind restart         # 重启centos6的nfs依赖的rpc服务</span><br><span class=\"line\">        service  nfs restart             # 重启nfs服务  确保依赖 portmap 或 rpcbind 服务已启动</span><br><span class=\"line\">        service  nfs reload              # 重载NFS服务配置文件</span><br><span class=\"line\">        showmount -e                     # 服务端查看自己共享的服务</span><br><span class=\"line\">        showmount -a                     # 显示已经与客户端连接上的目录信息</span><br><span class=\"line\">        showmount -e 10.10.10.3          # 列出服务端可供使用的NFS共享  客户端测试能否访问nfs服务</span><br><span class=\"line\">        mount -t nfs 10.10.10.3:/data/images/  /data/img   # 挂载nfs  如果延迟影响大加参数 noac</span><br><span class=\"line\"></span><br><span class=\"line\">        # 服务端的 portmap 或 rpcbind 被停止后，nfs仍然工作正常，但是umout财会提示： not found / mounted or server not reachable  重启服务器的portmap 或 rpcbind 也无济于事。 nfs也要跟着重启，否则nfs工作仍然是不正常的。</span><br><span class=\"line\">        # 同时已挂载会造成NFS客户端df卡住和挂载目录无法访问。请先用 mount 查看当前挂载情况，记录挂载信息，在强制卸载挂载目录，重新挂载</span><br><span class=\"line\">        umount -f /data/img/             # 强制卸载挂载目录  如还不可以  umount -l /data/img/</span><br><span class=\"line\"></span><br><span class=\"line\">        nfsstat -c                       # 客户机发送和拒绝的RPC和NFS调用数目的信息</span><br><span class=\"line\">        nfsstat -cn                      # 显示和打印与客户机NFS调用相关的信息</span><br><span class=\"line\">        nfsstat -r                       # 显示和打印客户机和服务器的与RPC调用相关的信息</span><br><span class=\"line\">        nfsstat –s                       # 显示关于服务器接收和拒绝的RPC和NFS调用数目的信息</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    hdfs&#123;</span><br><span class=\"line\">        hdfs --help                  # 所有参数</span><br><span class=\"line\"></span><br><span class=\"line\">        hdfs dfs -help               # 运行文件系统命令在Hadoop文件系统</span><br><span class=\"line\">        hdfs dfs -ls /logs           # 查看</span><br><span class=\"line\">        hdfs dfs -ls /user/          # 查看用户</span><br><span class=\"line\">        hdfs dfs -cat</span><br><span class=\"line\">        hdfs dfs -df</span><br><span class=\"line\">        hdfs dfs -du</span><br><span class=\"line\">        hdfs dfs -rm</span><br><span class=\"line\">        hdfs dfs -tail</span><br><span class=\"line\">        hdfs dfs –put localSrc dest  # 上传文件</span><br><span class=\"line\"></span><br><span class=\"line\">        hdfs dfsadmin -help          # hdfs集群节点管理</span><br><span class=\"line\">        hdfs dfsadmin -report        # 基本的文件系统统计信息</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">5 网络&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    rz                                                                    # 通过ssh上传小文件</span><br><span class=\"line\">    sz                                                                    # 通过ssh下载小文件</span><br><span class=\"line\">    ifconfig eth0 down                                                    # 禁用网卡</span><br><span class=\"line\">    ifconfig eth0 up                                                      # 启用网卡</span><br><span class=\"line\">    ifup eth0:0                                                           # 启用网卡</span><br><span class=\"line\">    mii-tool em1                                                          # 查看网线是否连接</span><br><span class=\"line\">    traceroute www.baidu.com                                              # 测试跳数</span><br><span class=\"line\">    vi /etc/resolv.conf                                                   # 设置DNS  nameserver IP 定义DNS服务器的IP地址</span><br><span class=\"line\">    nslookup www.moon.com                                                 # 解析域名IP</span><br><span class=\"line\">    dig -x www.baidu.com                                                  # 解析域名IP</span><br><span class=\"line\">    dig +trace -t A domainname                                            # 跟踪dns</span><br><span class=\"line\">    dig +short txt hacker.wp.dg.cx                                        # 通过 DNS 来读取 Wikipedia 的hacker词条</span><br><span class=\"line\">    host -t txt hacker.wp.dg.cx                                           # 通过 DNS 来读取 Wikipedia 的hacker词条</span><br><span class=\"line\">    lynx                                                                  # 文本上网</span><br><span class=\"line\">    wget -P path -O name url                                              # 下载  包名:wgetrc   -q 安静 -c 续传</span><br><span class=\"line\">    dhclient eth1                                                         # 自动获取IP</span><br><span class=\"line\">    mtr -r www.baidu.com                                                  # 测试网络链路节点响应时间 # trace ping 结合</span><br><span class=\"line\">    ipcalc -m &quot;$ip&quot; -p &quot;$num&quot;                                             # 根据IP和主机最大数计算掩码</span><br><span class=\"line\">    curl -I www.baidu.com                                                 # 查看网页http头</span><br><span class=\"line\">    curl -s www.baidu.com                                                 # 不显示进度</span><br><span class=\"line\">    queryperf -d list -s DNS_IP -l 2                                      # BIND自带DNS压力测试  [list 文件格式:www.turku.fi A]</span><br><span class=\"line\">    telnet ip port                                                        # 测试端口是否开放,有些服务可直接输入命令得到返回状态</span><br><span class=\"line\">    echo &quot;show &quot; |nc $ip $port                                            # 适用于telnet一类登录得到命令返回</span><br><span class=\"line\">    nc -l -p port                                                         # 监听指定端口</span><br><span class=\"line\">    nc -nv -z 10.10.10.11 1080 |grep succeeded                            # 检查主机端口是否开放</span><br><span class=\"line\">    curl -o /dev/null -s -m 10 --connect-timeout 10 -w %&#123;http_code&#125; $URL  # 检查页面状态</span><br><span class=\"line\">    curl -X POST -d &quot;user=xuesong&amp;pwd=123&quot; http://www.abc.cn/Result       # 提交POST请求</span><br><span class=\"line\">    curl -s http://20140507.ip138.com/ic.asp                              # 通过IP138取本机出口外网IP</span><br><span class=\"line\">    curl http://IP/ -H &quot;X-Forwarded-For: ip&quot; -H &quot;Host: www.ttlsa.com&quot;     # 连到指定IP的响应主机,HTTPserver只看 Host字段</span><br><span class=\"line\">    ifconfig eth0:0 192.168.1.221 netmask 255.255.255.0                   # 增加逻辑IP地址</span><br><span class=\"line\">    echo 1 &gt; /proc/sys/net/ipv4/icmp_echo_ignore_all                      # 禁ping</span><br><span class=\"line\">    net rpc shutdown -I IP_ADDRESS -U username%password                   # 远程关掉一台WINDOWS机器</span><br><span class=\"line\">    wget --random-wait -r -p -e robots=off -U Mozilla www.example.com     # 递归方式下载整个网站</span><br><span class=\"line\">    sshpass -p &quot;$pwd&quot; rsync -avzP /dir  user@$IP:/dir/                    # 指定密码避免交互同步目录</span><br><span class=\"line\">    rsync -avzP --delete /dir/ user@$IP:/dir/                             # 无差同步目录 可以快速清空大目录,末尾带/同步目录</span><br><span class=\"line\">    rsync -avzP -e &quot;ssh -p 22 -e -o StrictHostKeyChecking=no&quot; /dir user@$IP:/dir         # 指定ssh参数同步</span><br><span class=\"line\">    rsync -rvze &#x27;ssh -p 58022&#x27; ffmpeg@114.55.24.131:/opt/ffmpeg/bin/ /opt/ffmpeg/bin/</span><br><span class=\"line\">    抓包&#123;</span><br><span class=\"line\">        -D                                  # 打印接口</span><br><span class=\"line\">        -i eth1                             # 只抓经过接口eth1的包</span><br><span class=\"line\">        -t                                  # 不显示时间戳</span><br><span class=\"line\">        -s 0                                # 抓取数据包时默认抓取长度为68字节。加上-s 0 后可以抓到完整的数据包</span><br><span class=\"line\">        -c 100                              # 只抓取100个数据包</span><br><span class=\"line\">        dst port ! 22                       # 不抓取目标端口是22的数据包</span><br><span class=\"line\">        tcpdump tcp port 22                 # 抓包</span><br><span class=\"line\">        tcpdump -n -vv udp port 53          # 抓udp的dns包 并显示ip</span><br><span class=\"line\">        tcpdump port 10001 -A -s0           # 完整显示ascii数据包</span><br><span class=\"line\">        tcpdump -i any  host x.x.x.x -s 0 -w /tmp/cap.pcap   # 对端ip</span><br><span class=\"line\">        tcpdump -i any -s 0 host 172.20.81.107 or host 172.16.3.72 -C 50 -W 5 -w /tmp/20190122ng.cap</span><br><span class=\"line\">\t\ttcpdump -A -i ens33 -w pp.txt host www.baidu.com               \t\t# 存储到抓包文件\t-A 查看详细报文</span><br><span class=\"line\">\t\ttcpdump -AS -r pp.txt               \t\t\t\t\t\t\t\t# 查看抓包文件\t\t-S 查看ack绝对值</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t## 1. tcpdump -vvv tcp port 80 -w /tmp/cap.pcap  # 抓取tcp(http)协议且端口为80的数据包并存到cap.pcap</span><br><span class=\"line\">\t## 2. wireshark打开cap.pcap查看数据</span><br><span class=\"line\">\t## 3. 根据域名筛选数据：http.host contains www.macrozheng.com</span><br><span class=\"line\">\t\t\t根据目标ip筛选：ip.addr == 47.95.117.211</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    一次短链接失败故障定位&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # php和python程序调用接口,通过阿里云slb,到后端nginx,偶尔超时,后端nginx无请求,怀疑没到nginx,但通过检查,无法与nginx建立tcp链接</span><br><span class=\"line\">        ss -nl |grep :80  # 查看 accept 队列值,短连接应该大一点</span><br><span class=\"line\">        watch -n 1 &#x27;nstat -z -t 1 | grep -e TcpActiveOpens -e TcpExtListenOverflows -e TcpAttemptFails -e TcpPassiveOpen -e TcpExtTCPSynRetrans -e TcpRetransSegs  -e TcpOutSegs -e TcpInSegs&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">        TcpAttemptFails         TCP建立链接失败,包括前后端</span><br><span class=\"line\">        TcpExtTCPSynRetrans     TCP向后端建立链接失败</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        # nginx 和内核都需要调整才生效,程序监听端口,需要加socket参数</span><br><span class=\"line\">        listen 10.87.128.29:51528 default_server backlog=4096;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        https://m.aliyun.com/yunqi/articles/118472?spm=5176.8091938.0.0.11e86ccF4oOeZ</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    网卡流量查看&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        watch more /proc/net/dev    # 实时监控流量文件系统 累计值</span><br><span class=\"line\">        iptraf                      # 网卡流量查看工具</span><br><span class=\"line\">        nethogs -d 5 eth0 eth1      # 按进程实时统计网络流量 epel源nethogs</span><br><span class=\"line\">        iftop -i eth0 -n -P         # 实时流量监控</span><br><span class=\"line\"></span><br><span class=\"line\">        sar &#123;</span><br><span class=\"line\">            -n参数有6个不同的开关: DEV | EDEV | NFS | NFSD | SOCK | ALL</span><br><span class=\"line\">            DEV显示网络接口信息</span><br><span class=\"line\">            EDEV显示关于网络错误的统计数据</span><br><span class=\"line\">            NFS统计活动的NFS客户端的信息</span><br><span class=\"line\">            NFSD统计NFS服务器的信息</span><br><span class=\"line\">            SOCK显示套 接字信息</span><br><span class=\"line\">            ALL显示所有5个开关</span><br><span class=\"line\"></span><br><span class=\"line\">            sar -n DEV 1 10</span><br><span class=\"line\"></span><br><span class=\"line\">            rxpck/s   # 每秒钟接收的数据包</span><br><span class=\"line\">            txpck/s   # 每秒钟发送的数据包</span><br><span class=\"line\">            rxbyt/s   # 每秒钟接收的字节数</span><br><span class=\"line\">            txbyt/s   # 每秒钟发送的字节数</span><br><span class=\"line\">            rxcmp/s   # 每秒钟接收的压缩数据包</span><br><span class=\"line\">            txcmp/s   # 每秒钟发送的压缩数据包</span><br><span class=\"line\">            rxmcst/s  # 每秒钟接收的多播数据包</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    netstat&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 几十万并发的情况下netstat会没有响应，建议使用 ss 命令</span><br><span class=\"line\">        -a     # 显示所有连接中的Socket</span><br><span class=\"line\">        -t     # 显示TCP连接</span><br><span class=\"line\">        -u     # 显示UDP连接</span><br><span class=\"line\">        -n     # 显示所有已建立的有效连接</span><br><span class=\"line\">        netstat -anlp           # 查看链接</span><br><span class=\"line\">        netstat -tnlp           # 只查看tcp监听端口</span><br><span class=\"line\">        netstat -r              # 查看路由表</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ss&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # netstat是遍历/proc下面每个PID目录，ss直接读/proc/net下面的统计信息。所以ss执行的时候消耗资源以及消耗的时间都比netstat少很多</span><br><span class=\"line\">        ss -s                          # 列出当前socket详细信息</span><br><span class=\"line\">        ss -l                          # 显示本地打开的所有端口</span><br><span class=\"line\">        ss -tnlp                       # 显示每个进程具体打开的socket</span><br><span class=\"line\">        ss -ant                        # 显示所有TCP socket</span><br><span class=\"line\">        ss -u -a                       # 显示所有UDP Socekt</span><br><span class=\"line\">        ss dst 192.168.119.113         # 匹配远程地址</span><br><span class=\"line\">        ss dst 192.168.119.113:http    # 匹配远程地址和端口号</span><br><span class=\"line\">        ss dst 192.168.119.113:3844    # 匹配远程地址和端口号</span><br><span class=\"line\">        ss src 192.168.119.103:16021   # 匹配本地地址和端口号</span><br><span class=\"line\">        ss -o state established &#x27;( dport = :smtp or sport = :smtp )&#x27;        # 显示所有已建立的SMTP连接</span><br><span class=\"line\">        ss -o state established &#x27;( dport = :http or sport = :http )&#x27;        # 显示所有已建立的HTTP连接</span><br><span class=\"line\">        ss -x src /tmp/.X11-unix/*         # 找出所有连接X服务器的进程</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    并发数查看&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        netstat -n | awk &#x27;/^tcp/ &#123;++S[$NF]&#125; END &#123;for(a in S) print a, S[a]&#125;&#x27;</span><br><span class=\"line\">        SYN_RECV     # 正在等待处理的请求</span><br><span class=\"line\">        ESTABLISHED  # 正常数据传输状态,既当前并发数</span><br><span class=\"line\">        TIME_WAIT    # 处理完毕，等待超时结束的请求</span><br><span class=\"line\">        CLOSE_WAIT   # 客户端异常关闭,没有完成4次挥手  如大量可能存在攻击行为</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    ssh&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ssh -p 22 user@192.168.1.209                            # 从linux ssh登录另一台linux</span><br><span class=\"line\">        ssh -p 22 root@192.168.1.209 CMD                        # 利用ssh操作远程主机</span><br><span class=\"line\">        scp -P 22 file root@ip:/dir                             # 把本地文件拷贝到远程主机</span><br><span class=\"line\">        scp -l 100000  file root@ip:/dir                        # 传输文件到远程，限制速度100M</span><br><span class=\"line\">        sshpass -p &#x27;pwd&#x27; ssh -n root@$IP &quot;echo hello&quot;           # 指定密码远程操作</span><br><span class=\"line\">        ssh -o StrictHostKeyChecking=no $IP                     # ssh连接不提示yes</span><br><span class=\"line\">        ssh -t &quot;su -&quot;                                           # 指定伪终端 客户端以交互模式工作</span><br><span class=\"line\">        scp root@192.168.1.209:/RemoteDir /localDir             # 把远程指定文件拷贝到本地</span><br><span class=\"line\">        pscp -h host.ip /a.sh /opt/sbin/                        # 批量传输文件</span><br><span class=\"line\">        ssh -N -L2001:remotehost:80 user@somemachine            # 用SSH创建端口转发通道</span><br><span class=\"line\">        ssh -t host_A ssh host_B                                # 嵌套使用SSH</span><br><span class=\"line\">        ssh -t -p 22 $user@$Ip /bin/su - root -c &#123;$Cmd&#125;;        # 远程su执行命令 Cmd=&quot;\\&quot;/sbin/ifconfig eth0\\&quot;&quot;</span><br><span class=\"line\">        ssh-keygen -t rsa                                       # 生成密钥</span><br><span class=\"line\">        ssh-copy-id -i xuesong@10.10.10.133                     # 传送key</span><br><span class=\"line\">        vi $HOME/.ssh/authorized_keys                           # 公钥存放位置</span><br><span class=\"line\">        sshfs name@server:/path/to/folder /path/to/mount/point  # 通过ssh挂载远程主机上的文件夹</span><br><span class=\"line\">        fusermount -u /path/to/mount/point                      # 卸载ssh挂载的目录</span><br><span class=\"line\">        ssh user@host cat /path/to/remotefile | diff /path/to/localfile -                # 用DIFF对比远程文件跟本地文件</span><br><span class=\"line\">        su - user -c &quot;ssh user@192.168.1.1 \\&quot;echo -e aa |mail -s test mail@163.com\\&quot;&quot;    # 切换用户登录远程发送邮件</span><br><span class=\"line\">        pssh -h ip.txt -i uptime                                # 批量执行ssh yum install pssh</span><br><span class=\"line\"></span><br><span class=\"line\">        SSH反向连接&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            # 外网A要控制内网B</span><br><span class=\"line\"></span><br><span class=\"line\">            ssh -NfR 1234:localhost:2223 user1@123.123.123.123 -p22    # 将A主机的1234端口和B主机的2223端口绑定，相当于远程端口映射</span><br><span class=\"line\">            ss -ant   # 这时在A主机上sshd会listen本地1234端口</span><br><span class=\"line\">            # LISTEN     0    128    127.0.0.1:1234       *:*</span><br><span class=\"line\">            ssh localhost -p1234    # 在A主机连接本地1234端口</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    网卡配置文件&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        vi /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class=\"line\"></span><br><span class=\"line\">        DEVICE=eth0</span><br><span class=\"line\">        BOOTPROTO=none</span><br><span class=\"line\">        BROADCAST=192.168.1.255</span><br><span class=\"line\">        HWADDR=00:0C:29:3F:E1:EA</span><br><span class=\"line\">        IPADDR=192.168.1.55</span><br><span class=\"line\">        NETMASK=255.255.255.0</span><br><span class=\"line\">        NETWORK=192.168.1.0</span><br><span class=\"line\">        ONBOOT=yes</span><br><span class=\"line\">        TYPE=Ethernet</span><br><span class=\"line\">        GATEWAY=192.168.1.1</span><br><span class=\"line\">        #ARPCHECK=no     # 进制arp检查</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    route &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        route                           # 查看路由表</span><br><span class=\"line\">        route add default  gw 192.168.1.1  dev eth0                        # 添加默认路由</span><br><span class=\"line\">        route add -net 172.16.0.0 netmask 255.255.0.0 gw 10.39.111.254     # 添加静态路由网关</span><br><span class=\"line\">        route del -net 172.16.0.0 netmask 255.255.0.0 gw 10.39.111.254     # 删除静态路由网关</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    静态路由&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        vim /etc/sysconfig/static-routes</span><br><span class=\"line\">        any net 192.168.12.0/24 gw 192.168.0.254</span><br><span class=\"line\">        any net 192.168.13.0/24 gw 192.168.0.254</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    解决ssh链接慢&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        sed -i &#x27;s/GSSAPIAuthentication yes/GSSAPIAuthentication no/&#x27; /etc/ssh/sshd_config</span><br><span class=\"line\">        sed -i &#x27;/#UseDNS yes/a\\UseDNS no&#x27; /etc/ssh/sshd_config</span><br><span class=\"line\">        /etc/init.d/sshd reload</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    nmap&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        nmap -PT 192.168.1.1-111             # 先ping在扫描主机开放端口</span><br><span class=\"line\">        nmap -O 192.168.1.1                  # 扫描出系统内核版本</span><br><span class=\"line\">        nmap -sV 192.168.1.1-111             # 扫描端口的软件版本</span><br><span class=\"line\">        nmap -sS 192.168.1.1-111             # 半开扫描(通常不会记录日志)</span><br><span class=\"line\">        nmap -P0 192.168.1.1-111             # 不ping直接扫描</span><br><span class=\"line\">        nmap -d 192.168.1.1-111              # 详细信息</span><br><span class=\"line\">        nmap -D 192.168.1.1-111              # 无法找出真正扫描主机(隐藏IP)</span><br><span class=\"line\">        nmap -p 20-30,139,60000-             # 端口范围  表示：扫描20到30号端口，139号端口以及所有大于60000的端口</span><br><span class=\"line\">        nmap -P0 -sV -O -v 192.168.30.251    # 组合扫描(不ping、软件版本、内核版本、详细信息)</span><br><span class=\"line\"></span><br><span class=\"line\">        # 不支持windows的扫描(可用于判断是否是windows)</span><br><span class=\"line\">        nmap -sF 192.168.1.1-111</span><br><span class=\"line\">        nmap -sX 192.168.1.1-111</span><br><span class=\"line\">        nmap -sN 192.168.1.1-111</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    流量切分线路&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 程序判断进入IP线路，设置服务器路由规则控制返回</span><br><span class=\"line\">        vi /etc/iproute2/rt_tables</span><br><span class=\"line\">        #添加一条策略</span><br><span class=\"line\">        252   bgp2  #注意策略的序号顺序</span><br><span class=\"line\">        ip route add default via 第二个出口上线IP(非默认网关) dev eth1 table bgp2</span><br><span class=\"line\">        ip route add from 本机第二个ip table bgp2</span><br><span class=\"line\">        #查看</span><br><span class=\"line\">        ip route list table 252</span><br><span class=\"line\">        ip rule list</span><br><span class=\"line\">        #成功后将语句添加开机启动</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    snmp&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        snmptranslate .1.3.6.1.2.1.1.3.0    # 查看映射关系</span><br><span class=\"line\">            DISMAN-EVENT-MIB::sysUpTimeInstance</span><br><span class=\"line\">        snmpdf -v 1 -c public localhost                            # SNMP监视远程主机的磁盘空间</span><br><span class=\"line\">        snmpnetstat -v 2c -c public -a 192.168.6.53                # SNMP获取指定IP的所有开放端口状态</span><br><span class=\"line\">        snmpwalk -v 2c -c public 10.152.14.117 .1.3.6.1.2.1.1.3.0  # SNMP获取主机启动时间</span><br><span class=\"line\">        # MIB安装(ubuntu)</span><br><span class=\"line\">        # sudo apt-get install snmp-mibs-downloader</span><br><span class=\"line\">        # sudo download-mibs</span><br><span class=\"line\">        snmpwalk -v 2c -c public 10.152.14.117 sysUpTimeInstance   # SNMP通过MIB库获取主机启动时间</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    TC流量控制&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 针对ip段下载速率控制</span><br><span class=\"line\">        tc qdisc del dev eth0 root handle 1:                                                              # 删除控制1:</span><br><span class=\"line\">        tc qdisc add dev eth0 root handle 1: htb r2q 1                                                    # 添加控制1:</span><br><span class=\"line\">        tc class add dev eth0 parent 1: classid 1:1 htb rate 12mbit ceil 15mbit                           # 设置速率</span><br><span class=\"line\">        tc filter add dev eth0 parent 1: protocol ip prio 16 u32 match ip dst 10.10.10.1/24 flowid 1:1    # 指定ip段控制规则</span><br><span class=\"line\"></span><br><span class=\"line\">        # 检查命令</span><br><span class=\"line\">        tc -s -d qdisc show dev eth0</span><br><span class=\"line\">        tc class show dev eth0</span><br><span class=\"line\">        tc filter show dev eth0</span><br><span class=\"line\"></span><br><span class=\"line\">        限制上传下载&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            tc qdisc del dev tun0 root</span><br><span class=\"line\">            tc qdisc add dev tun0 root handle 2:0 htb</span><br><span class=\"line\">            tc class add dev tun0 parent 2:1 classid 2:10 htb rate 30kbps</span><br><span class=\"line\">            tc class add dev tun0 parent 2:2 classid 2:11 htb rate 30kbps</span><br><span class=\"line\">            tc qdisc add dev tun0 parent 2:10 handle 1: sfq perturb 1</span><br><span class=\"line\">            tc filter add dev tun0 protocol ip parent 2:0 u32 match ip dst 10.18.0.0/24 flowid 2:10</span><br><span class=\"line\">            tc filter add dev tun0 parent ffff: protocol ip u32 match ip src 10.18.0.0/24 police rate 30kbps burst 10k drop flowid 2:11</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">            tc qdisc del dev tun0 root                                     # 删除原有策略</span><br><span class=\"line\">            tc qdisc add dev tun0 root handle 2:0 htb                      # 定义最顶层(根)队列规则，并指定 default 类别编号，为网络接口 eth1 绑定一个队列，类型为 htb，并指定了一个 handle 句柄 2:0 用于标识它下面的子类</span><br><span class=\"line\">            tc class add dev tun0 parent 2:1 classid 2:10 htb rate 30kbps  # 设置一个规则速度是30kbps</span><br><span class=\"line\">            tc class add dev tun0 parent 2:2 classid 2:11 htb rate 30kbps</span><br><span class=\"line\">            tc qdisc add dev tun0 parent 2:10 handle 1: sfq perturb 1      # 调用随机公平算法</span><br><span class=\"line\">            tc filter add dev tun0 protocol ip parent 2:0 u32 match ip dst 10.18.0.0/24 flowid 2:10  # 规则2:10应用在目标地址上，即下载</span><br><span class=\"line\">            tc filter add dev tun0 parent ffff: protocol ip u32 match ip src 10.18.0.0/24 police rate 30kbps burst 10k drop flowid 2:11 # 上传限速</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">6 磁盘&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    df -Ph                                          # 查看硬盘容量</span><br><span class=\"line\">    df -T                                           # 查看磁盘分区格式</span><br><span class=\"line\">    df -i                                           # 查看inode节点   如果inode用满后无法创建文件</span><br><span class=\"line\">    du -h dir                                       # 检测目录下所有文件大小</span><br><span class=\"line\">    du -sh *                                        # 显示当前目录中子目录的大小</span><br><span class=\"line\">    mount -l                                        # 查看分区挂载情况</span><br><span class=\"line\">    fdisk -l                                        # 查看磁盘分区状态</span><br><span class=\"line\">    fdisk /dev/hda3                                 # 分区</span><br><span class=\"line\">    mkfs -t ext4  /dev/hda3                         # 格式化分区</span><br><span class=\"line\">    fsck -y /dev/sda6                               # 对文件系统修复</span><br><span class=\"line\">    lsof |grep delete                               # 释放进程占用磁盘空间  列出进程后，查看文件是否存在，不存在则kill掉此进程</span><br><span class=\"line\">    tmpwatch -afv 10   /tmp                         # 删除10小时内未使用的文件  勿在重要目录使用</span><br><span class=\"line\">    cat /proc/filesystems                           # 查看当前系统支持文件系统</span><br><span class=\"line\">    mount -o remount,rw /                           # 修改只读文件系统为读写</span><br><span class=\"line\">    iotop                                           # 进程占用磁盘IO情况   yum install iotop</span><br><span class=\"line\">    smartctl -H /dev/sda                            # 检测硬盘状态  # yum install smartmontools</span><br><span class=\"line\">    smartctl -i /dev/sda                            # 检测硬盘信息</span><br><span class=\"line\">    smartctl -a /dev/sda                            # 检测所有信息</span><br><span class=\"line\">    e2label /dev/sda5                               # 查看卷标</span><br><span class=\"line\">    e2label /dev/sda5 new-label                     # 创建卷标</span><br><span class=\"line\">    ntfslabel -v /dev/sda8 new-label                # NTFS添加卷标</span><br><span class=\"line\">    tune2fs -j /dev/sda                             # ext2分区转ext3分区</span><br><span class=\"line\">    tune2fs -l /dev/sda                             # 查看文件系统信息</span><br><span class=\"line\">    mke2fs -b 2048 /dev/sda5                        # 指定索引块大小</span><br><span class=\"line\">    dumpe2fs -h /dev/sda5                           # 查看超级块的信息</span><br><span class=\"line\">    mount -t iso9660 /dev/dvd  /mnt                 # 挂载光驱</span><br><span class=\"line\">    mount -t ntfs-3g /dev/sdc1 /media/yidong        # 挂载ntfs硬盘</span><br><span class=\"line\">    mount -t nfs 10.0.0.3:/opt/images/  /data/img   # 挂载nfs 需要重载 /etc/init.d/nfs reload  重启需要先启动 portmap 服务</span><br><span class=\"line\">    mount -o loop  /software/rhel4.6.iso   /mnt/    # 挂载镜像文件</span><br><span class=\"line\"></span><br><span class=\"line\">    磁盘IO性能检测&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        iostat -x 1 10</span><br><span class=\"line\"></span><br><span class=\"line\">        % user       # 显示了在用户级(应用程序)执行时生成的 CPU 使用率百分比。</span><br><span class=\"line\">        % system     # 显示了在系统级(内核)执行时生成的 CPU 使用率百分比。</span><br><span class=\"line\">        % idle       # 显示了在 CPU 空闲并且系统没有未完成的磁盘 I/O 请求时的时间百分比。</span><br><span class=\"line\">        % iowait     # 显示了 CPU 空闲期间系统有未完成的磁盘 I/O 请求时的时间百分比。</span><br><span class=\"line\"></span><br><span class=\"line\">        rrqm/s       # 每秒进行 merge 的读操作数目。即 delta(rmerge)/s</span><br><span class=\"line\">        wrqm/s       # 每秒进行 merge 的写操作数目。即 delta(wmerge)/s</span><br><span class=\"line\">        r/s          # 每秒完成的读 I/O 设备次数。即 delta(rio)/s</span><br><span class=\"line\">        w/s          # 每秒完成的写 I/O 设备次数。即 delta(wio)/s</span><br><span class=\"line\">        rsec/s       # 每秒读扇区数。即 delta(rsect)/s</span><br><span class=\"line\">        wsec/s       # 每秒写扇区数。即 delta(wsect)/s</span><br><span class=\"line\">        rkB/s        # 每秒读K字节数。是 rsect/s 的一半，因为每扇区大小为512字节。(需要计算)</span><br><span class=\"line\">        wkB/s        # 每秒写K字节数。是 wsect/s 的一半。(需要计算)</span><br><span class=\"line\">        avgrq-sz     # 平均每次设备I/O操作的数据大小 (扇区)。delta(rsect+wsect)/delta(rio+wio)</span><br><span class=\"line\">        avgqu-sz     # 平均I/O队列长度。即 delta(aveq)/s/1000 (因为aveq的单位为毫秒)。</span><br><span class=\"line\">        await        # 平均每次设备I/O操作的等待时间 (毫秒)。即 delta(ruse+wuse)/delta(rio+wio)</span><br><span class=\"line\">        svctm        # 平均每次设备I/O操作的服务时间 (毫秒)。即 delta(use)/delta(rio+wio)</span><br><span class=\"line\">        %util        # 一秒中有百分之多少的时间用于 I/O 操作，或者说一秒中有多少时间 I/O 队列是非空的。即 delta(use)/s/1000 (因为use的单位为毫秒)</span><br><span class=\"line\"></span><br><span class=\"line\">        IO性能衡量标准&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            1、 如果 %util 接近 100%，说明产生的I/O请求太多，I/O系统已经满负荷，该磁盘可能存在瓶颈。</span><br><span class=\"line\">            2、 idle 小于70% IO压力就较大了,一般读取速度有较多的wait.</span><br><span class=\"line\">            3、 同时可以结合 vmstat 查看查看b参数(等待资源的进程数)和wa参数(IO等待所占用的CPU时间的百分比,高过30%时IO压力高)</span><br><span class=\"line\">            4、 svctm 一般要小于 await (因为同时等待的请求的等待时间被重复计算了),svctm 的大小一般和磁盘性能有关,CPU/内存的负荷也会对其有影响,请求过多也会间接导致 svctm 的增加. await 的大小一般取决于服务时间(svctm) 以及 I/O 队列的长度和 I/O 请求的发出模式. 如果 svctm 比较接近 await,说明 I/O 几乎没有等待时间;如果 await 远大于 svctm,说明 I/O 队列太长,应用得到的响应时间变慢,如果响应时间超过了用户可以容许的范围,这时可以考虑更换更快的磁盘,调整内核 elevator 算法,优化应用,或者升级 CPU</span><br><span class=\"line\">            5、 队列长度(avgqu-sz)也可作为衡量系统 I/O 负荷的指标，但由于 avgqu-sz 是按照单位时间的平均值，所以不能反映瞬间的 I/O 洪水。</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    iotop&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 监视进程磁盘I/O</span><br><span class=\"line\"></span><br><span class=\"line\">        yum install iotop</span><br><span class=\"line\"></span><br><span class=\"line\">        -o        # 只显示有io操作的进程</span><br><span class=\"line\">        -b        # 批量显示，无交互，主要用作记录到文件。</span><br><span class=\"line\">        -n NUM    # 显示NUM次，主要用于非交互式模式。</span><br><span class=\"line\">        -d SEC    # 间隔SEC秒显示一次。</span><br><span class=\"line\">        -p PID    # 监控的进程pid。</span><br><span class=\"line\">        -u USER   # 监控的进程用户。</span><br><span class=\"line\"></span><br><span class=\"line\">        # 左右箭头：改变排序方式，默认是按IO排序。</span><br><span class=\"line\">        r         # 改变排序顺序。</span><br><span class=\"line\">        o         # 只显示有IO输出的进程。</span><br><span class=\"line\">        p         # 进程/线程的显示方式的切换。</span><br><span class=\"line\">        a         # 显示累积使用量。</span><br><span class=\"line\">        q         # 退出。</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    创建swap文件方法&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        dd if=/dev/zero of=/swap bs=1024 count=4096000            # 创建一个足够大的文件</span><br><span class=\"line\">        # count的值等于1024 x 你想要的文件大小, 4096000是4G</span><br><span class=\"line\">        mkswap /swap                      # 把这个文件变成swap文件</span><br><span class=\"line\">        swapon /swap                      # 启用这个swap文件</span><br><span class=\"line\">        /swap swap swap defaults 0 0      # 在每次开机的时候自动加载swap文件, 需要在 /etc/fstab 文件中增加一行</span><br><span class=\"line\">        cat /proc/swaps                   # 查看swap</span><br><span class=\"line\">        swapoff -a                        # 关闭swap</span><br><span class=\"line\">        swapon -a                         # 开启swap</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    新硬盘挂载&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        fdisk /dev/sdc</span><br><span class=\"line\">        p    #  打印分区</span><br><span class=\"line\">        d    #  删除分区</span><br><span class=\"line\">        n    #  创建分区，（一块硬盘最多4个主分区，扩展占一个主分区位置。p主分区 e扩展）</span><br><span class=\"line\">        w    #  保存退出</span><br><span class=\"line\">        mkfs.ext4 -L 卷标  /dev/sdc1            # 格式化相应分区</span><br><span class=\"line\">        mount /dev/sdc1  /mnt                  # 挂载</span><br><span class=\"line\">        vi /etc/fstab                          # 添加开机挂载分区</span><br><span class=\"line\">        LABEL=/data            /data                   ext4    defaults        1 2      # 用卷标挂载</span><br><span class=\"line\">        /dev/sdb1              /data4                  ext4    defaults        1 2      # 用真实分区挂载</span><br><span class=\"line\">        /dev/sdb2              /data4                  ext4    noatime,defaults        1 2</span><br><span class=\"line\"></span><br><span class=\"line\">        第一个数字&quot;1&quot;该选项被&quot;dump&quot;命令使用来检查一个文件系统应该以多快频率进行转储，若不需要转储就设置该字段为0</span><br><span class=\"line\">        第二个数字&quot;2&quot;该字段被fsck命令用来决定在启动时需要被扫描的文件系统的顺序，根文件系统&quot;/&quot;对应该字段的值应该为1，其他文件系统应该为2。若该文件系统无需在启动时扫描则设置该字段为0</span><br><span class=\"line\">        当以 noatime 选项加载（mount）文件系统时，对文件的读取不会更新文件属性中的atime信息。设置noatime的重要性是消除了文件系统对文件的写操作，文件只是简单地被系统读取。由于写操作相对读来说要更消耗系统资源，所以这样设置可以明显提高服务器的性能.wtime信息仍然有效，任何时候文件被写，该信息仍被更新。</span><br><span class=\"line\"></span><br><span class=\"line\">        mount -a    # 自动加载 fstab 文件挂载，避免配置错误，系统无法重启</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    大磁盘2T和16T分区&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        parted /dev/sdb                # 针对磁盘分区</span><br><span class=\"line\">        (parted) mklabel gpt           # 设置为 gpt</span><br><span class=\"line\">        (parted) print</span><br><span class=\"line\">        (parted) mkpart  primary 0KB 22.0TB        # 指定分区大小</span><br><span class=\"line\">        Is this still acceptable to you?</span><br><span class=\"line\">        Yes/No? Yes</span><br><span class=\"line\">        Ignore/Cancel? Ignore</span><br><span class=\"line\">        (parted) print</span><br><span class=\"line\">        Model: LSI MR9271-8i (scsi)</span><br><span class=\"line\">        Disk /dev/sdb: 22.0TB</span><br><span class=\"line\">        Sector size (logical/physical): 512B/512B</span><br><span class=\"line\">        Partition Table: gpt</span><br><span class=\"line\">        Number  Start   End     Size    File system  Name     Flags</span><br><span class=\"line\">         1      17.4kB  22.0TB  22.0TB               primary</span><br><span class=\"line\">        (parted) quit</span><br><span class=\"line\"></span><br><span class=\"line\">        mkfs.ext4 /dev/sdb1        # e2fsprogs升级后支持大于16T硬盘</span><br><span class=\"line\"></span><br><span class=\"line\">        # 大于16T的单个分区ext4格式化报错，需要升级e2fsprogs</span><br><span class=\"line\">        Size of device /dev/sdb1 too big to be expressed in 32 bits using a blocksize of 4096.</span><br><span class=\"line\"></span><br><span class=\"line\">        yum -y install xfsprogs</span><br><span class=\"line\">        mkfs.xfs -f /dev/sdb1              # 大于16T单个分区也可以使用XFS分区,但inode占用很大,对大量的小文件支持不太好</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    阿里云扩容磁盘&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 进入ECS 本实例磁盘，勾选在线扩容, 选择扩容磁盘</span><br><span class=\"line\">        yum install cloud-utils-growpart</span><br><span class=\"line\">        yum install xfsprogs</span><br><span class=\"line\">        df -h    # 查看目前分区大小</span><br><span class=\"line\">        fdisk -l # 查看磁盘设备</span><br><span class=\"line\">        growpart /dev/vda 1         # 扩容分区 如果没有分区,默认整块,不需要执行</span><br><span class=\"line\">        resize2fs /dev/vda1         # 扩容文件系统 ext4文件系统 </span><br><span class=\"line\">        xfs_growfs /dev/vda1        # 扩容文件系统 xfs文件系统</span><br><span class=\"line\">        df -h                       # 再查看分区大小,是否扩容</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    raid原理与区别&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        raid0至少2块硬盘.吞吐量大,性能好,同时读写,但损坏一个就完蛋</span><br><span class=\"line\">        raid1至少2块硬盘.相当镜像,一个存储,一个备份.安全性比较高.但是性能比0弱</span><br><span class=\"line\">        raid5至少3块硬盘.分别存储校验信息和数据，坏了一个根据校验信息能恢复</span><br><span class=\"line\">        raid6至少4块硬盘.两个独立的奇偶系统,可坏两块磁盘,写性能非常差</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">7 用户&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    users                                      # 显示所有的登录用户</span><br><span class=\"line\">    groups                                     # 列出当前用户和他所属的组</span><br><span class=\"line\">    who -q                                     # 显示所有的登录用户</span><br><span class=\"line\">    groupadd                                   # 添加组</span><br><span class=\"line\">    useradd user                               # 建立用户</span><br><span class=\"line\">    passwd username                            # 修改密码</span><br><span class=\"line\">    userdel -r                                 # 删除帐号及家目录</span><br><span class=\"line\">    chown -R user:group                        # 修改目录拥有者(R递归)</span><br><span class=\"line\">    chown y\\.li:mysql                          # 修改所有者用户中包含点&quot;.&quot;</span><br><span class=\"line\">    umask                                      # 设置用户文件和目录的文件创建缺省屏蔽值</span><br><span class=\"line\">    chgrp                                      # 修改用户组</span><br><span class=\"line\">    finger                                     # 查找用户显示信息</span><br><span class=\"line\">    echo &quot;xuesong&quot; | passwd user --stdin       # 非交互修改密码</span><br><span class=\"line\">    useradd -g www -M  -s /sbin/nologin  www   # 指定组并不允许登录的用户,nologin允许使用服务</span><br><span class=\"line\">    useradd -g www -M  -s /bin/false  www      # 指定组并不允许登录的用户,false最为严格</span><br><span class=\"line\">    useradd -d /data/song -g song song         # 创建用户并指定家目录和组</span><br><span class=\"line\">    usermod -l newuser olduser                 # 修改用户名</span><br><span class=\"line\">    usermod -g user group                      # 修改用户所属组</span><br><span class=\"line\">    usermod -d dir -m user                     # 修改用户家目录</span><br><span class=\"line\">    usermod -G group user                      # 将用户添加到附加组</span><br><span class=\"line\">    gpasswd -d user group                      # 从组中删除用户</span><br><span class=\"line\">    su - user -c &quot; #cmd1; &quot;                    # 切换用户执行</span><br><span class=\"line\"></span><br><span class=\"line\">    恢复密码&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 即进入单用户模式: 在linux出现grub后，在安装的系统上面按&quot;e&quot;，然后出现grub的配置文件，按键盘移动光标到第二行&quot;Ker……&quot;，再按&quot;e&quot;，然后在这一行的结尾加上：空格 single或者空格1回车，然后按&quot;b&quot;重启，就进入了&quot;单用户模式&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    特殊权限&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        s或 S （SUID）：对应数值4</span><br><span class=\"line\">        s或 S （SGID）：对应数值2</span><br><span class=\"line\">        t或 T ：对应数值1</span><br><span class=\"line\">        大S：代表拥有root权限，但是没有执行权限</span><br><span class=\"line\">        小s：拥有特权且拥有执行权限，这个文件可以访问系统任何root用户可以访问的资源</span><br><span class=\"line\">        T或T（Sticky）：/tmp和 /var/tmp目录供所有用户暂时存取文件，亦即每位用户皆拥有完整的权限进入该目录，去浏览、删除和移动文件</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">8 脚本&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    #!/bin/sh                             # 在脚本第一行脚本头 # sh为当前系统默认shell,可指定为bash等shell</span><br><span class=\"line\">    shopt                                 # 显示和设置shell中的行为选项</span><br><span class=\"line\">    sh -x                                 # 执行过程</span><br><span class=\"line\">    sh -n                                 # 检查语法</span><br><span class=\"line\">    set -e                                # 若指令传回值不等于0，则立即退出shell</span><br><span class=\"line\">    (a=bbk)                               # 括号创建子shell运行</span><br><span class=\"line\">    basename /a/b/c                       # 从全路径中保留最后一层文件名或目录</span><br><span class=\"line\">    dirname                               # 取路径</span><br><span class=\"line\">    $RANDOM                               # 随机数</span><br><span class=\"line\">    $$                                    # 进程号</span><br><span class=\"line\">    source FileName                       # 在当前bash环境下读取并执行FileName中的命令  # 等同 . FileName</span><br><span class=\"line\">    sleep 5                               # 间隔睡眠5秒</span><br><span class=\"line\">    trap                                  # 在接收到信号后将要采取的行动</span><br><span class=\"line\">    trap &quot;&quot; 2 3                           # 禁止ctrl+c</span><br><span class=\"line\">    $PWD                                  # 当前目录</span><br><span class=\"line\">    $HOME                                 # 家目录</span><br><span class=\"line\">    $OLDPWD                               # 之前一个目录的路径</span><br><span class=\"line\">    cd -                                  # 返回上一个目录路径</span><br><span class=\"line\">    local ret                             # 局部变量</span><br><span class=\"line\">    yes                                   # 重复打印</span><br><span class=\"line\">    yes |rm -i *                          # 自动回答y或者其他</span><br><span class=\"line\">    ls -p /home                           # 区分目录和文件夹</span><br><span class=\"line\">    ls -d /home/                          # 查看匹配完整路径</span><br><span class=\"line\">    time a.sh                             # 测试程序执行时间</span><br><span class=\"line\">    echo -n aa;echo bb                    # 不换行执行下一句话 将字符串原样输出</span><br><span class=\"line\">    echo -e &quot;s\\tss\\n\\n\\n&quot;                 # 使转义生效</span><br><span class=\"line\">    echo $a | cut -c2-6                   # 取字符串中字元</span><br><span class=\"line\">    echo &#123;a,b,c&#125;&#123;a,b,c&#125;&#123;a,b,c&#125;            # 排列组合(括号内一个元素分别和其他括号内元素组合)</span><br><span class=\"line\">    echo $((2#11010))                     # 二进制转10进制</span><br><span class=\"line\">    echo aaa | tee file                   # 打印同时写入文件 默认覆盖 -a追加</span><br><span class=\"line\">    echo &#123;1..10&#125;                          # 打印10个字符</span><br><span class=\"line\">    printf &#x27;%10s\\n&#x27;|tr &quot; &quot; a              # 打印10个字符</span><br><span class=\"line\">    pwd | awk -F/ &#x27;&#123; print $2 &#125;&#x27;          # 返回目录名</span><br><span class=\"line\">    tac file |sed 1,3d|tac                # 倒置读取文件  # 删除最后3行</span><br><span class=\"line\">    tail -3 file                          # 取最后3行</span><br><span class=\"line\">    outtmp=/tmp/$$`date +%s%N`.outtmp     # 临时文件定义</span><br><span class=\"line\">    :()&#123; :|:&amp; &#125;;:                         # fork炸弹,系统执行海量的进程,直到系统僵死</span><br><span class=\"line\">    echo -e &quot;\\e[32mcolour\\e[0m&quot;           # 打印颜色</span><br><span class=\"line\">    echo -e &quot;\\033[32mcolour\\033[m&quot;        # 打印颜色</span><br><span class=\"line\">    echo -e &quot;\\033[0;31mL\\033[0;32mO\\033[0;33mV\\033[0;34mE\\t\\033[0;35mY\\033[0;36mO\\033[0;32mU\\e[m&quot;    # 打印颜色</span><br><span class=\"line\"></span><br><span class=\"line\">    正则表达式&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        ^                       # 行首定位</span><br><span class=\"line\">        $                       # 行尾定位</span><br><span class=\"line\">        .                       # 匹配除换行符以外的任意字符</span><br><span class=\"line\">        *                       # 匹配0或多个重复字符</span><br><span class=\"line\">        +                       # 重复一次或更多次</span><br><span class=\"line\">        ?                       # 重复零次或一次</span><br><span class=\"line\">        ?                       # 结束贪婪因子 .*? 表示最小匹配</span><br><span class=\"line\">        []                      # 匹配一组中任意一个字符</span><br><span class=\"line\">        [^]                     # 匹配不在指定组内的字符</span><br><span class=\"line\">        \\                       # 用来转义元字符</span><br><span class=\"line\">        &lt;                       # 词首定位符(支持vi和grep)  &lt;love</span><br><span class=\"line\">        &gt;                       # 词尾定位符(支持vi和grep)  love&gt;</span><br><span class=\"line\">        x\\&#123;m\\&#125;                  # 重复出现m次</span><br><span class=\"line\">        x\\&#123;m,\\&#125;                 # 重复出现至少m次</span><br><span class=\"line\">        x\\&#123;m,n\\&#125;                # 重复出现至少m次不超过n次</span><br><span class=\"line\">        X?                      # 匹配出现零次或一次的大写字母 X</span><br><span class=\"line\">        X+                      # 匹配一个或多个字母 X</span><br><span class=\"line\">        ()                      # 括号内的字符为一组</span><br><span class=\"line\">        (ab|de)+                # 匹配一连串的（最少一个） abc 或 def；abc 和 def 将匹配</span><br><span class=\"line\">        [[:alpha:]]             # 代表所有字母不论大小写</span><br><span class=\"line\">        [[:lower:]]             # 表示小写字母</span><br><span class=\"line\">        [[:upper:]]             # 表示大写字母</span><br><span class=\"line\">        [[:digit:]]             # 表示数字字符</span><br><span class=\"line\">        [[:digit:][:lower:]]    # 表示数字字符加小写字母</span><br><span class=\"line\"></span><br><span class=\"line\">        元字符&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            \\d       # 匹配任意一位数字</span><br><span class=\"line\">            \\D       # 匹配任意单个非数字字符</span><br><span class=\"line\">            \\w       # 匹配任意单个字母数字下划线字符，同义词是 [:alnum:]</span><br><span class=\"line\">            \\W       # 匹配非数字型的字符</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        字符类:空白字符&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            \\s       # 匹配任意的空白符</span><br><span class=\"line\">            \\S       # 匹配非空白字符</span><br><span class=\"line\">            \\b       # 匹配单词的开始或结束</span><br><span class=\"line\">            \\n       # 匹配换行符</span><br><span class=\"line\">            \\r       # 匹配回车符</span><br><span class=\"line\">            \\t       # 匹配制表符</span><br><span class=\"line\">            \\b       # 匹配退格符</span><br><span class=\"line\">            \\0       # 匹配空值字符</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        字符类:锚定字符&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            \\b       # 匹配字边界(不在[]中时)</span><br><span class=\"line\">            \\B       # 匹配非字边界</span><br><span class=\"line\">            \\A       # 匹配字符串开头</span><br><span class=\"line\">            \\Z       # 匹配字符串或行的末尾</span><br><span class=\"line\">            \\z       # 只匹配字符串末尾</span><br><span class=\"line\">            \\G       # 匹配前一次m//g离开之处</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        捕获&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            (exp)                # 匹配exp,并捕获文本到自动命名的组里</span><br><span class=\"line\">            (?&lt;name&gt;exp)         # 匹配exp,并捕获文本到名称为name的组里，也可以写成(?&#x27;name&#x27;exp)</span><br><span class=\"line\">            (?:exp)              # 匹配exp,不捕获匹配的文本，也不给此分组分配组号</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        零宽断言&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            (?=exp)              # 匹配exp前面的位置</span><br><span class=\"line\">            (?&lt;=exp)             # 匹配exp后面的位置</span><br><span class=\"line\">            (?!exp)              # 匹配后面跟的不是exp的位置</span><br><span class=\"line\">            (?&lt;!exp)             # 匹配前面不是exp的位置</span><br><span class=\"line\">            (?#comment)          # 注释不对正则表达式的处理产生任何影响，用于注释</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        特殊字符&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            http://en.wikipedia.org/wiki/Ascii_table</span><br><span class=\"line\">            ^H  \\010 \\b</span><br><span class=\"line\">            ^M  \\015 \\r</span><br><span class=\"line\">            匹配特殊字符: ctrl+V ctrl不放在按H或M 即可输出^H,用于匹配</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    流程结构&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        if判断&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            if [ $a == $b ]</span><br><span class=\"line\">            then</span><br><span class=\"line\">                echo &quot;等于&quot;</span><br><span class=\"line\">            else</span><br><span class=\"line\">                echo &quot;不等于&quot;</span><br><span class=\"line\">            fi</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        case分支选择&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            case $xs in</span><br><span class=\"line\">            0) echo &quot;0&quot; ;;</span><br><span class=\"line\">            1) echo &quot;1&quot; ;;</span><br><span class=\"line\">            *) echo &quot;其他&quot; ;;</span><br><span class=\"line\">            esac</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        while循环&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            # while true  等同   while :</span><br><span class=\"line\">            # 读文件为整行读入</span><br><span class=\"line\">            num=1</span><br><span class=\"line\">            while [ $num -lt 10 ]</span><br><span class=\"line\">            do</span><br><span class=\"line\">            echo $num</span><br><span class=\"line\">            ((num=$num+2))</span><br><span class=\"line\">            done</span><br><span class=\"line\">            ###########################</span><br><span class=\"line\">            grep a  a.txt | while read a</span><br><span class=\"line\">            do</span><br><span class=\"line\">                echo $a</span><br><span class=\"line\">            done</span><br><span class=\"line\">            ###########################</span><br><span class=\"line\">            while read a</span><br><span class=\"line\">            do</span><br><span class=\"line\">                echo $a</span><br><span class=\"line\">            done &lt; a.txt</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        for循环&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            # 读文件已空格分隔</span><br><span class=\"line\">            w=`awk -F &quot;:&quot; &#x27;&#123;print $1&#125;&#x27; c`</span><br><span class=\"line\">            for d in $w</span><br><span class=\"line\">            do</span><br><span class=\"line\">                $d</span><br><span class=\"line\">            done</span><br><span class=\"line\">            ###########################</span><br><span class=\"line\">            for ((i=0;i&lt;$&#123;#o[*]&#125;;i++))</span><br><span class=\"line\">            do</span><br><span class=\"line\">            echo $&#123;o[$i]&#125;</span><br><span class=\"line\">            done</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        until循环&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            #  当command不为0时循环</span><br><span class=\"line\">            until command</span><br><span class=\"line\">            do</span><br><span class=\"line\">                body</span><br><span class=\"line\">            done</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        流程控制&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            break N     #  跳出几层循环</span><br><span class=\"line\">            continue N  #  跳出几层循环，循环次数不变</span><br><span class=\"line\">            continue    #  重新循环次数不变</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    变量&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        A=&quot;a b c def&quot;           # 将字符串复制给变量</span><br><span class=\"line\">        A=`cmd`                 # 将命令结果赋给变量</span><br><span class=\"line\">        A=$(cmd)                # 将命令结果赋给变量</span><br><span class=\"line\">        eval a=\\$$a             # 间接调用</span><br><span class=\"line\">        i=2&amp;&amp;echo $((i+3))      # 计算后打印新变量结果</span><br><span class=\"line\">        i=2&amp;&amp;echo $[i+3]        # 计算后打印新变量结果</span><br><span class=\"line\">        a=$((2&gt;6?5:8))          # 判断两个值满足条件的赋值给变量</span><br><span class=\"line\">        $1  $2  $*              # 位置参数 *代表所有</span><br><span class=\"line\">        env                     # 查看环境变量</span><br><span class=\"line\">        env | grep &quot;name&quot;       # 查看定义的环境变量</span><br><span class=\"line\">        set                     # 查看环境变量和本地变量</span><br><span class=\"line\">        read name               # 输入变量</span><br><span class=\"line\">        readonly name           # 把name这个变量设置为只读变量,不允许再次设置</span><br><span class=\"line\">        readonly                # 查看系统存在的只读文件</span><br><span class=\"line\">        export name             # 变量name由本地升为环境</span><br><span class=\"line\">        export name=&quot;RedHat&quot;    # 直接定义name为环境变量</span><br><span class=\"line\">        export Stat$nu=2222     # 变量引用变量赋值</span><br><span class=\"line\">        unset name              # 变量清除</span><br><span class=\"line\">        export -n name          # 去掉只读变量</span><br><span class=\"line\">        shift                   # 用于移动位置变量,调整位置变量,使$3的值赋给$2.$2的值赋予$1</span><br><span class=\"line\">        name + 0                # 将字符串转换为数字</span><br><span class=\"line\">        number &quot; &quot;              # 将数字转换成字符串</span><br><span class=\"line\">        a=&#x27;ee&#x27;;b=&#x27;a&#x27;;echo $&#123;!b&#125; # 间接引用name变量的值</span><br><span class=\"line\">        : $&#123;a=&quot;cc&quot;&#125;             # 如果a有值则不改变,如果a无值则赋值a变量为cc</span><br><span class=\"line\"></span><br><span class=\"line\">        数组&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            A=(a b c def)         # 将变量定义为数組</span><br><span class=\"line\">            $&#123;#A[*]&#125;              # 数组个数</span><br><span class=\"line\">            $&#123;A[*]&#125;               # 数组所有元素,大字符串</span><br><span class=\"line\">            $&#123;A[@]&#125;               # 数组所有元素,类似列表可迭代</span><br><span class=\"line\">            $&#123;A[2]&#125;               # 脚本的一个参数或数组第三位</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        定义变量类型&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            declare 或 typeset</span><br><span class=\"line\">            -r 只读(readonly一样)</span><br><span class=\"line\">            -i 整形</span><br><span class=\"line\">            -a 数组</span><br><span class=\"line\">            -f 函数</span><br><span class=\"line\">            -x export</span><br><span class=\"line\">            declare -i n=0</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        系统变量&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            $0   #  脚本启动名(包括路径)</span><br><span class=\"line\">            $n   #  第n个参数,n=1,2,…9</span><br><span class=\"line\">            $*   #  所有参数列表(不包括脚本本身)</span><br><span class=\"line\">            $@   #  所有参数列表(独立字符串)</span><br><span class=\"line\">            $#   #  参数个数(不包括脚本本身)</span><br><span class=\"line\">            $$   #  当前程式的PID</span><br><span class=\"line\">            $!   #  执行上一个指令的PID</span><br><span class=\"line\">            $?   #  执行上一个指令的返回值</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        变量引用技巧&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            $&#123;name:+value&#125;        # 如果设置了name,就把value显示,未设置则为空</span><br><span class=\"line\">            $&#123;name:-value&#125;        # 如果设置了name,就显示它,未设置就显示value</span><br><span class=\"line\">            $&#123;name:?value&#125;        # 未设置提示用户错误信息value </span><br><span class=\"line\">            $&#123;name:=value&#125;        # 如未设置就把value设置并显示&lt;写入本地中&gt;</span><br><span class=\"line\">            $&#123;#A&#125;                 # 可得到变量中字节</span><br><span class=\"line\">            $&#123;A:4:9&#125;              # 取变量中第4位到后面9位</span><br><span class=\"line\">            $&#123;A:(-1)&#125;             # 倒叙取最后一个字符</span><br><span class=\"line\">            $&#123;A/www/http&#125;         # 取变量并且替换每行第一个关键字</span><br><span class=\"line\">            $&#123;A//www/http&#125;        # 取变量并且全部替换每行关键字</span><br><span class=\"line\"></span><br><span class=\"line\">            定义了一个变量： file=/dir1/dir2/dir3/my.file.txt</span><br><span class=\"line\">            $&#123;file#*/&#125;     # 去掉第一条 / 及其左边的字串：dir1/dir2/dir3/my.file.txt</span><br><span class=\"line\">            $&#123;file##*/&#125;    # 去掉最后一条 / 及其左边的字串：my.file.txt</span><br><span class=\"line\">            $&#123;file#*.&#125;     # 去掉第一个 .  及其左边的字串：file.txt</span><br><span class=\"line\">            $&#123;file##*.&#125;    # 去掉最后一个 .  及其左边的字串：txt</span><br><span class=\"line\">            $&#123;file%/*&#125;     # 去掉最后条 / 及其右边的字串：/dir1/dir2/dir3</span><br><span class=\"line\">            $&#123;file%%/*&#125;    # 去掉第一条 / 及其右边的字串：(空值)</span><br><span class=\"line\">            $&#123;file%.*&#125;     # 去掉最后一个 .  及其右边的字串：/dir1/dir2/dir3/my.file</span><br><span class=\"line\">            $&#123;file%%.*&#125;    # 去掉第一个 .  及其右边的字串：/dir1/dir2/dir3/my</span><br><span class=\"line\">            #   # 是去掉左边(在键盘上 # 在 $ 之左边)</span><br><span class=\"line\">            #   % 是去掉右边(在键盘上 % 在 $ 之右边)</span><br><span class=\"line\">            #   单一符号是最小匹配﹔两个符号是最大匹配</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    test条件判断&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 符号 [ ] 等同  test命令</span><br><span class=\"line\"></span><br><span class=\"line\">        expression为字符串操作&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            -n str   # 字符串str是否不为空</span><br><span class=\"line\">            -z str   # 字符串str是否为空</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        expression为文件操作&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            -a     # 并且，两条件为真</span><br><span class=\"line\">            -b     # 是否块文件</span><br><span class=\"line\">            -p     # 文件是否为一个命名管道</span><br><span class=\"line\">            -c     # 是否字符文件</span><br><span class=\"line\">            -r     # 文件是否可读</span><br><span class=\"line\">            -d     # 是否一个目录</span><br><span class=\"line\">            -s     # 文件的长度是否不为零</span><br><span class=\"line\">            -e     # 文件是否存在</span><br><span class=\"line\">            -S     # 是否为套接字文件</span><br><span class=\"line\">            -f     # 是否普通文件</span><br><span class=\"line\">            -x     # 文件是否可执行，则为真</span><br><span class=\"line\">            -g     # 是否设置了文件的 SGID 位</span><br><span class=\"line\">            -u     # 是否设置了文件的 SUID 位</span><br><span class=\"line\">            -G     # 文件是否存在且归该组所有</span><br><span class=\"line\">            -w     # 文件是否可写，则为真</span><br><span class=\"line\">            -k     # 文件是否设置了的粘贴位</span><br><span class=\"line\">            -t fd  # fd 是否是个和终端相连的打开的文件描述符（fd 默认为 1）</span><br><span class=\"line\">            -o     # 或，一个条件为真</span><br><span class=\"line\">            -O     # 文件是否存在且归该用户所有</span><br><span class=\"line\">            !      # 取反</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        expression为整数操作&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            expr1 -a expr2   # 如果 expr1 和 expr2 评估为真，则为真</span><br><span class=\"line\">            expr1 -o expr2   # 如果 expr1 或 expr2 评估为真，则为真</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        两值比较&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">            整数     字符串</span><br><span class=\"line\">            -lt      &lt;         # 小于</span><br><span class=\"line\">            -gt      &gt;         # 大于</span><br><span class=\"line\">            -le      &lt;=        # 小于或等于</span><br><span class=\"line\">            -ge      &gt;=        # 大于或等于</span><br><span class=\"line\">            -eq      ==        # 等于</span><br><span class=\"line\">            -ne      !=        # 不等于</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        test 10 -lt 5       # 判断大小</span><br><span class=\"line\">        echo $?             # 查看上句test命令返回状态  # 结果0为真,1为假</span><br><span class=\"line\">        test -n &quot;hello&quot;     # 判断字符串长度是否为0</span><br><span class=\"line\">        [ $? -eq 0 ] &amp;&amp; echo &quot;success&quot; || exit　　　# 判断成功提示,失败则退出</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    重定向&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        #  标准输出 stdout 和 标准错误 stderr  标准输入stdin</span><br><span class=\"line\">        cmd 1&gt; fiel              # 把 标准输出 重定向到 file 文件中</span><br><span class=\"line\">        cmd &gt; file 2&gt;&amp;1          # 把 标准输出 和 标准错误 一起重定向到 file 文件中</span><br><span class=\"line\">        cmd 2&gt; file              # 把 标准错误 重定向到 file 文件中</span><br><span class=\"line\">        cmd 2&gt;&gt; file             # 把 标准错误 重定向到 file 文件中(追加)</span><br><span class=\"line\">        cmd &gt;&gt; file 2&gt;&amp;1         # 把 标准输出 和 标准错误 一起重定向到 file 文件中(追加)</span><br><span class=\"line\">        cmd &lt; file &gt;file2        # cmd 命令以 file 文件作为 stdin(标准输入)，以 file2 文件作为 标准输出</span><br><span class=\"line\">        cat &lt;&gt;file               # 以读写的方式打开 file</span><br><span class=\"line\">        cmd &lt; file cmd           # 命令以 file 文件作为 stdin</span><br><span class=\"line\">        cmd &lt;&lt; delimiter</span><br><span class=\"line\">        cmd; #从 stdin 中读入，直至遇到 delimiter 分界符</span><br><span class=\"line\">delimiter</span><br><span class=\"line\"></span><br><span class=\"line\">        &gt;&amp;n    # 使用系统调用 dup (2) 复制文件描述符 n 并把结果用作标准输出</span><br><span class=\"line\">        &lt;&amp;n    # 标准输入复制自文件描述符 n</span><br><span class=\"line\">        &lt;&amp;-    # 关闭标准输入（键盘）</span><br><span class=\"line\">        &gt;&amp;-    # 关闭标准输出</span><br><span class=\"line\">        n&lt;&amp;-   # 表示将 n 号输入关闭</span><br><span class=\"line\">        n&gt;&amp;-   # 表示将 n 号输出关闭</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    运算符&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        $[]等同于$(())  # $[]表示形式告诉shell求中括号中的表达式的值</span><br><span class=\"line\">        ~var            # 按位取反运算符,把var中所有的二进制为1的变为0,为0的变为1</span><br><span class=\"line\">        var\\&lt;&lt;str       # 左移运算符,把var中的二进制位向左移动str位,忽略最左端移出的各位,最右端的各位上补上0值,每做一次按位左移就有var乘2</span><br><span class=\"line\">        var&gt;&gt;str        # 右移运算符,把var中所有的二进制位向右移动str位,忽略最右移出的各位,最左的各位上补0,每次做一次右移就有实现var除以2</span><br><span class=\"line\">        var&amp;str         # 与比较运算符,var和str对应位,对于每个二进制来说,如果二都为1,结果为1.否则为0</span><br><span class=\"line\">        var^str         # 异或运算符,比较var和str对应位,对于二进制来说如果二者互补,结果为1,否则为0</span><br><span class=\"line\">        var|str         # 或运算符,比较var和str的对应位,对于每个二进制来说,如二都该位有一个1或都是1,结果为1,否则为0</span><br><span class=\"line\"></span><br><span class=\"line\">        运算符优先级&#123;</span><br><span class=\"line\">            级别      运算符                                  说明</span><br><span class=\"line\">            1      =,+=,-=,/=,%=,*=,&amp;=,^=,|=,&lt;&lt;=,&gt;&gt;=      # 赋值运算符</span><br><span class=\"line\">            2         ||                                  # 逻辑或 前面不成功执行</span><br><span class=\"line\">            3         &amp;&amp;                                  # 逻辑与 前面成功后执行</span><br><span class=\"line\">            4         |                                   # 按位或</span><br><span class=\"line\">            5         ^                                   # 按位异或</span><br><span class=\"line\">            6         &amp;                                   # 按位与</span><br><span class=\"line\">            7         ==,!=                               # 等于/不等于</span><br><span class=\"line\">            8         &lt;=,&gt;=,&lt;,&gt;                           # 小于或等于/大于或等于/小于/大于</span><br><span class=\"line\">            9        \\&lt;&lt;,&gt;&gt;                               # 按位左移/按位右移 (无转意符号)</span><br><span class=\"line\">            10        +,-                                 # 加减</span><br><span class=\"line\">            11        *,/,%                               # 乘,除,取余</span><br><span class=\"line\">            12        ! ,~                                # 逻辑非,按位取反或补码</span><br><span class=\"line\">            13        -,+                                 # 正负</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    数学运算&#123;</span><br><span class=\"line\">        $(( ))        # 整数运算</span><br><span class=\"line\">        + - * / **    # 分別为 &quot;加、減、乘、除、密运算&quot;</span><br><span class=\"line\">        &amp; | ^ !       # 分別为 &quot;AND、OR、XOR、NOT&quot; 运算</span><br><span class=\"line\">        %             # 余数运算</span><br><span class=\"line\">        let&#123;</span><br><span class=\"line\">            let # 运算</span><br><span class=\"line\">            let x=16/4</span><br><span class=\"line\">            let x=5**5</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        expr&#123;</span><br><span class=\"line\">            expr 14 % 9                    # 整数运算</span><br><span class=\"line\">            SUM=`expr 2 \\* 3`              # 乘后结果赋值给变量</span><br><span class=\"line\">            LOOP=`expr $LOOP + 1`          # 增量计数(加循环即可) LOOP=0</span><br><span class=\"line\">            expr length &quot;bkeep zbb&quot;        # 计算字串长度</span><br><span class=\"line\">            expr substr &quot;bkeep zbb&quot; 4 9    # 抓取字串</span><br><span class=\"line\">            expr index &quot;bkeep zbb&quot; e       # 抓取第一个字符数字串出现的位置</span><br><span class=\"line\">            expr 30 / 3 / 2                # 运算符号有空格</span><br><span class=\"line\">            expr bkeep.doc : &#x27;.*&#x27;          # 模式匹配(可以使用expr通过指定冒号选项计算字符串中字符数)</span><br><span class=\"line\">            expr bkeep.doc : &#x27;\\(.*\\).doc&#x27;  # 在expr中可以使用字符串匹配操作，这里使用模式抽取.doc文件附属名</span><br><span class=\"line\">            数值测试&#123;</span><br><span class=\"line\">                #如果试图计算非整数，则会返回错误</span><br><span class=\"line\">                rr=3.4</span><br><span class=\"line\">                expr $rr + 1</span><br><span class=\"line\">                expr: non-numeric argument</span><br><span class=\"line\">                rr=5</span><br><span class=\"line\">                expr $rr + 1</span><br><span class=\"line\">                6</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        bc&#123;</span><br><span class=\"line\">            echo &quot;m^n&quot;|bc            # 次方计算</span><br><span class=\"line\">            seq -s &#x27;+&#x27; 1000 |bc      # 从1加到1000</span><br><span class=\"line\">            seq 1 1000 |tr &quot;\\n&quot; &quot;+&quot;|sed &#x27;s/+$/\\n/&#x27;|bc   # 从1加到1000</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    grep&#123;</span><br><span class=\"line\">        -c    # 显示匹配到得行的数目，不显示内容</span><br><span class=\"line\">        -h    # 不显示文件名</span><br><span class=\"line\">        -i    # 忽略大小写</span><br><span class=\"line\">        -l    # 只列出匹配行所在文件的文件名</span><br><span class=\"line\">        -n    # 在每一行中加上相对行号</span><br><span class=\"line\">        -s    # 无声操作只显示报错，检查退出状态</span><br><span class=\"line\">        -v    # 反向查找</span><br><span class=\"line\">        -e    # 使用正则表达式</span><br><span class=\"line\">        -w    # 精确匹配</span><br><span class=\"line\">        -wc   # 精确匹配次数</span><br><span class=\"line\">        -o    # 查询所有匹配字段</span><br><span class=\"line\">        -P    # 使用perl正则表达式</span><br><span class=\"line\">        -A3   # 打印匹配行和下三行</span><br><span class=\"line\">        -B3   # 打印匹配行和上三行</span><br><span class=\"line\">        -C3   # 打印匹配行和上下三行</span><br><span class=\"line\">        grep -v &quot;a&quot; txt                              # 过滤关键字符行</span><br><span class=\"line\">        grep -w &#x27;a\\&gt;&#x27; txt                            # 精确匹配字符串</span><br><span class=\"line\">        grep -i &quot;a&quot; txt                              # 大小写敏感</span><br><span class=\"line\">        grep  &quot;a[bB]&quot; txt                            # 同时匹配大小写</span><br><span class=\"line\">        grep &#x27;[0-9]\\&#123;3\\&#125;&#x27; txt                        # 查找0-9重复三次的所在行</span><br><span class=\"line\">        grep -E &quot;word1|word2|word3&quot;   file           # 任意条件匹配</span><br><span class=\"line\">        grep word1 file | grep word2 |grep word3     # 同时匹配三个</span><br><span class=\"line\">        echo quan@163.com |grep -Po &#x27;(?&lt;=@.).*(?=.$)&#x27;                           # 零宽断言截取字符串  #　63.co</span><br><span class=\"line\">        echo &quot;I&#x27;m singing while you&#x27;re dancing&quot; |grep -Po &#x27;\\b\\w+(?=ing\\b)&#x27;      # 零宽断言匹配</span><br><span class=\"line\">        echo &#x27;Rx Optical Power: -5.01dBm, Tx Optical Power: -2.41dBm&#x27; |grep -Po &#x27;(?&lt;=:).*?(?=d)&#x27;           # 取出d前面数字 # ?为最小匹配</span><br><span class=\"line\">        echo &#x27;Rx Optical Power: -5.01dBm, Tx Optical Power: -2.41dBm&#x27; | grep -Po &#x27;[-0-9.]+&#x27;                # 取出d前面数字 # ?为最小匹配</span><br><span class=\"line\">        echo &#x27;[&quot;mem&quot;,ok],[&quot;hardware&quot;,false],[&quot;filesystem&quot;,false]&#x27; |grep -Po &#x27;[^&quot;]+(?=&quot;,false)&#x27;             # 取出false前面的字母</span><br><span class=\"line\">        echo &#x27;[&quot;mem&quot;,ok],[&quot;hardware&quot;,false],[&quot;filesystem&quot;,false]&#x27; |grep -Po &#x27;\\w+&quot;,false&#x27;|grep -Po &#x27;^\\w+&#x27;   # 取出false前面的字母</span><br><span class=\"line\">        grep用于if判断&#123;</span><br><span class=\"line\">            if echo abc | grep &quot;a&quot;  &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">            then</span><br><span class=\"line\">                echo &quot;abc&quot;</span><br><span class=\"line\">            else</span><br><span class=\"line\">                echo &quot;null&quot;</span><br><span class=\"line\">            fi</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tr&#123;</span><br><span class=\"line\">        -c          # 用字符串1中字符集的补集替换此字符集，要求字符集为ASCII</span><br><span class=\"line\">        -d          # 删除字符串1中所有输入字符</span><br><span class=\"line\">        -s          # 删除所有重复出现字符序列，只保留第一个:即将重复出现字符串压缩为一个字符串</span><br><span class=\"line\">        [a-z]       # a-z内的字符组成的字符串</span><br><span class=\"line\">        [A-Z]       # A-Z内的字符组成的字符串</span><br><span class=\"line\">        [0-9]       # 数字串</span><br><span class=\"line\">        \\octal      # 一个三位的八进制数，对应有效的ASCII字符</span><br><span class=\"line\">        [O*n]       # 表示字符O重复出现指定次数n。因此[O*2]匹配OO的字符串</span><br><span class=\"line\">        tr中特定控制字符表达方式&#123;</span><br><span class=\"line\">            \\a Ctrl-G    \\007    # 铃声</span><br><span class=\"line\">            \\b Ctrl-H    \\010    # 退格符</span><br><span class=\"line\">            \\f Ctrl-L    \\014    # 走行换页</span><br><span class=\"line\">            \\n Ctrl-J    \\012    # 新行</span><br><span class=\"line\">            \\r Ctrl-M    \\015    # 回车</span><br><span class=\"line\">            \\t Ctrl-I    \\011    # tab键</span><br><span class=\"line\">            \\v Ctrl-X    \\030</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        tr A-Z a-z                             # 将所有大写转换成小写字母</span><br><span class=\"line\">        tr &quot; &quot; &quot;\\n&quot;                            # 将空格替换为换行</span><br><span class=\"line\">        tr -s &quot;[\\012]&quot; &lt; plan.txt              # 删除空行</span><br><span class=\"line\">        tr -s [&quot;\\n&quot;] &lt; plan.txt                # 删除空行</span><br><span class=\"line\">        tr -s &quot;[\\015]&quot; &quot;[\\n]&quot; &lt; file           # 删除文件中的^M，并代之以换行</span><br><span class=\"line\">        tr -s &quot;[\\r]&quot; &quot;[\\n]&quot; &lt; file             # 删除文件中的^M，并代之以换行</span><br><span class=\"line\">        tr -s &quot;[:]&quot; &quot;[\\011]&quot; &lt; /etc/passwd     # 替换passwd文件中所有冒号，代之以tab键</span><br><span class=\"line\">        tr -s &quot;[:]&quot; &quot;[\\t]&quot; &lt; /etc/passwd       # 替换passwd文件中所有冒号，代之以tab键</span><br><span class=\"line\">        echo $PATH | tr &quot;:&quot; &quot;\\n&quot;               # 增加显示路径可读性</span><br><span class=\"line\">        1,$!tr -d &#x27;\\t&#x27;                         # tr在vi内使用，在tr前加处理行范围和感叹号(&#x27;$&#x27;表示最后一行)</span><br><span class=\"line\">        tr &quot;\\r&quot; &quot;\\n&quot;&lt;macfile &gt; unixfile        # Mac -&gt; UNIX</span><br><span class=\"line\">        tr &quot;\\n&quot; &quot;\\r&quot;&lt;unixfile &gt; macfile        # UNIX -&gt; Mac</span><br><span class=\"line\">        tr -d &quot;\\r&quot;&lt;dosfile &gt; unixfile          # DOS -&gt; UNIX  Microsoft DOS/Windows 约定，文本的每行以回车字符(\\r)并后跟换行符(\\n)结束</span><br><span class=\"line\">        awk &#x27;&#123; print $0&quot;\\r&quot; &#125;&#x27;&lt;unixfile &gt; dosfile   # UNIX -&gt; DOS：在这种情况下，需要用awk，因为tr不能插入两个字符来替换一个字符</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    seq&#123;</span><br><span class=\"line\">        # 不指定起始数值，则默认为 1</span><br><span class=\"line\">        -s   # 选项主要改变输出的分格符, 预设是 \\n</span><br><span class=\"line\">        -w   # 等位补全，就是宽度相等，不足的前面补 0</span><br><span class=\"line\">        -f   # 格式化输出，就是指定打印的格式</span><br><span class=\"line\">        seq 10 100               # 列出10-100</span><br><span class=\"line\">        seq 1 10 |tac            # 倒叙列出</span><br><span class=\"line\">        seq -s &#x27;+&#x27; 90 100 |bc    # 从90加到100</span><br><span class=\"line\">        seq -f &#x27;dir%g&#x27; 1 10 | xargs mkdir     # 创建dir1-10</span><br><span class=\"line\">        seq -f &#x27;dir%03g&#x27; 1 10 | xargs mkdir   # 创建dir001-010</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    trap&#123;</span><br><span class=\"line\">        信号         说明</span><br><span class=\"line\">        HUP(1)     # 挂起，通常因终端掉线或用户退出而引发</span><br><span class=\"line\">        INT(2)     # 中断，通常因按下Ctrl+C组合键而引发</span><br><span class=\"line\">        QUIT(3)    # 退出，通常因按下Ctrl+\\组合键而引发</span><br><span class=\"line\">        ABRT(6)    # 中止，通常因某些严重的执行错误而引发</span><br><span class=\"line\">        ALRM(14)   # 报警，通常用来处理超时</span><br><span class=\"line\">        TERM(15)   # 终止，通常在系统关机时发送</span><br><span class=\"line\">        trap捕捉到信号之后，可以有三种反应方式：</span><br><span class=\"line\">            1、执行一段程序来处理这一信号</span><br><span class=\"line\">            2、接受信号的默认操作</span><br><span class=\"line\">            3、忽视这一信号</span><br><span class=\"line\">        第一种形式的trap命令在shell接收到 signal list 清单中数值相同的信号时，将执行双引号中的命令串：</span><br><span class=\"line\">        trap &#x27;commands&#x27; signal-list   # 单引号，要在shell探测到信号来的时候才执行命令和变量的替换，时间一直变</span><br><span class=\"line\">        trap &quot;commands&quot; signal-list   # 双引号，shell第一次设置信号的时候就执行命令和变量的替换，时间不变</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    awk&#123;</span><br><span class=\"line\">        # 默认是执行打印全部 print $0</span><br><span class=\"line\">        # 1为真 打印$0</span><br><span class=\"line\">        # 0为假 不打印</span><br><span class=\"line\">        -F   # 改变FS值(分隔符)</span><br><span class=\"line\">        ~    # 域匹配</span><br><span class=\"line\">        ==   # 变量匹配</span><br><span class=\"line\">        !~   # 匹配不包含</span><br><span class=\"line\">        =    # 赋值</span><br><span class=\"line\">        !=   # 不等于</span><br><span class=\"line\">        +=   # 叠加</span><br><span class=\"line\">        \\b   # 退格</span><br><span class=\"line\">        \\f   # 换页</span><br><span class=\"line\">        \\n   # 换行</span><br><span class=\"line\">        \\r   # 回车</span><br><span class=\"line\">        \\t   # 制表符Tab</span><br><span class=\"line\">        \\c   # 代表任一其他字符</span><br><span class=\"line\">        -F&quot;[ ]+|[%]+&quot;  # 多个空格或多个%为分隔符</span><br><span class=\"line\">        [a-z]+         # 多个小写字母</span><br><span class=\"line\">        [a-Z]          # 代表所有大小写字母(aAbB...zZ)</span><br><span class=\"line\">        [a-z]          # 代表所有大小写字母(ab...z)</span><br><span class=\"line\">        [:alnum:]      # 字母数字字符</span><br><span class=\"line\">        [:alpha:]      # 字母字符</span><br><span class=\"line\">        [:cntrl:]      # 控制字符</span><br><span class=\"line\">        [:digit:]      # 数字字符</span><br><span class=\"line\">        [:graph:]      # 非空白字符(非空格、控制字符等)</span><br><span class=\"line\">        [:lower:]      # 小写字母</span><br><span class=\"line\">        [:print:]      # 与[:graph:]相似，但是包含空格字符</span><br><span class=\"line\">        [:punct:]      # 标点字符</span><br><span class=\"line\">        [:space:]      # 所有的空白字符(换行符、空格、制表符)</span><br><span class=\"line\">        [:upper:]      # 大写字母</span><br><span class=\"line\">        [:xdigit:]     # 十六进制的数字(0-9a-fA-F)</span><br><span class=\"line\">        [[:digit:][:lower:]]    # 数字和小写字母(占一个字符)</span><br><span class=\"line\">        内建变量&#123;</span><br><span class=\"line\">            $n            # 当前记录的第 n 个字段，字段间由 FS 分隔</span><br><span class=\"line\">            $0            # 完整的输入记录</span><br><span class=\"line\">            ARGC          # 命令行参数的数目</span><br><span class=\"line\">            ARGIND        # 命令行中当前文件的位置 ( 从 0 开始算 )</span><br><span class=\"line\">            ARGV          # 包含命令行参数的数组</span><br><span class=\"line\">            CONVFMT       # 数字转换格式 ( 默认值为 %.6g)</span><br><span class=\"line\">            ENVIRON       # 环境变量关联数组</span><br><span class=\"line\">            ERRNO         # 最后一个系统错误的描述</span><br><span class=\"line\">            FIELDWIDTHS   # 字段宽度列表 ( 用空格键分隔 )</span><br><span class=\"line\">            FILENAME      # 当前文件名</span><br><span class=\"line\">            FNR           # 同 NR ，但相对于当前文件</span><br><span class=\"line\">            FS            # 字段分隔符 ( 默认是任何空格 )</span><br><span class=\"line\">            IGNORECASE    # 如果为真（即非 0 值），则进行忽略大小写的匹配</span><br><span class=\"line\">            NF            # 当前记录中的字段数(列)</span><br><span class=\"line\">            NR            # 当前行数</span><br><span class=\"line\">            OFMT          # 数字的输出格式 ( 默认值是 %.6g)</span><br><span class=\"line\">            OFS           # 输出字段分隔符 ( 默认值是一个空格 )</span><br><span class=\"line\">            ORS           # 输出记录分隔符 ( 默认值是一个换行符 )</span><br><span class=\"line\">            RLENGTH       # 由 match 函数所匹配的字符串的长度</span><br><span class=\"line\">            RS            # 记录分隔符 ( 默认是一个换行符 )</span><br><span class=\"line\">            RSTART        # 由 match 函数所匹配的字符串的第一个位置</span><br><span class=\"line\">            SUBSEP        # 数组下标分隔符 ( 默认值是 /034)</span><br><span class=\"line\">            BEGIN         # 先处理(可不加文件参数)</span><br><span class=\"line\">            END           # 结束时处理</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        内置函数&#123;</span><br><span class=\"line\">            gsub(r,s)          # 在整个$0中用s替代r   相当于 sed &#x27;s///g&#x27;</span><br><span class=\"line\">            gsub(r,s,t)        # 在整个t中用s替代r</span><br><span class=\"line\">            index(s,t)         # 返回s中字符串t的第一位置</span><br><span class=\"line\">            length(s)          # 返回s长度</span><br><span class=\"line\">            match(s,r)         # 测试s是否包含匹配r的字符串</span><br><span class=\"line\">            split(s,a,fs)      # 在fs上将s分成序列a</span><br><span class=\"line\">            sprint(fmt,exp)    # 返回经fmt格式化后的exp</span><br><span class=\"line\">            sub(r,s)           # 用$0中最左边最长的子串代替s   相当于 sed &#x27;s///&#x27;</span><br><span class=\"line\">            substr(s,p)        # 返回字符串s中从p开始的后缀部分</span><br><span class=\"line\">            substr(s,p,n)      # 返回字符串s中从p开始长度为n的后缀部分</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        awk判断&#123;</span><br><span class=\"line\">\t\t    zgrep &quot; 200 &quot; access.log-202109*.gz |awk &#x27;&#123;if ( $10 &gt; 200) &#123; print $7 &#125;&#125;&#x27; |awk -F&quot;?&quot; &#x27;&#123; print $1 &#125;&#x27;|sort|uniq -c|sort -nr</span><br><span class=\"line\">            awk &#x27;&#123;print ($1&gt;$2)?&quot;第一排&quot;$1:&quot;第二排&quot;$2&#125;&#x27;      # 条件判断 括号代表if语句判断 &quot;?&quot;代表then &quot;:&quot;代表else</span><br><span class=\"line\">            awk &#x27;&#123;max=($1&gt;$2)? $1 : $2; print max&#125;&#x27;          # 条件判断 如果$1大于$2,max值为为$1,否则为$2</span><br><span class=\"line\">            awk &#x27;&#123;if ( $6 &gt; 50) print $1 &quot; Too high&quot; ;\\</span><br><span class=\"line\">            else print &quot;Range is OK&quot;&#125;&#x27; file</span><br><span class=\"line\">            awk &#x27;&#123;if ( $6 &gt; 50) &#123; count++;print $3 &#125; \\</span><br><span class=\"line\">            else &#123; x+5; print $2 &#125; &#125;&#x27; file</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        awk循环&#123;</span><br><span class=\"line\">            awk &#x27;&#123;i = 1; while ( i &lt;= NF ) &#123; print NF, $i ; i++ &#125; &#125;&#x27; file</span><br><span class=\"line\">            awk &#x27;&#123; for ( i = 1; i &lt;= NF; i++ ) print NF,$i &#125;&#x27; file</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        awk &#x27;/Tom/&#x27; file               # 打印匹配到得行</span><br><span class=\"line\">        awk &#x27;/^Tom/&#123;print $1&#125;&#x27;         # 匹配Tom开头的行 打印第一个字段</span><br><span class=\"line\">        awk &#x27;$1 !~ /ly$/&#x27;              # 显示所有第一个字段不是以ly结尾的行</span><br><span class=\"line\">        awk &#x27;$3 &lt;40&#x27;                   # 如果第三个字段值小于40才打印</span><br><span class=\"line\">        awk &#x27;$4==90&#123;print $5&#125;&#x27;         # 取出第四列等于90的第五列</span><br><span class=\"line\">        awk &#x27;/^(no|so)/&#x27; test          # 打印所有以模式no或so开头的行</span><br><span class=\"line\">        awk &#x27;$3 * $4 &gt; 500&#x27;            # 算术运算(第三个字段和第四个字段乘积大于500则显示)</span><br><span class=\"line\">        awk &#x27;&#123;print NR&quot; &quot;$0&#125;&#x27;          # 加行号</span><br><span class=\"line\">        awk &#x27;/tom/,/suz/&#x27;              # 打印tom到suz之间的行</span><br><span class=\"line\">        awk &#x27;&#123;a+=$1&#125;END&#123;print a&#125;&#x27;      # 列求和</span><br><span class=\"line\">        awk &#x27;sum+=$1&#123;print sum&#125;&#x27;       # 将$1的值叠加后赋给sum</span><br><span class=\"line\">        awk &#x27;&#123;a+=$1&#125;END&#123;print a/NR&#125;&#x27;   # 列求平均值</span><br><span class=\"line\">        awk &#x27;!s[$1 $3]++&#x27; file         # 根据第一列和第三列过滤重复行</span><br><span class=\"line\">        awk -F&#x27;[ :\\t]&#x27; &#x27;&#123;print $1,$2&#125;&#x27;           # 以空格、:、制表符Tab为分隔符</span><br><span class=\"line\">        awk &#x27;&#123;print &quot;&#x27;&quot;$a&quot;&#x27;&quot;,&quot;&#x27;&quot;$b&quot;&#x27;&quot;&#125;&#x27;          # 引用外部变量</span><br><span class=\"line\">        awk &#x27;&#123;if(NR==52)&#123;print;exit&#125;&#125;&#x27;           # 显示第52行</span><br><span class=\"line\">        awk &#x27;/关键字/&#123;a=NR+2&#125;a==NR &#123;print&#125;&#x27;      # 取关键字下第几行</span><br><span class=\"line\">        awk &#x27;gsub(/liu/,&quot;aaaa&quot;,$1)&#123;print $0&#125;&#x27;    # 只打印匹配替换后的行</span><br><span class=\"line\">        ll | awk -F&#x27;[ ]+|[ ][ ]+&#x27; &#x27;/^$/&#123;print $8&#125;&#x27;             # 提取时间,空格不固定</span><br><span class=\"line\">        awk &#x27;&#123;$1=&quot;&quot;;$2=&quot;&quot;;$3=&quot;&quot;;print&#125;&#x27;                        # 去掉前三列</span><br><span class=\"line\">        echo aada:aba|awk &#x27;/d/||/b/&#123;print&#125;&#x27;                    # 匹配两内容之一</span><br><span class=\"line\">        echo aada:abaa|awk -F: &#x27;$1~/d/||$2~/b/&#123;print&#125;&#x27;         # 关键列匹配两内容之一</span><br><span class=\"line\">        echo Ma asdas|awk &#x27;$1~/^[a-Z][a-Z]$/&#123;print &#125;&#x27;          # 第一个域匹配正则</span><br><span class=\"line\">        echo aada:aaba|awk &#x27;/d/&amp;&amp;/b/&#123;print&#125;&#x27;                   # 同时匹配两条件</span><br><span class=\"line\">        awk &#x27;length($1)==&quot;4&quot;&#123;print $1&#125;&#x27;                        # 字符串位数</span><br><span class=\"line\">        awk &#x27;&#123;if($2&gt;3)&#123;system (&quot;touch &quot;$1)&#125;&#125;&#x27;                  # 执行系统命令</span><br><span class=\"line\">        awk &#x27;&#123;sub(/Mac/,&quot;Macintosh&quot;,$0);print&#125;&#x27;                # 用Macintosh替换Mac</span><br><span class=\"line\">        awk &#x27;&#123;gsub(/Mac/,&quot;MacIntosh&quot;,$1); print&#125;&#x27;              # 第一个域内用Macintosh替换Mac</span><br><span class=\"line\">        awk -F &#x27;&#x27; &#x27;&#123; for(i=1;i&lt;NF+1;i++)a+=$i  ;print a&#125;&#x27;      # 多位数算出其每位数的总和.比如 1234， 得到 10</span><br><span class=\"line\">        awk &#x27;&#123; i=$1%10;if ( i == 0 ) &#123;print i&#125;&#125;&#x27;               # 判断$1是否整除(awk中定义变量引用时不能带 $ )</span><br><span class=\"line\">        awk &#x27;BEGIN&#123;a=0&#125;&#123;if ($1&gt;a) a=$1 fi&#125;END&#123;print a&#125;&#x27;        # 列求最大值  设定一个变量开始为0，遇到比该数大的值，就赋值给该变量，直到结束</span><br><span class=\"line\">        awk &#x27;BEGIN&#123;a=11111&#125;&#123;if ($1&lt;a) a=$1 fi&#125;END&#123;print a&#125;&#x27;    # 求最小值</span><br><span class=\"line\">        awk &#x27;&#123;if(A)print;A=0&#125;/regexp/&#123;A=1&#125;&#x27;                    # 查找字符串并将匹配行的下一行显示出来，但并不显示匹配行</span><br><span class=\"line\">        awk &#x27;/regexp/&#123;print A&#125;&#123;A=$0&#125;&#x27;                          # 查找字符串并将匹配行的上一行显示出来，但并不显示匹配行</span><br><span class=\"line\">        awk &#x27;&#123;if(!/mysql/)gsub(/1/,&quot;a&quot;);print $0&#125;&#x27;             # 将1替换成a，并且只在行中未出现字串mysql的情况下替换</span><br><span class=\"line\">        awk &#x27;BEGIN&#123;srand();fr=int(100*rand());print fr;&#125;&#x27;      # 获取随机数</span><br><span class=\"line\">        awk &#x27;&#123;if(NR==3)F=1&#125;&#123;if(F)&#123;i++;if(i%7==1)print&#125;&#125;&#x27;       # 从第3行开始，每7行显示一次</span><br><span class=\"line\">        awk &#x27;&#123;if(NF&lt;1)&#123;print i;i=0&#125; else &#123;i++;print $0&#125;&#125;&#x27;      # 显示空行分割各段的行数</span><br><span class=\"line\">        echo +null:null  |awk -F: &#x27;$1!~&quot;^+&quot;&amp;&amp;$2!=&quot;null&quot;&#123;print $0&#125;&#x27;       # 关键列同时匹配</span><br><span class=\"line\">        awk -v RS=@ &#x27;NF&#123;for(i=1;i&lt;=NF;i++)if($i) printf $i;print &quot;&quot;&#125;&#x27;    # 指定记录分隔符</span><br><span class=\"line\">        awk &#x27;&#123;b[$1]=b[$1]$2&#125;END&#123;for(i in b)&#123;print i,b[i]&#125;&#125;&#x27;              # 列叠加</span><br><span class=\"line\">        awk &#x27;&#123; i=($1%100);if ( $i &gt;= 0 ) &#123;print $0,$i&#125;&#125;&#x27;                 # 求余数</span><br><span class=\"line\">        awk &#x27;&#123;b=a;a=$1; if(NR&gt;1)&#123;print a-b&#125;&#125;&#x27;                            # 当前行减上一行</span><br><span class=\"line\">        awk &#x27;&#123;a[NR]=$1&#125;END&#123;for (i=1;i&lt;=NR;i++)&#123;print a[i]-a[i-1]&#125;&#125;&#x27;      # 当前行减上一行</span><br><span class=\"line\">        awk -F: &#x27;&#123;name[x++]=$1&#125;;END&#123;for(i=0;i&lt;NR;i++)print i,name[i]&#125;&#x27;   # END只打印最后的结果,END块里面处理数组内容</span><br><span class=\"line\">        awk &#x27;&#123;sum2+=$2;count=count+1&#125;END&#123;print sum2,sum2/count&#125;&#x27;         # $2的总和  $2总和除个数(平均值)</span><br><span class=\"line\">        awk -v a=0 -F &#x27;B&#x27; &#x27;&#123;for (i=1;i&lt;NF;i++)&#123; a=a+length($i)+1;print a  &#125;&#125;&#x27;     # 打印所以B的所在位置</span><br><span class=\"line\">        awk &#x27;BEGIN&#123; &quot;date&quot; | getline d; split(d,mon) ; print mon[2]&#125;&#x27; file        # 将date值赋给d，并将d设置为数组mon，打印mon数组中第2个元素</span><br><span class=\"line\">        awk &#x27;BEGIN&#123;info=&quot;this is a test2010test!&quot;;print substr(info,4,10);&#125;&#x27;      # 截取字符串(substr使用)</span><br><span class=\"line\">        awk &#x27;BEGIN&#123;info=&quot;this is a test2010test!&quot;;print index(info,&quot;test&quot;)?&quot;ok&quot;:&quot;no found&quot;;&#125;&#x27;      # 匹配字符串(index使用)</span><br><span class=\"line\">        awk &#x27;BEGIN&#123;info=&quot;this is a test2010test!&quot;;print match(info,/[0-9]+/)?&quot;ok&quot;:&quot;no found&quot;;&#125;&#x27;    # 正则表达式匹配查找(match使用)</span><br><span class=\"line\">        awk &#x27;&#123;for(i=1;i&lt;=4;i++)printf $i&quot;&quot;FS; for(y=10;y&lt;=13;y++)  printf $y&quot;&quot;FS;print &quot;&quot;&#125;&#x27;        # 打印前4列和后4列</span><br><span class=\"line\">        awk &#x27;BEGIN&#123;for(n=0;n++&lt;9;)&#123;for(i=0;i++&lt;n;)printf i&quot;x&quot;n&quot;=&quot;i*n&quot; &quot;;print &quot;&quot;&#125;&#125;&#x27;                # 乘法口诀</span><br><span class=\"line\">        awk &#x27;BEGIN&#123;info=&quot;this is a test&quot;;split(info,tA,&quot; &quot;);print length(tA);for(k in tA)&#123;print k,tA[k];&#125;&#125;&#x27;             # 字符串分割(split使用)</span><br><span class=\"line\">        awk &#x27;&#123;if (system (&quot;grep &quot;$2&quot; tmp/* &gt; /dev/null 2&gt;&amp;1&quot;) == 0 ) &#123;print $1,&quot;Y&quot;&#125; else &#123;print $1,&quot;N&quot;&#125; &#125;&#x27; a            # 执行系统命令判断返回状态</span><br><span class=\"line\">        awk  &#x27;&#123;for(i=1;i&lt;=NF;i++) a[i,NR]=$i&#125;END&#123;for(i=1;i&lt;=NF;i++) &#123;for(j=1;j&lt;=NR;j++) printf a[i,j] &quot; &quot;;print &quot;&quot;&#125;&#125;&#x27;   # 将多行转多列</span><br><span class=\"line\">        netstat -an|awk -v A=$IP -v B=$PORT &#x27;BEGIN&#123;print &quot;Clients\\tGuest_ip&quot;&#125;$4~A&quot;:&quot;B&#123;split($5,ip,&quot;:&quot;);a[ip[1]]++&#125;END&#123;for(i in a)print a[i]&quot;\\t&quot;i|&quot;sort -nr&quot;&#125;&#x27;    # 统计IP连接个数</span><br><span class=\"line\">        cat 1.txt|awk -F&quot; # &quot; &#x27;&#123;print &quot;insert into user (user,password,email)values(&quot;&quot;&#x27;\\&#x27;&#x27;&quot;$1&quot;&#x27;\\&#x27;\\,&#x27;&quot;&quot;&#x27;\\&#x27;&#x27;&quot;$2&quot;&#x27;\\&#x27;\\,&#x27;&quot;&quot;&#x27;\\&#x27;&#x27;&quot;$3&quot;&#x27;\\&#x27;\\)\\;&#x27;&quot;&#125;&#x27; &gt;&gt;insert_1.txt     # 处理sql语句</span><br><span class=\"line\">        awk &#x27;BEGIN&#123;printf &quot;what is your name?&quot;;getline name &lt; &quot;/dev/tty&quot; &#125; $1 ~name &#123;print &quot;FOUND&quot; name &quot; on line &quot;, NR &quot;.&quot;&#125; END&#123;print &quot;see you,&quot; name &quot;.&quot;&#125;&#x27; file  # 两文件匹配</span><br><span class=\"line\">        取本机IP&#123;</span><br><span class=\"line\">            /sbin/ifconfig |awk -v RS=&quot;Bcast:&quot; &#x27;&#123;print $NF&#125;&#x27;|awk -F: &#x27;/addr/&#123;print $2&#125;&#x27;</span><br><span class=\"line\">            /sbin/ifconfig |awk &#x27;/inet/&amp;&amp;$2!~&quot;127.0.0.1&quot;&#123;split($2,a,&quot;:&quot;);print a[2]&#125;&#x27;</span><br><span class=\"line\">            /sbin/ifconfig |awk -v RS=&#x27;inet addr:&#x27; &#x27;$1!=&quot;eth0&quot;&amp;&amp;$1!=&quot;127.0.0.1&quot;&#123;print $1&#125;&#x27;|awk &#x27;&#123;printf&quot;%s|&quot;,$0&#125;&#x27;</span><br><span class=\"line\">            /sbin/ifconfig |awk  &#x27;&#123;printf(&quot;line %d,%s\\n&quot;,NR,$0)&#125;&#x27;         # 指定类型(%d数字,%s字符)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        查看磁盘空间&#123;</span><br><span class=\"line\">            df -h|awk -F&quot;[ ]+|%&quot; &#x27;$5&gt;14&#123;print $5&#125;&#x27;</span><br><span class=\"line\">            df -h|awk &#x27;NR!=1&#123;if ( NF == 6 ) &#123;print $5&#125; else if ( NF == 5) &#123;print $4&#125; &#125;&#x27;</span><br><span class=\"line\">            df -h|awk &#x27;NR!=1 &amp;&amp; /%/&#123;sub(/%/,&quot;&quot;);print $(NF-1)&#125;&#x27;</span><br><span class=\"line\">            df -h|sed &#x27;1d;/ /!N;s/\\n//;s/ \\+/ /;&#x27;    #将磁盘分区整理成一行   可直接用 df -P</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        排列打印&#123;</span><br><span class=\"line\">            awk &#x27;END&#123;printf &quot;%-10s%-10s\\n%-10s%-10s\\n%-10s%-10s\\n&quot;,&quot;server&quot;,&quot;name&quot;,&quot;123&quot;,&quot;12345&quot;,&quot;234&quot;,&quot;1234&quot;&#125;&#x27; txt</span><br><span class=\"line\">            awk &#x27;BEGIN&#123;printf &quot;|%-10s|%-10s|\\n|%-10s|%-10s|\\n|%-10s|%-10s|\\n&quot;,&quot;server&quot;,&quot;name&quot;,&quot;123&quot;,&quot;12345&quot;,&quot;234&quot;,&quot;1234&quot;&#125;&#x27;</span><br><span class=\"line\">            awk &#x27;BEGIN&#123;</span><br><span class=\"line\">            print &quot;   *** 开 始 ***   &quot;;</span><br><span class=\"line\">            print &quot;+-----------------+&quot;;</span><br><span class=\"line\">            printf &quot;|%-5s|%-5s|%-5s|\\n&quot;,&quot;id&quot;,&quot;name&quot;,&quot;ip&quot;;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            $1!=1 &amp;&amp; NF==4&#123;printf &quot;|%-5s|%-5s|%-5s|\\n&quot;,$1,$2,$3&quot; &quot;$11&#125;</span><br><span class=\"line\">            END&#123;</span><br><span class=\"line\">            print &quot;+-----------------+&quot;;</span><br><span class=\"line\">            print &quot;   *** 结 束 ***   &quot;</span><br><span class=\"line\">            &#125;&#x27; txt</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        awk经典题&#123;</span><br><span class=\"line\">            分析图片服务日志，把日志（每个图片访问次数*图片大小的总和）排行，也就是计算每个url的总访问大小</span><br><span class=\"line\">            说明：本题生产环境应用：这个功能可以用于IDC网站流量带宽很高，然后通过分析服务器日志哪些元素占用流量过大，进而进行优化或裁剪该图片，压缩js等措施。</span><br><span class=\"line\">            本题需要输出三个指标： 【被访问次数】    【访问次数*单个被访问文件大小】   【文件名（带URL）】</span><br><span class=\"line\">            测试数据</span><br><span class=\"line\">            59.33.26.105 - - [08/Dec/2010:15:43:56 +0800] &quot;GET /static/images/photos/2.jpg HTTP/1.1&quot; 200 11299</span><br><span class=\"line\">            awk &#x27;&#123;array_num[$7]++;array_size[$7]+=$10&#125;END&#123;for(i in array_num) &#123;print array_num[i]&quot; &quot;array_size[i]&quot; &quot;i&#125;&#125;&#x27;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        awk练习题&#123;</span><br><span class=\"line\">            wang     4</span><br><span class=\"line\">            cui      3</span><br><span class=\"line\">            zhao     4</span><br><span class=\"line\">            liu      3</span><br><span class=\"line\">            liu      3</span><br><span class=\"line\">            chang    5</span><br><span class=\"line\">            li       2</span><br><span class=\"line\">            1 通过第一个域找出字符长度为4的</span><br><span class=\"line\">            2 当第二列值大于3时，创建空白文件，文件名为当前行第一个域$1 (touch $1)</span><br><span class=\"line\">            3 将文档中 liu 字符串替换为 hong</span><br><span class=\"line\">            4 求第二列的和</span><br><span class=\"line\">            5 求第二列的平均值</span><br><span class=\"line\">            6 求第二列中的最大值</span><br><span class=\"line\">            7 将第一列过滤重复后，列出每一项，每一项的出现次数，每一项的大小总和</span><br><span class=\"line\">            1、字符串长度</span><br><span class=\"line\">                awk &#x27;length($1)==&quot;4&quot;&#123;print $1&#125;&#x27;</span><br><span class=\"line\">            2、执行系统命令</span><br><span class=\"line\">                awk &#x27;&#123;if($2&gt;3)&#123;system (&quot;touch &quot;$1)&#125;&#125;&#x27;</span><br><span class=\"line\">            3、gsub(/r/,&quot;s&quot;,域) 在指定域(默认$0)中用s替代r  (sed &#x27;s///g&#x27;)</span><br><span class=\"line\">                awk &#x27;&#123;gsub(/liu/,&quot;hong&quot;,$1);print $0&#125;&#x27; a.txt</span><br><span class=\"line\">            4、列求和</span><br><span class=\"line\">                awk &#x27;&#123;a+=$2&#125;END&#123;print a&#125;&#x27;</span><br><span class=\"line\">            5、列求平均值</span><br><span class=\"line\">                awk &#x27;&#123;a+=$2&#125;END&#123;print a/NR&#125;&#x27;</span><br><span class=\"line\">                awk &#x27;&#123;a+=$2;b++&#125;END&#123;print a,a/b&#125;&#x27;</span><br><span class=\"line\">            6、列求最大值</span><br><span class=\"line\">                awk &#x27;BEGIN&#123;a=0&#125;&#123;if($2&gt;a) a=$2 &#125;END&#123;print a&#125;&#x27;</span><br><span class=\"line\">            7、将第一列过滤重复列出每一项，每一项的出现次数，每一项的大小总和</span><br><span class=\"line\">                awk &#x27;&#123;a[$1]++;b[$1]+=$2&#125;END&#123;for(i in a)&#123;print i,a[i],b[i]&#125;&#125;&#x27;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        awk处理复杂日志&#123;</span><br><span class=\"line\">            6.19：</span><br><span class=\"line\">            DHB_014_号百总机服务业务日报：广州 到达数异常！</span><br><span class=\"line\">            DHB_023_号百漏话提醒日报：珠海 到达数异常！</span><br><span class=\"line\">            6.20：</span><br><span class=\"line\">            DHB_014_号百总机服务业务日报：广州 到达数异常！到</span><br><span class=\"line\">            awk -F &#x27;[_ ：]+&#x27; &#x27;NF&gt;2&#123;print $4,$1&quot;_&quot;$2,b |&quot;sort&quot;;next&#125;&#123;b=$1&#125;&#x27;</span><br><span class=\"line\">            # 当前行NF小于等于2 只针对&#123;print $4,$1&quot;_&quot;$2,b |&quot;sort&quot;;next&#125; 有效 即 6.19：行跳过此操作,  &#123;b=$1&#125; 仍然执行</span><br><span class=\"line\">            # 当前行NF大于2 执行到 next 强制跳过本行，即跳过后面的 &#123;b=$1&#125;</span><br><span class=\"line\">            广州 DHB_014 6.19</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    sed&#123;</span><br><span class=\"line\">        # 先读取资料、存入模式空间、对其进行编辑、再输出、再用下一行替换模式空间内容</span><br><span class=\"line\">        # 调试工具sedsed (参数 -d)   http://aurelio.net/sedsed/sedsed-1.0</span><br><span class=\"line\">        -n   # 输出由编辑指令控制(取消默认的输出,必须与编辑指令一起配合)</span><br><span class=\"line\">        -i   # 直接对文件操作</span><br><span class=\"line\">        -e   # 多重编辑</span><br><span class=\"line\">        -r   # 正则可不转移特殊字符</span><br><span class=\"line\">        b    # 跳过匹配的行</span><br><span class=\"line\">        p    # 打印</span><br><span class=\"line\">        d    # 删除</span><br><span class=\"line\">        s    # 替换</span><br><span class=\"line\">        g    # 配合s全部替换</span><br><span class=\"line\">        i    # 行前插入</span><br><span class=\"line\">        a    # 行后插入</span><br><span class=\"line\">        r    # 读</span><br><span class=\"line\">        y    # 转换</span><br><span class=\"line\">        q    # 退出</span><br><span class=\"line\">        &amp;    # 代表查找的串内容</span><br><span class=\"line\">        *    # 任意多个 前驱字符(前导符)</span><br><span class=\"line\">        ?    # 0或1个 最小匹配 没加-r参数需转义 \\?</span><br><span class=\"line\">        $    # 最后一行</span><br><span class=\"line\">        .*   # 匹配任意多个字符</span><br><span class=\"line\">        \\(a\\)   # 保存a作为标签1(\\1)</span><br><span class=\"line\">        模式空间&#123;</span><br><span class=\"line\">            # 模式空间(两行两行处理) 模式匹配的范围，一般而言，模式空间是输入文本中某一行，但是可以通过使用N函数把多于一行读入模式空间</span><br><span class=\"line\">            # 暂存空间里默认存储一个空行</span><br><span class=\"line\">            n   # 读入下一行(覆盖上一行)</span><br><span class=\"line\">            h   # 把模式空间里的行拷贝到暂存空间</span><br><span class=\"line\">            H   # 把模式空间里的行追加到暂存空间</span><br><span class=\"line\">            g   # 用暂存空间的内容替换模式空间的行</span><br><span class=\"line\">            G   # 把暂存空间的内容追加到模式空间的行后</span><br><span class=\"line\">            x   # 将暂存空间的内容于模式空间里的当前行互换</span><br><span class=\"line\">            ！  # 对其前面的要匹配的范围取反</span><br><span class=\"line\">            D   # 删除当前模式空间中直到并包含第一个换行符的所有字符(/.*/匹配模式空间中所有内容，匹配到就执行D,没匹配到就结束D)</span><br><span class=\"line\">            N   # 追加下一个输入行到模式空间后面并在第二者间嵌入一个换行符，改变当前行号码,模式匹配可以延伸跨域这个内嵌换行</span><br><span class=\"line\">            p   # 打印模式空间中的直到并包含第一个换行的所有字符</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        标签函数&#123;</span><br><span class=\"line\">            : lable # 建立命令标记，配合b，t函数使用跳转</span><br><span class=\"line\">            b lable # 分支到脚本中带有标记的地方，如果分支不存在则分支到脚本的末尾。</span><br><span class=\"line\">            t labe  # 判断分支，从最后一行开始，条件一旦满足或者T,t命令，将导致分支到带有标号的命令出，或者到脚本末尾。与b函数不同在于t在执行跳转前会先检查其前一个替换命令是否成功，如成功，则执行跳转。</span><br><span class=\"line\">            sed -e &#x27;&#123;:p1;/A/s/A/AA/;/B/s/B/BB/;/[AB]\\&#123;10\\&#125;/b;b p1;&#125;&#x27;     # 文件内容第一行A第二行B:建立标签p1;两个替换函数(A替换成AA,B替换成BB)当A或者B达到10个以后调用b,返回</span><br><span class=\"line\">            echo &#x27;sd  f   f   [a    b      c    cddd    eee]&#x27; | sed &#x27;:n;s#\\(\\[[^ ]*\\)  *#\\1#;tn&#x27;  # 标签函数t使用方法,替换[]里的空格</span><br><span class=\"line\">            echo &quot;198723124.03&quot;|sed -r &#x27;:a;s/([0-9]+)([0-9]&#123;3&#125;)/\\1,\\2/;ta&#x27;  # 每三个字符加一个逗号</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        引用外部变量&#123;</span><br><span class=\"line\">            sed -n &#x27;&#x27;$a&#x27;,10p&#x27;</span><br><span class=\"line\">            sed -n &quot;&quot;$a&quot;,10p&quot;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">\t\tsed -e &#x27;s/[()]//g&#x27;                            # 去除两边括号取得括号内内容</span><br><span class=\"line\">        sed 10q                                       # 显示文件中的前10行 (模拟&quot;head&quot;)</span><br><span class=\"line\">        sed -n &#x27;$=&#x27;                                   # 计算行数(模拟 &quot;wc -l&quot;)</span><br><span class=\"line\">        sed -n &#x27;5,/^no/p&#x27;                             # 打印从第5行到以no开头行之间的所有行</span><br><span class=\"line\">        sed -i &quot;/^$f/d&quot; a     　　                  　 # 删除匹配行</span><br><span class=\"line\">        sed -i &#x27;/aaa/,$d&#x27;                             # 删除匹配行到末尾</span><br><span class=\"line\">        sed -i &quot;s/=/:/&quot; c                             # 直接对文本替换</span><br><span class=\"line\">        sed -i &quot;/^pearls/s/$/j/&quot;                      # 找到pearls开头在行尾加j</span><br><span class=\"line\">        sed &#x27;/1/,/3/p&#x27; file                           # 打印1和3之间的行</span><br><span class=\"line\">        sed -n &#x27;1p&#x27; file                              # 取出指定行</span><br><span class=\"line\">        sed &#x27;5i\\aaa&#x27; file                             # 在第5行之前插入行</span><br><span class=\"line\">        sed &#x27;5a\\aaa&#x27; file                             # 在第5行之后抽入行</span><br><span class=\"line\">        echo a|sed -e &#x27;/a/i\\b&#x27;                        # 在匹配行前插入一行</span><br><span class=\"line\">        echo a|sed -e &#x27;/a/a\\b&#x27;                        # 在匹配行后插入一行</span><br><span class=\"line\">        echo a|sed &#x27;s/a/&amp;\\nb/g&#x27;                       # 在匹配行后插入一行</span><br><span class=\"line\">        seq 10| sed -e&#123;1,3&#125;&#x27;s/./a/&#x27;                   # 匹配1和3行替换</span><br><span class=\"line\">        sed -n &#x27;/regexp/!p&#x27;                           # 只显示不匹配正则表达式的行</span><br><span class=\"line\">        sed &#x27;/regexp/d&#x27;                               # 只显示不匹配正则表达式的行</span><br><span class=\"line\">        sed &#x27;$!N;s/\\n//&#x27;                              # 将每两行连接成一行</span><br><span class=\"line\">        sed &#x27;/baz/s/foo/bar/g&#x27;                        # 只在行中出现字串&quot;baz&quot;的情况下将&quot;foo&quot;替换成&quot;bar&quot;</span><br><span class=\"line\">        sed &#x27;/baz/!s/foo/bar/g&#x27;                       # 将&quot;foo&quot;替换成&quot;bar&quot;，并且只在行中未出现字串&quot;baz&quot;的情况下替换</span><br><span class=\"line\">        echo a|sed -e &#x27;s/a/#&amp;/g&#x27;                      # 在a前面加#号</span><br><span class=\"line\">        sed &#x27;s/foo/bar/4&#x27;                             # 只替换每一行中的第四个字串</span><br><span class=\"line\">        sed &#x27;s/\\(.*\\)foo/\\1bar/&#x27;                      # 替换每行最后一个字符串</span><br><span class=\"line\">        sed &#x27;s/\\(.*\\)foo\\(.*foo\\)/\\1bar\\2/&#x27;           # 替换倒数第二个字符串</span><br><span class=\"line\">        sed &#x27;s/[0-9][0-9]$/&amp;5&#x27;                        # 在以[0-9][0-9]结尾的行后加5</span><br><span class=\"line\">        sed -n &#x27; /^eth\\|em[01][^:]/&#123;n;p;&#125;&#x27;            # 匹配多个关键字</span><br><span class=\"line\">        sed -n -r &#x27; /eth|em[01][^:]/&#123;n;p;&#125;&#x27;           # 匹配多个关键字</span><br><span class=\"line\">        echo -e &quot;1\\n2&quot;|xargs -i -t sed &#x27;s/^/1/&#x27; &#123;&#125;    # 同时处理多个文件</span><br><span class=\"line\">        sed &#x27;/west/,/east/s/$/*VACA*/&#x27;                # 修改west和east之间的所有行，在结尾处加*VACA*</span><br><span class=\"line\">        sed  &#x27;s/[^1-9]*\\([0-9]\\+\\).*/\\1/&#x27;             # 取出第一组数字，并且忽略掉开头的0</span><br><span class=\"line\">        sed -n &#x27;/regexp/&#123;g;1!p;&#125;;h&#x27;                   # 查找字符串并将匹配行的上一行显示出来，但并不显示匹配行</span><br><span class=\"line\">        sed -n &#x27; /regexp/&#123;n;p;&#125;&#x27;                      # 查找字符串并将匹配行的下一行显示出来，但并不显示匹配行</span><br><span class=\"line\">        sed -n &#x27;s/\\(mar\\)got/\\1ianne/p&#x27;               # 保存\\(mar\\)作为标签1</span><br><span class=\"line\">        sed -n &#x27;s/\\([0-9]\\+\\).*\\(t\\)/\\2\\1/p&#x27;          # 保存多个标签</span><br><span class=\"line\">        sed -i -e &#x27;1,3d&#x27; -e &#x27;s/1/2/&#x27;                  # 多重编辑(先删除1-3行，在将1替换成2)</span><br><span class=\"line\">        sed -e &#x27;s/@.*//g&#x27; -e &#x27;/^$/d&#x27;                  # 删除掉@后面所有字符，和空行</span><br><span class=\"line\">        sed -n -e &quot;&#123;s/^ *[0-9]*//p&#125;&quot;                  # 打印并删除正则表达式的那部分内容</span><br><span class=\"line\">        echo abcd|sed &#x27;y/bd/BE/&#x27;                      # 匹配字符替换</span><br><span class=\"line\">        sed &#x27;/^#/b;y/y/P/&#x27; 2                          # 非#号开头的行替换字符</span><br><span class=\"line\">        sed &#x27;/suan/r readfile&#x27;                        # 找到含suan的行，在后面加上读入的文件内容</span><br><span class=\"line\">        sed -n &#x27;/no/w writefile&#x27;                      # 找到含no的行，写入到指定文件中</span><br><span class=\"line\">        sed &#x27;/regex/G&#x27;                                # 在匹配式样行之后插入一空行</span><br><span class=\"line\">        sed &#x27;/regex/&#123;x;p;x;G;&#125;&#x27;                       # 在匹配式样行之前和之后各插入一空行</span><br><span class=\"line\">        sed &#x27;n;d&#x27;                                     # 删除所有偶数行</span><br><span class=\"line\">        sed &#x27;G;G&#x27;                                     # 在每一行后面增加两空行</span><br><span class=\"line\">        sed &#x27;/^$/d;G&#x27;                                 # 在输出的文本中每一行后面将有且只有一空行</span><br><span class=\"line\">        sed &#x27;n;n;n;n;G;&#x27;                              # 在每5行后增加一空白行</span><br><span class=\"line\">        sed -n &#x27;5~5p&#x27;                                 # 只打印行号为5的倍数</span><br><span class=\"line\">        seq 1 30|sed  &#x27;5~5s/.*/a/&#x27;                    # 倍数行执行替换</span><br><span class=\"line\">        sed -n &#x27;3,$&#123;p;n;n;n;n;n;n;&#125;&#x27;                  # 从第3行开始，每7行显示一次</span><br><span class=\"line\">        sed -n &#x27;h;n;G;p&#x27;                              # 奇偶调换</span><br><span class=\"line\">        seq 1 10|sed &#x27;1!G;h;$!d&#x27;                      # 倒叙排列</span><br><span class=\"line\">        ls -l|sed -n &#x27;/^.rwx.*/p&#x27;                     # 查找属主权限为7的文件</span><br><span class=\"line\">        sed = filename | sed &#x27;N;s/\\n/\\t/&#x27;             # 为文件中的每一行进行编号(简单的左对齐方式)</span><br><span class=\"line\">        sed &#x27;s/^[ \\t]*//&#x27;                             # 将每一行前导的&quot;空白字符&quot;(空格，制表符)删除,使之左对齐</span><br><span class=\"line\">        sed &#x27;s/^[ \\t]*//;s/[ \\t]*$//&#x27;                 # 将每一行中的前导和拖尾的空白字符删除</span><br><span class=\"line\">        sed &#x27;/&#123;abc,def\\&#125;\\/\\[111,222]/s/^/00000/&#x27;      # 匹配需要转行的字符: &#125; / [</span><br><span class=\"line\">        echo abcd\\\\nabcde |sed &#x27;s/\\\\n/@/g&#x27; |tr &#x27;@&#x27; &#x27;\\n&#x27;        # 将换行符转换为换行</span><br><span class=\"line\">        cat tmp|awk &#x27;&#123;print $1&#125;&#x27;|sort -n|sed -n &#x27;$p&#x27;           # 取一列最大值</span><br><span class=\"line\">        sed -n &#x27;&#123;s/^[^\\/]*//;s/\\:.*//;p&#125;&#x27; /etc/passwd          # 取用户家目录(匹配不为/的字符和匹配:到结尾的字符全部删除)</span><br><span class=\"line\">        sed = filename | sed &#x27;N;s/^/      /; s/ *\\(.\\&#123;6,\\&#125;\\)\\n/\\1   /&#x27;   # 对文件中的所有行编号(行号在左，文字右端对齐)</span><br><span class=\"line\">        /sbin/ifconfig |sed &#x27;s/.*inet addr:\\(.*\\) Bca.*/\\1/g&#x27; |sed -n &#x27;/eth/&#123;n;p&#125;&#x27;   # 取所有IP</span><br><span class=\"line\">        修改keepalive配置剔除后端服务器&#123;</span><br><span class=\"line\">            sed -i &#x27;/real_server.*10.0.1.158.*8888/,+8 s/^/#/&#x27; keepalived.conf</span><br><span class=\"line\">            sed -i &#x27;/real_server.*10.0.1.158.*8888/,+8 s/^#//&#x27; keepalived.conf</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        模仿rev功能&#123;</span><br><span class=\"line\">            echo 123 |sed &#x27;/\\n/!G;s/\\(.\\)\\(.*\\n\\)/&amp;\\2\\1/;//D;s/.//;&#x27;</span><br><span class=\"line\">            /\\n/!G;         　　　　　　# 没有\\n换行符，要执行G,因为保留空间中为空，所以在模式空间追加一空行</span><br><span class=\"line\">            s/\\(.\\)\\(.*\\n\\)/&amp;\\2\\1/;     # 标签替换 &amp;\\n23\\n1$ (关键在于&amp; ,可以让后面//匹配到空行)</span><br><span class=\"line\">            //D;            　　　　　　# D 命令会引起循环删除模式空间中的第一部分，如果删除后，模式空间中还有剩余行，则返回 D 之前的命令，重新执行，如果 D 后，模式空间中没有任何内容，则将退出。  //D 匹配空行执行D,如果上句s没有匹配到,//也无法匹配到空行, &quot;//D;&quot;命令结束</span><br><span class=\"line\">            s/.//;          　　　　　　# D结束后,删除开头的 \\n</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    xargs&#123;</span><br><span class=\"line\">        # 命令替换</span><br><span class=\"line\">        -t 先打印命令，然后再执行</span><br><span class=\"line\">        -i 用每项替换 &#123;&#125;</span><br><span class=\"line\">        find / -perm +7000 | xargs ls -l                    # 将前面的内容，作为后面命令的参数</span><br><span class=\"line\">        seq 1 10 |xargs  -i date -d &quot;&#123;&#125; days &quot; +%Y-%m-%d    # 列出10天日期</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\tfind /data/records/ -mtime +3 -name &quot;*-*-*-*-*&quot;|xargs rm -rf</span><br><span class=\"line\">\t*/5 * * * * find /data/record/tmp -mmin +120 |grep -E &quot;.jpg|.mp4|.txt|.jpg|.ts|.m3u8|.png&quot;|xargs rm -f   ### 每隔5分钟，删除带有指定后缀且超过120分钟以上的文件</span><br><span class=\"line\">\tfind /data/website*/storage/logs/ -mmin +360 -size +5G -name &quot;*.log&quot;|xargs -I &#123;&#125; truncate -s 0 &#123;&#125;</span><br><span class=\"line\">    find /data/website*/storage/logs/ -mtime +1 -size +10M -name &quot;*.log&quot;|xargs gzip -9</span><br><span class=\"line\">\t</span><br><span class=\"line\">\t</span><br><span class=\"line\">    dialog菜单&#123;</span><br><span class=\"line\">        # 默认将所有输出用 stderr 输出，不显示到屏幕   使用参数  --stdout 可将选择赋给变量</span><br><span class=\"line\">        # 退出状态  0正确  1错误</span><br><span class=\"line\">        窗体类型&#123;</span><br><span class=\"line\">            --calendar          # 日历</span><br><span class=\"line\">            --checklist         # 允许你显示一个选项列表，每个选项都可以被单独的选择 (复选框)</span><br><span class=\"line\">            --form              # 表单,允许您建立一个带标签的文本字段，并要求填写</span><br><span class=\"line\">            --fselect           # 提供一个路径，让你选择浏览的文件</span><br><span class=\"line\">            --gauge             # 显示一个表，呈现出完成的百分比，就是显示出进度条。</span><br><span class=\"line\">            --infobox           # 显示消息后，（没有等待响应）对话框立刻返回，但不清除屏幕(信息框)</span><br><span class=\"line\">            --inputbox          # 让用户输入文本(输入框)</span><br><span class=\"line\">            --inputmenu         # 提供一个可供用户编辑的菜单（可编辑的菜单框）</span><br><span class=\"line\">            --menu              # 显示一个列表供用户选择(菜单框)</span><br><span class=\"line\">            --msgbox(message)   # 显示一条消息,并要求用户选择一个确定按钮(消息框)</span><br><span class=\"line\">            --password          # 密码框，显示一个输入框，它隐藏文本</span><br><span class=\"line\">            --pause             # 显示一个表格用来显示一个指定的暂停期的状态</span><br><span class=\"line\">            --radiolist         # 提供一个菜单项目组，但是只有一个项目，可以选择(单选框)</span><br><span class=\"line\">            --tailbox           # 在一个滚动窗口文件中使用tail命令来显示文本</span><br><span class=\"line\">            --tailboxbg         # 跟tailbox类似，但是在background模式下操作</span><br><span class=\"line\">            --textbox           # 在带有滚动条的文本框中显示文件的内容  (文本框)</span><br><span class=\"line\">            --timebox           # 提供一个窗口，选择小时，分钟，秒</span><br><span class=\"line\">            --yesno(yes/no)     # 提供一个带有yes和no按钮的简单信息框</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        窗体参数&#123;</span><br><span class=\"line\">            --separate-output          # 对于chicklist组件,输出结果一次输出一行,得到结果不加引号</span><br><span class=\"line\">            --ok-label &quot;提交&quot;          # 确定按钮名称</span><br><span class=\"line\">            --cancel-label &quot;取消&quot;      # 取消按钮名称</span><br><span class=\"line\">            --title &quot;标题&quot;             # 标题名称</span><br><span class=\"line\">            --stdout                   # 将所有输出用 stdout 输出</span><br><span class=\"line\">            --backtitle &quot;上标&quot;         # 窗体上标</span><br><span class=\"line\">            --no-shadow                # 去掉窗体阴影</span><br><span class=\"line\">            --menu &quot;菜单名&quot; 20 60 14   # 菜单及窗口大小</span><br><span class=\"line\">            --clear                    # 完成后清屏操作</span><br><span class=\"line\">            --no-cancel                # 不显示取消项</span><br><span class=\"line\">            --insecure                 # 使用星号来代表每个字符</span><br><span class=\"line\">            --begin &lt;y&gt; &lt;x&gt;            # 指定对话框左上角在屏幕的上的做坐标</span><br><span class=\"line\">            --timeout &lt;秒&gt;             # 超时,返回的错误代码255,如果用户在指定的时间内没有给出相应动作,就按超时处理</span><br><span class=\"line\">            --defaultno                # 使选择默认为no</span><br><span class=\"line\">            --default-item &lt;str&gt;       # 设置在一份清单，表格或菜单中的默认项目。通常在框中的第一项是默认</span><br><span class=\"line\">            --sleep 5                  # 在处理完一个对话框后静止(延迟)的时间(秒)</span><br><span class=\"line\">            --max-input size           # 限制输入的字符串在给定的大小之内。如果没有指定，默认是2048</span><br><span class=\"line\">            --keep-window              # 退出时不清屏和重绘窗口。当几个组件在同一个程序中运行时，对于保留窗口内容很有用的</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        dialog --title &quot;Check me&quot; --checklist &quot;Pick Numbers&quot; 15 25 3 1 &quot;one&quot; &quot;off&quot; 2 &quot;two&quot; &quot;on&quot;         # 多选界面[方括号]</span><br><span class=\"line\">        dialog --title &quot;title&quot; --radiolist &quot;checklist&quot; 20 60 14 tag1 &quot;item1&quot; on tag2 &quot;item2&quot; off        # 单选界面(圆括号)</span><br><span class=\"line\">        dialog --title &quot;title&quot; --menu &quot;MENU&quot; 20 60 14 tag1 &quot;item1&quot; tag2 &quot;item2&quot;                         # 单选界面</span><br><span class=\"line\">        dialog --title &quot;Installation&quot; --backtitle &quot;Star Linux&quot; --gauge &quot;Linux Kernel&quot;  10 60 50         # 进度条</span><br><span class=\"line\">        dialog --title &quot;标题&quot; --backtitle &quot;Dialog&quot; --yesno &quot;说明&quot; 20 60                                 # 选择yes/no</span><br><span class=\"line\">        dialog --title &quot;公告标题&quot; --backtitle &quot;Dialog&quot; --msgbox &quot;内容&quot; 20 60                            # 公告</span><br><span class=\"line\">        dialog --title &quot;hey&quot; --backtitle &quot;Dialog&quot; --infobox &quot;Is everything okay?&quot; 10 60                 # 显示讯息后立即离开</span><br><span class=\"line\">        dialog --title &quot;hey&quot; --backtitle &quot;Dialog&quot; --inputbox &quot;Is okay?&quot; 10 60 &quot;yes&quot;                     # 输入对话框</span><br><span class=\"line\">        dialog --title &quot;Array 30&quot; --backtitle &quot;All &quot; --textbox /root/txt 20 75                          # 显示文档内容</span><br><span class=\"line\">        dialog --title &quot;Add&quot; --form &quot;input&quot; 12 40 4 &quot;user&quot; 1 1 &quot;&quot; 1 15 15 0 &quot;name&quot; 2 1 &quot;&quot; 2 15 15 0     # 多条输入对话框</span><br><span class=\"line\">        dialog --title  &quot;Password&quot;  --insecure  --passwordbox  &quot;请输入密码&quot;  10  35                     # 星号显示输入--insecure</span><br><span class=\"line\">        dialog --stdout --title &quot;日历&quot;  --calendar &quot;请选择&quot; 0 0 9 1 2010                                # 选择日期</span><br><span class=\"line\">        dialog --title &quot;title&quot; --menu &quot;MENU&quot; 20 60 14 tag1 &quot;item1&quot; tag2 &quot;item2&quot; 2&gt;tmp                   # 取到结果放到文件中(以标准错误输出结果)</span><br><span class=\"line\">        a=`dialog --title &quot;title&quot;  --stdout --menu &quot;MENU&quot; 20 60 14 tag1 &quot;item1&quot; tag2 &quot;item2&quot;`           # 选择操作赋给变量(使用标准输出)</span><br><span class=\"line\">        dialog菜单实例&#123;</span><br><span class=\"line\">            while :</span><br><span class=\"line\">            do</span><br><span class=\"line\">            clear</span><br><span class=\"line\">            menu=`dialog --title &quot;title&quot;  --stdout --menu &quot;MENU&quot; 20 60 14 1 system 2 custom`</span><br><span class=\"line\">            [ $? -eq 0 ] &amp;&amp; echo &quot;$menu&quot; || exit         # 判断dialog执行,取消退出</span><br><span class=\"line\">                while :</span><br><span class=\"line\">                do</span><br><span class=\"line\">                    case $menu in</span><br><span class=\"line\">                    1)</span><br><span class=\"line\">                        list=&quot;1a &quot;item1&quot; 2a &quot;item2&quot;&quot;     # 定义菜单列表变量</span><br><span class=\"line\">                    ;;</span><br><span class=\"line\">                    2)</span><br><span class=\"line\">                        list=&quot;1b &quot;item3&quot; 2b &quot;item4&quot;&quot;</span><br><span class=\"line\">                    ;;</span><br><span class=\"line\">                    esac</span><br><span class=\"line\">                    result=`dialog --title &quot;title&quot;  --stdout --menu &quot;MENU&quot; 20 60 14 $list`</span><br><span class=\"line\">                    [ $? -eq 0 ] &amp;&amp; echo &quot;$result&quot; || break    # 判断dialog执行,取消返回菜单,注意:配合上层菜单循环</span><br><span class=\"line\">                    read</span><br><span class=\"line\">                done</span><br><span class=\"line\">            done</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    select菜单&#123;</span><br><span class=\"line\">        # 输入项不在菜单自动会提示重新输入</span><br><span class=\"line\">        select menuitem in pick1 pick2 pick3 退出</span><br><span class=\"line\">        do</span><br><span class=\"line\">            echo $menuitem</span><br><span class=\"line\">            case $menuitem in</span><br><span class=\"line\">            退出)</span><br><span class=\"line\">                exit</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">            *)</span><br><span class=\"line\">                select area in area1 area2 area3 返回</span><br><span class=\"line\">                do</span><br><span class=\"line\">                    echo $area</span><br><span class=\"line\">                    case $area in</span><br><span class=\"line\">                    返回)</span><br><span class=\"line\">                        break</span><br><span class=\"line\">                    ;;</span><br><span class=\"line\">                    *)</span><br><span class=\"line\">                        echo &quot;对$area操作&quot;</span><br><span class=\"line\">                    ;;</span><br><span class=\"line\">                    esac</span><br><span class=\"line\">                done</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">            esac</span><br><span class=\"line\">        done</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    shift&#123;</span><br><span class=\"line\">        ./cs.sh 1 2 3</span><br><span class=\"line\">        #!/bin/sh</span><br><span class=\"line\">        until [ $# -eq 0 ]</span><br><span class=\"line\">        do</span><br><span class=\"line\">            echo &quot;第一个参数为: $1 参数个数为: $#&quot;</span><br><span class=\"line\">            #shift 命令执行前变量 $1 的值在shift命令执行后不可用</span><br><span class=\"line\">            shift</span><br><span class=\"line\">        done</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    getopts给脚本加参数&#123;</span><br><span class=\"line\">        #!/bin/sh</span><br><span class=\"line\">        while getopts :ab: name</span><br><span class=\"line\">        do</span><br><span class=\"line\">            case $name in</span><br><span class=\"line\">            a)</span><br><span class=\"line\">                aflag=1</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">            b)</span><br><span class=\"line\">                bflag=1</span><br><span class=\"line\">                bval=$OPTARG</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">            \\?)</span><br><span class=\"line\">                echo &quot;USAGE:`basename $0` [-a] [-b value]&quot;</span><br><span class=\"line\">                exit  1</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">            esac</span><br><span class=\"line\">        done</span><br><span class=\"line\">        if [ ! -z $aflag ] ; then</span><br><span class=\"line\">            echo &quot;option -a specified&quot;</span><br><span class=\"line\">            echo &quot;$aflag&quot;</span><br><span class=\"line\">            echo &quot;$OPTIND&quot;</span><br><span class=\"line\">        fi</span><br><span class=\"line\">        if [ ! -z $bflag ] ; then</span><br><span class=\"line\">            echo  &quot;option -b specified&quot;</span><br><span class=\"line\">            echo  &quot;$bflag&quot;</span><br><span class=\"line\">            echo  &quot;$bval&quot;</span><br><span class=\"line\">            echo  &quot;$OPTIND&quot;</span><br><span class=\"line\">        fi</span><br><span class=\"line\">        echo &quot;here  $OPTIND&quot;</span><br><span class=\"line\">        shift $(($OPTIND -1))</span><br><span class=\"line\">        echo &quot;$OPTIND&quot;</span><br><span class=\"line\">        echo &quot; `shift $(($OPTIND -1))`  &quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    tclsh&#123;</span><br><span class=\"line\">        set foo &quot;a bc&quot;                   # 定义变量</span><br><span class=\"line\">        set b &#123;$a&#125;;                      # 转义  b的值为&quot; $a &quot; ,而不是变量结果</span><br><span class=\"line\">        set a 3; incr a 3;               # 数字的自增.  将a加3,如果要减3,则为 incr a –3;</span><br><span class=\"line\">        set c [expr 20/5];               # 计算  c的值为4</span><br><span class=\"line\">        puts $foo;                       # 打印变量</span><br><span class=\"line\">        set qian(123) f;                 # 定义数组</span><br><span class=\"line\">        set qian(1,1,1) fs;              # 多维数组</span><br><span class=\"line\">        parray qian;                     # 打印数组的所有信息</span><br><span class=\"line\">        string length $qian;             # 将返回变量qian的长度</span><br><span class=\"line\">        string option string1 string2;   # 字符相关串操作</span><br><span class=\"line\">        # option 的操作选项:</span><br><span class=\"line\">        # compare           按照字典的排序方式进行比较。根据string1 &lt;,=,&gt;string2分别返回-1,0,1</span><br><span class=\"line\">        # first             返回string2中第一次出现string1的位置，如果没有出现string1则返回-1</span><br><span class=\"line\">        # last              和first相反</span><br><span class=\"line\">        # trim              从string1中删除开头和结尾的出现在string2中的字符</span><br><span class=\"line\">        # tolower           返回string1中的所有字符被转换为小写字符后的新字符串</span><br><span class=\"line\">        # toupper           返回string1中的所有字符串转换为大写后的字符串</span><br><span class=\"line\">        # length            返回string1的长度</span><br><span class=\"line\">        set a 1;while &#123;$a &lt; 3&#125; &#123; set a [incr a 1;]; &#125;;puts $a    # 判断变量a小于3既循环</span><br><span class=\"line\">        for &#123;initialization&#125; &#123;condition&#125; &#123;increment&#125; &#123;body&#125;      # 初始化变量,条件,增量,具体操作</span><br><span class=\"line\">        for &#123;set i 0&#125; &#123;$i &lt; 10&#125; &#123;incr i&#125; &#123;puts $i;&#125;              # 将打印出0到9</span><br><span class=\"line\">        if &#123; 表达式 &#125; &#123;</span><br><span class=\"line\">             #运算;</span><br><span class=\"line\">        &#125; else &#123;</span><br><span class=\"line\">             #其他运算;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        switch $x &#123;</span><br><span class=\"line\">            字符串1 &#123; 操作1 ;&#125;</span><br><span class=\"line\">            字符串2 &#123; 操作2 ;&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        foreach element &#123;0 m n b v&#125; &#123;</span><br><span class=\"line\">        # 将在一组变元中进行循环，并且每次都将执行他的循环体</span><br><span class=\"line\">               switch $element &#123;</span><br><span class=\"line\">                     # 判断element的值</span><br><span class=\"line\">             &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        expect交互&#123;</span><br><span class=\"line\">            exp_continue         # 多个spawn命令时并行</span><br><span class=\"line\">            interact             # 执行完成后保持交互状态，把控制权交给控制台</span><br><span class=\"line\">            expect &quot;password:&quot;   # 判断关键字符</span><br><span class=\"line\">            send &quot;passwd\\r&quot;      # 执行交互动作，与手工输入密码的动作等效。字符串结尾加&quot;\\r&quot;</span><br><span class=\"line\">            ssh后sudo&#123;</span><br><span class=\"line\">                #!/bin/bash</span><br><span class=\"line\">                #sudo注释下行允许后台运行</span><br><span class=\"line\">                #Defaults requiretty</span><br><span class=\"line\">                #sudo去掉!允许远程</span><br><span class=\"line\">                #Defaults !visiblepw</span><br><span class=\"line\">                /usr/bin/expect -c &#x27;</span><br><span class=\"line\">                set timeout 5</span><br><span class=\"line\">                spawn ssh -o StrictHostKeyChecking=no xuesong1@192.168.42.128 &quot;sudo grep xuesong1 /etc/passwd&quot;</span><br><span class=\"line\">                expect &#123;</span><br><span class=\"line\">                    &quot;passphrase&quot; &#123;</span><br><span class=\"line\">                        send_user &quot;sshkey\\n&quot;</span><br><span class=\"line\">                        send &quot;xuesong\\r&quot;;</span><br><span class=\"line\">                        expect &#123;</span><br><span class=\"line\">                            &quot;sudo&quot; &#123;</span><br><span class=\"line\">                            send_user &quot;sudo\\n&quot;</span><br><span class=\"line\">                            send &quot;xuesong\\r&quot;</span><br><span class=\"line\">                            interact</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            eof &#123;</span><br><span class=\"line\">                            send_user &quot;sudo eof\\n&quot;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    &quot;password:&quot; &#123;</span><br><span class=\"line\">                        send_user &quot;ssh\\n&quot;</span><br><span class=\"line\">                        send &quot;xuesong\\r&quot;;</span><br><span class=\"line\">                        expect &#123;</span><br><span class=\"line\">                            &quot;sudo&quot; &#123;</span><br><span class=\"line\">                            send_user &quot;sudo\\n&quot;</span><br><span class=\"line\">                            send &quot;xuesong\\r&quot;</span><br><span class=\"line\">                            interact</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            eof &#123;</span><br><span class=\"line\">                            send_user &quot;sudo eof\\n&quot;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    &quot;sudo&quot; &#123;</span><br><span class=\"line\">                            send_user &quot;sudo\\n&quot;</span><br><span class=\"line\">                            send &quot;xuesong\\r&quot;</span><br><span class=\"line\">                            interact</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                    eof &#123;</span><br><span class=\"line\">                        send_user &quot;ssh eof\\n&quot;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                &#x27;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            ssh执行命令操作&#123;</span><br><span class=\"line\">                /usr/bin/expect -c &quot;</span><br><span class=\"line\">                proc jiaohu &#123;&#125; &#123;</span><br><span class=\"line\">                    send_user expect_start</span><br><span class=\"line\">                    expect &#123;</span><br><span class=\"line\">                        password &#123;</span><br><span class=\"line\">                            send $&#123;RemotePasswd&#125;\\r;</span><br><span class=\"line\">                            send_user expect_eof</span><br><span class=\"line\">                            expect &#123;</span><br><span class=\"line\">                                \\&quot;does not exist\\&quot; &#123;</span><br><span class=\"line\">                                    send_user expect_failure</span><br><span class=\"line\">                                    exit 10</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                password &#123;</span><br><span class=\"line\">                                    send_user expect_failure</span><br><span class=\"line\">                                    exit 5</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                Password &#123;</span><br><span class=\"line\">                                    send $&#123;RemoteRootPasswd&#125;\\r;</span><br><span class=\"line\">                                    send_user expect_eof</span><br><span class=\"line\">                                    expect &#123;</span><br><span class=\"line\">                                        incorrect &#123;</span><br><span class=\"line\">                                            send_user expect_failure</span><br><span class=\"line\">                                            exit 6</span><br><span class=\"line\">                                        &#125;</span><br><span class=\"line\">                                        eof</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                eof</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        passphrase &#123;</span><br><span class=\"line\">                            send $&#123;KeyPasswd&#125;\\r;</span><br><span class=\"line\">                            send_user expect_eof</span><br><span class=\"line\">                            expect &#123;</span><br><span class=\"line\">                                \\&quot;does not exist\\&quot; &#123;</span><br><span class=\"line\">                                    send_user expect_failure</span><br><span class=\"line\">                                    exit 10</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                passphrase&#123;</span><br><span class=\"line\">                                    send_user expect_failure</span><br><span class=\"line\">                                    exit 7</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                Password &#123;</span><br><span class=\"line\">                                    send $&#123;RemoteRootPasswd&#125;\\r;</span><br><span class=\"line\">                                    send_user expect_eof</span><br><span class=\"line\">                                    expect &#123;</span><br><span class=\"line\">                                        incorrect &#123;</span><br><span class=\"line\">                                            send_user expect_failure</span><br><span class=\"line\">                                            exit 6</span><br><span class=\"line\">                                        &#125;</span><br><span class=\"line\">                                        eof</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                eof</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        Password &#123;</span><br><span class=\"line\">                            send $&#123;RemoteRootPasswd&#125;\\r;</span><br><span class=\"line\">                            send_user expect_eof</span><br><span class=\"line\">                            expect &#123;</span><br><span class=\"line\">                                incorrect &#123;</span><br><span class=\"line\">                                    send_user expect_failure</span><br><span class=\"line\">                                    exit 6</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                eof</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        \\&quot;No route to host\\&quot; &#123;</span><br><span class=\"line\">                            send_user expect_failure</span><br><span class=\"line\">                            exit 4</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        \\&quot;Invalid argument\\&quot; &#123;</span><br><span class=\"line\">                            send_user expect_failure</span><br><span class=\"line\">                            exit 8</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        \\&quot;Connection refused\\&quot; &#123;</span><br><span class=\"line\">                            send_user expect_failure</span><br><span class=\"line\">                            exit 9</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        \\&quot;does not exist\\&quot; &#123;</span><br><span class=\"line\">                            send_user expect_failure</span><br><span class=\"line\">                            exit 10</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        \\&quot;Connection timed out\\&quot; &#123;</span><br><span class=\"line\">                            send_user expect_failure</span><br><span class=\"line\">                            exit 11</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        timeout &#123;</span><br><span class=\"line\">                            send_user expect_failure</span><br><span class=\"line\">                            exit 3</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                        eof</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                set timeout $TimeOut</span><br><span class=\"line\">                switch $1 &#123;</span><br><span class=\"line\">                    Ssh_Cmd &#123;</span><br><span class=\"line\">                        spawn ssh -t -p $Port -o StrictHostKeyChecking=no $RemoteUser@$Ip /bin/su - root -c \\\\\\&quot;$Cmd\\\\\\&quot;</span><br><span class=\"line\">                        jiaohu</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    Ssh_Script &#123;</span><br><span class=\"line\">                        spawn scp -P $Port -o StrictHostKeyChecking=no $ScriptPath $RemoteUser@$Ip:/tmp/$&#123;ScriptPath##*/&#125;;</span><br><span class=\"line\">                        jiaohu</span><br><span class=\"line\">                        spawn ssh -t -p $Port -o StrictHostKeyChecking=no $RemoteUser@$Ip /bin/su - root -c  \\\\\\&quot;/bin/sh /tmp/$&#123;ScriptPath##*/&#125;\\\\\\&quot; ;</span><br><span class=\"line\">                        jiaohu</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    Scp_File &#123;</span><br><span class=\"line\">                        spawn scp -P $Port -o StrictHostKeyChecking=no -r $ScpPath $RemoteUser@$Ip:$&#123;ScpRemotePath&#125;;</span><br><span class=\"line\">                        jiaohu</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                &quot;</span><br><span class=\"line\">                state=`echo $?`</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            交互双引号引用较长变量&#123;</span><br><span class=\"line\">                #!/bin/bash</span><br><span class=\"line\">                RemoteUser=xuesong12</span><br><span class=\"line\">                Ip=192.168.1.2</span><br><span class=\"line\">                RemotePasswd=xuesong</span><br><span class=\"line\">                Cmd=&quot;/bin/echo &quot;$PubKey&quot; &gt; &quot;$RemoteKey&quot;/authorized_keys&quot;</span><br><span class=\"line\">                /usr/bin/expect -c &quot;</span><br><span class=\"line\">                set timeout 10</span><br><span class=\"line\">                spawn ssh -o StrictHostKeyChecking=no $RemoteUser@$Ip &#123;$Cmd&#125;;</span><br><span class=\"line\">                expect &#123;</span><br><span class=\"line\">                    password: &#123;</span><br><span class=\"line\">                        send_user RemotePasswd\\n</span><br><span class=\"line\">                        send $&#123;RemotePasswd&#125;\\r;</span><br><span class=\"line\">                        interact;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    eof &#123;</span><br><span class=\"line\">                        send_user eof\\n</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                &quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            telnet交互&#123;</span><br><span class=\"line\">                #!/bin/bash</span><br><span class=\"line\">                Ip=&quot;10.0.1.53&quot;</span><br><span class=\"line\">                a=&quot;\\&#123;\\&#x27;method\\&#x27;\\:\\&#x27;doLogin\\&#x27;\\,\\&#x27;params\\&#x27;\\:\\&#123;\\&#x27;uName\\&#x27;\\:\\&#x27;bobbietest\\&#x27;\\&#125;&quot;</span><br><span class=\"line\">                /usr/bin/expect -c&quot;</span><br><span class=\"line\">                        set timeout 15</span><br><span class=\"line\">                        spawn telnet $&#123;Ip&#125; 8000</span><br><span class=\"line\">                        expect &quot;Escape&quot;</span><br><span class=\"line\">                        send &quot;$&#123;a&#125;\\\\r&quot;</span><br><span class=\"line\">                        expect &#123;</span><br><span class=\"line\">                                -re &quot;\\&quot;err.*none\\&quot;&quot; &#123;</span><br><span class=\"line\">                                        exit 0</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                timeout &#123;</span><br><span class=\"line\">                                        exit 1</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                                eof &#123;</span><br><span class=\"line\">                                        exit 2</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                &quot;</span><br><span class=\"line\">                echo $?</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            模拟ssh登录&#123;</span><br><span class=\"line\">                #好处:可加载环境变量</span><br><span class=\"line\">                #!/bin/bash</span><br><span class=\"line\">                Ip=&#x27;192.168.1.6&#x27;            # 循环就行</span><br><span class=\"line\">                RemoteUser=&#x27;user&#x27;           # 普通用户</span><br><span class=\"line\">                RemotePasswd=&#x27;userpasswd&#x27;   # 普通用户的密码</span><br><span class=\"line\">                RemoteRootPasswd=&#x27;rootpasswd&#x27;</span><br><span class=\"line\">                /usr/bin/expect -c &quot;</span><br><span class=\"line\">                set timeout -1</span><br><span class=\"line\">                spawn ssh -t -p $Port -o StrictHostKeyChecking=no $RemoteUser@$Ip</span><br><span class=\"line\">                expect &#123;</span><br><span class=\"line\">                    password &#123;</span><br><span class=\"line\">                        send_user RemotePasswd</span><br><span class=\"line\">                        send $&#123;RemotePasswd&#125;\\r;</span><br><span class=\"line\">                        expect &#123;</span><br><span class=\"line\">                            \\&quot;does not exist\\&quot; &#123;</span><br><span class=\"line\">                                send_user \\&quot;root user does not exist\\n\\&quot;</span><br><span class=\"line\">                                exit 10</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            password &#123;</span><br><span class=\"line\">                                send_user \\&quot;user passwd error\\n\\&quot;</span><br><span class=\"line\">                                exit 5</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                            Last &#123;</span><br><span class=\"line\">                                send \\&quot;su - batch\\n\\&quot;</span><br><span class=\"line\">                                expect &#123;</span><br><span class=\"line\">                                    Password &#123;</span><br><span class=\"line\">                                        send_user RemoteRootPasswd</span><br><span class=\"line\">                                        send $&#123;RemoteRootPasswd&#125;\\r;</span><br><span class=\"line\">                                        expect &#123;</span><br><span class=\"line\">                                            \\&quot;]#\\&quot; &#123;</span><br><span class=\"line\">                                                send \\&quot;sh /tmp/update.sh update\\n \\&quot;</span><br><span class=\"line\">                                                expect &#123;</span><br><span class=\"line\">                                                    \\&quot;]#\\&quot; &#123;</span><br><span class=\"line\">                                                        send_user $&#123;Ip&#125;_Update_Done\\n</span><br><span class=\"line\">                                                    &#125;</span><br><span class=\"line\">                                                    eof</span><br><span class=\"line\">                                                &#125;</span><br><span class=\"line\">                                            &#125;</span><br><span class=\"line\">                                        &#125;</span><br><span class=\"line\">                                    &#125;</span><br><span class=\"line\">                                &#125;</span><br><span class=\"line\">                            &#125;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    \\&quot;No route to host\\&quot; &#123;</span><br><span class=\"line\">                        send_user \\&quot;host not found\\n\\&quot;</span><br><span class=\"line\">                        exit 4</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    \\&quot;Invalid argument\\&quot; &#123;</span><br><span class=\"line\">                        send_user \\&quot;incorrect parameter\\n\\&quot;</span><br><span class=\"line\">                        exit 8</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    \\&quot;Connection refused\\&quot; &#123;</span><br><span class=\"line\">                        send_user \\&quot;invalid port parameters\\n\\&quot;</span><br><span class=\"line\">                        exit 9</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    \\&quot;does not exist\\&quot; &#123;</span><br><span class=\"line\">                        send_user \\&quot;root user does not exist\\&quot;</span><br><span class=\"line\">                        exit 10</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    timeout &#123;</span><br><span class=\"line\">                        send_user \\&quot;connection timeout \\n\\&quot;</span><br><span class=\"line\">                        exit 3</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    eof</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                &quot;</span><br><span class=\"line\">                state=`echo $?`</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">9 实例&#123;</span><br><span class=\"line\">    从1叠加到100&#123;</span><br><span class=\"line\">        echo $[$(echo +&#123;1..100&#125;)]</span><br><span class=\"line\">        echo $[(100+1)*(100/2)]</span><br><span class=\"line\">        seq -s &#x27;+&#x27; 100 |bc</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    判断参数是否为空-空退出并打印null&#123;</span><br><span class=\"line\">        #!/bin/sh</span><br><span class=\"line\">        echo $1</span><br><span class=\"line\">        name=$&#123;1:?&quot;null&quot;&#125;</span><br><span class=\"line\">        echo $name</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    循环数组&#123;</span><br><span class=\"line\">        for ((i=0;i&lt;$&#123;#o[*]&#125;;i++))</span><br><span class=\"line\">        do</span><br><span class=\"line\">            echo $&#123;o[$i]&#125;</span><br><span class=\"line\">        done</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    判断路径&#123;</span><br><span class=\"line\">        if [ -d /root/Desktop/text/123 ];then</span><br><span class=\"line\">            echo &quot;找到了123&quot;</span><br><span class=\"line\">            if [ -d /root/Desktop/text ]</span><br><span class=\"line\">            then echo &quot;找到了text&quot;</span><br><span class=\"line\">            else echo &quot;没找到text&quot;</span><br><span class=\"line\">            fi</span><br><span class=\"line\">        else echo &quot;没找到123文件夹&quot;</span><br><span class=\"line\">        fi</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    找出出现次数最多&#123;</span><br><span class=\"line\">        awk &#x27;&#123;print $1&#125;&#x27; file|sort |uniq -c|sort -k1r</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">\t统计某一类进程占用内存总和&#123;</span><br><span class=\"line\">\t    ps aux|grep java|awk &#x27;&#123;sum +=$6&#125;;END &#123;print sum&#125;&#x27;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    判断脚本参数是否正确&#123;</span><br><span class=\"line\">        ./test.sh  -p 123 -P 3306 -h 127.0.0.1 -u root</span><br><span class=\"line\">        #!/bin/sh</span><br><span class=\"line\">        if [ $# -ne 8 ];then</span><br><span class=\"line\">            echo &quot;USAGE: $0 -u user -p passwd -P port -h host&quot;</span><br><span class=\"line\">            exit 1</span><br><span class=\"line\">        fi</span><br><span class=\"line\">        while getopts :u:p:P:h: name</span><br><span class=\"line\">        do</span><br><span class=\"line\">            case $name in</span><br><span class=\"line\">            u)</span><br><span class=\"line\">                mysql_user=$OPTARG</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">            p)</span><br><span class=\"line\">                mysql_passwd=$OPTARG</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">            P)</span><br><span class=\"line\">                mysql_port=$OPTARG</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">            h)</span><br><span class=\"line\">                mysql_host=$OPTARG</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">            *)</span><br><span class=\"line\">                echo &quot;USAGE: $0 -u user -p passwd -P port -h host&quot;</span><br><span class=\"line\">                exit 1</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">            esac</span><br><span class=\"line\">        done</span><br><span class=\"line\">        if [ -z $mysql_user ] || [ -z $mysql_passwd ] || [ -z $mysql_port ] || [ -z $mysql_host ]</span><br><span class=\"line\">        then</span><br><span class=\"line\">            echo &quot;USAGE: $0 -u user -p passwd -P port -h host&quot;</span><br><span class=\"line\">            exit 1</span><br><span class=\"line\">        fi</span><br><span class=\"line\">        echo $mysql_user $mysql_passwd $mysql_port  $mysql_host</span><br><span class=\"line\">        #结果 root 123 3306 127.0.0.1</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    正则匹配邮箱&#123;</span><br><span class=\"line\">        ^[_a-z0-9-]+(\\.[_a-z0-9-]+)*@[a-z0-9-]+(\\.[a-z0-9-]+)*(\\.[a-z]&#123;2,4&#125;)$</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    打印表格&#123;</span><br><span class=\"line\">        #!/bin/sh</span><br><span class=\"line\">        clear</span><br><span class=\"line\">        awk &#x27;BEGIN&#123;</span><br><span class=\"line\">        print &quot;+--------------------+--------------------+&quot;;</span><br><span class=\"line\">        printf &quot;|%-20s|%-20s|\\n&quot;,&quot;Name&quot;,&quot;Number&quot;;</span><br><span class=\"line\">        print &quot;+--------------------+--------------------+&quot;;</span><br><span class=\"line\">        &#125;&#x27;</span><br><span class=\"line\">        a=`grep &quot;^[A-Z]&quot; a.txt |sort +1 -n |awk &#x27;&#123;print $1&quot;:&quot;$2&#125;&#x27;`</span><br><span class=\"line\">        #cat a.txt |sort +1 -n |while read list</span><br><span class=\"line\">        for list in $a</span><br><span class=\"line\">        do</span><br><span class=\"line\">            name=`echo $list |awk -F: &#x27;&#123;print $1&#125;&#x27;`</span><br><span class=\"line\">            number=`echo $list |awk -F: &#x27;&#123;print $2&#125;&#x27;`</span><br><span class=\"line\">            awk &#x27;BEGIN&#123;printf &quot;|%-20s|%-20s|\\n&quot;,&quot;&#x27;&quot;$name&quot;&#x27;&quot;,&quot;&#x27;&quot;$number&quot;&#x27;&quot;;</span><br><span class=\"line\">            print &quot;+--------------------+--------------------+&quot;;</span><br><span class=\"line\">            &#125;&#x27;</span><br><span class=\"line\">        done</span><br><span class=\"line\">        awk &#x27;BEGIN&#123;</span><br><span class=\"line\">        print &quot;              *** The End ***              &quot;</span><br><span class=\"line\">        print &quot;                                           &quot;</span><br><span class=\"line\">        &#125;&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    判断日期是否合法&#123;</span><br><span class=\"line\">        #!/bin/sh</span><br><span class=\"line\">        while read a</span><br><span class=\"line\">        do</span><br><span class=\"line\">          if echo $a | grep -q &quot;-&quot; &amp;&amp; date -d $a +%Y%m%d &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">          then</span><br><span class=\"line\">            if echo $a | grep -e &#x27;^[0-9]\\&#123;4\\&#125;-[01][0-9]-[0-3][0-9]$&#x27;</span><br><span class=\"line\">            then</span><br><span class=\"line\">                break</span><br><span class=\"line\">            else</span><br><span class=\"line\">                echo &quot;您输入的日期不合法，请从新输入！&quot;</span><br><span class=\"line\">            fi</span><br><span class=\"line\">          else</span><br><span class=\"line\">            echo &quot;您输入的日期不合法，请从新输入！&quot;</span><br><span class=\"line\">          fi</span><br><span class=\"line\">        done</span><br><span class=\"line\">        echo &quot;日期为$a&quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    打印日期段所有日期&#123;</span><br><span class=\"line\">        #!/bin/bash</span><br><span class=\"line\">        qsrq=20010101</span><br><span class=\"line\">        jsrq=20010227</span><br><span class=\"line\">        n=0</span><br><span class=\"line\">        &gt;tmp</span><br><span class=\"line\">        while :;do</span><br><span class=\"line\">        current=$(date +%Y%m%d -d&quot;$n day $qsrq&quot;)</span><br><span class=\"line\">        if [[ $current == $jsrq ]];then</span><br><span class=\"line\">            echo $current &gt;&gt;tmp;break</span><br><span class=\"line\">        else</span><br><span class=\"line\">            echo $current &gt;&gt;tmp</span><br><span class=\"line\">            ((n++))</span><br><span class=\"line\">        fi</span><br><span class=\"line\">        done</span><br><span class=\"line\">        rq=`awk &#x27;NR==1&#123;print&#125;&#x27; tmp`</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    数学计算的小算法&#123;</span><br><span class=\"line\">        #!/bin/sh</span><br><span class=\"line\">        A=1</span><br><span class=\"line\">        B=1</span><br><span class=\"line\">        while [ $A -le 10 ]</span><br><span class=\"line\">        do</span><br><span class=\"line\">            SUM=`expr $A \\* $B`</span><br><span class=\"line\">            echo &quot;$SUM&quot;</span><br><span class=\"line\">            if [ $A = 10 ]</span><br><span class=\"line\">            then</span><br><span class=\"line\">                B=`expr $B + 1`</span><br><span class=\"line\">                A=1</span><br><span class=\"line\">            fi</span><br><span class=\"line\">            A=`expr $A + 1`</span><br><span class=\"line\">        done</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    多行合并&#123;</span><br><span class=\"line\">        sed &#x27;&#123;N;s/\\n//&#125;&#x27; file                   # 将两行合并一行(去掉换行符)</span><br><span class=\"line\">        awk &#x27;&#123;printf(NR%2!=0)?$0&quot; &quot;:$0&quot; \\n&quot;&#125;&#x27;   # 将两行合并一行</span><br><span class=\"line\">        awk &#x27;&#123;printf&quot;%s &quot;,$0&#125;&#x27;                  # 将所有行合并</span><br><span class=\"line\">        awk &#x27;&#123;if (NR%4==0)&#123;print $0&#125; else &#123;printf&quot;%s &quot;,$0&#125;&#125;&#x27; file    # 将4行合并为一行(可扩展)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    横竖转换&#123;</span><br><span class=\"line\">        cat a.txt | xargs           # 列转行</span><br><span class=\"line\">        cat a.txt | xargs -n1       # 行转列</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    竖行转横行&#123;</span><br><span class=\"line\">        cat file|tr &#x27;\\n&#x27; &#x27; &#x27;</span><br><span class=\"line\">        echo $(cat file)</span><br><span class=\"line\">        #!/bin/sh</span><br><span class=\"line\">        for i in `cat file`</span><br><span class=\"line\">        do</span><br><span class=\"line\">              a=$&#123;a&#125;&quot; &quot;$&#123;i&#125;</span><br><span class=\"line\">        done</span><br><span class=\"line\">        echo $a</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    取用户的根目录&#123;</span><br><span class=\"line\">        #! /bin/bash</span><br><span class=\"line\">        while read name pass uid gid gecos home shell</span><br><span class=\"line\">        do</span><br><span class=\"line\">            echo $home</span><br><span class=\"line\">        done &lt; /etc/passwd</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    远程打包&#123;</span><br><span class=\"line\">        ssh -n $ip &#x27;find &#x27;$path&#x27; /data /opt -type f  -name &quot;*.sh&quot; -or -name &quot;*.py&quot; -or -name &quot;*.pl&quot; |xargs tar zcvpf /tmp/data_backup.tar.gz&#x27;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    把汉字转成encode格式&#123;</span><br><span class=\"line\">        echo 论坛 | tr -d &quot;\\n&quot; | xxd -i | sed -e &quot;s/ 0x/%/g&quot; | tr -d &quot; ,\\n&quot;</span><br><span class=\"line\">        %c2%db%cc%b3</span><br><span class=\"line\">        echo 论坛 | tr -d &quot;\\n&quot; | xxd -i | sed -e &quot;s/ 0x/%/g&quot; | tr -d &quot; ,\\n&quot; | tr &quot;[a-f]&quot; &quot;[A-F]&quot;  # 大写的</span><br><span class=\"line\">        %C2%DB%CC%B3</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    把目录带有大写字母的文件名改为全部小写&#123;</span><br><span class=\"line\">        #!/bin/bash</span><br><span class=\"line\">        for f in *;do</span><br><span class=\"line\">            mv $f `echo $f |tr &quot;[A-Z]&quot; &quot;[a-z]&quot;`</span><br><span class=\"line\">        done</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    查找连续多行，在不连续的行前插入&#123;</span><br><span class=\"line\">        #/bin/bash</span><br><span class=\"line\">        lastrow=null</span><br><span class=\"line\">        i=0</span><br><span class=\"line\">        cat incl|while read line</span><br><span class=\"line\">        do</span><br><span class=\"line\">        i=`expr $i + 1`</span><br><span class=\"line\">        if echo &quot;$lastrow&quot; | grep &quot;#include &lt;[A-Z].h&gt;&quot;</span><br><span class=\"line\">        then</span><br><span class=\"line\">            if echo &quot;$line&quot; | grep -v  &quot;#include &lt;[A-Z].h&gt;&quot;</span><br><span class=\"line\">            then</span><br><span class=\"line\">                sed -i &#x27;&#x27;$i&#x27;i\\\\/\\/All header files are include&#x27; incl</span><br><span class=\"line\">                i=`expr $i + 1`</span><br><span class=\"line\">            fi</span><br><span class=\"line\">        fi</span><br><span class=\"line\">        lastrow=&quot;$line&quot;</span><br><span class=\"line\">        done</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    查询数据库其它引擎&#123;</span><br><span class=\"line\">        #/bin/bash</span><br><span class=\"line\">        path1=/data/mysql/data/</span><br><span class=\"line\">        dbpasswd=db123</span><br><span class=\"line\">        #MyISAM或InnoDB</span><br><span class=\"line\">        engine=InnoDB</span><br><span class=\"line\">        if [ -d $path1 ];then</span><br><span class=\"line\">        dir=`ls -p $path1 |awk &#x27;/\\/$/&#x27;|awk -F&#x27;/&#x27; &#x27;&#123;print $1&#125;&#x27;`</span><br><span class=\"line\">            for db in $dir</span><br><span class=\"line\">            do</span><br><span class=\"line\">            number=`mysql -uroot -p$dbpasswd -A -S &quot;$path1&quot;mysql.sock -e &quot;use $&#123;db&#125;;show table status;&quot; |grep -c $engine`</span><br><span class=\"line\">                if [ $number -ne 0 ];then</span><br><span class=\"line\">                echo &quot;$&#123;db&#125;&quot;</span><br><span class=\"line\">                fi</span><br><span class=\"line\">            done</span><br><span class=\"line\">        fi</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    批量修改数据库引擎&#123;</span><br><span class=\"line\">        #/bin/bash</span><br><span class=\"line\">        for db in test test1 test3</span><br><span class=\"line\">        do</span><br><span class=\"line\">            tables=`mysql -uroot -pdb123 -A -S /data/mysql/data/mysql.sock -e &quot;use $db;show tables;&quot; |awk &#x27;NR != 1&#123;print&#125;&#x27;`</span><br><span class=\"line\">            for table in $tables</span><br><span class=\"line\">            do</span><br><span class=\"line\">                mysql -uroot -pdb123 -A -S /data/mysql/data/mysql.sock -e &quot;use $db;alter table $table engine=MyISAM;&quot;</span><br><span class=\"line\">            done</span><br><span class=\"line\">        done</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    将shell取到的数据插入mysql数据库&#123;</span><br><span class=\"line\">        mysql -u$username -p$passwd -h$dbhost -P$dbport -A -e &quot;</span><br><span class=\"line\">        use $dbname;</span><br><span class=\"line\">        insert into data values (&#x27;&#x27;,&#x27;$ip&#x27;,&#x27;$date&#x27;,&#x27;$time&#x27;,&#x27;$data&#x27;)</span><br><span class=\"line\">        &quot;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    两日期间隔天数&#123;</span><br><span class=\"line\">        D1=`date -d &#x27;20070409&#x27; +&quot;%s&quot;`</span><br><span class=\"line\">        D2=`date -d &#x27;20070304 &#x27; +&quot;%s&quot;`</span><br><span class=\"line\">        D3=$(($D1 - $D2))</span><br><span class=\"line\">        echo $(($D3/60/60/24))</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    while执行ssh只循环一次&#123;</span><br><span class=\"line\">        cat -    # 让cat读连接文件stdin的信息</span><br><span class=\"line\">        seq 10 | while read line; do ssh localhost &quot;cat -&quot;; done        # 显示的9次是被ssh吃掉的</span><br><span class=\"line\">        seq 10 | while read line; do ssh -n localhost &quot;cat -&quot;; done     # ssh加上-n参数可避免只循环一次</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    ssh批量执行命令&#123;</span><br><span class=\"line\">        #版本1</span><br><span class=\"line\">        #!/bin/bash</span><br><span class=\"line\">        while read line</span><br><span class=\"line\">        do</span><br><span class=\"line\">        Ip=`echo $line|awk &#x27;&#123;print $1&#125;&#x27;`</span><br><span class=\"line\">        Passwd=`echo $line|awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class=\"line\">        ssh -n localhost &quot;cat -&quot;</span><br><span class=\"line\">        sshpass -p &quot;$Passwd&quot; ssh -n -t -o StrictHostKeyChecking=no root@$Ip &quot;id&quot;</span><br><span class=\"line\">        done&lt;iplist.txt</span><br><span class=\"line\">        #版本2</span><br><span class=\"line\">        #!/bin/bash</span><br><span class=\"line\">        Iplist=`awk &#x27;&#123;print $1&#125;&#x27; iplist.txt`</span><br><span class=\"line\">        for Ip in $Iplist</span><br><span class=\"line\">        do</span><br><span class=\"line\">        Passwd=`awk &#x27;/&#x27;$Ip&#x27;/&#123;print $2&#125;&#x27; iplist.txt`</span><br><span class=\"line\">        sshpass -p &quot;$Passwd&quot; ssh -n -t -o StrictHostKeyChecking=no root@$Ip &quot;id&quot;</span><br><span class=\"line\">        done</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    在同一位置打印字符&#123;</span><br><span class=\"line\">        #!/bin/bash</span><br><span class=\"line\">        echo -ne &quot;\\t&quot;</span><br><span class=\"line\">        for i in `seq -w 100 -1 1`</span><br><span class=\"line\">        do</span><br><span class=\"line\">            echo -ne &quot;$i\\b\\b\\b&quot;;      # 关键\\b退格</span><br><span class=\"line\">            sleep 1;</span><br><span class=\"line\">        done</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    多进程后台并发简易控制&#123;</span><br><span class=\"line\">        #!/bin/bash</span><br><span class=\"line\">        test () &#123;</span><br><span class=\"line\">            echo $a</span><br><span class=\"line\">            sleep 5</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        for a in `seq 1 30`</span><br><span class=\"line\">        do</span><br><span class=\"line\">            test &amp;</span><br><span class=\"line\">            echo $!</span><br><span class=\"line\">            ((num++))</span><br><span class=\"line\">            if [ $num -eq 6 ];then</span><br><span class=\"line\">            echo &quot;wait...&quot;</span><br><span class=\"line\">            wait</span><br><span class=\"line\">            num=0</span><br><span class=\"line\">            fi</span><br><span class=\"line\">        done</span><br><span class=\"line\">        wait</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    shell并发&#123;</span><br><span class=\"line\">        #!/bin/bash</span><br><span class=\"line\">        tmpfile=$$.fifo   # 创建管道名称</span><br><span class=\"line\">        mkfifo $tmpfile   # 创建管道</span><br><span class=\"line\">        exec 4&lt;&gt;$tmpfile  # 创建文件标示4，以读写方式操作管道$tmpfile</span><br><span class=\"line\">        rm $tmpfile       # 将创建的管道文件清除</span><br><span class=\"line\">        thred=4           # 指定并发个数</span><br><span class=\"line\">        seq=(1 2 3 4 5 6 7 8 9 21 22 23 24 25 31 32 33 34 35) # 创建任务列表</span><br><span class=\"line\">        # 为并发线程创建相应个数的占位</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">        for (( i = 1;i&lt;=$&#123;thred&#125;;i++ ))</span><br><span class=\"line\">        do</span><br><span class=\"line\">            echo;  # 因为read命令一次读取一行，一个echo默认输出一个换行符，所以为每个线程输出一个占位换行</span><br><span class=\"line\">        done</span><br><span class=\"line\">        &#125; &gt;&amp;4      # 将占位信息写入管道</span><br><span class=\"line\">        for id in $&#123;seq&#125;  # 从任务列表 seq 中按次序获取每一个任务</span><br><span class=\"line\">        do</span><br><span class=\"line\">          read  # 读取一行，即fd4中的一个占位符</span><br><span class=\"line\">          (./ur_command $&#123;id&#125;;echo &gt;&amp;4 ) &amp;   # 在后台执行任务ur_command 并将任务 $&#123;id&#125; 赋给当前任务；任务执行完后在fd4种写入一个占位符</span><br><span class=\"line\">        done &lt;&amp;4    # 指定fd4为整个for的标准输入</span><br><span class=\"line\">        wait        # 等待所有在此shell脚本中启动的后台任务完成</span><br><span class=\"line\">        exec 4&gt;&amp;-   # 关闭管道</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    shell并发函数&#123;</span><br><span class=\"line\">        function ConCurrentCmd()</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            #进程数</span><br><span class=\"line\">            Thread=30</span><br><span class=\"line\">            #列表文件</span><br><span class=\"line\">            CurFileName=iplist.txt</span><br><span class=\"line\">            #定义fifo文件</span><br><span class=\"line\">            FifoFile=&quot;$$.fifo&quot;</span><br><span class=\"line\">            #新建一个fifo类型的文件</span><br><span class=\"line\">            mkfifo $FifoFile</span><br><span class=\"line\">            #将fd6与此fifo类型文件以读写的方式连接起来</span><br><span class=\"line\">            exec 6&lt;&gt;$FifoFile</span><br><span class=\"line\">            rm $FifoFile</span><br><span class=\"line\">            #事实上就是在文件描述符6中放置了$Thread个回车符</span><br><span class=\"line\">            for ((i=0;i&lt;=$Thread;i++));do echo;done &gt;&amp;6</span><br><span class=\"line\">            #此后标准输入将来自fd5</span><br><span class=\"line\">            exec 5&lt;$CurFileName</span><br><span class=\"line\">            #开始循环读取文件列表中的行</span><br><span class=\"line\">            Count=0</span><br><span class=\"line\">            while read -u5 line</span><br><span class=\"line\">            do</span><br><span class=\"line\">                read -u6</span><br><span class=\"line\">                let Count+=1</span><br><span class=\"line\">                # 此处定义一个子进程放到后台执行</span><br><span class=\"line\">                # 一个read -u6命令执行一次,就从fd6中减去一个回车符，然后向下执行</span><br><span class=\"line\">                # fd6中没有回车符的时候,就停在这了,从而实现了进程数量控制</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    echo $Count</span><br><span class=\"line\">                    #这段代码框就是执行具体的操作了</span><br><span class=\"line\">                    function</span><br><span class=\"line\">                    echo &gt;&amp;6</span><br><span class=\"line\">                    #当进程结束以后,再向fd6中追加一个回车符,即补上了read -u6减去的那个</span><br><span class=\"line\">                &#125; &amp;</span><br><span class=\"line\">            done</span><br><span class=\"line\">            #等待所有后台子进程结束</span><br><span class=\"line\">            wait</span><br><span class=\"line\">            #关闭fd6</span><br><span class=\"line\">            exec 6&gt;&amp;-</span><br><span class=\"line\">            #关闭fd5</span><br><span class=\"line\">            exec 5&gt;&amp;-</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        并发例子&#123;</span><br><span class=\"line\">            #!/bin/bash</span><br><span class=\"line\">            pnum=3</span><br><span class=\"line\">            task () &#123;</span><br><span class=\"line\">                echo &quot;$u start&quot;</span><br><span class=\"line\">                sleep 5</span><br><span class=\"line\">                echo &quot;$u done&quot;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            FifoFile=&quot;$$.fifo&quot;</span><br><span class=\"line\">            mkfifo $FifoFile</span><br><span class=\"line\">            exec 6&lt;&gt;$FifoFile</span><br><span class=\"line\">            rm $FifoFile</span><br><span class=\"line\">            </span><br><span class=\"line\">            for ((i=0;i&lt;=$pnum;i++));do echo;done &gt;&amp;6</span><br><span class=\"line\">            for u in `seq 1 20`</span><br><span class=\"line\">            do</span><br><span class=\"line\">                read -u6</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    task</span><br><span class=\"line\">                    [ $? -eq 0 ] &amp;&amp; echo &quot;$&#123;u&#125; 次成功&quot; || echo &quot;$&#123;u&#125; 次失败&quot;</span><br><span class=\"line\">                    echo &gt;&amp;6</span><br><span class=\"line\">                &#125; &amp;</span><br><span class=\"line\">            done</span><br><span class=\"line\">            wait</span><br><span class=\"line\">            exec 6&gt;&amp;-</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    函数&#123;</span><br><span class=\"line\">        ip()&#123;</span><br><span class=\"line\">            echo &quot;a 1&quot;|awk &#x27;$1==&quot;&#x27;&quot;$1&quot;&#x27;&quot;&#123;print $2&#125;&#x27;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        web=a</span><br><span class=\"line\">        ip $web</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    检测软件包是否存在&#123;</span><br><span class=\"line\">        rpm -q dialog &gt;/dev/null</span><br><span class=\"line\">        if [ &quot;$?&quot; -ge 1 ];then</span><br><span class=\"line\">            echo &quot;install dialog,Please wait...&quot;</span><br><span class=\"line\">            yum -y install dialog</span><br><span class=\"line\">            rpm -q dialog &gt;/dev/null</span><br><span class=\"line\">            [ $? -ge 1 ] &amp;&amp; echo &quot;dialog installation failure,exit&quot; &amp;&amp; exit</span><br><span class=\"line\">            echo &quot;dialog done&quot;</span><br><span class=\"line\">            read</span><br><span class=\"line\">        fi</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    游戏维护菜单-修改配置文件&#123;</span><br><span class=\"line\">        #!/bin/bash</span><br><span class=\"line\">        conf=serverlist.xml</span><br><span class=\"line\">        AreaList=`awk -F &#x27;&quot;&#x27; &#x27;/&lt;s/&#123;print $2&#125;&#x27; $conf`</span><br><span class=\"line\">        select area in $AreaList 全部 退出</span><br><span class=\"line\">        do</span><br><span class=\"line\">            echo &quot;&quot;</span><br><span class=\"line\">            echo $area</span><br><span class=\"line\">            case $area in</span><br><span class=\"line\">            退出)</span><br><span class=\"line\">                exit</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">            *)</span><br><span class=\"line\">                select operate in &quot;修改版本号&quot; &quot;添加维护中&quot; &quot;删除维护中&quot; &quot;返回菜单&quot;</span><br><span class=\"line\">                do</span><br><span class=\"line\">                    echo &quot;&quot;</span><br><span class=\"line\">                    echo $operate</span><br><span class=\"line\">                    case $operate in</span><br><span class=\"line\">                    修改版本号)</span><br><span class=\"line\">                        echo 请输入版本号</span><br><span class=\"line\">                        while read version</span><br><span class=\"line\">                        do</span><br><span class=\"line\">                            if echo $version | grep -w 10[12][0-9][0-9][0-9][0-9][0-9][0-9]</span><br><span class=\"line\">                            then</span><br><span class=\"line\">                                break</span><br><span class=\"line\">                            fi</span><br><span class=\"line\">                            echo 请从新输入正确的版本号</span><br><span class=\"line\">                        done</span><br><span class=\"line\">                        case $area in</span><br><span class=\"line\">                        全部)</span><br><span class=\"line\">                            case $version in</span><br><span class=\"line\">                            101*)</span><br><span class=\"line\">                                echo &quot;请确认操作对 $area 体验区 $operate&quot;</span><br><span class=\"line\">                                read</span><br><span class=\"line\">                                sed -i &#x27;s/101[0-9][0-9][0-9][0-9][0-9][0-9]/&#x27;$version&#x27;/&#x27; $conf</span><br><span class=\"line\">                            ;;</span><br><span class=\"line\">                            102*)</span><br><span class=\"line\">                                echo &quot;请确认操作对 $area 正式区 $operate&quot;</span><br><span class=\"line\">                                read</span><br><span class=\"line\">                                sed -i &#x27;s/102[0-9][0-9][0-9][0-9][0-9][0-9]/&#x27;$version&#x27;/&#x27; $conf</span><br><span class=\"line\">                            ;;</span><br><span class=\"line\">                            esac</span><br><span class=\"line\">                        ;;</span><br><span class=\"line\">                        *)</span><br><span class=\"line\">                            type=`awk -F &#x27;&quot;&#x27; &#x27;/&#x27;$area&#x27;/&#123;print $14&#125;&#x27; $conf |cut -c1-3`</span><br><span class=\"line\">                            readtype=`echo $version |cut -c1-3`</span><br><span class=\"line\">                            if [ $type != $readtype ]</span><br><span class=\"line\">                            then</span><br><span class=\"line\">                                echo &quot;版本号不对应，请从新操作&quot;</span><br><span class=\"line\">                                continue</span><br><span class=\"line\">                            fi</span><br><span class=\"line\">                            echo &quot;请确认操作对 $area 区 $operate&quot;</span><br><span class=\"line\">                            read</span><br><span class=\"line\">                            awk -F &#x27;&quot;&#x27; &#x27;/&#x27;$area&#x27;/&#123;print $12&#125;&#x27; $conf |xargs -i sed -i &#x27;/&#x27;&#123;&#125;&#x27;/s/10[12][0-9][0-9][0-9][0-9][0-9][0-9]/&#x27;$version&#x27;/&#x27; $conf</span><br><span class=\"line\">                        ;;</span><br><span class=\"line\">                        esac</span><br><span class=\"line\">                    ;;</span><br><span class=\"line\">                    添加维护中)</span><br><span class=\"line\">                        case $area in</span><br><span class=\"line\">                        全部)</span><br><span class=\"line\">                            echo &quot;请确认操作对 $area 区 $operate&quot;</span><br><span class=\"line\">                            read</span><br><span class=\"line\">                            awk -F &#x27;&quot;&#x27; &#x27;/&lt;s/&#123;print $2&#125;&#x27; $conf |xargs -i sed -i &#x27;s/&#x27;&#123;&#125;&#x27;/&amp;维护中/&#x27; $conf</span><br><span class=\"line\">                        ;;</span><br><span class=\"line\">                        *)</span><br><span class=\"line\">                            echo &quot;请确认操作对 $area 区 $operate&quot;</span><br><span class=\"line\">                            read</span><br><span class=\"line\">                            sed -i &#x27;s/&#x27;$area&#x27;/&amp;维护中/&#x27; $conf</span><br><span class=\"line\">                        ;;</span><br><span class=\"line\">                        esac</span><br><span class=\"line\">                    ;;</span><br><span class=\"line\">                    删除维护中)</span><br><span class=\"line\">                        case $area in</span><br><span class=\"line\">                        全部)</span><br><span class=\"line\">                            echo &quot;请确认操作对 $area 区 $operate&quot;</span><br><span class=\"line\">                            read</span><br><span class=\"line\">                            sed -i &#x27;s/维护中//&#x27; $conf</span><br><span class=\"line\">                        ;;</span><br><span class=\"line\">                        *)</span><br><span class=\"line\">                            echo &quot;请确认操作对 $area 区 $operate&quot;</span><br><span class=\"line\">                            read</span><br><span class=\"line\">                            sed -i &#x27;/&#x27;$area&#x27;/s/维护中//&#x27; $conf</span><br><span class=\"line\">                        ;;</span><br><span class=\"line\">                        esac</span><br><span class=\"line\">                    ;;</span><br><span class=\"line\">                    返回菜单)</span><br><span class=\"line\">                        break</span><br><span class=\"line\">                    ;;</span><br><span class=\"line\">                    esac</span><br><span class=\"line\">                done</span><br><span class=\"line\">            ;;</span><br><span class=\"line\">            esac</span><br><span class=\"line\">            echo &quot;回车重新选择区&quot;</span><br><span class=\"line\">        done</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    keepalive剔除后端服务&#123;</span><br><span class=\"line\">        #!/bin/bash</span><br><span class=\"line\">        #行数请自定义,默认8行</span><br><span class=\"line\">        if [ X$2 == X ];then</span><br><span class=\"line\">            echo &quot;error: IP null&quot;</span><br><span class=\"line\">            read</span><br><span class=\"line\">            exit</span><br><span class=\"line\">        fi</span><br><span class=\"line\">        case $1 in</span><br><span class=\"line\">        del)</span><br><span class=\"line\">            sed -i &#x27;/real_server.*&#x27;$2&#x27;.*8888/,+8 s/^/#/&#x27; /etc/keepalived/keepalived.conf</span><br><span class=\"line\">            /etc/init.d/keepalived reload</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">        add)</span><br><span class=\"line\">            sed -i &#x27;/real_server.*&#x27;$2&#x27;.*8888/,+8 s/^#//&#x27; /etc/keepalived/keepalived.conf</span><br><span class=\"line\">            /etc/init.d/keepalived reload</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">        *)</span><br><span class=\"line\">            echo &quot;Parameter error&quot;</span><br><span class=\"line\">        ;;</span><br><span class=\"line\">        esac</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    抓取系统中负载最高的进程&#123;</span><br><span class=\"line\">        #!/bin/bash</span><br><span class=\"line\">        LANG=C</span><br><span class=\"line\">        PATH=/sbin:/usr/sbin:/bin:/usr/bin</span><br><span class=\"line\">        interval=1</span><br><span class=\"line\">        length=86400</span><br><span class=\"line\">        for i in $(seq 1 $(expr $&#123;length&#125; / $&#123;interval&#125;));do</span><br><span class=\"line\">        date</span><br><span class=\"line\">        LANG=C ps -eT -o%cpu,pid,tid,ppid,comm | grep -v CPU | sort -n -r | head -20</span><br><span class=\"line\">        date</span><br><span class=\"line\">        LANG=C cat /proc/loadavg</span><br><span class=\"line\">        &#123; LANG=C ps -eT -o%cpu,pid,tid,ppid,comm | sed -e &#x27;s/^ *//&#x27; | tr -s &#x27; &#x27; | grep -v CPU | sort -n -r | cut -d &#x27; &#x27; -f 1 | xargs -I&#123;&#125; echo -n &quot;&#123;&#125; + &quot; &amp;&amp; echo &#x27; 0&#x27;; &#125; | bc -l</span><br><span class=\"line\">        sleep $&#123;interval&#125;</span><br><span class=\"line\">        done</span><br><span class=\"line\">        fuser -k $0</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    申诉中国反垃圾邮件联盟黑名单&#123;</span><br><span class=\"line\">        #!/bin/bash</span><br><span class=\"line\">        IpList=`awk &#x27;$1!~&quot;^#&quot;&amp;&amp;$1!=&quot;&quot;&#123;print $1&#125;&#x27; host.list`</span><br><span class=\"line\">        QueryAdd=&#x27;http://www.anti-spam.org.cn/Rbl/Query/Result&#x27;</span><br><span class=\"line\">        ComplaintAdd=&#x27;http://www.anti-spam.org.cn/Rbl/Getout/Submit&#x27;</span><br><span class=\"line\">        CONTENT=&#x27;我们是一家正规的XXX。xxxxxxx。恳请将我们的发送服务器IP移出黑名单。谢谢！</span><br><span class=\"line\">        处理措施：</span><br><span class=\"line\">        1.XXXX。</span><br><span class=\"line\">        2.XXXX。&#x27;</span><br><span class=\"line\">        CORP=&#x27;abc.com&#x27;</span><br><span class=\"line\">        WWW=&#x27;www.abc.cm&#x27;</span><br><span class=\"line\">        NAME=&#x27;def&#x27;</span><br><span class=\"line\">        MAIL=&#x27;def@163.com.cn&#x27;</span><br><span class=\"line\">        TEL=&#x27;010-50000000&#x27;</span><br><span class=\"line\">        LEVEL=&#x27;0&#x27;</span><br><span class=\"line\">        for Ip in $IpList</span><br><span class=\"line\">        do</span><br><span class=\"line\">            Status=`curl -d &quot;IP=$Ip&quot; $QueryAdd |grep &#x27;Getout/ShowForm?IP=&#x27; |grep -wc &#x27;申诉脱离&#x27;`</span><br><span class=\"line\">            if [ $Status -ge 1 ];then</span><br><span class=\"line\">                IpStatus=&quot;黑名单中&quot;</span><br><span class=\"line\">                results=`curl -d &quot;IP=$&#123;Ip&#125;&amp;CONTENT=$&#123;CONTENT&#125;&amp;CORP=$&#123;CORP&#125;&amp;WWW=$&#123;WWW&#125;&amp;NAME=$&#123;NAME&#125;&amp;MAIL=$&#123;MAIL&#125;&amp;TEL=$&#123;TEL&#125;&amp;LEVEL=$&#123;LEVEL&#125;&quot; $ComplaintAdd |grep -E &#x27;您的黑名单脱离申请已提交|该IP的脱离申请已被他人提交|申请由于近期内有被拒绝的记录&#x27;`</span><br><span class=\"line\">                echo $results</span><br><span class=\"line\">                if echo $results | grep &#x27;您的黑名单脱离申请已提交&#x27;  &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">                then</span><br><span class=\"line\">                    complaint=&#x27;申诉成功&#x27;</span><br><span class=\"line\">                elif echo $results | grep &#x27;该IP的脱离申请已被他人提交&#x27;  &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">                then</span><br><span class=\"line\">                    complaint=&#x27;申诉重复&#x27;</span><br><span class=\"line\">                elif echo $results | grep &#x27;申请由于近期内有被拒绝的记录&#x27;  &gt; /dev/null 2&gt;&amp;1</span><br><span class=\"line\">                then</span><br><span class=\"line\">                    complaint=&#x27;申诉拒绝&#x27;</span><br><span class=\"line\">                else</span><br><span class=\"line\">                    complaint=&#x27;异常&#x27;</span><br><span class=\"line\">                fi</span><br><span class=\"line\">            else</span><br><span class=\"line\">                IpStatus=&#x27;正常&#x27;</span><br><span class=\"line\">                complaint=&#x27;无需申诉&#x27;</span><br><span class=\"line\">            fi</span><br><span class=\"line\">            echo &quot;$Ip    $IpStatus    $complaint&quot; &gt;&gt; $(date +%Y%m%d_%H%M%S).log</span><br><span class=\"line\">        done</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    Web Server in Awk&#123;</span><br><span class=\"line\">        #gawk -f file</span><br><span class=\"line\">        BEGIN &#123;</span><br><span class=\"line\">          x        = 1                         # script exits if x &lt; 1</span><br><span class=\"line\">          port     = 8080                      # port number</span><br><span class=\"line\">          host     = &quot;/inet/tcp/&quot; port &quot;/0/0&quot;  # host string</span><br><span class=\"line\">          url      = &quot;http://localhost:&quot; port  # server url</span><br><span class=\"line\">          status   = 200                       # 200 == OK</span><br><span class=\"line\">          reason   = &quot;OK&quot;                      # server response</span><br><span class=\"line\">          RS = ORS = &quot;\\r\\n&quot;                    # header line terminators</span><br><span class=\"line\">          doc      = Setup()                   # html document</span><br><span class=\"line\">          len      = length(doc) + length(ORS) # length of document</span><br><span class=\"line\">          while (x) &#123;</span><br><span class=\"line\">             if ($1 == &quot;GET&quot;) RunApp(substr($2, 2))</span><br><span class=\"line\">             if (! x) break</span><br><span class=\"line\">             print &quot;HTTP/1.0&quot;, status, reason |&amp; host</span><br><span class=\"line\">             print &quot;Connection: Close&quot;        |&amp; host</span><br><span class=\"line\">             print &quot;Pragma: no-cache&quot;         |&amp; host</span><br><span class=\"line\">             print &quot;Content-length:&quot;, len     |&amp; host</span><br><span class=\"line\">             print ORS doc                    |&amp; host</span><br><span class=\"line\">             close(host)     # close client connection</span><br><span class=\"line\">             host |&amp; getline # wait for new client request</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          # server terminated...</span><br><span class=\"line\">          doc = Bye()</span><br><span class=\"line\">          len = length(doc) + length(ORS)</span><br><span class=\"line\">          print &quot;HTTP/1.0&quot;, status, reason |&amp; host</span><br><span class=\"line\">          print &quot;Connection: Close&quot;        |&amp; host</span><br><span class=\"line\">          print &quot;Pragma: no-cache&quot;         |&amp; host</span><br><span class=\"line\">          print &quot;Content-length:&quot;, len     |&amp; host</span><br><span class=\"line\">          print ORS doc                    |&amp; host</span><br><span class=\"line\">          close(host)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        function Setup() &#123;</span><br><span class=\"line\">          tmp = &quot;&lt;html&gt;\\</span><br><span class=\"line\">          &lt;head&gt;&lt;title&gt;Simple gawk server&lt;/title&gt;&lt;/head&gt;\\</span><br><span class=\"line\">          &lt;body&gt;\\</span><br><span class=\"line\">          &lt;p&gt;&lt;a href=&quot; url &quot;/xterm&gt;xterm&lt;/a&gt;\\</span><br><span class=\"line\">          &lt;p&gt;&lt;a href=&quot; url &quot;/xcalc&gt;xcalc&lt;/a&gt;\\</span><br><span class=\"line\">          &lt;p&gt;&lt;a href=&quot; url &quot;/xload&gt;xload&lt;/a&gt;\\</span><br><span class=\"line\">          &lt;p&gt;&lt;a href=&quot; url &quot;/exit&gt;terminate script&lt;/a&gt;\\</span><br><span class=\"line\">          &lt;/body&gt;\\</span><br><span class=\"line\">          &lt;/html&gt;&quot;</span><br><span class=\"line\">          return tmp</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        function Bye() &#123;</span><br><span class=\"line\">          tmp = &quot;&lt;html&gt;\\</span><br><span class=\"line\">          &lt;head&gt;&lt;title&gt;Simple gawk server&lt;/title&gt;&lt;/head&gt;\\</span><br><span class=\"line\">          &lt;body&gt;&lt;p&gt;Script Terminated...&lt;/body&gt;\\</span><br><span class=\"line\">          &lt;/html&gt;&quot;</span><br><span class=\"line\">          return tmp</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        function RunApp(app) &#123;</span><br><span class=\"line\">          if (app == &quot;xterm&quot;)  &#123;system(&quot;xterm&amp;&quot;); return&#125;</span><br><span class=\"line\">          if (app == &quot;xcalc&quot; ) &#123;system(&quot;xcalc&amp;&quot;); return&#125;</span><br><span class=\"line\">          if (app == &quot;xload&quot; ) &#123;system(&quot;xload&amp;&quot;); return&#125;</span><br><span class=\"line\">          if (app == &quot;exit&quot;)   &#123;x = 0&#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">10 经验&#123;</span><br><span class=\"line\">    1.服务上线,在启动注册流量时大量报错, 下游服务摘除,重启后, 上游还用原有的链接去链接, 导致请求失败.</span><br><span class=\"line\">    2.systemd守护的进程,在tmp下找不到对应文件, 配置安全tmp项PrivateTmp改为false PrivateTmp=false</span><br><span class=\"line\">    3.统一服务内部调用关系,一个服务对应一个域名</span><br><span class=\"line\">    4.统一服务服务返回的状态码,报警只需要针对5xx就可以发现问题.</span><br><span class=\"line\">    5.在服务雪崩后,恢复服务,用户可能有大量重试,所以放流量也要小比例放流量,逐步恢复</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">11 nginx</span><br><span class=\"line\">   1 日志格式</span><br><span class=\"line\">   log_format main &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; $status $body_bytes_sent &quot;$http_referer&quot; &quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot; $request_time $upstream_response_time $upstream_addr &quot;$http_host&quot;&#x27;;</span><br><span class=\"line\">   </span><br><span class=\"line\">   $remote_addr               # </span><br><span class=\"line\">   [$time_local]              # 调用时间</span><br><span class=\"line\">   &quot;$request&quot;                 # 显示[请求方法 请求接口 HTTP/1.1协议]</span><br><span class=\"line\">   $status                    # 请求返回状态码</span><br><span class=\"line\">   $body_bytes_sent           # 请求body大小</span><br><span class=\"line\">   &quot;$http_referer&quot;            # </span><br><span class=\"line\">   &quot;$http_user_agent&quot;         # 接口从哪个工具发出</span><br><span class=\"line\">   &quot;$http_x_forwarder_for&quot;    # 远程客户端ip</span><br><span class=\"line\">   $request_time              # 请求时间</span><br><span class=\"line\">   $upstream_response_time    # 下游服务返回response时间</span><br><span class=\"line\">   $upstream_addr             # 后端服务地址</span><br><span class=\"line\">   &quot;$http_host&quot;               # 发送请求的host地址</span><br><span class=\"line\"></span><br><span class=\"line\">12 历史记录</span><br><span class=\"line\">13 ansible</span><br><span class=\"line\">   ansible hostname -m shell -a &quot;ls /tmp&quot;          # 在远端host执行shell</span><br><span class=\"line\">   ansible -m ping all                             # 校验远程服务器是否ping通</span><br><span class=\"line\">   </span><br><span class=\"line\">   ## ansible-playbook</span><br><span class=\"line\">   ansible-playbook playbook.yml                   # 调用playbook文件</span><br><span class=\"line\">   vim /etc/ansible/hosts                          # 编辑ansible配置文件</span><br><span class=\"line\">   </span><br><span class=\"line\">   ## yum 模块</span><br><span class=\"line\">   example1:安装单个软件</span><br></pre></td></tr></table></figure>\n</code></pre>\n<ul>\n<li>name: install yum package<br>yum:<br>  name: git       # 安装指定版本：git-1.8.3.1-6.el7<br>  state: present  # 如果不存在安装最新，存在不会更新；若为latest，无论存在与否安装最新   <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">example2:安装多个软件</span><br></pre></td></tr></table></figure></li>\n<li>name: yum<br>yum:<br>  name: ““<br>  state: present<br>with_items:<ul>\n<li>git</li>\n<li>httpd <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}