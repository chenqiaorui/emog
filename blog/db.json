{"meta":{"version":1,"warehouse":"4.0.2"},"models":{"Asset":[{"_id":"themes/BlueLake/source/favicon.png","path":"favicon.png","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/giteement/gitee.oauthcallback.js","path":"giteement/gitee.oauthcallback.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/giteement/giteement.css","path":"giteement/giteement.css","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/giteement/giteement.min.js","path":"giteement/giteement.min.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/js/search.json.js","path":"js/search.json.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/iconfont/iconfont.eot","path":"css/iconfont/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/iconfont/iconfont.svg","path":"css/iconfont/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/iconfont/iconfont.ttf","path":"css/iconfont/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/iconfont/iconfont.woff","path":"css/iconfont/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/iconfont/iconfont.woff2","path":"css/iconfont/iconfont.woff2","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/images/alipay-pay.jpg","path":"css/images/alipay-pay.jpg","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/images/alipay.jpg","path":"css/images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/images/banner-dark.jpg","path":"css/images/banner-dark.jpg","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/images/wechat-pay.jpg","path":"css/images/wechat-pay.jpg","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/css/images/wechat.jpg","path":"css/images/wechat.jpg","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/localshare/css/share.styl","path":"localshare/css/share.styl","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/localshare/fonts/iconfont.svg","path":"localshare/fonts/iconfont.svg","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/localshare/fonts/iconfont.eot","path":"localshare/fonts/iconfont.eot","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/localshare/fonts/iconfont.ttf","path":"localshare/fonts/iconfont.ttf","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/localshare/fonts/iconfont.woff","path":"localshare/fonts/iconfont.woff","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/localshare/js/qrcode.js","path":"localshare/js/qrcode.js","modified":1,"renderable":1},{"_id":"themes/BlueLake/source/localshare/js/social-share.js","path":"localshare/js/social-share.js","modified":1,"renderable":1}],"Cache":[{"_id":"source/_posts/一些有用的工具.md","hash":"ac143359fd76da1e9049cdd360dec7dae19943c8","modified":1709708898526},{"_id":"source/_posts/第10期：VIM.md","hash":"95345939621c85be5812d5644e0033300dcbbb9e","modified":1709718993309},{"_id":"source/_posts/第11期：Tcpdump.md","hash":"4729b679d602eb0375270cf1ea3911ef07b4646f","modified":1709708118347},{"_id":"source/_posts/第12期：curl.md","hash":"18a7d155c4b2ef29603b52b4c592e2912a5a61c8","modified":1709708118347},{"_id":"source/_posts/第13期：cron.md","hash":"25d625900b92b91d5cfdd8a86635c8c579703ef8","modified":1709708118348},{"_id":"source/_posts/第14期：linux-jq.md","hash":"0fb851fe4fdfb4dd6db11b8ba3197bf5120618fc","modified":1709708118350},{"_id":"source/_posts/第15期：LDAP.md","hash":"fcff8c2b780883d7d3932be5d6bf579369067884","modified":1709708118350},{"_id":"source/_posts/第16期：grep.md","hash":"fa3962df92b774dae5ac1148baeb8e3933887d34","modified":1709708118351},{"_id":"source/_posts/第17期：ssh.md","hash":"ff3add55cf809cb3d717dafccaa94415fbebb1a6","modified":1709708118351},{"_id":"source/_posts/第18期：linux性能.md","hash":"519d8605ff1b3ea6f34cceba4ee826ee513701c8","modified":1709708118352},{"_id":"source/_posts/第19期：Mysql.md","hash":"9315e9f688078f6c0ec93c68efac2bc33e5968c0","modified":1709708118352},{"_id":"source/_posts/第1期：使用hexo搭建个人博客页面.md","hash":"f40e1a488e39ff420b539c6cfb05bbd6d2f5f1e7","modified":1709709568441},{"_id":"source/_posts/第20期：Jenkins.md","hash":"d921afcda68916703a6580226bbfc8015e70f90f","modified":1709708118353},{"_id":"source/_posts/第21期：正则表达式.md","hash":"5299f150c965e1119d467e64e1ad43f1416e3eb7","modified":1709708118353},{"_id":"source/_posts/第22期：rsync.md","hash":"56035af1bf495abb749a3d90e1e574c9336e959d","modified":1709708118354},{"_id":"source/_posts/第23期：GIT.md","hash":"54245661e5a8870b66e075ed6ecfa8db36ef9f1c","modified":1709708118354},{"_id":"source/_posts/第24期：DOCKER.md","hash":"83599656a3942aa8a45988cb118b0779edd686e1","modified":1709708118355},{"_id":"source/_posts/第25期：supervisor.md","hash":"df3a923612c7d6c9b25c312bde09daf8483476d1","modified":1709708118355},{"_id":"source/_posts/第26期：ansible.md","hash":"07d729f2796c5a20b6f479545aaaa8e1fc6b5fbe","modified":1709708118356},{"_id":"source/_posts/第27期：镜像源.md","hash":"116fe14e650324937a74c2225235d0264a021702","modified":1709708118356},{"_id":"source/_posts/第28期：网络.md","hash":"e2a417d612a162bbf56dc1d3b76fa006d03024bc","modified":1709708118357},{"_id":"source/_posts/第29期：PHP-FPM.md","hash":"e5acba99a0849ffaf57da4a868bc6f8cc93dff1f","modified":1709708118359},{"_id":"source/_posts/第2期-hexo-github部署个人博客.md","hash":"1579e4abc2559f0f0f4fb9aa90acfe7c485225cb","modified":1709718881786},{"_id":"source/_posts/第30期：Python.md","hash":"04dee55e7d59acb0c404326ab0831b8c0cd317bf","modified":1709708118360},{"_id":"source/_posts/第32期：Java.md","hash":"738f1012f958b157f46a5f2d2b38a4b6b50961b1","modified":1709708118361},{"_id":"source/_posts/第31期：Golang.md","hash":"55a5e06bab4dc3cc86978aed033230fbc9735c6a","modified":1709708118360},{"_id":"source/_posts/第33期：工具集.md","hash":"f01d2795853d33a6e8effdbafe5a8508b1874b19","modified":1709708118361},{"_id":"source/_posts/第34期：LVM.md","hash":"826995984b4ccbb50aac2d8d66936b6cff862257","modified":1709708118362},{"_id":"source/_posts/第35期：TELNET.md","hash":"87edbd8af3231b4c93492edac46ba19ea39ee39d","modified":1709708118362},{"_id":"source/_posts/第36期：Redis.md","hash":"ade8e27021e09ee650bd5c891eda423e403adad0","modified":1709708118362},{"_id":"source/_posts/第37期：操作系统-性能优化.md","hash":"ac791dde603e3af5d67b2eb4eadd68d649d21f9b","modified":1709708118363},{"_id":"source/_posts/第38期：linux日志切割.md","hash":"7981811f9f22b7ecd6d41b7b2df9224be66d2b14","modified":1709708118363},{"_id":"source/_posts/第39期：strace.md","hash":"6deabb442e272c4b3168412723658057ce17af79","modified":1709708118365},{"_id":"source/_posts/第3期：Python学习.md","hash":"64629e912de79a701bba33db38621a2bbcec2b99","modified":1709708118387},{"_id":"source/_posts/第41期：sed.md","hash":"07a48fcd4c5234754bf003d7dfbc9634133e8756","modified":1709708118366},{"_id":"source/_posts/第40期：Maven.md","hash":"fba15ce7ba6cbd638bcb0563f969f0ea63be9cef","modified":1709708118366},{"_id":"source/_posts/第43期：rabbitmq.md","hash":"a0bfbb2792d5c7a58b8b8b515320b0e0e04a7013","modified":1709708118367},{"_id":"source/_posts/第42期：xargs.md","hash":"8d7a63b02573c565583e35b2c99a590e67a930c4","modified":1709708118367},{"_id":"source/_posts/第4期：AI工具集合汇总.md","hash":"1623d005a728292c2d61020b5e534b8e18b87f59","modified":1709718980677},{"_id":"source/_posts/第5期：CDN.md","hash":"9989503cab0c2de0df8370e98a48751e319f9695","modified":1709718976909},{"_id":"source/_posts/第6期：Nginx.md","hash":"239b5d10a56649e1463526365805780726883858","modified":1709718983216},{"_id":"source/_posts/第7期：dns.md","hash":"b3cd23aff7f0bf0b398669243309bffd1fc75c7b","modified":1709718986840},{"_id":"source/_posts/第8期：shell.md","hash":"a9c3d5a7db3124dc03071678b3710e2c9b366903","modified":1709718989498},{"_id":"source/_posts/第9期：K8s.md","hash":"f7c4e351f64cf9160db1c1064f7fddb8d8df02a4","modified":1709718991148},{"_id":"source/_posts/运维命令.md-1","hash":"b6135d6158ce338c1bd10a8570f00ecbc0683aa4","modified":1709708602578},{"_id":"themes/BlueLake/.gitignore","hash":"49f574312f050162fef2ac80f72b5a9c136c62a8","modified":1709708118391},{"_id":"themes/BlueLake/LICENSE","hash":"4c3927c82d0aa4fac5cdf945e07afe5e24335891","modified":1709708118391},{"_id":"themes/BlueLake/README.md","hash":"cdbc633e4c88dbd25851f2ecaa3c968150178f49","modified":1709708118392},{"_id":"themes/BlueLake/_config.yml","hash":"00478929bdfd5247e7cf248000cd4f2641f7c3cb","modified":1709720163399},{"_id":"themes/BlueLake/languages/de-DE.yml","hash":"12d3ec934c9afa32aef174c6c7113e605a3a0b39","modified":1709708118394},{"_id":"themes/BlueLake/package.json","hash":"d8780159f11aac366285889372ccdb007095da07","modified":1709708118419},{"_id":"themes/BlueLake/languages/en.yml","hash":"96f429d32c0857e956aebfe0c28883afd9163a49","modified":1709708118397},{"_id":"themes/BlueLake/languages/es-ES.yml","hash":"e28a412b9b98e74bdf79b77f244a4c4be412a83a","modified":1709708118397},{"_id":"themes/BlueLake/languages/fr-FR.yml","hash":"e52b9716f45bb83e7c06898f7802df8cbed109e3","modified":1709708118398},{"_id":"themes/BlueLake/languages/tr.yml","hash":"4f9f0c58d01cb74309c1913b01123aae80c82ec1","modified":1709708118400},{"_id":"themes/BlueLake/languages/ko.yml","hash":"dc110fdf5663fe510c30c6b4e6a057726b4841d0","modified":1709708118398},{"_id":"themes/BlueLake/languages/zh-CN.yml","hash":"44b818febd84b2a2d07264ad2aa10d6bbad03ab4","modified":1709708118400},{"_id":"themes/BlueLake/languages/zh-TW.yml","hash":"757b269ca1a9b7b0745c15ece40d4354e4f792dd","modified":1709708118401},{"_id":"themes/BlueLake/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1709708118416},{"_id":"themes/BlueLake/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1709708118416},{"_id":"themes/BlueLake/layout/index.ejs","hash":"e64b89e7c769e9b43cf6dd6d4bdd2f7ba03a4df9","modified":1709708118416},{"_id":"themes/BlueLake/layout/layout.ejs","hash":"0ff64fb4c4ab14af7fe597ea78265d1f09cb11eb","modified":1709708118416},{"_id":"themes/BlueLake/layout/page.ejs","hash":"cc86a83b9edfa0ec21a1d6a1c99e0f772a064ed9","modified":1709708118418},{"_id":"themes/BlueLake/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1709708118418},{"_id":"themes/BlueLake/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1709708118419},{"_id":"themes/BlueLake/source/favicon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1709708118444},{"_id":"themes/BlueLake/layout/_partial/about.ejs","hash":"bedc6c126375b2bccdf8d17f59de7149f306f327","modified":1709708118401},{"_id":"themes/BlueLake/layout/_partial/after-footer.ejs","hash":"c0b8d95d827c6a797bb4d563506d9cbc9717099b","modified":1709708118402},{"_id":"themes/BlueLake/layout/_partial/archive.ejs","hash":"4744116ed807129594fbf172b9919a2831070591","modified":1709708118402},{"_id":"themes/BlueLake/layout/_partial/article.ejs","hash":"5a70569d2017794b5252abffc7b08cc52c4deef4","modified":1709708118405},{"_id":"themes/BlueLake/layout/_partial/archive-post.ejs","hash":"8565a0fcd38eff73af75e80f93f176ab8d9c08b9","modified":1709708118402},{"_id":"themes/BlueLake/layout/_partial/baidu-analytics.ejs","hash":"c6c911f0796aaf1cddc7098ee21e5dc6206e1157","modified":1709708118405},{"_id":"themes/BlueLake/layout/_partial/commonts-script.ejs","hash":"d019f9f6380076008f58e758f44d8883f8f656bb","modified":1709708118405},{"_id":"themes/BlueLake/layout/_partial/footer.ejs","hash":"274285e1cfb82d4f77bb1089720f4cf3b78c3964","modified":1709708118406},{"_id":"themes/BlueLake/layout/_partial/gauges-analytics.ejs","hash":"165008f72ed77f0da879d132563d763369d26472","modified":1709708118406},{"_id":"themes/BlueLake/layout/_partial/google-analytics.ejs","hash":"9fc18f1fd5bec16f8a3d30b0ce38458485c398b3","modified":1709708118406},{"_id":"themes/BlueLake/layout/_partial/head.ejs","hash":"b412b842c97500972642b70131a788aaa823419d","modified":1709708118406},{"_id":"themes/BlueLake/layout/_partial/pagination.ejs","hash":"c6f279e9bf3e20c2990b22ddbcbd3fed27c5b5bb","modified":1709708118407},{"_id":"themes/BlueLake/layout/_partial/sidebar.ejs","hash":"c70869569749a8f48cce202fa57926c06b55fdab","modified":1709708118412},{"_id":"themes/BlueLake/layout/_partial/header.ejs","hash":"d59761b90a19171084eaf2b47cc01ff43dc05562","modified":1709708118407},{"_id":"themes/BlueLake/layout/_widget/archive.ejs","hash":"ec2d9bf37b9bb613524b702d49c3234f82cbf96f","modified":1709708118413},{"_id":"themes/BlueLake/layout/_widget/category.ejs","hash":"85d5afdfefb18b2b1a88ef074746cbf109658a6c","modified":1709708118413},{"_id":"themes/BlueLake/layout/_widget/links.ejs","hash":"7364dd89d65ab5d10ea748b208eb3323ef9906f8","modified":1709708118413},{"_id":"themes/BlueLake/layout/_widget/recent_posts.ejs","hash":"598c278442022a08b8e1809b77714779bb8a0d81","modified":1709708118413},{"_id":"themes/BlueLake/layout/_widget/tag.ejs","hash":"feea59d6e9d122895ce3ed2cc4a5ee505e6e336e","modified":1709708118414},{"_id":"themes/BlueLake/layout/_widget/tagcloud.ejs","hash":"658c68f624bce479a81a2db8b017b14180ce3f8a","modified":1709708118415},{"_id":"themes/BlueLake/source/css/_extend.styl","hash":"64875ec77cc31a1225a5992a5d507bf98be14b04","modified":1709708118419},{"_id":"themes/BlueLake/source/css/_variables.styl","hash":"868e13f24ebbaf99067a18e45f5f58b4b4a5cf8c","modified":1709708118427},{"_id":"themes/BlueLake/source/css/style.styl","hash":"60206b021bd3f4364b7376a04bacbcf9ce868029","modified":1709708118442},{"_id":"themes/BlueLake/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1709708118442},{"_id":"themes/BlueLake/source/giteement/gitee.oauthcallback.js","hash":"e00dcbf30010e33fb6d633dfa09f077b2b33b032","modified":1709708118445},{"_id":"themes/BlueLake/source/giteement/giteement.css","hash":"8e6ee0547d7c3eda5a4b96fefc3b89103dccb9d1","modified":1709708118445},{"_id":"themes/BlueLake/source/js/search.json.js","hash":"ed5f817a6a2eff541e15d85a6dd8a8df83bff334","modified":1709708118454},{"_id":"themes/BlueLake/source/js/script.js","hash":"1b05856e32423ad8fc50bc7f4e0aac4ae39f814c","modified":1709708118454},{"_id":"themes/BlueLake/layout/_partial/post/comments-count.ejs","hash":"e776617c998b8d83987faf3148ae715909c6db62","modified":1709708118407},{"_id":"themes/BlueLake/layout/_partial/post/comments.ejs","hash":"8ccf3390fdb05089ea2def9e140ae7ad95236243","modified":1709708118408},{"_id":"themes/BlueLake/layout/_partial/post/category.ejs","hash":"d6c174fe0fe9ec611620860f9685415b78cb889a","modified":1709708118407},{"_id":"themes/BlueLake/layout/_partial/post/date.ejs","hash":"603367b4eddaedd0c74fc976ef8a0a0cbfe2fa34","modified":1709708118408},{"_id":"themes/BlueLake/layout/_partial/post/gallery.ejs","hash":"b0bf3f5d923c261ca2b5fabab513f1ec2708c8ca","modified":1709708118408},{"_id":"themes/BlueLake/layout/_partial/post/nav.ejs","hash":"f8054c6ec9d8a2fd48d66c96500639847fe02293","modified":1709708118410},{"_id":"themes/BlueLake/layout/_partial/post/reward.ejs","hash":"1e7e6e5602db81efb6e3d0bd0ee17aa395247075","modified":1709708118410},{"_id":"themes/BlueLake/layout/_partial/post/share.ejs","hash":"d862f8a5df4635e570bb8f62c3935c0ae3b7751c","modified":1709708118411},{"_id":"themes/BlueLake/layout/_partial/post/tag.ejs","hash":"694b5101bcc44c9f9c1cc62e5ad2fdfb4b7c7a07","modified":1709708118411},{"_id":"themes/BlueLake/layout/_partial/post/title.ejs","hash":"dacc884b56f24b31d85936327424b4f9edd9200a","modified":1709708118411},{"_id":"themes/BlueLake/layout/_partial/post/toc.ejs","hash":"1c40a8c5359f555745d78da24c9529cc26580340","modified":1709708118412},{"_id":"themes/BlueLake/layout/_partial/post/views-count.ejs","hash":"088c45b29e4cc040d87571dd525f9c9d1a07adb6","modified":1709708118412},{"_id":"themes/BlueLake/source/css/_partial/about.styl","hash":"460f43046ae5e89786165475582153cea051a8de","modified":1709708118420},{"_id":"themes/BlueLake/source/css/_partial/article.styl","hash":"5a043bf3c4f9a517b8846bb12957c83f68e43d76","modified":1709708118421},{"_id":"themes/BlueLake/source/css/_partial/archive.styl","hash":"53c95e8c4e761e45d0c430f8972d1a5c3519b596","modified":1709708118420},{"_id":"themes/BlueLake/source/css/_partial/comment.styl","hash":"38db346eb7f5d6cc1e78b59225bb33ea1ee16baf","modified":1709708118422},{"_id":"themes/BlueLake/source/css/_partial/footer.styl","hash":"698afe02aa930fdcc18ef981e0343bb99085dd57","modified":1709708118423},{"_id":"themes/BlueLake/source/css/_partial/header.styl","hash":"68582a0e1c222850f5ffc0a541baa2c717be38a5","modified":1709708118424},{"_id":"themes/BlueLake/source/css/_partial/highlight.styl","hash":"4fd02b470e68f74e3fa5e97092cdc5ea0a2d0199","modified":1709708118424},{"_id":"themes/BlueLake/source/css/_partial/iconfont.styl","hash":"fb68b181802859322a938490331017c1ad99f23d","modified":1709708118424},{"_id":"themes/BlueLake/source/css/_partial/pagination.styl","hash":"df15c94b90650f3b7e1018514a98c82575f7de1d","modified":1709708118425},{"_id":"themes/BlueLake/source/css/_partial/reward.styl","hash":"e970dff8c3132f061d04bf001aad3e4ef5824599","modified":1709708118425},{"_id":"themes/BlueLake/source/css/_partial/sidebar-aside.styl","hash":"c2320472d5345d99be9850bd8e0dc64dbece6a96","modified":1709708118425},{"_id":"themes/BlueLake/source/css/_partial/sidebar-bottom.styl","hash":"6aab4e0ee81c4407bed9ccb60335d1022f819aca","modified":1709708118426},{"_id":"themes/BlueLake/source/css/_partial/sidebar.styl","hash":"8d971a00e644a600179b04815688d188f094012e","modified":1709708118426},{"_id":"themes/BlueLake/source/css/_util/grid.styl","hash":"1aa883ab432d9e4139c89dcbd40ae2bd1528d029","modified":1709708118427},{"_id":"themes/BlueLake/source/css/_util/mixin.styl","hash":"429bad87fc156eacf226c5e35b0eafc277f2504b","modified":1709708118427},{"_id":"themes/BlueLake/source/css/iconfont/iconfont.eot","hash":"d79ff9e8325c9c0d2db4ee6dadd2f82799169783","modified":1709708118430},{"_id":"themes/BlueLake/source/css/iconfont/iconfont.svg","hash":"f9d7bf99db7d73faf2fef3891537630ea4f998ae","modified":1709708118430},{"_id":"themes/BlueLake/source/css/iconfont/iconfont.ttf","hash":"655ead66c5702e6e4a214c1473c78e450c49bfd7","modified":1709708118431},{"_id":"themes/BlueLake/source/css/iconfont/iconfont.woff","hash":"29e34038a63a5a810f3af4a9c15dc1476d97fc93","modified":1709708118431},{"_id":"themes/BlueLake/source/css/iconfont/iconfont.woff2","hash":"09f1ae7849a0649f0bb8f46e128c97fcb59e3a4c","modified":1709708118433},{"_id":"themes/BlueLake/source/css/images/alipay-pay.jpg","hash":"c1cdd36471a1197e31ee6309e979d1fb63daeb25","modified":1709708118434},{"_id":"themes/BlueLake/source/css/images/alipay.jpg","hash":"cfafbfa86d3223e5a7aa6025d4e78d26bdcf02af","modified":1709708118435},{"_id":"themes/BlueLake/source/css/images/wechat-pay.jpg","hash":"35f0f9859918d7b67d0a3279b110550667d97e8c","modified":1709708118441},{"_id":"themes/BlueLake/source/css/images/wechat.jpg","hash":"3a3f7518da72f35fbd8d0e3e3afa3018c4a434b2","modified":1709708118441},{"_id":"themes/BlueLake/source/localshare/css/share.styl","hash":"3a521a56eb06cb0ad08662d5e696c7950f456356","modified":1709708118457},{"_id":"themes/BlueLake/source/localshare/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1709708118458},{"_id":"themes/BlueLake/source/localshare/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1709708118458},{"_id":"themes/BlueLake/source/localshare/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1709708118459},{"_id":"themes/BlueLake/source/localshare/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1709708118459},{"_id":"themes/BlueLake/source/localshare/js/qrcode.js","hash":"962ad9cb87afa140a644178e5f3c53e2514ea1e5","modified":1709708118460},{"_id":"themes/BlueLake/source/localshare/js/social-share.js","hash":"fe73d3b1c63a498f18f885fc83d631c2b63535e7","modified":1709708118461},{"_id":"themes/BlueLake/source/fancybox/jquery.fancybox.min.js","hash":"eef46b6fb2e460838cd7328a6e13ecda0cb1e194","modified":1709708118443},{"_id":"themes/BlueLake/source/js/jquery-3.4.1.min.js","hash":"b15f7cfa79519756dff1ad22553fd0ed09024343","modified":1709708118454},{"_id":"themes/BlueLake/source/css/images/banner.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1709708118438},{"_id":"themes/BlueLake/source/css/images/banner-dark.jpg","hash":"0d2c406f1a9b3b74d6defda398239b0113737787","modified":1709708118437},{"_id":"themes/BlueLake/source/giteement/giteement.min.js","hash":"12ff917ec7d6b89a70356ebe4198bdf82d3a70eb","modified":1709708118451},{"_id":"public/content.json","hash":"e811f18f76002893a300e321a4b0fbd6275fa128","modified":1709729639294},{"_id":"public/2024/03/06/一些有用的工具/index.html","hash":"0f2514aafaf26ffd26262e71742611be1ff8e765","modified":1709729639294},{"_id":"public/2023/05/26/第43期：rabbitmq/index.html","hash":"ffe3fb349b56658fe0b8a89bc5528e6511fd47d7","modified":1709729639294},{"_id":"public/2023/05/26/第42期：xargs/index.html","hash":"91ec971231294121eabec095694bfc26ed7d6fc4","modified":1709729639294},{"_id":"public/2023/05/26/第41期：sed/index.html","hash":"c0e651ad7896e2f49b154d442349a4045ba346fe","modified":1709729639294},{"_id":"public/2023/05/25/第39期：strace/index.html","hash":"5493936d1e9dcddc249c4a49912b997a49dd54d6","modified":1709729639294},{"_id":"public/2023/05/22/第35期：TELNET/index.html","hash":"b76c542c220aab621cd7ae2efdd895cc81ad4135","modified":1709729639294},{"_id":"public/2023/05/22/第34期：LVM/index.html","hash":"fdcc486eb194123219288e509b7218619f71d414","modified":1709729639294},{"_id":"public/2023/05/22/第33期：工具集/index.html","hash":"3efe01a51a4e3d26d739841760bd3011f8eaa651","modified":1709729639294},{"_id":"public/2023/05/22/第32期：Java/index.html","hash":"e662f65a257e9cbf029fea6a6414ad7a2810c469","modified":1709729639294},{"_id":"public/2023/05/22/第27期：镜像源/index.html","hash":"b4b982c55cf3295308576ef7f97afe3c4e919f22","modified":1709729639294},{"_id":"public/2023/05/22/第25期：supervisor/index.html","hash":"038b1c47ffbeaa961ae083cfae687795ebc6fbe8","modified":1709729639294},{"_id":"public/2023/05/22/第23期：GIT/index.html","hash":"b60bab85f5ab5470af49269d24aff3d94890abcc","modified":1709729639294},{"_id":"public/2023/05/22/第22期：rsync/index.html","hash":"7d836ff7c6af99fd6a7b198a4d81b90964640e68","modified":1709729639294},{"_id":"public/2023/05/22/第21期：正则表达式/index.html","hash":"4e406ec125193e1a586df7a6f5ab65c85bf9e220","modified":1709729639294},{"_id":"public/2023/05/22/第18期：linux性能/index.html","hash":"f332bce85b78165d2f3cf13d3fbd3269a62835f8","modified":1709729639294},{"_id":"public/2023/05/22/第17期：ssh/index.html","hash":"0c0a000c09072156d7b447bd2db320df1cabfe4d","modified":1709729639294},{"_id":"public/2023/05/22/第16期：grep/index.html","hash":"b60157b27b5ed4bb162a85ec08548f50a5f8a945","modified":1709729639294},{"_id":"public/2023/05/22/第14期：linux-jq/index.html","hash":"df7a77ebbc2e3f8c470d19449bd50230adc4e4ae","modified":1709729639294},{"_id":"public/2023/05/21/第13期：cron/index.html","hash":"b136c583c18ffda6dc324336fa4af2b9c87a4162","modified":1709729639294},{"_id":"public/2023/05/21/第12期：curl/index.html","hash":"9aed1ee6371362a27cc4ff9f8aa3011d103161b8","modified":1709729639294},{"_id":"public/2023/05/21/第11期：Tcpdump/index.html","hash":"58804fa70ce5b6e838444402d6c9221be4215ea1","modified":1709729639294},{"_id":"public/2023/05/20/第10期：VIM/index.html","hash":"3a370d918f8fb276cedb3e84134a5d5370fdc305","modified":1709729639294},{"_id":"public/2023/05/20/第9期：K8s/index.html","hash":"60fb27de1f643f6522ad676bbf752515da3a54aa","modified":1709729639294},{"_id":"public/2023/05/26/第40期：Maven/index.html","hash":"a68548b737152546907f5337d76daedabad800f3","modified":1709729639294},{"_id":"public/2023/05/25/第38期：linux日志切割/index.html","hash":"c4705f1725f365199d2c7284a56bbd834c056256","modified":1709729639294},{"_id":"public/2023/05/25/第37期：操作系统-性能优化/index.html","hash":"009cfd36f8f4d62749c152ad91a0e68a186d8394","modified":1709729639294},{"_id":"public/2023/05/22/第36期：Redis/index.html","hash":"ce6e0d9199f790c50cfebf9f837a0c0777e14008","modified":1709729639294},{"_id":"public/2023/05/22/第31期：Golang/index.html","hash":"2bc261e371f718fc6540dabe0de067f84599af4b","modified":1709729639294},{"_id":"public/2023/05/22/第30期：Python/index.html","hash":"3f3d9f684b5c138727b0eaf3283daf603c1e179c","modified":1709729639294},{"_id":"public/2023/05/22/第29期：PHP-FPM/index.html","hash":"415185c5a38e5ce21ea749e952e9da3323a12911","modified":1709729639294},{"_id":"public/2023/05/22/第28期：网络/index.html","hash":"b5a57ff0d70c9fc0238e34dec72df887c0b1bc9f","modified":1709729639294},{"_id":"public/2023/05/22/第26期：ansible/index.html","hash":"eaceff002f859c3347aa45dd5d610b92ec0a4b77","modified":1709729639294},{"_id":"public/2023/05/22/第24期：DOCKER/index.html","hash":"d96d4ae707d2fae38c16f8552509d5868eb5dfd2","modified":1709729639294},{"_id":"public/2023/05/22/第20期：Jenkins/index.html","hash":"909dfcc2bff721a98b37cf7e57099a283f0ca084","modified":1709729639294},{"_id":"public/2023/05/22/第19期：Mysql/index.html","hash":"1e76d4b5e1bdfc82628fb1d9556eb38759b8c297","modified":1709729639294},{"_id":"public/2023/05/22/第15期：LDAP/index.html","hash":"a2023a4d2a28bea423937e4f8b29522678b286d6","modified":1709729639294},{"_id":"public/2023/05/20/第8期：shell/index.html","hash":"6dc6d62b9f8924a9c3dabe98334610b73d35db34","modified":1709729639294},{"_id":"public/2023/05/20/第7期：dns/index.html","hash":"9e8a9351ffe0a542ede7114ba9173ab7f7565f0d","modified":1709729639294},{"_id":"public/2023/05/20/第5期：CDN/index.html","hash":"57cdf962dcfed56a1385ae1d49bbeeb330556933","modified":1709729639294},{"_id":"public/2023/05/18/第4期：AI工具集合汇总/index.html","hash":"383b9242b14ab8060321ccc3953705e49435e087","modified":1709729639294},{"_id":"public/2023/05/18/第3期：Python学习/index.html","hash":"2b1845a557a58c53fc6d1cc4a23d881d0894c058","modified":1709729639294},{"_id":"public/2023/05/18/第2期-hexo-github部署个人博客/index.html","hash":"a41068886030be8c06a510e85af9f3709519d494","modified":1709729639294},{"_id":"public/2023/05/18/第1期：使用hexo搭建个人博客页面/index.html","hash":"2b4f8d41abcb53ea1a1ec552a221d780f442ab6e","modified":1709729639294},{"_id":"public/archives/2024/index.html","hash":"3a4a7dddab2fbfff0c60377d059d2d6a6a158e56","modified":1709729639294},{"_id":"public/archives/2024/03/index.html","hash":"da8483176325de2175fef44a2850379bd4cd8fe3","modified":1709729639294},{"_id":"public/2023/05/20/第6期：Nginx/index.html","hash":"a0eafaee65e2686c5f1d619f4d44de36b50944b7","modified":1709729639294},{"_id":"public/archives/index.html","hash":"fbbaf24a5a58e55f55cce2acc0596f8ddb2a920a","modified":1709729639294},{"_id":"public/archives/2023/index.html","hash":"eeaf6955a078ab074af2b66e6f5348d754de95b9","modified":1709729639294},{"_id":"public/archives/2023/05/index.html","hash":"96478ebf36f4b3e50296216057f5ff8a993e34ef","modified":1709729639294},{"_id":"public/index.html","hash":"5115e67b663dc2415e404813779e6ea16c6b43cc","modified":1709729639294},{"_id":"public/favicon.png","hash":"98f0ecbdcdc1a0e8e52f4d786cbc011e5e06fa65","modified":1709729639294},{"_id":"public/css/iconfont/iconfont.eot","hash":"d79ff9e8325c9c0d2db4ee6dadd2f82799169783","modified":1709729639294},{"_id":"public/css/iconfont/iconfont.svg","hash":"f9d7bf99db7d73faf2fef3891537630ea4f998ae","modified":1709729639294},{"_id":"public/css/iconfont/iconfont.woff","hash":"29e34038a63a5a810f3af4a9c15dc1476d97fc93","modified":1709729639294},{"_id":"public/css/iconfont/iconfont.ttf","hash":"655ead66c5702e6e4a214c1473c78e450c49bfd7","modified":1709729639294},{"_id":"public/css/iconfont/iconfont.woff2","hash":"09f1ae7849a0649f0bb8f46e128c97fcb59e3a4c","modified":1709729639294},{"_id":"public/css/images/alipay.jpg","hash":"cfafbfa86d3223e5a7aa6025d4e78d26bdcf02af","modified":1709729639294},{"_id":"public/css/images/alipay-pay.jpg","hash":"c1cdd36471a1197e31ee6309e979d1fb63daeb25","modified":1709729639294},{"_id":"public/css/images/wechat-pay.jpg","hash":"35f0f9859918d7b67d0a3279b110550667d97e8c","modified":1709729639294},{"_id":"public/localshare/fonts/iconfont.svg","hash":"337b4f156f6d8f4beb32c32a3db46fef361cff74","modified":1709729639294},{"_id":"public/css/images/wechat.jpg","hash":"3a3f7518da72f35fbd8d0e3e3afa3018c4a434b2","modified":1709729639294},{"_id":"public/localshare/fonts/iconfont.ttf","hash":"afd898f59d363887418669520b24d175f966a083","modified":1709729639294},{"_id":"public/localshare/fonts/iconfont.eot","hash":"00ff749c8e202401190cc98d56087cdda716abe4","modified":1709729639294},{"_id":"public/localshare/fonts/iconfont.woff","hash":"2e3fce1dcfbd6e2114e7bfbeaf72d3c62e15a1bd","modified":1709729639294},{"_id":"public/css/images/banner.jpg","hash":"d23d92484e98adcbea7266ebfdfef7fb3fc42ee0","modified":1709729639294},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1709729639294},{"_id":"public/giteement/gitee.oauthcallback.js","hash":"f24dc1fd8de0dc44b8d70df83f7c82fd2f3fc710","modified":1709729639294},{"_id":"public/js/script.js","hash":"b9441363ff8fe829d90295ea947960338a1a020a","modified":1709729639294},{"_id":"public/js/search.json.js","hash":"ec601a6db4c68a7d9c2d440951c6e26ebfbc1f3a","modified":1709729639294},{"_id":"public/localshare/css/share.css","hash":"34f53537ebcf2757b35a15a4a9473f2352486372","modified":1709729639294},{"_id":"public/localshare/js/social-share.js","hash":"9bfe34fe7691833e90815c5c862545bde581cf29","modified":1709729639294},{"_id":"public/css/style.css","hash":"630f6c6d9a995cc8fd64c967608ba1d715a841fd","modified":1709729639294},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1709729639294},{"_id":"public/giteement/giteement.css","hash":"887ad901816c2427b1715444f72ae94f6146e9f7","modified":1709729639294},{"_id":"public/giteement/giteement.min.js","hash":"922687138ef42d0c77ff6a1c6d3d85ab6c743466","modified":1709729639294},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1709729639294},{"_id":"public/localshare/js/qrcode.js","hash":"9caa0d9a9ba4409a3f77540a1b15a7617aeb28e8","modified":1709729639294},{"_id":"public/css/images/banner-dark.jpg","hash":"0d2c406f1a9b3b74d6defda398239b0113737787","modified":1709729639294}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"一些有用的工具","date":"2024-03-06T07:00:53.000Z","_content":"\n\n## 生成logo\nhttps://logomakerr.ai/\n\n## 工具列表\n```\n剪辑 工具使用讲解 知识课程讲解 影视讲解 更多项目 vpn/周刊/\n鼠标键盘显示：https://github.com/mulaRahul/keyviz\n自建手机照片和视频备份服务 https://github.com/immich-app/immich\n视频剪辑工具：https://github.com/mifi/lossless-cut\nB站视频下载工具：https://github.com/leiurayer/downkyi\n本地媒体资源库管理： https://github.com/jellyfin/jellyfin\nyoutube下载器：[YoutubeDownloader](https://github.com/Tyrrrz/YoutubeDownloader)\ngpt4模型体验，需要登陆：https://www.yeschat.ai/zh-CN\n跨平台文件传送软件，不需要互联网连接，依靠共享 Wifi 分享文件：https://localsend.org/#/\n私藏英语工具文章：https://sspai.com/post/80086\n免费gpt：https://chatgptdemo.info/chat/    https://promptboom.com/PowerChat/PowerChatTalk\n免费图片搜索引擎，现在还提供免费音乐和视频下载，可以用于商业用途，适合作为视频的背景音乐和素材：https://pixabay.com/\n图片和音频的搜索引擎,自由使用，不用付费：https://openverse.org/\n测速网站：https://test.ustc.edu.cn/\n剪辑视频，自动生成字幕：https://github.com/mli/autocut\n数据库教程：https://www.sjkjc.com/\nk8s博客：https://www.soulchild.cn/\n运维侃侃：https://www.yuque.com/sanye-ia8oj/hmoxce\ntcpdump：https://mp.weixin.qq.com/s/wqSh8H79wLH6vyDtgges1A\n分享了许多系统工具软件下载：https://sysin.org/\njenkins pipeline：https://zhangzhuo.ltd/articles/2022/06/04/1654333399919.html\n\n一个 Chrome 插件，可以将 YouTube 视频的英文语音，转成中文语音：https://www.youtube-dubbing.com/\n浏览器广告拦截：https://github.com/gorhill/uBlock\n生成excel公式：https://github.com/weijunext/smart-excel-ai\n生成节日祝福个性视频 https://shotstack.io/learn/how-to-build-1000-personalised-videos/\n提升照片分辨率 https://github.com/Djdefrag/QualityScaler\n图片搜索引擎https://openverse.org/\nai作图搜索https://lexica.art/\n课程教学 支持web和移动端在线练习 https://github.com/chenqiaorui/PlayEdu\n关于产品的思考 https://produck.zhubai.love/\n设计所有资源：https://github.com/bradtraversy/design-resources-for-developers\n翻墙工具：https://github.com/Dreamacro/clash\n实时换脸：https://github.com/iperov/DeepFaceLive\naws指导：https://github.com/open-guides/og-aws\nHtml 和 CSS 图文教程：https://internetingishard.netlify.app/html-and-css/\n临时邮件接收：https://email.ml/\n键盘打字记单词：https://github.com/RealKai42/qwerty-learner\n桌面视频播放器：https://github.com/Hunlongyu/ZY-Player\n免费的编程中文书籍索引：https://github.com/justjavac/free-programming-books-zh_CN\n提高英语技能：https://github.com/byoungd/English-level-up-tips\nKubernetes 中文指南：https://jimmysong.io/kubernetes-handbook/\nKubernetes：https://zhangzhuo.ltd/tags/kubernetes\n运维实践指南：https://billwang139967.gitbooks.io/op_practice_book/content/\n小程序资源汇总：https://github.com/justjavac/awesome-wechat-weapp\n外语视频转成中文视频：https://www.youtube-dubbing.com/（英文语音转成中文）\n免费的文生图网站：https://sdxlturbo.ai/\n英语音频转成文本的在线工具：https://huggingface.co/spaces/Xenova/whisper-web\n让 Mac 电脑具备 Windows 的 alt + tab 键的功能：https://github.com/lwouis/alt-tab-macos\n免费接码平台：https://iyideng.fun/welfare/best-domestic-platform-for-receiving-captcha-free-of-charge.html\nes同步工具：https://github.com/elasticsearch-dump/elasticsearch-dump\n完全基于本地构建的 GPT，可以将本地知识库作为问答的原料：https://github.com/PromtEngineer/localGPT\nopenldap 介绍和使用：https://outmanzzq.github.io/2020/05/12/openldap/\nsiteground: [wordpress-docker-compose](https://github.com/nezhar/wordpress-docker-compose/tree/master)\n[wordpress中文官网](https://cn.wordpress.org/)\n插件：\n- WP Statistics 统计访问量\n- WP-Optimize 提高网站性能\n- WP Super Cache 生成静态文件缓存\n- site kit 用于分析人们如何找到和使用您的站点\n- WooCommerce 电子商务插件\n```\n","source":"_posts/一些有用的工具.md","raw":"---\ntitle: 一些有用的工具\ndate: 2024-03-06 15:00:53\ntags:\n---\n\n\n## 生成logo\nhttps://logomakerr.ai/\n\n## 工具列表\n```\n剪辑 工具使用讲解 知识课程讲解 影视讲解 更多项目 vpn/周刊/\n鼠标键盘显示：https://github.com/mulaRahul/keyviz\n自建手机照片和视频备份服务 https://github.com/immich-app/immich\n视频剪辑工具：https://github.com/mifi/lossless-cut\nB站视频下载工具：https://github.com/leiurayer/downkyi\n本地媒体资源库管理： https://github.com/jellyfin/jellyfin\nyoutube下载器：[YoutubeDownloader](https://github.com/Tyrrrz/YoutubeDownloader)\ngpt4模型体验，需要登陆：https://www.yeschat.ai/zh-CN\n跨平台文件传送软件，不需要互联网连接，依靠共享 Wifi 分享文件：https://localsend.org/#/\n私藏英语工具文章：https://sspai.com/post/80086\n免费gpt：https://chatgptdemo.info/chat/    https://promptboom.com/PowerChat/PowerChatTalk\n免费图片搜索引擎，现在还提供免费音乐和视频下载，可以用于商业用途，适合作为视频的背景音乐和素材：https://pixabay.com/\n图片和音频的搜索引擎,自由使用，不用付费：https://openverse.org/\n测速网站：https://test.ustc.edu.cn/\n剪辑视频，自动生成字幕：https://github.com/mli/autocut\n数据库教程：https://www.sjkjc.com/\nk8s博客：https://www.soulchild.cn/\n运维侃侃：https://www.yuque.com/sanye-ia8oj/hmoxce\ntcpdump：https://mp.weixin.qq.com/s/wqSh8H79wLH6vyDtgges1A\n分享了许多系统工具软件下载：https://sysin.org/\njenkins pipeline：https://zhangzhuo.ltd/articles/2022/06/04/1654333399919.html\n\n一个 Chrome 插件，可以将 YouTube 视频的英文语音，转成中文语音：https://www.youtube-dubbing.com/\n浏览器广告拦截：https://github.com/gorhill/uBlock\n生成excel公式：https://github.com/weijunext/smart-excel-ai\n生成节日祝福个性视频 https://shotstack.io/learn/how-to-build-1000-personalised-videos/\n提升照片分辨率 https://github.com/Djdefrag/QualityScaler\n图片搜索引擎https://openverse.org/\nai作图搜索https://lexica.art/\n课程教学 支持web和移动端在线练习 https://github.com/chenqiaorui/PlayEdu\n关于产品的思考 https://produck.zhubai.love/\n设计所有资源：https://github.com/bradtraversy/design-resources-for-developers\n翻墙工具：https://github.com/Dreamacro/clash\n实时换脸：https://github.com/iperov/DeepFaceLive\naws指导：https://github.com/open-guides/og-aws\nHtml 和 CSS 图文教程：https://internetingishard.netlify.app/html-and-css/\n临时邮件接收：https://email.ml/\n键盘打字记单词：https://github.com/RealKai42/qwerty-learner\n桌面视频播放器：https://github.com/Hunlongyu/ZY-Player\n免费的编程中文书籍索引：https://github.com/justjavac/free-programming-books-zh_CN\n提高英语技能：https://github.com/byoungd/English-level-up-tips\nKubernetes 中文指南：https://jimmysong.io/kubernetes-handbook/\nKubernetes：https://zhangzhuo.ltd/tags/kubernetes\n运维实践指南：https://billwang139967.gitbooks.io/op_practice_book/content/\n小程序资源汇总：https://github.com/justjavac/awesome-wechat-weapp\n外语视频转成中文视频：https://www.youtube-dubbing.com/（英文语音转成中文）\n免费的文生图网站：https://sdxlturbo.ai/\n英语音频转成文本的在线工具：https://huggingface.co/spaces/Xenova/whisper-web\n让 Mac 电脑具备 Windows 的 alt + tab 键的功能：https://github.com/lwouis/alt-tab-macos\n免费接码平台：https://iyideng.fun/welfare/best-domestic-platform-for-receiving-captcha-free-of-charge.html\nes同步工具：https://github.com/elasticsearch-dump/elasticsearch-dump\n完全基于本地构建的 GPT，可以将本地知识库作为问答的原料：https://github.com/PromtEngineer/localGPT\nopenldap 介绍和使用：https://outmanzzq.github.io/2020/05/12/openldap/\nsiteground: [wordpress-docker-compose](https://github.com/nezhar/wordpress-docker-compose/tree/master)\n[wordpress中文官网](https://cn.wordpress.org/)\n插件：\n- WP Statistics 统计访问量\n- WP-Optimize 提高网站性能\n- WP Super Cache 生成静态文件缓存\n- site kit 用于分析人们如何找到和使用您的站点\n- WooCommerce 电子商务插件\n```\n","slug":"一些有用的工具","published":1,"updated":"2024-03-06T07:08:18.526Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvtd70000bkln2rpqd192","content":"<h2 id=\"生成logo\"><a href=\"#生成logo\" class=\"headerlink\" title=\"生成logo\"></a>生成logo</h2><p><a href=\"https://logomakerr.ai/\">https://logomakerr.ai/</a></p>\n<h2 id=\"工具列表\"><a href=\"#工具列表\" class=\"headerlink\" title=\"工具列表\"></a>工具列表</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">剪辑 工具使用讲解 知识课程讲解 影视讲解 更多项目 vpn/周刊/</span><br><span class=\"line\">鼠标键盘显示：https://github.com/mulaRahul/keyviz</span><br><span class=\"line\">自建手机照片和视频备份服务 https://github.com/immich-app/immich</span><br><span class=\"line\">视频剪辑工具：https://github.com/mifi/lossless-cut</span><br><span class=\"line\">B站视频下载工具：https://github.com/leiurayer/downkyi</span><br><span class=\"line\">本地媒体资源库管理： https://github.com/jellyfin/jellyfin</span><br><span class=\"line\">youtube下载器：[YoutubeDownloader](https://github.com/Tyrrrz/YoutubeDownloader)</span><br><span class=\"line\">gpt4模型体验，需要登陆：https://www.yeschat.ai/zh-CN</span><br><span class=\"line\">跨平台文件传送软件，不需要互联网连接，依靠共享 Wifi 分享文件：https://localsend.org/#/</span><br><span class=\"line\">私藏英语工具文章：https://sspai.com/post/80086</span><br><span class=\"line\">免费gpt：https://chatgptdemo.info/chat/    https://promptboom.com/PowerChat/PowerChatTalk</span><br><span class=\"line\">免费图片搜索引擎，现在还提供免费音乐和视频下载，可以用于商业用途，适合作为视频的背景音乐和素材：https://pixabay.com/</span><br><span class=\"line\">图片和音频的搜索引擎,自由使用，不用付费：https://openverse.org/</span><br><span class=\"line\">测速网站：https://test.ustc.edu.cn/</span><br><span class=\"line\">剪辑视频，自动生成字幕：https://github.com/mli/autocut</span><br><span class=\"line\">数据库教程：https://www.sjkjc.com/</span><br><span class=\"line\">k8s博客：https://www.soulchild.cn/</span><br><span class=\"line\">运维侃侃：https://www.yuque.com/sanye-ia8oj/hmoxce</span><br><span class=\"line\">tcpdump：https://mp.weixin.qq.com/s/wqSh8H79wLH6vyDtgges1A</span><br><span class=\"line\">分享了许多系统工具软件下载：https://sysin.org/</span><br><span class=\"line\">jenkins pipeline：https://zhangzhuo.ltd/articles/2022/06/04/1654333399919.html</span><br><span class=\"line\"></span><br><span class=\"line\">一个 Chrome 插件，可以将 YouTube 视频的英文语音，转成中文语音：https://www.youtube-dubbing.com/</span><br><span class=\"line\">浏览器广告拦截：https://github.com/gorhill/uBlock</span><br><span class=\"line\">生成excel公式：https://github.com/weijunext/smart-excel-ai</span><br><span class=\"line\">生成节日祝福个性视频 https://shotstack.io/learn/how-to-build-1000-personalised-videos/</span><br><span class=\"line\">提升照片分辨率 https://github.com/Djdefrag/QualityScaler</span><br><span class=\"line\">图片搜索引擎https://openverse.org/</span><br><span class=\"line\">ai作图搜索https://lexica.art/</span><br><span class=\"line\">课程教学 支持web和移动端在线练习 https://github.com/chenqiaorui/PlayEdu</span><br><span class=\"line\">关于产品的思考 https://produck.zhubai.love/</span><br><span class=\"line\">设计所有资源：https://github.com/bradtraversy/design-resources-for-developers</span><br><span class=\"line\">翻墙工具：https://github.com/Dreamacro/clash</span><br><span class=\"line\">实时换脸：https://github.com/iperov/DeepFaceLive</span><br><span class=\"line\">aws指导：https://github.com/open-guides/og-aws</span><br><span class=\"line\">Html 和 CSS 图文教程：https://internetingishard.netlify.app/html-and-css/</span><br><span class=\"line\">临时邮件接收：https://email.ml/</span><br><span class=\"line\">键盘打字记单词：https://github.com/RealKai42/qwerty-learner</span><br><span class=\"line\">桌面视频播放器：https://github.com/Hunlongyu/ZY-Player</span><br><span class=\"line\">免费的编程中文书籍索引：https://github.com/justjavac/free-programming-books-zh_CN</span><br><span class=\"line\">提高英语技能：https://github.com/byoungd/English-level-up-tips</span><br><span class=\"line\">Kubernetes 中文指南：https://jimmysong.io/kubernetes-handbook/</span><br><span class=\"line\">Kubernetes：https://zhangzhuo.ltd/tags/kubernetes</span><br><span class=\"line\">运维实践指南：https://billwang139967.gitbooks.io/op_practice_book/content/</span><br><span class=\"line\">小程序资源汇总：https://github.com/justjavac/awesome-wechat-weapp</span><br><span class=\"line\">外语视频转成中文视频：https://www.youtube-dubbing.com/（英文语音转成中文）</span><br><span class=\"line\">免费的文生图网站：https://sdxlturbo.ai/</span><br><span class=\"line\">英语音频转成文本的在线工具：https://huggingface.co/spaces/Xenova/whisper-web</span><br><span class=\"line\">让 Mac 电脑具备 Windows 的 alt + tab 键的功能：https://github.com/lwouis/alt-tab-macos</span><br><span class=\"line\">免费接码平台：https://iyideng.fun/welfare/best-domestic-platform-for-receiving-captcha-free-of-charge.html</span><br><span class=\"line\">es同步工具：https://github.com/elasticsearch-dump/elasticsearch-dump</span><br><span class=\"line\">完全基于本地构建的 GPT，可以将本地知识库作为问答的原料：https://github.com/PromtEngineer/localGPT</span><br><span class=\"line\">openldap 介绍和使用：https://outmanzzq.github.io/2020/05/12/openldap/</span><br><span class=\"line\">siteground: [wordpress-docker-compose](https://github.com/nezhar/wordpress-docker-compose/tree/master)</span><br><span class=\"line\">[wordpress中文官网](https://cn.wordpress.org/)</span><br><span class=\"line\">插件：</span><br><span class=\"line\">- WP Statistics 统计访问量</span><br><span class=\"line\">- WP-Optimize 提高网站性能</span><br><span class=\"line\">- WP Super Cache 生成静态文件缓存</span><br><span class=\"line\">- site kit 用于分析人们如何找到和使用您的站点</span><br><span class=\"line\">- WooCommerce 电子商务插件</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"生成logo\"><a href=\"#生成logo\" class=\"headerlink\" title=\"生成logo\"></a>生成logo</h2><p><a href=\"https://logomakerr.ai/\">https://logomakerr.ai/</a></p>\n<h2 id=\"工具列表\"><a href=\"#工具列表\" class=\"headerlink\" title=\"工具列表\"></a>工具列表</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">剪辑 工具使用讲解 知识课程讲解 影视讲解 更多项目 vpn/周刊/</span><br><span class=\"line\">鼠标键盘显示：https://github.com/mulaRahul/keyviz</span><br><span class=\"line\">自建手机照片和视频备份服务 https://github.com/immich-app/immich</span><br><span class=\"line\">视频剪辑工具：https://github.com/mifi/lossless-cut</span><br><span class=\"line\">B站视频下载工具：https://github.com/leiurayer/downkyi</span><br><span class=\"line\">本地媒体资源库管理： https://github.com/jellyfin/jellyfin</span><br><span class=\"line\">youtube下载器：[YoutubeDownloader](https://github.com/Tyrrrz/YoutubeDownloader)</span><br><span class=\"line\">gpt4模型体验，需要登陆：https://www.yeschat.ai/zh-CN</span><br><span class=\"line\">跨平台文件传送软件，不需要互联网连接，依靠共享 Wifi 分享文件：https://localsend.org/#/</span><br><span class=\"line\">私藏英语工具文章：https://sspai.com/post/80086</span><br><span class=\"line\">免费gpt：https://chatgptdemo.info/chat/    https://promptboom.com/PowerChat/PowerChatTalk</span><br><span class=\"line\">免费图片搜索引擎，现在还提供免费音乐和视频下载，可以用于商业用途，适合作为视频的背景音乐和素材：https://pixabay.com/</span><br><span class=\"line\">图片和音频的搜索引擎,自由使用，不用付费：https://openverse.org/</span><br><span class=\"line\">测速网站：https://test.ustc.edu.cn/</span><br><span class=\"line\">剪辑视频，自动生成字幕：https://github.com/mli/autocut</span><br><span class=\"line\">数据库教程：https://www.sjkjc.com/</span><br><span class=\"line\">k8s博客：https://www.soulchild.cn/</span><br><span class=\"line\">运维侃侃：https://www.yuque.com/sanye-ia8oj/hmoxce</span><br><span class=\"line\">tcpdump：https://mp.weixin.qq.com/s/wqSh8H79wLH6vyDtgges1A</span><br><span class=\"line\">分享了许多系统工具软件下载：https://sysin.org/</span><br><span class=\"line\">jenkins pipeline：https://zhangzhuo.ltd/articles/2022/06/04/1654333399919.html</span><br><span class=\"line\"></span><br><span class=\"line\">一个 Chrome 插件，可以将 YouTube 视频的英文语音，转成中文语音：https://www.youtube-dubbing.com/</span><br><span class=\"line\">浏览器广告拦截：https://github.com/gorhill/uBlock</span><br><span class=\"line\">生成excel公式：https://github.com/weijunext/smart-excel-ai</span><br><span class=\"line\">生成节日祝福个性视频 https://shotstack.io/learn/how-to-build-1000-personalised-videos/</span><br><span class=\"line\">提升照片分辨率 https://github.com/Djdefrag/QualityScaler</span><br><span class=\"line\">图片搜索引擎https://openverse.org/</span><br><span class=\"line\">ai作图搜索https://lexica.art/</span><br><span class=\"line\">课程教学 支持web和移动端在线练习 https://github.com/chenqiaorui/PlayEdu</span><br><span class=\"line\">关于产品的思考 https://produck.zhubai.love/</span><br><span class=\"line\">设计所有资源：https://github.com/bradtraversy/design-resources-for-developers</span><br><span class=\"line\">翻墙工具：https://github.com/Dreamacro/clash</span><br><span class=\"line\">实时换脸：https://github.com/iperov/DeepFaceLive</span><br><span class=\"line\">aws指导：https://github.com/open-guides/og-aws</span><br><span class=\"line\">Html 和 CSS 图文教程：https://internetingishard.netlify.app/html-and-css/</span><br><span class=\"line\">临时邮件接收：https://email.ml/</span><br><span class=\"line\">键盘打字记单词：https://github.com/RealKai42/qwerty-learner</span><br><span class=\"line\">桌面视频播放器：https://github.com/Hunlongyu/ZY-Player</span><br><span class=\"line\">免费的编程中文书籍索引：https://github.com/justjavac/free-programming-books-zh_CN</span><br><span class=\"line\">提高英语技能：https://github.com/byoungd/English-level-up-tips</span><br><span class=\"line\">Kubernetes 中文指南：https://jimmysong.io/kubernetes-handbook/</span><br><span class=\"line\">Kubernetes：https://zhangzhuo.ltd/tags/kubernetes</span><br><span class=\"line\">运维实践指南：https://billwang139967.gitbooks.io/op_practice_book/content/</span><br><span class=\"line\">小程序资源汇总：https://github.com/justjavac/awesome-wechat-weapp</span><br><span class=\"line\">外语视频转成中文视频：https://www.youtube-dubbing.com/（英文语音转成中文）</span><br><span class=\"line\">免费的文生图网站：https://sdxlturbo.ai/</span><br><span class=\"line\">英语音频转成文本的在线工具：https://huggingface.co/spaces/Xenova/whisper-web</span><br><span class=\"line\">让 Mac 电脑具备 Windows 的 alt + tab 键的功能：https://github.com/lwouis/alt-tab-macos</span><br><span class=\"line\">免费接码平台：https://iyideng.fun/welfare/best-domestic-platform-for-receiving-captcha-free-of-charge.html</span><br><span class=\"line\">es同步工具：https://github.com/elasticsearch-dump/elasticsearch-dump</span><br><span class=\"line\">完全基于本地构建的 GPT，可以将本地知识库作为问答的原料：https://github.com/PromtEngineer/localGPT</span><br><span class=\"line\">openldap 介绍和使用：https://outmanzzq.github.io/2020/05/12/openldap/</span><br><span class=\"line\">siteground: [wordpress-docker-compose](https://github.com/nezhar/wordpress-docker-compose/tree/master)</span><br><span class=\"line\">[wordpress中文官网](https://cn.wordpress.org/)</span><br><span class=\"line\">插件：</span><br><span class=\"line\">- WP Statistics 统计访问量</span><br><span class=\"line\">- WP-Optimize 提高网站性能</span><br><span class=\"line\">- WP Super Cache 生成静态文件缓存</span><br><span class=\"line\">- site kit 用于分析人们如何找到和使用您的站点</span><br><span class=\"line\">- WooCommerce 电子商务插件</span><br></pre></td></tr></table></figure>\n"},{"title":"第10期：VIM","date":"2023-05-20T10:50:15.000Z","_content":"### 常见命令\n```\n:set ff # 查看文件文本格式\n:set binary # 设置成unix格式\n注释：ctrl+v 根据光标选中要注释的行，按下I，输入#，esc退出编辑。\n取消：ctrl+v 根据光标选中要取消的行，按下s，esc退出编辑。\nctrl+r # 取消撤销\n:set list # 可以显示一些符号，$出现在行结尾，代表换行；^I 代表tab键；空格依旧是空格\n:%s/str/newstr/g       # 全部替换\n```","source":"_posts/第10期：VIM.md","raw":"---\ntitle: 第10期：VIM\ndate: 2023-05-20 18:50:15\ntags:\n---\n### 常见命令\n```\n:set ff # 查看文件文本格式\n:set binary # 设置成unix格式\n注释：ctrl+v 根据光标选中要注释的行，按下I，输入#，esc退出编辑。\n取消：ctrl+v 根据光标选中要取消的行，按下s，esc退出编辑。\nctrl+r # 取消撤销\n:set list # 可以显示一些符号，$出现在行结尾，代表换行；^I 代表tab键；空格依旧是空格\n:%s/str/newstr/g       # 全部替换\n```","slug":"第10期：VIM","published":1,"updated":"2024-03-06T09:56:33.309Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvtdi0001bkln6kfbhhie","content":"<h3 id=\"常见命令\"><a href=\"#常见命令\" class=\"headerlink\" title=\"常见命令\"></a>常见命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:set ff # 查看文件文本格式</span><br><span class=\"line\">:set binary # 设置成unix格式</span><br><span class=\"line\">注释：ctrl+v 根据光标选中要注释的行，按下I，输入#，esc退出编辑。</span><br><span class=\"line\">取消：ctrl+v 根据光标选中要取消的行，按下s，esc退出编辑。</span><br><span class=\"line\">ctrl+r # 取消撤销</span><br><span class=\"line\">:set list # 可以显示一些符号，$出现在行结尾，代表换行；^I 代表tab键；空格依旧是空格</span><br><span class=\"line\">:%s/str/newstr/g       # 全部替换</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"常见命令\"><a href=\"#常见命令\" class=\"headerlink\" title=\"常见命令\"></a>常见命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:set ff # 查看文件文本格式</span><br><span class=\"line\">:set binary # 设置成unix格式</span><br><span class=\"line\">注释：ctrl+v 根据光标选中要注释的行，按下I，输入#，esc退出编辑。</span><br><span class=\"line\">取消：ctrl+v 根据光标选中要取消的行，按下s，esc退出编辑。</span><br><span class=\"line\">ctrl+r # 取消撤销</span><br><span class=\"line\">:set list # 可以显示一些符号，$出现在行结尾，代表换行；^I 代表tab键；空格依旧是空格</span><br><span class=\"line\">:%s/str/newstr/g       # 全部替换</span><br></pre></td></tr></table></figure>"},{"title":"第11期：Tcpdump","date":"2023-05-20T16:40:50.000Z","_content":"### 常用命令\n```\n# tcpdump 抓指定post请求并存放到文件\nnohup tcpdump -s 0 -A -vv 'tcp[((tcp[12:1] & 0xf0) >> 2):4] = 0x504f5354' | grep -C 100 \"/api/screenshot\" >> file.log &\n```\n\n### TCP\n```\n三次握手：\n1.张三发送一个数据包，设置SYN=1，表明想要建立连接，设置seq=x来注释第一个字节包编号；\n2.李四收到了，发送一个数据包，设置ACK=1，表明他收到了数据包，设置ack=x+1，期待收到下一个数据包；同时，他想要建立通信连接，设置seq=y；\n3.张三设置ack=y+1给李四，表明自己收到了李四的包。\n```\n#### wireshark过滤规则\n```\nip.src == 192.168.1.189 # 根据源ip匹配\nip.dst == 192.168.1.189 # 根据目的ip匹配\nip.addr == 192.168.1.189 # 根据源或目的ip匹配\n\nhttp # 根据协议匹配\n\ntcp.port == 80 # 根据端口匹配\n\nhttp.response.code==200 # 根据状态码匹配\n\nhttp.request==1 # 匹配所有请求包\n\nhttp.response==1 # 匹配所有相应包\nhttp.request.method==GET # 匹配GET请求\n```\n#### tcpdump抓包分析https\n案例设计：\n```\n在centos7机器上，执行`tcpdump -i any -vvv tcp -w /tmp/json.pcap`监听tcp请求;\n\ncentos7新起一个窗口，执行`curl https://json.im/`\n\n切换回tcpdump的窗口，`ctrl + c` 停止监听。\n\n执行`tcpdump -r /tmp/json.pcap`查看pcap包 或者使用`wireshark`查看。\n```\n说明：\n- `tcpdump -i any -vvv tcp -w /tmp/json.pcap` 中 `-i any`监听所有网口；`-vvv`获取更多详细信息；`tcp`抓取tcp请求。\n\n- 由于抓取的是https协议，报文数据全是被加密的。\n","source":"_posts/第11期：Tcpdump.md","raw":"---\ntitle: 第11期：Tcpdump\ndate: 2023-05-21 00:40:50\ntags:\n---\n### 常用命令\n```\n# tcpdump 抓指定post请求并存放到文件\nnohup tcpdump -s 0 -A -vv 'tcp[((tcp[12:1] & 0xf0) >> 2):4] = 0x504f5354' | grep -C 100 \"/api/screenshot\" >> file.log &\n```\n\n### TCP\n```\n三次握手：\n1.张三发送一个数据包，设置SYN=1，表明想要建立连接，设置seq=x来注释第一个字节包编号；\n2.李四收到了，发送一个数据包，设置ACK=1，表明他收到了数据包，设置ack=x+1，期待收到下一个数据包；同时，他想要建立通信连接，设置seq=y；\n3.张三设置ack=y+1给李四，表明自己收到了李四的包。\n```\n#### wireshark过滤规则\n```\nip.src == 192.168.1.189 # 根据源ip匹配\nip.dst == 192.168.1.189 # 根据目的ip匹配\nip.addr == 192.168.1.189 # 根据源或目的ip匹配\n\nhttp # 根据协议匹配\n\ntcp.port == 80 # 根据端口匹配\n\nhttp.response.code==200 # 根据状态码匹配\n\nhttp.request==1 # 匹配所有请求包\n\nhttp.response==1 # 匹配所有相应包\nhttp.request.method==GET # 匹配GET请求\n```\n#### tcpdump抓包分析https\n案例设计：\n```\n在centos7机器上，执行`tcpdump -i any -vvv tcp -w /tmp/json.pcap`监听tcp请求;\n\ncentos7新起一个窗口，执行`curl https://json.im/`\n\n切换回tcpdump的窗口，`ctrl + c` 停止监听。\n\n执行`tcpdump -r /tmp/json.pcap`查看pcap包 或者使用`wireshark`查看。\n```\n说明：\n- `tcpdump -i any -vvv tcp -w /tmp/json.pcap` 中 `-i any`监听所有网口；`-vvv`获取更多详细信息；`tcp`抓取tcp请求。\n\n- 由于抓取的是https协议，报文数据全是被加密的。\n","slug":"第11期：Tcpdump","published":1,"updated":"2024-03-06T06:55:18.347Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvtdl0002bkln8jgqg9mi","content":"<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># tcpdump 抓指定post请求并存放到文件</span><br><span class=\"line\">nohup tcpdump -s 0 -A -vv &#x27;tcp[((tcp[12:1] &amp; 0xf0) &gt;&gt; 2):4] = 0x504f5354&#x27; | grep -C 100 &quot;/api/screenshot&quot; &gt;&gt; file.log &amp;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">三次握手：</span><br><span class=\"line\">1.张三发送一个数据包，设置SYN=1，表明想要建立连接，设置seq=x来注释第一个字节包编号；</span><br><span class=\"line\">2.李四收到了，发送一个数据包，设置ACK=1，表明他收到了数据包，设置ack=x+1，期待收到下一个数据包；同时，他想要建立通信连接，设置seq=y；</span><br><span class=\"line\">3.张三设置ack=y+1给李四，表明自己收到了李四的包。</span><br></pre></td></tr></table></figure>\n<h4 id=\"wireshark过滤规则\"><a href=\"#wireshark过滤规则\" class=\"headerlink\" title=\"wireshark过滤规则\"></a>wireshark过滤规则</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip.src == 192.168.1.189 # 根据源ip匹配</span><br><span class=\"line\">ip.dst == 192.168.1.189 # 根据目的ip匹配</span><br><span class=\"line\">ip.addr == 192.168.1.189 # 根据源或目的ip匹配</span><br><span class=\"line\"></span><br><span class=\"line\">http # 根据协议匹配</span><br><span class=\"line\"></span><br><span class=\"line\">tcp.port == 80 # 根据端口匹配</span><br><span class=\"line\"></span><br><span class=\"line\">http.response.code==200 # 根据状态码匹配</span><br><span class=\"line\"></span><br><span class=\"line\">http.request==1 # 匹配所有请求包</span><br><span class=\"line\"></span><br><span class=\"line\">http.response==1 # 匹配所有相应包</span><br><span class=\"line\">http.request.method==GET # 匹配GET请求</span><br></pre></td></tr></table></figure>\n<h4 id=\"tcpdump抓包分析https\"><a href=\"#tcpdump抓包分析https\" class=\"headerlink\" title=\"tcpdump抓包分析https\"></a>tcpdump抓包分析https</h4><p>案例设计：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在centos7机器上，执行`tcpdump -i any -vvv tcp -w /tmp/json.pcap`监听tcp请求;</span><br><span class=\"line\"></span><br><span class=\"line\">centos7新起一个窗口，执行`curl https://json.im/`</span><br><span class=\"line\"></span><br><span class=\"line\">切换回tcpdump的窗口，`ctrl + c` 停止监听。</span><br><span class=\"line\"></span><br><span class=\"line\">执行`tcpdump -r /tmp/json.pcap`查看pcap包 或者使用`wireshark`查看。</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><p><code>tcpdump -i any -vvv tcp -w /tmp/json.pcap</code> 中 <code>-i any</code>监听所有网口；<code>-vvv</code>获取更多详细信息；<code>tcp</code>抓取tcp请求。</p>\n</li>\n<li><p>由于抓取的是https协议，报文数据全是被加密的。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># tcpdump 抓指定post请求并存放到文件</span><br><span class=\"line\">nohup tcpdump -s 0 -A -vv &#x27;tcp[((tcp[12:1] &amp; 0xf0) &gt;&gt; 2):4] = 0x504f5354&#x27; | grep -C 100 &quot;/api/screenshot&quot; &gt;&gt; file.log &amp;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">三次握手：</span><br><span class=\"line\">1.张三发送一个数据包，设置SYN=1，表明想要建立连接，设置seq=x来注释第一个字节包编号；</span><br><span class=\"line\">2.李四收到了，发送一个数据包，设置ACK=1，表明他收到了数据包，设置ack=x+1，期待收到下一个数据包；同时，他想要建立通信连接，设置seq=y；</span><br><span class=\"line\">3.张三设置ack=y+1给李四，表明自己收到了李四的包。</span><br></pre></td></tr></table></figure>\n<h4 id=\"wireshark过滤规则\"><a href=\"#wireshark过滤规则\" class=\"headerlink\" title=\"wireshark过滤规则\"></a>wireshark过滤规则</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ip.src == 192.168.1.189 # 根据源ip匹配</span><br><span class=\"line\">ip.dst == 192.168.1.189 # 根据目的ip匹配</span><br><span class=\"line\">ip.addr == 192.168.1.189 # 根据源或目的ip匹配</span><br><span class=\"line\"></span><br><span class=\"line\">http # 根据协议匹配</span><br><span class=\"line\"></span><br><span class=\"line\">tcp.port == 80 # 根据端口匹配</span><br><span class=\"line\"></span><br><span class=\"line\">http.response.code==200 # 根据状态码匹配</span><br><span class=\"line\"></span><br><span class=\"line\">http.request==1 # 匹配所有请求包</span><br><span class=\"line\"></span><br><span class=\"line\">http.response==1 # 匹配所有相应包</span><br><span class=\"line\">http.request.method==GET # 匹配GET请求</span><br></pre></td></tr></table></figure>\n<h4 id=\"tcpdump抓包分析https\"><a href=\"#tcpdump抓包分析https\" class=\"headerlink\" title=\"tcpdump抓包分析https\"></a>tcpdump抓包分析https</h4><p>案例设计：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在centos7机器上，执行`tcpdump -i any -vvv tcp -w /tmp/json.pcap`监听tcp请求;</span><br><span class=\"line\"></span><br><span class=\"line\">centos7新起一个窗口，执行`curl https://json.im/`</span><br><span class=\"line\"></span><br><span class=\"line\">切换回tcpdump的窗口，`ctrl + c` 停止监听。</span><br><span class=\"line\"></span><br><span class=\"line\">执行`tcpdump -r /tmp/json.pcap`查看pcap包 或者使用`wireshark`查看。</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><p><code>tcpdump -i any -vvv tcp -w /tmp/json.pcap</code> 中 <code>-i any</code>监听所有网口；<code>-vvv</code>获取更多详细信息；<code>tcp</code>抓取tcp请求。</p>\n</li>\n<li><p>由于抓取的是https协议，报文数据全是被加密的。</p>\n</li>\n</ul>\n"},{"title":"第13期：cron","date":"2023-05-21T07:55:49.000Z","_content":"### 常用示例\ncrontab -e 打开配置文件\n-l # 显示当前用户的定时任务内容\n-r # 删除用户/var/spool/cron/ 定时任务\n```\n*/1 * * * * /usr/sbin/chroot --userspec=nobody.nobody / sh -c \"echo 'nobody' > /tmp/nobody.log \"\n```\n\n### cron表达式验证\n```\nhttps://www.iamwawa.cn/crontab.html\n```","source":"_posts/第13期：cron.md","raw":"---\ntitle: 第13期：cron\ndate: 2023-05-21 15:55:49\ntags:\n---\n### 常用示例\ncrontab -e 打开配置文件\n-l # 显示当前用户的定时任务内容\n-r # 删除用户/var/spool/cron/ 定时任务\n```\n*/1 * * * * /usr/sbin/chroot --userspec=nobody.nobody / sh -c \"echo 'nobody' > /tmp/nobody.log \"\n```\n\n### cron表达式验证\n```\nhttps://www.iamwawa.cn/crontab.html\n```","slug":"第13期：cron","published":1,"updated":"2024-03-06T06:55:18.348Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvtdm0003bkln81v4fn4u","content":"<h3 id=\"常用示例\"><a href=\"#常用示例\" class=\"headerlink\" title=\"常用示例\"></a>常用示例</h3><p>crontab -e 打开配置文件<br>-l # 显示当前用户的定时任务内容<br>-r # 删除用户&#x2F;var&#x2F;spool&#x2F;cron&#x2F; 定时任务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*/1 * * * * /usr/sbin/chroot --userspec=nobody.nobody / sh -c &quot;echo &#x27;nobody&#x27; &gt; /tmp/nobody.log &quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"cron表达式验证\"><a href=\"#cron表达式验证\" class=\"headerlink\" title=\"cron表达式验证\"></a>cron表达式验证</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.iamwawa.cn/crontab.html</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"常用示例\"><a href=\"#常用示例\" class=\"headerlink\" title=\"常用示例\"></a>常用示例</h3><p>crontab -e 打开配置文件<br>-l # 显示当前用户的定时任务内容<br>-r # 删除用户&#x2F;var&#x2F;spool&#x2F;cron&#x2F; 定时任务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*/1 * * * * /usr/sbin/chroot --userspec=nobody.nobody / sh -c &quot;echo &#x27;nobody&#x27; &gt; /tmp/nobody.log &quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"cron表达式验证\"><a href=\"#cron表达式验证\" class=\"headerlink\" title=\"cron表达式验证\"></a>cron表达式验证</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://www.iamwawa.cn/crontab.html</span><br></pre></td></tr></table></figure>"},{"title":"第14期：linux-jq","date":"2023-05-22T02:07:10.000Z","_content":"#### jq简介\njq，用来处理json数据的工具。\n\n#### jq安装使用\ncentos安装\n```\nyum install -y jq\n```\n\n使用\n```\n# 获取一个键的值\necho '{\"name\":\"ricky\", \"age\":18}' |jq '.name'\n\n# 获取数组数据\necho '[{\"name\": \"flolunsa\", \"age\": 12}, {\"name\": \"ricky\", \"age\": 27}]' | jq .[0]\necho '[{\"name\":\"JSON\", \"good\":true}, {\"name\":\"XML\", \"good\":false1}]' | jq '.[1]' # false不能写成false1\n\n# 同时获取多个key的值\necho '{\"name\":\"ricky\", \"age\":18}' |jq '.name, .age'\n```\n\n#### 定义一个json\n```\n# 错误例子: 使用单引号\n{\n \"url\": 'https://www.examples.com'\n}\n\n# 错误使用非十进制数据，json只能使用十进制 \n{\n  \"foo\": 0x123\n}\n\n# 正确例子\n# 定义对象\n{  \n  \"bar\": \"nisha\",\n  composition: {\n    \"a\": 1,\n    \"name\": \"ricky\"\n  }  \n}\n\n```\n参考：https://stedolan.github.io/jq/tutorial/\n","source":"_posts/第14期：linux-jq.md","raw":"---\ntitle: 第14期：linux-jq\ndate: 2023-05-22 10:07:10\ntags:\n---\n#### jq简介\njq，用来处理json数据的工具。\n\n#### jq安装使用\ncentos安装\n```\nyum install -y jq\n```\n\n使用\n```\n# 获取一个键的值\necho '{\"name\":\"ricky\", \"age\":18}' |jq '.name'\n\n# 获取数组数据\necho '[{\"name\": \"flolunsa\", \"age\": 12}, {\"name\": \"ricky\", \"age\": 27}]' | jq .[0]\necho '[{\"name\":\"JSON\", \"good\":true}, {\"name\":\"XML\", \"good\":false1}]' | jq '.[1]' # false不能写成false1\n\n# 同时获取多个key的值\necho '{\"name\":\"ricky\", \"age\":18}' |jq '.name, .age'\n```\n\n#### 定义一个json\n```\n# 错误例子: 使用单引号\n{\n \"url\": 'https://www.examples.com'\n}\n\n# 错误使用非十进制数据，json只能使用十进制 \n{\n  \"foo\": 0x123\n}\n\n# 正确例子\n# 定义对象\n{  \n  \"bar\": \"nisha\",\n  composition: {\n    \"a\": 1,\n    \"name\": \"ricky\"\n  }  \n}\n\n```\n参考：https://stedolan.github.io/jq/tutorial/\n","slug":"第14期：linux-jq","published":1,"updated":"2024-03-06T06:55:18.350Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvtdn0004bklncbnxgc0q","content":"<h4 id=\"jq简介\"><a href=\"#jq简介\" class=\"headerlink\" title=\"jq简介\"></a>jq简介</h4><p>jq，用来处理json数据的工具。</p>\n<h4 id=\"jq安装使用\"><a href=\"#jq安装使用\" class=\"headerlink\" title=\"jq安装使用\"></a>jq安装使用</h4><p>centos安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y jq</span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 获取一个键的值</span><br><span class=\"line\">echo &#x27;&#123;&quot;name&quot;:&quot;ricky&quot;, &quot;age&quot;:18&#125;&#x27; |jq &#x27;.name&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\"># 获取数组数据</span><br><span class=\"line\">echo &#x27;[&#123;&quot;name&quot;: &quot;flolunsa&quot;, &quot;age&quot;: 12&#125;, &#123;&quot;name&quot;: &quot;ricky&quot;, &quot;age&quot;: 27&#125;]&#x27; | jq .[0]</span><br><span class=\"line\">echo &#x27;[&#123;&quot;name&quot;:&quot;JSON&quot;, &quot;good&quot;:true&#125;, &#123;&quot;name&quot;:&quot;XML&quot;, &quot;good&quot;:false1&#125;]&#x27; | jq &#x27;.[1]&#x27; # false不能写成false1</span><br><span class=\"line\"></span><br><span class=\"line\"># 同时获取多个key的值</span><br><span class=\"line\">echo &#x27;&#123;&quot;name&quot;:&quot;ricky&quot;, &quot;age&quot;:18&#125;&#x27; |jq &#x27;.name, .age&#x27;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"定义一个json\"><a href=\"#定义一个json\" class=\"headerlink\" title=\"定义一个json\"></a>定义一个json</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 错误例子: 使用单引号</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> &quot;url&quot;: &#x27;https://www.examples.com&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 错误使用非十进制数据，json只能使用十进制 </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;foo&quot;: 0x123</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 正确例子</span><br><span class=\"line\"># 定义对象</span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">  &quot;bar&quot;: &quot;nisha&quot;,</span><br><span class=\"line\">  composition: &#123;</span><br><span class=\"line\">    &quot;a&quot;: 1,</span><br><span class=\"line\">    &quot;name&quot;: &quot;ricky&quot;</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://stedolan.github.io/jq/tutorial/\">https://stedolan.github.io/jq/tutorial/</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"jq简介\"><a href=\"#jq简介\" class=\"headerlink\" title=\"jq简介\"></a>jq简介</h4><p>jq，用来处理json数据的工具。</p>\n<h4 id=\"jq安装使用\"><a href=\"#jq安装使用\" class=\"headerlink\" title=\"jq安装使用\"></a>jq安装使用</h4><p>centos安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install -y jq</span><br></pre></td></tr></table></figure>\n\n<p>使用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 获取一个键的值</span><br><span class=\"line\">echo &#x27;&#123;&quot;name&quot;:&quot;ricky&quot;, &quot;age&quot;:18&#125;&#x27; |jq &#x27;.name&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\"># 获取数组数据</span><br><span class=\"line\">echo &#x27;[&#123;&quot;name&quot;: &quot;flolunsa&quot;, &quot;age&quot;: 12&#125;, &#123;&quot;name&quot;: &quot;ricky&quot;, &quot;age&quot;: 27&#125;]&#x27; | jq .[0]</span><br><span class=\"line\">echo &#x27;[&#123;&quot;name&quot;:&quot;JSON&quot;, &quot;good&quot;:true&#125;, &#123;&quot;name&quot;:&quot;XML&quot;, &quot;good&quot;:false1&#125;]&#x27; | jq &#x27;.[1]&#x27; # false不能写成false1</span><br><span class=\"line\"></span><br><span class=\"line\"># 同时获取多个key的值</span><br><span class=\"line\">echo &#x27;&#123;&quot;name&quot;:&quot;ricky&quot;, &quot;age&quot;:18&#125;&#x27; |jq &#x27;.name, .age&#x27;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"定义一个json\"><a href=\"#定义一个json\" class=\"headerlink\" title=\"定义一个json\"></a>定义一个json</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 错误例子: 使用单引号</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"> &quot;url&quot;: &#x27;https://www.examples.com&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 错误使用非十进制数据，json只能使用十进制 </span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  &quot;foo&quot;: 0x123</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 正确例子</span><br><span class=\"line\"># 定义对象</span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">  &quot;bar&quot;: &quot;nisha&quot;,</span><br><span class=\"line\">  composition: &#123;</span><br><span class=\"line\">    &quot;a&quot;: 1,</span><br><span class=\"line\">    &quot;name&quot;: &quot;ricky&quot;</span><br><span class=\"line\">  &#125;  </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://stedolan.github.io/jq/tutorial/\">https://stedolan.github.io/jq/tutorial/</a></p>\n"},{"title":"第12期：curl","date":"2023-05-21T01:10:59.000Z","_content":"### 常用命令\n```\n# 携带refer\ncurl -so /dev/null -v 'https://example.com/web/home/feature_3_bg.png' -H 'referer: http://servicewechat.com/'\n```\n","source":"_posts/第12期：curl.md","raw":"---\ntitle: 第12期：curl\ndate: 2023-05-21 09:10:59\ntags:\n---\n### 常用命令\n```\n# 携带refer\ncurl -so /dev/null -v 'https://example.com/web/home/feature_3_bg.png' -H 'referer: http://servicewechat.com/'\n```\n","slug":"第12期：curl","published":1,"updated":"2024-03-06T06:55:18.347Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvtdo0005bkln3rfo0k68","content":"<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 携带refer</span><br><span class=\"line\">curl -so /dev/null -v &#x27;https://example.com/web/home/feature_3_bg.png&#x27; -H &#x27;referer: http://servicewechat.com/&#x27;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 携带refer</span><br><span class=\"line\">curl -so /dev/null -v &#x27;https://example.com/web/home/feature_3_bg.png&#x27; -H &#x27;referer: http://servicewechat.com/&#x27;</span><br></pre></td></tr></table></figure>\n"},{"title":"第15期：LDAP","date":"2023-05-22T02:11:20.000Z","_content":"#### LDAP简介\nLDAP(Lightweight Directory Access Protocol)轻量级目录访问协议，用于用户管理的统一认证服务。\n\n解决的痛点：比如说公司有多个系统有不同套用户密码，但接入开源的openldap之后，就可以共享同一套认证密码。\n#### LDAP原理\n目录是一个搜索查询、树结构数据库，ldap是一套由目录加协议组成的认证系统。\n\n目录树组成成分：\n- `dn` -- Distinguished Name 一条记录的具体位置，如dn:\"uid=er.xiong,ou=OA,dc=xiongchumo,dc=com\"表示熊出没公司OA组的熊二\n- `dc` -- Domain component 域名部分，一条记录可包含多个dc\n- `ou` -- Organization Unit 组织单元，一条记录所属组织 \n- `uid` -- user id 用户id\n- `sn` -- Surname 姓，如“许”\n- `cn` -- Common Name，公共名称，一条记录的名称\n- `rdn` -- 相对辨别名，类似于文件系统中的相对路径，它是与目录树结构无关的部分，如“uid=tom”或“cn= Thomas Johansson”\n\n#### openldap安装使用\nldap只是一套协议，openldap是基于这套协议的实现。\n\n安装机器：centos7\n\nyum安装openldap\n```\nyum -y install openldap compat-openldap openldap-clients openldap-servers openldap-devel\n```\n说明：\n- openldap 它是openldap客户端和服务端的公共库\n- compat-openldap openldap兼容性库\n- openldap-clients 启动服务和设置\n- openldap-servers 启动服务和设置\n- openldap-devel 工具包，可选择安装\n- openldap-servers-sql 支持sql模块，可选择安装\n- migrationtools 通过migrationtools实现OpenLDAP用户及用户组的添加，导入系统账户，可进行选择性安装\n\n相关目录\n```\n/etc/openldap/slapd.d/ # 存放配置文件\n```\n\n服务管理命令\n```\nservice slapd start # 启动openldap服务\nslapd -VV # 查看版本\n```\n#### 示例说明：添加管理员密码\n生成管理员密码\n```\nslappasswd -s 123456 # {SSHA}XoEOHoalUAXb7dNiirKs7yFl/1/N/QYF\n```\n\n创建目录并添加修改管理员密码的ldif文件\n```\nmkdir /opt/ldap-workspace\ntouch changepwd.ldif\n\n# 文件内容如下：\ndn: olcDatabase={0}config,cn=config\nchangetype: modify\nadd: olcRootPW\nolcRootPW: {SSHA}XoEOHoalUAXb7dNiirKs7yFl/1/N/QYF\n```\n说明：\n- 第一行表将要变更配置的文件：/etc/openldap/slapd.d/cn=config/olcDatabase={0}config.ldif\n- 第二行表修改类型\n- 第三行表要添加的配置项是olcRootPW\n- 第四行是加配置项值\n\n执行changepwd文件\n```\nldapadd -Y EXTERNAL -H ldapi:/// -f changepwd.ldif\n```\n\n结果\n```\ncat /etc/openldap/slapd.d/cn\\=config/olcDatabase\\=\\{0\\}config.ldif，新增了一个olcRootPW项\n```\n参考：https://www.cnblogs.com/swordfall/p/12119010.html\n\nhttps://www.cnblogs.com/wilburxu/p/9174353.html\n\nhttps://www.jianshu.com/p/7e4d99f6baaf\n\n\n#### 部署生产环境可用的openldap\n```\n# 安装启动\nyum install -y openldap-clients openldap-servers\n\ncp /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG\n\nchown ldap:ldap /var/lib/ldap/DB_CONFIG\n\nsystemctl start slapd\n\nsystemctl enable slapd\n\n# 导入预设模式\nfind /etc/openldap/schema/ -name \"*.ldif\" -exec ldapadd -Y EXTERNAL -H ldapi:/// -D \"cn=config\" -f {} \\; \n\n# 设置管理用户root密码：\n```\nslappasswd -s 123456 # 生成加密密码\n\nchrootpwd.ldif # -H 指定ldap服务器地址；\n```\n\n# 设置域名cn=admin,dc=emog,dc=com对olcDatabase={1}monitor等文件有存取权限\n\nmkdir -p /etc/openldap/init_ldif # init_ldif当作工作区目录\ncd /etc/openldap/init_ldif\n\nldapmodify -Y EXTERNAL -H ldapi:/// -f chdomain.ldif # chdomain.ldif文件在后面的说明处。\n\n# 创建emog根域名，并在其下设置admin用户管理整个根组织，再创建两个组织：Group和People。\n\nldapadd -x -D cn=admin,dc=emog,dc=com -W -f addOrg.ldif\n\n# UI连接管理 LdapAdmin: http://www.ldapadmin.org/download/ldapadmin.html\nHost: 192.168.1.146  Port: 389  Version: 3\nBase: dc=emog,dc=com\nUsername: cn=admin,dc=emog,dc=com\nPassword: 123456\n\n# 新建用户\n右击 ou=People 目录新建用户\n仅配置sn: chenxiaoming,\ncn: chenxiaoming,\nhomeDirectory为 /\n\n# 新建Group\n右击 ou=Group 目录新建Organizational Unit类型，名为Jenkins，再在Jenkins下新建group类型，名为jenkins-users，这时候有一个属性`member`可配置为`\tcn=lisi,ou=People,dc=emog,dc=com`，代表lisi这个人归属于Jenkins-users这个group下面。\n\n# 至此，配置完成了。\n```\n说明：\n- chrootpwd.ldif文件内容：\n```\ndn: olcDatabase={2}hdb,cn=config\nchangetype: modify\nreplace: olcRootPW\nolcRootPW: {SSHA}mMZx/2fkVQDpjnQELwYlILXVW/ybXnMy\n```\n\n- chdomain.ldif文件内容：\n```\ndn: olcDatabase={1}monitor,cn=config\nchangetype: modify\nreplace: olcAccess\nolcAccess: {0}to * by dn.base=\"gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth\"  read by dn.base=\"cn=admin,dc=emog,dc=com\" read by * none\n\ndn: olcDatabase={2}hdb,cn=config\nchangetype: modify\nreplace: olcSuffix\nolcSuffix: dc=emog,dc=com\n\ndn: olcDatabase={2}hdb,cn=config\nchangetype: modify\nreplace: olcRootDN\nolcRootDN: cn=admin,dc=emog,dc=com\n\ndn: olcDatabase={2}hdb,cn=config\nchangetype: modify\nadd: olcAccess\nolcAccess: {0}to attrs=userPassword,shadowLastChange by dn=\"cn=admin,dc=emog,dc=com\" write by anonymous auth by self write by * none\nolcAccess: {1}to dn.base=\"\" by * read\nolcAccess: {2}to * by dn=\"cn=admin,dc=emog,dc=com\" write by * read\n\n```\n- add-org.ldif文件内容：\n```\ndn: dc=emog,dc=com\ndc: emog\nobjectClass: top\nobjectClass: domain\no: emog\n\ndn: cn=admin,dc=emog,dc=com\nobjectClass: organizationalRole\ncn: admin\ndescription: LDAP admin\n\ndn: ou=Group,dc=emog,dc=com\nou: Group\nobjectClass: organizationalUnit\n\ndn: ou=People,dc=emog,dc=com\nou: People\nobjectClass: organizationalUnit\n```\n\n#### gitea接入openldap\n前提：\ngitea和openldap部署好了。\n\n[gitea安装](../Git/gitea.md)\n\n接入步骤\n1. 浏览器登入gitea，点击右侧的个人头像-管理后台-认证源-添加认证源\n2. 认证类型(LDAP (via BindDN))-认证名称(allsd11-openldap)-安全协议(Unencrypted)-主机(192.168.31.87)-端口(389)-用户搜索基准(ou=People,dc=emog,dc=com)-用户过滤规则((&(objectclass=top)(cn=%s)))-勾选 从Bind DN中拉去属性信息，该认证源已经启用。\n\n说明：\n- 因为没有用TLS证书，所以选Unencrypted\n- 其他选项默认不动即可\n\n#### jenkins接入openldap\n\n1. 登录jenkins-系统管理-全局安全配置-安全域(LDAP)\n2. 开始配置LDAP：Server(192.168.31.87:389)-roo DN(dc=emog,dc=com)-勾选Allow blank rootDN-User search base(ou=People)-User search filter(cn={0})-Group search base(ou=Jenkins,ou=Group)-点选Search for LDAP groups containing user-Manager DN(cn=admin,dc=emog,dc=com)-Manager Password\n(123456)-保存\n\n说明：\n- `root DN`的设置是会后面的`User search base`和`Group search base`服务的，如`User search base`设置成ou=People，认证的时候就会到`ou=People,dc=emog,dc=com`下面查找用户。\n- 其他选项没有提及的就保持不动。\n\n3. 配置完成后，点击`保存`退出。点击`全局安全配置`进入，可以点击`Testing LDAP settings`测试。接着往下，看到`授权策略`，点击`Add user`添加用户，User name是你早早就设置在`ou=People`下面的用户才行，如`zhangsan` ，最后勾选那些\"Read\"等权限。最好规划一个administer用户，因为系统认证方式的admin已经不能用了。\n\n4. 登录：使用`zhangsan`用户就可以登录jenkins了。\n\n参考：https://blog.csdn.net/GX_1_11_real/article/details/109511636\n\n#### 遇到问题\n- 1.jenkins认证方式修改成ldap认证后，原来系统认证用户admin使用不了了，怎么办？\n```\n编辑/var/lib/jenkins/config.xml文件\n\n把：\n<securityRealm class=...>\n  ....    \n</securityRealm>\n\n替换成系统用户认证：\n\n<securityRealm class=\"hudson.security.HudsonPrivateSecurityRealm\">\n  <disableSignup>false</disableSignup>\n  <enableCaptcha>false</enableCaptcha>\n</securityRealm>\n\n最后，重启：systemctl restart jenkins\n```\n\n##### 其他参考文章\nhttps://zhuanlan.zhihu.com/p/32732045\nhttps://blog.csdn.net/GX_1_11_real/article/details/108577999\n","source":"_posts/第15期：LDAP.md","raw":"---\ntitle: 第15期：LDAP\ndate: 2023-05-22 10:11:20\ntags:\n---\n#### LDAP简介\nLDAP(Lightweight Directory Access Protocol)轻量级目录访问协议，用于用户管理的统一认证服务。\n\n解决的痛点：比如说公司有多个系统有不同套用户密码，但接入开源的openldap之后，就可以共享同一套认证密码。\n#### LDAP原理\n目录是一个搜索查询、树结构数据库，ldap是一套由目录加协议组成的认证系统。\n\n目录树组成成分：\n- `dn` -- Distinguished Name 一条记录的具体位置，如dn:\"uid=er.xiong,ou=OA,dc=xiongchumo,dc=com\"表示熊出没公司OA组的熊二\n- `dc` -- Domain component 域名部分，一条记录可包含多个dc\n- `ou` -- Organization Unit 组织单元，一条记录所属组织 \n- `uid` -- user id 用户id\n- `sn` -- Surname 姓，如“许”\n- `cn` -- Common Name，公共名称，一条记录的名称\n- `rdn` -- 相对辨别名，类似于文件系统中的相对路径，它是与目录树结构无关的部分，如“uid=tom”或“cn= Thomas Johansson”\n\n#### openldap安装使用\nldap只是一套协议，openldap是基于这套协议的实现。\n\n安装机器：centos7\n\nyum安装openldap\n```\nyum -y install openldap compat-openldap openldap-clients openldap-servers openldap-devel\n```\n说明：\n- openldap 它是openldap客户端和服务端的公共库\n- compat-openldap openldap兼容性库\n- openldap-clients 启动服务和设置\n- openldap-servers 启动服务和设置\n- openldap-devel 工具包，可选择安装\n- openldap-servers-sql 支持sql模块，可选择安装\n- migrationtools 通过migrationtools实现OpenLDAP用户及用户组的添加，导入系统账户，可进行选择性安装\n\n相关目录\n```\n/etc/openldap/slapd.d/ # 存放配置文件\n```\n\n服务管理命令\n```\nservice slapd start # 启动openldap服务\nslapd -VV # 查看版本\n```\n#### 示例说明：添加管理员密码\n生成管理员密码\n```\nslappasswd -s 123456 # {SSHA}XoEOHoalUAXb7dNiirKs7yFl/1/N/QYF\n```\n\n创建目录并添加修改管理员密码的ldif文件\n```\nmkdir /opt/ldap-workspace\ntouch changepwd.ldif\n\n# 文件内容如下：\ndn: olcDatabase={0}config,cn=config\nchangetype: modify\nadd: olcRootPW\nolcRootPW: {SSHA}XoEOHoalUAXb7dNiirKs7yFl/1/N/QYF\n```\n说明：\n- 第一行表将要变更配置的文件：/etc/openldap/slapd.d/cn=config/olcDatabase={0}config.ldif\n- 第二行表修改类型\n- 第三行表要添加的配置项是olcRootPW\n- 第四行是加配置项值\n\n执行changepwd文件\n```\nldapadd -Y EXTERNAL -H ldapi:/// -f changepwd.ldif\n```\n\n结果\n```\ncat /etc/openldap/slapd.d/cn\\=config/olcDatabase\\=\\{0\\}config.ldif，新增了一个olcRootPW项\n```\n参考：https://www.cnblogs.com/swordfall/p/12119010.html\n\nhttps://www.cnblogs.com/wilburxu/p/9174353.html\n\nhttps://www.jianshu.com/p/7e4d99f6baaf\n\n\n#### 部署生产环境可用的openldap\n```\n# 安装启动\nyum install -y openldap-clients openldap-servers\n\ncp /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG\n\nchown ldap:ldap /var/lib/ldap/DB_CONFIG\n\nsystemctl start slapd\n\nsystemctl enable slapd\n\n# 导入预设模式\nfind /etc/openldap/schema/ -name \"*.ldif\" -exec ldapadd -Y EXTERNAL -H ldapi:/// -D \"cn=config\" -f {} \\; \n\n# 设置管理用户root密码：\n```\nslappasswd -s 123456 # 生成加密密码\n\nchrootpwd.ldif # -H 指定ldap服务器地址；\n```\n\n# 设置域名cn=admin,dc=emog,dc=com对olcDatabase={1}monitor等文件有存取权限\n\nmkdir -p /etc/openldap/init_ldif # init_ldif当作工作区目录\ncd /etc/openldap/init_ldif\n\nldapmodify -Y EXTERNAL -H ldapi:/// -f chdomain.ldif # chdomain.ldif文件在后面的说明处。\n\n# 创建emog根域名，并在其下设置admin用户管理整个根组织，再创建两个组织：Group和People。\n\nldapadd -x -D cn=admin,dc=emog,dc=com -W -f addOrg.ldif\n\n# UI连接管理 LdapAdmin: http://www.ldapadmin.org/download/ldapadmin.html\nHost: 192.168.1.146  Port: 389  Version: 3\nBase: dc=emog,dc=com\nUsername: cn=admin,dc=emog,dc=com\nPassword: 123456\n\n# 新建用户\n右击 ou=People 目录新建用户\n仅配置sn: chenxiaoming,\ncn: chenxiaoming,\nhomeDirectory为 /\n\n# 新建Group\n右击 ou=Group 目录新建Organizational Unit类型，名为Jenkins，再在Jenkins下新建group类型，名为jenkins-users，这时候有一个属性`member`可配置为`\tcn=lisi,ou=People,dc=emog,dc=com`，代表lisi这个人归属于Jenkins-users这个group下面。\n\n# 至此，配置完成了。\n```\n说明：\n- chrootpwd.ldif文件内容：\n```\ndn: olcDatabase={2}hdb,cn=config\nchangetype: modify\nreplace: olcRootPW\nolcRootPW: {SSHA}mMZx/2fkVQDpjnQELwYlILXVW/ybXnMy\n```\n\n- chdomain.ldif文件内容：\n```\ndn: olcDatabase={1}monitor,cn=config\nchangetype: modify\nreplace: olcAccess\nolcAccess: {0}to * by dn.base=\"gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth\"  read by dn.base=\"cn=admin,dc=emog,dc=com\" read by * none\n\ndn: olcDatabase={2}hdb,cn=config\nchangetype: modify\nreplace: olcSuffix\nolcSuffix: dc=emog,dc=com\n\ndn: olcDatabase={2}hdb,cn=config\nchangetype: modify\nreplace: olcRootDN\nolcRootDN: cn=admin,dc=emog,dc=com\n\ndn: olcDatabase={2}hdb,cn=config\nchangetype: modify\nadd: olcAccess\nolcAccess: {0}to attrs=userPassword,shadowLastChange by dn=\"cn=admin,dc=emog,dc=com\" write by anonymous auth by self write by * none\nolcAccess: {1}to dn.base=\"\" by * read\nolcAccess: {2}to * by dn=\"cn=admin,dc=emog,dc=com\" write by * read\n\n```\n- add-org.ldif文件内容：\n```\ndn: dc=emog,dc=com\ndc: emog\nobjectClass: top\nobjectClass: domain\no: emog\n\ndn: cn=admin,dc=emog,dc=com\nobjectClass: organizationalRole\ncn: admin\ndescription: LDAP admin\n\ndn: ou=Group,dc=emog,dc=com\nou: Group\nobjectClass: organizationalUnit\n\ndn: ou=People,dc=emog,dc=com\nou: People\nobjectClass: organizationalUnit\n```\n\n#### gitea接入openldap\n前提：\ngitea和openldap部署好了。\n\n[gitea安装](../Git/gitea.md)\n\n接入步骤\n1. 浏览器登入gitea，点击右侧的个人头像-管理后台-认证源-添加认证源\n2. 认证类型(LDAP (via BindDN))-认证名称(allsd11-openldap)-安全协议(Unencrypted)-主机(192.168.31.87)-端口(389)-用户搜索基准(ou=People,dc=emog,dc=com)-用户过滤规则((&(objectclass=top)(cn=%s)))-勾选 从Bind DN中拉去属性信息，该认证源已经启用。\n\n说明：\n- 因为没有用TLS证书，所以选Unencrypted\n- 其他选项默认不动即可\n\n#### jenkins接入openldap\n\n1. 登录jenkins-系统管理-全局安全配置-安全域(LDAP)\n2. 开始配置LDAP：Server(192.168.31.87:389)-roo DN(dc=emog,dc=com)-勾选Allow blank rootDN-User search base(ou=People)-User search filter(cn={0})-Group search base(ou=Jenkins,ou=Group)-点选Search for LDAP groups containing user-Manager DN(cn=admin,dc=emog,dc=com)-Manager Password\n(123456)-保存\n\n说明：\n- `root DN`的设置是会后面的`User search base`和`Group search base`服务的，如`User search base`设置成ou=People，认证的时候就会到`ou=People,dc=emog,dc=com`下面查找用户。\n- 其他选项没有提及的就保持不动。\n\n3. 配置完成后，点击`保存`退出。点击`全局安全配置`进入，可以点击`Testing LDAP settings`测试。接着往下，看到`授权策略`，点击`Add user`添加用户，User name是你早早就设置在`ou=People`下面的用户才行，如`zhangsan` ，最后勾选那些\"Read\"等权限。最好规划一个administer用户，因为系统认证方式的admin已经不能用了。\n\n4. 登录：使用`zhangsan`用户就可以登录jenkins了。\n\n参考：https://blog.csdn.net/GX_1_11_real/article/details/109511636\n\n#### 遇到问题\n- 1.jenkins认证方式修改成ldap认证后，原来系统认证用户admin使用不了了，怎么办？\n```\n编辑/var/lib/jenkins/config.xml文件\n\n把：\n<securityRealm class=...>\n  ....    \n</securityRealm>\n\n替换成系统用户认证：\n\n<securityRealm class=\"hudson.security.HudsonPrivateSecurityRealm\">\n  <disableSignup>false</disableSignup>\n  <enableCaptcha>false</enableCaptcha>\n</securityRealm>\n\n最后，重启：systemctl restart jenkins\n```\n\n##### 其他参考文章\nhttps://zhuanlan.zhihu.com/p/32732045\nhttps://blog.csdn.net/GX_1_11_real/article/details/108577999\n","slug":"第15期：LDAP","published":1,"updated":"2024-03-06T06:55:18.350Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvtdq0006bkln86rsggfg","content":"<h4 id=\"LDAP简介\"><a href=\"#LDAP简介\" class=\"headerlink\" title=\"LDAP简介\"></a>LDAP简介</h4><p>LDAP(Lightweight Directory Access Protocol)轻量级目录访问协议，用于用户管理的统一认证服务。</p>\n<p>解决的痛点：比如说公司有多个系统有不同套用户密码，但接入开源的openldap之后，就可以共享同一套认证密码。</p>\n<h4 id=\"LDAP原理\"><a href=\"#LDAP原理\" class=\"headerlink\" title=\"LDAP原理\"></a>LDAP原理</h4><p>目录是一个搜索查询、树结构数据库，ldap是一套由目录加协议组成的认证系统。</p>\n<p>目录树组成成分：</p>\n<ul>\n<li><code>dn</code> – Distinguished Name 一条记录的具体位置，如dn:”uid&#x3D;er.xiong,ou&#x3D;OA,dc&#x3D;xiongchumo,dc&#x3D;com”表示熊出没公司OA组的熊二</li>\n<li><code>dc</code> – Domain component 域名部分，一条记录可包含多个dc</li>\n<li><code>ou</code> – Organization Unit 组织单元，一条记录所属组织 </li>\n<li><code>uid</code> – user id 用户id</li>\n<li><code>sn</code> – Surname 姓，如“许”</li>\n<li><code>cn</code> – Common Name，公共名称，一条记录的名称</li>\n<li><code>rdn</code> – 相对辨别名，类似于文件系统中的相对路径，它是与目录树结构无关的部分，如“uid&#x3D;tom”或“cn&#x3D; Thomas Johansson”</li>\n</ul>\n<h4 id=\"openldap安装使用\"><a href=\"#openldap安装使用\" class=\"headerlink\" title=\"openldap安装使用\"></a>openldap安装使用</h4><p>ldap只是一套协议，openldap是基于这套协议的实现。</p>\n<p>安装机器：centos7</p>\n<p>yum安装openldap</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install openldap compat-openldap openldap-clients openldap-servers openldap-devel</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li>openldap 它是openldap客户端和服务端的公共库</li>\n<li>compat-openldap openldap兼容性库</li>\n<li>openldap-clients 启动服务和设置</li>\n<li>openldap-servers 启动服务和设置</li>\n<li>openldap-devel 工具包，可选择安装</li>\n<li>openldap-servers-sql 支持sql模块，可选择安装</li>\n<li>migrationtools 通过migrationtools实现OpenLDAP用户及用户组的添加，导入系统账户，可进行选择性安装</li>\n</ul>\n<p>相关目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/openldap/slapd.d/ # 存放配置文件</span><br></pre></td></tr></table></figure>\n\n<p>服务管理命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service slapd start # 启动openldap服务</span><br><span class=\"line\">slapd -VV # 查看版本</span><br></pre></td></tr></table></figure>\n<h4 id=\"示例说明：添加管理员密码\"><a href=\"#示例说明：添加管理员密码\" class=\"headerlink\" title=\"示例说明：添加管理员密码\"></a>示例说明：添加管理员密码</h4><p>生成管理员密码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">slappasswd -s 123456 # &#123;SSHA&#125;XoEOHoalUAXb7dNiirKs7yFl/1/N/QYF</span><br></pre></td></tr></table></figure>\n\n<p>创建目录并添加修改管理员密码的ldif文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /opt/ldap-workspace</span><br><span class=\"line\">touch changepwd.ldif</span><br><span class=\"line\"></span><br><span class=\"line\"># 文件内容如下：</span><br><span class=\"line\">dn: olcDatabase=&#123;0&#125;config,cn=config</span><br><span class=\"line\">changetype: modify</span><br><span class=\"line\">add: olcRootPW</span><br><span class=\"line\">olcRootPW: &#123;SSHA&#125;XoEOHoalUAXb7dNiirKs7yFl/1/N/QYF</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li>第一行表将要变更配置的文件：&#x2F;etc&#x2F;openldap&#x2F;slapd.d&#x2F;cn&#x3D;config&#x2F;olcDatabase&#x3D;{0}config.ldif</li>\n<li>第二行表修改类型</li>\n<li>第三行表要添加的配置项是olcRootPW</li>\n<li>第四行是加配置项值</li>\n</ul>\n<p>执行changepwd文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ldapadd -Y EXTERNAL -H ldapi:/// -f changepwd.ldif</span><br></pre></td></tr></table></figure>\n\n<p>结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/openldap/slapd.d/cn\\=config/olcDatabase\\=\\&#123;0\\&#125;config.ldif，新增了一个olcRootPW项</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://www.cnblogs.com/swordfall/p/12119010.html\">https://www.cnblogs.com/swordfall/p/12119010.html</a></p>\n<p><a href=\"https://www.cnblogs.com/wilburxu/p/9174353.html\">https://www.cnblogs.com/wilburxu/p/9174353.html</a></p>\n<p><a href=\"https://www.jianshu.com/p/7e4d99f6baaf\">https://www.jianshu.com/p/7e4d99f6baaf</a></p>\n<h4 id=\"部署生产环境可用的openldap\"><a href=\"#部署生产环境可用的openldap\" class=\"headerlink\" title=\"部署生产环境可用的openldap\"></a>部署生产环境可用的openldap</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装启动</span><br><span class=\"line\">yum install -y openldap-clients openldap-servers</span><br><span class=\"line\"></span><br><span class=\"line\">cp /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG</span><br><span class=\"line\"></span><br><span class=\"line\">chown ldap:ldap /var/lib/ldap/DB_CONFIG</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl start slapd</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl enable slapd</span><br><span class=\"line\"></span><br><span class=\"line\"># 导入预设模式</span><br><span class=\"line\">find /etc/openldap/schema/ -name &quot;*.ldif&quot; -exec ldapadd -Y EXTERNAL -H ldapi:/// -D &quot;cn=config&quot; -f &#123;&#125; \\; </span><br><span class=\"line\"></span><br><span class=\"line\"># 设置管理用户root密码：</span><br></pre></td></tr></table></figure>\n<p>slappasswd -s 123456 # 生成加密密码</p>\n<p>chrootpwd.ldif # -H 指定ldap服务器地址；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># 设置域名cn=admin,dc=emog,dc=com对olcDatabase=&#123;1&#125;monitor等文件有存取权限</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p /etc/openldap/init_ldif # init_ldif当作工作区目录</span><br><span class=\"line\">cd /etc/openldap/init_ldif</span><br><span class=\"line\"></span><br><span class=\"line\">ldapmodify -Y EXTERNAL -H ldapi:/// -f chdomain.ldif # chdomain.ldif文件在后面的说明处。</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建emog根域名，并在其下设置admin用户管理整个根组织，再创建两个组织：Group和People。</span><br><span class=\"line\"></span><br><span class=\"line\">ldapadd -x -D cn=admin,dc=emog,dc=com -W -f addOrg.ldif</span><br><span class=\"line\"></span><br><span class=\"line\"># UI连接管理 LdapAdmin: http://www.ldapadmin.org/download/ldapadmin.html</span><br><span class=\"line\">Host: 192.168.1.146  Port: 389  Version: 3</span><br><span class=\"line\">Base: dc=emog,dc=com</span><br><span class=\"line\">Username: cn=admin,dc=emog,dc=com</span><br><span class=\"line\">Password: 123456</span><br><span class=\"line\"></span><br><span class=\"line\"># 新建用户</span><br><span class=\"line\">右击 ou=People 目录新建用户</span><br><span class=\"line\">仅配置sn: chenxiaoming,</span><br><span class=\"line\">cn: chenxiaoming,</span><br><span class=\"line\">homeDirectory为 /</span><br><span class=\"line\"></span><br><span class=\"line\"># 新建Group</span><br><span class=\"line\">右击 ou=Group 目录新建Organizational Unit类型，名为Jenkins，再在Jenkins下新建group类型，名为jenkins-users，这时候有一个属性`member`可配置为`\tcn=lisi,ou=People,dc=emog,dc=com`，代表lisi这个人归属于Jenkins-users这个group下面。</span><br><span class=\"line\"></span><br><span class=\"line\"># 至此，配置完成了。</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><p>chrootpwd.ldif文件内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class=\"line\">changetype: modify</span><br><span class=\"line\">replace: olcRootPW</span><br><span class=\"line\">olcRootPW: &#123;SSHA&#125;mMZx/2fkVQDpjnQELwYlILXVW/ybXnMy</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>chdomain.ldif文件内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dn: olcDatabase=&#123;1&#125;monitor,cn=config</span><br><span class=\"line\">changetype: modify</span><br><span class=\"line\">replace: olcAccess</span><br><span class=\"line\">olcAccess: &#123;0&#125;to * by dn.base=&quot;gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth&quot;  read by dn.base=&quot;cn=admin,dc=emog,dc=com&quot; read by * none</span><br><span class=\"line\"></span><br><span class=\"line\">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class=\"line\">changetype: modify</span><br><span class=\"line\">replace: olcSuffix</span><br><span class=\"line\">olcSuffix: dc=emog,dc=com</span><br><span class=\"line\"></span><br><span class=\"line\">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class=\"line\">changetype: modify</span><br><span class=\"line\">replace: olcRootDN</span><br><span class=\"line\">olcRootDN: cn=admin,dc=emog,dc=com</span><br><span class=\"line\"></span><br><span class=\"line\">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class=\"line\">changetype: modify</span><br><span class=\"line\">add: olcAccess</span><br><span class=\"line\">olcAccess: &#123;0&#125;to attrs=userPassword,shadowLastChange by dn=&quot;cn=admin,dc=emog,dc=com&quot; write by anonymous auth by self write by * none</span><br><span class=\"line\">olcAccess: &#123;1&#125;to dn.base=&quot;&quot; by * read</span><br><span class=\"line\">olcAccess: &#123;2&#125;to * by dn=&quot;cn=admin,dc=emog,dc=com&quot; write by * read</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>add-org.ldif文件内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dn: dc=emog,dc=com</span><br><span class=\"line\">dc: emog</span><br><span class=\"line\">objectClass: top</span><br><span class=\"line\">objectClass: domain</span><br><span class=\"line\">o: emog</span><br><span class=\"line\"></span><br><span class=\"line\">dn: cn=admin,dc=emog,dc=com</span><br><span class=\"line\">objectClass: organizationalRole</span><br><span class=\"line\">cn: admin</span><br><span class=\"line\">description: LDAP admin</span><br><span class=\"line\"></span><br><span class=\"line\">dn: ou=Group,dc=emog,dc=com</span><br><span class=\"line\">ou: Group</span><br><span class=\"line\">objectClass: organizationalUnit</span><br><span class=\"line\"></span><br><span class=\"line\">dn: ou=People,dc=emog,dc=com</span><br><span class=\"line\">ou: People</span><br><span class=\"line\">objectClass: organizationalUnit</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"gitea接入openldap\"><a href=\"#gitea接入openldap\" class=\"headerlink\" title=\"gitea接入openldap\"></a>gitea接入openldap</h4><p>前提：<br>gitea和openldap部署好了。</p>\n<p><a href=\"../Git/gitea.md\">gitea安装</a></p>\n<p>接入步骤</p>\n<ol>\n<li>浏览器登入gitea，点击右侧的个人头像-管理后台-认证源-添加认证源</li>\n<li>认证类型(LDAP (via BindDN))-认证名称(allsd11-openldap)-安全协议(Unencrypted)-主机(192.168.31.87)-端口(389)-用户搜索基准(ou&#x3D;People,dc&#x3D;emog,dc&#x3D;com)-用户过滤规则((&amp;(objectclass&#x3D;top)(cn&#x3D;%s)))-勾选 从Bind DN中拉去属性信息，该认证源已经启用。</li>\n</ol>\n<p>说明：</p>\n<ul>\n<li>因为没有用TLS证书，所以选Unencrypted</li>\n<li>其他选项默认不动即可</li>\n</ul>\n<h4 id=\"jenkins接入openldap\"><a href=\"#jenkins接入openldap\" class=\"headerlink\" title=\"jenkins接入openldap\"></a>jenkins接入openldap</h4><ol>\n<li>登录jenkins-系统管理-全局安全配置-安全域(LDAP)</li>\n<li>开始配置LDAP：Server(192.168.31.87:389)-roo DN(dc&#x3D;emog,dc&#x3D;com)-勾选Allow blank rootDN-User search base(ou&#x3D;People)-User search filter(cn&#x3D;{0})-Group search base(ou&#x3D;Jenkins,ou&#x3D;Group)-点选Search for LDAP groups containing user-Manager DN(cn&#x3D;admin,dc&#x3D;emog,dc&#x3D;com)-Manager Password<br>(123456)-保存</li>\n</ol>\n<p>说明：</p>\n<ul>\n<li><code>root DN</code>的设置是会后面的<code>User search base</code>和<code>Group search base</code>服务的，如<code>User search base</code>设置成ou&#x3D;People，认证的时候就会到<code>ou=People,dc=emog,dc=com</code>下面查找用户。</li>\n<li>其他选项没有提及的就保持不动。</li>\n</ul>\n<ol start=\"3\">\n<li><p>配置完成后，点击<code>保存</code>退出。点击<code>全局安全配置</code>进入，可以点击<code>Testing LDAP settings</code>测试。接着往下，看到<code>授权策略</code>，点击<code>Add user</code>添加用户，User name是你早早就设置在<code>ou=People</code>下面的用户才行，如<code>zhangsan</code> ，最后勾选那些”Read”等权限。最好规划一个administer用户，因为系统认证方式的admin已经不能用了。</p>\n</li>\n<li><p>登录：使用<code>zhangsan</code>用户就可以登录jenkins了。</p>\n</li>\n</ol>\n<p>参考：<a href=\"https://blog.csdn.net/GX_1_11_real/article/details/109511636\">https://blog.csdn.net/GX_1_11_real/article/details/109511636</a></p>\n<h4 id=\"遇到问题\"><a href=\"#遇到问题\" class=\"headerlink\" title=\"遇到问题\"></a>遇到问题</h4><ul>\n<li>1.jenkins认证方式修改成ldap认证后，原来系统认证用户admin使用不了了，怎么办？<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编辑/var/lib/jenkins/config.xml文件</span><br><span class=\"line\"></span><br><span class=\"line\">把：</span><br><span class=\"line\">&lt;securityRealm class=...&gt;</span><br><span class=\"line\">  ....    </span><br><span class=\"line\">&lt;/securityRealm&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">替换成系统用户认证：</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;securityRealm class=&quot;hudson.security.HudsonPrivateSecurityRealm&quot;&gt;</span><br><span class=\"line\">  &lt;disableSignup&gt;false&lt;/disableSignup&gt;</span><br><span class=\"line\">  &lt;enableCaptcha&gt;false&lt;/enableCaptcha&gt;</span><br><span class=\"line\">&lt;/securityRealm&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">最后，重启：systemctl restart jenkins</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"其他参考文章\"><a href=\"#其他参考文章\" class=\"headerlink\" title=\"其他参考文章\"></a>其他参考文章</h5><p><a href=\"https://zhuanlan.zhihu.com/p/32732045\">https://zhuanlan.zhihu.com/p/32732045</a><br><a href=\"https://blog.csdn.net/GX_1_11_real/article/details/108577999\">https://blog.csdn.net/GX_1_11_real/article/details/108577999</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"LDAP简介\"><a href=\"#LDAP简介\" class=\"headerlink\" title=\"LDAP简介\"></a>LDAP简介</h4><p>LDAP(Lightweight Directory Access Protocol)轻量级目录访问协议，用于用户管理的统一认证服务。</p>\n<p>解决的痛点：比如说公司有多个系统有不同套用户密码，但接入开源的openldap之后，就可以共享同一套认证密码。</p>\n<h4 id=\"LDAP原理\"><a href=\"#LDAP原理\" class=\"headerlink\" title=\"LDAP原理\"></a>LDAP原理</h4><p>目录是一个搜索查询、树结构数据库，ldap是一套由目录加协议组成的认证系统。</p>\n<p>目录树组成成分：</p>\n<ul>\n<li><code>dn</code> – Distinguished Name 一条记录的具体位置，如dn:”uid&#x3D;er.xiong,ou&#x3D;OA,dc&#x3D;xiongchumo,dc&#x3D;com”表示熊出没公司OA组的熊二</li>\n<li><code>dc</code> – Domain component 域名部分，一条记录可包含多个dc</li>\n<li><code>ou</code> – Organization Unit 组织单元，一条记录所属组织 </li>\n<li><code>uid</code> – user id 用户id</li>\n<li><code>sn</code> – Surname 姓，如“许”</li>\n<li><code>cn</code> – Common Name，公共名称，一条记录的名称</li>\n<li><code>rdn</code> – 相对辨别名，类似于文件系统中的相对路径，它是与目录树结构无关的部分，如“uid&#x3D;tom”或“cn&#x3D; Thomas Johansson”</li>\n</ul>\n<h4 id=\"openldap安装使用\"><a href=\"#openldap安装使用\" class=\"headerlink\" title=\"openldap安装使用\"></a>openldap安装使用</h4><p>ldap只是一套协议，openldap是基于这套协议的实现。</p>\n<p>安装机器：centos7</p>\n<p>yum安装openldap</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install openldap compat-openldap openldap-clients openldap-servers openldap-devel</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li>openldap 它是openldap客户端和服务端的公共库</li>\n<li>compat-openldap openldap兼容性库</li>\n<li>openldap-clients 启动服务和设置</li>\n<li>openldap-servers 启动服务和设置</li>\n<li>openldap-devel 工具包，可选择安装</li>\n<li>openldap-servers-sql 支持sql模块，可选择安装</li>\n<li>migrationtools 通过migrationtools实现OpenLDAP用户及用户组的添加，导入系统账户，可进行选择性安装</li>\n</ul>\n<p>相关目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/openldap/slapd.d/ # 存放配置文件</span><br></pre></td></tr></table></figure>\n\n<p>服务管理命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">service slapd start # 启动openldap服务</span><br><span class=\"line\">slapd -VV # 查看版本</span><br></pre></td></tr></table></figure>\n<h4 id=\"示例说明：添加管理员密码\"><a href=\"#示例说明：添加管理员密码\" class=\"headerlink\" title=\"示例说明：添加管理员密码\"></a>示例说明：添加管理员密码</h4><p>生成管理员密码</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">slappasswd -s 123456 # &#123;SSHA&#125;XoEOHoalUAXb7dNiirKs7yFl/1/N/QYF</span><br></pre></td></tr></table></figure>\n\n<p>创建目录并添加修改管理员密码的ldif文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /opt/ldap-workspace</span><br><span class=\"line\">touch changepwd.ldif</span><br><span class=\"line\"></span><br><span class=\"line\"># 文件内容如下：</span><br><span class=\"line\">dn: olcDatabase=&#123;0&#125;config,cn=config</span><br><span class=\"line\">changetype: modify</span><br><span class=\"line\">add: olcRootPW</span><br><span class=\"line\">olcRootPW: &#123;SSHA&#125;XoEOHoalUAXb7dNiirKs7yFl/1/N/QYF</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li>第一行表将要变更配置的文件：&#x2F;etc&#x2F;openldap&#x2F;slapd.d&#x2F;cn&#x3D;config&#x2F;olcDatabase&#x3D;{0}config.ldif</li>\n<li>第二行表修改类型</li>\n<li>第三行表要添加的配置项是olcRootPW</li>\n<li>第四行是加配置项值</li>\n</ul>\n<p>执行changepwd文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ldapadd -Y EXTERNAL -H ldapi:/// -f changepwd.ldif</span><br></pre></td></tr></table></figure>\n\n<p>结果</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/openldap/slapd.d/cn\\=config/olcDatabase\\=\\&#123;0\\&#125;config.ldif，新增了一个olcRootPW项</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://www.cnblogs.com/swordfall/p/12119010.html\">https://www.cnblogs.com/swordfall/p/12119010.html</a></p>\n<p><a href=\"https://www.cnblogs.com/wilburxu/p/9174353.html\">https://www.cnblogs.com/wilburxu/p/9174353.html</a></p>\n<p><a href=\"https://www.jianshu.com/p/7e4d99f6baaf\">https://www.jianshu.com/p/7e4d99f6baaf</a></p>\n<h4 id=\"部署生产环境可用的openldap\"><a href=\"#部署生产环境可用的openldap\" class=\"headerlink\" title=\"部署生产环境可用的openldap\"></a>部署生产环境可用的openldap</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装启动</span><br><span class=\"line\">yum install -y openldap-clients openldap-servers</span><br><span class=\"line\"></span><br><span class=\"line\">cp /usr/share/openldap-servers/DB_CONFIG.example /var/lib/ldap/DB_CONFIG</span><br><span class=\"line\"></span><br><span class=\"line\">chown ldap:ldap /var/lib/ldap/DB_CONFIG</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl start slapd</span><br><span class=\"line\"></span><br><span class=\"line\">systemctl enable slapd</span><br><span class=\"line\"></span><br><span class=\"line\"># 导入预设模式</span><br><span class=\"line\">find /etc/openldap/schema/ -name &quot;*.ldif&quot; -exec ldapadd -Y EXTERNAL -H ldapi:/// -D &quot;cn=config&quot; -f &#123;&#125; \\; </span><br><span class=\"line\"></span><br><span class=\"line\"># 设置管理用户root密码：</span><br></pre></td></tr></table></figure>\n<p>slappasswd -s 123456 # 生成加密密码</p>\n<p>chrootpwd.ldif # -H 指定ldap服务器地址；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"># 设置域名cn=admin,dc=emog,dc=com对olcDatabase=&#123;1&#125;monitor等文件有存取权限</span><br><span class=\"line\"></span><br><span class=\"line\">mkdir -p /etc/openldap/init_ldif # init_ldif当作工作区目录</span><br><span class=\"line\">cd /etc/openldap/init_ldif</span><br><span class=\"line\"></span><br><span class=\"line\">ldapmodify -Y EXTERNAL -H ldapi:/// -f chdomain.ldif # chdomain.ldif文件在后面的说明处。</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建emog根域名，并在其下设置admin用户管理整个根组织，再创建两个组织：Group和People。</span><br><span class=\"line\"></span><br><span class=\"line\">ldapadd -x -D cn=admin,dc=emog,dc=com -W -f addOrg.ldif</span><br><span class=\"line\"></span><br><span class=\"line\"># UI连接管理 LdapAdmin: http://www.ldapadmin.org/download/ldapadmin.html</span><br><span class=\"line\">Host: 192.168.1.146  Port: 389  Version: 3</span><br><span class=\"line\">Base: dc=emog,dc=com</span><br><span class=\"line\">Username: cn=admin,dc=emog,dc=com</span><br><span class=\"line\">Password: 123456</span><br><span class=\"line\"></span><br><span class=\"line\"># 新建用户</span><br><span class=\"line\">右击 ou=People 目录新建用户</span><br><span class=\"line\">仅配置sn: chenxiaoming,</span><br><span class=\"line\">cn: chenxiaoming,</span><br><span class=\"line\">homeDirectory为 /</span><br><span class=\"line\"></span><br><span class=\"line\"># 新建Group</span><br><span class=\"line\">右击 ou=Group 目录新建Organizational Unit类型，名为Jenkins，再在Jenkins下新建group类型，名为jenkins-users，这时候有一个属性`member`可配置为`\tcn=lisi,ou=People,dc=emog,dc=com`，代表lisi这个人归属于Jenkins-users这个group下面。</span><br><span class=\"line\"></span><br><span class=\"line\"># 至此，配置完成了。</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><p>chrootpwd.ldif文件内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class=\"line\">changetype: modify</span><br><span class=\"line\">replace: olcRootPW</span><br><span class=\"line\">olcRootPW: &#123;SSHA&#125;mMZx/2fkVQDpjnQELwYlILXVW/ybXnMy</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>chdomain.ldif文件内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dn: olcDatabase=&#123;1&#125;monitor,cn=config</span><br><span class=\"line\">changetype: modify</span><br><span class=\"line\">replace: olcAccess</span><br><span class=\"line\">olcAccess: &#123;0&#125;to * by dn.base=&quot;gidNumber=0+uidNumber=0,cn=peercred,cn=external,cn=auth&quot;  read by dn.base=&quot;cn=admin,dc=emog,dc=com&quot; read by * none</span><br><span class=\"line\"></span><br><span class=\"line\">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class=\"line\">changetype: modify</span><br><span class=\"line\">replace: olcSuffix</span><br><span class=\"line\">olcSuffix: dc=emog,dc=com</span><br><span class=\"line\"></span><br><span class=\"line\">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class=\"line\">changetype: modify</span><br><span class=\"line\">replace: olcRootDN</span><br><span class=\"line\">olcRootDN: cn=admin,dc=emog,dc=com</span><br><span class=\"line\"></span><br><span class=\"line\">dn: olcDatabase=&#123;2&#125;hdb,cn=config</span><br><span class=\"line\">changetype: modify</span><br><span class=\"line\">add: olcAccess</span><br><span class=\"line\">olcAccess: &#123;0&#125;to attrs=userPassword,shadowLastChange by dn=&quot;cn=admin,dc=emog,dc=com&quot; write by anonymous auth by self write by * none</span><br><span class=\"line\">olcAccess: &#123;1&#125;to dn.base=&quot;&quot; by * read</span><br><span class=\"line\">olcAccess: &#123;2&#125;to * by dn=&quot;cn=admin,dc=emog,dc=com&quot; write by * read</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n<li><p>add-org.ldif文件内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dn: dc=emog,dc=com</span><br><span class=\"line\">dc: emog</span><br><span class=\"line\">objectClass: top</span><br><span class=\"line\">objectClass: domain</span><br><span class=\"line\">o: emog</span><br><span class=\"line\"></span><br><span class=\"line\">dn: cn=admin,dc=emog,dc=com</span><br><span class=\"line\">objectClass: organizationalRole</span><br><span class=\"line\">cn: admin</span><br><span class=\"line\">description: LDAP admin</span><br><span class=\"line\"></span><br><span class=\"line\">dn: ou=Group,dc=emog,dc=com</span><br><span class=\"line\">ou: Group</span><br><span class=\"line\">objectClass: organizationalUnit</span><br><span class=\"line\"></span><br><span class=\"line\">dn: ou=People,dc=emog,dc=com</span><br><span class=\"line\">ou: People</span><br><span class=\"line\">objectClass: organizationalUnit</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h4 id=\"gitea接入openldap\"><a href=\"#gitea接入openldap\" class=\"headerlink\" title=\"gitea接入openldap\"></a>gitea接入openldap</h4><p>前提：<br>gitea和openldap部署好了。</p>\n<p><a href=\"../Git/gitea.md\">gitea安装</a></p>\n<p>接入步骤</p>\n<ol>\n<li>浏览器登入gitea，点击右侧的个人头像-管理后台-认证源-添加认证源</li>\n<li>认证类型(LDAP (via BindDN))-认证名称(allsd11-openldap)-安全协议(Unencrypted)-主机(192.168.31.87)-端口(389)-用户搜索基准(ou&#x3D;People,dc&#x3D;emog,dc&#x3D;com)-用户过滤规则((&amp;(objectclass&#x3D;top)(cn&#x3D;%s)))-勾选 从Bind DN中拉去属性信息，该认证源已经启用。</li>\n</ol>\n<p>说明：</p>\n<ul>\n<li>因为没有用TLS证书，所以选Unencrypted</li>\n<li>其他选项默认不动即可</li>\n</ul>\n<h4 id=\"jenkins接入openldap\"><a href=\"#jenkins接入openldap\" class=\"headerlink\" title=\"jenkins接入openldap\"></a>jenkins接入openldap</h4><ol>\n<li>登录jenkins-系统管理-全局安全配置-安全域(LDAP)</li>\n<li>开始配置LDAP：Server(192.168.31.87:389)-roo DN(dc&#x3D;emog,dc&#x3D;com)-勾选Allow blank rootDN-User search base(ou&#x3D;People)-User search filter(cn&#x3D;{0})-Group search base(ou&#x3D;Jenkins,ou&#x3D;Group)-点选Search for LDAP groups containing user-Manager DN(cn&#x3D;admin,dc&#x3D;emog,dc&#x3D;com)-Manager Password<br>(123456)-保存</li>\n</ol>\n<p>说明：</p>\n<ul>\n<li><code>root DN</code>的设置是会后面的<code>User search base</code>和<code>Group search base</code>服务的，如<code>User search base</code>设置成ou&#x3D;People，认证的时候就会到<code>ou=People,dc=emog,dc=com</code>下面查找用户。</li>\n<li>其他选项没有提及的就保持不动。</li>\n</ul>\n<ol start=\"3\">\n<li><p>配置完成后，点击<code>保存</code>退出。点击<code>全局安全配置</code>进入，可以点击<code>Testing LDAP settings</code>测试。接着往下，看到<code>授权策略</code>，点击<code>Add user</code>添加用户，User name是你早早就设置在<code>ou=People</code>下面的用户才行，如<code>zhangsan</code> ，最后勾选那些”Read”等权限。最好规划一个administer用户，因为系统认证方式的admin已经不能用了。</p>\n</li>\n<li><p>登录：使用<code>zhangsan</code>用户就可以登录jenkins了。</p>\n</li>\n</ol>\n<p>参考：<a href=\"https://blog.csdn.net/GX_1_11_real/article/details/109511636\">https://blog.csdn.net/GX_1_11_real/article/details/109511636</a></p>\n<h4 id=\"遇到问题\"><a href=\"#遇到问题\" class=\"headerlink\" title=\"遇到问题\"></a>遇到问题</h4><ul>\n<li>1.jenkins认证方式修改成ldap认证后，原来系统认证用户admin使用不了了，怎么办？<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编辑/var/lib/jenkins/config.xml文件</span><br><span class=\"line\"></span><br><span class=\"line\">把：</span><br><span class=\"line\">&lt;securityRealm class=...&gt;</span><br><span class=\"line\">  ....    </span><br><span class=\"line\">&lt;/securityRealm&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">替换成系统用户认证：</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;securityRealm class=&quot;hudson.security.HudsonPrivateSecurityRealm&quot;&gt;</span><br><span class=\"line\">  &lt;disableSignup&gt;false&lt;/disableSignup&gt;</span><br><span class=\"line\">  &lt;enableCaptcha&gt;false&lt;/enableCaptcha&gt;</span><br><span class=\"line\">&lt;/securityRealm&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">最后，重启：systemctl restart jenkins</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h5 id=\"其他参考文章\"><a href=\"#其他参考文章\" class=\"headerlink\" title=\"其他参考文章\"></a>其他参考文章</h5><p><a href=\"https://zhuanlan.zhihu.com/p/32732045\">https://zhuanlan.zhihu.com/p/32732045</a><br><a href=\"https://blog.csdn.net/GX_1_11_real/article/details/108577999\">https://blog.csdn.net/GX_1_11_real/article/details/108577999</a></p>\n"},{"title":"第16期：grep","date":"2023-05-22T02:12:57.000Z","_content":"例子：grep\n```\ngrep \"ricky\" test.log   # 只取选中的字符所在行\ngrep -v \"ricky\" test.log  # 取不选中的行\ngrep -r \"ricky\" ./*   # 递归查找当前目录及子目录下的ricky\ngrep -e \"rick*\" test.log  # 开启正则匹配模式\ngrep -w 'ricky' txt                          # 精确匹配字符串，-w只会匹配单独存在的ricky，如文本里存在arickya不会被匹配到，但a ricky a 会\n```","source":"_posts/第16期：grep.md","raw":"---\ntitle: 第16期：grep\ndate: 2023-05-22 10:12:57\ntags:\n---\n例子：grep\n```\ngrep \"ricky\" test.log   # 只取选中的字符所在行\ngrep -v \"ricky\" test.log  # 取不选中的行\ngrep -r \"ricky\" ./*   # 递归查找当前目录及子目录下的ricky\ngrep -e \"rick*\" test.log  # 开启正则匹配模式\ngrep -w 'ricky' txt                          # 精确匹配字符串，-w只会匹配单独存在的ricky，如文本里存在arickya不会被匹配到，但a ricky a 会\n```","slug":"第16期：grep","published":1,"updated":"2024-03-06T06:55:18.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvtdr0007bkln022n7e81","content":"<p>例子：grep</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep &quot;ricky&quot; test.log   # 只取选中的字符所在行</span><br><span class=\"line\">grep -v &quot;ricky&quot; test.log  # 取不选中的行</span><br><span class=\"line\">grep -r &quot;ricky&quot; ./*   # 递归查找当前目录及子目录下的ricky</span><br><span class=\"line\">grep -e &quot;rick*&quot; test.log  # 开启正则匹配模式</span><br><span class=\"line\">grep -w &#x27;ricky&#x27; txt                          # 精确匹配字符串，-w只会匹配单独存在的ricky，如文本里存在arickya不会被匹配到，但a ricky a 会</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>例子：grep</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep &quot;ricky&quot; test.log   # 只取选中的字符所在行</span><br><span class=\"line\">grep -v &quot;ricky&quot; test.log  # 取不选中的行</span><br><span class=\"line\">grep -r &quot;ricky&quot; ./*   # 递归查找当前目录及子目录下的ricky</span><br><span class=\"line\">grep -e &quot;rick*&quot; test.log  # 开启正则匹配模式</span><br><span class=\"line\">grep -w &#x27;ricky&#x27; txt                          # 精确匹配字符串，-w只会匹配单独存在的ricky，如文本里存在arickya不会被匹配到，但a ricky a 会</span><br></pre></td></tr></table></figure>"},{"title":"第17期：ssh","date":"2023-05-22T02:14:20.000Z","_content":"#### SSH-远程连接工具\n```\nssh root@192.168.1.2 -p 22\nssh-keygen # 生成`id_rsa.pub`和 `id_rsa.private`\n/etc/ssh/sshd_config # 配置文件入口，可以修改端口等\nsystemctl status sshd # 服务管理","source":"_posts/第17期：ssh.md","raw":"---\ntitle: 第17期：ssh\ndate: 2023-05-22 10:14:20\ntags:\n---\n#### SSH-远程连接工具\n```\nssh root@192.168.1.2 -p 22\nssh-keygen # 生成`id_rsa.pub`和 `id_rsa.private`\n/etc/ssh/sshd_config # 配置文件入口，可以修改端口等\nsystemctl status sshd # 服务管理","slug":"第17期：ssh","published":1,"updated":"2024-03-06T06:55:18.351Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvtdr0008bklnayrw0y49","content":"<h4 id=\"SSH-远程连接工具\"><a href=\"#SSH-远程连接工具\" class=\"headerlink\" title=\"SSH-远程连接工具\"></a>SSH-远程连接工具</h4><pre><code>ssh root@192.168.1.2 -p 22\nssh-keygen # 生成`id_rsa.pub`和 `id_rsa.private`\n/etc/ssh/sshd_config # 配置文件入口，可以修改端口等\nsystemctl status sshd # 服务管理\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"SSH-远程连接工具\"><a href=\"#SSH-远程连接工具\" class=\"headerlink\" title=\"SSH-远程连接工具\"></a>SSH-远程连接工具</h4><pre><code>ssh root@192.168.1.2 -p 22\nssh-keygen # 生成`id_rsa.pub`和 `id_rsa.private`\n/etc/ssh/sshd_config # 配置文件入口，可以修改端口等\nsystemctl status sshd # 服务管理\n</code></pre>\n"},{"title":"第18期：linux性能","date":"2023-05-22T02:15:30.000Z","_content":"##### 一、什么是性能问题？\n```\n突然有一天，公司开发在夜里打电话给你，“现在有很多用户说系统弹出一个错误，系统繁忙”之类的。\n开发同事一看接口返回500，看了后端日志好像没有特别明显的报错信息。\n\n这时，你赶忙上服务器看下nginx日志，好家伙，一看nginx日志发现后发现接口请求过了60s还没有响应。\n`top`看一下服务器资源，用户空间的cpu使用率100%，是哪些进程呢？php-fpm。里面发生了什么？我不知道啊？\n唉，重启服务能解决90%的问题，那就重启看看吧。果然，重启后用户反馈正常了。害，暂时是没有问题了，那下次再来一次怎么办？...无后续\n```\n\n看，cpu100%这类问题就归属性能问题。\n\n##### 研究性能问题需要学习操作系统主要组件原理\nCPU性能、内存、磁盘IO性能、网络\n\n衡量性能的指标：\n并发（吞吐）、响应快（时延）\n\n##### 二、CPU性能篇\n\n##### 什么是平均负载\n看一个例子：`uptime`\n```\n$ uptime\n02:34:03 up 2 days, 20:14,  1 user,  load average: 0.63, 0.83, 0.88\n```\n说明：\n- `02:34:03` 当前时间\n- `up 2 days, 20:14` 系统从开机后运行的时长\n- `1 user` 正在登录的用户数\n- `load average: 0.63, 0.83, 0.88` 最近1分钟、5分钟、15分钟的平均负载(Load average)\n\n`平均负载`是指单位时间内，系统处于可运行(Running或ready)和不可中断(blocked)的进程数。结合最近1分钟、5分钟、15分钟的平均负载，我们可以全面了解cpu的使用情况。像了解一天早中晚的气候变化。\n\nRunning是指正在使用cpu；Ready是指代码(指令)已经加载到了内存，等cpu来执行指令；\n\n不可中断是指进程在使用cpu，突然需要进行磁盘IO(读写)的长时间操作，先不用cpu，等IO操作完毕再回来使用cpu。\n\n一般而言，平均负载超过cpu核数70%就要检查cpu的使用情况，考虑是否优化。\n\n查看cpu核数\n```\ngrep 'model name' /proc/cpuinfo|wc -l\n```\n\n##### 什么是CPU使用率\ncpu使用率衡量了单位时间cpu的繁忙程度。\n\n对于I/O密集型进程，平均负载就高，但cpu却不繁忙，也就是cpu使用率不高。\n\n看一个例子：`top`\n```\n$ top\ntop - 11:15:27 up 40 days, 51 min,  1 user,  load average: 0.32, 0.27, 0.26\nTasks: 356 total,   1 running, 355 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  4.2 us,  5.6 sy,  0.0 ni, 90.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\nMiB Mem :   7777.8 total,    281.6 free,   4394.8 used,   3101.3 buff/cache\nMiB Swap:   2048.0 total,    580.2 free,   1467.8 used.   3015.1 avail Mem \n\n    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                                                                                                 \n3811294 root      20   0   15440   4540   3768 R  20.0   0.1   0:00.03 top                                                                                                                     \n    682 avahi     20   0   10524   5696   3120 S   6.7   0.1 110:29.16 avahi-daemon                                                                                                            \n   7726 root      20   0  750872  21192   5772 S   6.7   0.3 259:56.50 travel-api  \n```\n说明：\n- `%Cpu(s)` 比如说有4个cpu，%Cpu(s)代表这4个的平均使用率。\n\n  cpu = 用户空间使用率(us) + 内核空间使用率(sy) + 空闲(id)\n\n  `ni` 用户空间通过改变进程优先级占用的cpu百分比\n\n  `wa` 等待io操作占用的cpu百分比\n\n  `hi/si` 硬/软中断进行cpu上下文切换占用的百分比\n\n- `RES` 使用的真实物理内存（KB）\n- `%CPU` 一个cpu的使用率，毕竟一个进程只占用一个cpu\n- `TIME+` 累计使用cpu时间\n\n附top使用快捷键说明：\n- `shift + m` # 按照内存使用率排序，shift m 等价于大写M\n- `shift + p` # 按照cpu使用率排序\n- `c` # 显示命令全路径\n- `F` # 挑选你要选择展示的列，按下空格选中，* 代表会展示的列(列会出现在最后)，按q退出。\n    可以展示进程使用哪一个cpu\n- 按`1` # 展示每个cpu的使用情况\n","source":"_posts/第18期：linux性能.md","raw":"---\ntitle: 第18期：linux性能\ndate: 2023-05-22 10:15:30\ntags:\n---\n##### 一、什么是性能问题？\n```\n突然有一天，公司开发在夜里打电话给你，“现在有很多用户说系统弹出一个错误，系统繁忙”之类的。\n开发同事一看接口返回500，看了后端日志好像没有特别明显的报错信息。\n\n这时，你赶忙上服务器看下nginx日志，好家伙，一看nginx日志发现后发现接口请求过了60s还没有响应。\n`top`看一下服务器资源，用户空间的cpu使用率100%，是哪些进程呢？php-fpm。里面发生了什么？我不知道啊？\n唉，重启服务能解决90%的问题，那就重启看看吧。果然，重启后用户反馈正常了。害，暂时是没有问题了，那下次再来一次怎么办？...无后续\n```\n\n看，cpu100%这类问题就归属性能问题。\n\n##### 研究性能问题需要学习操作系统主要组件原理\nCPU性能、内存、磁盘IO性能、网络\n\n衡量性能的指标：\n并发（吞吐）、响应快（时延）\n\n##### 二、CPU性能篇\n\n##### 什么是平均负载\n看一个例子：`uptime`\n```\n$ uptime\n02:34:03 up 2 days, 20:14,  1 user,  load average: 0.63, 0.83, 0.88\n```\n说明：\n- `02:34:03` 当前时间\n- `up 2 days, 20:14` 系统从开机后运行的时长\n- `1 user` 正在登录的用户数\n- `load average: 0.63, 0.83, 0.88` 最近1分钟、5分钟、15分钟的平均负载(Load average)\n\n`平均负载`是指单位时间内，系统处于可运行(Running或ready)和不可中断(blocked)的进程数。结合最近1分钟、5分钟、15分钟的平均负载，我们可以全面了解cpu的使用情况。像了解一天早中晚的气候变化。\n\nRunning是指正在使用cpu；Ready是指代码(指令)已经加载到了内存，等cpu来执行指令；\n\n不可中断是指进程在使用cpu，突然需要进行磁盘IO(读写)的长时间操作，先不用cpu，等IO操作完毕再回来使用cpu。\n\n一般而言，平均负载超过cpu核数70%就要检查cpu的使用情况，考虑是否优化。\n\n查看cpu核数\n```\ngrep 'model name' /proc/cpuinfo|wc -l\n```\n\n##### 什么是CPU使用率\ncpu使用率衡量了单位时间cpu的繁忙程度。\n\n对于I/O密集型进程，平均负载就高，但cpu却不繁忙，也就是cpu使用率不高。\n\n看一个例子：`top`\n```\n$ top\ntop - 11:15:27 up 40 days, 51 min,  1 user,  load average: 0.32, 0.27, 0.26\nTasks: 356 total,   1 running, 355 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  4.2 us,  5.6 sy,  0.0 ni, 90.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\nMiB Mem :   7777.8 total,    281.6 free,   4394.8 used,   3101.3 buff/cache\nMiB Swap:   2048.0 total,    580.2 free,   1467.8 used.   3015.1 avail Mem \n\n    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                                                                                                 \n3811294 root      20   0   15440   4540   3768 R  20.0   0.1   0:00.03 top                                                                                                                     \n    682 avahi     20   0   10524   5696   3120 S   6.7   0.1 110:29.16 avahi-daemon                                                                                                            \n   7726 root      20   0  750872  21192   5772 S   6.7   0.3 259:56.50 travel-api  \n```\n说明：\n- `%Cpu(s)` 比如说有4个cpu，%Cpu(s)代表这4个的平均使用率。\n\n  cpu = 用户空间使用率(us) + 内核空间使用率(sy) + 空闲(id)\n\n  `ni` 用户空间通过改变进程优先级占用的cpu百分比\n\n  `wa` 等待io操作占用的cpu百分比\n\n  `hi/si` 硬/软中断进行cpu上下文切换占用的百分比\n\n- `RES` 使用的真实物理内存（KB）\n- `%CPU` 一个cpu的使用率，毕竟一个进程只占用一个cpu\n- `TIME+` 累计使用cpu时间\n\n附top使用快捷键说明：\n- `shift + m` # 按照内存使用率排序，shift m 等价于大写M\n- `shift + p` # 按照cpu使用率排序\n- `c` # 显示命令全路径\n- `F` # 挑选你要选择展示的列，按下空格选中，* 代表会展示的列(列会出现在最后)，按q退出。\n    可以展示进程使用哪一个cpu\n- 按`1` # 展示每个cpu的使用情况\n","slug":"第18期：linux性能","published":1,"updated":"2024-03-06T06:55:18.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvtdt0009bkln2xv16lzy","content":"<h5 id=\"一、什么是性能问题？\"><a href=\"#一、什么是性能问题？\" class=\"headerlink\" title=\"一、什么是性能问题？\"></a>一、什么是性能问题？</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">突然有一天，公司开发在夜里打电话给你，“现在有很多用户说系统弹出一个错误，系统繁忙”之类的。</span><br><span class=\"line\">开发同事一看接口返回500，看了后端日志好像没有特别明显的报错信息。</span><br><span class=\"line\"></span><br><span class=\"line\">这时，你赶忙上服务器看下nginx日志，好家伙，一看nginx日志发现后发现接口请求过了60s还没有响应。</span><br><span class=\"line\">`top`看一下服务器资源，用户空间的cpu使用率100%，是哪些进程呢？php-fpm。里面发生了什么？我不知道啊？</span><br><span class=\"line\">唉，重启服务能解决90%的问题，那就重启看看吧。果然，重启后用户反馈正常了。害，暂时是没有问题了，那下次再来一次怎么办？...无后续</span><br></pre></td></tr></table></figure>\n\n<p>看，cpu100%这类问题就归属性能问题。</p>\n<h5 id=\"研究性能问题需要学习操作系统主要组件原理\"><a href=\"#研究性能问题需要学习操作系统主要组件原理\" class=\"headerlink\" title=\"研究性能问题需要学习操作系统主要组件原理\"></a>研究性能问题需要学习操作系统主要组件原理</h5><p>CPU性能、内存、磁盘IO性能、网络</p>\n<p>衡量性能的指标：<br>并发（吞吐）、响应快（时延）</p>\n<h5 id=\"二、CPU性能篇\"><a href=\"#二、CPU性能篇\" class=\"headerlink\" title=\"二、CPU性能篇\"></a>二、CPU性能篇</h5><h5 id=\"什么是平均负载\"><a href=\"#什么是平均负载\" class=\"headerlink\" title=\"什么是平均负载\"></a>什么是平均负载</h5><p>看一个例子：<code>uptime</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ uptime</span><br><span class=\"line\">02:34:03 up 2 days, 20:14,  1 user,  load average: 0.63, 0.83, 0.88</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><code>02:34:03</code> 当前时间</li>\n<li><code>up 2 days, 20:14</code> 系统从开机后运行的时长</li>\n<li><code>1 user</code> 正在登录的用户数</li>\n<li><code>load average: 0.63, 0.83, 0.88</code> 最近1分钟、5分钟、15分钟的平均负载(Load average)</li>\n</ul>\n<p><code>平均负载</code>是指单位时间内，系统处于可运行(Running或ready)和不可中断(blocked)的进程数。结合最近1分钟、5分钟、15分钟的平均负载，我们可以全面了解cpu的使用情况。像了解一天早中晚的气候变化。</p>\n<p>Running是指正在使用cpu；Ready是指代码(指令)已经加载到了内存，等cpu来执行指令；</p>\n<p>不可中断是指进程在使用cpu，突然需要进行磁盘IO(读写)的长时间操作，先不用cpu，等IO操作完毕再回来使用cpu。</p>\n<p>一般而言，平均负载超过cpu核数70%就要检查cpu的使用情况，考虑是否优化。</p>\n<p>查看cpu核数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep &#x27;model name&#x27; /proc/cpuinfo|wc -l</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"什么是CPU使用率\"><a href=\"#什么是CPU使用率\" class=\"headerlink\" title=\"什么是CPU使用率\"></a>什么是CPU使用率</h5><p>cpu使用率衡量了单位时间cpu的繁忙程度。</p>\n<p>对于I&#x2F;O密集型进程，平均负载就高，但cpu却不繁忙，也就是cpu使用率不高。</p>\n<p>看一个例子：<code>top</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ top</span><br><span class=\"line\">top - 11:15:27 up 40 days, 51 min,  1 user,  load average: 0.32, 0.27, 0.26</span><br><span class=\"line\">Tasks: 356 total,   1 running, 355 sleeping,   0 stopped,   0 zombie</span><br><span class=\"line\">%Cpu(s):  4.2 us,  5.6 sy,  0.0 ni, 90.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class=\"line\">MiB Mem :   7777.8 total,    281.6 free,   4394.8 used,   3101.3 buff/cache</span><br><span class=\"line\">MiB Swap:   2048.0 total,    580.2 free,   1467.8 used.   3015.1 avail Mem </span><br><span class=\"line\"></span><br><span class=\"line\">    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                                                                                                 </span><br><span class=\"line\">3811294 root      20   0   15440   4540   3768 R  20.0   0.1   0:00.03 top                                                                                                                     </span><br><span class=\"line\">    682 avahi     20   0   10524   5696   3120 S   6.7   0.1 110:29.16 avahi-daemon                                                                                                            </span><br><span class=\"line\">   7726 root      20   0  750872  21192   5772 S   6.7   0.3 259:56.50 travel-api  </span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><p><code>%Cpu(s)</code> 比如说有4个cpu，%Cpu(s)代表这4个的平均使用率。</p>\n<p>cpu &#x3D; 用户空间使用率(us) + 内核空间使用率(sy) + 空闲(id)</p>\n<p><code>ni</code> 用户空间通过改变进程优先级占用的cpu百分比</p>\n<p><code>wa</code> 等待io操作占用的cpu百分比</p>\n<p><code>hi/si</code> 硬&#x2F;软中断进行cpu上下文切换占用的百分比</p>\n</li>\n<li><p><code>RES</code> 使用的真实物理内存（KB）</p>\n</li>\n<li><p><code>%CPU</code> 一个cpu的使用率，毕竟一个进程只占用一个cpu</p>\n</li>\n<li><p><code>TIME+</code> 累计使用cpu时间</p>\n</li>\n</ul>\n<p>附top使用快捷键说明：</p>\n<ul>\n<li><code>shift + m</code> # 按照内存使用率排序，shift m 等价于大写M</li>\n<li><code>shift + p</code> # 按照cpu使用率排序</li>\n<li><code>c</code> # 显示命令全路径</li>\n<li><code>F</code> # 挑选你要选择展示的列，按下空格选中，* 代表会展示的列(列会出现在最后)，按q退出。<br>  可以展示进程使用哪一个cpu</li>\n<li>按<code>1</code> # 展示每个cpu的使用情况</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"一、什么是性能问题？\"><a href=\"#一、什么是性能问题？\" class=\"headerlink\" title=\"一、什么是性能问题？\"></a>一、什么是性能问题？</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">突然有一天，公司开发在夜里打电话给你，“现在有很多用户说系统弹出一个错误，系统繁忙”之类的。</span><br><span class=\"line\">开发同事一看接口返回500，看了后端日志好像没有特别明显的报错信息。</span><br><span class=\"line\"></span><br><span class=\"line\">这时，你赶忙上服务器看下nginx日志，好家伙，一看nginx日志发现后发现接口请求过了60s还没有响应。</span><br><span class=\"line\">`top`看一下服务器资源，用户空间的cpu使用率100%，是哪些进程呢？php-fpm。里面发生了什么？我不知道啊？</span><br><span class=\"line\">唉，重启服务能解决90%的问题，那就重启看看吧。果然，重启后用户反馈正常了。害，暂时是没有问题了，那下次再来一次怎么办？...无后续</span><br></pre></td></tr></table></figure>\n\n<p>看，cpu100%这类问题就归属性能问题。</p>\n<h5 id=\"研究性能问题需要学习操作系统主要组件原理\"><a href=\"#研究性能问题需要学习操作系统主要组件原理\" class=\"headerlink\" title=\"研究性能问题需要学习操作系统主要组件原理\"></a>研究性能问题需要学习操作系统主要组件原理</h5><p>CPU性能、内存、磁盘IO性能、网络</p>\n<p>衡量性能的指标：<br>并发（吞吐）、响应快（时延）</p>\n<h5 id=\"二、CPU性能篇\"><a href=\"#二、CPU性能篇\" class=\"headerlink\" title=\"二、CPU性能篇\"></a>二、CPU性能篇</h5><h5 id=\"什么是平均负载\"><a href=\"#什么是平均负载\" class=\"headerlink\" title=\"什么是平均负载\"></a>什么是平均负载</h5><p>看一个例子：<code>uptime</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ uptime</span><br><span class=\"line\">02:34:03 up 2 days, 20:14,  1 user,  load average: 0.63, 0.83, 0.88</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><code>02:34:03</code> 当前时间</li>\n<li><code>up 2 days, 20:14</code> 系统从开机后运行的时长</li>\n<li><code>1 user</code> 正在登录的用户数</li>\n<li><code>load average: 0.63, 0.83, 0.88</code> 最近1分钟、5分钟、15分钟的平均负载(Load average)</li>\n</ul>\n<p><code>平均负载</code>是指单位时间内，系统处于可运行(Running或ready)和不可中断(blocked)的进程数。结合最近1分钟、5分钟、15分钟的平均负载，我们可以全面了解cpu的使用情况。像了解一天早中晚的气候变化。</p>\n<p>Running是指正在使用cpu；Ready是指代码(指令)已经加载到了内存，等cpu来执行指令；</p>\n<p>不可中断是指进程在使用cpu，突然需要进行磁盘IO(读写)的长时间操作，先不用cpu，等IO操作完毕再回来使用cpu。</p>\n<p>一般而言，平均负载超过cpu核数70%就要检查cpu的使用情况，考虑是否优化。</p>\n<p>查看cpu核数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep &#x27;model name&#x27; /proc/cpuinfo|wc -l</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"什么是CPU使用率\"><a href=\"#什么是CPU使用率\" class=\"headerlink\" title=\"什么是CPU使用率\"></a>什么是CPU使用率</h5><p>cpu使用率衡量了单位时间cpu的繁忙程度。</p>\n<p>对于I&#x2F;O密集型进程，平均负载就高，但cpu却不繁忙，也就是cpu使用率不高。</p>\n<p>看一个例子：<code>top</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ top</span><br><span class=\"line\">top - 11:15:27 up 40 days, 51 min,  1 user,  load average: 0.32, 0.27, 0.26</span><br><span class=\"line\">Tasks: 356 total,   1 running, 355 sleeping,   0 stopped,   0 zombie</span><br><span class=\"line\">%Cpu(s):  4.2 us,  5.6 sy,  0.0 ni, 90.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class=\"line\">MiB Mem :   7777.8 total,    281.6 free,   4394.8 used,   3101.3 buff/cache</span><br><span class=\"line\">MiB Swap:   2048.0 total,    580.2 free,   1467.8 used.   3015.1 avail Mem </span><br><span class=\"line\"></span><br><span class=\"line\">    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                                                                                                 </span><br><span class=\"line\">3811294 root      20   0   15440   4540   3768 R  20.0   0.1   0:00.03 top                                                                                                                     </span><br><span class=\"line\">    682 avahi     20   0   10524   5696   3120 S   6.7   0.1 110:29.16 avahi-daemon                                                                                                            </span><br><span class=\"line\">   7726 root      20   0  750872  21192   5772 S   6.7   0.3 259:56.50 travel-api  </span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><p><code>%Cpu(s)</code> 比如说有4个cpu，%Cpu(s)代表这4个的平均使用率。</p>\n<p>cpu &#x3D; 用户空间使用率(us) + 内核空间使用率(sy) + 空闲(id)</p>\n<p><code>ni</code> 用户空间通过改变进程优先级占用的cpu百分比</p>\n<p><code>wa</code> 等待io操作占用的cpu百分比</p>\n<p><code>hi/si</code> 硬&#x2F;软中断进行cpu上下文切换占用的百分比</p>\n</li>\n<li><p><code>RES</code> 使用的真实物理内存（KB）</p>\n</li>\n<li><p><code>%CPU</code> 一个cpu的使用率，毕竟一个进程只占用一个cpu</p>\n</li>\n<li><p><code>TIME+</code> 累计使用cpu时间</p>\n</li>\n</ul>\n<p>附top使用快捷键说明：</p>\n<ul>\n<li><code>shift + m</code> # 按照内存使用率排序，shift m 等价于大写M</li>\n<li><code>shift + p</code> # 按照cpu使用率排序</li>\n<li><code>c</code> # 显示命令全路径</li>\n<li><code>F</code> # 挑选你要选择展示的列，按下空格选中，* 代表会展示的列(列会出现在最后)，按q退出。<br>  可以展示进程使用哪一个cpu</li>\n<li>按<code>1</code> # 展示每个cpu的使用情况</li>\n</ul>\n"},{"title":"第19期：Mysql","date":"2023-05-22T04:40:52.000Z","_content":"#### 连接数据库\nmysql -h127.0.0.1 -P3306 -uroot -prootpassword\n\n#### 查看数据库\nshow databases;\n\n#### 选择数据库\nuse test;\n\n### 表结构系列操作\n#### 添加字段\nALTER TABLE user\nADD age int(3); \n\n#### 创建索引\nCREATE INDEX idx_name\nON user (name);\n\n### 数据系列操作\n#### 插入\nINSERT INTO user\nVALUES (10, 'root', 'root', 'xxxx@163.com');\n\n#### 更新\nUPDATE user\nSET username='robot', password='robot'\nWHERE username = 'root';\n\n#### 删除\nDELETE FROM user\nWHERE username = 'robot'; // 删除行\n\nTRUNCATE TABLE user; // 清空表\n\n#### 查询\nSELECT * FROM mytable LIMIT 0, 5;\n\n### MySQL 主从复制原理\n```\nmysql主从复制可以实现负载，读写分离，master主要负责写，node负责读。\n\n主从复制类型：\n- 主从同步：master和node都写完才通知用户\n- 主从异步：master一写完就通知用户\n- 主从半同步：master和任一个node写完就通知用户\n\n主从复制原理：\n- master需开启了二进制日志跟踪，node服务器通知master：我现在读到了最新的更新位置，然后封锁继续等待master更新通知。\n\n主从复制具体过程：\n1/ node启动2个线程，一个IO，另一个sql线程；\n2/ IO线程去请求master的binlog日志，且将binlog写到redo log(中继日志)；master特地开了一个log dump进程传输binlog。\n3/ node的sql进程用来读redo log，解析成insert等具体操作执行。\n\n```\n## Mysql主备搭建\n```\nmkdir /soft && mkdir /soft/mysql/\ncd /soft/mysql/\n\nwget https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.20-linux-glibc2.12-x86_64.tar.xz\n\ntar -xvJf mysql-8.0.20-linux-glibc2.12-x86_64.tar.xz\nmv mysql-8.0.20-linux-glibc2.12-x86_64 mysql8.0\n\n# 卸载内核自带maridb\nrpm -qa | grep mariadb\nrpm -e --nodeps mariadb-libs-5.5.56-2.el7.x86_64\n\ncd mysql8.0 && mkdir data\n\n# 配置环境变量\nvi /etc/profile\n\nexport PATH=$PATH:/soft/mysql/mysql8.0/bin:/soft/mysql/mysql8.0/lib\nsource /etc/profile\n\n# 创建用户和用户组\ngroupadd mysql\nuseradd -g mysql mysql\nchown -R mysql.mysql /soft/mysql/mysql8.0\n\n# 初始化mysql并获临时密码\ncd /soft/mysql/mysql8.0/bin\n./mysqld --user=mysql --basedir=/soft/mysql/mysql8.0 --datadir=/soft/mysql/mysql8.0/data/ --initialize\n\n# mysql启动默认读取/etc/my.cnf\n\n[mysqld]\nbasedir=/soft/mysql/mysql8.0\ndatadir=/soft/mysql/mysql8.0/data\n\nport=3306\nsocket=/tmp/mysql.sock\ncharacter-set-server=UTF8MB4\n\n# 编辑启动模板\ncd /soft/mysql/mysql8.0\nvi support-files/mysql.server\n\nbasedir=\ndatadir=\n  \n  替换成：\n\nbasedir=/soft/mysql/mysql8.0\ndatadir=/soft/mysql/mysql8.0/data\n\n# 通过启动脚本启动服务\n[root@localhost]# ./support-files/mysql.server start\nStarting MySQL.Logging to '/soft/mysql/mysql8.0/data/localhost.localdomain.err'.\n.. SUCCESS!\n\n# 查看进程\nps aux | grep mysql\n\n# 临时密码登录并修改密码\nmysql -uroot -p\n\nmysql> show databases;\nERROR 1820 (HY000): You must reset your password using ALTER USER ...\n\nalter user 'root'@'localhost' identified with mysql_native_password by '123456';\n\n# 自制mysql启动服务\n./support-files/mysql.server stop\n\ncp -a ./support-files/mysql.server /etc/init.d/mysql\n\nchmod +x /etc/init.d/mysql\n\n# 通过系统etc目录下的启动文件创建系统服务\n[root@localhost]# chkconfig --add mysql\n\nservice mysql status\n\n# 设置能远程root连接\nmysql> use mysql;\n\n# 直接通过update修改系统用户表\nmysql> update user set host=\"%\" where user=\"root\";\n\n# 刷新一下所有用户的权限信息\nmysql> flush privileges;\n\n\nchange master to master_host='192.168.31.87',\n       master_user='ricky',\n       master_password='123456',\n       master_port=3306,\n       master_log_file='mysql-bin-log.000005',\n       master_log_pos=3339;\n\n# 创建用户，@指明任意客户端可登录\ncreate user 'ricky'@'%' identified with mysql_native_password by '123456';\n```\n### 会话连接\n```\n# 查看客户端连接状态，客户端如果太长时间没动静，连接器就会自动将它断开。这个时间是由参数 wait_timeout 控制的，默认值是 8 小时。\nshow processlist;\n```\n### 授权\n```\nGRANT SELECT, INSERT ON test.user TO 'pig'@'%';\nGRANT ALL ON *.* TO 'pig'@'%';\nGRANT ALL ON maindataplus.* TO 'pig'@'%';\n\n# 让用户可以授权\nGRANT privileges ON databasename.tablename TO 'username'@'host' WITH GRANT OPTION;\n\n# 撤销授权\nREVOKE privilege ON databasename.tablename FROM 'username'@'host';\n```\n\n### 更改用户密码\n```\nSET PASSWORD FOR 'username'@'host' = PASSWORD('newpassword');\n```\n\n### 备份与恢复\n```\nmysqldump 将数据库中的数据备份成一个文本文件，表的结构和表中的数据将存储在生成的文本文件中。\n\n# 备份\nmysqldump -u <username> -p <database> [<table1> <table2> ...] > backup.sql\n\n# 恢复\nmysql -u <username> -p <database> < backup.sql\n```\n\n### 参考\n```\nhttps://juejin.cn/post/6844904021497479176\n```","source":"_posts/第19期：Mysql.md","raw":"---\ntitle: 第19期：Mysql\ndate: 2023-05-22 12:40:52\ntags:\n---\n#### 连接数据库\nmysql -h127.0.0.1 -P3306 -uroot -prootpassword\n\n#### 查看数据库\nshow databases;\n\n#### 选择数据库\nuse test;\n\n### 表结构系列操作\n#### 添加字段\nALTER TABLE user\nADD age int(3); \n\n#### 创建索引\nCREATE INDEX idx_name\nON user (name);\n\n### 数据系列操作\n#### 插入\nINSERT INTO user\nVALUES (10, 'root', 'root', 'xxxx@163.com');\n\n#### 更新\nUPDATE user\nSET username='robot', password='robot'\nWHERE username = 'root';\n\n#### 删除\nDELETE FROM user\nWHERE username = 'robot'; // 删除行\n\nTRUNCATE TABLE user; // 清空表\n\n#### 查询\nSELECT * FROM mytable LIMIT 0, 5;\n\n### MySQL 主从复制原理\n```\nmysql主从复制可以实现负载，读写分离，master主要负责写，node负责读。\n\n主从复制类型：\n- 主从同步：master和node都写完才通知用户\n- 主从异步：master一写完就通知用户\n- 主从半同步：master和任一个node写完就通知用户\n\n主从复制原理：\n- master需开启了二进制日志跟踪，node服务器通知master：我现在读到了最新的更新位置，然后封锁继续等待master更新通知。\n\n主从复制具体过程：\n1/ node启动2个线程，一个IO，另一个sql线程；\n2/ IO线程去请求master的binlog日志，且将binlog写到redo log(中继日志)；master特地开了一个log dump进程传输binlog。\n3/ node的sql进程用来读redo log，解析成insert等具体操作执行。\n\n```\n## Mysql主备搭建\n```\nmkdir /soft && mkdir /soft/mysql/\ncd /soft/mysql/\n\nwget https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.20-linux-glibc2.12-x86_64.tar.xz\n\ntar -xvJf mysql-8.0.20-linux-glibc2.12-x86_64.tar.xz\nmv mysql-8.0.20-linux-glibc2.12-x86_64 mysql8.0\n\n# 卸载内核自带maridb\nrpm -qa | grep mariadb\nrpm -e --nodeps mariadb-libs-5.5.56-2.el7.x86_64\n\ncd mysql8.0 && mkdir data\n\n# 配置环境变量\nvi /etc/profile\n\nexport PATH=$PATH:/soft/mysql/mysql8.0/bin:/soft/mysql/mysql8.0/lib\nsource /etc/profile\n\n# 创建用户和用户组\ngroupadd mysql\nuseradd -g mysql mysql\nchown -R mysql.mysql /soft/mysql/mysql8.0\n\n# 初始化mysql并获临时密码\ncd /soft/mysql/mysql8.0/bin\n./mysqld --user=mysql --basedir=/soft/mysql/mysql8.0 --datadir=/soft/mysql/mysql8.0/data/ --initialize\n\n# mysql启动默认读取/etc/my.cnf\n\n[mysqld]\nbasedir=/soft/mysql/mysql8.0\ndatadir=/soft/mysql/mysql8.0/data\n\nport=3306\nsocket=/tmp/mysql.sock\ncharacter-set-server=UTF8MB4\n\n# 编辑启动模板\ncd /soft/mysql/mysql8.0\nvi support-files/mysql.server\n\nbasedir=\ndatadir=\n  \n  替换成：\n\nbasedir=/soft/mysql/mysql8.0\ndatadir=/soft/mysql/mysql8.0/data\n\n# 通过启动脚本启动服务\n[root@localhost]# ./support-files/mysql.server start\nStarting MySQL.Logging to '/soft/mysql/mysql8.0/data/localhost.localdomain.err'.\n.. SUCCESS!\n\n# 查看进程\nps aux | grep mysql\n\n# 临时密码登录并修改密码\nmysql -uroot -p\n\nmysql> show databases;\nERROR 1820 (HY000): You must reset your password using ALTER USER ...\n\nalter user 'root'@'localhost' identified with mysql_native_password by '123456';\n\n# 自制mysql启动服务\n./support-files/mysql.server stop\n\ncp -a ./support-files/mysql.server /etc/init.d/mysql\n\nchmod +x /etc/init.d/mysql\n\n# 通过系统etc目录下的启动文件创建系统服务\n[root@localhost]# chkconfig --add mysql\n\nservice mysql status\n\n# 设置能远程root连接\nmysql> use mysql;\n\n# 直接通过update修改系统用户表\nmysql> update user set host=\"%\" where user=\"root\";\n\n# 刷新一下所有用户的权限信息\nmysql> flush privileges;\n\n\nchange master to master_host='192.168.31.87',\n       master_user='ricky',\n       master_password='123456',\n       master_port=3306,\n       master_log_file='mysql-bin-log.000005',\n       master_log_pos=3339;\n\n# 创建用户，@指明任意客户端可登录\ncreate user 'ricky'@'%' identified with mysql_native_password by '123456';\n```\n### 会话连接\n```\n# 查看客户端连接状态，客户端如果太长时间没动静，连接器就会自动将它断开。这个时间是由参数 wait_timeout 控制的，默认值是 8 小时。\nshow processlist;\n```\n### 授权\n```\nGRANT SELECT, INSERT ON test.user TO 'pig'@'%';\nGRANT ALL ON *.* TO 'pig'@'%';\nGRANT ALL ON maindataplus.* TO 'pig'@'%';\n\n# 让用户可以授权\nGRANT privileges ON databasename.tablename TO 'username'@'host' WITH GRANT OPTION;\n\n# 撤销授权\nREVOKE privilege ON databasename.tablename FROM 'username'@'host';\n```\n\n### 更改用户密码\n```\nSET PASSWORD FOR 'username'@'host' = PASSWORD('newpassword');\n```\n\n### 备份与恢复\n```\nmysqldump 将数据库中的数据备份成一个文本文件，表的结构和表中的数据将存储在生成的文本文件中。\n\n# 备份\nmysqldump -u <username> -p <database> [<table1> <table2> ...] > backup.sql\n\n# 恢复\nmysql -u <username> -p <database> < backup.sql\n```\n\n### 参考\n```\nhttps://juejin.cn/post/6844904021497479176\n```","slug":"第19期：Mysql","published":1,"updated":"2024-03-06T06:55:18.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvtdu000abklnba0tgpnm","content":"<h4 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h4><p>mysql -h127.0.0.1 -P3306 -uroot -prootpassword</p>\n<h4 id=\"查看数据库\"><a href=\"#查看数据库\" class=\"headerlink\" title=\"查看数据库\"></a>查看数据库</h4><p>show databases;</p>\n<h4 id=\"选择数据库\"><a href=\"#选择数据库\" class=\"headerlink\" title=\"选择数据库\"></a>选择数据库</h4><p>use test;</p>\n<h3 id=\"表结构系列操作\"><a href=\"#表结构系列操作\" class=\"headerlink\" title=\"表结构系列操作\"></a>表结构系列操作</h3><h4 id=\"添加字段\"><a href=\"#添加字段\" class=\"headerlink\" title=\"添加字段\"></a>添加字段</h4><p>ALTER TABLE user<br>ADD age int(3); </p>\n<h4 id=\"创建索引\"><a href=\"#创建索引\" class=\"headerlink\" title=\"创建索引\"></a>创建索引</h4><p>CREATE INDEX idx_name<br>ON user (name);</p>\n<h3 id=\"数据系列操作\"><a href=\"#数据系列操作\" class=\"headerlink\" title=\"数据系列操作\"></a>数据系列操作</h3><h4 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a>插入</h4><p>INSERT INTO user<br>VALUES (10, ‘root’, ‘root’, ‘<a href=\"mailto:&#120;&#x78;&#x78;&#x78;&#x40;&#49;&#x36;&#x33;&#x2e;&#x63;&#x6f;&#x6d;\">&#120;&#x78;&#x78;&#x78;&#x40;&#49;&#x36;&#x33;&#x2e;&#x63;&#x6f;&#x6d;</a>‘);</p>\n<h4 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h4><p>UPDATE user<br>SET username&#x3D;’robot’, password&#x3D;’robot’<br>WHERE username &#x3D; ‘root’;</p>\n<h4 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h4><p>DELETE FROM user<br>WHERE username &#x3D; ‘robot’; &#x2F;&#x2F; 删除行</p>\n<p>TRUNCATE TABLE user; &#x2F;&#x2F; 清空表</p>\n<h4 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h4><p>SELECT * FROM mytable LIMIT 0, 5;</p>\n<h3 id=\"MySQL-主从复制原理\"><a href=\"#MySQL-主从复制原理\" class=\"headerlink\" title=\"MySQL 主从复制原理\"></a>MySQL 主从复制原理</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql主从复制可以实现负载，读写分离，master主要负责写，node负责读。</span><br><span class=\"line\"></span><br><span class=\"line\">主从复制类型：</span><br><span class=\"line\">- 主从同步：master和node都写完才通知用户</span><br><span class=\"line\">- 主从异步：master一写完就通知用户</span><br><span class=\"line\">- 主从半同步：master和任一个node写完就通知用户</span><br><span class=\"line\"></span><br><span class=\"line\">主从复制原理：</span><br><span class=\"line\">- master需开启了二进制日志跟踪，node服务器通知master：我现在读到了最新的更新位置，然后封锁继续等待master更新通知。</span><br><span class=\"line\"></span><br><span class=\"line\">主从复制具体过程：</span><br><span class=\"line\">1/ node启动2个线程，一个IO，另一个sql线程；</span><br><span class=\"line\">2/ IO线程去请求master的binlog日志，且将binlog写到redo log(中继日志)；master特地开了一个log dump进程传输binlog。</span><br><span class=\"line\">3/ node的sql进程用来读redo log，解析成insert等具体操作执行。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"Mysql主备搭建\"><a href=\"#Mysql主备搭建\" class=\"headerlink\" title=\"Mysql主备搭建\"></a>Mysql主备搭建</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /soft &amp;&amp; mkdir /soft/mysql/</span><br><span class=\"line\">cd /soft/mysql/</span><br><span class=\"line\"></span><br><span class=\"line\">wget https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.20-linux-glibc2.12-x86_64.tar.xz</span><br><span class=\"line\"></span><br><span class=\"line\">tar -xvJf mysql-8.0.20-linux-glibc2.12-x86_64.tar.xz</span><br><span class=\"line\">mv mysql-8.0.20-linux-glibc2.12-x86_64 mysql8.0</span><br><span class=\"line\"></span><br><span class=\"line\"># 卸载内核自带maridb</span><br><span class=\"line\">rpm -qa | grep mariadb</span><br><span class=\"line\">rpm -e --nodeps mariadb-libs-5.5.56-2.el7.x86_64</span><br><span class=\"line\"></span><br><span class=\"line\">cd mysql8.0 &amp;&amp; mkdir data</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置环境变量</span><br><span class=\"line\">vi /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">export PATH=$PATH:/soft/mysql/mysql8.0/bin:/soft/mysql/mysql8.0/lib</span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建用户和用户组</span><br><span class=\"line\">groupadd mysql</span><br><span class=\"line\">useradd -g mysql mysql</span><br><span class=\"line\">chown -R mysql.mysql /soft/mysql/mysql8.0</span><br><span class=\"line\"></span><br><span class=\"line\"># 初始化mysql并获临时密码</span><br><span class=\"line\">cd /soft/mysql/mysql8.0/bin</span><br><span class=\"line\">./mysqld --user=mysql --basedir=/soft/mysql/mysql8.0 --datadir=/soft/mysql/mysql8.0/data/ --initialize</span><br><span class=\"line\"></span><br><span class=\"line\"># mysql启动默认读取/etc/my.cnf</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">basedir=/soft/mysql/mysql8.0</span><br><span class=\"line\">datadir=/soft/mysql/mysql8.0/data</span><br><span class=\"line\"></span><br><span class=\"line\">port=3306</span><br><span class=\"line\">socket=/tmp/mysql.sock</span><br><span class=\"line\">character-set-server=UTF8MB4</span><br><span class=\"line\"></span><br><span class=\"line\"># 编辑启动模板</span><br><span class=\"line\">cd /soft/mysql/mysql8.0</span><br><span class=\"line\">vi support-files/mysql.server</span><br><span class=\"line\"></span><br><span class=\"line\">basedir=</span><br><span class=\"line\">datadir=</span><br><span class=\"line\">  </span><br><span class=\"line\">  替换成：</span><br><span class=\"line\"></span><br><span class=\"line\">basedir=/soft/mysql/mysql8.0</span><br><span class=\"line\">datadir=/soft/mysql/mysql8.0/data</span><br><span class=\"line\"></span><br><span class=\"line\"># 通过启动脚本启动服务</span><br><span class=\"line\">[root@localhost]# ./support-files/mysql.server start</span><br><span class=\"line\">Starting MySQL.Logging to &#x27;/soft/mysql/mysql8.0/data/localhost.localdomain.err&#x27;.</span><br><span class=\"line\">.. SUCCESS!</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看进程</span><br><span class=\"line\">ps aux | grep mysql</span><br><span class=\"line\"></span><br><span class=\"line\"># 临时密码登录并修改密码</span><br><span class=\"line\">mysql -uroot -p</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; show databases;</span><br><span class=\"line\">ERROR 1820 (HY000): You must reset your password using ALTER USER ...</span><br><span class=\"line\"></span><br><span class=\"line\">alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified with mysql_native_password by &#x27;123456&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\"># 自制mysql启动服务</span><br><span class=\"line\">./support-files/mysql.server stop</span><br><span class=\"line\"></span><br><span class=\"line\">cp -a ./support-files/mysql.server /etc/init.d/mysql</span><br><span class=\"line\"></span><br><span class=\"line\">chmod +x /etc/init.d/mysql</span><br><span class=\"line\"></span><br><span class=\"line\"># 通过系统etc目录下的启动文件创建系统服务</span><br><span class=\"line\">[root@localhost]# chkconfig --add mysql</span><br><span class=\"line\"></span><br><span class=\"line\">service mysql status</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置能远程root连接</span><br><span class=\"line\">mysql&gt; use mysql;</span><br><span class=\"line\"></span><br><span class=\"line\"># 直接通过update修改系统用户表</span><br><span class=\"line\">mysql&gt; update user set host=&quot;%&quot; where user=&quot;root&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\"># 刷新一下所有用户的权限信息</span><br><span class=\"line\">mysql&gt; flush privileges;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">change master to master_host=&#x27;192.168.31.87&#x27;,</span><br><span class=\"line\">       master_user=&#x27;ricky&#x27;,</span><br><span class=\"line\">       master_password=&#x27;123456&#x27;,</span><br><span class=\"line\">       master_port=3306,</span><br><span class=\"line\">       master_log_file=&#x27;mysql-bin-log.000005&#x27;,</span><br><span class=\"line\">       master_log_pos=3339;</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建用户，@指明任意客户端可登录</span><br><span class=\"line\">create user &#x27;ricky&#x27;@&#x27;%&#x27; identified with mysql_native_password by &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"会话连接\"><a href=\"#会话连接\" class=\"headerlink\" title=\"会话连接\"></a>会话连接</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看客户端连接状态，客户端如果太长时间没动静，连接器就会自动将它断开。这个时间是由参数 wait_timeout 控制的，默认值是 8 小时。</span><br><span class=\"line\">show processlist;</span><br></pre></td></tr></table></figure>\n<h3 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRANT SELECT, INSERT ON test.user TO &#x27;pig&#x27;@&#x27;%&#x27;;</span><br><span class=\"line\">GRANT ALL ON *.* TO &#x27;pig&#x27;@&#x27;%&#x27;;</span><br><span class=\"line\">GRANT ALL ON maindataplus.* TO &#x27;pig&#x27;@&#x27;%&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\"># 让用户可以授权</span><br><span class=\"line\">GRANT privileges ON databasename.tablename TO &#x27;username&#x27;@&#x27;host&#x27; WITH GRANT OPTION;</span><br><span class=\"line\"></span><br><span class=\"line\"># 撤销授权</span><br><span class=\"line\">REVOKE privilege ON databasename.tablename FROM &#x27;username&#x27;@&#x27;host&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"更改用户密码\"><a href=\"#更改用户密码\" class=\"headerlink\" title=\"更改用户密码\"></a>更改用户密码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET PASSWORD FOR &#x27;username&#x27;@&#x27;host&#x27; = PASSWORD(&#x27;newpassword&#x27;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"备份与恢复\"><a href=\"#备份与恢复\" class=\"headerlink\" title=\"备份与恢复\"></a>备份与恢复</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump 将数据库中的数据备份成一个文本文件，表的结构和表中的数据将存储在生成的文本文件中。</span><br><span class=\"line\"></span><br><span class=\"line\"># 备份</span><br><span class=\"line\">mysqldump -u &lt;username&gt; -p &lt;database&gt; [&lt;table1&gt; &lt;table2&gt; ...] &gt; backup.sql</span><br><span class=\"line\"></span><br><span class=\"line\"># 恢复</span><br><span class=\"line\">mysql -u &lt;username&gt; -p &lt;database&gt; &lt; backup.sql</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://juejin.cn/post/6844904021497479176</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h4><p>mysql -h127.0.0.1 -P3306 -uroot -prootpassword</p>\n<h4 id=\"查看数据库\"><a href=\"#查看数据库\" class=\"headerlink\" title=\"查看数据库\"></a>查看数据库</h4><p>show databases;</p>\n<h4 id=\"选择数据库\"><a href=\"#选择数据库\" class=\"headerlink\" title=\"选择数据库\"></a>选择数据库</h4><p>use test;</p>\n<h3 id=\"表结构系列操作\"><a href=\"#表结构系列操作\" class=\"headerlink\" title=\"表结构系列操作\"></a>表结构系列操作</h3><h4 id=\"添加字段\"><a href=\"#添加字段\" class=\"headerlink\" title=\"添加字段\"></a>添加字段</h4><p>ALTER TABLE user<br>ADD age int(3); </p>\n<h4 id=\"创建索引\"><a href=\"#创建索引\" class=\"headerlink\" title=\"创建索引\"></a>创建索引</h4><p>CREATE INDEX idx_name<br>ON user (name);</p>\n<h3 id=\"数据系列操作\"><a href=\"#数据系列操作\" class=\"headerlink\" title=\"数据系列操作\"></a>数据系列操作</h3><h4 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a>插入</h4><p>INSERT INTO user<br>VALUES (10, ‘root’, ‘root’, ‘<a href=\"mailto:&#120;&#x78;&#x78;&#x78;&#x40;&#49;&#x36;&#x33;&#x2e;&#x63;&#x6f;&#x6d;\">&#120;&#x78;&#x78;&#x78;&#x40;&#49;&#x36;&#x33;&#x2e;&#x63;&#x6f;&#x6d;</a>‘);</p>\n<h4 id=\"更新\"><a href=\"#更新\" class=\"headerlink\" title=\"更新\"></a>更新</h4><p>UPDATE user<br>SET username&#x3D;’robot’, password&#x3D;’robot’<br>WHERE username &#x3D; ‘root’;</p>\n<h4 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h4><p>DELETE FROM user<br>WHERE username &#x3D; ‘robot’; &#x2F;&#x2F; 删除行</p>\n<p>TRUNCATE TABLE user; &#x2F;&#x2F; 清空表</p>\n<h4 id=\"查询\"><a href=\"#查询\" class=\"headerlink\" title=\"查询\"></a>查询</h4><p>SELECT * FROM mytable LIMIT 0, 5;</p>\n<h3 id=\"MySQL-主从复制原理\"><a href=\"#MySQL-主从复制原理\" class=\"headerlink\" title=\"MySQL 主从复制原理\"></a>MySQL 主从复制原理</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql主从复制可以实现负载，读写分离，master主要负责写，node负责读。</span><br><span class=\"line\"></span><br><span class=\"line\">主从复制类型：</span><br><span class=\"line\">- 主从同步：master和node都写完才通知用户</span><br><span class=\"line\">- 主从异步：master一写完就通知用户</span><br><span class=\"line\">- 主从半同步：master和任一个node写完就通知用户</span><br><span class=\"line\"></span><br><span class=\"line\">主从复制原理：</span><br><span class=\"line\">- master需开启了二进制日志跟踪，node服务器通知master：我现在读到了最新的更新位置，然后封锁继续等待master更新通知。</span><br><span class=\"line\"></span><br><span class=\"line\">主从复制具体过程：</span><br><span class=\"line\">1/ node启动2个线程，一个IO，另一个sql线程；</span><br><span class=\"line\">2/ IO线程去请求master的binlog日志，且将binlog写到redo log(中继日志)；master特地开了一个log dump进程传输binlog。</span><br><span class=\"line\">3/ node的sql进程用来读redo log，解析成insert等具体操作执行。</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"Mysql主备搭建\"><a href=\"#Mysql主备搭建\" class=\"headerlink\" title=\"Mysql主备搭建\"></a>Mysql主备搭建</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /soft &amp;&amp; mkdir /soft/mysql/</span><br><span class=\"line\">cd /soft/mysql/</span><br><span class=\"line\"></span><br><span class=\"line\">wget https://dev.mysql.com/get/Downloads/MySQL-8.0/mysql-8.0.20-linux-glibc2.12-x86_64.tar.xz</span><br><span class=\"line\"></span><br><span class=\"line\">tar -xvJf mysql-8.0.20-linux-glibc2.12-x86_64.tar.xz</span><br><span class=\"line\">mv mysql-8.0.20-linux-glibc2.12-x86_64 mysql8.0</span><br><span class=\"line\"></span><br><span class=\"line\"># 卸载内核自带maridb</span><br><span class=\"line\">rpm -qa | grep mariadb</span><br><span class=\"line\">rpm -e --nodeps mariadb-libs-5.5.56-2.el7.x86_64</span><br><span class=\"line\"></span><br><span class=\"line\">cd mysql8.0 &amp;&amp; mkdir data</span><br><span class=\"line\"></span><br><span class=\"line\"># 配置环境变量</span><br><span class=\"line\">vi /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">export PATH=$PATH:/soft/mysql/mysql8.0/bin:/soft/mysql/mysql8.0/lib</span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建用户和用户组</span><br><span class=\"line\">groupadd mysql</span><br><span class=\"line\">useradd -g mysql mysql</span><br><span class=\"line\">chown -R mysql.mysql /soft/mysql/mysql8.0</span><br><span class=\"line\"></span><br><span class=\"line\"># 初始化mysql并获临时密码</span><br><span class=\"line\">cd /soft/mysql/mysql8.0/bin</span><br><span class=\"line\">./mysqld --user=mysql --basedir=/soft/mysql/mysql8.0 --datadir=/soft/mysql/mysql8.0/data/ --initialize</span><br><span class=\"line\"></span><br><span class=\"line\"># mysql启动默认读取/etc/my.cnf</span><br><span class=\"line\"></span><br><span class=\"line\">[mysqld]</span><br><span class=\"line\">basedir=/soft/mysql/mysql8.0</span><br><span class=\"line\">datadir=/soft/mysql/mysql8.0/data</span><br><span class=\"line\"></span><br><span class=\"line\">port=3306</span><br><span class=\"line\">socket=/tmp/mysql.sock</span><br><span class=\"line\">character-set-server=UTF8MB4</span><br><span class=\"line\"></span><br><span class=\"line\"># 编辑启动模板</span><br><span class=\"line\">cd /soft/mysql/mysql8.0</span><br><span class=\"line\">vi support-files/mysql.server</span><br><span class=\"line\"></span><br><span class=\"line\">basedir=</span><br><span class=\"line\">datadir=</span><br><span class=\"line\">  </span><br><span class=\"line\">  替换成：</span><br><span class=\"line\"></span><br><span class=\"line\">basedir=/soft/mysql/mysql8.0</span><br><span class=\"line\">datadir=/soft/mysql/mysql8.0/data</span><br><span class=\"line\"></span><br><span class=\"line\"># 通过启动脚本启动服务</span><br><span class=\"line\">[root@localhost]# ./support-files/mysql.server start</span><br><span class=\"line\">Starting MySQL.Logging to &#x27;/soft/mysql/mysql8.0/data/localhost.localdomain.err&#x27;.</span><br><span class=\"line\">.. SUCCESS!</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看进程</span><br><span class=\"line\">ps aux | grep mysql</span><br><span class=\"line\"></span><br><span class=\"line\"># 临时密码登录并修改密码</span><br><span class=\"line\">mysql -uroot -p</span><br><span class=\"line\"></span><br><span class=\"line\">mysql&gt; show databases;</span><br><span class=\"line\">ERROR 1820 (HY000): You must reset your password using ALTER USER ...</span><br><span class=\"line\"></span><br><span class=\"line\">alter user &#x27;root&#x27;@&#x27;localhost&#x27; identified with mysql_native_password by &#x27;123456&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\"># 自制mysql启动服务</span><br><span class=\"line\">./support-files/mysql.server stop</span><br><span class=\"line\"></span><br><span class=\"line\">cp -a ./support-files/mysql.server /etc/init.d/mysql</span><br><span class=\"line\"></span><br><span class=\"line\">chmod +x /etc/init.d/mysql</span><br><span class=\"line\"></span><br><span class=\"line\"># 通过系统etc目录下的启动文件创建系统服务</span><br><span class=\"line\">[root@localhost]# chkconfig --add mysql</span><br><span class=\"line\"></span><br><span class=\"line\">service mysql status</span><br><span class=\"line\"></span><br><span class=\"line\"># 设置能远程root连接</span><br><span class=\"line\">mysql&gt; use mysql;</span><br><span class=\"line\"></span><br><span class=\"line\"># 直接通过update修改系统用户表</span><br><span class=\"line\">mysql&gt; update user set host=&quot;%&quot; where user=&quot;root&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\"># 刷新一下所有用户的权限信息</span><br><span class=\"line\">mysql&gt; flush privileges;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">change master to master_host=&#x27;192.168.31.87&#x27;,</span><br><span class=\"line\">       master_user=&#x27;ricky&#x27;,</span><br><span class=\"line\">       master_password=&#x27;123456&#x27;,</span><br><span class=\"line\">       master_port=3306,</span><br><span class=\"line\">       master_log_file=&#x27;mysql-bin-log.000005&#x27;,</span><br><span class=\"line\">       master_log_pos=3339;</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建用户，@指明任意客户端可登录</span><br><span class=\"line\">create user &#x27;ricky&#x27;@&#x27;%&#x27; identified with mysql_native_password by &#x27;123456&#x27;;</span><br></pre></td></tr></table></figure>\n<h3 id=\"会话连接\"><a href=\"#会话连接\" class=\"headerlink\" title=\"会话连接\"></a>会话连接</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看客户端连接状态，客户端如果太长时间没动静，连接器就会自动将它断开。这个时间是由参数 wait_timeout 控制的，默认值是 8 小时。</span><br><span class=\"line\">show processlist;</span><br></pre></td></tr></table></figure>\n<h3 id=\"授权\"><a href=\"#授权\" class=\"headerlink\" title=\"授权\"></a>授权</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRANT SELECT, INSERT ON test.user TO &#x27;pig&#x27;@&#x27;%&#x27;;</span><br><span class=\"line\">GRANT ALL ON *.* TO &#x27;pig&#x27;@&#x27;%&#x27;;</span><br><span class=\"line\">GRANT ALL ON maindataplus.* TO &#x27;pig&#x27;@&#x27;%&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\"># 让用户可以授权</span><br><span class=\"line\">GRANT privileges ON databasename.tablename TO &#x27;username&#x27;@&#x27;host&#x27; WITH GRANT OPTION;</span><br><span class=\"line\"></span><br><span class=\"line\"># 撤销授权</span><br><span class=\"line\">REVOKE privilege ON databasename.tablename FROM &#x27;username&#x27;@&#x27;host&#x27;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"更改用户密码\"><a href=\"#更改用户密码\" class=\"headerlink\" title=\"更改用户密码\"></a>更改用户密码</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">SET PASSWORD FOR &#x27;username&#x27;@&#x27;host&#x27; = PASSWORD(&#x27;newpassword&#x27;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"备份与恢复\"><a href=\"#备份与恢复\" class=\"headerlink\" title=\"备份与恢复\"></a>备份与恢复</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysqldump 将数据库中的数据备份成一个文本文件，表的结构和表中的数据将存储在生成的文本文件中。</span><br><span class=\"line\"></span><br><span class=\"line\"># 备份</span><br><span class=\"line\">mysqldump -u &lt;username&gt; -p &lt;database&gt; [&lt;table1&gt; &lt;table2&gt; ...] &gt; backup.sql</span><br><span class=\"line\"></span><br><span class=\"line\"># 恢复</span><br><span class=\"line\">mysql -u &lt;username&gt; -p &lt;database&gt; &lt; backup.sql</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://juejin.cn/post/6844904021497479176</span><br></pre></td></tr></table></figure>"},{"title":"第1期：使用hexo搭建个人博客页面","date":"2023-05-18T02:52:04.000Z","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n```\n$ npm install hexo-cli -g\n$ hexo init blog\n$ cd blog\n```\n### 创建页面\n\n``` bash\n$ hexo new \"第1期：使用hexo搭建个人博客页面\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### 运行监听服务\n\n修改页面不需要重启服务，但如果是修改站点配置_config.yaml就需要重启\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### 生成public目录用于部署\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n参考来源\n- [hexojs](https://github.com/hexojs/hexo)\n\n","source":"_posts/第1期：使用hexo搭建个人博客页面.md","raw":"---\ntitle: 第1期：使用hexo搭建个人博客页面\ndate: 2023-05-18 10:52:04\ntags:\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n```\n$ npm install hexo-cli -g\n$ hexo init blog\n$ cd blog\n```\n### 创建页面\n\n``` bash\n$ hexo new \"第1期：使用hexo搭建个人博客页面\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### 运行监听服务\n\n修改页面不需要重启服务，但如果是修改站点配置_config.yaml就需要重启\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### 生成public目录用于部署\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n参考来源\n- [hexojs](https://github.com/hexojs/hexo)\n\n","slug":"第1期：使用hexo搭建个人博客页面","published":1,"updated":"2024-03-06T07:19:28.441Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvtdv000bbklndxr8epyr","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br><span class=\"line\">$ hexo init blog</span><br><span class=\"line\">$ cd blog</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建页面\"><a href=\"#创建页面\" class=\"headerlink\" title=\"创建页面\"></a>创建页面</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;第1期：使用hexo搭建个人博客页面&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"运行监听服务\"><a href=\"#运行监听服务\" class=\"headerlink\" title=\"运行监听服务\"></a>运行监听服务</h3><p>修改页面不需要重启服务，但如果是修改站点配置_config.yaml就需要重启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"生成public目录用于部署\"><a href=\"#生成public目录用于部署\" class=\"headerlink\" title=\"生成public目录用于部署\"></a>生成public目录用于部署</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<p>参考来源</p>\n<ul>\n<li><a href=\"https://github.com/hexojs/hexo\">hexojs</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ npm install hexo-cli -g</span><br><span class=\"line\">$ hexo init blog</span><br><span class=\"line\">$ cd blog</span><br></pre></td></tr></table></figure>\n<h3 id=\"创建页面\"><a href=\"#创建页面\" class=\"headerlink\" title=\"创建页面\"></a>创建页面</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;第1期：使用hexo搭建个人博客页面&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"运行监听服务\"><a href=\"#运行监听服务\" class=\"headerlink\" title=\"运行监听服务\"></a>运行监听服务</h3><p>修改页面不需要重启服务，但如果是修改站点配置_config.yaml就需要重启</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"生成public目录用于部署\"><a href=\"#生成public目录用于部署\" class=\"headerlink\" title=\"生成public目录用于部署\"></a>生成public目录用于部署</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<p>参考来源</p>\n<ul>\n<li><a href=\"https://github.com/hexojs/hexo\">hexojs</a></li>\n</ul>\n"},{"title":"第20期：Jenkins","date":"2023-05-22T06:38:13.000Z","_content":"#### Jenkins简介\n开源的基于Java的提供可持续化集成服务的平台\n\n#### install jenkins on centos7\njava11安装\n```\nyum install java-11-openjdk-devel\n```\n说明：使用jdk8可能启动不了jenkins\n\n添加安装Jenkins的yum源\n```\ncurl --silent --location http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo | sudo tee /etc/yum.repos.d/jenkins.repo\n```\n\n导入仓库密钥\n```\nrpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key\n```\n\n安装jenkins最新稳定版\n```\nyum install jenkins\n```\n\n服务管理\n```\nsystemctl start jenkins\n```\n说明：\n- 越新版本的jenkins可能需要的jdk版本越高，jdk11适配jdk8却不一定\n\n开放8080端口\n```\nfirewall-cmd --permanent --zone=public --add-port=8080/tcp\nfirewall-cmd --reload\n```\n\n设置Jenkins\n```\nhttp://your_ip_or_domain:8080\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword # 获取临时密码\n```\n\n选择`Install suggested plugins box`后继续，创建admin用户。\n\njenkins工作目录：\n```\n/var/lib/jenkins/\n/var/lib/jenkins/config.xml # 配置文件\n```\n#### jenkins重置密码\n```\n编辑/var/lib/jenkins/users/admin_491010919283058211/config.xml  # admin_491010919283058211需要根据你的实际文件名调整\n\n# 替换<passwordHash>成下列内容：\n<passwordHash>#jbcrypt:$2a$10$ltzg1Kwtef0ymmNAqR8JR.961lHdnrsoFsE.huZ.G4r1AiIaENRC6</passwordHash>\n```\n说明：\n- `#jbcrypt:$2a$10$ltzg1Kwtef0ymmNAqR8JR.961lHdnrsoFsE.huZ.G4r1AiIaENRC6`是hash加密`123456`后的值。\n#### 部署java项目实践\n配置JDK\n```\nManage Jenkins - Global Tool Configuration - JDK（不选择自动安装）- 配置name和JAVA_HOME为`/usr/local/java/jdk1.8.0_351` - 保存\n```\n说明：\n- 若选择自动安装需要设置oracle账号密码\n- 手动安装jdk8步骤\n  mkdir /usr/local/java\n  tar -xzvf jdk-8u351-linux-x64.tar.gz (jdk-8u351-linux-x64.tar.gz包自行到java官网下载)，解压后生成目录`jdk1.8.0_351`\n\n  \n配置MAVEN\n```\nAdd Maven - 命名 - Install Automatically - 选择版本3.8.6 - 保存\n```\n\n安装插件 Maven Integration，具体步骤：\n```\nManage Jenkins - Manage Plugins - 可选插件 - 搜索maven - 安装Maven Integration\n```\n\n安装完后，创建一个项目：\n```\nnew Item - 命名emog-test - 选择构建一个maven项目 - 保存\n```\n\n进入project：emog-test\n```\n点击配置 - 设置git：git@192.168.31.87:alias/emog.git\n```\n\nPre Steps\n选择`执行shell`\n```\nmvn clean install\n\nnum=`ls target/emog*.jar | wc -l`\n\n[[ $num -ne 1 ]] && { echo \"num is not equal 1\"; exit 1; }\necho \"continue\"\njar_path=`ls target/emog*.jar`\njar=`basename \"$jar_path\"`\n\n\n\\cp -fp target/$jar /opt/emog/jar\n\\cp -fp /opt/emog/jar/$jar /opt/emog/emog.jar\n\ncd /opt/emog && sh restart.sh\n```\n说明：restart.sh内容\n```\nworkspace=/opt/emog\ncd $workspace\npid=`ps aux|grep \"java -jar emog.jar\"|grep -v grep|awk '{print $2}'`\n\nif [[ $pid ]];then\n  kill $pid && nohup java -jar emog.jar &\nelse\n  nohup java -jar emog.jar &\nfi\n```\n说明：`su jenkins`非登录用户没有bash环境，可以使用`su -s /bin/bash jenkins`以jenkin身份进入。\n\n### 设置邮件模板\n```\n <hr/>\n      Project：$PROJECT_NAME<br/><hr/>\n\n      No.：#$BUILD_NUMBER<br/><hr/>\n\n      GIT：${GIT_REVISION}<br/><hr/>\n\n      Status：$BUILD_STATUS<br/><hr/>\n\n      User：${CAUSE}<br/><hr/>\n\n      Console：<a href=\"$BUILD_URL\">$BUILD_URL</a><br/><hr/>\n \n      Console Logs：<a href=\"${BUILD_URL}console\">${BUILD_URL}console</a><br/><hr/>\n\n      ${JELLY_SCRIPT,template=\"html\"}<br/><hr/>\n```\n\n","source":"_posts/第20期：Jenkins.md","raw":"---\ntitle: 第20期：Jenkins\ndate: 2023-05-22 14:38:13\ntags:\n---\n#### Jenkins简介\n开源的基于Java的提供可持续化集成服务的平台\n\n#### install jenkins on centos7\njava11安装\n```\nyum install java-11-openjdk-devel\n```\n说明：使用jdk8可能启动不了jenkins\n\n添加安装Jenkins的yum源\n```\ncurl --silent --location http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo | sudo tee /etc/yum.repos.d/jenkins.repo\n```\n\n导入仓库密钥\n```\nrpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key\n```\n\n安装jenkins最新稳定版\n```\nyum install jenkins\n```\n\n服务管理\n```\nsystemctl start jenkins\n```\n说明：\n- 越新版本的jenkins可能需要的jdk版本越高，jdk11适配jdk8却不一定\n\n开放8080端口\n```\nfirewall-cmd --permanent --zone=public --add-port=8080/tcp\nfirewall-cmd --reload\n```\n\n设置Jenkins\n```\nhttp://your_ip_or_domain:8080\nsudo cat /var/lib/jenkins/secrets/initialAdminPassword # 获取临时密码\n```\n\n选择`Install suggested plugins box`后继续，创建admin用户。\n\njenkins工作目录：\n```\n/var/lib/jenkins/\n/var/lib/jenkins/config.xml # 配置文件\n```\n#### jenkins重置密码\n```\n编辑/var/lib/jenkins/users/admin_491010919283058211/config.xml  # admin_491010919283058211需要根据你的实际文件名调整\n\n# 替换<passwordHash>成下列内容：\n<passwordHash>#jbcrypt:$2a$10$ltzg1Kwtef0ymmNAqR8JR.961lHdnrsoFsE.huZ.G4r1AiIaENRC6</passwordHash>\n```\n说明：\n- `#jbcrypt:$2a$10$ltzg1Kwtef0ymmNAqR8JR.961lHdnrsoFsE.huZ.G4r1AiIaENRC6`是hash加密`123456`后的值。\n#### 部署java项目实践\n配置JDK\n```\nManage Jenkins - Global Tool Configuration - JDK（不选择自动安装）- 配置name和JAVA_HOME为`/usr/local/java/jdk1.8.0_351` - 保存\n```\n说明：\n- 若选择自动安装需要设置oracle账号密码\n- 手动安装jdk8步骤\n  mkdir /usr/local/java\n  tar -xzvf jdk-8u351-linux-x64.tar.gz (jdk-8u351-linux-x64.tar.gz包自行到java官网下载)，解压后生成目录`jdk1.8.0_351`\n\n  \n配置MAVEN\n```\nAdd Maven - 命名 - Install Automatically - 选择版本3.8.6 - 保存\n```\n\n安装插件 Maven Integration，具体步骤：\n```\nManage Jenkins - Manage Plugins - 可选插件 - 搜索maven - 安装Maven Integration\n```\n\n安装完后，创建一个项目：\n```\nnew Item - 命名emog-test - 选择构建一个maven项目 - 保存\n```\n\n进入project：emog-test\n```\n点击配置 - 设置git：git@192.168.31.87:alias/emog.git\n```\n\nPre Steps\n选择`执行shell`\n```\nmvn clean install\n\nnum=`ls target/emog*.jar | wc -l`\n\n[[ $num -ne 1 ]] && { echo \"num is not equal 1\"; exit 1; }\necho \"continue\"\njar_path=`ls target/emog*.jar`\njar=`basename \"$jar_path\"`\n\n\n\\cp -fp target/$jar /opt/emog/jar\n\\cp -fp /opt/emog/jar/$jar /opt/emog/emog.jar\n\ncd /opt/emog && sh restart.sh\n```\n说明：restart.sh内容\n```\nworkspace=/opt/emog\ncd $workspace\npid=`ps aux|grep \"java -jar emog.jar\"|grep -v grep|awk '{print $2}'`\n\nif [[ $pid ]];then\n  kill $pid && nohup java -jar emog.jar &\nelse\n  nohup java -jar emog.jar &\nfi\n```\n说明：`su jenkins`非登录用户没有bash环境，可以使用`su -s /bin/bash jenkins`以jenkin身份进入。\n\n### 设置邮件模板\n```\n <hr/>\n      Project：$PROJECT_NAME<br/><hr/>\n\n      No.：#$BUILD_NUMBER<br/><hr/>\n\n      GIT：${GIT_REVISION}<br/><hr/>\n\n      Status：$BUILD_STATUS<br/><hr/>\n\n      User：${CAUSE}<br/><hr/>\n\n      Console：<a href=\"$BUILD_URL\">$BUILD_URL</a><br/><hr/>\n \n      Console Logs：<a href=\"${BUILD_URL}console\">${BUILD_URL}console</a><br/><hr/>\n\n      ${JELLY_SCRIPT,template=\"html\"}<br/><hr/>\n```\n\n","slug":"第20期：Jenkins","published":1,"updated":"2024-03-06T06:55:18.353Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvtdx000cbklngb456t2r","content":"<h4 id=\"Jenkins简介\"><a href=\"#Jenkins简介\" class=\"headerlink\" title=\"Jenkins简介\"></a>Jenkins简介</h4><p>开源的基于Java的提供可持续化集成服务的平台</p>\n<h4 id=\"install-jenkins-on-centos7\"><a href=\"#install-jenkins-on-centos7\" class=\"headerlink\" title=\"install jenkins on centos7\"></a>install jenkins on centos7</h4><p>java11安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install java-11-openjdk-devel</span><br></pre></td></tr></table></figure>\n<p>说明：使用jdk8可能启动不了jenkins</p>\n<p>添加安装Jenkins的yum源</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --silent --location http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo | sudo tee /etc/yum.repos.d/jenkins.repo</span><br></pre></td></tr></table></figure>\n\n<p>导入仓库密钥</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key</span><br></pre></td></tr></table></figure>\n\n<p>安装jenkins最新稳定版</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install jenkins</span><br></pre></td></tr></table></figure>\n\n<p>服务管理</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start jenkins</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li>越新版本的jenkins可能需要的jdk版本越高，jdk11适配jdk8却不一定</li>\n</ul>\n<p>开放8080端口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --permanent --zone=public --add-port=8080/tcp</span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n\n<p>设置Jenkins</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://your_ip_or_domain:8080</span><br><span class=\"line\">sudo cat /var/lib/jenkins/secrets/initialAdminPassword # 获取临时密码</span><br></pre></td></tr></table></figure>\n\n<p>选择<code>Install suggested plugins box</code>后继续，创建admin用户。</p>\n<p>jenkins工作目录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/var/lib/jenkins/</span><br><span class=\"line\">/var/lib/jenkins/config.xml # 配置文件</span><br></pre></td></tr></table></figure>\n<h4 id=\"jenkins重置密码\"><a href=\"#jenkins重置密码\" class=\"headerlink\" title=\"jenkins重置密码\"></a>jenkins重置密码</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编辑/var/lib/jenkins/users/admin_491010919283058211/config.xml  # admin_491010919283058211需要根据你的实际文件名调整</span><br><span class=\"line\"></span><br><span class=\"line\"># 替换&lt;passwordHash&gt;成下列内容：</span><br><span class=\"line\">&lt;passwordHash&gt;#jbcrypt:$2a$10$ltzg1Kwtef0ymmNAqR8JR.961lHdnrsoFsE.huZ.G4r1AiIaENRC6&lt;/passwordHash&gt;</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><code>#jbcrypt:$2a$10$ltzg1Kwtef0ymmNAqR8JR.961lHdnrsoFsE.huZ.G4r1AiIaENRC6</code>是hash加密<code>123456</code>后的值。</li>\n</ul>\n<h4 id=\"部署java项目实践\"><a href=\"#部署java项目实践\" class=\"headerlink\" title=\"部署java项目实践\"></a>部署java项目实践</h4><p>配置JDK</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manage Jenkins - Global Tool Configuration - JDK（不选择自动安装）- 配置name和JAVA_HOME为`/usr/local/java/jdk1.8.0_351` - 保存</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li>若选择自动安装需要设置oracle账号密码</li>\n<li>手动安装jdk8步骤<br>mkdir &#x2F;usr&#x2F;local&#x2F;java<br>tar -xzvf jdk-8u351-linux-x64.tar.gz (jdk-8u351-linux-x64.tar.gz包自行到java官网下载)，解压后生成目录<code>jdk1.8.0_351</code></li>\n</ul>\n<p>配置MAVEN</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Add Maven - 命名 - Install Automatically - 选择版本3.8.6 - 保存</span><br></pre></td></tr></table></figure>\n\n<p>安装插件 Maven Integration，具体步骤：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manage Jenkins - Manage Plugins - 可选插件 - 搜索maven - 安装Maven Integration</span><br></pre></td></tr></table></figure>\n\n<p>安装完后，创建一个项目：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Item - 命名emog-test - 选择构建一个maven项目 - 保存</span><br></pre></td></tr></table></figure>\n\n<p>进入project：emog-test</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">点击配置 - 设置git：git@192.168.31.87:alias/emog.git</span><br></pre></td></tr></table></figure>\n\n<p>Pre Steps<br>选择<code>执行shell</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean install</span><br><span class=\"line\"></span><br><span class=\"line\">num=`ls target/emog*.jar | wc -l`</span><br><span class=\"line\"></span><br><span class=\"line\">[[ $num -ne 1 ]] &amp;&amp; &#123; echo &quot;num is not equal 1&quot;; exit 1; &#125;</span><br><span class=\"line\">echo &quot;continue&quot;</span><br><span class=\"line\">jar_path=`ls target/emog*.jar`</span><br><span class=\"line\">jar=`basename &quot;$jar_path&quot;`</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\\cp -fp target/$jar /opt/emog/jar</span><br><span class=\"line\">\\cp -fp /opt/emog/jar/$jar /opt/emog/emog.jar</span><br><span class=\"line\"></span><br><span class=\"line\">cd /opt/emog &amp;&amp; sh restart.sh</span><br></pre></td></tr></table></figure>\n<p>说明：restart.sh内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">workspace=/opt/emog</span><br><span class=\"line\">cd $workspace</span><br><span class=\"line\">pid=`ps aux|grep &quot;java -jar emog.jar&quot;|grep -v grep|awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ $pid ]];then</span><br><span class=\"line\">  kill $pid &amp;&amp; nohup java -jar emog.jar &amp;</span><br><span class=\"line\">else</span><br><span class=\"line\">  nohup java -jar emog.jar &amp;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<p>说明：<code>su jenkins</code>非登录用户没有bash环境，可以使用<code>su -s /bin/bash jenkins</code>以jenkin身份进入。</p>\n<h3 id=\"设置邮件模板\"><a href=\"#设置邮件模板\" class=\"headerlink\" title=\"设置邮件模板\"></a>设置邮件模板</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;hr/&gt;</span><br><span class=\"line\">     Project：$PROJECT_NAME&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     No.：#$BUILD_NUMBER&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     GIT：$&#123;GIT_REVISION&#125;&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     Status：$BUILD_STATUS&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     User：$&#123;CAUSE&#125;&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     Console：&lt;a href=&quot;$BUILD_URL&quot;&gt;$BUILD_URL&lt;/a&gt;&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     Console Logs：&lt;a href=&quot;$&#123;BUILD_URL&#125;console&quot;&gt;$&#123;BUILD_URL&#125;console&lt;/a&gt;&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     $&#123;JELLY_SCRIPT,template=&quot;html&quot;&#125;&lt;br/&gt;&lt;hr/&gt;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Jenkins简介\"><a href=\"#Jenkins简介\" class=\"headerlink\" title=\"Jenkins简介\"></a>Jenkins简介</h4><p>开源的基于Java的提供可持续化集成服务的平台</p>\n<h4 id=\"install-jenkins-on-centos7\"><a href=\"#install-jenkins-on-centos7\" class=\"headerlink\" title=\"install jenkins on centos7\"></a>install jenkins on centos7</h4><p>java11安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install java-11-openjdk-devel</span><br></pre></td></tr></table></figure>\n<p>说明：使用jdk8可能启动不了jenkins</p>\n<p>添加安装Jenkins的yum源</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl --silent --location http://pkg.jenkins-ci.org/redhat-stable/jenkins.repo | sudo tee /etc/yum.repos.d/jenkins.repo</span><br></pre></td></tr></table></figure>\n\n<p>导入仓库密钥</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rpm --import https://jenkins-ci.org/redhat/jenkins-ci.org.key</span><br></pre></td></tr></table></figure>\n\n<p>安装jenkins最新稳定版</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install jenkins</span><br></pre></td></tr></table></figure>\n\n<p>服务管理</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start jenkins</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li>越新版本的jenkins可能需要的jdk版本越高，jdk11适配jdk8却不一定</li>\n</ul>\n<p>开放8080端口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --permanent --zone=public --add-port=8080/tcp</span><br><span class=\"line\">firewall-cmd --reload</span><br></pre></td></tr></table></figure>\n\n<p>设置Jenkins</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">http://your_ip_or_domain:8080</span><br><span class=\"line\">sudo cat /var/lib/jenkins/secrets/initialAdminPassword # 获取临时密码</span><br></pre></td></tr></table></figure>\n\n<p>选择<code>Install suggested plugins box</code>后继续，创建admin用户。</p>\n<p>jenkins工作目录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/var/lib/jenkins/</span><br><span class=\"line\">/var/lib/jenkins/config.xml # 配置文件</span><br></pre></td></tr></table></figure>\n<h4 id=\"jenkins重置密码\"><a href=\"#jenkins重置密码\" class=\"headerlink\" title=\"jenkins重置密码\"></a>jenkins重置密码</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">编辑/var/lib/jenkins/users/admin_491010919283058211/config.xml  # admin_491010919283058211需要根据你的实际文件名调整</span><br><span class=\"line\"></span><br><span class=\"line\"># 替换&lt;passwordHash&gt;成下列内容：</span><br><span class=\"line\">&lt;passwordHash&gt;#jbcrypt:$2a$10$ltzg1Kwtef0ymmNAqR8JR.961lHdnrsoFsE.huZ.G4r1AiIaENRC6&lt;/passwordHash&gt;</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><code>#jbcrypt:$2a$10$ltzg1Kwtef0ymmNAqR8JR.961lHdnrsoFsE.huZ.G4r1AiIaENRC6</code>是hash加密<code>123456</code>后的值。</li>\n</ul>\n<h4 id=\"部署java项目实践\"><a href=\"#部署java项目实践\" class=\"headerlink\" title=\"部署java项目实践\"></a>部署java项目实践</h4><p>配置JDK</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manage Jenkins - Global Tool Configuration - JDK（不选择自动安装）- 配置name和JAVA_HOME为`/usr/local/java/jdk1.8.0_351` - 保存</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li>若选择自动安装需要设置oracle账号密码</li>\n<li>手动安装jdk8步骤<br>mkdir &#x2F;usr&#x2F;local&#x2F;java<br>tar -xzvf jdk-8u351-linux-x64.tar.gz (jdk-8u351-linux-x64.tar.gz包自行到java官网下载)，解压后生成目录<code>jdk1.8.0_351</code></li>\n</ul>\n<p>配置MAVEN</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Add Maven - 命名 - Install Automatically - 选择版本3.8.6 - 保存</span><br></pre></td></tr></table></figure>\n\n<p>安装插件 Maven Integration，具体步骤：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Manage Jenkins - Manage Plugins - 可选插件 - 搜索maven - 安装Maven Integration</span><br></pre></td></tr></table></figure>\n\n<p>安装完后，创建一个项目：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Item - 命名emog-test - 选择构建一个maven项目 - 保存</span><br></pre></td></tr></table></figure>\n\n<p>进入project：emog-test</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">点击配置 - 设置git：git@192.168.31.87:alias/emog.git</span><br></pre></td></tr></table></figure>\n\n<p>Pre Steps<br>选择<code>执行shell</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean install</span><br><span class=\"line\"></span><br><span class=\"line\">num=`ls target/emog*.jar | wc -l`</span><br><span class=\"line\"></span><br><span class=\"line\">[[ $num -ne 1 ]] &amp;&amp; &#123; echo &quot;num is not equal 1&quot;; exit 1; &#125;</span><br><span class=\"line\">echo &quot;continue&quot;</span><br><span class=\"line\">jar_path=`ls target/emog*.jar`</span><br><span class=\"line\">jar=`basename &quot;$jar_path&quot;`</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">\\cp -fp target/$jar /opt/emog/jar</span><br><span class=\"line\">\\cp -fp /opt/emog/jar/$jar /opt/emog/emog.jar</span><br><span class=\"line\"></span><br><span class=\"line\">cd /opt/emog &amp;&amp; sh restart.sh</span><br></pre></td></tr></table></figure>\n<p>说明：restart.sh内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">workspace=/opt/emog</span><br><span class=\"line\">cd $workspace</span><br><span class=\"line\">pid=`ps aux|grep &quot;java -jar emog.jar&quot;|grep -v grep|awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class=\"line\"></span><br><span class=\"line\">if [[ $pid ]];then</span><br><span class=\"line\">  kill $pid &amp;&amp; nohup java -jar emog.jar &amp;</span><br><span class=\"line\">else</span><br><span class=\"line\">  nohup java -jar emog.jar &amp;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n<p>说明：<code>su jenkins</code>非登录用户没有bash环境，可以使用<code>su -s /bin/bash jenkins</code>以jenkin身份进入。</p>\n<h3 id=\"设置邮件模板\"><a href=\"#设置邮件模板\" class=\"headerlink\" title=\"设置邮件模板\"></a>设置邮件模板</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;hr/&gt;</span><br><span class=\"line\">     Project：$PROJECT_NAME&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     No.：#$BUILD_NUMBER&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     GIT：$&#123;GIT_REVISION&#125;&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     Status：$BUILD_STATUS&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     User：$&#123;CAUSE&#125;&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     Console：&lt;a href=&quot;$BUILD_URL&quot;&gt;$BUILD_URL&lt;/a&gt;&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     Console Logs：&lt;a href=&quot;$&#123;BUILD_URL&#125;console&quot;&gt;$&#123;BUILD_URL&#125;console&lt;/a&gt;&lt;br/&gt;&lt;hr/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">     $&#123;JELLY_SCRIPT,template=&quot;html&quot;&#125;&lt;br/&gt;&lt;hr/&gt;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"第21期：正则表达式","date":"2023-05-22T06:46:28.000Z","_content":"##### 非获取捕获\n场景：你想截取以str1字符串开头的内容，就可以用到非获取捕获\n```\ne.g.1\n[root@ricky ~]# echo \"recmaintarget.js123\"|grep -o -P '(?<=rec).*js' \nmaintarget.js\n\ne.g.2\n[root@ricky ~]# echo \"recmaintarget.jstt\"|grep -o -P '(?<=rec).*(?=tt)' \nmaintarget.js","source":"_posts/第21期：正则表达式.md","raw":"---\ntitle: 第21期：正则表达式\ndate: 2023-05-22 14:46:28\ntags:\n---\n##### 非获取捕获\n场景：你想截取以str1字符串开头的内容，就可以用到非获取捕获\n```\ne.g.1\n[root@ricky ~]# echo \"recmaintarget.js123\"|grep -o -P '(?<=rec).*js' \nmaintarget.js\n\ne.g.2\n[root@ricky ~]# echo \"recmaintarget.jstt\"|grep -o -P '(?<=rec).*(?=tt)' \nmaintarget.js","slug":"第21期：正则表达式","published":1,"updated":"2024-03-06T06:55:18.353Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvtdy000dbklnh78sgw3d","content":"<h5 id=\"非获取捕获\"><a href=\"#非获取捕获\" class=\"headerlink\" title=\"非获取捕获\"></a>非获取捕获</h5><p>场景：你想截取以str1字符串开头的内容，就可以用到非获取捕获</p>\n<pre><code>e.g.1\n[root@ricky ~]# echo &quot;recmaintarget.js123&quot;|grep -o -P &#39;(?&lt;=rec).*js&#39; \nmaintarget.js\n\ne.g.2\n[root@ricky ~]# echo &quot;recmaintarget.jstt&quot;|grep -o -P &#39;(?&lt;=rec).*(?=tt)&#39; \nmaintarget.js\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"非获取捕获\"><a href=\"#非获取捕获\" class=\"headerlink\" title=\"非获取捕获\"></a>非获取捕获</h5><p>场景：你想截取以str1字符串开头的内容，就可以用到非获取捕获</p>\n<pre><code>e.g.1\n[root@ricky ~]# echo &quot;recmaintarget.js123&quot;|grep -o -P &#39;(?&lt;=rec).*js&#39; \nmaintarget.js\n\ne.g.2\n[root@ricky ~]# echo &quot;recmaintarget.jstt&quot;|grep -o -P &#39;(?&lt;=rec).*(?=tt)&#39; \nmaintarget.js\n</code></pre>\n"},{"title":"第22期：rsync","date":"2023-05-22T07:19:22.000Z","_content":"##### rsync \nremote sync: 远程同步工具，可以说本地复制或主机间复制。第一次复制是全部，第二次是同步有差别的文件。\n\n##### 使用\n-a  # 归档模式，文件递归传输\n-v  # 详细模式输出\n-z  # 对备份的文件传输时进行压缩\n###### 本地复制\n```\nrsync -a remotesync /opt # 把remotesync(包括remotesync)复制到/opt目录下；如果remotesync写成remotesync/，结果是remotesync下面所有文件都被复制到/opt下\n```\n\n###### 本地复制到远程机器\nrsync -avz remotesync root@192.168.31.166:/opt/test\n\n###### 远程复制到本机\nrsync -avz root@192.168.31.166:/opt/test/test.log /opt\n\n参考：http://www.ruanyifeng.com/blog/2020/08/rsync.html\n","source":"_posts/第22期：rsync.md","raw":"---\ntitle: 第22期：rsync\ndate: 2023-05-22 15:19:22\ntags:\n---\n##### rsync \nremote sync: 远程同步工具，可以说本地复制或主机间复制。第一次复制是全部，第二次是同步有差别的文件。\n\n##### 使用\n-a  # 归档模式，文件递归传输\n-v  # 详细模式输出\n-z  # 对备份的文件传输时进行压缩\n###### 本地复制\n```\nrsync -a remotesync /opt # 把remotesync(包括remotesync)复制到/opt目录下；如果remotesync写成remotesync/，结果是remotesync下面所有文件都被复制到/opt下\n```\n\n###### 本地复制到远程机器\nrsync -avz remotesync root@192.168.31.166:/opt/test\n\n###### 远程复制到本机\nrsync -avz root@192.168.31.166:/opt/test/test.log /opt\n\n参考：http://www.ruanyifeng.com/blog/2020/08/rsync.html\n","slug":"第22期：rsync","published":1,"updated":"2024-03-06T06:55:18.354Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvtdz000ebkln3fby4ovh","content":"<h5 id=\"rsync\"><a href=\"#rsync\" class=\"headerlink\" title=\"rsync\"></a>rsync</h5><p>remote sync: 远程同步工具，可以说本地复制或主机间复制。第一次复制是全部，第二次是同步有差别的文件。</p>\n<h5 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h5><p>-a  # 归档模式，文件递归传输<br>-v  # 详细模式输出<br>-z  # 对备份的文件传输时进行压缩</p>\n<h6 id=\"本地复制\"><a href=\"#本地复制\" class=\"headerlink\" title=\"本地复制\"></a>本地复制</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rsync -a remotesync /opt # 把remotesync(包括remotesync)复制到/opt目录下；如果remotesync写成remotesync/，结果是remotesync下面所有文件都被复制到/opt下</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"本地复制到远程机器\"><a href=\"#本地复制到远程机器\" class=\"headerlink\" title=\"本地复制到远程机器\"></a>本地复制到远程机器</h6><p>rsync -avz remotesync <a href=\"mailto:&#x72;&#x6f;&#x6f;&#x74;&#64;&#x31;&#x39;&#x32;&#x2e;&#49;&#54;&#56;&#46;&#x33;&#x31;&#x2e;&#49;&#54;&#54;\">&#x72;&#x6f;&#x6f;&#x74;&#64;&#x31;&#x39;&#x32;&#x2e;&#49;&#54;&#56;&#46;&#x33;&#x31;&#x2e;&#49;&#54;&#54;</a>:&#x2F;opt&#x2F;test</p>\n<h6 id=\"远程复制到本机\"><a href=\"#远程复制到本机\" class=\"headerlink\" title=\"远程复制到本机\"></a>远程复制到本机</h6><p>rsync -avz <a href=\"mailto:&#x72;&#x6f;&#111;&#116;&#64;&#49;&#57;&#50;&#x2e;&#x31;&#54;&#x38;&#46;&#51;&#x31;&#46;&#x31;&#54;&#x36;\">&#x72;&#x6f;&#111;&#116;&#64;&#49;&#57;&#50;&#x2e;&#x31;&#54;&#x38;&#46;&#51;&#x31;&#46;&#x31;&#54;&#x36;</a>:&#x2F;opt&#x2F;test&#x2F;test.log &#x2F;opt</p>\n<p>参考：<a href=\"http://www.ruanyifeng.com/blog/2020/08/rsync.html\">http://www.ruanyifeng.com/blog/2020/08/rsync.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"rsync\"><a href=\"#rsync\" class=\"headerlink\" title=\"rsync\"></a>rsync</h5><p>remote sync: 远程同步工具，可以说本地复制或主机间复制。第一次复制是全部，第二次是同步有差别的文件。</p>\n<h5 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h5><p>-a  # 归档模式，文件递归传输<br>-v  # 详细模式输出<br>-z  # 对备份的文件传输时进行压缩</p>\n<h6 id=\"本地复制\"><a href=\"#本地复制\" class=\"headerlink\" title=\"本地复制\"></a>本地复制</h6><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rsync -a remotesync /opt # 把remotesync(包括remotesync)复制到/opt目录下；如果remotesync写成remotesync/，结果是remotesync下面所有文件都被复制到/opt下</span><br></pre></td></tr></table></figure>\n\n<h6 id=\"本地复制到远程机器\"><a href=\"#本地复制到远程机器\" class=\"headerlink\" title=\"本地复制到远程机器\"></a>本地复制到远程机器</h6><p>rsync -avz remotesync <a href=\"mailto:&#x72;&#x6f;&#x6f;&#x74;&#64;&#x31;&#x39;&#x32;&#x2e;&#49;&#54;&#56;&#46;&#x33;&#x31;&#x2e;&#49;&#54;&#54;\">&#x72;&#x6f;&#x6f;&#x74;&#64;&#x31;&#x39;&#x32;&#x2e;&#49;&#54;&#56;&#46;&#x33;&#x31;&#x2e;&#49;&#54;&#54;</a>:&#x2F;opt&#x2F;test</p>\n<h6 id=\"远程复制到本机\"><a href=\"#远程复制到本机\" class=\"headerlink\" title=\"远程复制到本机\"></a>远程复制到本机</h6><p>rsync -avz <a href=\"mailto:&#x72;&#x6f;&#111;&#116;&#64;&#49;&#57;&#50;&#x2e;&#x31;&#54;&#x38;&#46;&#51;&#x31;&#46;&#x31;&#54;&#x36;\">&#x72;&#x6f;&#111;&#116;&#64;&#49;&#57;&#50;&#x2e;&#x31;&#54;&#x38;&#46;&#51;&#x31;&#46;&#x31;&#54;&#x36;</a>:&#x2F;opt&#x2F;test&#x2F;test.log &#x2F;opt</p>\n<p>参考：<a href=\"http://www.ruanyifeng.com/blog/2020/08/rsync.html\">http://www.ruanyifeng.com/blog/2020/08/rsync.html</a></p>\n"},{"title":"第23期：GIT","date":"2023-05-22T07:34:40.000Z","_content":"### git命令\n```\ngit config --list # 查看当前配置\ngit config user.name \"username\" # 配置当个仓库用户名\ngit config --global user.name \"username\" # 设置全局用户名\ngit config --global user.email  useremail@qq.com # 设置全局邮箱\n```","source":"_posts/第23期：GIT.md","raw":"---\ntitle: 第23期：GIT\ndate: 2023-05-22 15:34:40\ntags:\n---\n### git命令\n```\ngit config --list # 查看当前配置\ngit config user.name \"username\" # 配置当个仓库用户名\ngit config --global user.name \"username\" # 设置全局用户名\ngit config --global user.email  useremail@qq.com # 设置全局邮箱\n```","slug":"第23期：GIT","published":1,"updated":"2024-03-06T06:55:18.354Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvte1000fbklneotvat46","content":"<h3 id=\"git命令\"><a href=\"#git命令\" class=\"headerlink\" title=\"git命令\"></a>git命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --list # 查看当前配置</span><br><span class=\"line\">git config user.name &quot;username&quot; # 配置当个仓库用户名</span><br><span class=\"line\">git config --global user.name &quot;username&quot; # 设置全局用户名</span><br><span class=\"line\">git config --global user.email  useremail@qq.com # 设置全局邮箱</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"git命令\"><a href=\"#git命令\" class=\"headerlink\" title=\"git命令\"></a>git命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --list # 查看当前配置</span><br><span class=\"line\">git config user.name &quot;username&quot; # 配置当个仓库用户名</span><br><span class=\"line\">git config --global user.name &quot;username&quot; # 设置全局用户名</span><br><span class=\"line\">git config --global user.email  useremail@qq.com # 设置全局邮箱</span><br></pre></td></tr></table></figure>"},{"title":"第24期：DOCKER","date":"2023-05-22T07:36:59.000Z","_content":"#### 安装docker-ce\n```\n# 安装一些必要的系统工具\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n\n# 添加源信息\n# docker 官方源\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n# 阿里云源\nsudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n\n# 安装前可以先更新 yum 缓存：\nsudo yum makecache fast\n# 安装 Docker-ce\nsudo yum install docker-ce\n\n# 如果你想安装特定 docker-ce 版本，先列出 repo 中可用版本，然后选择安装\n$ yum list docker-ce --showduplicates | sort -r\n# docker-ce.x86_64       18.06.1.ce-3.el7              docker-ce-stable\n# docker-ce.x86_64       18.06.1.ce-3.el7              @docker-ce-stable\n# docker-ce.x86_64       18.06.0.ce-3.el7              docker-ce-stable\n# docker-ce.x86_64       18.03.1.ce-1.el7.centos       docker-ce-stable\n# docker-ce.x86_64       18.03.0.ce-1.el7.centos       docker-ce-stable\n# docker-ce.x86_64       17.12.1.ce-1.el7.centos       docker-ce-stable\n# 选择版本安装\n$ sudo yum install docker-ce-<VERSION STRING>\n\n# 选择安装 docker-ce-18.06.1.ce\n$ sudo yum install docker-ce-18.06.1.ce\n\n# 启动 Docker 后台服务\nsudo systemctl start docker\n\n# 通过运行 hello-world 镜像，验证是否正确安装了 docker\ndocker run hello-world\n```\n\n#### 命令介绍\n```\n$ docker --help\n\n管理命令:\n  container   管理容器\n  image       管理镜像\n  network     管理网络\n命令：\n  attach      介入到一个正在运行的容器\n  build       根据 Dockerfile 构建一个镜像\n  commit      根据容器的更改创建一个新的镜像\n  cp          在本地文件系统与容器中复制 文件/文件夹\n  create      创建一个新容器\n  exec        在容器中执行一条命令\n  images      列出镜像\n  kill        杀死一个或多个正在运行的容器    \n  logs        取得容器的日志\n  pause       暂停一个或多个容器的所有进程\n  ps          列出所有容器\n  pull        拉取一个镜像或仓库到 registry\n  push        推送一个镜像或仓库到 registry\n  rename      重命名一个容器\n  restart     重新启动一个或多个容器\n  rm          删除一个或多个容器\n  rmi         删除一个或多个镜像\n  run         在一个新的容器中执行一条命令\n  search      在 Docker Hub 中搜索镜像\n  start       启动一个或多个已经停止运行的容器\n  stats       显示一个容器的实时资源占用\n  stop        停止一个或多个正在运行的容器\n  tag         为镜像创建一个新的标签\n  top         显示一个容器内的所有进程\n  unpause     恢复一个或多个容器内所有被暂停的进程\n```\n\n#### 镜像管理\n```\ndocker pull centos:latest  # 从docker.io中下载centos镜像到本地\ndocker images              # 查看已下载的镜像\ndocker rmi [image_id]      # 删除镜像，指定镜像id\n\n# 删除所有镜像\n# none 默认为 docker.io\ndocker rmi $(docker images | grep none | awk '{print $3}' | sort -r)\n\n# 连接进行进入命令行模式，exit命令退出。\ndocker run -t -i nginx:latest /bin/bash\n```\n\n##### 通过容器创建镜像\n两种方式：\n1.从已经创建的容器中更新镜像，并且提交这个镜像\n2.使用 Dockerfile 指令来创建一个新的镜像\n\n```\n# 第一种\ndocker commit -m=\"First Docker\" -a=\"wcjiang\" a6b0a6cfdacf wcjiang/nginx:v1.2.1\n\n\n# 第二种\ntouch Dockerfile .dockerignore\n```\n.dockerignoren内容（用于忽略加入镜像的内容）\n```\n.git\nnode_modules\nnpm-debug.log\n```\nDockerfile内容\n```\nFROM node:8.4\nCOPY . /app\nWORKDIR /app\nRUN npm install --registry=https://registry.npm.taobao.org\nEXPOSE 3000\n```\n##### 创建镜像\ndocker build -t koa-demo .\n\n##### 发布镜像\ndocker tag wcjiang/nginx:v1.2.1 wcjiang/nginx-test:lastest\ndocker login\ndocker push wcjiang/nginx-test:lastest\n\n##### 镜像安装软件\n```\n# 第一次需要运行这个命令，确保源的索引是最新的\n# 同步 /etc/apt/sources.list 和 /etc/apt/sources.list.d 中列出的源的索引\napt-get update\n# 做过上面更新同步之后，可以运行下面的命令了\napt-get install vim\n```\n\n##### 容器管理\n```\n# 列出本机正在运行的容器\ndocker container ls\n# 列出本机所有容器，包括终止运行的容器\ndocker container ls --all\ndocker start [containerID/Names] # 启动容器\ndocker stop [containerID/Names]  # 停止容器\ndocker rm [containerID/Names]    # 删除容器\ndocker logs [containerID/Names]  # 查看日志\ndocker exec -it [containerID/Names] /bin/bash  # 进入容器\n\n# 从正在运行的 Docker 容器里面，将文件拷贝到本机，注意后面有个【点】拷贝到当前目录\ndocker container cp [containID]:[/path/to/file] .\n\ndocker run centos echo \"hello world\"  # 在docker容器中运行hello world!\ndocker run centos yum install -y wget # 在docker容器中，安装wget软件\ndocker ps                             # 列出包括未运行的容器\ndocker ps -a                          # 查看所有容器(包括正在运行和已停止的)\ndocker logs my-nginx                  # 查看 my-nginx 容器日志\n\ndocker run -i -t centos /bin/bash     # 启动一个容器\ndocker inspect centos                 # 检查运行中的镜像\ndocker commit 8bd centos              # 保存对容器的修改\ndocker commit -m \"n changed\" my-nginx my-nginx-image # 使用已经存在的容器创建一个镜像\ndocker inspect -f {{.State.Pid}} 44fc0f0582d9        # 获取id为 44fc0f0582d9 的PID进程编号\n# 下载指定版本容器镜像\ndocker pull gitlab/gitlab-ce:11.2.3-ce.0\n```\n\n##### 文件拷贝\n```\n从主机复制到容器 sudo docker cp host_path containerID:container_path\n从容器复制到主机 sudo docker cp containerID:container_path host_path\n```\n\n##### Docker私有仓库搭建\n```\nHarbor 还有 humpback 和 rancher\n```\n\n##### 临时运行服务\n```\ndocker run -d \\\n  -p 5000:5000 \\\n  --restart=always \\\n  --name registry \\\n  registry:2\n\n或者\n\n# ctrl+c退出自动删除容器\ndocker run --rm \\\n    --name asynqmon \\\n    -p 8080:8080 \\\n    hibiken/asynqmon\n\n# 自定义存储位置\ndocker run -d \\\n  -p 5000:5000 \\\n  --restart=always \\\n  --name registry \\\n  -v $HOME/_docker/registry:/var/lib/registry \\\n  registry:2\n\ndocker run -d -p 5000:5000 --restart=always --name registry \\\n    -v `pwd`/config.yml:/etc/docker/registry/config.yml \\\n    registry:2\n```\n\n\n##### 使用docker实战\n```\n-d, --detach=false      # 指定容器运行于前台还是后台，默认为false   \n-i, --interactive=false # 打开STDIN，用于控制台交互  \n-t, --tty=false         # 分配tty设备，该可以支持终端登录，默认为false  \n-u, --user=\"\"           # 指定容器的用户  \n-a, --attach=[]         # 登录容器（必须是以docker run -d启动的容器）\n-w, --workdir=\"\"        # 指定容器的工作目录 \n-c, --cpu-shares=0      # 设置容器CPU权重，在CPU共享场景使用  \n-e, --env=[]            # 指定环境变量，容器中可以使用该环境变量  \n-m, --memory=\"\"         # 指定容器的内存上限  \n-P, --publish-all=false # 指定容器暴露的端口  \n-p, --publish=[]        # 指定容器暴露的端口 \n-h, --hostname=\"\"       # 指定容器的主机名  \n-v, --volume=[]         # 给容器挂载存储卷，挂载到容器的某个目录  \n--volumes-from=[]       # 给容器挂载其他容器上的卷，挂载到容器的某个目录\n--cap-add=[]            # 添加权限，权限清单详见：http://linux.die.net/man/7/capabilities  \n--cap-drop=[]           # 删除权限，权限清单详见：http://linux.die.net/man/7/capabilities  \n--cidfile=\"\"            # 运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法  \n--cpuset=\"\"             # 设置容器可以使用哪些CPU，此参数可以用来容器独占CPU  \n--device=[]             # 添加主机设备给容器，相当于设备直通  \n--dns=[]                # 指定容器的dns服务器  \n--dns-search=[]         # 指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件  \n--entrypoint=\"\"         # 覆盖image的入口点  \n--env-file=[]           # 指定环境变量文件，文件格式为每行一个环境变量  \n--expose=[]             # 指定容器暴露的端口，即修改镜像的暴露端口  \n--link=[]               # 指定容器间的关联，使用其他容器的IP、env等信息  \n--lxc-conf=[]           # 指定容器的配置文件，只有在指定--exec-driver=lxc时使用  \n--name=\"\"               # 指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字  \n--net=\"bridge\"          # 容器网络设置:\n                            # bridge 使用docker daemon指定的网桥     \n                            # host \t//容器使用主机的网络  \n                            # container:NAME_or_ID  >//使用其他容器的网路，共享IP和PORT等网络资源  \n                            # none 容器使用自己的网络（类似--net=bridge），但是不进行配置 \n--privileged=false      # 指定容器是否为特权容器，特权容器拥有所有的capabilities  \n--restart=\"no\"          # 指定容器停止后的重启策略:\n                            # no：容器退出时不重启  \n                            # on-failure：容器故障退出（返回值非零）时重启 \n                            # always：容器退出时总是重启  \n--rm=false              # 指定容器停止后自动删除容器(不支持以docker run -d启动的容器)  \n--sig-proxy=true        # 设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理\n```\n\n参考：https://raw.githack.com/jaywcjlove/docker-tutorial/7a41060/index.html\n","source":"_posts/第24期：DOCKER.md","raw":"---\ntitle: 第24期：DOCKER\ndate: 2023-05-22 15:36:59\ntags:\n---\n#### 安装docker-ce\n```\n# 安装一些必要的系统工具\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n\n# 添加源信息\n# docker 官方源\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n# 阿里云源\nsudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n\n# 安装前可以先更新 yum 缓存：\nsudo yum makecache fast\n# 安装 Docker-ce\nsudo yum install docker-ce\n\n# 如果你想安装特定 docker-ce 版本，先列出 repo 中可用版本，然后选择安装\n$ yum list docker-ce --showduplicates | sort -r\n# docker-ce.x86_64       18.06.1.ce-3.el7              docker-ce-stable\n# docker-ce.x86_64       18.06.1.ce-3.el7              @docker-ce-stable\n# docker-ce.x86_64       18.06.0.ce-3.el7              docker-ce-stable\n# docker-ce.x86_64       18.03.1.ce-1.el7.centos       docker-ce-stable\n# docker-ce.x86_64       18.03.0.ce-1.el7.centos       docker-ce-stable\n# docker-ce.x86_64       17.12.1.ce-1.el7.centos       docker-ce-stable\n# 选择版本安装\n$ sudo yum install docker-ce-<VERSION STRING>\n\n# 选择安装 docker-ce-18.06.1.ce\n$ sudo yum install docker-ce-18.06.1.ce\n\n# 启动 Docker 后台服务\nsudo systemctl start docker\n\n# 通过运行 hello-world 镜像，验证是否正确安装了 docker\ndocker run hello-world\n```\n\n#### 命令介绍\n```\n$ docker --help\n\n管理命令:\n  container   管理容器\n  image       管理镜像\n  network     管理网络\n命令：\n  attach      介入到一个正在运行的容器\n  build       根据 Dockerfile 构建一个镜像\n  commit      根据容器的更改创建一个新的镜像\n  cp          在本地文件系统与容器中复制 文件/文件夹\n  create      创建一个新容器\n  exec        在容器中执行一条命令\n  images      列出镜像\n  kill        杀死一个或多个正在运行的容器    \n  logs        取得容器的日志\n  pause       暂停一个或多个容器的所有进程\n  ps          列出所有容器\n  pull        拉取一个镜像或仓库到 registry\n  push        推送一个镜像或仓库到 registry\n  rename      重命名一个容器\n  restart     重新启动一个或多个容器\n  rm          删除一个或多个容器\n  rmi         删除一个或多个镜像\n  run         在一个新的容器中执行一条命令\n  search      在 Docker Hub 中搜索镜像\n  start       启动一个或多个已经停止运行的容器\n  stats       显示一个容器的实时资源占用\n  stop        停止一个或多个正在运行的容器\n  tag         为镜像创建一个新的标签\n  top         显示一个容器内的所有进程\n  unpause     恢复一个或多个容器内所有被暂停的进程\n```\n\n#### 镜像管理\n```\ndocker pull centos:latest  # 从docker.io中下载centos镜像到本地\ndocker images              # 查看已下载的镜像\ndocker rmi [image_id]      # 删除镜像，指定镜像id\n\n# 删除所有镜像\n# none 默认为 docker.io\ndocker rmi $(docker images | grep none | awk '{print $3}' | sort -r)\n\n# 连接进行进入命令行模式，exit命令退出。\ndocker run -t -i nginx:latest /bin/bash\n```\n\n##### 通过容器创建镜像\n两种方式：\n1.从已经创建的容器中更新镜像，并且提交这个镜像\n2.使用 Dockerfile 指令来创建一个新的镜像\n\n```\n# 第一种\ndocker commit -m=\"First Docker\" -a=\"wcjiang\" a6b0a6cfdacf wcjiang/nginx:v1.2.1\n\n\n# 第二种\ntouch Dockerfile .dockerignore\n```\n.dockerignoren内容（用于忽略加入镜像的内容）\n```\n.git\nnode_modules\nnpm-debug.log\n```\nDockerfile内容\n```\nFROM node:8.4\nCOPY . /app\nWORKDIR /app\nRUN npm install --registry=https://registry.npm.taobao.org\nEXPOSE 3000\n```\n##### 创建镜像\ndocker build -t koa-demo .\n\n##### 发布镜像\ndocker tag wcjiang/nginx:v1.2.1 wcjiang/nginx-test:lastest\ndocker login\ndocker push wcjiang/nginx-test:lastest\n\n##### 镜像安装软件\n```\n# 第一次需要运行这个命令，确保源的索引是最新的\n# 同步 /etc/apt/sources.list 和 /etc/apt/sources.list.d 中列出的源的索引\napt-get update\n# 做过上面更新同步之后，可以运行下面的命令了\napt-get install vim\n```\n\n##### 容器管理\n```\n# 列出本机正在运行的容器\ndocker container ls\n# 列出本机所有容器，包括终止运行的容器\ndocker container ls --all\ndocker start [containerID/Names] # 启动容器\ndocker stop [containerID/Names]  # 停止容器\ndocker rm [containerID/Names]    # 删除容器\ndocker logs [containerID/Names]  # 查看日志\ndocker exec -it [containerID/Names] /bin/bash  # 进入容器\n\n# 从正在运行的 Docker 容器里面，将文件拷贝到本机，注意后面有个【点】拷贝到当前目录\ndocker container cp [containID]:[/path/to/file] .\n\ndocker run centos echo \"hello world\"  # 在docker容器中运行hello world!\ndocker run centos yum install -y wget # 在docker容器中，安装wget软件\ndocker ps                             # 列出包括未运行的容器\ndocker ps -a                          # 查看所有容器(包括正在运行和已停止的)\ndocker logs my-nginx                  # 查看 my-nginx 容器日志\n\ndocker run -i -t centos /bin/bash     # 启动一个容器\ndocker inspect centos                 # 检查运行中的镜像\ndocker commit 8bd centos              # 保存对容器的修改\ndocker commit -m \"n changed\" my-nginx my-nginx-image # 使用已经存在的容器创建一个镜像\ndocker inspect -f {{.State.Pid}} 44fc0f0582d9        # 获取id为 44fc0f0582d9 的PID进程编号\n# 下载指定版本容器镜像\ndocker pull gitlab/gitlab-ce:11.2.3-ce.0\n```\n\n##### 文件拷贝\n```\n从主机复制到容器 sudo docker cp host_path containerID:container_path\n从容器复制到主机 sudo docker cp containerID:container_path host_path\n```\n\n##### Docker私有仓库搭建\n```\nHarbor 还有 humpback 和 rancher\n```\n\n##### 临时运行服务\n```\ndocker run -d \\\n  -p 5000:5000 \\\n  --restart=always \\\n  --name registry \\\n  registry:2\n\n或者\n\n# ctrl+c退出自动删除容器\ndocker run --rm \\\n    --name asynqmon \\\n    -p 8080:8080 \\\n    hibiken/asynqmon\n\n# 自定义存储位置\ndocker run -d \\\n  -p 5000:5000 \\\n  --restart=always \\\n  --name registry \\\n  -v $HOME/_docker/registry:/var/lib/registry \\\n  registry:2\n\ndocker run -d -p 5000:5000 --restart=always --name registry \\\n    -v `pwd`/config.yml:/etc/docker/registry/config.yml \\\n    registry:2\n```\n\n\n##### 使用docker实战\n```\n-d, --detach=false      # 指定容器运行于前台还是后台，默认为false   \n-i, --interactive=false # 打开STDIN，用于控制台交互  \n-t, --tty=false         # 分配tty设备，该可以支持终端登录，默认为false  \n-u, --user=\"\"           # 指定容器的用户  \n-a, --attach=[]         # 登录容器（必须是以docker run -d启动的容器）\n-w, --workdir=\"\"        # 指定容器的工作目录 \n-c, --cpu-shares=0      # 设置容器CPU权重，在CPU共享场景使用  \n-e, --env=[]            # 指定环境变量，容器中可以使用该环境变量  \n-m, --memory=\"\"         # 指定容器的内存上限  \n-P, --publish-all=false # 指定容器暴露的端口  \n-p, --publish=[]        # 指定容器暴露的端口 \n-h, --hostname=\"\"       # 指定容器的主机名  \n-v, --volume=[]         # 给容器挂载存储卷，挂载到容器的某个目录  \n--volumes-from=[]       # 给容器挂载其他容器上的卷，挂载到容器的某个目录\n--cap-add=[]            # 添加权限，权限清单详见：http://linux.die.net/man/7/capabilities  \n--cap-drop=[]           # 删除权限，权限清单详见：http://linux.die.net/man/7/capabilities  \n--cidfile=\"\"            # 运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法  \n--cpuset=\"\"             # 设置容器可以使用哪些CPU，此参数可以用来容器独占CPU  \n--device=[]             # 添加主机设备给容器，相当于设备直通  \n--dns=[]                # 指定容器的dns服务器  \n--dns-search=[]         # 指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件  \n--entrypoint=\"\"         # 覆盖image的入口点  \n--env-file=[]           # 指定环境变量文件，文件格式为每行一个环境变量  \n--expose=[]             # 指定容器暴露的端口，即修改镜像的暴露端口  \n--link=[]               # 指定容器间的关联，使用其他容器的IP、env等信息  \n--lxc-conf=[]           # 指定容器的配置文件，只有在指定--exec-driver=lxc时使用  \n--name=\"\"               # 指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字  \n--net=\"bridge\"          # 容器网络设置:\n                            # bridge 使用docker daemon指定的网桥     \n                            # host \t//容器使用主机的网络  \n                            # container:NAME_or_ID  >//使用其他容器的网路，共享IP和PORT等网络资源  \n                            # none 容器使用自己的网络（类似--net=bridge），但是不进行配置 \n--privileged=false      # 指定容器是否为特权容器，特权容器拥有所有的capabilities  \n--restart=\"no\"          # 指定容器停止后的重启策略:\n                            # no：容器退出时不重启  \n                            # on-failure：容器故障退出（返回值非零）时重启 \n                            # always：容器退出时总是重启  \n--rm=false              # 指定容器停止后自动删除容器(不支持以docker run -d启动的容器)  \n--sig-proxy=true        # 设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理\n```\n\n参考：https://raw.githack.com/jaywcjlove/docker-tutorial/7a41060/index.html\n","slug":"第24期：DOCKER","published":1,"updated":"2024-03-06T06:55:18.355Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvte2000gbklnfakl52gj","content":"<h4 id=\"安装docker-ce\"><a href=\"#安装docker-ce\" class=\"headerlink\" title=\"安装docker-ce\"></a>安装docker-ce</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装一些必要的系统工具</span><br><span class=\"line\">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加源信息</span><br><span class=\"line\"># docker 官方源</span><br><span class=\"line\">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\"># 阿里云源</span><br><span class=\"line\">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装前可以先更新 yum 缓存：</span><br><span class=\"line\">sudo yum makecache fast</span><br><span class=\"line\"># 安装 Docker-ce</span><br><span class=\"line\">sudo yum install docker-ce</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果你想安装特定 docker-ce 版本，先列出 repo 中可用版本，然后选择安装</span><br><span class=\"line\">$ yum list docker-ce --showduplicates | sort -r</span><br><span class=\"line\"># docker-ce.x86_64       18.06.1.ce-3.el7              docker-ce-stable</span><br><span class=\"line\"># docker-ce.x86_64       18.06.1.ce-3.el7              @docker-ce-stable</span><br><span class=\"line\"># docker-ce.x86_64       18.06.0.ce-3.el7              docker-ce-stable</span><br><span class=\"line\"># docker-ce.x86_64       18.03.1.ce-1.el7.centos       docker-ce-stable</span><br><span class=\"line\"># docker-ce.x86_64       18.03.0.ce-1.el7.centos       docker-ce-stable</span><br><span class=\"line\"># docker-ce.x86_64       17.12.1.ce-1.el7.centos       docker-ce-stable</span><br><span class=\"line\"># 选择版本安装</span><br><span class=\"line\">$ sudo yum install docker-ce-&lt;VERSION STRING&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 选择安装 docker-ce-18.06.1.ce</span><br><span class=\"line\">$ sudo yum install docker-ce-18.06.1.ce</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动 Docker 后台服务</span><br><span class=\"line\">sudo systemctl start docker</span><br><span class=\"line\"></span><br><span class=\"line\"># 通过运行 hello-world 镜像，验证是否正确安装了 docker</span><br><span class=\"line\">docker run hello-world</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"命令介绍\"><a href=\"#命令介绍\" class=\"headerlink\" title=\"命令介绍\"></a>命令介绍</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker --help</span><br><span class=\"line\"></span><br><span class=\"line\">管理命令:</span><br><span class=\"line\">  container   管理容器</span><br><span class=\"line\">  image       管理镜像</span><br><span class=\"line\">  network     管理网络</span><br><span class=\"line\">命令：</span><br><span class=\"line\">  attach      介入到一个正在运行的容器</span><br><span class=\"line\">  build       根据 Dockerfile 构建一个镜像</span><br><span class=\"line\">  commit      根据容器的更改创建一个新的镜像</span><br><span class=\"line\">  cp          在本地文件系统与容器中复制 文件/文件夹</span><br><span class=\"line\">  create      创建一个新容器</span><br><span class=\"line\">  exec        在容器中执行一条命令</span><br><span class=\"line\">  images      列出镜像</span><br><span class=\"line\">  kill        杀死一个或多个正在运行的容器    </span><br><span class=\"line\">  logs        取得容器的日志</span><br><span class=\"line\">  pause       暂停一个或多个容器的所有进程</span><br><span class=\"line\">  ps          列出所有容器</span><br><span class=\"line\">  pull        拉取一个镜像或仓库到 registry</span><br><span class=\"line\">  push        推送一个镜像或仓库到 registry</span><br><span class=\"line\">  rename      重命名一个容器</span><br><span class=\"line\">  restart     重新启动一个或多个容器</span><br><span class=\"line\">  rm          删除一个或多个容器</span><br><span class=\"line\">  rmi         删除一个或多个镜像</span><br><span class=\"line\">  run         在一个新的容器中执行一条命令</span><br><span class=\"line\">  search      在 Docker Hub 中搜索镜像</span><br><span class=\"line\">  start       启动一个或多个已经停止运行的容器</span><br><span class=\"line\">  stats       显示一个容器的实时资源占用</span><br><span class=\"line\">  stop        停止一个或多个正在运行的容器</span><br><span class=\"line\">  tag         为镜像创建一个新的标签</span><br><span class=\"line\">  top         显示一个容器内的所有进程</span><br><span class=\"line\">  unpause     恢复一个或多个容器内所有被暂停的进程</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"镜像管理\"><a href=\"#镜像管理\" class=\"headerlink\" title=\"镜像管理\"></a>镜像管理</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull centos:latest  # 从docker.io中下载centos镜像到本地</span><br><span class=\"line\">docker images              # 查看已下载的镜像</span><br><span class=\"line\">docker rmi [image_id]      # 删除镜像，指定镜像id</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除所有镜像</span><br><span class=\"line\"># none 默认为 docker.io</span><br><span class=\"line\">docker rmi $(docker images | grep none | awk &#x27;&#123;print $3&#125;&#x27; | sort -r)</span><br><span class=\"line\"></span><br><span class=\"line\"># 连接进行进入命令行模式，exit命令退出。</span><br><span class=\"line\">docker run -t -i nginx:latest /bin/bash</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"通过容器创建镜像\"><a href=\"#通过容器创建镜像\" class=\"headerlink\" title=\"通过容器创建镜像\"></a>通过容器创建镜像</h5><p>两种方式：<br>1.从已经创建的容器中更新镜像，并且提交这个镜像<br>2.使用 Dockerfile 指令来创建一个新的镜像</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 第一种</span><br><span class=\"line\">docker commit -m=&quot;First Docker&quot; -a=&quot;wcjiang&quot; a6b0a6cfdacf wcjiang/nginx:v1.2.1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 第二种</span><br><span class=\"line\">touch Dockerfile .dockerignore</span><br></pre></td></tr></table></figure>\n<p>.dockerignoren内容（用于忽略加入镜像的内容）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.git</span><br><span class=\"line\">node_modules</span><br><span class=\"line\">npm-debug.log</span><br></pre></td></tr></table></figure>\n<p>Dockerfile内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM node:8.4</span><br><span class=\"line\">COPY . /app</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">RUN npm install --registry=https://registry.npm.taobao.org</span><br><span class=\"line\">EXPOSE 3000</span><br></pre></td></tr></table></figure>\n<h5 id=\"创建镜像\"><a href=\"#创建镜像\" class=\"headerlink\" title=\"创建镜像\"></a>创建镜像</h5><p>docker build -t koa-demo .</p>\n<h5 id=\"发布镜像\"><a href=\"#发布镜像\" class=\"headerlink\" title=\"发布镜像\"></a>发布镜像</h5><p>docker tag wcjiang&#x2F;nginx:v1.2.1 wcjiang&#x2F;nginx-test:lastest<br>docker login<br>docker push wcjiang&#x2F;nginx-test:lastest</p>\n<h5 id=\"镜像安装软件\"><a href=\"#镜像安装软件\" class=\"headerlink\" title=\"镜像安装软件\"></a>镜像安装软件</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 第一次需要运行这个命令，确保源的索引是最新的</span><br><span class=\"line\"># 同步 /etc/apt/sources.list 和 /etc/apt/sources.list.d 中列出的源的索引</span><br><span class=\"line\">apt-get update</span><br><span class=\"line\"># 做过上面更新同步之后，可以运行下面的命令了</span><br><span class=\"line\">apt-get install vim</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"容器管理\"><a href=\"#容器管理\" class=\"headerlink\" title=\"容器管理\"></a>容器管理</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 列出本机正在运行的容器</span><br><span class=\"line\">docker container ls</span><br><span class=\"line\"># 列出本机所有容器，包括终止运行的容器</span><br><span class=\"line\">docker container ls --all</span><br><span class=\"line\">docker start [containerID/Names] # 启动容器</span><br><span class=\"line\">docker stop [containerID/Names]  # 停止容器</span><br><span class=\"line\">docker rm [containerID/Names]    # 删除容器</span><br><span class=\"line\">docker logs [containerID/Names]  # 查看日志</span><br><span class=\"line\">docker exec -it [containerID/Names] /bin/bash  # 进入容器</span><br><span class=\"line\"></span><br><span class=\"line\"># 从正在运行的 Docker 容器里面，将文件拷贝到本机，注意后面有个【点】拷贝到当前目录</span><br><span class=\"line\">docker container cp [containID]:[/path/to/file] .</span><br><span class=\"line\"></span><br><span class=\"line\">docker run centos echo &quot;hello world&quot;  # 在docker容器中运行hello world!</span><br><span class=\"line\">docker run centos yum install -y wget # 在docker容器中，安装wget软件</span><br><span class=\"line\">docker ps                             # 列出包括未运行的容器</span><br><span class=\"line\">docker ps -a                          # 查看所有容器(包括正在运行和已停止的)</span><br><span class=\"line\">docker logs my-nginx                  # 查看 my-nginx 容器日志</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -i -t centos /bin/bash     # 启动一个容器</span><br><span class=\"line\">docker inspect centos                 # 检查运行中的镜像</span><br><span class=\"line\">docker commit 8bd centos              # 保存对容器的修改</span><br><span class=\"line\">docker commit -m &quot;n changed&quot; my-nginx my-nginx-image # 使用已经存在的容器创建一个镜像</span><br><span class=\"line\">docker inspect -f &#123;&#123;.State.Pid&#125;&#125; 44fc0f0582d9        # 获取id为 44fc0f0582d9 的PID进程编号</span><br><span class=\"line\"># 下载指定版本容器镜像</span><br><span class=\"line\">docker pull gitlab/gitlab-ce:11.2.3-ce.0</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"文件拷贝\"><a href=\"#文件拷贝\" class=\"headerlink\" title=\"文件拷贝\"></a>文件拷贝</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">从主机复制到容器 sudo docker cp host_path containerID:container_path</span><br><span class=\"line\">从容器复制到主机 sudo docker cp containerID:container_path host_path</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Docker私有仓库搭建\"><a href=\"#Docker私有仓库搭建\" class=\"headerlink\" title=\"Docker私有仓库搭建\"></a>Docker私有仓库搭建</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Harbor 还有 humpback 和 rancher</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"临时运行服务\"><a href=\"#临时运行服务\" class=\"headerlink\" title=\"临时运行服务\"></a>临时运行服务</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  -p 5000:5000 \\</span><br><span class=\"line\">  --restart=always \\</span><br><span class=\"line\">  --name registry \\</span><br><span class=\"line\">  registry:2</span><br><span class=\"line\"></span><br><span class=\"line\">或者</span><br><span class=\"line\"></span><br><span class=\"line\"># ctrl+c退出自动删除容器</span><br><span class=\"line\">docker run --rm \\</span><br><span class=\"line\">    --name asynqmon \\</span><br><span class=\"line\">    -p 8080:8080 \\</span><br><span class=\"line\">    hibiken/asynqmon</span><br><span class=\"line\"></span><br><span class=\"line\"># 自定义存储位置</span><br><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  -p 5000:5000 \\</span><br><span class=\"line\">  --restart=always \\</span><br><span class=\"line\">  --name registry \\</span><br><span class=\"line\">  -v $HOME/_docker/registry:/var/lib/registry \\</span><br><span class=\"line\">  registry:2</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d -p 5000:5000 --restart=always --name registry \\</span><br><span class=\"line\">    -v `pwd`/config.yml:/etc/docker/registry/config.yml \\</span><br><span class=\"line\">    registry:2</span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"使用docker实战\"><a href=\"#使用docker实战\" class=\"headerlink\" title=\"使用docker实战\"></a>使用docker实战</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-d, --detach=false      # 指定容器运行于前台还是后台，默认为false   </span><br><span class=\"line\">-i, --interactive=false # 打开STDIN，用于控制台交互  </span><br><span class=\"line\">-t, --tty=false         # 分配tty设备，该可以支持终端登录，默认为false  </span><br><span class=\"line\">-u, --user=&quot;&quot;           # 指定容器的用户  </span><br><span class=\"line\">-a, --attach=[]         # 登录容器（必须是以docker run -d启动的容器）</span><br><span class=\"line\">-w, --workdir=&quot;&quot;        # 指定容器的工作目录 </span><br><span class=\"line\">-c, --cpu-shares=0      # 设置容器CPU权重，在CPU共享场景使用  </span><br><span class=\"line\">-e, --env=[]            # 指定环境变量，容器中可以使用该环境变量  </span><br><span class=\"line\">-m, --memory=&quot;&quot;         # 指定容器的内存上限  </span><br><span class=\"line\">-P, --publish-all=false # 指定容器暴露的端口  </span><br><span class=\"line\">-p, --publish=[]        # 指定容器暴露的端口 </span><br><span class=\"line\">-h, --hostname=&quot;&quot;       # 指定容器的主机名  </span><br><span class=\"line\">-v, --volume=[]         # 给容器挂载存储卷，挂载到容器的某个目录  </span><br><span class=\"line\">--volumes-from=[]       # 给容器挂载其他容器上的卷，挂载到容器的某个目录</span><br><span class=\"line\">--cap-add=[]            # 添加权限，权限清单详见：http://linux.die.net/man/7/capabilities  </span><br><span class=\"line\">--cap-drop=[]           # 删除权限，权限清单详见：http://linux.die.net/man/7/capabilities  </span><br><span class=\"line\">--cidfile=&quot;&quot;            # 运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法  </span><br><span class=\"line\">--cpuset=&quot;&quot;             # 设置容器可以使用哪些CPU，此参数可以用来容器独占CPU  </span><br><span class=\"line\">--device=[]             # 添加主机设备给容器，相当于设备直通  </span><br><span class=\"line\">--dns=[]                # 指定容器的dns服务器  </span><br><span class=\"line\">--dns-search=[]         # 指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件  </span><br><span class=\"line\">--entrypoint=&quot;&quot;         # 覆盖image的入口点  </span><br><span class=\"line\">--env-file=[]           # 指定环境变量文件，文件格式为每行一个环境变量  </span><br><span class=\"line\">--expose=[]             # 指定容器暴露的端口，即修改镜像的暴露端口  </span><br><span class=\"line\">--link=[]               # 指定容器间的关联，使用其他容器的IP、env等信息  </span><br><span class=\"line\">--lxc-conf=[]           # 指定容器的配置文件，只有在指定--exec-driver=lxc时使用  </span><br><span class=\"line\">--name=&quot;&quot;               # 指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字  </span><br><span class=\"line\">--net=&quot;bridge&quot;          # 容器网络设置:</span><br><span class=\"line\">                            # bridge 使用docker daemon指定的网桥     </span><br><span class=\"line\">                            # host \t//容器使用主机的网络  </span><br><span class=\"line\">                            # container:NAME_or_ID  &gt;//使用其他容器的网路，共享IP和PORT等网络资源  </span><br><span class=\"line\">                            # none 容器使用自己的网络（类似--net=bridge），但是不进行配置 </span><br><span class=\"line\">--privileged=false      # 指定容器是否为特权容器，特权容器拥有所有的capabilities  </span><br><span class=\"line\">--restart=&quot;no&quot;          # 指定容器停止后的重启策略:</span><br><span class=\"line\">                            # no：容器退出时不重启  </span><br><span class=\"line\">                            # on-failure：容器故障退出（返回值非零）时重启 </span><br><span class=\"line\">                            # always：容器退出时总是重启  </span><br><span class=\"line\">--rm=false              # 指定容器停止后自动删除容器(不支持以docker run -d启动的容器)  </span><br><span class=\"line\">--sig-proxy=true        # 设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理</span><br></pre></td></tr></table></figure>\n\n<p>参考：<a href=\"https://raw.githack.com/jaywcjlove/docker-tutorial/7a41060/index.html\">https://raw.githack.com/jaywcjlove/docker-tutorial/7a41060/index.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"安装docker-ce\"><a href=\"#安装docker-ce\" class=\"headerlink\" title=\"安装docker-ce\"></a>安装docker-ce</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 安装一些必要的系统工具</span><br><span class=\"line\">sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span><br><span class=\"line\"></span><br><span class=\"line\"># 添加源信息</span><br><span class=\"line\"># docker 官方源</span><br><span class=\"line\">sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span><br><span class=\"line\"># 阿里云源</span><br><span class=\"line\">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装前可以先更新 yum 缓存：</span><br><span class=\"line\">sudo yum makecache fast</span><br><span class=\"line\"># 安装 Docker-ce</span><br><span class=\"line\">sudo yum install docker-ce</span><br><span class=\"line\"></span><br><span class=\"line\"># 如果你想安装特定 docker-ce 版本，先列出 repo 中可用版本，然后选择安装</span><br><span class=\"line\">$ yum list docker-ce --showduplicates | sort -r</span><br><span class=\"line\"># docker-ce.x86_64       18.06.1.ce-3.el7              docker-ce-stable</span><br><span class=\"line\"># docker-ce.x86_64       18.06.1.ce-3.el7              @docker-ce-stable</span><br><span class=\"line\"># docker-ce.x86_64       18.06.0.ce-3.el7              docker-ce-stable</span><br><span class=\"line\"># docker-ce.x86_64       18.03.1.ce-1.el7.centos       docker-ce-stable</span><br><span class=\"line\"># docker-ce.x86_64       18.03.0.ce-1.el7.centos       docker-ce-stable</span><br><span class=\"line\"># docker-ce.x86_64       17.12.1.ce-1.el7.centos       docker-ce-stable</span><br><span class=\"line\"># 选择版本安装</span><br><span class=\"line\">$ sudo yum install docker-ce-&lt;VERSION STRING&gt;</span><br><span class=\"line\"></span><br><span class=\"line\"># 选择安装 docker-ce-18.06.1.ce</span><br><span class=\"line\">$ sudo yum install docker-ce-18.06.1.ce</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动 Docker 后台服务</span><br><span class=\"line\">sudo systemctl start docker</span><br><span class=\"line\"></span><br><span class=\"line\"># 通过运行 hello-world 镜像，验证是否正确安装了 docker</span><br><span class=\"line\">docker run hello-world</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"命令介绍\"><a href=\"#命令介绍\" class=\"headerlink\" title=\"命令介绍\"></a>命令介绍</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ docker --help</span><br><span class=\"line\"></span><br><span class=\"line\">管理命令:</span><br><span class=\"line\">  container   管理容器</span><br><span class=\"line\">  image       管理镜像</span><br><span class=\"line\">  network     管理网络</span><br><span class=\"line\">命令：</span><br><span class=\"line\">  attach      介入到一个正在运行的容器</span><br><span class=\"line\">  build       根据 Dockerfile 构建一个镜像</span><br><span class=\"line\">  commit      根据容器的更改创建一个新的镜像</span><br><span class=\"line\">  cp          在本地文件系统与容器中复制 文件/文件夹</span><br><span class=\"line\">  create      创建一个新容器</span><br><span class=\"line\">  exec        在容器中执行一条命令</span><br><span class=\"line\">  images      列出镜像</span><br><span class=\"line\">  kill        杀死一个或多个正在运行的容器    </span><br><span class=\"line\">  logs        取得容器的日志</span><br><span class=\"line\">  pause       暂停一个或多个容器的所有进程</span><br><span class=\"line\">  ps          列出所有容器</span><br><span class=\"line\">  pull        拉取一个镜像或仓库到 registry</span><br><span class=\"line\">  push        推送一个镜像或仓库到 registry</span><br><span class=\"line\">  rename      重命名一个容器</span><br><span class=\"line\">  restart     重新启动一个或多个容器</span><br><span class=\"line\">  rm          删除一个或多个容器</span><br><span class=\"line\">  rmi         删除一个或多个镜像</span><br><span class=\"line\">  run         在一个新的容器中执行一条命令</span><br><span class=\"line\">  search      在 Docker Hub 中搜索镜像</span><br><span class=\"line\">  start       启动一个或多个已经停止运行的容器</span><br><span class=\"line\">  stats       显示一个容器的实时资源占用</span><br><span class=\"line\">  stop        停止一个或多个正在运行的容器</span><br><span class=\"line\">  tag         为镜像创建一个新的标签</span><br><span class=\"line\">  top         显示一个容器内的所有进程</span><br><span class=\"line\">  unpause     恢复一个或多个容器内所有被暂停的进程</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"镜像管理\"><a href=\"#镜像管理\" class=\"headerlink\" title=\"镜像管理\"></a>镜像管理</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker pull centos:latest  # 从docker.io中下载centos镜像到本地</span><br><span class=\"line\">docker images              # 查看已下载的镜像</span><br><span class=\"line\">docker rmi [image_id]      # 删除镜像，指定镜像id</span><br><span class=\"line\"></span><br><span class=\"line\"># 删除所有镜像</span><br><span class=\"line\"># none 默认为 docker.io</span><br><span class=\"line\">docker rmi $(docker images | grep none | awk &#x27;&#123;print $3&#125;&#x27; | sort -r)</span><br><span class=\"line\"></span><br><span class=\"line\"># 连接进行进入命令行模式，exit命令退出。</span><br><span class=\"line\">docker run -t -i nginx:latest /bin/bash</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"通过容器创建镜像\"><a href=\"#通过容器创建镜像\" class=\"headerlink\" title=\"通过容器创建镜像\"></a>通过容器创建镜像</h5><p>两种方式：<br>1.从已经创建的容器中更新镜像，并且提交这个镜像<br>2.使用 Dockerfile 指令来创建一个新的镜像</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 第一种</span><br><span class=\"line\">docker commit -m=&quot;First Docker&quot; -a=&quot;wcjiang&quot; a6b0a6cfdacf wcjiang/nginx:v1.2.1</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 第二种</span><br><span class=\"line\">touch Dockerfile .dockerignore</span><br></pre></td></tr></table></figure>\n<p>.dockerignoren内容（用于忽略加入镜像的内容）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.git</span><br><span class=\"line\">node_modules</span><br><span class=\"line\">npm-debug.log</span><br></pre></td></tr></table></figure>\n<p>Dockerfile内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FROM node:8.4</span><br><span class=\"line\">COPY . /app</span><br><span class=\"line\">WORKDIR /app</span><br><span class=\"line\">RUN npm install --registry=https://registry.npm.taobao.org</span><br><span class=\"line\">EXPOSE 3000</span><br></pre></td></tr></table></figure>\n<h5 id=\"创建镜像\"><a href=\"#创建镜像\" class=\"headerlink\" title=\"创建镜像\"></a>创建镜像</h5><p>docker build -t koa-demo .</p>\n<h5 id=\"发布镜像\"><a href=\"#发布镜像\" class=\"headerlink\" title=\"发布镜像\"></a>发布镜像</h5><p>docker tag wcjiang&#x2F;nginx:v1.2.1 wcjiang&#x2F;nginx-test:lastest<br>docker login<br>docker push wcjiang&#x2F;nginx-test:lastest</p>\n<h5 id=\"镜像安装软件\"><a href=\"#镜像安装软件\" class=\"headerlink\" title=\"镜像安装软件\"></a>镜像安装软件</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 第一次需要运行这个命令，确保源的索引是最新的</span><br><span class=\"line\"># 同步 /etc/apt/sources.list 和 /etc/apt/sources.list.d 中列出的源的索引</span><br><span class=\"line\">apt-get update</span><br><span class=\"line\"># 做过上面更新同步之后，可以运行下面的命令了</span><br><span class=\"line\">apt-get install vim</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"容器管理\"><a href=\"#容器管理\" class=\"headerlink\" title=\"容器管理\"></a>容器管理</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 列出本机正在运行的容器</span><br><span class=\"line\">docker container ls</span><br><span class=\"line\"># 列出本机所有容器，包括终止运行的容器</span><br><span class=\"line\">docker container ls --all</span><br><span class=\"line\">docker start [containerID/Names] # 启动容器</span><br><span class=\"line\">docker stop [containerID/Names]  # 停止容器</span><br><span class=\"line\">docker rm [containerID/Names]    # 删除容器</span><br><span class=\"line\">docker logs [containerID/Names]  # 查看日志</span><br><span class=\"line\">docker exec -it [containerID/Names] /bin/bash  # 进入容器</span><br><span class=\"line\"></span><br><span class=\"line\"># 从正在运行的 Docker 容器里面，将文件拷贝到本机，注意后面有个【点】拷贝到当前目录</span><br><span class=\"line\">docker container cp [containID]:[/path/to/file] .</span><br><span class=\"line\"></span><br><span class=\"line\">docker run centos echo &quot;hello world&quot;  # 在docker容器中运行hello world!</span><br><span class=\"line\">docker run centos yum install -y wget # 在docker容器中，安装wget软件</span><br><span class=\"line\">docker ps                             # 列出包括未运行的容器</span><br><span class=\"line\">docker ps -a                          # 查看所有容器(包括正在运行和已停止的)</span><br><span class=\"line\">docker logs my-nginx                  # 查看 my-nginx 容器日志</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -i -t centos /bin/bash     # 启动一个容器</span><br><span class=\"line\">docker inspect centos                 # 检查运行中的镜像</span><br><span class=\"line\">docker commit 8bd centos              # 保存对容器的修改</span><br><span class=\"line\">docker commit -m &quot;n changed&quot; my-nginx my-nginx-image # 使用已经存在的容器创建一个镜像</span><br><span class=\"line\">docker inspect -f &#123;&#123;.State.Pid&#125;&#125; 44fc0f0582d9        # 获取id为 44fc0f0582d9 的PID进程编号</span><br><span class=\"line\"># 下载指定版本容器镜像</span><br><span class=\"line\">docker pull gitlab/gitlab-ce:11.2.3-ce.0</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"文件拷贝\"><a href=\"#文件拷贝\" class=\"headerlink\" title=\"文件拷贝\"></a>文件拷贝</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">从主机复制到容器 sudo docker cp host_path containerID:container_path</span><br><span class=\"line\">从容器复制到主机 sudo docker cp containerID:container_path host_path</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"Docker私有仓库搭建\"><a href=\"#Docker私有仓库搭建\" class=\"headerlink\" title=\"Docker私有仓库搭建\"></a>Docker私有仓库搭建</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Harbor 还有 humpback 和 rancher</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"临时运行服务\"><a href=\"#临时运行服务\" class=\"headerlink\" title=\"临时运行服务\"></a>临时运行服务</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  -p 5000:5000 \\</span><br><span class=\"line\">  --restart=always \\</span><br><span class=\"line\">  --name registry \\</span><br><span class=\"line\">  registry:2</span><br><span class=\"line\"></span><br><span class=\"line\">或者</span><br><span class=\"line\"></span><br><span class=\"line\"># ctrl+c退出自动删除容器</span><br><span class=\"line\">docker run --rm \\</span><br><span class=\"line\">    --name asynqmon \\</span><br><span class=\"line\">    -p 8080:8080 \\</span><br><span class=\"line\">    hibiken/asynqmon</span><br><span class=\"line\"></span><br><span class=\"line\"># 自定义存储位置</span><br><span class=\"line\">docker run -d \\</span><br><span class=\"line\">  -p 5000:5000 \\</span><br><span class=\"line\">  --restart=always \\</span><br><span class=\"line\">  --name registry \\</span><br><span class=\"line\">  -v $HOME/_docker/registry:/var/lib/registry \\</span><br><span class=\"line\">  registry:2</span><br><span class=\"line\"></span><br><span class=\"line\">docker run -d -p 5000:5000 --restart=always --name registry \\</span><br><span class=\"line\">    -v `pwd`/config.yml:/etc/docker/registry/config.yml \\</span><br><span class=\"line\">    registry:2</span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"使用docker实战\"><a href=\"#使用docker实战\" class=\"headerlink\" title=\"使用docker实战\"></a>使用docker实战</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-d, --detach=false      # 指定容器运行于前台还是后台，默认为false   </span><br><span class=\"line\">-i, --interactive=false # 打开STDIN，用于控制台交互  </span><br><span class=\"line\">-t, --tty=false         # 分配tty设备，该可以支持终端登录，默认为false  </span><br><span class=\"line\">-u, --user=&quot;&quot;           # 指定容器的用户  </span><br><span class=\"line\">-a, --attach=[]         # 登录容器（必须是以docker run -d启动的容器）</span><br><span class=\"line\">-w, --workdir=&quot;&quot;        # 指定容器的工作目录 </span><br><span class=\"line\">-c, --cpu-shares=0      # 设置容器CPU权重，在CPU共享场景使用  </span><br><span class=\"line\">-e, --env=[]            # 指定环境变量，容器中可以使用该环境变量  </span><br><span class=\"line\">-m, --memory=&quot;&quot;         # 指定容器的内存上限  </span><br><span class=\"line\">-P, --publish-all=false # 指定容器暴露的端口  </span><br><span class=\"line\">-p, --publish=[]        # 指定容器暴露的端口 </span><br><span class=\"line\">-h, --hostname=&quot;&quot;       # 指定容器的主机名  </span><br><span class=\"line\">-v, --volume=[]         # 给容器挂载存储卷，挂载到容器的某个目录  </span><br><span class=\"line\">--volumes-from=[]       # 给容器挂载其他容器上的卷，挂载到容器的某个目录</span><br><span class=\"line\">--cap-add=[]            # 添加权限，权限清单详见：http://linux.die.net/man/7/capabilities  </span><br><span class=\"line\">--cap-drop=[]           # 删除权限，权限清单详见：http://linux.die.net/man/7/capabilities  </span><br><span class=\"line\">--cidfile=&quot;&quot;            # 运行容器后，在指定文件中写入容器PID值，一种典型的监控系统用法  </span><br><span class=\"line\">--cpuset=&quot;&quot;             # 设置容器可以使用哪些CPU，此参数可以用来容器独占CPU  </span><br><span class=\"line\">--device=[]             # 添加主机设备给容器，相当于设备直通  </span><br><span class=\"line\">--dns=[]                # 指定容器的dns服务器  </span><br><span class=\"line\">--dns-search=[]         # 指定容器的dns搜索域名，写入到容器的/etc/resolv.conf文件  </span><br><span class=\"line\">--entrypoint=&quot;&quot;         # 覆盖image的入口点  </span><br><span class=\"line\">--env-file=[]           # 指定环境变量文件，文件格式为每行一个环境变量  </span><br><span class=\"line\">--expose=[]             # 指定容器暴露的端口，即修改镜像的暴露端口  </span><br><span class=\"line\">--link=[]               # 指定容器间的关联，使用其他容器的IP、env等信息  </span><br><span class=\"line\">--lxc-conf=[]           # 指定容器的配置文件，只有在指定--exec-driver=lxc时使用  </span><br><span class=\"line\">--name=&quot;&quot;               # 指定容器名字，后续可以通过名字进行容器管理，links特性需要使用名字  </span><br><span class=\"line\">--net=&quot;bridge&quot;          # 容器网络设置:</span><br><span class=\"line\">                            # bridge 使用docker daemon指定的网桥     </span><br><span class=\"line\">                            # host \t//容器使用主机的网络  </span><br><span class=\"line\">                            # container:NAME_or_ID  &gt;//使用其他容器的网路，共享IP和PORT等网络资源  </span><br><span class=\"line\">                            # none 容器使用自己的网络（类似--net=bridge），但是不进行配置 </span><br><span class=\"line\">--privileged=false      # 指定容器是否为特权容器，特权容器拥有所有的capabilities  </span><br><span class=\"line\">--restart=&quot;no&quot;          # 指定容器停止后的重启策略:</span><br><span class=\"line\">                            # no：容器退出时不重启  </span><br><span class=\"line\">                            # on-failure：容器故障退出（返回值非零）时重启 </span><br><span class=\"line\">                            # always：容器退出时总是重启  </span><br><span class=\"line\">--rm=false              # 指定容器停止后自动删除容器(不支持以docker run -d启动的容器)  </span><br><span class=\"line\">--sig-proxy=true        # 设置由代理接受并处理信号，但是SIGCHLD、SIGSTOP和SIGKILL不能被代理</span><br></pre></td></tr></table></figure>\n\n<p>参考：<a href=\"https://raw.githack.com/jaywcjlove/docker-tutorial/7a41060/index.html\">https://raw.githack.com/jaywcjlove/docker-tutorial/7a41060/index.html</a></p>\n"},{"title":"第25期：supervisor","date":"2023-05-22T07:38:25.000Z","_content":"#### supervisor启动查找supervisord.conf配置文件顺序\n```\n$CWD/supervisord.conf -> $CWD/etc/supervisord.conf -> /etc/supervisord.conf     # 优先级由高到低\n\nsupervisord -c /etc/supervisord.conf\nsupervisorctl -c /etc/supervisord.conf # 直接指定\n```\n\n#### supervisor作用？\n集中管理子进程\n\n#### supervisor的组件\n```\nsupervisord          # supervisor的服务端\nsupervisorctl        # supervisor的客户端\n```\n\n##### 配置文件详解\n```\n[unix_http_server]            \nfile=/tmp/supervisor.sock   ; socket文件作用：supervisorctl与supervisord(服务端)通信\n;chmod=0700                 ; socket文件权限\n;username=user              ; 使用supervisorctl时候的认证用户，默认不认证\n;password=123\n\n[supervisord]               ; 定义supervisord服务端运行时的参数\nlogfile=/tmp/supervisord.log; 定义supervisord主进程\nlogfile_maxbytes=50MB       ; 设置文件最大；超过50M则生成新的文件\npidfile=/tmp/supervisord.pid; pid文件\nnodaemon=false              ; 以守护进程运行\n\n[supervisorctl]              ;这个主要是针对supervisorctl的一些配置  \nserverurl=unix:///tmp/supervisor.sock ; 这个是supervisorctl本地连接supervisord的时候，本地UNIX socket路径，注意这个是和前面的[unix_http_server]对应的；默认值就是unix:///tmp/supervisor.sock\n\n[program:create_elastic_index]             \ncommand                 = /opt/php/bin/php /data/website/clou/artisan queue:work --queue=create_elastic_index --tries=3 --daemon    ;  command不能是后台进程\ndirectory               = /data/website/cloer-v2                                                                                    ; 进程运行前会切换到此目录\nprocess_name            = %(program_name)s_%(process_num)s\npriority                = 999            ; 进程启动优先级，优先级低的先启动\nnumprocs                = 2\nautostart               = true\nautorestart             = true            ; 如果为unexpected，只有当进程的退出码不在下面的exitcodes里面定义的退出码时才会被重启；true表进程只要挂掉就无条件重启。\n;exitcodes              = 0,2\nstdout_logfile          = /data/website/cloudedr-v2/storage/logs/supervisor-clip_crdex.log\nstdout_logfile_maxbytes = 10MB\nstderr_logfile          = /data/website/cloudeder-v2/storage/logs/supervisor-clip_crdex.log\nstderr_logfile_maxbytes = 10MB\numask=002\nuser=nobody\n```","source":"_posts/第25期：supervisor.md","raw":"---\ntitle: 第25期：supervisor\ndate: 2023-05-22 15:38:25\ntags:\n---\n#### supervisor启动查找supervisord.conf配置文件顺序\n```\n$CWD/supervisord.conf -> $CWD/etc/supervisord.conf -> /etc/supervisord.conf     # 优先级由高到低\n\nsupervisord -c /etc/supervisord.conf\nsupervisorctl -c /etc/supervisord.conf # 直接指定\n```\n\n#### supervisor作用？\n集中管理子进程\n\n#### supervisor的组件\n```\nsupervisord          # supervisor的服务端\nsupervisorctl        # supervisor的客户端\n```\n\n##### 配置文件详解\n```\n[unix_http_server]            \nfile=/tmp/supervisor.sock   ; socket文件作用：supervisorctl与supervisord(服务端)通信\n;chmod=0700                 ; socket文件权限\n;username=user              ; 使用supervisorctl时候的认证用户，默认不认证\n;password=123\n\n[supervisord]               ; 定义supervisord服务端运行时的参数\nlogfile=/tmp/supervisord.log; 定义supervisord主进程\nlogfile_maxbytes=50MB       ; 设置文件最大；超过50M则生成新的文件\npidfile=/tmp/supervisord.pid; pid文件\nnodaemon=false              ; 以守护进程运行\n\n[supervisorctl]              ;这个主要是针对supervisorctl的一些配置  \nserverurl=unix:///tmp/supervisor.sock ; 这个是supervisorctl本地连接supervisord的时候，本地UNIX socket路径，注意这个是和前面的[unix_http_server]对应的；默认值就是unix:///tmp/supervisor.sock\n\n[program:create_elastic_index]             \ncommand                 = /opt/php/bin/php /data/website/clou/artisan queue:work --queue=create_elastic_index --tries=3 --daemon    ;  command不能是后台进程\ndirectory               = /data/website/cloer-v2                                                                                    ; 进程运行前会切换到此目录\nprocess_name            = %(program_name)s_%(process_num)s\npriority                = 999            ; 进程启动优先级，优先级低的先启动\nnumprocs                = 2\nautostart               = true\nautorestart             = true            ; 如果为unexpected，只有当进程的退出码不在下面的exitcodes里面定义的退出码时才会被重启；true表进程只要挂掉就无条件重启。\n;exitcodes              = 0,2\nstdout_logfile          = /data/website/cloudedr-v2/storage/logs/supervisor-clip_crdex.log\nstdout_logfile_maxbytes = 10MB\nstderr_logfile          = /data/website/cloudeder-v2/storage/logs/supervisor-clip_crdex.log\nstderr_logfile_maxbytes = 10MB\numask=002\nuser=nobody\n```","slug":"第25期：supervisor","published":1,"updated":"2024-03-06T06:55:18.355Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvte3000hbkln58fd8fhb","content":"<h4 id=\"supervisor启动查找supervisord-conf配置文件顺序\"><a href=\"#supervisor启动查找supervisord-conf配置文件顺序\" class=\"headerlink\" title=\"supervisor启动查找supervisord.conf配置文件顺序\"></a>supervisor启动查找supervisord.conf配置文件顺序</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$CWD/supervisord.conf -&gt; $CWD/etc/supervisord.conf -&gt; /etc/supervisord.conf     # 优先级由高到低</span><br><span class=\"line\"></span><br><span class=\"line\">supervisord -c /etc/supervisord.conf</span><br><span class=\"line\">supervisorctl -c /etc/supervisord.conf # 直接指定</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"supervisor作用？\"><a href=\"#supervisor作用？\" class=\"headerlink\" title=\"supervisor作用？\"></a>supervisor作用？</h4><p>集中管理子进程</p>\n<h4 id=\"supervisor的组件\"><a href=\"#supervisor的组件\" class=\"headerlink\" title=\"supervisor的组件\"></a>supervisor的组件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisord          # supervisor的服务端</span><br><span class=\"line\">supervisorctl        # supervisor的客户端</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"配置文件详解\"><a href=\"#配置文件详解\" class=\"headerlink\" title=\"配置文件详解\"></a>配置文件详解</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[unix_http_server]            </span><br><span class=\"line\">file=/tmp/supervisor.sock   ; socket文件作用：supervisorctl与supervisord(服务端)通信</span><br><span class=\"line\">;chmod=0700                 ; socket文件权限</span><br><span class=\"line\">;username=user              ; 使用supervisorctl时候的认证用户，默认不认证</span><br><span class=\"line\">;password=123</span><br><span class=\"line\"></span><br><span class=\"line\">[supervisord]               ; 定义supervisord服务端运行时的参数</span><br><span class=\"line\">logfile=/tmp/supervisord.log; 定义supervisord主进程</span><br><span class=\"line\">logfile_maxbytes=50MB       ; 设置文件最大；超过50M则生成新的文件</span><br><span class=\"line\">pidfile=/tmp/supervisord.pid; pid文件</span><br><span class=\"line\">nodaemon=false              ; 以守护进程运行</span><br><span class=\"line\"></span><br><span class=\"line\">[supervisorctl]              ;这个主要是针对supervisorctl的一些配置  </span><br><span class=\"line\">serverurl=unix:///tmp/supervisor.sock ; 这个是supervisorctl本地连接supervisord的时候，本地UNIX socket路径，注意这个是和前面的[unix_http_server]对应的；默认值就是unix:///tmp/supervisor.sock</span><br><span class=\"line\"></span><br><span class=\"line\">[program:create_elastic_index]             </span><br><span class=\"line\">command                 = /opt/php/bin/php /data/website/clou/artisan queue:work --queue=create_elastic_index --tries=3 --daemon    ;  command不能是后台进程</span><br><span class=\"line\">directory               = /data/website/cloer-v2                                                                                    ; 进程运行前会切换到此目录</span><br><span class=\"line\">process_name            = %(program_name)s_%(process_num)s</span><br><span class=\"line\">priority                = 999            ; 进程启动优先级，优先级低的先启动</span><br><span class=\"line\">numprocs                = 2</span><br><span class=\"line\">autostart               = true</span><br><span class=\"line\">autorestart             = true            ; 如果为unexpected，只有当进程的退出码不在下面的exitcodes里面定义的退出码时才会被重启；true表进程只要挂掉就无条件重启。</span><br><span class=\"line\">;exitcodes              = 0,2</span><br><span class=\"line\">stdout_logfile          = /data/website/cloudedr-v2/storage/logs/supervisor-clip_crdex.log</span><br><span class=\"line\">stdout_logfile_maxbytes = 10MB</span><br><span class=\"line\">stderr_logfile          = /data/website/cloudeder-v2/storage/logs/supervisor-clip_crdex.log</span><br><span class=\"line\">stderr_logfile_maxbytes = 10MB</span><br><span class=\"line\">umask=002</span><br><span class=\"line\">user=nobody</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"supervisor启动查找supervisord-conf配置文件顺序\"><a href=\"#supervisor启动查找supervisord-conf配置文件顺序\" class=\"headerlink\" title=\"supervisor启动查找supervisord.conf配置文件顺序\"></a>supervisor启动查找supervisord.conf配置文件顺序</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$CWD/supervisord.conf -&gt; $CWD/etc/supervisord.conf -&gt; /etc/supervisord.conf     # 优先级由高到低</span><br><span class=\"line\"></span><br><span class=\"line\">supervisord -c /etc/supervisord.conf</span><br><span class=\"line\">supervisorctl -c /etc/supervisord.conf # 直接指定</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"supervisor作用？\"><a href=\"#supervisor作用？\" class=\"headerlink\" title=\"supervisor作用？\"></a>supervisor作用？</h4><p>集中管理子进程</p>\n<h4 id=\"supervisor的组件\"><a href=\"#supervisor的组件\" class=\"headerlink\" title=\"supervisor的组件\"></a>supervisor的组件</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">supervisord          # supervisor的服务端</span><br><span class=\"line\">supervisorctl        # supervisor的客户端</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"配置文件详解\"><a href=\"#配置文件详解\" class=\"headerlink\" title=\"配置文件详解\"></a>配置文件详解</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[unix_http_server]            </span><br><span class=\"line\">file=/tmp/supervisor.sock   ; socket文件作用：supervisorctl与supervisord(服务端)通信</span><br><span class=\"line\">;chmod=0700                 ; socket文件权限</span><br><span class=\"line\">;username=user              ; 使用supervisorctl时候的认证用户，默认不认证</span><br><span class=\"line\">;password=123</span><br><span class=\"line\"></span><br><span class=\"line\">[supervisord]               ; 定义supervisord服务端运行时的参数</span><br><span class=\"line\">logfile=/tmp/supervisord.log; 定义supervisord主进程</span><br><span class=\"line\">logfile_maxbytes=50MB       ; 设置文件最大；超过50M则生成新的文件</span><br><span class=\"line\">pidfile=/tmp/supervisord.pid; pid文件</span><br><span class=\"line\">nodaemon=false              ; 以守护进程运行</span><br><span class=\"line\"></span><br><span class=\"line\">[supervisorctl]              ;这个主要是针对supervisorctl的一些配置  </span><br><span class=\"line\">serverurl=unix:///tmp/supervisor.sock ; 这个是supervisorctl本地连接supervisord的时候，本地UNIX socket路径，注意这个是和前面的[unix_http_server]对应的；默认值就是unix:///tmp/supervisor.sock</span><br><span class=\"line\"></span><br><span class=\"line\">[program:create_elastic_index]             </span><br><span class=\"line\">command                 = /opt/php/bin/php /data/website/clou/artisan queue:work --queue=create_elastic_index --tries=3 --daemon    ;  command不能是后台进程</span><br><span class=\"line\">directory               = /data/website/cloer-v2                                                                                    ; 进程运行前会切换到此目录</span><br><span class=\"line\">process_name            = %(program_name)s_%(process_num)s</span><br><span class=\"line\">priority                = 999            ; 进程启动优先级，优先级低的先启动</span><br><span class=\"line\">numprocs                = 2</span><br><span class=\"line\">autostart               = true</span><br><span class=\"line\">autorestart             = true            ; 如果为unexpected，只有当进程的退出码不在下面的exitcodes里面定义的退出码时才会被重启；true表进程只要挂掉就无条件重启。</span><br><span class=\"line\">;exitcodes              = 0,2</span><br><span class=\"line\">stdout_logfile          = /data/website/cloudedr-v2/storage/logs/supervisor-clip_crdex.log</span><br><span class=\"line\">stdout_logfile_maxbytes = 10MB</span><br><span class=\"line\">stderr_logfile          = /data/website/cloudeder-v2/storage/logs/supervisor-clip_crdex.log</span><br><span class=\"line\">stderr_logfile_maxbytes = 10MB</span><br><span class=\"line\">umask=002</span><br><span class=\"line\">user=nobody</span><br></pre></td></tr></table></figure>"},{"title":"第26期：ansible","date":"2023-05-22T08:30:48.000Z","_content":"#### ansible介绍\nansible，就是通过ssh登录到远程主机执行命令的工具。\n\n#### centos 安装ansible和配置\n```\nyum install ansible -y\n```\n\n配置Ansible管理节点和主机的连接，在管理节点执行：\n```\nssh-keygen\nssh-copy-id root@ip # 复制Ansible管理节点的公钥到远程主机，这样它登录到远程主机就不用密码了。\n```\n\n设置远程主机地址的配置文件默认在`/etc/ansible/hosts`\n```\n# 不限定组的写法\n192.168.31.166\n\n# 命名一个组：web，一个组内可以设置多个远程主机节点\n[web]\n192.168.31.167\n```\n\n#### ansible命令\n```\nansible all -m ping # 检查ansible能否ping通管理主机，all表示hosts文件内写的所有主机\nansible all -a \"ls /opt/zz\" # 在所有主机下执行命令\nansible web -m copy -a \"src=/etc/hosts dest=/tmp/hosts\" # 拷贝文件到web组的/tmp/hosts\nansible web -m yum -a \"name=acme state=present\" # 在web组安装acme\nansible all -m user -a \"name=foo password=<crypted password here>\" # 添加用户\nansible web -m service -a \"name=httpd state=started\" # 启动web组的httpd服务\nansible all -m setup # 查看远程主机的全部系统信息\n```\n#### ansible 脚本编排 之ansible-playbook\nansible脚本名字叫playbook，以yml或yaml形式书写。\n\n执行脚本playbook命令\n```\nansible-playbook deploy.yml\n```\n\n#### ansible-playbook.yml书写注意\n- 文件名以`yml`或`yaml`结尾\n- 以`---`开头表示文件开头\n- `#` 表示注释\n- 都是以`-`加空格再写内容\n- hosts, variables, roles tasks等对象都是以`:`分割，冒号后要加一个空格\n- 执行脚本文件输出绿色代表成功，红色为失败\n\n核心的对象元素\n```\nhosts 主机组，如- hosts: node1\ntasks 任务列表\n```\n#### ansible-playbook使用\n```\nansible-playbook -i hosts deploy.yml\n```\n说明:\n- 命令后加选项 `--syntax-check` 可以检查语法，如 `ansible-playbook deploy.yml --syntax-check`\n- `--start-at=\"Install kubelet, kubeadm and kubectl\"`从指定任务开始执行\n\n##### 示例1：安装软件\n编辑ansible-demo.yaml\n```\n---\n- hosts: all\n  tasks:\n  - name: Install docker and its dependecies\n    yum: name=docker-ce state=present\n```\n\n在ansible-demo.yaml同级目录下，新建hosts文件，内容：\n```\n[masters]\nmaster ansible_host=192.168.1.146 ansible_user=root\n\n[workers]\nworker1 ansible_host=192.168.1.180 ansible_user=root\nworker2 ansible_host=192.168.1.181 ansible_user=root\n```\n\n执行：`ansible-playbook -i hosts ansible-demo.yaml` # -i 指定host文件\n\n- 问：`yum: name=docker-ce state=present`可以替换成`shell: yum install docker-ce -y`?\n\n- 答：不好，建议使用yum模块而不是yum命令。yum命令可能进行重新安装升级版本。yum模块的`state=present`代表如果安装的软件存在则不进行安装，如果不存在则安装。\n\n##### 示例1.2：安装软件-安装多个软件\n- name: Install required dependiences\n    yum: name={{ item }} state=present\n    with_items:\n      - yum-utils\n      - device-mapper-persistent-data\n      - lvm2\n\n##### 示例2：复制文件-将ansible管理节点的文件通过ansible复制到hosts列表机器\n编辑ansible-demo.yaml\n```\n---\n- hosts: masters # 代表只操纵masters组下的机器\n  tasks:\n  - name: copy file to masters\n    copy: \n      src: /opt/ansible-demo/hosts\n      dest: /tmp/hosts\n```\n执行：`ansible-playbook -i hosts ansible-demo.yaml`\n\n##### 示例3：重启服务-重启masters组的kubelet服务\n编辑ansible-demo.yaml\n```\n---\n- hosts: masters # 代表只操纵masters组下的机器\n  tasks:\n  - name: Restart kubelet\n    service:\n      name: kubelet\n      state: restarted\n```\n\n##### 示例4：执行shell-执行单条shell命令\n编辑ansible-demo.yaml\n```\n---\n- hosts: masters \n  tasks:\n  - name: Add docker repo /etc/yum.repos.d\n    shell: yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n```\n##### 示例5：执行shell-执行多条shell命令\n编辑ansible-demo.yaml\n```\n---\n- hosts: masters \n  tasks:\n  - name: set bridge filter rules\n    shell: |\n      cat << EOF > /etc/sysctl.d/99-kubernetes-cri.conf\n      net.bridge.bridge-nf-call-ip6tables = 1\n      net.bridge.bridge-nf-call-iptables = 1\n      net.ipv4.ip_forward = 1\n      user.max_user_namespaces=28633\n      EOF\n      sysctl -p /etc/sysctl.d/99-kubernetes-cri.conf\n```\n\n##### 示例6：执行shell-执行多条shell命令\n编辑ansible-demo.yaml\n```\n---\n- hosts: masters \n  tasks:\n  - name: set bridge filter rules\n    shell: |\n      cat << EOF > /etc/sysctl.d/99-kubernetes-cri.conf\n      net.bridge.bridge-nf-call-ip6tables = 1\n      net.bridge.bridge-nf-call-iptables = 1\n      net.ipv4.ip_forward = 1\n      user.max_user_namespaces=28633\n      EOF\n      sysctl -p /etc/sysctl.d/99-kubernetes-cri.conf\n```\n\n##### 示例7：保留结果-将命令执行后输出的内容保存到一个变量内 + 打印 + 输出到文件\n编辑ansible-demo.yaml\n```\n---\n- hosts: masters \n  tasks:\n  - name: Extract the join command\n    become: true\n    command: \"kubeadm token create --print-join-command\"\n    register: join_command # 存储变量\n  - name: show join command\n    debug:\n      var: join_command  # 打印变量\n  - name: Save kubeadm join command for cluster\n    local_action: copy content={{ join_command.stdout_lines | last | trim }} dest=command.txt # 将join_command的内容处理后输出到文件并保存在当前主机的执行目录下\n```\n\n#### expect\n```\n# 输入密码后，ssh远程执行命令\n#!/bin/bash\n  \n[ -e /bin/expect ] || { apt update; apt install -y expect > /dev/null 2>&1; }\n\npasswd='testing123'\n\n/usr/bin/expect <<-EOF\n\nset time 30\n\nspawn ssh root@192.168.1.181 echo \"rickyccc\" > /tmp/a.log\nexpect {\n\"*yes/no\" { semd \"yes\\r\"; exp_continue }\n\"*password:\" { send \"$passwd\\r\" }\n}\n\nexpect eof\nEOF\n====================================================================\n\n# 分发公钥到多个节点机器\n# 编写host文件\n192.168.1.180 root testing123\n192.168.1.181 root testing123\n\n# 编写脚本\n#!/bin/bash\n\nif [ ! -f ~/.ssh/id_rsa ];then\n ssh-keygen -t rsa -P \"\" -f ~/.ssh/id_rsa\nelse\n echo \"id_rsa has created ...\"\nfi\n\nwhile read line\n  do\n    ip=`echo $line | cut -d \" \" -f 1`\n    user=`echo $line | cut -d \" \" -f 2`\n    passwd=`echo $line | cut -d \" \" -f 3`\n\n\texpect <<EOF\n      set timeout 10\n      spawn ssh-copy-id $user@$ip\n      expect {\n        \"yes/no\" { send \"yes\\n\";exp_continue }\n        \"password\" { send \"$passwd\\n\" }\n      }\n     expect \"password\" { send \"$passwd\\n\" }\nEOF\n  done < host\n```\n参考：\nhttps://austinsnerdythings.com/2022/04/25/deploying-a-kubernetes-cluster-within-proxmox-using-ansible/\n\nhttps://getansible.com/README","source":"_posts/第26期：ansible.md","raw":"---\ntitle: 第26期：ansible\ndate: 2023-05-22 16:30:48\ntags:\n---\n#### ansible介绍\nansible，就是通过ssh登录到远程主机执行命令的工具。\n\n#### centos 安装ansible和配置\n```\nyum install ansible -y\n```\n\n配置Ansible管理节点和主机的连接，在管理节点执行：\n```\nssh-keygen\nssh-copy-id root@ip # 复制Ansible管理节点的公钥到远程主机，这样它登录到远程主机就不用密码了。\n```\n\n设置远程主机地址的配置文件默认在`/etc/ansible/hosts`\n```\n# 不限定组的写法\n192.168.31.166\n\n# 命名一个组：web，一个组内可以设置多个远程主机节点\n[web]\n192.168.31.167\n```\n\n#### ansible命令\n```\nansible all -m ping # 检查ansible能否ping通管理主机，all表示hosts文件内写的所有主机\nansible all -a \"ls /opt/zz\" # 在所有主机下执行命令\nansible web -m copy -a \"src=/etc/hosts dest=/tmp/hosts\" # 拷贝文件到web组的/tmp/hosts\nansible web -m yum -a \"name=acme state=present\" # 在web组安装acme\nansible all -m user -a \"name=foo password=<crypted password here>\" # 添加用户\nansible web -m service -a \"name=httpd state=started\" # 启动web组的httpd服务\nansible all -m setup # 查看远程主机的全部系统信息\n```\n#### ansible 脚本编排 之ansible-playbook\nansible脚本名字叫playbook，以yml或yaml形式书写。\n\n执行脚本playbook命令\n```\nansible-playbook deploy.yml\n```\n\n#### ansible-playbook.yml书写注意\n- 文件名以`yml`或`yaml`结尾\n- 以`---`开头表示文件开头\n- `#` 表示注释\n- 都是以`-`加空格再写内容\n- hosts, variables, roles tasks等对象都是以`:`分割，冒号后要加一个空格\n- 执行脚本文件输出绿色代表成功，红色为失败\n\n核心的对象元素\n```\nhosts 主机组，如- hosts: node1\ntasks 任务列表\n```\n#### ansible-playbook使用\n```\nansible-playbook -i hosts deploy.yml\n```\n说明:\n- 命令后加选项 `--syntax-check` 可以检查语法，如 `ansible-playbook deploy.yml --syntax-check`\n- `--start-at=\"Install kubelet, kubeadm and kubectl\"`从指定任务开始执行\n\n##### 示例1：安装软件\n编辑ansible-demo.yaml\n```\n---\n- hosts: all\n  tasks:\n  - name: Install docker and its dependecies\n    yum: name=docker-ce state=present\n```\n\n在ansible-demo.yaml同级目录下，新建hosts文件，内容：\n```\n[masters]\nmaster ansible_host=192.168.1.146 ansible_user=root\n\n[workers]\nworker1 ansible_host=192.168.1.180 ansible_user=root\nworker2 ansible_host=192.168.1.181 ansible_user=root\n```\n\n执行：`ansible-playbook -i hosts ansible-demo.yaml` # -i 指定host文件\n\n- 问：`yum: name=docker-ce state=present`可以替换成`shell: yum install docker-ce -y`?\n\n- 答：不好，建议使用yum模块而不是yum命令。yum命令可能进行重新安装升级版本。yum模块的`state=present`代表如果安装的软件存在则不进行安装，如果不存在则安装。\n\n##### 示例1.2：安装软件-安装多个软件\n- name: Install required dependiences\n    yum: name={{ item }} state=present\n    with_items:\n      - yum-utils\n      - device-mapper-persistent-data\n      - lvm2\n\n##### 示例2：复制文件-将ansible管理节点的文件通过ansible复制到hosts列表机器\n编辑ansible-demo.yaml\n```\n---\n- hosts: masters # 代表只操纵masters组下的机器\n  tasks:\n  - name: copy file to masters\n    copy: \n      src: /opt/ansible-demo/hosts\n      dest: /tmp/hosts\n```\n执行：`ansible-playbook -i hosts ansible-demo.yaml`\n\n##### 示例3：重启服务-重启masters组的kubelet服务\n编辑ansible-demo.yaml\n```\n---\n- hosts: masters # 代表只操纵masters组下的机器\n  tasks:\n  - name: Restart kubelet\n    service:\n      name: kubelet\n      state: restarted\n```\n\n##### 示例4：执行shell-执行单条shell命令\n编辑ansible-demo.yaml\n```\n---\n- hosts: masters \n  tasks:\n  - name: Add docker repo /etc/yum.repos.d\n    shell: yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo\n```\n##### 示例5：执行shell-执行多条shell命令\n编辑ansible-demo.yaml\n```\n---\n- hosts: masters \n  tasks:\n  - name: set bridge filter rules\n    shell: |\n      cat << EOF > /etc/sysctl.d/99-kubernetes-cri.conf\n      net.bridge.bridge-nf-call-ip6tables = 1\n      net.bridge.bridge-nf-call-iptables = 1\n      net.ipv4.ip_forward = 1\n      user.max_user_namespaces=28633\n      EOF\n      sysctl -p /etc/sysctl.d/99-kubernetes-cri.conf\n```\n\n##### 示例6：执行shell-执行多条shell命令\n编辑ansible-demo.yaml\n```\n---\n- hosts: masters \n  tasks:\n  - name: set bridge filter rules\n    shell: |\n      cat << EOF > /etc/sysctl.d/99-kubernetes-cri.conf\n      net.bridge.bridge-nf-call-ip6tables = 1\n      net.bridge.bridge-nf-call-iptables = 1\n      net.ipv4.ip_forward = 1\n      user.max_user_namespaces=28633\n      EOF\n      sysctl -p /etc/sysctl.d/99-kubernetes-cri.conf\n```\n\n##### 示例7：保留结果-将命令执行后输出的内容保存到一个变量内 + 打印 + 输出到文件\n编辑ansible-demo.yaml\n```\n---\n- hosts: masters \n  tasks:\n  - name: Extract the join command\n    become: true\n    command: \"kubeadm token create --print-join-command\"\n    register: join_command # 存储变量\n  - name: show join command\n    debug:\n      var: join_command  # 打印变量\n  - name: Save kubeadm join command for cluster\n    local_action: copy content={{ join_command.stdout_lines | last | trim }} dest=command.txt # 将join_command的内容处理后输出到文件并保存在当前主机的执行目录下\n```\n\n#### expect\n```\n# 输入密码后，ssh远程执行命令\n#!/bin/bash\n  \n[ -e /bin/expect ] || { apt update; apt install -y expect > /dev/null 2>&1; }\n\npasswd='testing123'\n\n/usr/bin/expect <<-EOF\n\nset time 30\n\nspawn ssh root@192.168.1.181 echo \"rickyccc\" > /tmp/a.log\nexpect {\n\"*yes/no\" { semd \"yes\\r\"; exp_continue }\n\"*password:\" { send \"$passwd\\r\" }\n}\n\nexpect eof\nEOF\n====================================================================\n\n# 分发公钥到多个节点机器\n# 编写host文件\n192.168.1.180 root testing123\n192.168.1.181 root testing123\n\n# 编写脚本\n#!/bin/bash\n\nif [ ! -f ~/.ssh/id_rsa ];then\n ssh-keygen -t rsa -P \"\" -f ~/.ssh/id_rsa\nelse\n echo \"id_rsa has created ...\"\nfi\n\nwhile read line\n  do\n    ip=`echo $line | cut -d \" \" -f 1`\n    user=`echo $line | cut -d \" \" -f 2`\n    passwd=`echo $line | cut -d \" \" -f 3`\n\n\texpect <<EOF\n      set timeout 10\n      spawn ssh-copy-id $user@$ip\n      expect {\n        \"yes/no\" { send \"yes\\n\";exp_continue }\n        \"password\" { send \"$passwd\\n\" }\n      }\n     expect \"password\" { send \"$passwd\\n\" }\nEOF\n  done < host\n```\n参考：\nhttps://austinsnerdythings.com/2022/04/25/deploying-a-kubernetes-cluster-within-proxmox-using-ansible/\n\nhttps://getansible.com/README","slug":"第26期：ansible","published":1,"updated":"2024-03-06T06:55:18.356Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvte4000ibkln4nb55w8e","content":"<h4 id=\"ansible介绍\"><a href=\"#ansible介绍\" class=\"headerlink\" title=\"ansible介绍\"></a>ansible介绍</h4><p>ansible，就是通过ssh登录到远程主机执行命令的工具。</p>\n<h4 id=\"centos-安装ansible和配置\"><a href=\"#centos-安装ansible和配置\" class=\"headerlink\" title=\"centos 安装ansible和配置\"></a>centos 安装ansible和配置</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install ansible -y</span><br></pre></td></tr></table></figure>\n\n<p>配置Ansible管理节点和主机的连接，在管理节点执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen</span><br><span class=\"line\">ssh-copy-id root@ip # 复制Ansible管理节点的公钥到远程主机，这样它登录到远程主机就不用密码了。</span><br></pre></td></tr></table></figure>\n\n<p>设置远程主机地址的配置文件默认在<code>/etc/ansible/hosts</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 不限定组的写法</span><br><span class=\"line\">192.168.31.166</span><br><span class=\"line\"></span><br><span class=\"line\"># 命名一个组：web，一个组内可以设置多个远程主机节点</span><br><span class=\"line\">[web]</span><br><span class=\"line\">192.168.31.167</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ansible命令\"><a href=\"#ansible命令\" class=\"headerlink\" title=\"ansible命令\"></a>ansible命令</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible all -m ping # 检查ansible能否ping通管理主机，all表示hosts文件内写的所有主机</span><br><span class=\"line\">ansible all -a &quot;ls /opt/zz&quot; # 在所有主机下执行命令</span><br><span class=\"line\">ansible web -m copy -a &quot;src=/etc/hosts dest=/tmp/hosts&quot; # 拷贝文件到web组的/tmp/hosts</span><br><span class=\"line\">ansible web -m yum -a &quot;name=acme state=present&quot; # 在web组安装acme</span><br><span class=\"line\">ansible all -m user -a &quot;name=foo password=&lt;crypted password here&gt;&quot; # 添加用户</span><br><span class=\"line\">ansible web -m service -a &quot;name=httpd state=started&quot; # 启动web组的httpd服务</span><br><span class=\"line\">ansible all -m setup # 查看远程主机的全部系统信息</span><br></pre></td></tr></table></figure>\n<h4 id=\"ansible-脚本编排-之ansible-playbook\"><a href=\"#ansible-脚本编排-之ansible-playbook\" class=\"headerlink\" title=\"ansible 脚本编排 之ansible-playbook\"></a>ansible 脚本编排 之ansible-playbook</h4><p>ansible脚本名字叫playbook，以yml或yaml形式书写。</p>\n<p>执行脚本playbook命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible-playbook deploy.yml</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ansible-playbook-yml书写注意\"><a href=\"#ansible-playbook-yml书写注意\" class=\"headerlink\" title=\"ansible-playbook.yml书写注意\"></a>ansible-playbook.yml书写注意</h4><ul>\n<li>文件名以<code>yml</code>或<code>yaml</code>结尾</li>\n<li>以<code>---</code>开头表示文件开头</li>\n<li><code>#</code> 表示注释</li>\n<li>都是以<code>-</code>加空格再写内容</li>\n<li>hosts, variables, roles tasks等对象都是以<code>:</code>分割，冒号后要加一个空格</li>\n<li>执行脚本文件输出绿色代表成功，红色为失败</li>\n</ul>\n<p>核心的对象元素</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hosts 主机组，如- hosts: node1</span><br><span class=\"line\">tasks 任务列表</span><br></pre></td></tr></table></figure>\n<h4 id=\"ansible-playbook使用\"><a href=\"#ansible-playbook使用\" class=\"headerlink\" title=\"ansible-playbook使用\"></a>ansible-playbook使用</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible-playbook -i hosts deploy.yml</span><br></pre></td></tr></table></figure>\n<p>说明:</p>\n<ul>\n<li>命令后加选项 <code>--syntax-check</code> 可以检查语法，如 <code>ansible-playbook deploy.yml --syntax-check</code></li>\n<li><code>--start-at=&quot;Install kubelet, kubeadm and kubectl&quot;</code>从指定任务开始执行</li>\n</ul>\n<h5 id=\"示例1：安装软件\"><a href=\"#示例1：安装软件\" class=\"headerlink\" title=\"示例1：安装软件\"></a>示例1：安装软件</h5><p>编辑ansible-demo.yaml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">- hosts: all</span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">  - name: Install docker and its dependecies</span><br><span class=\"line\">    yum: name=docker-ce state=present</span><br></pre></td></tr></table></figure>\n\n<p>在ansible-demo.yaml同级目录下，新建hosts文件，内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[masters]</span><br><span class=\"line\">master ansible_host=192.168.1.146 ansible_user=root</span><br><span class=\"line\"></span><br><span class=\"line\">[workers]</span><br><span class=\"line\">worker1 ansible_host=192.168.1.180 ansible_user=root</span><br><span class=\"line\">worker2 ansible_host=192.168.1.181 ansible_user=root</span><br></pre></td></tr></table></figure>\n\n<p>执行：<code>ansible-playbook -i hosts ansible-demo.yaml</code> # -i 指定host文件</p>\n<ul>\n<li><p>问：<code>yum: name=docker-ce state=present</code>可以替换成<code>shell: yum install docker-ce -y</code>?</p>\n</li>\n<li><p>答：不好，建议使用yum模块而不是yum命令。yum命令可能进行重新安装升级版本。yum模块的<code>state=present</code>代表如果安装的软件存在则不进行安装，如果不存在则安装。</p>\n</li>\n</ul>\n<h5 id=\"示例1-2：安装软件-安装多个软件\"><a href=\"#示例1-2：安装软件-安装多个软件\" class=\"headerlink\" title=\"示例1.2：安装软件-安装多个软件\"></a>示例1.2：安装软件-安装多个软件</h5><ul>\n<li>name: Install required dependiences<br>  yum: name&#x3D; state&#x3D;present<br>  with_items:<br>- yum-utils<br>- device-mapper-persistent-data<br>- lvm2</li>\n</ul>\n<h5 id=\"示例2：复制文件-将ansible管理节点的文件通过ansible复制到hosts列表机器\"><a href=\"#示例2：复制文件-将ansible管理节点的文件通过ansible复制到hosts列表机器\" class=\"headerlink\" title=\"示例2：复制文件-将ansible管理节点的文件通过ansible复制到hosts列表机器\"></a>示例2：复制文件-将ansible管理节点的文件通过ansible复制到hosts列表机器</h5><p>编辑ansible-demo.yaml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">- hosts: masters # 代表只操纵masters组下的机器</span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">  - name: copy file to masters</span><br><span class=\"line\">    copy: </span><br><span class=\"line\">      src: /opt/ansible-demo/hosts</span><br><span class=\"line\">      dest: /tmp/hosts</span><br></pre></td></tr></table></figure>\n<p>执行：<code>ansible-playbook -i hosts ansible-demo.yaml</code></p>\n<h5 id=\"示例3：重启服务-重启masters组的kubelet服务\"><a href=\"#示例3：重启服务-重启masters组的kubelet服务\" class=\"headerlink\" title=\"示例3：重启服务-重启masters组的kubelet服务\"></a>示例3：重启服务-重启masters组的kubelet服务</h5><p>编辑ansible-demo.yaml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">- hosts: masters # 代表只操纵masters组下的机器</span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">  - name: Restart kubelet</span><br><span class=\"line\">    service:</span><br><span class=\"line\">      name: kubelet</span><br><span class=\"line\">      state: restarted</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"示例4：执行shell-执行单条shell命令\"><a href=\"#示例4：执行shell-执行单条shell命令\" class=\"headerlink\" title=\"示例4：执行shell-执行单条shell命令\"></a>示例4：执行shell-执行单条shell命令</h5><p>编辑ansible-demo.yaml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">- hosts: masters </span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">  - name: Add docker repo /etc/yum.repos.d</span><br><span class=\"line\">    shell: yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n<h5 id=\"示例5：执行shell-执行多条shell命令\"><a href=\"#示例5：执行shell-执行多条shell命令\" class=\"headerlink\" title=\"示例5：执行shell-执行多条shell命令\"></a>示例5：执行shell-执行多条shell命令</h5><p>编辑ansible-demo.yaml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">- hosts: masters </span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">  - name: set bridge filter rules</span><br><span class=\"line\">    shell: |</span><br><span class=\"line\">      cat &lt;&lt; EOF &gt; /etc/sysctl.d/99-kubernetes-cri.conf</span><br><span class=\"line\">      net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class=\"line\">      net.bridge.bridge-nf-call-iptables = 1</span><br><span class=\"line\">      net.ipv4.ip_forward = 1</span><br><span class=\"line\">      user.max_user_namespaces=28633</span><br><span class=\"line\">      EOF</span><br><span class=\"line\">      sysctl -p /etc/sysctl.d/99-kubernetes-cri.conf</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"示例6：执行shell-执行多条shell命令\"><a href=\"#示例6：执行shell-执行多条shell命令\" class=\"headerlink\" title=\"示例6：执行shell-执行多条shell命令\"></a>示例6：执行shell-执行多条shell命令</h5><p>编辑ansible-demo.yaml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">- hosts: masters </span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">  - name: set bridge filter rules</span><br><span class=\"line\">    shell: |</span><br><span class=\"line\">      cat &lt;&lt; EOF &gt; /etc/sysctl.d/99-kubernetes-cri.conf</span><br><span class=\"line\">      net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class=\"line\">      net.bridge.bridge-nf-call-iptables = 1</span><br><span class=\"line\">      net.ipv4.ip_forward = 1</span><br><span class=\"line\">      user.max_user_namespaces=28633</span><br><span class=\"line\">      EOF</span><br><span class=\"line\">      sysctl -p /etc/sysctl.d/99-kubernetes-cri.conf</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"示例7：保留结果-将命令执行后输出的内容保存到一个变量内-打印-输出到文件\"><a href=\"#示例7：保留结果-将命令执行后输出的内容保存到一个变量内-打印-输出到文件\" class=\"headerlink\" title=\"示例7：保留结果-将命令执行后输出的内容保存到一个变量内 + 打印 + 输出到文件\"></a>示例7：保留结果-将命令执行后输出的内容保存到一个变量内 + 打印 + 输出到文件</h5><p>编辑ansible-demo.yaml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">- hosts: masters </span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">  - name: Extract the join command</span><br><span class=\"line\">    become: true</span><br><span class=\"line\">    command: &quot;kubeadm token create --print-join-command&quot;</span><br><span class=\"line\">    register: join_command # 存储变量</span><br><span class=\"line\">  - name: show join command</span><br><span class=\"line\">    debug:</span><br><span class=\"line\">      var: join_command  # 打印变量</span><br><span class=\"line\">  - name: Save kubeadm join command for cluster</span><br><span class=\"line\">    local_action: copy content=&#123;&#123; join_command.stdout_lines | last | trim &#125;&#125; dest=command.txt # 将join_command的内容处理后输出到文件并保存在当前主机的执行目录下</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"expect\"><a href=\"#expect\" class=\"headerlink\" title=\"expect\"></a>expect</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 输入密码后，ssh远程执行命令</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">  </span><br><span class=\"line\">[ -e /bin/expect ] || &#123; apt update; apt install -y expect &gt; /dev/null 2&gt;&amp;1; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">passwd=&#x27;testing123&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/bin/expect &lt;&lt;-EOF</span><br><span class=\"line\"></span><br><span class=\"line\">set time 30</span><br><span class=\"line\"></span><br><span class=\"line\">spawn ssh root@192.168.1.181 echo &quot;rickyccc&quot; &gt; /tmp/a.log</span><br><span class=\"line\">expect &#123;</span><br><span class=\"line\">&quot;*yes/no&quot; &#123; semd &quot;yes\\r&quot;; exp_continue &#125;</span><br><span class=\"line\">&quot;*password:&quot; &#123; send &quot;$passwd\\r&quot; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">expect eof</span><br><span class=\"line\">EOF</span><br><span class=\"line\">====================================================================</span><br><span class=\"line\"></span><br><span class=\"line\"># 分发公钥到多个节点机器</span><br><span class=\"line\"># 编写host文件</span><br><span class=\"line\">192.168.1.180 root testing123</span><br><span class=\"line\">192.168.1.181 root testing123</span><br><span class=\"line\"></span><br><span class=\"line\"># 编写脚本</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">if [ ! -f ~/.ssh/id_rsa ];then</span><br><span class=\"line\"> ssh-keygen -t rsa -P &quot;&quot; -f ~/.ssh/id_rsa</span><br><span class=\"line\">else</span><br><span class=\"line\"> echo &quot;id_rsa has created ...&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">while read line</span><br><span class=\"line\">  do</span><br><span class=\"line\">    ip=`echo $line | cut -d &quot; &quot; -f 1`</span><br><span class=\"line\">    user=`echo $line | cut -d &quot; &quot; -f 2`</span><br><span class=\"line\">    passwd=`echo $line | cut -d &quot; &quot; -f 3`</span><br><span class=\"line\"></span><br><span class=\"line\">\texpect &lt;&lt;EOF</span><br><span class=\"line\">      set timeout 10</span><br><span class=\"line\">      spawn ssh-copy-id $user@$ip</span><br><span class=\"line\">      expect &#123;</span><br><span class=\"line\">        &quot;yes/no&quot; &#123; send &quot;yes\\n&quot;;exp_continue &#125;</span><br><span class=\"line\">        &quot;password&quot; &#123; send &quot;$passwd\\n&quot; &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">     expect &quot;password&quot; &#123; send &quot;$passwd\\n&quot; &#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">  done &lt; host</span><br></pre></td></tr></table></figure>\n<p>参考：<br><a href=\"https://austinsnerdythings.com/2022/04/25/deploying-a-kubernetes-cluster-within-proxmox-using-ansible/\">https://austinsnerdythings.com/2022/04/25/deploying-a-kubernetes-cluster-within-proxmox-using-ansible/</a></p>\n<p><a href=\"https://getansible.com/README\">https://getansible.com/README</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"ansible介绍\"><a href=\"#ansible介绍\" class=\"headerlink\" title=\"ansible介绍\"></a>ansible介绍</h4><p>ansible，就是通过ssh登录到远程主机执行命令的工具。</p>\n<h4 id=\"centos-安装ansible和配置\"><a href=\"#centos-安装ansible和配置\" class=\"headerlink\" title=\"centos 安装ansible和配置\"></a>centos 安装ansible和配置</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install ansible -y</span><br></pre></td></tr></table></figure>\n\n<p>配置Ansible管理节点和主机的连接，在管理节点执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh-keygen</span><br><span class=\"line\">ssh-copy-id root@ip # 复制Ansible管理节点的公钥到远程主机，这样它登录到远程主机就不用密码了。</span><br></pre></td></tr></table></figure>\n\n<p>设置远程主机地址的配置文件默认在<code>/etc/ansible/hosts</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 不限定组的写法</span><br><span class=\"line\">192.168.31.166</span><br><span class=\"line\"></span><br><span class=\"line\"># 命名一个组：web，一个组内可以设置多个远程主机节点</span><br><span class=\"line\">[web]</span><br><span class=\"line\">192.168.31.167</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ansible命令\"><a href=\"#ansible命令\" class=\"headerlink\" title=\"ansible命令\"></a>ansible命令</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible all -m ping # 检查ansible能否ping通管理主机，all表示hosts文件内写的所有主机</span><br><span class=\"line\">ansible all -a &quot;ls /opt/zz&quot; # 在所有主机下执行命令</span><br><span class=\"line\">ansible web -m copy -a &quot;src=/etc/hosts dest=/tmp/hosts&quot; # 拷贝文件到web组的/tmp/hosts</span><br><span class=\"line\">ansible web -m yum -a &quot;name=acme state=present&quot; # 在web组安装acme</span><br><span class=\"line\">ansible all -m user -a &quot;name=foo password=&lt;crypted password here&gt;&quot; # 添加用户</span><br><span class=\"line\">ansible web -m service -a &quot;name=httpd state=started&quot; # 启动web组的httpd服务</span><br><span class=\"line\">ansible all -m setup # 查看远程主机的全部系统信息</span><br></pre></td></tr></table></figure>\n<h4 id=\"ansible-脚本编排-之ansible-playbook\"><a href=\"#ansible-脚本编排-之ansible-playbook\" class=\"headerlink\" title=\"ansible 脚本编排 之ansible-playbook\"></a>ansible 脚本编排 之ansible-playbook</h4><p>ansible脚本名字叫playbook，以yml或yaml形式书写。</p>\n<p>执行脚本playbook命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible-playbook deploy.yml</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ansible-playbook-yml书写注意\"><a href=\"#ansible-playbook-yml书写注意\" class=\"headerlink\" title=\"ansible-playbook.yml书写注意\"></a>ansible-playbook.yml书写注意</h4><ul>\n<li>文件名以<code>yml</code>或<code>yaml</code>结尾</li>\n<li>以<code>---</code>开头表示文件开头</li>\n<li><code>#</code> 表示注释</li>\n<li>都是以<code>-</code>加空格再写内容</li>\n<li>hosts, variables, roles tasks等对象都是以<code>:</code>分割，冒号后要加一个空格</li>\n<li>执行脚本文件输出绿色代表成功，红色为失败</li>\n</ul>\n<p>核心的对象元素</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hosts 主机组，如- hosts: node1</span><br><span class=\"line\">tasks 任务列表</span><br></pre></td></tr></table></figure>\n<h4 id=\"ansible-playbook使用\"><a href=\"#ansible-playbook使用\" class=\"headerlink\" title=\"ansible-playbook使用\"></a>ansible-playbook使用</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ansible-playbook -i hosts deploy.yml</span><br></pre></td></tr></table></figure>\n<p>说明:</p>\n<ul>\n<li>命令后加选项 <code>--syntax-check</code> 可以检查语法，如 <code>ansible-playbook deploy.yml --syntax-check</code></li>\n<li><code>--start-at=&quot;Install kubelet, kubeadm and kubectl&quot;</code>从指定任务开始执行</li>\n</ul>\n<h5 id=\"示例1：安装软件\"><a href=\"#示例1：安装软件\" class=\"headerlink\" title=\"示例1：安装软件\"></a>示例1：安装软件</h5><p>编辑ansible-demo.yaml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">- hosts: all</span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">  - name: Install docker and its dependecies</span><br><span class=\"line\">    yum: name=docker-ce state=present</span><br></pre></td></tr></table></figure>\n\n<p>在ansible-demo.yaml同级目录下，新建hosts文件，内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[masters]</span><br><span class=\"line\">master ansible_host=192.168.1.146 ansible_user=root</span><br><span class=\"line\"></span><br><span class=\"line\">[workers]</span><br><span class=\"line\">worker1 ansible_host=192.168.1.180 ansible_user=root</span><br><span class=\"line\">worker2 ansible_host=192.168.1.181 ansible_user=root</span><br></pre></td></tr></table></figure>\n\n<p>执行：<code>ansible-playbook -i hosts ansible-demo.yaml</code> # -i 指定host文件</p>\n<ul>\n<li><p>问：<code>yum: name=docker-ce state=present</code>可以替换成<code>shell: yum install docker-ce -y</code>?</p>\n</li>\n<li><p>答：不好，建议使用yum模块而不是yum命令。yum命令可能进行重新安装升级版本。yum模块的<code>state=present</code>代表如果安装的软件存在则不进行安装，如果不存在则安装。</p>\n</li>\n</ul>\n<h5 id=\"示例1-2：安装软件-安装多个软件\"><a href=\"#示例1-2：安装软件-安装多个软件\" class=\"headerlink\" title=\"示例1.2：安装软件-安装多个软件\"></a>示例1.2：安装软件-安装多个软件</h5><ul>\n<li>name: Install required dependiences<br>  yum: name&#x3D; state&#x3D;present<br>  with_items:<br>- yum-utils<br>- device-mapper-persistent-data<br>- lvm2</li>\n</ul>\n<h5 id=\"示例2：复制文件-将ansible管理节点的文件通过ansible复制到hosts列表机器\"><a href=\"#示例2：复制文件-将ansible管理节点的文件通过ansible复制到hosts列表机器\" class=\"headerlink\" title=\"示例2：复制文件-将ansible管理节点的文件通过ansible复制到hosts列表机器\"></a>示例2：复制文件-将ansible管理节点的文件通过ansible复制到hosts列表机器</h5><p>编辑ansible-demo.yaml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">- hosts: masters # 代表只操纵masters组下的机器</span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">  - name: copy file to masters</span><br><span class=\"line\">    copy: </span><br><span class=\"line\">      src: /opt/ansible-demo/hosts</span><br><span class=\"line\">      dest: /tmp/hosts</span><br></pre></td></tr></table></figure>\n<p>执行：<code>ansible-playbook -i hosts ansible-demo.yaml</code></p>\n<h5 id=\"示例3：重启服务-重启masters组的kubelet服务\"><a href=\"#示例3：重启服务-重启masters组的kubelet服务\" class=\"headerlink\" title=\"示例3：重启服务-重启masters组的kubelet服务\"></a>示例3：重启服务-重启masters组的kubelet服务</h5><p>编辑ansible-demo.yaml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">- hosts: masters # 代表只操纵masters组下的机器</span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">  - name: Restart kubelet</span><br><span class=\"line\">    service:</span><br><span class=\"line\">      name: kubelet</span><br><span class=\"line\">      state: restarted</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"示例4：执行shell-执行单条shell命令\"><a href=\"#示例4：执行shell-执行单条shell命令\" class=\"headerlink\" title=\"示例4：执行shell-执行单条shell命令\"></a>示例4：执行shell-执行单条shell命令</h5><p>编辑ansible-demo.yaml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">- hosts: masters </span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">  - name: Add docker repo /etc/yum.repos.d</span><br><span class=\"line\">    shell: yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></table></figure>\n<h5 id=\"示例5：执行shell-执行多条shell命令\"><a href=\"#示例5：执行shell-执行多条shell命令\" class=\"headerlink\" title=\"示例5：执行shell-执行多条shell命令\"></a>示例5：执行shell-执行多条shell命令</h5><p>编辑ansible-demo.yaml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">- hosts: masters </span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">  - name: set bridge filter rules</span><br><span class=\"line\">    shell: |</span><br><span class=\"line\">      cat &lt;&lt; EOF &gt; /etc/sysctl.d/99-kubernetes-cri.conf</span><br><span class=\"line\">      net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class=\"line\">      net.bridge.bridge-nf-call-iptables = 1</span><br><span class=\"line\">      net.ipv4.ip_forward = 1</span><br><span class=\"line\">      user.max_user_namespaces=28633</span><br><span class=\"line\">      EOF</span><br><span class=\"line\">      sysctl -p /etc/sysctl.d/99-kubernetes-cri.conf</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"示例6：执行shell-执行多条shell命令\"><a href=\"#示例6：执行shell-执行多条shell命令\" class=\"headerlink\" title=\"示例6：执行shell-执行多条shell命令\"></a>示例6：执行shell-执行多条shell命令</h5><p>编辑ansible-demo.yaml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">- hosts: masters </span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">  - name: set bridge filter rules</span><br><span class=\"line\">    shell: |</span><br><span class=\"line\">      cat &lt;&lt; EOF &gt; /etc/sysctl.d/99-kubernetes-cri.conf</span><br><span class=\"line\">      net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class=\"line\">      net.bridge.bridge-nf-call-iptables = 1</span><br><span class=\"line\">      net.ipv4.ip_forward = 1</span><br><span class=\"line\">      user.max_user_namespaces=28633</span><br><span class=\"line\">      EOF</span><br><span class=\"line\">      sysctl -p /etc/sysctl.d/99-kubernetes-cri.conf</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"示例7：保留结果-将命令执行后输出的内容保存到一个变量内-打印-输出到文件\"><a href=\"#示例7：保留结果-将命令执行后输出的内容保存到一个变量内-打印-输出到文件\" class=\"headerlink\" title=\"示例7：保留结果-将命令执行后输出的内容保存到一个变量内 + 打印 + 输出到文件\"></a>示例7：保留结果-将命令执行后输出的内容保存到一个变量内 + 打印 + 输出到文件</h5><p>编辑ansible-demo.yaml</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">- hosts: masters </span><br><span class=\"line\">  tasks:</span><br><span class=\"line\">  - name: Extract the join command</span><br><span class=\"line\">    become: true</span><br><span class=\"line\">    command: &quot;kubeadm token create --print-join-command&quot;</span><br><span class=\"line\">    register: join_command # 存储变量</span><br><span class=\"line\">  - name: show join command</span><br><span class=\"line\">    debug:</span><br><span class=\"line\">      var: join_command  # 打印变量</span><br><span class=\"line\">  - name: Save kubeadm join command for cluster</span><br><span class=\"line\">    local_action: copy content=&#123;&#123; join_command.stdout_lines | last | trim &#125;&#125; dest=command.txt # 将join_command的内容处理后输出到文件并保存在当前主机的执行目录下</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"expect\"><a href=\"#expect\" class=\"headerlink\" title=\"expect\"></a>expect</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 输入密码后，ssh远程执行命令</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">  </span><br><span class=\"line\">[ -e /bin/expect ] || &#123; apt update; apt install -y expect &gt; /dev/null 2&gt;&amp;1; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">passwd=&#x27;testing123&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/bin/expect &lt;&lt;-EOF</span><br><span class=\"line\"></span><br><span class=\"line\">set time 30</span><br><span class=\"line\"></span><br><span class=\"line\">spawn ssh root@192.168.1.181 echo &quot;rickyccc&quot; &gt; /tmp/a.log</span><br><span class=\"line\">expect &#123;</span><br><span class=\"line\">&quot;*yes/no&quot; &#123; semd &quot;yes\\r&quot;; exp_continue &#125;</span><br><span class=\"line\">&quot;*password:&quot; &#123; send &quot;$passwd\\r&quot; &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">expect eof</span><br><span class=\"line\">EOF</span><br><span class=\"line\">====================================================================</span><br><span class=\"line\"></span><br><span class=\"line\"># 分发公钥到多个节点机器</span><br><span class=\"line\"># 编写host文件</span><br><span class=\"line\">192.168.1.180 root testing123</span><br><span class=\"line\">192.168.1.181 root testing123</span><br><span class=\"line\"></span><br><span class=\"line\"># 编写脚本</span><br><span class=\"line\">#!/bin/bash</span><br><span class=\"line\"></span><br><span class=\"line\">if [ ! -f ~/.ssh/id_rsa ];then</span><br><span class=\"line\"> ssh-keygen -t rsa -P &quot;&quot; -f ~/.ssh/id_rsa</span><br><span class=\"line\">else</span><br><span class=\"line\"> echo &quot;id_rsa has created ...&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">while read line</span><br><span class=\"line\">  do</span><br><span class=\"line\">    ip=`echo $line | cut -d &quot; &quot; -f 1`</span><br><span class=\"line\">    user=`echo $line | cut -d &quot; &quot; -f 2`</span><br><span class=\"line\">    passwd=`echo $line | cut -d &quot; &quot; -f 3`</span><br><span class=\"line\"></span><br><span class=\"line\">\texpect &lt;&lt;EOF</span><br><span class=\"line\">      set timeout 10</span><br><span class=\"line\">      spawn ssh-copy-id $user@$ip</span><br><span class=\"line\">      expect &#123;</span><br><span class=\"line\">        &quot;yes/no&quot; &#123; send &quot;yes\\n&quot;;exp_continue &#125;</span><br><span class=\"line\">        &quot;password&quot; &#123; send &quot;$passwd\\n&quot; &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">     expect &quot;password&quot; &#123; send &quot;$passwd\\n&quot; &#125;</span><br><span class=\"line\">EOF</span><br><span class=\"line\">  done &lt; host</span><br></pre></td></tr></table></figure>\n<p>参考：<br><a href=\"https://austinsnerdythings.com/2022/04/25/deploying-a-kubernetes-cluster-within-proxmox-using-ansible/\">https://austinsnerdythings.com/2022/04/25/deploying-a-kubernetes-cluster-within-proxmox-using-ansible/</a></p>\n<p><a href=\"https://getansible.com/README\">https://getansible.com/README</a></p>\n"},{"title":"第27期：镜像源","date":"2023-05-22T08:34:34.000Z","_content":"#### Debian更换阿里云软件源\n备份\n```\ncp /etc/apt/sources.list /etc/apt/sources.list.bak\n```\n\n修改\nvim /etc/apt/sources.list\n```\ndeb http://mirrors.aliyun.com/debian/ bullseye main non-free contrib\n\ndeb-src http://mirrors.aliyun.com/debian/ bullseye main non-free contrib\n\ndeb http://mirrors.aliyun.com/debian-security/ bullseye-security main\n\ndeb-src http://mirrors.aliyun.com/debian-security/ bullseye-security main\n\ndeb http://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib\n\ndeb-src http://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib\n\ndeb http://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib\n\ndeb-src http://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib\n```\n\n更新\n```\napt-get update\n```\n# 配置阿里云pip源\n```\ncd ~\nmkdir .pip\ncd .pip\ntouch pip.conf\nvi pip.conf\n\n[global]\nindex-url = https://mirrors.aliyun.com/pypi/simple/\n[install]\ntrusted-host=mirrors.aliyun.com\n```\n#### Centos7更换成aliyun步骤\n```\n# 备份\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\n\n# 下载\nyum install -y wget\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n\n或者\n\ncurl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n\n# 更改/etc/yum.repos.d/CentOS-Base.repo\n所有http替换成https\n\n# 更新镜像源\nyum clean all # 清除缓存\nyum makecache # 生成缓存\n```","source":"_posts/第27期：镜像源.md","raw":"---\ntitle: 第27期：镜像源\ndate: 2023-05-22 16:34:34\ntags:\n---\n#### Debian更换阿里云软件源\n备份\n```\ncp /etc/apt/sources.list /etc/apt/sources.list.bak\n```\n\n修改\nvim /etc/apt/sources.list\n```\ndeb http://mirrors.aliyun.com/debian/ bullseye main non-free contrib\n\ndeb-src http://mirrors.aliyun.com/debian/ bullseye main non-free contrib\n\ndeb http://mirrors.aliyun.com/debian-security/ bullseye-security main\n\ndeb-src http://mirrors.aliyun.com/debian-security/ bullseye-security main\n\ndeb http://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib\n\ndeb-src http://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib\n\ndeb http://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib\n\ndeb-src http://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib\n```\n\n更新\n```\napt-get update\n```\n# 配置阿里云pip源\n```\ncd ~\nmkdir .pip\ncd .pip\ntouch pip.conf\nvi pip.conf\n\n[global]\nindex-url = https://mirrors.aliyun.com/pypi/simple/\n[install]\ntrusted-host=mirrors.aliyun.com\n```\n#### Centos7更换成aliyun步骤\n```\n# 备份\nmv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup\n\n# 下载\nyum install -y wget\nwget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n\n或者\n\ncurl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo\n\n# 更改/etc/yum.repos.d/CentOS-Base.repo\n所有http替换成https\n\n# 更新镜像源\nyum clean all # 清除缓存\nyum makecache # 生成缓存\n```","slug":"第27期：镜像源","published":1,"updated":"2024-03-06T06:55:18.356Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvte4000jbkln7ck4ab4m","content":"<h4 id=\"Debian更换阿里云软件源\"><a href=\"#Debian更换阿里云软件源\" class=\"headerlink\" title=\"Debian更换阿里云软件源\"></a>Debian更换阿里云软件源</h4><p>备份</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure>\n\n<p>修改<br>vim &#x2F;etc&#x2F;apt&#x2F;sources.list</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb http://mirrors.aliyun.com/debian/ bullseye main non-free contrib</span><br><span class=\"line\"></span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/debian/ bullseye main non-free contrib</span><br><span class=\"line\"></span><br><span class=\"line\">deb http://mirrors.aliyun.com/debian-security/ bullseye-security main</span><br><span class=\"line\"></span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/debian-security/ bullseye-security main</span><br><span class=\"line\"></span><br><span class=\"line\">deb http://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib</span><br><span class=\"line\"></span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib</span><br><span class=\"line\"></span><br><span class=\"line\">deb http://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib</span><br><span class=\"line\"></span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib</span><br></pre></td></tr></table></figure>\n\n<p>更新</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br></pre></td></tr></table></figure>\n<h1 id=\"配置阿里云pip源\"><a href=\"#配置阿里云pip源\" class=\"headerlink\" title=\"配置阿里云pip源\"></a>配置阿里云pip源</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~</span><br><span class=\"line\">mkdir .pip</span><br><span class=\"line\">cd .pip</span><br><span class=\"line\">touch pip.conf</span><br><span class=\"line\">vi pip.conf</span><br><span class=\"line\"></span><br><span class=\"line\">[global]</span><br><span class=\"line\">index-url = https://mirrors.aliyun.com/pypi/simple/</span><br><span class=\"line\">[install]</span><br><span class=\"line\">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure>\n<h4 id=\"Centos7更换成aliyun步骤\"><a href=\"#Centos7更换成aliyun步骤\" class=\"headerlink\" title=\"Centos7更换成aliyun步骤\"></a>Centos7更换成aliyun步骤</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 备份</span><br><span class=\"line\">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class=\"line\"></span><br><span class=\"line\"># 下载</span><br><span class=\"line\">yum install -y wget</span><br><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class=\"line\"></span><br><span class=\"line\">或者</span><br><span class=\"line\"></span><br><span class=\"line\">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class=\"line\"></span><br><span class=\"line\"># 更改/etc/yum.repos.d/CentOS-Base.repo</span><br><span class=\"line\">所有http替换成https</span><br><span class=\"line\"></span><br><span class=\"line\"># 更新镜像源</span><br><span class=\"line\">yum clean all # 清除缓存</span><br><span class=\"line\">yum makecache # 生成缓存</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"Debian更换阿里云软件源\"><a href=\"#Debian更换阿里云软件源\" class=\"headerlink\" title=\"Debian更换阿里云软件源\"></a>Debian更换阿里云软件源</h4><p>备份</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp /etc/apt/sources.list /etc/apt/sources.list.bak</span><br></pre></td></tr></table></figure>\n\n<p>修改<br>vim &#x2F;etc&#x2F;apt&#x2F;sources.list</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deb http://mirrors.aliyun.com/debian/ bullseye main non-free contrib</span><br><span class=\"line\"></span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/debian/ bullseye main non-free contrib</span><br><span class=\"line\"></span><br><span class=\"line\">deb http://mirrors.aliyun.com/debian-security/ bullseye-security main</span><br><span class=\"line\"></span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/debian-security/ bullseye-security main</span><br><span class=\"line\"></span><br><span class=\"line\">deb http://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib</span><br><span class=\"line\"></span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/debian/ bullseye-updates main non-free contrib</span><br><span class=\"line\"></span><br><span class=\"line\">deb http://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib</span><br><span class=\"line\"></span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/debian/ bullseye-backports main non-free contrib</span><br></pre></td></tr></table></figure>\n\n<p>更新</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">apt-get update</span><br></pre></td></tr></table></figure>\n<h1 id=\"配置阿里云pip源\"><a href=\"#配置阿里云pip源\" class=\"headerlink\" title=\"配置阿里云pip源\"></a>配置阿里云pip源</h1><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ~</span><br><span class=\"line\">mkdir .pip</span><br><span class=\"line\">cd .pip</span><br><span class=\"line\">touch pip.conf</span><br><span class=\"line\">vi pip.conf</span><br><span class=\"line\"></span><br><span class=\"line\">[global]</span><br><span class=\"line\">index-url = https://mirrors.aliyun.com/pypi/simple/</span><br><span class=\"line\">[install]</span><br><span class=\"line\">trusted-host=mirrors.aliyun.com</span><br></pre></td></tr></table></figure>\n<h4 id=\"Centos7更换成aliyun步骤\"><a href=\"#Centos7更换成aliyun步骤\" class=\"headerlink\" title=\"Centos7更换成aliyun步骤\"></a>Centos7更换成aliyun步骤</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 备份</span><br><span class=\"line\">mv /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.backup</span><br><span class=\"line\"></span><br><span class=\"line\"># 下载</span><br><span class=\"line\">yum install -y wget</span><br><span class=\"line\">wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class=\"line\"></span><br><span class=\"line\">或者</span><br><span class=\"line\"></span><br><span class=\"line\">curl -o /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo</span><br><span class=\"line\"></span><br><span class=\"line\"># 更改/etc/yum.repos.d/CentOS-Base.repo</span><br><span class=\"line\">所有http替换成https</span><br><span class=\"line\"></span><br><span class=\"line\"># 更新镜像源</span><br><span class=\"line\">yum clean all # 清除缓存</span><br><span class=\"line\">yum makecache # 生成缓存</span><br></pre></td></tr></table></figure>"},{"title":"第28期：网络","date":"2023-05-22T08:56:03.000Z","_content":"##### 两个主机怎么相连？\n没有互联网之前，电脑都是单机运行的，没有网卡，没有协议栈，没有网线，数据传输主要通过光盘，软盘等介质。\n\n##### 网线来了\n\npc1-网口  ---------网线------------ 网口-pc2     \n\nNote：\n其中`网线`承载bit流，作为物理介质。`网卡`将字节转换成bit流，反之。还用到协议栈，实现通信中数据的解析，流控制，地址寻址等。\n\n##### 网线不够长怎么办？\n随着距离变长，信号损耗导致数据丢失，便用到了`中继器`放大信号。\n\n##### 中继器只有2个口，这个时候有第三台电脑加进来，怎么办？\n集线器：多口中继器，但是从一个口出来的数据发同时发往其他口，导致数据泛滥，带宽利用率低，无法隔绝各自的环境。\n\n###### 隔绝环境，用网桥\n网桥，记录了每台主机的mac地址，根据mac地址来分发数据，但接口比较少，怎么办？交换机来了。\n\n##### 交换机\n交换机，记录了每台主机的mac地址，接口多，能进行vlan隔离。一般用于局域网。\n想通信更远，怎么办？路由器来了。\n\n布线麻烦怎么办？AC/AP来了\n不够安全怎么办？防火墙来了\n网络拥堵怎么办？流量控制来了  \n\n##### OSI七层模型\n应用层: 开发者将通信模型定制成协议。\n表示层：制定双方数据交换格式。如Content-Type：application/json; charset=utf-8\n会话层: 管理会话连接，由应用程序的请求和响应组成。\n传输层：端口，实现报文数据传递。\n网络层：路由器，ip寻址。\n数据链路层：交换机，mac寻址，数据差错检测。\n物理层：网线，二进制流传输。\n\n##### 常见问题\n##### 1.为什么有了ip还需要mac地址？\n-简而言之，标识网络中的一台计算机，比较常用的就是IP地址和MAC地址，但计算机的IP地址可由用户自行更改，管理起来就相对困难，而MAC地址不可更改，所以一般会把IP地址和MAC地址组合起来使用。\n-那只使用MAC地址不用IP地址行不行呢？不行的！因为最早就是MAC地址先出现的，并且当时并不用IP地址，只用MAC地址，后来随着网络中的设备越来越多，整个路由过程越来越复杂，便出现了子网的概念。对于目的地址在其他子网的数据包，路由只需要将数据包送到那个子网即可。\n-那为什么要用IP地址呢？是因为IP地址是和地域相关的，对于同一个子网上的设备，IP地址的前缀都是一样的，这样路由器通过IP地址的前缀就知道设备在在哪个子网上了，而只用MAC地址的话，路由器则需要记住每个MAC地址在哪个子网，这需要路由器有极大的存储空间，是无法实现的。\n-IP地址可以比作为地址，MAC地址为收件人，在一次通信过程中，两者是缺一不可的。\n\n##### 2.交换机有什么作用？\n交换机通过广播形式发送arp每台设备的mac地址。\narp 即 Address Resolution Protocol，地址解析协议，是根据ip获取设备的mac地址。\n\n##### 3.同一网段为什么能通信？\n如果同一网段，一般只运用到二层的mac地址的转发，2个相同网段的主机pc1和pc2，当pc1 ping pc2的时候，会先发送arp包，请求pc2的mac地址来进行二层封装，因为他们同一网段，所以能够获得arp回应，有了mac地址就能进行二层源mac和目的mac的封装，封装好了就能通讯。记住二层转发是基于mac的，三层才会基于ip。\n\n\n##### 4.直连网络需要ip地址？\n如果两台机器互相知道其MAC地址可以直接交流，前提是互相知道彼此的MAC地址，如果不认识，就要通过arp广播（正向ARP: 通过IP地址获取MAC地址）找到mac地址。\n\n局域网内部的主机互联互通只需要MAC地址，而不需要IP地址，IP地址的作用是不同局域网的互联互通。\n\n### 安全\n##### DDos\nDistributed Denial of Service 分布式拒绝服务\n\n肉鸡大量访问目标网站，目标网站被消耗带宽、服务器资源，导致无法正常处理其他用户请求。\n\n##### DNS劫持\n假设运营商的DNS服务器被侵入了，用户的请求经过运营商DNS解析后被指向带有广告的ip网站去。\n\n##### DNS查询攻击\nDNS Query Flood Attack: 攻击方法是通过操纵大量傀儡机器，发送海量的域名查询请求，当每秒域名查询请求次数超过DNS服务器可承载的能力时，则会造成解析域名超时从而直接影响业务的可用性\n\n##### SQL注入\nSQL注入：利用现有应用程序，可以将恶意的SQL命令注入到后台数据库引擎中并执行。也可以通过在Web表单中输入恶意SQL语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行SQL语句\n\n举例：假设后端有一个漏洞，sql逻辑是通过拼接方式执行sql。\nselect * from car where (carNum = $web1 \n\n前端被恶意传入变量值web1: 'ZU_006',0,0);DROP DATABASE TABLE='car'\n\n这就会导致表会被删除。\n##### 跨站脚本攻击\n手段1：黑客发送一个带有恶意XSS脚本的链接给小白用户，小白点了链接，页面加载执行了恶意XSS脚本，这段脚本可以盗取小白的登录信息然后发给黑客。\n手段2: 黑客预先将恶意XSS脚本注入到攻击网站的数据库(假设目标网站存在漏洞能被注入脚本)，其他用户刚好加载到带有恶意XSS脚本的目标页面，XSS脚本偷偷将用户的登录信息发给黑客。\n\n##### 重定向攻击\n一种常用的攻击手段是\"钓鱼\"。钓鱼攻击者通常会发送给受害者一个合法链接，当您访问链接时，会被导向一个非法网站，从而达到骗取用户信任、窃取用户资料的目的。为防止这种行为，我们必须对所有的重定向操作进行审核，以避免重定向到一个危险的地方。常见解决方案是白名单，将合法的要重定向的URL添加到白名单中，非白名单上的域名重定向时拒绝。第二种解决方案是重定向token，在合法的URL上加上token，重定向时进行验证。\n\n","source":"_posts/第28期：网络.md","raw":"---\ntitle: 第28期：网络\ndate: 2023-05-22 16:56:03\ntags:\n---\n##### 两个主机怎么相连？\n没有互联网之前，电脑都是单机运行的，没有网卡，没有协议栈，没有网线，数据传输主要通过光盘，软盘等介质。\n\n##### 网线来了\n\npc1-网口  ---------网线------------ 网口-pc2     \n\nNote：\n其中`网线`承载bit流，作为物理介质。`网卡`将字节转换成bit流，反之。还用到协议栈，实现通信中数据的解析，流控制，地址寻址等。\n\n##### 网线不够长怎么办？\n随着距离变长，信号损耗导致数据丢失，便用到了`中继器`放大信号。\n\n##### 中继器只有2个口，这个时候有第三台电脑加进来，怎么办？\n集线器：多口中继器，但是从一个口出来的数据发同时发往其他口，导致数据泛滥，带宽利用率低，无法隔绝各自的环境。\n\n###### 隔绝环境，用网桥\n网桥，记录了每台主机的mac地址，根据mac地址来分发数据，但接口比较少，怎么办？交换机来了。\n\n##### 交换机\n交换机，记录了每台主机的mac地址，接口多，能进行vlan隔离。一般用于局域网。\n想通信更远，怎么办？路由器来了。\n\n布线麻烦怎么办？AC/AP来了\n不够安全怎么办？防火墙来了\n网络拥堵怎么办？流量控制来了  \n\n##### OSI七层模型\n应用层: 开发者将通信模型定制成协议。\n表示层：制定双方数据交换格式。如Content-Type：application/json; charset=utf-8\n会话层: 管理会话连接，由应用程序的请求和响应组成。\n传输层：端口，实现报文数据传递。\n网络层：路由器，ip寻址。\n数据链路层：交换机，mac寻址，数据差错检测。\n物理层：网线，二进制流传输。\n\n##### 常见问题\n##### 1.为什么有了ip还需要mac地址？\n-简而言之，标识网络中的一台计算机，比较常用的就是IP地址和MAC地址，但计算机的IP地址可由用户自行更改，管理起来就相对困难，而MAC地址不可更改，所以一般会把IP地址和MAC地址组合起来使用。\n-那只使用MAC地址不用IP地址行不行呢？不行的！因为最早就是MAC地址先出现的，并且当时并不用IP地址，只用MAC地址，后来随着网络中的设备越来越多，整个路由过程越来越复杂，便出现了子网的概念。对于目的地址在其他子网的数据包，路由只需要将数据包送到那个子网即可。\n-那为什么要用IP地址呢？是因为IP地址是和地域相关的，对于同一个子网上的设备，IP地址的前缀都是一样的，这样路由器通过IP地址的前缀就知道设备在在哪个子网上了，而只用MAC地址的话，路由器则需要记住每个MAC地址在哪个子网，这需要路由器有极大的存储空间，是无法实现的。\n-IP地址可以比作为地址，MAC地址为收件人，在一次通信过程中，两者是缺一不可的。\n\n##### 2.交换机有什么作用？\n交换机通过广播形式发送arp每台设备的mac地址。\narp 即 Address Resolution Protocol，地址解析协议，是根据ip获取设备的mac地址。\n\n##### 3.同一网段为什么能通信？\n如果同一网段，一般只运用到二层的mac地址的转发，2个相同网段的主机pc1和pc2，当pc1 ping pc2的时候，会先发送arp包，请求pc2的mac地址来进行二层封装，因为他们同一网段，所以能够获得arp回应，有了mac地址就能进行二层源mac和目的mac的封装，封装好了就能通讯。记住二层转发是基于mac的，三层才会基于ip。\n\n\n##### 4.直连网络需要ip地址？\n如果两台机器互相知道其MAC地址可以直接交流，前提是互相知道彼此的MAC地址，如果不认识，就要通过arp广播（正向ARP: 通过IP地址获取MAC地址）找到mac地址。\n\n局域网内部的主机互联互通只需要MAC地址，而不需要IP地址，IP地址的作用是不同局域网的互联互通。\n\n### 安全\n##### DDos\nDistributed Denial of Service 分布式拒绝服务\n\n肉鸡大量访问目标网站，目标网站被消耗带宽、服务器资源，导致无法正常处理其他用户请求。\n\n##### DNS劫持\n假设运营商的DNS服务器被侵入了，用户的请求经过运营商DNS解析后被指向带有广告的ip网站去。\n\n##### DNS查询攻击\nDNS Query Flood Attack: 攻击方法是通过操纵大量傀儡机器，发送海量的域名查询请求，当每秒域名查询请求次数超过DNS服务器可承载的能力时，则会造成解析域名超时从而直接影响业务的可用性\n\n##### SQL注入\nSQL注入：利用现有应用程序，可以将恶意的SQL命令注入到后台数据库引擎中并执行。也可以通过在Web表单中输入恶意SQL语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行SQL语句\n\n举例：假设后端有一个漏洞，sql逻辑是通过拼接方式执行sql。\nselect * from car where (carNum = $web1 \n\n前端被恶意传入变量值web1: 'ZU_006',0,0);DROP DATABASE TABLE='car'\n\n这就会导致表会被删除。\n##### 跨站脚本攻击\n手段1：黑客发送一个带有恶意XSS脚本的链接给小白用户，小白点了链接，页面加载执行了恶意XSS脚本，这段脚本可以盗取小白的登录信息然后发给黑客。\n手段2: 黑客预先将恶意XSS脚本注入到攻击网站的数据库(假设目标网站存在漏洞能被注入脚本)，其他用户刚好加载到带有恶意XSS脚本的目标页面，XSS脚本偷偷将用户的登录信息发给黑客。\n\n##### 重定向攻击\n一种常用的攻击手段是\"钓鱼\"。钓鱼攻击者通常会发送给受害者一个合法链接，当您访问链接时，会被导向一个非法网站，从而达到骗取用户信任、窃取用户资料的目的。为防止这种行为，我们必须对所有的重定向操作进行审核，以避免重定向到一个危险的地方。常见解决方案是白名单，将合法的要重定向的URL添加到白名单中，非白名单上的域名重定向时拒绝。第二种解决方案是重定向token，在合法的URL上加上token，重定向时进行验证。\n\n","slug":"第28期：网络","published":1,"updated":"2024-03-06T06:55:18.357Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvte6000kbkln65zzfe3q","content":"<h5 id=\"两个主机怎么相连？\"><a href=\"#两个主机怎么相连？\" class=\"headerlink\" title=\"两个主机怎么相连？\"></a>两个主机怎么相连？</h5><p>没有互联网之前，电脑都是单机运行的，没有网卡，没有协议栈，没有网线，数据传输主要通过光盘，软盘等介质。</p>\n<h5 id=\"网线来了\"><a href=\"#网线来了\" class=\"headerlink\" title=\"网线来了\"></a>网线来了</h5><p>pc1-网口  ———网线———— 网口-pc2     </p>\n<p>Note：<br>其中<code>网线</code>承载bit流，作为物理介质。<code>网卡</code>将字节转换成bit流，反之。还用到协议栈，实现通信中数据的解析，流控制，地址寻址等。</p>\n<h5 id=\"网线不够长怎么办？\"><a href=\"#网线不够长怎么办？\" class=\"headerlink\" title=\"网线不够长怎么办？\"></a>网线不够长怎么办？</h5><p>随着距离变长，信号损耗导致数据丢失，便用到了<code>中继器</code>放大信号。</p>\n<h5 id=\"中继器只有2个口，这个时候有第三台电脑加进来，怎么办？\"><a href=\"#中继器只有2个口，这个时候有第三台电脑加进来，怎么办？\" class=\"headerlink\" title=\"中继器只有2个口，这个时候有第三台电脑加进来，怎么办？\"></a>中继器只有2个口，这个时候有第三台电脑加进来，怎么办？</h5><p>集线器：多口中继器，但是从一个口出来的数据发同时发往其他口，导致数据泛滥，带宽利用率低，无法隔绝各自的环境。</p>\n<h6 id=\"隔绝环境，用网桥\"><a href=\"#隔绝环境，用网桥\" class=\"headerlink\" title=\"隔绝环境，用网桥\"></a>隔绝环境，用网桥</h6><p>网桥，记录了每台主机的mac地址，根据mac地址来分发数据，但接口比较少，怎么办？交换机来了。</p>\n<h5 id=\"交换机\"><a href=\"#交换机\" class=\"headerlink\" title=\"交换机\"></a>交换机</h5><p>交换机，记录了每台主机的mac地址，接口多，能进行vlan隔离。一般用于局域网。<br>想通信更远，怎么办？路由器来了。</p>\n<p>布线麻烦怎么办？AC&#x2F;AP来了<br>不够安全怎么办？防火墙来了<br>网络拥堵怎么办？流量控制来了  </p>\n<h5 id=\"OSI七层模型\"><a href=\"#OSI七层模型\" class=\"headerlink\" title=\"OSI七层模型\"></a>OSI七层模型</h5><p>应用层: 开发者将通信模型定制成协议。<br>表示层：制定双方数据交换格式。如Content-Type：application&#x2F;json; charset&#x3D;utf-8<br>会话层: 管理会话连接，由应用程序的请求和响应组成。<br>传输层：端口，实现报文数据传递。<br>网络层：路由器，ip寻址。<br>数据链路层：交换机，mac寻址，数据差错检测。<br>物理层：网线，二进制流传输。</p>\n<h5 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h5><h5 id=\"1-为什么有了ip还需要mac地址？\"><a href=\"#1-为什么有了ip还需要mac地址？\" class=\"headerlink\" title=\"1.为什么有了ip还需要mac地址？\"></a>1.为什么有了ip还需要mac地址？</h5><p>-简而言之，标识网络中的一台计算机，比较常用的就是IP地址和MAC地址，但计算机的IP地址可由用户自行更改，管理起来就相对困难，而MAC地址不可更改，所以一般会把IP地址和MAC地址组合起来使用。<br>-那只使用MAC地址不用IP地址行不行呢？不行的！因为最早就是MAC地址先出现的，并且当时并不用IP地址，只用MAC地址，后来随着网络中的设备越来越多，整个路由过程越来越复杂，便出现了子网的概念。对于目的地址在其他子网的数据包，路由只需要将数据包送到那个子网即可。<br>-那为什么要用IP地址呢？是因为IP地址是和地域相关的，对于同一个子网上的设备，IP地址的前缀都是一样的，这样路由器通过IP地址的前缀就知道设备在在哪个子网上了，而只用MAC地址的话，路由器则需要记住每个MAC地址在哪个子网，这需要路由器有极大的存储空间，是无法实现的。<br>-IP地址可以比作为地址，MAC地址为收件人，在一次通信过程中，两者是缺一不可的。</p>\n<h5 id=\"2-交换机有什么作用？\"><a href=\"#2-交换机有什么作用？\" class=\"headerlink\" title=\"2.交换机有什么作用？\"></a>2.交换机有什么作用？</h5><p>交换机通过广播形式发送arp每台设备的mac地址。<br>arp 即 Address Resolution Protocol，地址解析协议，是根据ip获取设备的mac地址。</p>\n<h5 id=\"3-同一网段为什么能通信？\"><a href=\"#3-同一网段为什么能通信？\" class=\"headerlink\" title=\"3.同一网段为什么能通信？\"></a>3.同一网段为什么能通信？</h5><p>如果同一网段，一般只运用到二层的mac地址的转发，2个相同网段的主机pc1和pc2，当pc1 ping pc2的时候，会先发送arp包，请求pc2的mac地址来进行二层封装，因为他们同一网段，所以能够获得arp回应，有了mac地址就能进行二层源mac和目的mac的封装，封装好了就能通讯。记住二层转发是基于mac的，三层才会基于ip。</p>\n<h5 id=\"4-直连网络需要ip地址？\"><a href=\"#4-直连网络需要ip地址？\" class=\"headerlink\" title=\"4.直连网络需要ip地址？\"></a>4.直连网络需要ip地址？</h5><p>如果两台机器互相知道其MAC地址可以直接交流，前提是互相知道彼此的MAC地址，如果不认识，就要通过arp广播（正向ARP: 通过IP地址获取MAC地址）找到mac地址。</p>\n<p>局域网内部的主机互联互通只需要MAC地址，而不需要IP地址，IP地址的作用是不同局域网的互联互通。</p>\n<h3 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h3><h5 id=\"DDos\"><a href=\"#DDos\" class=\"headerlink\" title=\"DDos\"></a>DDos</h5><p>Distributed Denial of Service 分布式拒绝服务</p>\n<p>肉鸡大量访问目标网站，目标网站被消耗带宽、服务器资源，导致无法正常处理其他用户请求。</p>\n<h5 id=\"DNS劫持\"><a href=\"#DNS劫持\" class=\"headerlink\" title=\"DNS劫持\"></a>DNS劫持</h5><p>假设运营商的DNS服务器被侵入了，用户的请求经过运营商DNS解析后被指向带有广告的ip网站去。</p>\n<h5 id=\"DNS查询攻击\"><a href=\"#DNS查询攻击\" class=\"headerlink\" title=\"DNS查询攻击\"></a>DNS查询攻击</h5><p>DNS Query Flood Attack: 攻击方法是通过操纵大量傀儡机器，发送海量的域名查询请求，当每秒域名查询请求次数超过DNS服务器可承载的能力时，则会造成解析域名超时从而直接影响业务的可用性</p>\n<h5 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h5><p>SQL注入：利用现有应用程序，可以将恶意的SQL命令注入到后台数据库引擎中并执行。也可以通过在Web表单中输入恶意SQL语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行SQL语句</p>\n<p>举例：假设后端有一个漏洞，sql逻辑是通过拼接方式执行sql。<br>select * from car where (carNum &#x3D; $web1 </p>\n<p>前端被恶意传入变量值web1: ‘ZU_006’,0,0);DROP DATABASE TABLE&#x3D;’car’</p>\n<p>这就会导致表会被删除。</p>\n<h5 id=\"跨站脚本攻击\"><a href=\"#跨站脚本攻击\" class=\"headerlink\" title=\"跨站脚本攻击\"></a>跨站脚本攻击</h5><p>手段1：黑客发送一个带有恶意XSS脚本的链接给小白用户，小白点了链接，页面加载执行了恶意XSS脚本，这段脚本可以盗取小白的登录信息然后发给黑客。<br>手段2: 黑客预先将恶意XSS脚本注入到攻击网站的数据库(假设目标网站存在漏洞能被注入脚本)，其他用户刚好加载到带有恶意XSS脚本的目标页面，XSS脚本偷偷将用户的登录信息发给黑客。</p>\n<h5 id=\"重定向攻击\"><a href=\"#重定向攻击\" class=\"headerlink\" title=\"重定向攻击\"></a>重定向攻击</h5><p>一种常用的攻击手段是”钓鱼”。钓鱼攻击者通常会发送给受害者一个合法链接，当您访问链接时，会被导向一个非法网站，从而达到骗取用户信任、窃取用户资料的目的。为防止这种行为，我们必须对所有的重定向操作进行审核，以避免重定向到一个危险的地方。常见解决方案是白名单，将合法的要重定向的URL添加到白名单中，非白名单上的域名重定向时拒绝。第二种解决方案是重定向token，在合法的URL上加上token，重定向时进行验证。</p>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"两个主机怎么相连？\"><a href=\"#两个主机怎么相连？\" class=\"headerlink\" title=\"两个主机怎么相连？\"></a>两个主机怎么相连？</h5><p>没有互联网之前，电脑都是单机运行的，没有网卡，没有协议栈，没有网线，数据传输主要通过光盘，软盘等介质。</p>\n<h5 id=\"网线来了\"><a href=\"#网线来了\" class=\"headerlink\" title=\"网线来了\"></a>网线来了</h5><p>pc1-网口  ———网线———— 网口-pc2     </p>\n<p>Note：<br>其中<code>网线</code>承载bit流，作为物理介质。<code>网卡</code>将字节转换成bit流，反之。还用到协议栈，实现通信中数据的解析，流控制，地址寻址等。</p>\n<h5 id=\"网线不够长怎么办？\"><a href=\"#网线不够长怎么办？\" class=\"headerlink\" title=\"网线不够长怎么办？\"></a>网线不够长怎么办？</h5><p>随着距离变长，信号损耗导致数据丢失，便用到了<code>中继器</code>放大信号。</p>\n<h5 id=\"中继器只有2个口，这个时候有第三台电脑加进来，怎么办？\"><a href=\"#中继器只有2个口，这个时候有第三台电脑加进来，怎么办？\" class=\"headerlink\" title=\"中继器只有2个口，这个时候有第三台电脑加进来，怎么办？\"></a>中继器只有2个口，这个时候有第三台电脑加进来，怎么办？</h5><p>集线器：多口中继器，但是从一个口出来的数据发同时发往其他口，导致数据泛滥，带宽利用率低，无法隔绝各自的环境。</p>\n<h6 id=\"隔绝环境，用网桥\"><a href=\"#隔绝环境，用网桥\" class=\"headerlink\" title=\"隔绝环境，用网桥\"></a>隔绝环境，用网桥</h6><p>网桥，记录了每台主机的mac地址，根据mac地址来分发数据，但接口比较少，怎么办？交换机来了。</p>\n<h5 id=\"交换机\"><a href=\"#交换机\" class=\"headerlink\" title=\"交换机\"></a>交换机</h5><p>交换机，记录了每台主机的mac地址，接口多，能进行vlan隔离。一般用于局域网。<br>想通信更远，怎么办？路由器来了。</p>\n<p>布线麻烦怎么办？AC&#x2F;AP来了<br>不够安全怎么办？防火墙来了<br>网络拥堵怎么办？流量控制来了  </p>\n<h5 id=\"OSI七层模型\"><a href=\"#OSI七层模型\" class=\"headerlink\" title=\"OSI七层模型\"></a>OSI七层模型</h5><p>应用层: 开发者将通信模型定制成协议。<br>表示层：制定双方数据交换格式。如Content-Type：application&#x2F;json; charset&#x3D;utf-8<br>会话层: 管理会话连接，由应用程序的请求和响应组成。<br>传输层：端口，实现报文数据传递。<br>网络层：路由器，ip寻址。<br>数据链路层：交换机，mac寻址，数据差错检测。<br>物理层：网线，二进制流传输。</p>\n<h5 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h5><h5 id=\"1-为什么有了ip还需要mac地址？\"><a href=\"#1-为什么有了ip还需要mac地址？\" class=\"headerlink\" title=\"1.为什么有了ip还需要mac地址？\"></a>1.为什么有了ip还需要mac地址？</h5><p>-简而言之，标识网络中的一台计算机，比较常用的就是IP地址和MAC地址，但计算机的IP地址可由用户自行更改，管理起来就相对困难，而MAC地址不可更改，所以一般会把IP地址和MAC地址组合起来使用。<br>-那只使用MAC地址不用IP地址行不行呢？不行的！因为最早就是MAC地址先出现的，并且当时并不用IP地址，只用MAC地址，后来随着网络中的设备越来越多，整个路由过程越来越复杂，便出现了子网的概念。对于目的地址在其他子网的数据包，路由只需要将数据包送到那个子网即可。<br>-那为什么要用IP地址呢？是因为IP地址是和地域相关的，对于同一个子网上的设备，IP地址的前缀都是一样的，这样路由器通过IP地址的前缀就知道设备在在哪个子网上了，而只用MAC地址的话，路由器则需要记住每个MAC地址在哪个子网，这需要路由器有极大的存储空间，是无法实现的。<br>-IP地址可以比作为地址，MAC地址为收件人，在一次通信过程中，两者是缺一不可的。</p>\n<h5 id=\"2-交换机有什么作用？\"><a href=\"#2-交换机有什么作用？\" class=\"headerlink\" title=\"2.交换机有什么作用？\"></a>2.交换机有什么作用？</h5><p>交换机通过广播形式发送arp每台设备的mac地址。<br>arp 即 Address Resolution Protocol，地址解析协议，是根据ip获取设备的mac地址。</p>\n<h5 id=\"3-同一网段为什么能通信？\"><a href=\"#3-同一网段为什么能通信？\" class=\"headerlink\" title=\"3.同一网段为什么能通信？\"></a>3.同一网段为什么能通信？</h5><p>如果同一网段，一般只运用到二层的mac地址的转发，2个相同网段的主机pc1和pc2，当pc1 ping pc2的时候，会先发送arp包，请求pc2的mac地址来进行二层封装，因为他们同一网段，所以能够获得arp回应，有了mac地址就能进行二层源mac和目的mac的封装，封装好了就能通讯。记住二层转发是基于mac的，三层才会基于ip。</p>\n<h5 id=\"4-直连网络需要ip地址？\"><a href=\"#4-直连网络需要ip地址？\" class=\"headerlink\" title=\"4.直连网络需要ip地址？\"></a>4.直连网络需要ip地址？</h5><p>如果两台机器互相知道其MAC地址可以直接交流，前提是互相知道彼此的MAC地址，如果不认识，就要通过arp广播（正向ARP: 通过IP地址获取MAC地址）找到mac地址。</p>\n<p>局域网内部的主机互联互通只需要MAC地址，而不需要IP地址，IP地址的作用是不同局域网的互联互通。</p>\n<h3 id=\"安全\"><a href=\"#安全\" class=\"headerlink\" title=\"安全\"></a>安全</h3><h5 id=\"DDos\"><a href=\"#DDos\" class=\"headerlink\" title=\"DDos\"></a>DDos</h5><p>Distributed Denial of Service 分布式拒绝服务</p>\n<p>肉鸡大量访问目标网站，目标网站被消耗带宽、服务器资源，导致无法正常处理其他用户请求。</p>\n<h5 id=\"DNS劫持\"><a href=\"#DNS劫持\" class=\"headerlink\" title=\"DNS劫持\"></a>DNS劫持</h5><p>假设运营商的DNS服务器被侵入了，用户的请求经过运营商DNS解析后被指向带有广告的ip网站去。</p>\n<h5 id=\"DNS查询攻击\"><a href=\"#DNS查询攻击\" class=\"headerlink\" title=\"DNS查询攻击\"></a>DNS查询攻击</h5><p>DNS Query Flood Attack: 攻击方法是通过操纵大量傀儡机器，发送海量的域名查询请求，当每秒域名查询请求次数超过DNS服务器可承载的能力时，则会造成解析域名超时从而直接影响业务的可用性</p>\n<h5 id=\"SQL注入\"><a href=\"#SQL注入\" class=\"headerlink\" title=\"SQL注入\"></a>SQL注入</h5><p>SQL注入：利用现有应用程序，可以将恶意的SQL命令注入到后台数据库引擎中并执行。也可以通过在Web表单中输入恶意SQL语句得到一个存在安全漏洞的网站上的数据库，而不是按照设计者意图去执行SQL语句</p>\n<p>举例：假设后端有一个漏洞，sql逻辑是通过拼接方式执行sql。<br>select * from car where (carNum &#x3D; $web1 </p>\n<p>前端被恶意传入变量值web1: ‘ZU_006’,0,0);DROP DATABASE TABLE&#x3D;’car’</p>\n<p>这就会导致表会被删除。</p>\n<h5 id=\"跨站脚本攻击\"><a href=\"#跨站脚本攻击\" class=\"headerlink\" title=\"跨站脚本攻击\"></a>跨站脚本攻击</h5><p>手段1：黑客发送一个带有恶意XSS脚本的链接给小白用户，小白点了链接，页面加载执行了恶意XSS脚本，这段脚本可以盗取小白的登录信息然后发给黑客。<br>手段2: 黑客预先将恶意XSS脚本注入到攻击网站的数据库(假设目标网站存在漏洞能被注入脚本)，其他用户刚好加载到带有恶意XSS脚本的目标页面，XSS脚本偷偷将用户的登录信息发给黑客。</p>\n<h5 id=\"重定向攻击\"><a href=\"#重定向攻击\" class=\"headerlink\" title=\"重定向攻击\"></a>重定向攻击</h5><p>一种常用的攻击手段是”钓鱼”。钓鱼攻击者通常会发送给受害者一个合法链接，当您访问链接时，会被导向一个非法网站，从而达到骗取用户信任、窃取用户资料的目的。为防止这种行为，我们必须对所有的重定向操作进行审核，以避免重定向到一个危险的地方。常见解决方案是白名单，将合法的要重定向的URL添加到白名单中，非白名单上的域名重定向时拒绝。第二种解决方案是重定向token，在合法的URL上加上token，重定向时进行验证。</p>\n"},{"title":"第29期：PHP-FPM","date":"2023-05-22T09:02:04.000Z","_content":"#### 服务管理\nsystemctl status php7.4-fpm # /etc/init.d下可查看服务名称\n\n##### 重启fpm\nps aux|grep php-fpm|grep pool|awk '{print $2}'|xargs -I {} kill {}   # 重启子进程\nkill -USR2 master进程id    # 表示重启php-fpm，其中USR2表示重载所有worker并解决载入配置和二进制模块\n\n##### php.ini配置文件\nphp --ini 查看php配置目录及php.ini文件位置\nmemory_limit 只是限制了每个 PHP 进程的内存占用上限，而不是为每个进程分配了固定的内存\n\n##### 查看PHP-FPM在机器上的平均内存占用\n```\nps --no-headers -o \"rss,cmd\" -C php-fpm | awk '{ sum+=$1 } END { printf (\"%d%s\\n\", sum/NR/1024,\"M\") }'\n```\nNote：NR表行数\n\n\n##### php-fpm配置文件\n```\n1.配置文件路径：/opt/php-7.3.11/etc/php-fpm.d/www.default.conf\n2.配置文件内容详解：\n[www]\nuser = nobody               #进程的发起用户和用户组，用户user是必须设置，group不是  nobody 任意用户\ngroup = nobody\n\nlisten = [::]:9000          #监听ip和端口，[::] 代表任意ip\nchdir = /app                #在程序启动时将会改变到指定的位置(这个是相对路径，相对当前路径或chroot后的“/”目录)　\n\npm = dynamic                #选择进程池管理器如何控制子进程的数量  \n#static： 对于子进程的开启数路给定一个锁定的值(pm.max_children) \n#dynamic: 子进程的数目为动态的，它的数目基于下面的指令的值(以下为dynamic适用参数)\npm.max_children = 16        #同一时刻能够存货的最大子进程的数量\npm.start_servers = 4        #在启动时启动的子进程数量\npm.min_spare_servers = 2    #处于空闲\"idle\"状态的最小子进程，如果空闲进程数量小于这个值，那么相应的子进程会被创建\npm.max_spare_servers = 16   #最大空闲子进程数量，空闲子进程数量超过这个值，那么相应的子进程会被杀掉。\ncatch_workers_output = Yes  #将worker的标准输出和错误输出重定向到主要的错误日志记录中，如果没有设置，根据FastCGI的指定，将会被重定向到/dev/null上\n```\n#### 参考\nhttps://www.php.net/manual/zh/install.fpm.configuration.php\n\n### PHP\n#### PHP安装\ncenots7安装php7.4\n\n下载php包\n\n[php官网](https://www.php.net/downloads.php)\n\n```\nwget https://www.php.net/distributions/php-7.4.29.tar.gz\n```\n\n解压\n```\ntar -xvf php-7.4.29.tar.gz\n```\n切换到目录\n```\ncd php-7.4.29\n```\n\n提前安装依赖工具：\n```\nyum -y install libxml2-devel openssl-devel sqlite-devel libcurl-devel libicu-devel gcc-c++ oniguruma oniguruma-devel libxslt-devel libpng-devel libjpeg-devel freetype-devel\n```\n说明：\n- 若出现`package not found`错误，那就可能需要更换yum源。\n\n配置安装模块\n```\n./configure  \\\n--prefix=/opt/php/php  \\\n--with-config-file-path=/opt/php/php/etc  \\\n--enable-fpm  \\\n--enable-gd  \\\n--with-external-gd  \\\n--with-fpm-user=nginx  \\\n--with-fpm-group=nginx  \\\n--enable-inline-optimization  \\\n--disable-debug  \\\n--disable-rpath  \\\n--enable-shared  \\\n--enable-soap  \\\n--with-libxml \\\n--with-xmlrpc  \\\n--with-openssl  \\\n--with-external-pcre \\\n--with-sqlite3  \\\n--with-zlib  \\\n--enable-bcmath  \\\n--with-iconv  \\\n--with-bz2  \\\n--enable-calendar  \\\n--with-curl  \\\n--with-cdb  \\\n--enable-dom  \\\n--enable-exif  \\\n--enable-fileinfo  \\\n--enable-filter  \\\n--enable-ftp \\\n--with-openssl-dir \\\n--with-jpeg \\\n--with-zlib-dir \\\n--with-freetype \\\n--enable-gd-jis-conv \\\n--with-gettext \\\n--with-gmp \\\n--with-mhash \\\n--enable-json \\\n--enable-mbstring \\\n--enable-mbregex \\\n--enable-pdo \\\n--with-mysqli=mysqlnd \\\n--with-pdo-mysql=mysqlnd \\\n--with-pdo-sqlite \\\n--with-readline \\\n--enable-session \\\n--enable-shmop \\\n--enable-simplexml \\\n--enable-sockets \\\n--enable-sysvmsg \\\n--enable-sysvsem \\\n--enable-sysvshm \\\n--with-xsl \\\n--with-zip \\\n--enable-mysqlnd-compression-support \\\n--with-pear \\\n--enable-opcache\n```\n说明：\n- `--prefix=/opt/php/php` 指定php的安装位置\n- `--enable-fpm` 加上这个选项，编译安装后的目录才会有fpm\n\n- 若遇到` (libpcre2-8 >= 10.30) were not met`问题，是因为模块`--with-external-pcre --with-pcre-jit`用到了`pcre2`\n\n  若包不可下载，可前往`http://www.pcre.org/`下载\n\n安装配置pcre2:\n```\nhttps://sourceforge.net/projects/pcre/files/pcre2/10.34/pcre2-10.34.tar.bz2/download\n\ntar xjvf pcre2-10.34.tar.bz2\n\ncd pcre2-10.34\n\n./configure\n\nmake && make install\n\nexport PKG_CONFIG_PATH=/usr/local/lib/pkgconfig/\n```\n\n- 若遇到`(libcurl >= 7.15.5) were not met`\n```\nyum install libcurl-devel\n```\n说明：若遇到`libcurl-devel` not found，可能需要添加yun源:\n```\ncd /etc/yum.repos.d\nyum clean all # 清除缓存\nwget http://mirrors.163.com/.help/CentOS7-Base-163.repo\n\nsed -i 's/$releasever/7/g' ./CentOS7-Base-163.repo # 替换成7\nyum makecache # 建立索引目录\nyum install libcurl-devel\n```\n- 若遇到`No package 'gdlib' found`\n```\nwget https://github.com/libgd/libgd/releases/download/gd-2.2.5/libgd-2.2.5.tar.gz\ntar zxvf libgd-2.2.5.tar.gz\ncd libgd-2.2.5\n./configure \nmake\nmake install\n\n```\n\n- 若遇到`GNU MP Library version 4.2 or greater required`，则：\n```\nyum -y install gmp-devel\n```\n\n- 若遇到`No package 'libzip' found`，则：\n```\nwget https://libzip.org/download/libzip-1.2.0.tar.gz\ntar -zxvf libzip-1.2.0.tar.gz\ncd libzip-1.2.0\n./configure\nmake && make install\n\n```\n\n配置完成会看到以下界面\n```\n...\nThank you for using PHP.\n...\n```\n编译和安装\n```\nmake && make install\n```\n\n安装完成目录结构\n```\n$ cd /opt/php/php\n$ tree . -L 1\n\n├── bin\n├── etc\n├── include\n├── lib\n├── php\n├── sbin\n└── var\n```\n编辑`/etc/profile`，文件末尾添加\n```\nPATH=$PATH:/opt/php/php/bin\nexport PATH\n```\n\n`source /etc/profile`后即可使用`php -v`等命令\n\n安装之后的目录没有`php.ini`，从之前用来安装php的源码包的根目录拷贝`php.ini-production`到`/opt/php/php/etc`目录，改名：\n```\nmv php.ini-production php.ini\n```\n\nphp命令\n```\nphp --ini # 查看ini位置\nphp -v # 查看版本\n\n$ php -a # 交互式运行php\nphp > $a = 5;\nphp > echo $a;\n\n```\n\n给php-fpm建个软链\n```\nln -s /opt/php/php/sbin/php-fpm /usr/sbin/php-fpm\n```\n\n配置php-fpm.conf文件\n```\ncd /opt/php/php/etc\nmv php-fpm.conf.default php-fpm.conf\n```\n配置www.conf文件\n```\ncd /opt/php/php/etc/php-fpm.d\nmv www.conf.default www.conf\n```\n启动php-fpm服务\n```\nphp-fpm\n```\n","source":"_posts/第29期：PHP-FPM.md","raw":"---\ntitle: 第29期：PHP-FPM\ndate: 2023-05-22 17:02:04\ntags:\n---\n#### 服务管理\nsystemctl status php7.4-fpm # /etc/init.d下可查看服务名称\n\n##### 重启fpm\nps aux|grep php-fpm|grep pool|awk '{print $2}'|xargs -I {} kill {}   # 重启子进程\nkill -USR2 master进程id    # 表示重启php-fpm，其中USR2表示重载所有worker并解决载入配置和二进制模块\n\n##### php.ini配置文件\nphp --ini 查看php配置目录及php.ini文件位置\nmemory_limit 只是限制了每个 PHP 进程的内存占用上限，而不是为每个进程分配了固定的内存\n\n##### 查看PHP-FPM在机器上的平均内存占用\n```\nps --no-headers -o \"rss,cmd\" -C php-fpm | awk '{ sum+=$1 } END { printf (\"%d%s\\n\", sum/NR/1024,\"M\") }'\n```\nNote：NR表行数\n\n\n##### php-fpm配置文件\n```\n1.配置文件路径：/opt/php-7.3.11/etc/php-fpm.d/www.default.conf\n2.配置文件内容详解：\n[www]\nuser = nobody               #进程的发起用户和用户组，用户user是必须设置，group不是  nobody 任意用户\ngroup = nobody\n\nlisten = [::]:9000          #监听ip和端口，[::] 代表任意ip\nchdir = /app                #在程序启动时将会改变到指定的位置(这个是相对路径，相对当前路径或chroot后的“/”目录)　\n\npm = dynamic                #选择进程池管理器如何控制子进程的数量  \n#static： 对于子进程的开启数路给定一个锁定的值(pm.max_children) \n#dynamic: 子进程的数目为动态的，它的数目基于下面的指令的值(以下为dynamic适用参数)\npm.max_children = 16        #同一时刻能够存货的最大子进程的数量\npm.start_servers = 4        #在启动时启动的子进程数量\npm.min_spare_servers = 2    #处于空闲\"idle\"状态的最小子进程，如果空闲进程数量小于这个值，那么相应的子进程会被创建\npm.max_spare_servers = 16   #最大空闲子进程数量，空闲子进程数量超过这个值，那么相应的子进程会被杀掉。\ncatch_workers_output = Yes  #将worker的标准输出和错误输出重定向到主要的错误日志记录中，如果没有设置，根据FastCGI的指定，将会被重定向到/dev/null上\n```\n#### 参考\nhttps://www.php.net/manual/zh/install.fpm.configuration.php\n\n### PHP\n#### PHP安装\ncenots7安装php7.4\n\n下载php包\n\n[php官网](https://www.php.net/downloads.php)\n\n```\nwget https://www.php.net/distributions/php-7.4.29.tar.gz\n```\n\n解压\n```\ntar -xvf php-7.4.29.tar.gz\n```\n切换到目录\n```\ncd php-7.4.29\n```\n\n提前安装依赖工具：\n```\nyum -y install libxml2-devel openssl-devel sqlite-devel libcurl-devel libicu-devel gcc-c++ oniguruma oniguruma-devel libxslt-devel libpng-devel libjpeg-devel freetype-devel\n```\n说明：\n- 若出现`package not found`错误，那就可能需要更换yum源。\n\n配置安装模块\n```\n./configure  \\\n--prefix=/opt/php/php  \\\n--with-config-file-path=/opt/php/php/etc  \\\n--enable-fpm  \\\n--enable-gd  \\\n--with-external-gd  \\\n--with-fpm-user=nginx  \\\n--with-fpm-group=nginx  \\\n--enable-inline-optimization  \\\n--disable-debug  \\\n--disable-rpath  \\\n--enable-shared  \\\n--enable-soap  \\\n--with-libxml \\\n--with-xmlrpc  \\\n--with-openssl  \\\n--with-external-pcre \\\n--with-sqlite3  \\\n--with-zlib  \\\n--enable-bcmath  \\\n--with-iconv  \\\n--with-bz2  \\\n--enable-calendar  \\\n--with-curl  \\\n--with-cdb  \\\n--enable-dom  \\\n--enable-exif  \\\n--enable-fileinfo  \\\n--enable-filter  \\\n--enable-ftp \\\n--with-openssl-dir \\\n--with-jpeg \\\n--with-zlib-dir \\\n--with-freetype \\\n--enable-gd-jis-conv \\\n--with-gettext \\\n--with-gmp \\\n--with-mhash \\\n--enable-json \\\n--enable-mbstring \\\n--enable-mbregex \\\n--enable-pdo \\\n--with-mysqli=mysqlnd \\\n--with-pdo-mysql=mysqlnd \\\n--with-pdo-sqlite \\\n--with-readline \\\n--enable-session \\\n--enable-shmop \\\n--enable-simplexml \\\n--enable-sockets \\\n--enable-sysvmsg \\\n--enable-sysvsem \\\n--enable-sysvshm \\\n--with-xsl \\\n--with-zip \\\n--enable-mysqlnd-compression-support \\\n--with-pear \\\n--enable-opcache\n```\n说明：\n- `--prefix=/opt/php/php` 指定php的安装位置\n- `--enable-fpm` 加上这个选项，编译安装后的目录才会有fpm\n\n- 若遇到` (libpcre2-8 >= 10.30) were not met`问题，是因为模块`--with-external-pcre --with-pcre-jit`用到了`pcre2`\n\n  若包不可下载，可前往`http://www.pcre.org/`下载\n\n安装配置pcre2:\n```\nhttps://sourceforge.net/projects/pcre/files/pcre2/10.34/pcre2-10.34.tar.bz2/download\n\ntar xjvf pcre2-10.34.tar.bz2\n\ncd pcre2-10.34\n\n./configure\n\nmake && make install\n\nexport PKG_CONFIG_PATH=/usr/local/lib/pkgconfig/\n```\n\n- 若遇到`(libcurl >= 7.15.5) were not met`\n```\nyum install libcurl-devel\n```\n说明：若遇到`libcurl-devel` not found，可能需要添加yun源:\n```\ncd /etc/yum.repos.d\nyum clean all # 清除缓存\nwget http://mirrors.163.com/.help/CentOS7-Base-163.repo\n\nsed -i 's/$releasever/7/g' ./CentOS7-Base-163.repo # 替换成7\nyum makecache # 建立索引目录\nyum install libcurl-devel\n```\n- 若遇到`No package 'gdlib' found`\n```\nwget https://github.com/libgd/libgd/releases/download/gd-2.2.5/libgd-2.2.5.tar.gz\ntar zxvf libgd-2.2.5.tar.gz\ncd libgd-2.2.5\n./configure \nmake\nmake install\n\n```\n\n- 若遇到`GNU MP Library version 4.2 or greater required`，则：\n```\nyum -y install gmp-devel\n```\n\n- 若遇到`No package 'libzip' found`，则：\n```\nwget https://libzip.org/download/libzip-1.2.0.tar.gz\ntar -zxvf libzip-1.2.0.tar.gz\ncd libzip-1.2.0\n./configure\nmake && make install\n\n```\n\n配置完成会看到以下界面\n```\n...\nThank you for using PHP.\n...\n```\n编译和安装\n```\nmake && make install\n```\n\n安装完成目录结构\n```\n$ cd /opt/php/php\n$ tree . -L 1\n\n├── bin\n├── etc\n├── include\n├── lib\n├── php\n├── sbin\n└── var\n```\n编辑`/etc/profile`，文件末尾添加\n```\nPATH=$PATH:/opt/php/php/bin\nexport PATH\n```\n\n`source /etc/profile`后即可使用`php -v`等命令\n\n安装之后的目录没有`php.ini`，从之前用来安装php的源码包的根目录拷贝`php.ini-production`到`/opt/php/php/etc`目录，改名：\n```\nmv php.ini-production php.ini\n```\n\nphp命令\n```\nphp --ini # 查看ini位置\nphp -v # 查看版本\n\n$ php -a # 交互式运行php\nphp > $a = 5;\nphp > echo $a;\n\n```\n\n给php-fpm建个软链\n```\nln -s /opt/php/php/sbin/php-fpm /usr/sbin/php-fpm\n```\n\n配置php-fpm.conf文件\n```\ncd /opt/php/php/etc\nmv php-fpm.conf.default php-fpm.conf\n```\n配置www.conf文件\n```\ncd /opt/php/php/etc/php-fpm.d\nmv www.conf.default www.conf\n```\n启动php-fpm服务\n```\nphp-fpm\n```\n","slug":"第29期：PHP-FPM","published":1,"updated":"2024-03-06T06:55:18.359Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvte7000lbklnauf51jb5","content":"<h4 id=\"服务管理\"><a href=\"#服务管理\" class=\"headerlink\" title=\"服务管理\"></a>服务管理</h4><p>systemctl status php7.4-fpm # &#x2F;etc&#x2F;init.d下可查看服务名称</p>\n<h5 id=\"重启fpm\"><a href=\"#重启fpm\" class=\"headerlink\" title=\"重启fpm\"></a>重启fpm</h5><p>ps aux|grep php-fpm|grep pool|awk ‘{print $2}’|xargs -I {} kill {}   # 重启子进程<br>kill -USR2 master进程id    # 表示重启php-fpm，其中USR2表示重载所有worker并解决载入配置和二进制模块</p>\n<h5 id=\"php-ini配置文件\"><a href=\"#php-ini配置文件\" class=\"headerlink\" title=\"php.ini配置文件\"></a>php.ini配置文件</h5><p>php –ini 查看php配置目录及php.ini文件位置<br>memory_limit 只是限制了每个 PHP 进程的内存占用上限，而不是为每个进程分配了固定的内存</p>\n<h5 id=\"查看PHP-FPM在机器上的平均内存占用\"><a href=\"#查看PHP-FPM在机器上的平均内存占用\" class=\"headerlink\" title=\"查看PHP-FPM在机器上的平均内存占用\"></a>查看PHP-FPM在机器上的平均内存占用</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps --no-headers -o &quot;rss,cmd&quot; -C php-fpm | awk &#x27;&#123; sum+=$1 &#125; END &#123; printf (&quot;%d%s\\n&quot;, sum/NR/1024,&quot;M&quot;) &#125;&#x27;</span><br></pre></td></tr></table></figure>\n<p>Note：NR表行数</p>\n<h5 id=\"php-fpm配置文件\"><a href=\"#php-fpm配置文件\" class=\"headerlink\" title=\"php-fpm配置文件\"></a>php-fpm配置文件</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.配置文件路径：/opt/php-7.3.11/etc/php-fpm.d/www.default.conf</span><br><span class=\"line\">2.配置文件内容详解：</span><br><span class=\"line\">[www]</span><br><span class=\"line\">user = nobody               #进程的发起用户和用户组，用户user是必须设置，group不是  nobody 任意用户</span><br><span class=\"line\">group = nobody</span><br><span class=\"line\"></span><br><span class=\"line\">listen = [::]:9000          #监听ip和端口，[::] 代表任意ip</span><br><span class=\"line\">chdir = /app                #在程序启动时将会改变到指定的位置(这个是相对路径，相对当前路径或chroot后的“/”目录)　</span><br><span class=\"line\"></span><br><span class=\"line\">pm = dynamic                #选择进程池管理器如何控制子进程的数量  </span><br><span class=\"line\">#static： 对于子进程的开启数路给定一个锁定的值(pm.max_children) </span><br><span class=\"line\">#dynamic: 子进程的数目为动态的，它的数目基于下面的指令的值(以下为dynamic适用参数)</span><br><span class=\"line\">pm.max_children = 16        #同一时刻能够存货的最大子进程的数量</span><br><span class=\"line\">pm.start_servers = 4        #在启动时启动的子进程数量</span><br><span class=\"line\">pm.min_spare_servers = 2    #处于空闲&quot;idle&quot;状态的最小子进程，如果空闲进程数量小于这个值，那么相应的子进程会被创建</span><br><span class=\"line\">pm.max_spare_servers = 16   #最大空闲子进程数量，空闲子进程数量超过这个值，那么相应的子进程会被杀掉。</span><br><span class=\"line\">catch_workers_output = Yes  #将worker的标准输出和错误输出重定向到主要的错误日志记录中，如果没有设置，根据FastCGI的指定，将会被重定向到/dev/null上</span><br></pre></td></tr></table></figure>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p><a href=\"https://www.php.net/manual/zh/install.fpm.configuration.php\">https://www.php.net/manual/zh/install.fpm.configuration.php</a></p>\n<h3 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h3><h4 id=\"PHP安装\"><a href=\"#PHP安装\" class=\"headerlink\" title=\"PHP安装\"></a>PHP安装</h4><p>cenots7安装php7.4</p>\n<p>下载php包</p>\n<p><a href=\"https://www.php.net/downloads.php\">php官网</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.php.net/distributions/php-7.4.29.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>解压</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xvf php-7.4.29.tar.gz</span><br></pre></td></tr></table></figure>\n<p>切换到目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd php-7.4.29</span><br></pre></td></tr></table></figure>\n\n<p>提前安装依赖工具：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install libxml2-devel openssl-devel sqlite-devel libcurl-devel libicu-devel gcc-c++ oniguruma oniguruma-devel libxslt-devel libpng-devel libjpeg-devel freetype-devel</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li>若出现<code>package not found</code>错误，那就可能需要更换yum源。</li>\n</ul>\n<p>配置安装模块</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure  \\</span><br><span class=\"line\">--prefix=/opt/php/php  \\</span><br><span class=\"line\">--with-config-file-path=/opt/php/php/etc  \\</span><br><span class=\"line\">--enable-fpm  \\</span><br><span class=\"line\">--enable-gd  \\</span><br><span class=\"line\">--with-external-gd  \\</span><br><span class=\"line\">--with-fpm-user=nginx  \\</span><br><span class=\"line\">--with-fpm-group=nginx  \\</span><br><span class=\"line\">--enable-inline-optimization  \\</span><br><span class=\"line\">--disable-debug  \\</span><br><span class=\"line\">--disable-rpath  \\</span><br><span class=\"line\">--enable-shared  \\</span><br><span class=\"line\">--enable-soap  \\</span><br><span class=\"line\">--with-libxml \\</span><br><span class=\"line\">--with-xmlrpc  \\</span><br><span class=\"line\">--with-openssl  \\</span><br><span class=\"line\">--with-external-pcre \\</span><br><span class=\"line\">--with-sqlite3  \\</span><br><span class=\"line\">--with-zlib  \\</span><br><span class=\"line\">--enable-bcmath  \\</span><br><span class=\"line\">--with-iconv  \\</span><br><span class=\"line\">--with-bz2  \\</span><br><span class=\"line\">--enable-calendar  \\</span><br><span class=\"line\">--with-curl  \\</span><br><span class=\"line\">--with-cdb  \\</span><br><span class=\"line\">--enable-dom  \\</span><br><span class=\"line\">--enable-exif  \\</span><br><span class=\"line\">--enable-fileinfo  \\</span><br><span class=\"line\">--enable-filter  \\</span><br><span class=\"line\">--enable-ftp \\</span><br><span class=\"line\">--with-openssl-dir \\</span><br><span class=\"line\">--with-jpeg \\</span><br><span class=\"line\">--with-zlib-dir \\</span><br><span class=\"line\">--with-freetype \\</span><br><span class=\"line\">--enable-gd-jis-conv \\</span><br><span class=\"line\">--with-gettext \\</span><br><span class=\"line\">--with-gmp \\</span><br><span class=\"line\">--with-mhash \\</span><br><span class=\"line\">--enable-json \\</span><br><span class=\"line\">--enable-mbstring \\</span><br><span class=\"line\">--enable-mbregex \\</span><br><span class=\"line\">--enable-pdo \\</span><br><span class=\"line\">--with-mysqli=mysqlnd \\</span><br><span class=\"line\">--with-pdo-mysql=mysqlnd \\</span><br><span class=\"line\">--with-pdo-sqlite \\</span><br><span class=\"line\">--with-readline \\</span><br><span class=\"line\">--enable-session \\</span><br><span class=\"line\">--enable-shmop \\</span><br><span class=\"line\">--enable-simplexml \\</span><br><span class=\"line\">--enable-sockets \\</span><br><span class=\"line\">--enable-sysvmsg \\</span><br><span class=\"line\">--enable-sysvsem \\</span><br><span class=\"line\">--enable-sysvshm \\</span><br><span class=\"line\">--with-xsl \\</span><br><span class=\"line\">--with-zip \\</span><br><span class=\"line\">--enable-mysqlnd-compression-support \\</span><br><span class=\"line\">--with-pear \\</span><br><span class=\"line\">--enable-opcache</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><p><code>--prefix=/opt/php/php</code> 指定php的安装位置</p>\n</li>\n<li><p><code>--enable-fpm</code> 加上这个选项，编译安装后的目录才会有fpm</p>\n</li>\n<li><p>若遇到<code> (libpcre2-8 &gt;= 10.30) were not met</code>问题，是因为模块<code>--with-external-pcre --with-pcre-jit</code>用到了<code>pcre2</code></p>\n<p>若包不可下载，可前往<code>http://www.pcre.org/</code>下载</p>\n</li>\n</ul>\n<p>安装配置pcre2:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://sourceforge.net/projects/pcre/files/pcre2/10.34/pcre2-10.34.tar.bz2/download</span><br><span class=\"line\"></span><br><span class=\"line\">tar xjvf pcre2-10.34.tar.bz2</span><br><span class=\"line\"></span><br><span class=\"line\">cd pcre2-10.34</span><br><span class=\"line\"></span><br><span class=\"line\">./configure</span><br><span class=\"line\"></span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\"></span><br><span class=\"line\">export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig/</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>若遇到<code>(libcurl &gt;= 7.15.5) were not met</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install libcurl-devel</span><br></pre></td></tr></table></figure>\n<p>说明：若遇到<code>libcurl-devel</code> not found，可能需要添加yun源:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/yum.repos.d</span><br><span class=\"line\">yum clean all # 清除缓存</span><br><span class=\"line\">wget http://mirrors.163.com/.help/CentOS7-Base-163.repo</span><br><span class=\"line\"></span><br><span class=\"line\">sed -i &#x27;s/$releasever/7/g&#x27; ./CentOS7-Base-163.repo # 替换成7</span><br><span class=\"line\">yum makecache # 建立索引目录</span><br><span class=\"line\">yum install libcurl-devel</span><br></pre></td></tr></table></figure></li>\n<li><p>若遇到<code>No package &#39;gdlib&#39; found</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/libgd/libgd/releases/download/gd-2.2.5/libgd-2.2.5.tar.gz</span><br><span class=\"line\">tar zxvf libgd-2.2.5.tar.gz</span><br><span class=\"line\">cd libgd-2.2.5</span><br><span class=\"line\">./configure </span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>若遇到<code>GNU MP Library version 4.2 or greater required</code>，则：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gmp-devel</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>若遇到<code>No package &#39;libzip&#39; found</code>，则：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://libzip.org/download/libzip-1.2.0.tar.gz</span><br><span class=\"line\">tar -zxvf libzip-1.2.0.tar.gz</span><br><span class=\"line\">cd libzip-1.2.0</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>配置完成会看到以下界面</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">Thank you for using PHP.</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>编译和安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<p>安装完成目录结构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd /opt/php/php</span><br><span class=\"line\">$ tree . -L 1</span><br><span class=\"line\"></span><br><span class=\"line\">├── bin</span><br><span class=\"line\">├── etc</span><br><span class=\"line\">├── include</span><br><span class=\"line\">├── lib</span><br><span class=\"line\">├── php</span><br><span class=\"line\">├── sbin</span><br><span class=\"line\">└── var</span><br></pre></td></tr></table></figure>\n<p>编辑<code>/etc/profile</code>，文件末尾添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PATH=$PATH:/opt/php/php/bin</span><br><span class=\"line\">export PATH</span><br></pre></td></tr></table></figure>\n\n<p><code>source /etc/profile</code>后即可使用<code>php -v</code>等命令</p>\n<p>安装之后的目录没有<code>php.ini</code>，从之前用来安装php的源码包的根目录拷贝<code>php.ini-production</code>到<code>/opt/php/php/etc</code>目录，改名：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv php.ini-production php.ini</span><br></pre></td></tr></table></figure>\n\n<p>php命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php --ini # 查看ini位置</span><br><span class=\"line\">php -v # 查看版本</span><br><span class=\"line\"></span><br><span class=\"line\">$ php -a # 交互式运行php</span><br><span class=\"line\">php &gt; $a = 5;</span><br><span class=\"line\">php &gt; echo $a;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>给php-fpm建个软链</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /opt/php/php/sbin/php-fpm /usr/sbin/php-fpm</span><br></pre></td></tr></table></figure>\n\n<p>配置php-fpm.conf文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/php/php/etc</span><br><span class=\"line\">mv php-fpm.conf.default php-fpm.conf</span><br></pre></td></tr></table></figure>\n<p>配置<a href=\"http://www.conf文件/\">www.conf文件</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/php/php/etc/php-fpm.d</span><br><span class=\"line\">mv www.conf.default www.conf</span><br></pre></td></tr></table></figure>\n<p>启动php-fpm服务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php-fpm</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"服务管理\"><a href=\"#服务管理\" class=\"headerlink\" title=\"服务管理\"></a>服务管理</h4><p>systemctl status php7.4-fpm # &#x2F;etc&#x2F;init.d下可查看服务名称</p>\n<h5 id=\"重启fpm\"><a href=\"#重启fpm\" class=\"headerlink\" title=\"重启fpm\"></a>重启fpm</h5><p>ps aux|grep php-fpm|grep pool|awk ‘{print $2}’|xargs -I {} kill {}   # 重启子进程<br>kill -USR2 master进程id    # 表示重启php-fpm，其中USR2表示重载所有worker并解决载入配置和二进制模块</p>\n<h5 id=\"php-ini配置文件\"><a href=\"#php-ini配置文件\" class=\"headerlink\" title=\"php.ini配置文件\"></a>php.ini配置文件</h5><p>php –ini 查看php配置目录及php.ini文件位置<br>memory_limit 只是限制了每个 PHP 进程的内存占用上限，而不是为每个进程分配了固定的内存</p>\n<h5 id=\"查看PHP-FPM在机器上的平均内存占用\"><a href=\"#查看PHP-FPM在机器上的平均内存占用\" class=\"headerlink\" title=\"查看PHP-FPM在机器上的平均内存占用\"></a>查看PHP-FPM在机器上的平均内存占用</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ps --no-headers -o &quot;rss,cmd&quot; -C php-fpm | awk &#x27;&#123; sum+=$1 &#125; END &#123; printf (&quot;%d%s\\n&quot;, sum/NR/1024,&quot;M&quot;) &#125;&#x27;</span><br></pre></td></tr></table></figure>\n<p>Note：NR表行数</p>\n<h5 id=\"php-fpm配置文件\"><a href=\"#php-fpm配置文件\" class=\"headerlink\" title=\"php-fpm配置文件\"></a>php-fpm配置文件</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.配置文件路径：/opt/php-7.3.11/etc/php-fpm.d/www.default.conf</span><br><span class=\"line\">2.配置文件内容详解：</span><br><span class=\"line\">[www]</span><br><span class=\"line\">user = nobody               #进程的发起用户和用户组，用户user是必须设置，group不是  nobody 任意用户</span><br><span class=\"line\">group = nobody</span><br><span class=\"line\"></span><br><span class=\"line\">listen = [::]:9000          #监听ip和端口，[::] 代表任意ip</span><br><span class=\"line\">chdir = /app                #在程序启动时将会改变到指定的位置(这个是相对路径，相对当前路径或chroot后的“/”目录)　</span><br><span class=\"line\"></span><br><span class=\"line\">pm = dynamic                #选择进程池管理器如何控制子进程的数量  </span><br><span class=\"line\">#static： 对于子进程的开启数路给定一个锁定的值(pm.max_children) </span><br><span class=\"line\">#dynamic: 子进程的数目为动态的，它的数目基于下面的指令的值(以下为dynamic适用参数)</span><br><span class=\"line\">pm.max_children = 16        #同一时刻能够存货的最大子进程的数量</span><br><span class=\"line\">pm.start_servers = 4        #在启动时启动的子进程数量</span><br><span class=\"line\">pm.min_spare_servers = 2    #处于空闲&quot;idle&quot;状态的最小子进程，如果空闲进程数量小于这个值，那么相应的子进程会被创建</span><br><span class=\"line\">pm.max_spare_servers = 16   #最大空闲子进程数量，空闲子进程数量超过这个值，那么相应的子进程会被杀掉。</span><br><span class=\"line\">catch_workers_output = Yes  #将worker的标准输出和错误输出重定向到主要的错误日志记录中，如果没有设置，根据FastCGI的指定，将会被重定向到/dev/null上</span><br></pre></td></tr></table></figure>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p><a href=\"https://www.php.net/manual/zh/install.fpm.configuration.php\">https://www.php.net/manual/zh/install.fpm.configuration.php</a></p>\n<h3 id=\"PHP\"><a href=\"#PHP\" class=\"headerlink\" title=\"PHP\"></a>PHP</h3><h4 id=\"PHP安装\"><a href=\"#PHP安装\" class=\"headerlink\" title=\"PHP安装\"></a>PHP安装</h4><p>cenots7安装php7.4</p>\n<p>下载php包</p>\n<p><a href=\"https://www.php.net/downloads.php\">php官网</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://www.php.net/distributions/php-7.4.29.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>解压</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar -xvf php-7.4.29.tar.gz</span><br></pre></td></tr></table></figure>\n<p>切换到目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd php-7.4.29</span><br></pre></td></tr></table></figure>\n\n<p>提前安装依赖工具：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install libxml2-devel openssl-devel sqlite-devel libcurl-devel libicu-devel gcc-c++ oniguruma oniguruma-devel libxslt-devel libpng-devel libjpeg-devel freetype-devel</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li>若出现<code>package not found</code>错误，那就可能需要更换yum源。</li>\n</ul>\n<p>配置安装模块</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./configure  \\</span><br><span class=\"line\">--prefix=/opt/php/php  \\</span><br><span class=\"line\">--with-config-file-path=/opt/php/php/etc  \\</span><br><span class=\"line\">--enable-fpm  \\</span><br><span class=\"line\">--enable-gd  \\</span><br><span class=\"line\">--with-external-gd  \\</span><br><span class=\"line\">--with-fpm-user=nginx  \\</span><br><span class=\"line\">--with-fpm-group=nginx  \\</span><br><span class=\"line\">--enable-inline-optimization  \\</span><br><span class=\"line\">--disable-debug  \\</span><br><span class=\"line\">--disable-rpath  \\</span><br><span class=\"line\">--enable-shared  \\</span><br><span class=\"line\">--enable-soap  \\</span><br><span class=\"line\">--with-libxml \\</span><br><span class=\"line\">--with-xmlrpc  \\</span><br><span class=\"line\">--with-openssl  \\</span><br><span class=\"line\">--with-external-pcre \\</span><br><span class=\"line\">--with-sqlite3  \\</span><br><span class=\"line\">--with-zlib  \\</span><br><span class=\"line\">--enable-bcmath  \\</span><br><span class=\"line\">--with-iconv  \\</span><br><span class=\"line\">--with-bz2  \\</span><br><span class=\"line\">--enable-calendar  \\</span><br><span class=\"line\">--with-curl  \\</span><br><span class=\"line\">--with-cdb  \\</span><br><span class=\"line\">--enable-dom  \\</span><br><span class=\"line\">--enable-exif  \\</span><br><span class=\"line\">--enable-fileinfo  \\</span><br><span class=\"line\">--enable-filter  \\</span><br><span class=\"line\">--enable-ftp \\</span><br><span class=\"line\">--with-openssl-dir \\</span><br><span class=\"line\">--with-jpeg \\</span><br><span class=\"line\">--with-zlib-dir \\</span><br><span class=\"line\">--with-freetype \\</span><br><span class=\"line\">--enable-gd-jis-conv \\</span><br><span class=\"line\">--with-gettext \\</span><br><span class=\"line\">--with-gmp \\</span><br><span class=\"line\">--with-mhash \\</span><br><span class=\"line\">--enable-json \\</span><br><span class=\"line\">--enable-mbstring \\</span><br><span class=\"line\">--enable-mbregex \\</span><br><span class=\"line\">--enable-pdo \\</span><br><span class=\"line\">--with-mysqli=mysqlnd \\</span><br><span class=\"line\">--with-pdo-mysql=mysqlnd \\</span><br><span class=\"line\">--with-pdo-sqlite \\</span><br><span class=\"line\">--with-readline \\</span><br><span class=\"line\">--enable-session \\</span><br><span class=\"line\">--enable-shmop \\</span><br><span class=\"line\">--enable-simplexml \\</span><br><span class=\"line\">--enable-sockets \\</span><br><span class=\"line\">--enable-sysvmsg \\</span><br><span class=\"line\">--enable-sysvsem \\</span><br><span class=\"line\">--enable-sysvshm \\</span><br><span class=\"line\">--with-xsl \\</span><br><span class=\"line\">--with-zip \\</span><br><span class=\"line\">--enable-mysqlnd-compression-support \\</span><br><span class=\"line\">--with-pear \\</span><br><span class=\"line\">--enable-opcache</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><p><code>--prefix=/opt/php/php</code> 指定php的安装位置</p>\n</li>\n<li><p><code>--enable-fpm</code> 加上这个选项，编译安装后的目录才会有fpm</p>\n</li>\n<li><p>若遇到<code> (libpcre2-8 &gt;= 10.30) were not met</code>问题，是因为模块<code>--with-external-pcre --with-pcre-jit</code>用到了<code>pcre2</code></p>\n<p>若包不可下载，可前往<code>http://www.pcre.org/</code>下载</p>\n</li>\n</ul>\n<p>安装配置pcre2:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">https://sourceforge.net/projects/pcre/files/pcre2/10.34/pcre2-10.34.tar.bz2/download</span><br><span class=\"line\"></span><br><span class=\"line\">tar xjvf pcre2-10.34.tar.bz2</span><br><span class=\"line\"></span><br><span class=\"line\">cd pcre2-10.34</span><br><span class=\"line\"></span><br><span class=\"line\">./configure</span><br><span class=\"line\"></span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\"></span><br><span class=\"line\">export PKG_CONFIG_PATH=/usr/local/lib/pkgconfig/</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>若遇到<code>(libcurl &gt;= 7.15.5) were not met</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install libcurl-devel</span><br></pre></td></tr></table></figure>\n<p>说明：若遇到<code>libcurl-devel</code> not found，可能需要添加yun源:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/yum.repos.d</span><br><span class=\"line\">yum clean all # 清除缓存</span><br><span class=\"line\">wget http://mirrors.163.com/.help/CentOS7-Base-163.repo</span><br><span class=\"line\"></span><br><span class=\"line\">sed -i &#x27;s/$releasever/7/g&#x27; ./CentOS7-Base-163.repo # 替换成7</span><br><span class=\"line\">yum makecache # 建立索引目录</span><br><span class=\"line\">yum install libcurl-devel</span><br></pre></td></tr></table></figure></li>\n<li><p>若遇到<code>No package &#39;gdlib&#39; found</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://github.com/libgd/libgd/releases/download/gd-2.2.5/libgd-2.2.5.tar.gz</span><br><span class=\"line\">tar zxvf libgd-2.2.5.tar.gz</span><br><span class=\"line\">cd libgd-2.2.5</span><br><span class=\"line\">./configure </span><br><span class=\"line\">make</span><br><span class=\"line\">make install</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>若遇到<code>GNU MP Library version 4.2 or greater required</code>，则：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install gmp-devel</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>若遇到<code>No package &#39;libzip&#39; found</code>，则：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget https://libzip.org/download/libzip-1.2.0.tar.gz</span><br><span class=\"line\">tar -zxvf libzip-1.2.0.tar.gz</span><br><span class=\"line\">cd libzip-1.2.0</span><br><span class=\"line\">./configure</span><br><span class=\"line\">make &amp;&amp; make install</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>配置完成会看到以下界面</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">Thank you for using PHP.</span><br><span class=\"line\">...</span><br></pre></td></tr></table></figure>\n<p>编译和安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n\n<p>安装完成目录结构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ cd /opt/php/php</span><br><span class=\"line\">$ tree . -L 1</span><br><span class=\"line\"></span><br><span class=\"line\">├── bin</span><br><span class=\"line\">├── etc</span><br><span class=\"line\">├── include</span><br><span class=\"line\">├── lib</span><br><span class=\"line\">├── php</span><br><span class=\"line\">├── sbin</span><br><span class=\"line\">└── var</span><br></pre></td></tr></table></figure>\n<p>编辑<code>/etc/profile</code>，文件末尾添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PATH=$PATH:/opt/php/php/bin</span><br><span class=\"line\">export PATH</span><br></pre></td></tr></table></figure>\n\n<p><code>source /etc/profile</code>后即可使用<code>php -v</code>等命令</p>\n<p>安装之后的目录没有<code>php.ini</code>，从之前用来安装php的源码包的根目录拷贝<code>php.ini-production</code>到<code>/opt/php/php/etc</code>目录，改名：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv php.ini-production php.ini</span><br></pre></td></tr></table></figure>\n\n<p>php命令</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php --ini # 查看ini位置</span><br><span class=\"line\">php -v # 查看版本</span><br><span class=\"line\"></span><br><span class=\"line\">$ php -a # 交互式运行php</span><br><span class=\"line\">php &gt; $a = 5;</span><br><span class=\"line\">php &gt; echo $a;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>给php-fpm建个软链</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ln -s /opt/php/php/sbin/php-fpm /usr/sbin/php-fpm</span><br></pre></td></tr></table></figure>\n\n<p>配置php-fpm.conf文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/php/php/etc</span><br><span class=\"line\">mv php-fpm.conf.default php-fpm.conf</span><br></pre></td></tr></table></figure>\n<p>配置<a href=\"http://www.conf文件/\">www.conf文件</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/php/php/etc/php-fpm.d</span><br><span class=\"line\">mv www.conf.default www.conf</span><br></pre></td></tr></table></figure>\n<p>启动php-fpm服务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">php-fpm</span><br></pre></td></tr></table></figure>\n"},{"title":"第2期: hexo + github部署个人博客","date":"2023-05-18T04:29:50.000Z","_content":"### github创建项目\n```\n仓库名称: ${username}.github.io # username是github账号名称\n```\n\n### 参考第一期用hexo创建了项目blog，修改站点配置文件_config.yaml\n```\n# Deployment\n## Docs: https://hexo.io/docs/one-command-deployment\ndeploy:\n  type: git\n  repo: https://github.com/chenqiaorui/chenqiaorui.github.io.git\n  branch: master\n```\n### 安装hexo-Git部署插件\n```\nnpm install hexo-deployer-git --save\n```\n\n### 部署到远程仓库chenqiaorui.github.io\n```\nhexo clean # 删除public目录\nhexo g # 创建静态资源public目录\nhexo d # 部署到远程chenqiaorui.github.io项目，部署后要等github部署完成后生效，有时可能有缓存，ctrl+F5强制刷新。\n```\n\n### 绑定域名<可选>\n\n第一步：dns服务器设置别名：mydomain.cn  CNAME chenqiaorui.github.io\n\n第二步: 登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入 mydomain.cn 域名\n\n### 更换主题\n\n将Next主题下载到blog目录的themes主题下的next文件夹中\n```\ngit clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n\n打开站点的_config.yml配置文件，修改主题为next。\n```\ntheme: next\n```\n\nnext主题有很多样式，可以用Pisces、Muse、Mist，在themes/next目录下，打开_config.yaml，配置：\n```\nscheme: Pisces # 选用Pisces样式\n```\n\n（全文完）","source":"_posts/第2期-hexo-github部署个人博客.md","raw":"---\ntitle: '第2期: hexo + github部署个人博客'\ndate: 2023-05-18 12:29:50\ntags:\n---\n### github创建项目\n```\n仓库名称: ${username}.github.io # username是github账号名称\n```\n\n### 参考第一期用hexo创建了项目blog，修改站点配置文件_config.yaml\n```\n# Deployment\n## Docs: https://hexo.io/docs/one-command-deployment\ndeploy:\n  type: git\n  repo: https://github.com/chenqiaorui/chenqiaorui.github.io.git\n  branch: master\n```\n### 安装hexo-Git部署插件\n```\nnpm install hexo-deployer-git --save\n```\n\n### 部署到远程仓库chenqiaorui.github.io\n```\nhexo clean # 删除public目录\nhexo g # 创建静态资源public目录\nhexo d # 部署到远程chenqiaorui.github.io项目，部署后要等github部署完成后生效，有时可能有缓存，ctrl+F5强制刷新。\n```\n\n### 绑定域名<可选>\n\n第一步：dns服务器设置别名：mydomain.cn  CNAME chenqiaorui.github.io\n\n第二步: 登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入 mydomain.cn 域名\n\n### 更换主题\n\n将Next主题下载到blog目录的themes主题下的next文件夹中\n```\ngit clone https://github.com/iissnan/hexo-theme-next themes/next\n```\n\n打开站点的_config.yml配置文件，修改主题为next。\n```\ntheme: next\n```\n\nnext主题有很多样式，可以用Pisces、Muse、Mist，在themes/next目录下，打开_config.yaml，配置：\n```\nscheme: Pisces # 选用Pisces样式\n```\n\n（全文完）","slug":"第2期-hexo-github部署个人博客","published":1,"updated":"2024-03-06T09:54:41.786Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvte7000mbklnavgt15gm","content":"<h3 id=\"github创建项目\"><a href=\"#github创建项目\" class=\"headerlink\" title=\"github创建项目\"></a>github创建项目</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">仓库名称: $&#123;username&#125;.github.io # username是github账号名称</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考第一期用hexo创建了项目blog，修改站点配置文件-config-yaml\"><a href=\"#参考第一期用hexo创建了项目blog，修改站点配置文件-config-yaml\" class=\"headerlink\" title=\"参考第一期用hexo创建了项目blog，修改站点配置文件_config.yaml\"></a>参考第一期用hexo创建了项目blog，修改站点配置文件_config.yaml</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/chenqiaorui/chenqiaorui.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装hexo-Git部署插件\"><a href=\"#安装hexo-Git部署插件\" class=\"headerlink\" title=\"安装hexo-Git部署插件\"></a>安装hexo-Git部署插件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署到远程仓库chenqiaorui-github-io\"><a href=\"#部署到远程仓库chenqiaorui-github-io\" class=\"headerlink\" title=\"部署到远程仓库chenqiaorui.github.io\"></a>部署到远程仓库chenqiaorui.github.io</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean # 删除public目录</span><br><span class=\"line\">hexo g # 创建静态资源public目录</span><br><span class=\"line\">hexo d # 部署到远程chenqiaorui.github.io项目，部署后要等github部署完成后生效，有时可能有缓存，ctrl+F5强制刷新。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"绑定域名-lt-可选-gt\"><a href=\"#绑定域名-lt-可选-gt\" class=\"headerlink\" title=\"绑定域名&lt;可选&gt;\"></a>绑定域名&lt;可选&gt;</h3><p>第一步：dns服务器设置别名：mydomain.cn  CNAME chenqiaorui.github.io</p>\n<p>第二步: 登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入 mydomain.cn 域名</p>\n<h3 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h3><p>将Next主题下载到blog目录的themes主题下的next文件夹中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n\n<p>打开站点的_config.yml配置文件，修改主题为next。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: next</span><br></pre></td></tr></table></figure>\n\n<p>next主题有很多样式，可以用Pisces、Muse、Mist，在themes&#x2F;next目录下，打开_config.yaml，配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scheme: Pisces # 选用Pisces样式</span><br></pre></td></tr></table></figure>\n\n<p>（全文完）</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"github创建项目\"><a href=\"#github创建项目\" class=\"headerlink\" title=\"github创建项目\"></a>github创建项目</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">仓库名称: $&#123;username&#125;.github.io # username是github账号名称</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"参考第一期用hexo创建了项目blog，修改站点配置文件-config-yaml\"><a href=\"#参考第一期用hexo创建了项目blog，修改站点配置文件-config-yaml\" class=\"headerlink\" title=\"参考第一期用hexo创建了项目blog，修改站点配置文件_config.yaml\"></a>参考第一期用hexo创建了项目blog，修改站点配置文件_config.yaml</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># Deployment</span><br><span class=\"line\">## Docs: https://hexo.io/docs/one-command-deployment</span><br><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repo: https://github.com/chenqiaorui/chenqiaorui.github.io.git</span><br><span class=\"line\">  branch: master</span><br></pre></td></tr></table></figure>\n<h3 id=\"安装hexo-Git部署插件\"><a href=\"#安装hexo-Git部署插件\" class=\"headerlink\" title=\"安装hexo-Git部署插件\"></a>安装hexo-Git部署插件</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署到远程仓库chenqiaorui-github-io\"><a href=\"#部署到远程仓库chenqiaorui-github-io\" class=\"headerlink\" title=\"部署到远程仓库chenqiaorui.github.io\"></a>部署到远程仓库chenqiaorui.github.io</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo clean # 删除public目录</span><br><span class=\"line\">hexo g # 创建静态资源public目录</span><br><span class=\"line\">hexo d # 部署到远程chenqiaorui.github.io项目，部署后要等github部署完成后生效，有时可能有缓存，ctrl+F5强制刷新。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"绑定域名-lt-可选-gt\"><a href=\"#绑定域名-lt-可选-gt\" class=\"headerlink\" title=\"绑定域名&lt;可选&gt;\"></a>绑定域名&lt;可选&gt;</h3><p>第一步：dns服务器设置别名：mydomain.cn  CNAME chenqiaorui.github.io</p>\n<p>第二步: 登录GitHub，进入之前创建的仓库，点击settings，设置Custom domain，输入 mydomain.cn 域名</p>\n<h3 id=\"更换主题\"><a href=\"#更换主题\" class=\"headerlink\" title=\"更换主题\"></a>更换主题</h3><p>将Next主题下载到blog目录的themes主题下的next文件夹中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n\n<p>打开站点的_config.yml配置文件，修改主题为next。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">theme: next</span><br></pre></td></tr></table></figure>\n\n<p>next主题有很多样式，可以用Pisces、Muse、Mist，在themes&#x2F;next目录下，打开_config.yaml，配置：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scheme: Pisces # 选用Pisces样式</span><br></pre></td></tr></table></figure>\n\n<p>（全文完）</p>\n"},{"title":"第30期：Python","date":"2023-05-22T09:03:52.000Z","_content":"##### 1.6.1 缩进\n错误：\n```\na = 1\n b = 2\n```\n\n正确：\n```\na = 1\nb = 1\n```\n\n##### 1.6.2 print 打印函数\n```\nprint(\"hello\")\n```\n\npython3 可以这么写:\n```\nprint \"Hello world\"\n```\n##### 1.6.3 数学运算\n```\na = 1\nb = 2\nsurface = a * b \n\na * b * b  等价于 a * b**2\n\n```\n##### 1.6.4 String\n3种表示方法\n```\nmessage = 'hello'\nmessage = \"hello\"\nmessage = \"\"\"hello world\"\"\"  or message = '''hello world'''   # 可以表示多行字符\n```\n\n##### 1.6.5 print(2)\na = \"world\"\nb = \"tony\"\nprint(\"hello %s\" % a)  # 打印hello world\nprint(\"hello %s and %s\" % (a,b))\n\n##### 1.6.6 module 模块\n```\n# 导入整个模块\nimport math     # 等价于导入整个文件(模块)，接着就可以用所有的变量和函数。\nmath.pi\n```\n\n```\n# 选择性地导入\nfrom math import pi\nsurface = pi * R**2\n```\n\n```\n# 导入所有\nfrom math import * # 这种导入可能会覆盖自定义的变量\n```\n##### 1.6.6 Function 函数\n```\nfrom math import pi\ndef compute_surface(radius, pi=math.pi):\n    return pi* radius * radius\n```\n##### 1.6.7 list 列表 \n长度可变\n```\na = [1, 2]\nprint(a[0])\n\nb = a  # 数组复制\nprint(b[0])\n```\n\n##### 1.6.8 Tuples 数组\n长度不变\n```\na = (1,2)\nprint(a[0])\n```\n\n##### 1.6.9 Dicts 字典\n可变键值对\n```\na = {'key1': [1, 'e', '2'], 'key2': 2}\nprint(a['key2'])\n```\n##### Slicing 切割\n```\na = [1, 2, 3, 4] 等价 a = range(0,4)\na[0]       # 1\na[-1]      # 等价于a[3]\n\n```\n\n##### 1.6.10 for & if  遍历和判断\n```\na = [1, 2, 3]\nfor i in a:\n    if i == 1:\n        print (\"i 是 1\")\n    elif i == 2:\n        print (\"i = %s\" % i)\n    else:\n        print (\"i is 3\")\n\n```\n##### 1.6.11 类初始化函数\n```\nclass Test():\n    def __init__(self):\n        print(\"you are a bad boy\")\n\nTest()\n```\n例子2：带参\nclass Test():\n    def __init__(self, arg1, arg2=2):\n        self.arg1 = arg1\n        self.__arg2 = arg2\n\nc1 = Test(1)\nc2 = Test(2, arg2=3)\n\n##### 1.6.12 Exception 异常处理\n```\ntry:\n    1/0\nexcept Exception as e:\n    print(\"1不能除以0\")\n    print(e)\n    print(\"pass is ignore your error\")\n    pass  \nfinally:\n    print(\"final\")\n```\n\n##### 1.6.13 lambda 匿名函数\n```\nfrom math import pi\n  \nf = lambda r: pi * r\nprint(f(2))\n```\n其中r表参数，f调用lambda函数\n\n例子2：\n```\nlambda x,y: return x**y \n```\n使用两个参数\n\n##### 1.6.14 boolean \n```\na = False\nb = True\n\na == b  # False\n```\n\n更多基础知识参考：https://thomas-cokelaer.info/tutorials/python/basics.html\n","source":"_posts/第30期：Python.md","raw":"---\ntitle: 第30期：Python\ndate: 2023-05-22 17:03:52\ntags:\n---\n##### 1.6.1 缩进\n错误：\n```\na = 1\n b = 2\n```\n\n正确：\n```\na = 1\nb = 1\n```\n\n##### 1.6.2 print 打印函数\n```\nprint(\"hello\")\n```\n\npython3 可以这么写:\n```\nprint \"Hello world\"\n```\n##### 1.6.3 数学运算\n```\na = 1\nb = 2\nsurface = a * b \n\na * b * b  等价于 a * b**2\n\n```\n##### 1.6.4 String\n3种表示方法\n```\nmessage = 'hello'\nmessage = \"hello\"\nmessage = \"\"\"hello world\"\"\"  or message = '''hello world'''   # 可以表示多行字符\n```\n\n##### 1.6.5 print(2)\na = \"world\"\nb = \"tony\"\nprint(\"hello %s\" % a)  # 打印hello world\nprint(\"hello %s and %s\" % (a,b))\n\n##### 1.6.6 module 模块\n```\n# 导入整个模块\nimport math     # 等价于导入整个文件(模块)，接着就可以用所有的变量和函数。\nmath.pi\n```\n\n```\n# 选择性地导入\nfrom math import pi\nsurface = pi * R**2\n```\n\n```\n# 导入所有\nfrom math import * # 这种导入可能会覆盖自定义的变量\n```\n##### 1.6.6 Function 函数\n```\nfrom math import pi\ndef compute_surface(radius, pi=math.pi):\n    return pi* radius * radius\n```\n##### 1.6.7 list 列表 \n长度可变\n```\na = [1, 2]\nprint(a[0])\n\nb = a  # 数组复制\nprint(b[0])\n```\n\n##### 1.6.8 Tuples 数组\n长度不变\n```\na = (1,2)\nprint(a[0])\n```\n\n##### 1.6.9 Dicts 字典\n可变键值对\n```\na = {'key1': [1, 'e', '2'], 'key2': 2}\nprint(a['key2'])\n```\n##### Slicing 切割\n```\na = [1, 2, 3, 4] 等价 a = range(0,4)\na[0]       # 1\na[-1]      # 等价于a[3]\n\n```\n\n##### 1.6.10 for & if  遍历和判断\n```\na = [1, 2, 3]\nfor i in a:\n    if i == 1:\n        print (\"i 是 1\")\n    elif i == 2:\n        print (\"i = %s\" % i)\n    else:\n        print (\"i is 3\")\n\n```\n##### 1.6.11 类初始化函数\n```\nclass Test():\n    def __init__(self):\n        print(\"you are a bad boy\")\n\nTest()\n```\n例子2：带参\nclass Test():\n    def __init__(self, arg1, arg2=2):\n        self.arg1 = arg1\n        self.__arg2 = arg2\n\nc1 = Test(1)\nc2 = Test(2, arg2=3)\n\n##### 1.6.12 Exception 异常处理\n```\ntry:\n    1/0\nexcept Exception as e:\n    print(\"1不能除以0\")\n    print(e)\n    print(\"pass is ignore your error\")\n    pass  \nfinally:\n    print(\"final\")\n```\n\n##### 1.6.13 lambda 匿名函数\n```\nfrom math import pi\n  \nf = lambda r: pi * r\nprint(f(2))\n```\n其中r表参数，f调用lambda函数\n\n例子2：\n```\nlambda x,y: return x**y \n```\n使用两个参数\n\n##### 1.6.14 boolean \n```\na = False\nb = True\n\na == b  # False\n```\n\n更多基础知识参考：https://thomas-cokelaer.info/tutorials/python/basics.html\n","slug":"第30期：Python","published":1,"updated":"2024-03-06T06:55:18.360Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvte8000nbkln7h1w8w58","content":"<h5 id=\"1-6-1-缩进\"><a href=\"#1-6-1-缩进\" class=\"headerlink\" title=\"1.6.1 缩进\"></a>1.6.1 缩进</h5><p>错误：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = 1</span><br><span class=\"line\"> b = 2</span><br></pre></td></tr></table></figure>\n\n<p>正确：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = 1</span><br><span class=\"line\">b = 1</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-6-2-print-打印函数\"><a href=\"#1-6-2-print-打印函数\" class=\"headerlink\" title=\"1.6.2 print 打印函数\"></a>1.6.2 print 打印函数</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(&quot;hello&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>python3 可以这么写:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print &quot;Hello world&quot;</span><br></pre></td></tr></table></figure>\n<h5 id=\"1-6-3-数学运算\"><a href=\"#1-6-3-数学运算\" class=\"headerlink\" title=\"1.6.3 数学运算\"></a>1.6.3 数学运算</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = 1</span><br><span class=\"line\">b = 2</span><br><span class=\"line\">surface = a * b </span><br><span class=\"line\"></span><br><span class=\"line\">a * b * b  等价于 a * b**2</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"1-6-4-String\"><a href=\"#1-6-4-String\" class=\"headerlink\" title=\"1.6.4 String\"></a>1.6.4 String</h5><p>3种表示方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message = &#x27;hello&#x27;</span><br><span class=\"line\">message = &quot;hello&quot;</span><br><span class=\"line\">message = &quot;&quot;&quot;hello world&quot;&quot;&quot;  or message = &#x27;&#x27;&#x27;hello world&#x27;&#x27;&#x27;   # 可以表示多行字符</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-6-5-print-2\"><a href=\"#1-6-5-print-2\" class=\"headerlink\" title=\"1.6.5 print(2)\"></a>1.6.5 print(2)</h5><p>a &#x3D; “world”<br>b &#x3D; “tony”<br>print(“hello %s” % a)  # 打印hello world<br>print(“hello %s and %s” % (a,b))</p>\n<h5 id=\"1-6-6-module-模块\"><a href=\"#1-6-6-module-模块\" class=\"headerlink\" title=\"1.6.6 module 模块\"></a>1.6.6 module 模块</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 导入整个模块</span><br><span class=\"line\">import math     # 等价于导入整个文件(模块)，接着就可以用所有的变量和函数。</span><br><span class=\"line\">math.pi</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 选择性地导入</span><br><span class=\"line\">from math import pi</span><br><span class=\"line\">surface = pi * R**2</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 导入所有</span><br><span class=\"line\">from math import * # 这种导入可能会覆盖自定义的变量</span><br></pre></td></tr></table></figure>\n<h5 id=\"1-6-6-Function-函数\"><a href=\"#1-6-6-Function-函数\" class=\"headerlink\" title=\"1.6.6 Function 函数\"></a>1.6.6 Function 函数</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from math import pi</span><br><span class=\"line\">def compute_surface(radius, pi=math.pi):</span><br><span class=\"line\">    return pi* radius * radius</span><br></pre></td></tr></table></figure>\n<h5 id=\"1-6-7-list-列表\"><a href=\"#1-6-7-list-列表\" class=\"headerlink\" title=\"1.6.7 list 列表\"></a>1.6.7 list 列表</h5><p>长度可变</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [1, 2]</span><br><span class=\"line\">print(a[0])</span><br><span class=\"line\"></span><br><span class=\"line\">b = a  # 数组复制</span><br><span class=\"line\">print(b[0])</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-6-8-Tuples-数组\"><a href=\"#1-6-8-Tuples-数组\" class=\"headerlink\" title=\"1.6.8 Tuples 数组\"></a>1.6.8 Tuples 数组</h5><p>长度不变</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = (1,2)</span><br><span class=\"line\">print(a[0])</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-6-9-Dicts-字典\"><a href=\"#1-6-9-Dicts-字典\" class=\"headerlink\" title=\"1.6.9 Dicts 字典\"></a>1.6.9 Dicts 字典</h5><p>可变键值对</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = &#123;&#x27;key1&#x27;: [1, &#x27;e&#x27;, &#x27;2&#x27;], &#x27;key2&#x27;: 2&#125;</span><br><span class=\"line\">print(a[&#x27;key2&#x27;])</span><br></pre></td></tr></table></figure>\n<h5 id=\"Slicing-切割\"><a href=\"#Slicing-切割\" class=\"headerlink\" title=\"Slicing 切割\"></a>Slicing 切割</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [1, 2, 3, 4] 等价 a = range(0,4)</span><br><span class=\"line\">a[0]       # 1</span><br><span class=\"line\">a[-1]      # 等价于a[3]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-6-10-for-amp-if-遍历和判断\"><a href=\"#1-6-10-for-amp-if-遍历和判断\" class=\"headerlink\" title=\"1.6.10 for &amp; if  遍历和判断\"></a>1.6.10 for &amp; if  遍历和判断</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [1, 2, 3]</span><br><span class=\"line\">for i in a:</span><br><span class=\"line\">    if i == 1:</span><br><span class=\"line\">        print (&quot;i 是 1&quot;)</span><br><span class=\"line\">    elif i == 2:</span><br><span class=\"line\">        print (&quot;i = %s&quot; % i)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print (&quot;i is 3&quot;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"1-6-11-类初始化函数\"><a href=\"#1-6-11-类初始化函数\" class=\"headerlink\" title=\"1.6.11 类初始化函数\"></a>1.6.11 类初始化函数</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Test():</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        print(&quot;you are a bad boy&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">Test()</span><br></pre></td></tr></table></figure>\n<p>例子2：带参<br>class Test():<br>    def <strong>init</strong>(self, arg1, arg2&#x3D;2):<br>        self.arg1 &#x3D; arg1<br>        self.__arg2 &#x3D; arg2</p>\n<p>c1 &#x3D; Test(1)<br>c2 &#x3D; Test(2, arg2&#x3D;3)</p>\n<h5 id=\"1-6-12-Exception-异常处理\"><a href=\"#1-6-12-Exception-异常处理\" class=\"headerlink\" title=\"1.6.12 Exception 异常处理\"></a>1.6.12 Exception 异常处理</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try:</span><br><span class=\"line\">    1/0</span><br><span class=\"line\">except Exception as e:</span><br><span class=\"line\">    print(&quot;1不能除以0&quot;)</span><br><span class=\"line\">    print(e)</span><br><span class=\"line\">    print(&quot;pass is ignore your error&quot;)</span><br><span class=\"line\">    pass  </span><br><span class=\"line\">finally:</span><br><span class=\"line\">    print(&quot;final&quot;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-6-13-lambda-匿名函数\"><a href=\"#1-6-13-lambda-匿名函数\" class=\"headerlink\" title=\"1.6.13 lambda 匿名函数\"></a>1.6.13 lambda 匿名函数</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from math import pi</span><br><span class=\"line\">  </span><br><span class=\"line\">f = lambda r: pi * r</span><br><span class=\"line\">print(f(2))</span><br></pre></td></tr></table></figure>\n<p>其中r表参数，f调用lambda函数</p>\n<p>例子2：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lambda x,y: return x**y </span><br></pre></td></tr></table></figure>\n<p>使用两个参数</p>\n<h5 id=\"1-6-14-boolean\"><a href=\"#1-6-14-boolean\" class=\"headerlink\" title=\"1.6.14 boolean\"></a>1.6.14 boolean</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = False</span><br><span class=\"line\">b = True</span><br><span class=\"line\"></span><br><span class=\"line\">a == b  # False</span><br></pre></td></tr></table></figure>\n\n<p>更多基础知识参考：<a href=\"https://thomas-cokelaer.info/tutorials/python/basics.html\">https://thomas-cokelaer.info/tutorials/python/basics.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"1-6-1-缩进\"><a href=\"#1-6-1-缩进\" class=\"headerlink\" title=\"1.6.1 缩进\"></a>1.6.1 缩进</h5><p>错误：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = 1</span><br><span class=\"line\"> b = 2</span><br></pre></td></tr></table></figure>\n\n<p>正确：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = 1</span><br><span class=\"line\">b = 1</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-6-2-print-打印函数\"><a href=\"#1-6-2-print-打印函数\" class=\"headerlink\" title=\"1.6.2 print 打印函数\"></a>1.6.2 print 打印函数</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(&quot;hello&quot;)</span><br></pre></td></tr></table></figure>\n\n<p>python3 可以这么写:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print &quot;Hello world&quot;</span><br></pre></td></tr></table></figure>\n<h5 id=\"1-6-3-数学运算\"><a href=\"#1-6-3-数学运算\" class=\"headerlink\" title=\"1.6.3 数学运算\"></a>1.6.3 数学运算</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = 1</span><br><span class=\"line\">b = 2</span><br><span class=\"line\">surface = a * b </span><br><span class=\"line\"></span><br><span class=\"line\">a * b * b  等价于 a * b**2</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"1-6-4-String\"><a href=\"#1-6-4-String\" class=\"headerlink\" title=\"1.6.4 String\"></a>1.6.4 String</h5><p>3种表示方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">message = &#x27;hello&#x27;</span><br><span class=\"line\">message = &quot;hello&quot;</span><br><span class=\"line\">message = &quot;&quot;&quot;hello world&quot;&quot;&quot;  or message = &#x27;&#x27;&#x27;hello world&#x27;&#x27;&#x27;   # 可以表示多行字符</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-6-5-print-2\"><a href=\"#1-6-5-print-2\" class=\"headerlink\" title=\"1.6.5 print(2)\"></a>1.6.5 print(2)</h5><p>a &#x3D; “world”<br>b &#x3D; “tony”<br>print(“hello %s” % a)  # 打印hello world<br>print(“hello %s and %s” % (a,b))</p>\n<h5 id=\"1-6-6-module-模块\"><a href=\"#1-6-6-module-模块\" class=\"headerlink\" title=\"1.6.6 module 模块\"></a>1.6.6 module 模块</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 导入整个模块</span><br><span class=\"line\">import math     # 等价于导入整个文件(模块)，接着就可以用所有的变量和函数。</span><br><span class=\"line\">math.pi</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 选择性地导入</span><br><span class=\"line\">from math import pi</span><br><span class=\"line\">surface = pi * R**2</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 导入所有</span><br><span class=\"line\">from math import * # 这种导入可能会覆盖自定义的变量</span><br></pre></td></tr></table></figure>\n<h5 id=\"1-6-6-Function-函数\"><a href=\"#1-6-6-Function-函数\" class=\"headerlink\" title=\"1.6.6 Function 函数\"></a>1.6.6 Function 函数</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from math import pi</span><br><span class=\"line\">def compute_surface(radius, pi=math.pi):</span><br><span class=\"line\">    return pi* radius * radius</span><br></pre></td></tr></table></figure>\n<h5 id=\"1-6-7-list-列表\"><a href=\"#1-6-7-list-列表\" class=\"headerlink\" title=\"1.6.7 list 列表\"></a>1.6.7 list 列表</h5><p>长度可变</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [1, 2]</span><br><span class=\"line\">print(a[0])</span><br><span class=\"line\"></span><br><span class=\"line\">b = a  # 数组复制</span><br><span class=\"line\">print(b[0])</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-6-8-Tuples-数组\"><a href=\"#1-6-8-Tuples-数组\" class=\"headerlink\" title=\"1.6.8 Tuples 数组\"></a>1.6.8 Tuples 数组</h5><p>长度不变</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = (1,2)</span><br><span class=\"line\">print(a[0])</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-6-9-Dicts-字典\"><a href=\"#1-6-9-Dicts-字典\" class=\"headerlink\" title=\"1.6.9 Dicts 字典\"></a>1.6.9 Dicts 字典</h5><p>可变键值对</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = &#123;&#x27;key1&#x27;: [1, &#x27;e&#x27;, &#x27;2&#x27;], &#x27;key2&#x27;: 2&#125;</span><br><span class=\"line\">print(a[&#x27;key2&#x27;])</span><br></pre></td></tr></table></figure>\n<h5 id=\"Slicing-切割\"><a href=\"#Slicing-切割\" class=\"headerlink\" title=\"Slicing 切割\"></a>Slicing 切割</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [1, 2, 3, 4] 等价 a = range(0,4)</span><br><span class=\"line\">a[0]       # 1</span><br><span class=\"line\">a[-1]      # 等价于a[3]</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-6-10-for-amp-if-遍历和判断\"><a href=\"#1-6-10-for-amp-if-遍历和判断\" class=\"headerlink\" title=\"1.6.10 for &amp; if  遍历和判断\"></a>1.6.10 for &amp; if  遍历和判断</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = [1, 2, 3]</span><br><span class=\"line\">for i in a:</span><br><span class=\"line\">    if i == 1:</span><br><span class=\"line\">        print (&quot;i 是 1&quot;)</span><br><span class=\"line\">    elif i == 2:</span><br><span class=\"line\">        print (&quot;i = %s&quot; % i)</span><br><span class=\"line\">    else:</span><br><span class=\"line\">        print (&quot;i is 3&quot;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h5 id=\"1-6-11-类初始化函数\"><a href=\"#1-6-11-类初始化函数\" class=\"headerlink\" title=\"1.6.11 类初始化函数\"></a>1.6.11 类初始化函数</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Test():</span><br><span class=\"line\">    def __init__(self):</span><br><span class=\"line\">        print(&quot;you are a bad boy&quot;)</span><br><span class=\"line\"></span><br><span class=\"line\">Test()</span><br></pre></td></tr></table></figure>\n<p>例子2：带参<br>class Test():<br>    def <strong>init</strong>(self, arg1, arg2&#x3D;2):<br>        self.arg1 &#x3D; arg1<br>        self.__arg2 &#x3D; arg2</p>\n<p>c1 &#x3D; Test(1)<br>c2 &#x3D; Test(2, arg2&#x3D;3)</p>\n<h5 id=\"1-6-12-Exception-异常处理\"><a href=\"#1-6-12-Exception-异常处理\" class=\"headerlink\" title=\"1.6.12 Exception 异常处理\"></a>1.6.12 Exception 异常处理</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try:</span><br><span class=\"line\">    1/0</span><br><span class=\"line\">except Exception as e:</span><br><span class=\"line\">    print(&quot;1不能除以0&quot;)</span><br><span class=\"line\">    print(e)</span><br><span class=\"line\">    print(&quot;pass is ignore your error&quot;)</span><br><span class=\"line\">    pass  </span><br><span class=\"line\">finally:</span><br><span class=\"line\">    print(&quot;final&quot;)</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"1-6-13-lambda-匿名函数\"><a href=\"#1-6-13-lambda-匿名函数\" class=\"headerlink\" title=\"1.6.13 lambda 匿名函数\"></a>1.6.13 lambda 匿名函数</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">from math import pi</span><br><span class=\"line\">  </span><br><span class=\"line\">f = lambda r: pi * r</span><br><span class=\"line\">print(f(2))</span><br></pre></td></tr></table></figure>\n<p>其中r表参数，f调用lambda函数</p>\n<p>例子2：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lambda x,y: return x**y </span><br></pre></td></tr></table></figure>\n<p>使用两个参数</p>\n<h5 id=\"1-6-14-boolean\"><a href=\"#1-6-14-boolean\" class=\"headerlink\" title=\"1.6.14 boolean\"></a>1.6.14 boolean</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = False</span><br><span class=\"line\">b = True</span><br><span class=\"line\"></span><br><span class=\"line\">a == b  # False</span><br></pre></td></tr></table></figure>\n\n<p>更多基础知识参考：<a href=\"https://thomas-cokelaer.info/tutorials/python/basics.html\">https://thomas-cokelaer.info/tutorials/python/basics.html</a></p>\n"},{"title":"第32期：Java","date":"2023-05-22T09:14:55.000Z","_content":"#### 安装\n环境: centos7\n\nOpenJDK1.8下载地址：https://jdk.java.net/java-se-ri/8-MR3\n\nOpenJDK9以上版本下载地址：http://jdk.java.net/archive/\n\n安装JDK8\n```\ncd /opt/java\n\nwget https://download.java.net/openjdk/jdk8u42/ri/openjdk-8u42-b03-linux-x64-14_jul_2022.tar.gz\n\ntar -xzvf openjdk-8u42-b03-linux-x64-14_jul_2022.tar.gz\n\nmv java-se-8u42-ri  java8\n\n# vi /etc/profile\n\nexport JAVA_HOME=\"/opt/java/java8\"\nexport JRE_HOME=\"/opt/java/java8/jre\"\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH\nexport PATH=$JAVA_HOME/bin/:$PATH\n\nsource /etc/profile\n\njava -version\n```\n参考：https://blog.csdn.net/zxbfriend/article/details/117842392\n\n#### 使用\n```\ncd /opt/java-demo\nvi HelloWorld.java\n\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}\n\njavac HelloWorld.java # 编译生成.class\njava HelloWorld # 执行\n```\n","source":"_posts/第32期：Java.md","raw":"---\ntitle: 第32期：Java\ndate: 2023-05-22 17:14:55\ntags:\n---\n#### 安装\n环境: centos7\n\nOpenJDK1.8下载地址：https://jdk.java.net/java-se-ri/8-MR3\n\nOpenJDK9以上版本下载地址：http://jdk.java.net/archive/\n\n安装JDK8\n```\ncd /opt/java\n\nwget https://download.java.net/openjdk/jdk8u42/ri/openjdk-8u42-b03-linux-x64-14_jul_2022.tar.gz\n\ntar -xzvf openjdk-8u42-b03-linux-x64-14_jul_2022.tar.gz\n\nmv java-se-8u42-ri  java8\n\n# vi /etc/profile\n\nexport JAVA_HOME=\"/opt/java/java8\"\nexport JRE_HOME=\"/opt/java/java8/jre\"\nexport CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH\nexport PATH=$JAVA_HOME/bin/:$PATH\n\nsource /etc/profile\n\njava -version\n```\n参考：https://blog.csdn.net/zxbfriend/article/details/117842392\n\n#### 使用\n```\ncd /opt/java-demo\nvi HelloWorld.java\n\npublic class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println(\"Hello World\");\n    }\n}\n\njavac HelloWorld.java # 编译生成.class\njava HelloWorld # 执行\n```\n","slug":"第32期：Java","published":1,"updated":"2024-03-06T06:55:18.361Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvte9000obklncgds2v63","content":"<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>环境: centos7</p>\n<p>OpenJDK1.8下载地址：<a href=\"https://jdk.java.net/java-se-ri/8-MR3\">https://jdk.java.net/java-se-ri/8-MR3</a></p>\n<p>OpenJDK9以上版本下载地址：<a href=\"http://jdk.java.net/archive/\">http://jdk.java.net/archive/</a></p>\n<p>安装JDK8</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/java</span><br><span class=\"line\"></span><br><span class=\"line\">wget https://download.java.net/openjdk/jdk8u42/ri/openjdk-8u42-b03-linux-x64-14_jul_2022.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">tar -xzvf openjdk-8u42-b03-linux-x64-14_jul_2022.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">mv java-se-8u42-ri  java8</span><br><span class=\"line\"></span><br><span class=\"line\"># vi /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">export JAVA_HOME=&quot;/opt/java/java8&quot;</span><br><span class=\"line\">export JRE_HOME=&quot;/opt/java/java8/jre&quot;</span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin/:$PATH</span><br><span class=\"line\"></span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://blog.csdn.net/zxbfriend/article/details/117842392\">https://blog.csdn.net/zxbfriend/article/details/117842392</a></p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/java-demo</span><br><span class=\"line\">vi HelloWorld.java</span><br><span class=\"line\"></span><br><span class=\"line\">public class HelloWorld &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        System.out.println(&quot;Hello World&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">javac HelloWorld.java # 编译生成.class</span><br><span class=\"line\">java HelloWorld # 执行</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>环境: centos7</p>\n<p>OpenJDK1.8下载地址：<a href=\"https://jdk.java.net/java-se-ri/8-MR3\">https://jdk.java.net/java-se-ri/8-MR3</a></p>\n<p>OpenJDK9以上版本下载地址：<a href=\"http://jdk.java.net/archive/\">http://jdk.java.net/archive/</a></p>\n<p>安装JDK8</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/java</span><br><span class=\"line\"></span><br><span class=\"line\">wget https://download.java.net/openjdk/jdk8u42/ri/openjdk-8u42-b03-linux-x64-14_jul_2022.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">tar -xzvf openjdk-8u42-b03-linux-x64-14_jul_2022.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">mv java-se-8u42-ri  java8</span><br><span class=\"line\"></span><br><span class=\"line\"># vi /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">export JAVA_HOME=&quot;/opt/java/java8&quot;</span><br><span class=\"line\">export JRE_HOME=&quot;/opt/java/java8/jre&quot;</span><br><span class=\"line\">export CLASSPATH=.:$JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH</span><br><span class=\"line\">export PATH=$JAVA_HOME/bin/:$PATH</span><br><span class=\"line\"></span><br><span class=\"line\">source /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">java -version</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://blog.csdn.net/zxbfriend/article/details/117842392\">https://blog.csdn.net/zxbfriend/article/details/117842392</a></p>\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/java-demo</span><br><span class=\"line\">vi HelloWorld.java</span><br><span class=\"line\"></span><br><span class=\"line\">public class HelloWorld &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        System.out.println(&quot;Hello World&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">javac HelloWorld.java # 编译生成.class</span><br><span class=\"line\">java HelloWorld # 执行</span><br></pre></td></tr></table></figure>\n"},{"title":"第31期：Golang","date":"2023-05-22T09:13:36.000Z","_content":"#### 源码安装\n环境：centos7\n\n```\ncd /opt/go\n\nwget https://storage.googleapis.com/golang/go1.18.3.linux-amd64.tar.gz\n\ntar -xzvf go1.18.3.linux-amd64.tar.gz\n\n# 编辑 /etc/profile，添加：\nexport PATH=$PATH:/opt/go/go/bin\n\n保存退出，执行 source /etc/profile\n\ngo version \n```\n\n#### 使用\n```\ncd /opt/go-demo\n\n# vi hello.go\n\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n  fmt.Println(\"hello world\");\n}\n\n执行: go run hello.go // hello world\n\n# := 的用法：左边有一个新变量，且变量不加var\nvar i = 5;\nt := i;\n\n# 标识符\n命名变量名称\n- 不能以数字开头\n\n# 包别名\nimport(\n    ff \"fmt\"\n)\n\nff.Println();\n\n# 布尔值\nvar b bool\nb = true\n\n# 整型\nvar i,j int\nvar i init8 // 8位整型\n\n# 数组\nvar arr [10]int\n\n# 结构类型 struct\n\ntype s struct {\n    X int\n    Y int\n}\n\n# 字符串\nvar s string = \"go\"\n\n# 函数类型\n\n```\n参考：https://github.com/jaywcjlove/golang-tutorial#%E5%AE%89%E8%A3%85go\n#### 基础知识\n#### 变量创建的5种方式\n方式一：\n一行声明一个变量。\n```\n# 这种方式会隐式初始化。如string为空字符串，int为0，float为0.0，bool为false。\nvar <name> <type>，当然可以声明后初始化。\n如：var a string = \"helloworld\"\n```\n说明：helloworld一定要双引号，表示字符串，单引号上rune类型。\n\n方式二：\n同时声明多个变量。\n```\nvar (\n  name string\n  age int\n  gender string\n)\n```\n\n方式三：\n推导声明\n```\n# 编译器根据右值类型推导出左边类型。限制：这种方式只能用于函数内部。\nname := \"helloworld\" \n```\n方式四：\n声明和初始化多个变量。\n```\nname, age := \"ricky\", 11\n```\n\n方式五：\nnew(类型)函数，返回指针类型。变量分为普通变量(数据本身)和指针变量(数据内存地址，通过*接指针变量表示从内存地址取值) \n```\nage := new(int)\n```\n\n#### 整数类型\n共有16种，u开头的是无符号，没有负数。\n\nint8 代表8bit，能表示-128～127之间的数字。\n\n#### 数组\nhttps://golang.iswbm.com/c01/c01_05.html\n\n参考：https://golang.iswbm.com/c01/c01_02.html\n\n### Go命令解释\n- `go build` 编译源码文件以及它们的依赖包\n比如，在`go build`后面不加任何代码文件，它将试图编译当前目录下对应的main.go。Windows系统会生成相应的.exe可执行文件。\n- `go build -o main main.go` 指定编译后的可执行包名称为main\n- `go env` 打印go语言环境变量\n\n说明：\n```\n- GOBIN // 存放可执行文件的目录的绝对路径。\n- GOARCH // 执行环境计算架构\n- GOEXE // 可执行文件后缀\n- GOHOSTOS // 执行环境操作系统\n- GOPATH // 工作区目录的绝对路径。我们需要显式的设置环境变量GOPATH。如果有多个工作区，那么多个工作区的绝对路径之间需要用分隔符分隔。在windows操作系统下，这个分隔符为“;”。在其它操作系统下，这个分隔符为“:”。注意，GOPATH的值不能与GOROOT的值相同。\n\n- GOROOT // Go语言的安装目录的绝对路径。GOROOT会是我们在安装Go语言时第一个碰到Go语言环境变量。它的值指明了Go语言的安装目录的绝对路径。但是，只有在非默认情况下我们才需要显式的设置环境变量GOROOT。这里所说的默认情况是指：在Windows操作系统下我们把Go语言安装到c:\\Go目录下，或者在其它操作系统下我们把Go语言安装到/usr/local/go目录下。另外，当我们不是通过二进制分发包来安装Go语言的时候，也不需要设置环境变量GOROOT的值。比如，在Windows操作系统下，我们可以使用MSI软件包文件来安装Go语言\n```\n- `go install` 编译和安装文件及其依赖包，一定程度上等价于`go build`，但 `go install`可以指定编译后可执行文件的位置。\n\n- `go get` 安装指定依赖。如 `go get -u github.com/chromedp/chromedp`。`-u`表示只会从网络上下载本地不存在的代码包，而不会更新已有的代码包。\n\n- `go run` 编译和运行源码文件，不需要生成可执行文件即可执行。如`go run main.go`\n","source":"_posts/第31期：Golang.md","raw":"---\ntitle: 第31期：Golang\ndate: 2023-05-22 17:13:36\ntags:\n---\n#### 源码安装\n环境：centos7\n\n```\ncd /opt/go\n\nwget https://storage.googleapis.com/golang/go1.18.3.linux-amd64.tar.gz\n\ntar -xzvf go1.18.3.linux-amd64.tar.gz\n\n# 编辑 /etc/profile，添加：\nexport PATH=$PATH:/opt/go/go/bin\n\n保存退出，执行 source /etc/profile\n\ngo version \n```\n\n#### 使用\n```\ncd /opt/go-demo\n\n# vi hello.go\n\npackage main\n\nimport \"fmt\"\n\nfunc main() {\n  fmt.Println(\"hello world\");\n}\n\n执行: go run hello.go // hello world\n\n# := 的用法：左边有一个新变量，且变量不加var\nvar i = 5;\nt := i;\n\n# 标识符\n命名变量名称\n- 不能以数字开头\n\n# 包别名\nimport(\n    ff \"fmt\"\n)\n\nff.Println();\n\n# 布尔值\nvar b bool\nb = true\n\n# 整型\nvar i,j int\nvar i init8 // 8位整型\n\n# 数组\nvar arr [10]int\n\n# 结构类型 struct\n\ntype s struct {\n    X int\n    Y int\n}\n\n# 字符串\nvar s string = \"go\"\n\n# 函数类型\n\n```\n参考：https://github.com/jaywcjlove/golang-tutorial#%E5%AE%89%E8%A3%85go\n#### 基础知识\n#### 变量创建的5种方式\n方式一：\n一行声明一个变量。\n```\n# 这种方式会隐式初始化。如string为空字符串，int为0，float为0.0，bool为false。\nvar <name> <type>，当然可以声明后初始化。\n如：var a string = \"helloworld\"\n```\n说明：helloworld一定要双引号，表示字符串，单引号上rune类型。\n\n方式二：\n同时声明多个变量。\n```\nvar (\n  name string\n  age int\n  gender string\n)\n```\n\n方式三：\n推导声明\n```\n# 编译器根据右值类型推导出左边类型。限制：这种方式只能用于函数内部。\nname := \"helloworld\" \n```\n方式四：\n声明和初始化多个变量。\n```\nname, age := \"ricky\", 11\n```\n\n方式五：\nnew(类型)函数，返回指针类型。变量分为普通变量(数据本身)和指针变量(数据内存地址，通过*接指针变量表示从内存地址取值) \n```\nage := new(int)\n```\n\n#### 整数类型\n共有16种，u开头的是无符号，没有负数。\n\nint8 代表8bit，能表示-128～127之间的数字。\n\n#### 数组\nhttps://golang.iswbm.com/c01/c01_05.html\n\n参考：https://golang.iswbm.com/c01/c01_02.html\n\n### Go命令解释\n- `go build` 编译源码文件以及它们的依赖包\n比如，在`go build`后面不加任何代码文件，它将试图编译当前目录下对应的main.go。Windows系统会生成相应的.exe可执行文件。\n- `go build -o main main.go` 指定编译后的可执行包名称为main\n- `go env` 打印go语言环境变量\n\n说明：\n```\n- GOBIN // 存放可执行文件的目录的绝对路径。\n- GOARCH // 执行环境计算架构\n- GOEXE // 可执行文件后缀\n- GOHOSTOS // 执行环境操作系统\n- GOPATH // 工作区目录的绝对路径。我们需要显式的设置环境变量GOPATH。如果有多个工作区，那么多个工作区的绝对路径之间需要用分隔符分隔。在windows操作系统下，这个分隔符为“;”。在其它操作系统下，这个分隔符为“:”。注意，GOPATH的值不能与GOROOT的值相同。\n\n- GOROOT // Go语言的安装目录的绝对路径。GOROOT会是我们在安装Go语言时第一个碰到Go语言环境变量。它的值指明了Go语言的安装目录的绝对路径。但是，只有在非默认情况下我们才需要显式的设置环境变量GOROOT。这里所说的默认情况是指：在Windows操作系统下我们把Go语言安装到c:\\Go目录下，或者在其它操作系统下我们把Go语言安装到/usr/local/go目录下。另外，当我们不是通过二进制分发包来安装Go语言的时候，也不需要设置环境变量GOROOT的值。比如，在Windows操作系统下，我们可以使用MSI软件包文件来安装Go语言\n```\n- `go install` 编译和安装文件及其依赖包，一定程度上等价于`go build`，但 `go install`可以指定编译后可执行文件的位置。\n\n- `go get` 安装指定依赖。如 `go get -u github.com/chromedp/chromedp`。`-u`表示只会从网络上下载本地不存在的代码包，而不会更新已有的代码包。\n\n- `go run` 编译和运行源码文件，不需要生成可执行文件即可执行。如`go run main.go`\n","slug":"第31期：Golang","published":1,"updated":"2024-03-06T06:55:18.360Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvtea000pbkln87eqe5be","content":"<h4 id=\"源码安装\"><a href=\"#源码安装\" class=\"headerlink\" title=\"源码安装\"></a>源码安装</h4><p>环境：centos7</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/go</span><br><span class=\"line\"></span><br><span class=\"line\">wget https://storage.googleapis.com/golang/go1.18.3.linux-amd64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">tar -xzvf go1.18.3.linux-amd64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"># 编辑 /etc/profile，添加：</span><br><span class=\"line\">export PATH=$PATH:/opt/go/go/bin</span><br><span class=\"line\"></span><br><span class=\"line\">保存退出，执行 source /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">go version </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/go-demo</span><br><span class=\"line\"></span><br><span class=\"line\"># vi hello.go</span><br><span class=\"line\"></span><br><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">  fmt.Println(&quot;hello world&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">执行: go run hello.go // hello world</span><br><span class=\"line\"></span><br><span class=\"line\"># := 的用法：左边有一个新变量，且变量不加var</span><br><span class=\"line\">var i = 5;</span><br><span class=\"line\">t := i;</span><br><span class=\"line\"></span><br><span class=\"line\"># 标识符</span><br><span class=\"line\">命名变量名称</span><br><span class=\"line\">- 不能以数字开头</span><br><span class=\"line\"></span><br><span class=\"line\"># 包别名</span><br><span class=\"line\">import(</span><br><span class=\"line\">    ff &quot;fmt&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">ff.Println();</span><br><span class=\"line\"></span><br><span class=\"line\"># 布尔值</span><br><span class=\"line\">var b bool</span><br><span class=\"line\">b = true</span><br><span class=\"line\"></span><br><span class=\"line\"># 整型</span><br><span class=\"line\">var i,j int</span><br><span class=\"line\">var i init8 // 8位整型</span><br><span class=\"line\"></span><br><span class=\"line\"># 数组</span><br><span class=\"line\">var arr [10]int</span><br><span class=\"line\"></span><br><span class=\"line\"># 结构类型 struct</span><br><span class=\"line\"></span><br><span class=\"line\">type s struct &#123;</span><br><span class=\"line\">    X int</span><br><span class=\"line\">    Y int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 字符串</span><br><span class=\"line\">var s string = &quot;go&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 函数类型</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://github.com/jaywcjlove/golang-tutorial#%E5%AE%89%E8%A3%85go\">https://github.com/jaywcjlove/golang-tutorial#%E5%AE%89%E8%A3%85go</a></p>\n<h4 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h4><h4 id=\"变量创建的5种方式\"><a href=\"#变量创建的5种方式\" class=\"headerlink\" title=\"变量创建的5种方式\"></a>变量创建的5种方式</h4><p>方式一：<br>一行声明一个变量。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 这种方式会隐式初始化。如string为空字符串，int为0，float为0.0，bool为false。</span><br><span class=\"line\">var &lt;name&gt; &lt;type&gt;，当然可以声明后初始化。</span><br><span class=\"line\">如：var a string = &quot;helloworld&quot;</span><br></pre></td></tr></table></figure>\n<p>说明：helloworld一定要双引号，表示字符串，单引号上rune类型。</p>\n<p>方式二：<br>同时声明多个变量。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var (</span><br><span class=\"line\">  name string</span><br><span class=\"line\">  age int</span><br><span class=\"line\">  gender string</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>方式三：<br>推导声明</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 编译器根据右值类型推导出左边类型。限制：这种方式只能用于函数内部。</span><br><span class=\"line\">name := &quot;helloworld&quot; </span><br></pre></td></tr></table></figure>\n<p>方式四：<br>声明和初始化多个变量。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name, age := &quot;ricky&quot;, 11</span><br></pre></td></tr></table></figure>\n\n<p>方式五：<br>new(类型)函数，返回指针类型。变量分为普通变量(数据本身)和指针变量(数据内存地址，通过*接指针变量表示从内存地址取值) </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age := new(int)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"整数类型\"><a href=\"#整数类型\" class=\"headerlink\" title=\"整数类型\"></a>整数类型</h4><p>共有16种，u开头的是无符号，没有负数。</p>\n<p>int8 代表8bit，能表示-128～127之间的数字。</p>\n<h4 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h4><p><a href=\"https://golang.iswbm.com/c01/c01_05.html\">https://golang.iswbm.com/c01/c01_05.html</a></p>\n<p>参考：<a href=\"https://golang.iswbm.com/c01/c01_02.html\">https://golang.iswbm.com/c01/c01_02.html</a></p>\n<h3 id=\"Go命令解释\"><a href=\"#Go命令解释\" class=\"headerlink\" title=\"Go命令解释\"></a>Go命令解释</h3><ul>\n<li><code>go build</code> 编译源码文件以及它们的依赖包<br>比如，在<code>go build</code>后面不加任何代码文件，它将试图编译当前目录下对应的main.go。Windows系统会生成相应的.exe可执行文件。</li>\n<li><code>go build -o main main.go</code> 指定编译后的可执行包名称为main</li>\n<li><code>go env</code> 打印go语言环境变量</li>\n</ul>\n<p>说明：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- GOBIN // 存放可执行文件的目录的绝对路径。</span><br><span class=\"line\">- GOARCH // 执行环境计算架构</span><br><span class=\"line\">- GOEXE // 可执行文件后缀</span><br><span class=\"line\">- GOHOSTOS // 执行环境操作系统</span><br><span class=\"line\">- GOPATH // 工作区目录的绝对路径。我们需要显式的设置环境变量GOPATH。如果有多个工作区，那么多个工作区的绝对路径之间需要用分隔符分隔。在windows操作系统下，这个分隔符为“;”。在其它操作系统下，这个分隔符为“:”。注意，GOPATH的值不能与GOROOT的值相同。</span><br><span class=\"line\"></span><br><span class=\"line\">- GOROOT // Go语言的安装目录的绝对路径。GOROOT会是我们在安装Go语言时第一个碰到Go语言环境变量。它的值指明了Go语言的安装目录的绝对路径。但是，只有在非默认情况下我们才需要显式的设置环境变量GOROOT。这里所说的默认情况是指：在Windows操作系统下我们把Go语言安装到c:\\Go目录下，或者在其它操作系统下我们把Go语言安装到/usr/local/go目录下。另外，当我们不是通过二进制分发包来安装Go语言的时候，也不需要设置环境变量GOROOT的值。比如，在Windows操作系统下，我们可以使用MSI软件包文件来安装Go语言</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>go install</code> 编译和安装文件及其依赖包，一定程度上等价于<code>go build</code>，但 <code>go install</code>可以指定编译后可执行文件的位置。</p>\n</li>\n<li><p><code>go get</code> 安装指定依赖。如 <code>go get -u github.com/chromedp/chromedp</code>。<code>-u</code>表示只会从网络上下载本地不存在的代码包，而不会更新已有的代码包。</p>\n</li>\n<li><p><code>go run</code> 编译和运行源码文件，不需要生成可执行文件即可执行。如<code>go run main.go</code></p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"源码安装\"><a href=\"#源码安装\" class=\"headerlink\" title=\"源码安装\"></a>源码安装</h4><p>环境：centos7</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/go</span><br><span class=\"line\"></span><br><span class=\"line\">wget https://storage.googleapis.com/golang/go1.18.3.linux-amd64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\">tar -xzvf go1.18.3.linux-amd64.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"># 编辑 /etc/profile，添加：</span><br><span class=\"line\">export PATH=$PATH:/opt/go/go/bin</span><br><span class=\"line\"></span><br><span class=\"line\">保存退出，执行 source /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">go version </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/go-demo</span><br><span class=\"line\"></span><br><span class=\"line\"># vi hello.go</span><br><span class=\"line\"></span><br><span class=\"line\">package main</span><br><span class=\"line\"></span><br><span class=\"line\">import &quot;fmt&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">func main() &#123;</span><br><span class=\"line\">  fmt.Println(&quot;hello world&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">执行: go run hello.go // hello world</span><br><span class=\"line\"></span><br><span class=\"line\"># := 的用法：左边有一个新变量，且变量不加var</span><br><span class=\"line\">var i = 5;</span><br><span class=\"line\">t := i;</span><br><span class=\"line\"></span><br><span class=\"line\"># 标识符</span><br><span class=\"line\">命名变量名称</span><br><span class=\"line\">- 不能以数字开头</span><br><span class=\"line\"></span><br><span class=\"line\"># 包别名</span><br><span class=\"line\">import(</span><br><span class=\"line\">    ff &quot;fmt&quot;</span><br><span class=\"line\">)</span><br><span class=\"line\"></span><br><span class=\"line\">ff.Println();</span><br><span class=\"line\"></span><br><span class=\"line\"># 布尔值</span><br><span class=\"line\">var b bool</span><br><span class=\"line\">b = true</span><br><span class=\"line\"></span><br><span class=\"line\"># 整型</span><br><span class=\"line\">var i,j int</span><br><span class=\"line\">var i init8 // 8位整型</span><br><span class=\"line\"></span><br><span class=\"line\"># 数组</span><br><span class=\"line\">var arr [10]int</span><br><span class=\"line\"></span><br><span class=\"line\"># 结构类型 struct</span><br><span class=\"line\"></span><br><span class=\"line\">type s struct &#123;</span><br><span class=\"line\">    X int</span><br><span class=\"line\">    Y int</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># 字符串</span><br><span class=\"line\">var s string = &quot;go&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># 函数类型</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://github.com/jaywcjlove/golang-tutorial#%E5%AE%89%E8%A3%85go\">https://github.com/jaywcjlove/golang-tutorial#%E5%AE%89%E8%A3%85go</a></p>\n<h4 id=\"基础知识\"><a href=\"#基础知识\" class=\"headerlink\" title=\"基础知识\"></a>基础知识</h4><h4 id=\"变量创建的5种方式\"><a href=\"#变量创建的5种方式\" class=\"headerlink\" title=\"变量创建的5种方式\"></a>变量创建的5种方式</h4><p>方式一：<br>一行声明一个变量。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 这种方式会隐式初始化。如string为空字符串，int为0，float为0.0，bool为false。</span><br><span class=\"line\">var &lt;name&gt; &lt;type&gt;，当然可以声明后初始化。</span><br><span class=\"line\">如：var a string = &quot;helloworld&quot;</span><br></pre></td></tr></table></figure>\n<p>说明：helloworld一定要双引号，表示字符串，单引号上rune类型。</p>\n<p>方式二：<br>同时声明多个变量。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var (</span><br><span class=\"line\">  name string</span><br><span class=\"line\">  age int</span><br><span class=\"line\">  gender string</span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>方式三：<br>推导声明</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 编译器根据右值类型推导出左边类型。限制：这种方式只能用于函数内部。</span><br><span class=\"line\">name := &quot;helloworld&quot; </span><br></pre></td></tr></table></figure>\n<p>方式四：<br>声明和初始化多个变量。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">name, age := &quot;ricky&quot;, 11</span><br></pre></td></tr></table></figure>\n\n<p>方式五：<br>new(类型)函数，返回指针类型。变量分为普通变量(数据本身)和指针变量(数据内存地址，通过*接指针变量表示从内存地址取值) </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">age := new(int)</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"整数类型\"><a href=\"#整数类型\" class=\"headerlink\" title=\"整数类型\"></a>整数类型</h4><p>共有16种，u开头的是无符号，没有负数。</p>\n<p>int8 代表8bit，能表示-128～127之间的数字。</p>\n<h4 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h4><p><a href=\"https://golang.iswbm.com/c01/c01_05.html\">https://golang.iswbm.com/c01/c01_05.html</a></p>\n<p>参考：<a href=\"https://golang.iswbm.com/c01/c01_02.html\">https://golang.iswbm.com/c01/c01_02.html</a></p>\n<h3 id=\"Go命令解释\"><a href=\"#Go命令解释\" class=\"headerlink\" title=\"Go命令解释\"></a>Go命令解释</h3><ul>\n<li><code>go build</code> 编译源码文件以及它们的依赖包<br>比如，在<code>go build</code>后面不加任何代码文件，它将试图编译当前目录下对应的main.go。Windows系统会生成相应的.exe可执行文件。</li>\n<li><code>go build -o main main.go</code> 指定编译后的可执行包名称为main</li>\n<li><code>go env</code> 打印go语言环境变量</li>\n</ul>\n<p>说明：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- GOBIN // 存放可执行文件的目录的绝对路径。</span><br><span class=\"line\">- GOARCH // 执行环境计算架构</span><br><span class=\"line\">- GOEXE // 可执行文件后缀</span><br><span class=\"line\">- GOHOSTOS // 执行环境操作系统</span><br><span class=\"line\">- GOPATH // 工作区目录的绝对路径。我们需要显式的设置环境变量GOPATH。如果有多个工作区，那么多个工作区的绝对路径之间需要用分隔符分隔。在windows操作系统下，这个分隔符为“;”。在其它操作系统下，这个分隔符为“:”。注意，GOPATH的值不能与GOROOT的值相同。</span><br><span class=\"line\"></span><br><span class=\"line\">- GOROOT // Go语言的安装目录的绝对路径。GOROOT会是我们在安装Go语言时第一个碰到Go语言环境变量。它的值指明了Go语言的安装目录的绝对路径。但是，只有在非默认情况下我们才需要显式的设置环境变量GOROOT。这里所说的默认情况是指：在Windows操作系统下我们把Go语言安装到c:\\Go目录下，或者在其它操作系统下我们把Go语言安装到/usr/local/go目录下。另外，当我们不是通过二进制分发包来安装Go语言的时候，也不需要设置环境变量GOROOT的值。比如，在Windows操作系统下，我们可以使用MSI软件包文件来安装Go语言</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p><code>go install</code> 编译和安装文件及其依赖包，一定程度上等价于<code>go build</code>，但 <code>go install</code>可以指定编译后可执行文件的位置。</p>\n</li>\n<li><p><code>go get</code> 安装指定依赖。如 <code>go get -u github.com/chromedp/chromedp</code>。<code>-u</code>表示只会从网络上下载本地不存在的代码包，而不会更新已有的代码包。</p>\n</li>\n<li><p><code>go run</code> 编译和运行源码文件，不需要生成可执行文件即可执行。如<code>go run main.go</code></p>\n</li>\n</ul>\n"},{"title":"第33期：工具集","date":"2023-05-22T09:17:37.000Z","_content":"```\n# redis桌面工具\nhttps://github.com/qishibo/AnotherRedisDesktopManager\n\n# termius\nAppStore搜索`termius`，用于macos，功能上类似xshell加xftp，可以传文件和ssh连接。\n\n# 笔画图工具\nLorien\n\n# 开发工具箱\nDevToys  # 支持Base64加解密、URL格式转化，github搜素\n\n# rufus\nu盘制作成操作系统盘\n```\n","source":"_posts/第33期：工具集.md","raw":"---\ntitle: 第33期：工具集\ndate: 2023-05-22 17:17:37\ntags:\n---\n```\n# redis桌面工具\nhttps://github.com/qishibo/AnotherRedisDesktopManager\n\n# termius\nAppStore搜索`termius`，用于macos，功能上类似xshell加xftp，可以传文件和ssh连接。\n\n# 笔画图工具\nLorien\n\n# 开发工具箱\nDevToys  # 支持Base64加解密、URL格式转化，github搜素\n\n# rufus\nu盘制作成操作系统盘\n```\n","slug":"第33期：工具集","published":1,"updated":"2024-03-06T06:55:18.361Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvteb000qbkln1hjh17gz","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># redis桌面工具</span><br><span class=\"line\">https://github.com/qishibo/AnotherRedisDesktopManager</span><br><span class=\"line\"></span><br><span class=\"line\"># termius</span><br><span class=\"line\">AppStore搜索`termius`，用于macos，功能上类似xshell加xftp，可以传文件和ssh连接。</span><br><span class=\"line\"></span><br><span class=\"line\"># 笔画图工具</span><br><span class=\"line\">Lorien</span><br><span class=\"line\"></span><br><span class=\"line\"># 开发工具箱</span><br><span class=\"line\">DevToys  # 支持Base64加解密、URL格式转化，github搜素</span><br><span class=\"line\"></span><br><span class=\"line\"># rufus</span><br><span class=\"line\">u盘制作成操作系统盘</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># redis桌面工具</span><br><span class=\"line\">https://github.com/qishibo/AnotherRedisDesktopManager</span><br><span class=\"line\"></span><br><span class=\"line\"># termius</span><br><span class=\"line\">AppStore搜索`termius`，用于macos，功能上类似xshell加xftp，可以传文件和ssh连接。</span><br><span class=\"line\"></span><br><span class=\"line\"># 笔画图工具</span><br><span class=\"line\">Lorien</span><br><span class=\"line\"></span><br><span class=\"line\"># 开发工具箱</span><br><span class=\"line\">DevToys  # 支持Base64加解密、URL格式转化，github搜素</span><br><span class=\"line\"></span><br><span class=\"line\"># rufus</span><br><span class=\"line\">u盘制作成操作系统盘</span><br></pre></td></tr></table></figure>\n"},{"title":"第34期：LVM","date":"2023-05-22T09:33:42.000Z","_content":"#### 应用场景\nlvm能做什么？组装多个物理磁盘，划分逻辑磁盘，逻辑磁盘可以动态扩缩。\n\n#### lvm原理\n```\nlvm(Logic Volume Manage)逻辑卷管理。\n\n# 先分区\n\n`fdisk -l`查看新加的磁盘`/dev/sda`，给它分区：`fdisk /dev/sda`\n\n输入`n`，选择p，起始扇区回车选择默认，终止扇区输入`+10G`容量。\n\n输入`t`，设置id为`8e`，`8e`代表分区类型为linux-lvm。\n\n输入`w`保存配置。\n\n# 安装lvm2\nyum -y install lvm2\n\n# 创建pv(Physical Volume)物理卷\npvcreate /dev/sda1\npvscan # 查看pv\n\n# 创建VG(Volume Group)卷组，把pv加到它下面\nvgcreate vgdata /dev/sda1 # vgdata 是卷组名称 \n\n# 从卷组vgdata中创建lv(Logic Volume)逻辑卷\nlvcreate -L 9G -n lv001 vgdata # 分配9G给逻辑卷lv001，这个lv的目录为/dev/vgdata/lv001\n\n# 格式化lv001的文件系统为ext4\nmkfs -t ext4 /dev/vgdata/lv001\n\n# 创建/data目录，并将/dev/vgdata/lv001挂载到它\nmkdir /data\nmount /dev/vgdata/lv001 /data \n\n# 设置开机自动挂载\n编辑 /etc/fstab，添加一行:\n\n/dev/vgdata/lv001   /data  ext4 defaults 0  0\n\n以上完成就可以使用了。\n\n## 其他操作\n\n```\n参考：https://www.cnblogs.com/large-show/p/16203274.html\n\n### 分区\n应用场景：机器新加了一块磁盘，`df -h`查看，没有看到新加的磁盘。怎么办？\n\n#### 磁盘分区和挂载\n`fdisk -l` 查看当前系统所有磁盘设备。\n\n`fdisk /dev/sdb` 进入交互界面，准备对sdb磁盘进行分区。\n\n指令选项说明: \n```\nm 帮助信息；\nn 新建分区\nd 删除分区\nt 转换系统id，即转换格式\nw 保存信息，将变更写入磁盘。\nq 退出\n```\n\n输入`n`进行分区: p表建立主分区\n\n以上设置仅保存在内存中，输入`w`正式写到磁盘。\n\n说明：\n- 如果出现\"All primary partitions are in use\"，可输入`d`删除分区。\n\n分区完成后，需要格式化磁盘指定文件系统类型，centos7默认为ext4。\n\n`mkfs -t ext4 /dev/sdb1` # 设置分区sdb1的文件系统类型为ext4。\n\n格式化完成后，挂载:\n`mount /dev/sdb1 /mnt/sdb1` # 其中`/mnt/sdb1`是挂载目录，又称为挂载点。\n\n执行`df -h`即可查看到磁盘完成挂载。\n\n但是，系统在重启之后，发现挂载失效了。\n\n`blkid |grep /dev/sda1` # 获取分区的uuid\n\n编辑`/etc/fstab`，加入：\n```\nUUID=ea31269e-1e6b-4aac-8b14-19f4c577ce14 /mnt/sda1       ext4   defaults 0    0\n```\n\n执行`mount -a`加载磁盘挂载。 \n\n##### 参考\nhttps://blog.csdn.net/qq_42761527/article/details/102862813\n\nhttps://www.cnblogs.com/w-wfy/p/8870598.html  # 主分区和扩展分区区别\n","source":"_posts/第34期：LVM.md","raw":"---\ntitle: 第34期：LVM\ndate: 2023-05-22 17:33:42\ntags:\n---\n#### 应用场景\nlvm能做什么？组装多个物理磁盘，划分逻辑磁盘，逻辑磁盘可以动态扩缩。\n\n#### lvm原理\n```\nlvm(Logic Volume Manage)逻辑卷管理。\n\n# 先分区\n\n`fdisk -l`查看新加的磁盘`/dev/sda`，给它分区：`fdisk /dev/sda`\n\n输入`n`，选择p，起始扇区回车选择默认，终止扇区输入`+10G`容量。\n\n输入`t`，设置id为`8e`，`8e`代表分区类型为linux-lvm。\n\n输入`w`保存配置。\n\n# 安装lvm2\nyum -y install lvm2\n\n# 创建pv(Physical Volume)物理卷\npvcreate /dev/sda1\npvscan # 查看pv\n\n# 创建VG(Volume Group)卷组，把pv加到它下面\nvgcreate vgdata /dev/sda1 # vgdata 是卷组名称 \n\n# 从卷组vgdata中创建lv(Logic Volume)逻辑卷\nlvcreate -L 9G -n lv001 vgdata # 分配9G给逻辑卷lv001，这个lv的目录为/dev/vgdata/lv001\n\n# 格式化lv001的文件系统为ext4\nmkfs -t ext4 /dev/vgdata/lv001\n\n# 创建/data目录，并将/dev/vgdata/lv001挂载到它\nmkdir /data\nmount /dev/vgdata/lv001 /data \n\n# 设置开机自动挂载\n编辑 /etc/fstab，添加一行:\n\n/dev/vgdata/lv001   /data  ext4 defaults 0  0\n\n以上完成就可以使用了。\n\n## 其他操作\n\n```\n参考：https://www.cnblogs.com/large-show/p/16203274.html\n\n### 分区\n应用场景：机器新加了一块磁盘，`df -h`查看，没有看到新加的磁盘。怎么办？\n\n#### 磁盘分区和挂载\n`fdisk -l` 查看当前系统所有磁盘设备。\n\n`fdisk /dev/sdb` 进入交互界面，准备对sdb磁盘进行分区。\n\n指令选项说明: \n```\nm 帮助信息；\nn 新建分区\nd 删除分区\nt 转换系统id，即转换格式\nw 保存信息，将变更写入磁盘。\nq 退出\n```\n\n输入`n`进行分区: p表建立主分区\n\n以上设置仅保存在内存中，输入`w`正式写到磁盘。\n\n说明：\n- 如果出现\"All primary partitions are in use\"，可输入`d`删除分区。\n\n分区完成后，需要格式化磁盘指定文件系统类型，centos7默认为ext4。\n\n`mkfs -t ext4 /dev/sdb1` # 设置分区sdb1的文件系统类型为ext4。\n\n格式化完成后，挂载:\n`mount /dev/sdb1 /mnt/sdb1` # 其中`/mnt/sdb1`是挂载目录，又称为挂载点。\n\n执行`df -h`即可查看到磁盘完成挂载。\n\n但是，系统在重启之后，发现挂载失效了。\n\n`blkid |grep /dev/sda1` # 获取分区的uuid\n\n编辑`/etc/fstab`，加入：\n```\nUUID=ea31269e-1e6b-4aac-8b14-19f4c577ce14 /mnt/sda1       ext4   defaults 0    0\n```\n\n执行`mount -a`加载磁盘挂载。 \n\n##### 参考\nhttps://blog.csdn.net/qq_42761527/article/details/102862813\n\nhttps://www.cnblogs.com/w-wfy/p/8870598.html  # 主分区和扩展分区区别\n","slug":"第34期：LVM","published":1,"updated":"2024-03-06T06:55:18.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvtec000rbklnhc7kbvx1","content":"<h4 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4><p>lvm能做什么？组装多个物理磁盘，划分逻辑磁盘，逻辑磁盘可以动态扩缩。</p>\n<h4 id=\"lvm原理\"><a href=\"#lvm原理\" class=\"headerlink\" title=\"lvm原理\"></a>lvm原理</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lvm(Logic Volume Manage)逻辑卷管理。</span><br><span class=\"line\"></span><br><span class=\"line\"># 先分区</span><br><span class=\"line\"></span><br><span class=\"line\">`fdisk -l`查看新加的磁盘`/dev/sda`，给它分区：`fdisk /dev/sda`</span><br><span class=\"line\"></span><br><span class=\"line\">输入`n`，选择p，起始扇区回车选择默认，终止扇区输入`+10G`容量。</span><br><span class=\"line\"></span><br><span class=\"line\">输入`t`，设置id为`8e`，`8e`代表分区类型为linux-lvm。</span><br><span class=\"line\"></span><br><span class=\"line\">输入`w`保存配置。</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装lvm2</span><br><span class=\"line\">yum -y install lvm2</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建pv(Physical Volume)物理卷</span><br><span class=\"line\">pvcreate /dev/sda1</span><br><span class=\"line\">pvscan # 查看pv</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建VG(Volume Group)卷组，把pv加到它下面</span><br><span class=\"line\">vgcreate vgdata /dev/sda1 # vgdata 是卷组名称 </span><br><span class=\"line\"></span><br><span class=\"line\"># 从卷组vgdata中创建lv(Logic Volume)逻辑卷</span><br><span class=\"line\">lvcreate -L 9G -n lv001 vgdata # 分配9G给逻辑卷lv001，这个lv的目录为/dev/vgdata/lv001</span><br><span class=\"line\"></span><br><span class=\"line\"># 格式化lv001的文件系统为ext4</span><br><span class=\"line\">mkfs -t ext4 /dev/vgdata/lv001</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建/data目录，并将/dev/vgdata/lv001挂载到它</span><br><span class=\"line\">mkdir /data</span><br><span class=\"line\">mount /dev/vgdata/lv001 /data </span><br><span class=\"line\"></span><br><span class=\"line\"># 设置开机自动挂载</span><br><span class=\"line\">编辑 /etc/fstab，添加一行:</span><br><span class=\"line\"></span><br><span class=\"line\">/dev/vgdata/lv001   /data  ext4 defaults 0  0</span><br><span class=\"line\"></span><br><span class=\"line\">以上完成就可以使用了。</span><br><span class=\"line\"></span><br><span class=\"line\">## 其他操作</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://www.cnblogs.com/large-show/p/16203274.html\">https://www.cnblogs.com/large-show/p/16203274.html</a></p>\n<h3 id=\"分区\"><a href=\"#分区\" class=\"headerlink\" title=\"分区\"></a>分区</h3><p>应用场景：机器新加了一块磁盘，<code>df -h</code>查看，没有看到新加的磁盘。怎么办？</p>\n<h4 id=\"磁盘分区和挂载\"><a href=\"#磁盘分区和挂载\" class=\"headerlink\" title=\"磁盘分区和挂载\"></a>磁盘分区和挂载</h4><p><code>fdisk -l</code> 查看当前系统所有磁盘设备。</p>\n<p><code>fdisk /dev/sdb</code> 进入交互界面，准备对sdb磁盘进行分区。</p>\n<p>指令选项说明: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m 帮助信息；</span><br><span class=\"line\">n 新建分区</span><br><span class=\"line\">d 删除分区</span><br><span class=\"line\">t 转换系统id，即转换格式</span><br><span class=\"line\">w 保存信息，将变更写入磁盘。</span><br><span class=\"line\">q 退出</span><br></pre></td></tr></table></figure>\n\n<p>输入<code>n</code>进行分区: p表建立主分区</p>\n<p>以上设置仅保存在内存中，输入<code>w</code>正式写到磁盘。</p>\n<p>说明：</p>\n<ul>\n<li>如果出现”All primary partitions are in use”，可输入<code>d</code>删除分区。</li>\n</ul>\n<p>分区完成后，需要格式化磁盘指定文件系统类型，centos7默认为ext4。</p>\n<p><code>mkfs -t ext4 /dev/sdb1</code> # 设置分区sdb1的文件系统类型为ext4。</p>\n<p>格式化完成后，挂载:<br><code>mount /dev/sdb1 /mnt/sdb1</code> # 其中<code>/mnt/sdb1</code>是挂载目录，又称为挂载点。</p>\n<p>执行<code>df -h</code>即可查看到磁盘完成挂载。</p>\n<p>但是，系统在重启之后，发现挂载失效了。</p>\n<p><code>blkid |grep /dev/sda1</code> # 获取分区的uuid</p>\n<p>编辑<code>/etc/fstab</code>，加入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UUID=ea31269e-1e6b-4aac-8b14-19f4c577ce14 /mnt/sda1       ext4   defaults 0    0</span><br></pre></td></tr></table></figure>\n\n<p>执行<code>mount -a</code>加载磁盘挂载。 </p>\n<h5 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h5><p><a href=\"https://blog.csdn.net/qq_42761527/article/details/102862813\">https://blog.csdn.net/qq_42761527/article/details/102862813</a></p>\n<p><a href=\"https://www.cnblogs.com/w-wfy/p/8870598.html\">https://www.cnblogs.com/w-wfy/p/8870598.html</a>  # 主分区和扩展分区区别</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"应用场景\"><a href=\"#应用场景\" class=\"headerlink\" title=\"应用场景\"></a>应用场景</h4><p>lvm能做什么？组装多个物理磁盘，划分逻辑磁盘，逻辑磁盘可以动态扩缩。</p>\n<h4 id=\"lvm原理\"><a href=\"#lvm原理\" class=\"headerlink\" title=\"lvm原理\"></a>lvm原理</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lvm(Logic Volume Manage)逻辑卷管理。</span><br><span class=\"line\"></span><br><span class=\"line\"># 先分区</span><br><span class=\"line\"></span><br><span class=\"line\">`fdisk -l`查看新加的磁盘`/dev/sda`，给它分区：`fdisk /dev/sda`</span><br><span class=\"line\"></span><br><span class=\"line\">输入`n`，选择p，起始扇区回车选择默认，终止扇区输入`+10G`容量。</span><br><span class=\"line\"></span><br><span class=\"line\">输入`t`，设置id为`8e`，`8e`代表分区类型为linux-lvm。</span><br><span class=\"line\"></span><br><span class=\"line\">输入`w`保存配置。</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装lvm2</span><br><span class=\"line\">yum -y install lvm2</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建pv(Physical Volume)物理卷</span><br><span class=\"line\">pvcreate /dev/sda1</span><br><span class=\"line\">pvscan # 查看pv</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建VG(Volume Group)卷组，把pv加到它下面</span><br><span class=\"line\">vgcreate vgdata /dev/sda1 # vgdata 是卷组名称 </span><br><span class=\"line\"></span><br><span class=\"line\"># 从卷组vgdata中创建lv(Logic Volume)逻辑卷</span><br><span class=\"line\">lvcreate -L 9G -n lv001 vgdata # 分配9G给逻辑卷lv001，这个lv的目录为/dev/vgdata/lv001</span><br><span class=\"line\"></span><br><span class=\"line\"># 格式化lv001的文件系统为ext4</span><br><span class=\"line\">mkfs -t ext4 /dev/vgdata/lv001</span><br><span class=\"line\"></span><br><span class=\"line\"># 创建/data目录，并将/dev/vgdata/lv001挂载到它</span><br><span class=\"line\">mkdir /data</span><br><span class=\"line\">mount /dev/vgdata/lv001 /data </span><br><span class=\"line\"></span><br><span class=\"line\"># 设置开机自动挂载</span><br><span class=\"line\">编辑 /etc/fstab，添加一行:</span><br><span class=\"line\"></span><br><span class=\"line\">/dev/vgdata/lv001   /data  ext4 defaults 0  0</span><br><span class=\"line\"></span><br><span class=\"line\">以上完成就可以使用了。</span><br><span class=\"line\"></span><br><span class=\"line\">## 其他操作</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://www.cnblogs.com/large-show/p/16203274.html\">https://www.cnblogs.com/large-show/p/16203274.html</a></p>\n<h3 id=\"分区\"><a href=\"#分区\" class=\"headerlink\" title=\"分区\"></a>分区</h3><p>应用场景：机器新加了一块磁盘，<code>df -h</code>查看，没有看到新加的磁盘。怎么办？</p>\n<h4 id=\"磁盘分区和挂载\"><a href=\"#磁盘分区和挂载\" class=\"headerlink\" title=\"磁盘分区和挂载\"></a>磁盘分区和挂载</h4><p><code>fdisk -l</code> 查看当前系统所有磁盘设备。</p>\n<p><code>fdisk /dev/sdb</code> 进入交互界面，准备对sdb磁盘进行分区。</p>\n<p>指令选项说明: </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">m 帮助信息；</span><br><span class=\"line\">n 新建分区</span><br><span class=\"line\">d 删除分区</span><br><span class=\"line\">t 转换系统id，即转换格式</span><br><span class=\"line\">w 保存信息，将变更写入磁盘。</span><br><span class=\"line\">q 退出</span><br></pre></td></tr></table></figure>\n\n<p>输入<code>n</code>进行分区: p表建立主分区</p>\n<p>以上设置仅保存在内存中，输入<code>w</code>正式写到磁盘。</p>\n<p>说明：</p>\n<ul>\n<li>如果出现”All primary partitions are in use”，可输入<code>d</code>删除分区。</li>\n</ul>\n<p>分区完成后，需要格式化磁盘指定文件系统类型，centos7默认为ext4。</p>\n<p><code>mkfs -t ext4 /dev/sdb1</code> # 设置分区sdb1的文件系统类型为ext4。</p>\n<p>格式化完成后，挂载:<br><code>mount /dev/sdb1 /mnt/sdb1</code> # 其中<code>/mnt/sdb1</code>是挂载目录，又称为挂载点。</p>\n<p>执行<code>df -h</code>即可查看到磁盘完成挂载。</p>\n<p>但是，系统在重启之后，发现挂载失效了。</p>\n<p><code>blkid |grep /dev/sda1</code> # 获取分区的uuid</p>\n<p>编辑<code>/etc/fstab</code>，加入：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">UUID=ea31269e-1e6b-4aac-8b14-19f4c577ce14 /mnt/sda1       ext4   defaults 0    0</span><br></pre></td></tr></table></figure>\n\n<p>执行<code>mount -a</code>加载磁盘挂载。 </p>\n<h5 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h5><p><a href=\"https://blog.csdn.net/qq_42761527/article/details/102862813\">https://blog.csdn.net/qq_42761527/article/details/102862813</a></p>\n<p><a href=\"https://www.cnblogs.com/w-wfy/p/8870598.html\">https://www.cnblogs.com/w-wfy/p/8870598.html</a>  # 主分区和扩展分区区别</p>\n"},{"title":"第35期：TELNET","date":"2023-05-22T09:35:10.000Z","_content":"#### telnet\n本质是上一个远程登录工具，只不过是明文传输数据。\n\n常用功能：\n- 测试远程端口是否可用\n\ncentos7安装telnet\nyum install -y telnet\n\n如果返回`Connection refused`说明服务端口没有被占用，反之。\n\n测试mysql是否可用\n```\n$ telnet localhost 3306\nTrying ::1...\ntelnet: connect to address ::1: Connection refused\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\nR\n5.5.65-MariaDB/+R<uX;Z?;fp\"Ug%}k\"bKmysql_native_passwordConnection closed by foreign host.\n```\n以上表示mysql服务可连。在`foreign host.`后面输入quit可退出 或在后面输入`info`可查返回细节。\n","source":"_posts/第35期：TELNET.md","raw":"---\ntitle: 第35期：TELNET\ndate: 2023-05-22 17:35:10\ntags:\n---\n#### telnet\n本质是上一个远程登录工具，只不过是明文传输数据。\n\n常用功能：\n- 测试远程端口是否可用\n\ncentos7安装telnet\nyum install -y telnet\n\n如果返回`Connection refused`说明服务端口没有被占用，反之。\n\n测试mysql是否可用\n```\n$ telnet localhost 3306\nTrying ::1...\ntelnet: connect to address ::1: Connection refused\nTrying 127.0.0.1...\nConnected to localhost.\nEscape character is '^]'.\nR\n5.5.65-MariaDB/+R<uX;Z?;fp\"Ug%}k\"bKmysql_native_passwordConnection closed by foreign host.\n```\n以上表示mysql服务可连。在`foreign host.`后面输入quit可退出 或在后面输入`info`可查返回细节。\n","slug":"第35期：TELNET","published":1,"updated":"2024-03-06T06:55:18.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvted000sbklnbn0fa8u6","content":"<h4 id=\"telnet\"><a href=\"#telnet\" class=\"headerlink\" title=\"telnet\"></a>telnet</h4><p>本质是上一个远程登录工具，只不过是明文传输数据。</p>\n<p>常用功能：</p>\n<ul>\n<li>测试远程端口是否可用</li>\n</ul>\n<p>centos7安装telnet<br>yum install -y telnet</p>\n<p>如果返回<code>Connection refused</code>说明服务端口没有被占用，反之。</p>\n<p>测试mysql是否可用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ telnet localhost 3306</span><br><span class=\"line\">Trying ::1...</span><br><span class=\"line\">telnet: connect to address ::1: Connection refused</span><br><span class=\"line\">Trying 127.0.0.1...</span><br><span class=\"line\">Connected to localhost.</span><br><span class=\"line\">Escape character is &#x27;^]&#x27;.</span><br><span class=\"line\">R</span><br><span class=\"line\">5.5.65-MariaDB/+R&lt;uX;Z?;fp&quot;Ug%&#125;k&quot;bKmysql_native_passwordConnection closed by foreign host.</span><br></pre></td></tr></table></figure>\n<p>以上表示mysql服务可连。在<code>foreign host.</code>后面输入quit可退出 或在后面输入<code>info</code>可查返回细节。</p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"telnet\"><a href=\"#telnet\" class=\"headerlink\" title=\"telnet\"></a>telnet</h4><p>本质是上一个远程登录工具，只不过是明文传输数据。</p>\n<p>常用功能：</p>\n<ul>\n<li>测试远程端口是否可用</li>\n</ul>\n<p>centos7安装telnet<br>yum install -y telnet</p>\n<p>如果返回<code>Connection refused</code>说明服务端口没有被占用，反之。</p>\n<p>测试mysql是否可用</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ telnet localhost 3306</span><br><span class=\"line\">Trying ::1...</span><br><span class=\"line\">telnet: connect to address ::1: Connection refused</span><br><span class=\"line\">Trying 127.0.0.1...</span><br><span class=\"line\">Connected to localhost.</span><br><span class=\"line\">Escape character is &#x27;^]&#x27;.</span><br><span class=\"line\">R</span><br><span class=\"line\">5.5.65-MariaDB/+R&lt;uX;Z?;fp&quot;Ug%&#125;k&quot;bKmysql_native_passwordConnection closed by foreign host.</span><br></pre></td></tr></table></figure>\n<p>以上表示mysql服务可连。在<code>foreign host.</code>后面输入quit可退出 或在后面输入<code>info</code>可查返回细节。</p>\n"},{"title":"第36期：Redis","date":"2023-05-22T09:41:33.000Z","_content":"### 优缺点\n```\n# 优：\n基于内存的kv数据库，每秒可达到10w次读写操作\n\n# 缺：\n不能存储大容量数据\n```\n#### 大key/热key\n```\n大Key: Key本身的数据量过大：一个String类型的Key，它的值为5 MB; \n      \n      Key中的成员数过多：一个ZSET类型的Key，它的成员数量为10,000个; \n      \n      Key中成员的数据量过大：一个Hash类型的Key，它的成员数量虽然只有1,000个但这些成员的Value（值）总大小为100 MB。\n\n热Key: QPS集中在特定的Key：Redis实例的总QPS（每秒查询率）为10,000，而其中一个Key的每秒访问量达到了7,000。\n       \n      带宽使用率集中在特定的Key：对一个拥有上千个成员且总大小为1 MB的HASH Key每秒发送大量的HGETALL操作请求。\n\n      CPU使用时间占比集中在特定的Key：对一个拥有数万个成员的Key（ZSET类型）每秒发送大量的ZRANGE操作请求。\n```\n\n#### redis-cli安装使用\n```\nLinux\n# 下载安装redis-cli（下载Redis源码文件）\n\nwget https://download.redis.io/releases/redis-6.0.9.tar.gz # more version see https://redis.io/download/?spm=a2c4g.11186623.0.0.10ec3783Qw3pBc\ntar -xzvf redis-6.0.9.tar.gz\n\n# 执行下述命令进入解压后的目录并编译安装Redis源码文件\ncd redis-6.0.9\n\n# 安装\nmake PREFIX=/usr/local/redis install\ncd /usr/local/redis\ncp redis.conf 6379.conf\n\n# 启动\n./bin/redis-server 6379.conf\n\n# 测试\n./bin/redis-cli\n127.0.0.1:6379> ping\nPONG\n\n# 远程连接\nredis-cli -h hostname -p port\n# 密码用户认证\nAUTH testaccount:Rp829dlwa\n```\n#### redis开发运维规范\n```\n1.设计合理的Key中Value的大小，推荐小于10 KB。过大的Value会引发数据倾斜、热点Key、实例流量或CPU性能被占满等问题，应从设计源头上避免此类问题带来的影响。\n2.设计合理的Key名称与长度\n使用可读字符串作为Key名，如果使用Key名拼接库、表和字段名时，推荐使用英文冒号（:）分隔。例如project:user:001。\n长度：推荐Key名的长度不超过128字节（越短越好）。\n```\n### redis基本操作\n```\n# 查看所有key\nkeys * # 不建议在生产环境使用\nkeys h*\n\n# 键数量\ndbsize # 存在大量key的话生产环境禁止使用\n\nexists key # 存在返回1，否则0\n\ndel key # 删除键，返回删除个数，若key不存在返回0\n\nttl key # 键存活时间，若key不存在返回-1\n\nexpire key seconds # 设置过期时间，成功返回1，失败返回0\n\npersist key # 去掉过期时间\n\nmonitor # 实时监控redis请求信息\n\ninfo # 查看节点信息\n```\n### 缓存雪崩\n某一个热点数据过期，一时间请求都到\n了DB导致雪崩。\n\n解决：\n- 1.过期时间避开业务高峰期；\n- 2.热点数据不过期\n\n### 缓存穿透\n接口的参数是redis不存在的，请求打到了DB，db也找不到，肉鸡疯狂发请求导致db崩溃。\n\n解决：\n- ip黑名单和限流\n- 接口参数校验\n\n### 缓存雪崩\n多数key失效，请求到了db导致崩溃\n\n### 淘汰策略\n```\n共8种策略。\n- allkeys-lru  淘汰最少用的key(应用最广泛)\n- no-enviction 禁止驱逐数据，内存满时写数据会报错，默认策略。\n```\n### 删除策略\n```\n- 定时策略，设置key的同时设置时间\n- 惰性删除，过期的key不清除，等访问的时候发现过期就删除。对cpu友好，但内存会累积。\n- 定期删除，每隔100ms检查过期key删除\n\n一般是惰性加定期删除策略。\n```\n\n### 持久化机制\n```\n- RDB 定时持久化\n- AOF 实时持久化\n```","source":"_posts/第36期：Redis.md","raw":"---\ntitle: 第36期：Redis\ndate: 2023-05-22 17:41:33\ntags:\n---\n### 优缺点\n```\n# 优：\n基于内存的kv数据库，每秒可达到10w次读写操作\n\n# 缺：\n不能存储大容量数据\n```\n#### 大key/热key\n```\n大Key: Key本身的数据量过大：一个String类型的Key，它的值为5 MB; \n      \n      Key中的成员数过多：一个ZSET类型的Key，它的成员数量为10,000个; \n      \n      Key中成员的数据量过大：一个Hash类型的Key，它的成员数量虽然只有1,000个但这些成员的Value（值）总大小为100 MB。\n\n热Key: QPS集中在特定的Key：Redis实例的总QPS（每秒查询率）为10,000，而其中一个Key的每秒访问量达到了7,000。\n       \n      带宽使用率集中在特定的Key：对一个拥有上千个成员且总大小为1 MB的HASH Key每秒发送大量的HGETALL操作请求。\n\n      CPU使用时间占比集中在特定的Key：对一个拥有数万个成员的Key（ZSET类型）每秒发送大量的ZRANGE操作请求。\n```\n\n#### redis-cli安装使用\n```\nLinux\n# 下载安装redis-cli（下载Redis源码文件）\n\nwget https://download.redis.io/releases/redis-6.0.9.tar.gz # more version see https://redis.io/download/?spm=a2c4g.11186623.0.0.10ec3783Qw3pBc\ntar -xzvf redis-6.0.9.tar.gz\n\n# 执行下述命令进入解压后的目录并编译安装Redis源码文件\ncd redis-6.0.9\n\n# 安装\nmake PREFIX=/usr/local/redis install\ncd /usr/local/redis\ncp redis.conf 6379.conf\n\n# 启动\n./bin/redis-server 6379.conf\n\n# 测试\n./bin/redis-cli\n127.0.0.1:6379> ping\nPONG\n\n# 远程连接\nredis-cli -h hostname -p port\n# 密码用户认证\nAUTH testaccount:Rp829dlwa\n```\n#### redis开发运维规范\n```\n1.设计合理的Key中Value的大小，推荐小于10 KB。过大的Value会引发数据倾斜、热点Key、实例流量或CPU性能被占满等问题，应从设计源头上避免此类问题带来的影响。\n2.设计合理的Key名称与长度\n使用可读字符串作为Key名，如果使用Key名拼接库、表和字段名时，推荐使用英文冒号（:）分隔。例如project:user:001。\n长度：推荐Key名的长度不超过128字节（越短越好）。\n```\n### redis基本操作\n```\n# 查看所有key\nkeys * # 不建议在生产环境使用\nkeys h*\n\n# 键数量\ndbsize # 存在大量key的话生产环境禁止使用\n\nexists key # 存在返回1，否则0\n\ndel key # 删除键，返回删除个数，若key不存在返回0\n\nttl key # 键存活时间，若key不存在返回-1\n\nexpire key seconds # 设置过期时间，成功返回1，失败返回0\n\npersist key # 去掉过期时间\n\nmonitor # 实时监控redis请求信息\n\ninfo # 查看节点信息\n```\n### 缓存雪崩\n某一个热点数据过期，一时间请求都到\n了DB导致雪崩。\n\n解决：\n- 1.过期时间避开业务高峰期；\n- 2.热点数据不过期\n\n### 缓存穿透\n接口的参数是redis不存在的，请求打到了DB，db也找不到，肉鸡疯狂发请求导致db崩溃。\n\n解决：\n- ip黑名单和限流\n- 接口参数校验\n\n### 缓存雪崩\n多数key失效，请求到了db导致崩溃\n\n### 淘汰策略\n```\n共8种策略。\n- allkeys-lru  淘汰最少用的key(应用最广泛)\n- no-enviction 禁止驱逐数据，内存满时写数据会报错，默认策略。\n```\n### 删除策略\n```\n- 定时策略，设置key的同时设置时间\n- 惰性删除，过期的key不清除，等访问的时候发现过期就删除。对cpu友好，但内存会累积。\n- 定期删除，每隔100ms检查过期key删除\n\n一般是惰性加定期删除策略。\n```\n\n### 持久化机制\n```\n- RDB 定时持久化\n- AOF 实时持久化\n```","slug":"第36期：Redis","published":1,"updated":"2024-03-06T06:55:18.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvtee000tbkln7nssdxhi","content":"<h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 优：</span><br><span class=\"line\">基于内存的kv数据库，每秒可达到10w次读写操作</span><br><span class=\"line\"></span><br><span class=\"line\"># 缺：</span><br><span class=\"line\">不能存储大容量数据</span><br></pre></td></tr></table></figure>\n<h4 id=\"大key-x2F-热key\"><a href=\"#大key-x2F-热key\" class=\"headerlink\" title=\"大key&#x2F;热key\"></a>大key&#x2F;热key</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">大Key: Key本身的数据量过大：一个String类型的Key，它的值为5 MB; </span><br><span class=\"line\">      </span><br><span class=\"line\">      Key中的成员数过多：一个ZSET类型的Key，它的成员数量为10,000个; </span><br><span class=\"line\">      </span><br><span class=\"line\">      Key中成员的数据量过大：一个Hash类型的Key，它的成员数量虽然只有1,000个但这些成员的Value（值）总大小为100 MB。</span><br><span class=\"line\"></span><br><span class=\"line\">热Key: QPS集中在特定的Key：Redis实例的总QPS（每秒查询率）为10,000，而其中一个Key的每秒访问量达到了7,000。</span><br><span class=\"line\">       </span><br><span class=\"line\">      带宽使用率集中在特定的Key：对一个拥有上千个成员且总大小为1 MB的HASH Key每秒发送大量的HGETALL操作请求。</span><br><span class=\"line\"></span><br><span class=\"line\">      CPU使用时间占比集中在特定的Key：对一个拥有数万个成员的Key（ZSET类型）每秒发送大量的ZRANGE操作请求。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"redis-cli安装使用\"><a href=\"#redis-cli安装使用\" class=\"headerlink\" title=\"redis-cli安装使用\"></a>redis-cli安装使用</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Linux</span><br><span class=\"line\"># 下载安装redis-cli（下载Redis源码文件）</span><br><span class=\"line\"></span><br><span class=\"line\">wget https://download.redis.io/releases/redis-6.0.9.tar.gz # more version see https://redis.io/download/?spm=a2c4g.11186623.0.0.10ec3783Qw3pBc</span><br><span class=\"line\">tar -xzvf redis-6.0.9.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"># 执行下述命令进入解压后的目录并编译安装Redis源码文件</span><br><span class=\"line\">cd redis-6.0.9</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装</span><br><span class=\"line\">make PREFIX=/usr/local/redis install</span><br><span class=\"line\">cd /usr/local/redis</span><br><span class=\"line\">cp redis.conf 6379.conf</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动</span><br><span class=\"line\">./bin/redis-server 6379.conf</span><br><span class=\"line\"></span><br><span class=\"line\"># 测试</span><br><span class=\"line\">./bin/redis-cli</span><br><span class=\"line\">127.0.0.1:6379&gt; ping</span><br><span class=\"line\">PONG</span><br><span class=\"line\"></span><br><span class=\"line\"># 远程连接</span><br><span class=\"line\">redis-cli -h hostname -p port</span><br><span class=\"line\"># 密码用户认证</span><br><span class=\"line\">AUTH testaccount:Rp829dlwa</span><br></pre></td></tr></table></figure>\n<h4 id=\"redis开发运维规范\"><a href=\"#redis开发运维规范\" class=\"headerlink\" title=\"redis开发运维规范\"></a>redis开发运维规范</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.设计合理的Key中Value的大小，推荐小于10 KB。过大的Value会引发数据倾斜、热点Key、实例流量或CPU性能被占满等问题，应从设计源头上避免此类问题带来的影响。</span><br><span class=\"line\">2.设计合理的Key名称与长度</span><br><span class=\"line\">使用可读字符串作为Key名，如果使用Key名拼接库、表和字段名时，推荐使用英文冒号（:）分隔。例如project:user:001。</span><br><span class=\"line\">长度：推荐Key名的长度不超过128字节（越短越好）。</span><br></pre></td></tr></table></figure>\n<h3 id=\"redis基本操作\"><a href=\"#redis基本操作\" class=\"headerlink\" title=\"redis基本操作\"></a>redis基本操作</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看所有key</span><br><span class=\"line\">keys * # 不建议在生产环境使用</span><br><span class=\"line\">keys h*</span><br><span class=\"line\"></span><br><span class=\"line\"># 键数量</span><br><span class=\"line\">dbsize # 存在大量key的话生产环境禁止使用</span><br><span class=\"line\"></span><br><span class=\"line\">exists key # 存在返回1，否则0</span><br><span class=\"line\"></span><br><span class=\"line\">del key # 删除键，返回删除个数，若key不存在返回0</span><br><span class=\"line\"></span><br><span class=\"line\">ttl key # 键存活时间，若key不存在返回-1</span><br><span class=\"line\"></span><br><span class=\"line\">expire key seconds # 设置过期时间，成功返回1，失败返回0</span><br><span class=\"line\"></span><br><span class=\"line\">persist key # 去掉过期时间</span><br><span class=\"line\"></span><br><span class=\"line\">monitor # 实时监控redis请求信息</span><br><span class=\"line\"></span><br><span class=\"line\">info # 查看节点信息</span><br></pre></td></tr></table></figure>\n<h3 id=\"缓存雪崩\"><a href=\"#缓存雪崩\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h3><p>某一个热点数据过期，一时间请求都到<br>了DB导致雪崩。</p>\n<p>解决：</p>\n<ul>\n<li>1.过期时间避开业务高峰期；</li>\n<li>2.热点数据不过期</li>\n</ul>\n<h3 id=\"缓存穿透\"><a href=\"#缓存穿透\" class=\"headerlink\" title=\"缓存穿透\"></a>缓存穿透</h3><p>接口的参数是redis不存在的，请求打到了DB，db也找不到，肉鸡疯狂发请求导致db崩溃。</p>\n<p>解决：</p>\n<ul>\n<li>ip黑名单和限流</li>\n<li>接口参数校验</li>\n</ul>\n<h3 id=\"缓存雪崩-1\"><a href=\"#缓存雪崩-1\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h3><p>多数key失效，请求到了db导致崩溃</p>\n<h3 id=\"淘汰策略\"><a href=\"#淘汰策略\" class=\"headerlink\" title=\"淘汰策略\"></a>淘汰策略</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">共8种策略。</span><br><span class=\"line\">- allkeys-lru  淘汰最少用的key(应用最广泛)</span><br><span class=\"line\">- no-enviction 禁止驱逐数据，内存满时写数据会报错，默认策略。</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除策略\"><a href=\"#删除策略\" class=\"headerlink\" title=\"删除策略\"></a>删除策略</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 定时策略，设置key的同时设置时间</span><br><span class=\"line\">- 惰性删除，过期的key不清除，等访问的时候发现过期就删除。对cpu友好，但内存会累积。</span><br><span class=\"line\">- 定期删除，每隔100ms检查过期key删除</span><br><span class=\"line\"></span><br><span class=\"line\">一般是惰性加定期删除策略。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"持久化机制\"><a href=\"#持久化机制\" class=\"headerlink\" title=\"持久化机制\"></a>持久化机制</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- RDB 定时持久化</span><br><span class=\"line\">- AOF 实时持久化</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 优：</span><br><span class=\"line\">基于内存的kv数据库，每秒可达到10w次读写操作</span><br><span class=\"line\"></span><br><span class=\"line\"># 缺：</span><br><span class=\"line\">不能存储大容量数据</span><br></pre></td></tr></table></figure>\n<h4 id=\"大key-x2F-热key\"><a href=\"#大key-x2F-热key\" class=\"headerlink\" title=\"大key&#x2F;热key\"></a>大key&#x2F;热key</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">大Key: Key本身的数据量过大：一个String类型的Key，它的值为5 MB; </span><br><span class=\"line\">      </span><br><span class=\"line\">      Key中的成员数过多：一个ZSET类型的Key，它的成员数量为10,000个; </span><br><span class=\"line\">      </span><br><span class=\"line\">      Key中成员的数据量过大：一个Hash类型的Key，它的成员数量虽然只有1,000个但这些成员的Value（值）总大小为100 MB。</span><br><span class=\"line\"></span><br><span class=\"line\">热Key: QPS集中在特定的Key：Redis实例的总QPS（每秒查询率）为10,000，而其中一个Key的每秒访问量达到了7,000。</span><br><span class=\"line\">       </span><br><span class=\"line\">      带宽使用率集中在特定的Key：对一个拥有上千个成员且总大小为1 MB的HASH Key每秒发送大量的HGETALL操作请求。</span><br><span class=\"line\"></span><br><span class=\"line\">      CPU使用时间占比集中在特定的Key：对一个拥有数万个成员的Key（ZSET类型）每秒发送大量的ZRANGE操作请求。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"redis-cli安装使用\"><a href=\"#redis-cli安装使用\" class=\"headerlink\" title=\"redis-cli安装使用\"></a>redis-cli安装使用</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Linux</span><br><span class=\"line\"># 下载安装redis-cli（下载Redis源码文件）</span><br><span class=\"line\"></span><br><span class=\"line\">wget https://download.redis.io/releases/redis-6.0.9.tar.gz # more version see https://redis.io/download/?spm=a2c4g.11186623.0.0.10ec3783Qw3pBc</span><br><span class=\"line\">tar -xzvf redis-6.0.9.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"># 执行下述命令进入解压后的目录并编译安装Redis源码文件</span><br><span class=\"line\">cd redis-6.0.9</span><br><span class=\"line\"></span><br><span class=\"line\"># 安装</span><br><span class=\"line\">make PREFIX=/usr/local/redis install</span><br><span class=\"line\">cd /usr/local/redis</span><br><span class=\"line\">cp redis.conf 6379.conf</span><br><span class=\"line\"></span><br><span class=\"line\"># 启动</span><br><span class=\"line\">./bin/redis-server 6379.conf</span><br><span class=\"line\"></span><br><span class=\"line\"># 测试</span><br><span class=\"line\">./bin/redis-cli</span><br><span class=\"line\">127.0.0.1:6379&gt; ping</span><br><span class=\"line\">PONG</span><br><span class=\"line\"></span><br><span class=\"line\"># 远程连接</span><br><span class=\"line\">redis-cli -h hostname -p port</span><br><span class=\"line\"># 密码用户认证</span><br><span class=\"line\">AUTH testaccount:Rp829dlwa</span><br></pre></td></tr></table></figure>\n<h4 id=\"redis开发运维规范\"><a href=\"#redis开发运维规范\" class=\"headerlink\" title=\"redis开发运维规范\"></a>redis开发运维规范</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.设计合理的Key中Value的大小，推荐小于10 KB。过大的Value会引发数据倾斜、热点Key、实例流量或CPU性能被占满等问题，应从设计源头上避免此类问题带来的影响。</span><br><span class=\"line\">2.设计合理的Key名称与长度</span><br><span class=\"line\">使用可读字符串作为Key名，如果使用Key名拼接库、表和字段名时，推荐使用英文冒号（:）分隔。例如project:user:001。</span><br><span class=\"line\">长度：推荐Key名的长度不超过128字节（越短越好）。</span><br></pre></td></tr></table></figure>\n<h3 id=\"redis基本操作\"><a href=\"#redis基本操作\" class=\"headerlink\" title=\"redis基本操作\"></a>redis基本操作</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 查看所有key</span><br><span class=\"line\">keys * # 不建议在生产环境使用</span><br><span class=\"line\">keys h*</span><br><span class=\"line\"></span><br><span class=\"line\"># 键数量</span><br><span class=\"line\">dbsize # 存在大量key的话生产环境禁止使用</span><br><span class=\"line\"></span><br><span class=\"line\">exists key # 存在返回1，否则0</span><br><span class=\"line\"></span><br><span class=\"line\">del key # 删除键，返回删除个数，若key不存在返回0</span><br><span class=\"line\"></span><br><span class=\"line\">ttl key # 键存活时间，若key不存在返回-1</span><br><span class=\"line\"></span><br><span class=\"line\">expire key seconds # 设置过期时间，成功返回1，失败返回0</span><br><span class=\"line\"></span><br><span class=\"line\">persist key # 去掉过期时间</span><br><span class=\"line\"></span><br><span class=\"line\">monitor # 实时监控redis请求信息</span><br><span class=\"line\"></span><br><span class=\"line\">info # 查看节点信息</span><br></pre></td></tr></table></figure>\n<h3 id=\"缓存雪崩\"><a href=\"#缓存雪崩\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h3><p>某一个热点数据过期，一时间请求都到<br>了DB导致雪崩。</p>\n<p>解决：</p>\n<ul>\n<li>1.过期时间避开业务高峰期；</li>\n<li>2.热点数据不过期</li>\n</ul>\n<h3 id=\"缓存穿透\"><a href=\"#缓存穿透\" class=\"headerlink\" title=\"缓存穿透\"></a>缓存穿透</h3><p>接口的参数是redis不存在的，请求打到了DB，db也找不到，肉鸡疯狂发请求导致db崩溃。</p>\n<p>解决：</p>\n<ul>\n<li>ip黑名单和限流</li>\n<li>接口参数校验</li>\n</ul>\n<h3 id=\"缓存雪崩-1\"><a href=\"#缓存雪崩-1\" class=\"headerlink\" title=\"缓存雪崩\"></a>缓存雪崩</h3><p>多数key失效，请求到了db导致崩溃</p>\n<h3 id=\"淘汰策略\"><a href=\"#淘汰策略\" class=\"headerlink\" title=\"淘汰策略\"></a>淘汰策略</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">共8种策略。</span><br><span class=\"line\">- allkeys-lru  淘汰最少用的key(应用最广泛)</span><br><span class=\"line\">- no-enviction 禁止驱逐数据，内存满时写数据会报错，默认策略。</span><br></pre></td></tr></table></figure>\n<h3 id=\"删除策略\"><a href=\"#删除策略\" class=\"headerlink\" title=\"删除策略\"></a>删除策略</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 定时策略，设置key的同时设置时间</span><br><span class=\"line\">- 惰性删除，过期的key不清除，等访问的时候发现过期就删除。对cpu友好，但内存会累积。</span><br><span class=\"line\">- 定期删除，每隔100ms检查过期key删除</span><br><span class=\"line\"></span><br><span class=\"line\">一般是惰性加定期删除策略。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"持久化机制\"><a href=\"#持久化机制\" class=\"headerlink\" title=\"持久化机制\"></a>持久化机制</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- RDB 定时持久化</span><br><span class=\"line\">- AOF 实时持久化</span><br></pre></td></tr></table></figure>"},{"title":"第37期：操作系统&性能优化","date":"2023-05-25T04:19:49.000Z","_content":"##### 书籍\nhttps://pages.cs.wisc.edu/~remzi/OSTEP/Chinese/01.pdf\n\n#### 操作系统学习笔记\n学习方法：首先听课，做笔记，阅读笔记，巩固知识，实践\n\n##### 1.程序运行时发生了什么？\n```\n一个程序运行时在做什么？执行指令。cpu从内存get到一条指令，对其解码然后执行它，比如说两个数相加。完成指令后执行下一条，依此类推，直到程序完成。\n```\n\n问题：如何将硬件资源虚拟化？\n```\n通过操作系统实现，操作系统（也可称之为虚拟机）提供API，利用虚拟机的功能（如访问文件、内存、计算），让用户可以通过软件的形式告诉操作系统做什么。操作系统api称之为系统调用（system call），让应用程序调用。由于操作系统提供了这些调用来运行程序，访问内存、文件等资源，有时也会称操作系统提供了标准库(standard library)。\n```\n##### 2.虚拟化CPU\n虚拟化CPU有什么好处？\n```\n运行多个程序在一个单核cpu机器上，看起来有多个程序`同时`运行。实际上，cpu是在几个程序间不断地切换运行。\n\n可以通过接口的形式去暂停程序或查看程序。\n```\n##### 3.虚拟化内存\n物理内存的模式本质上是一个存满字节的数组。读内存就是读取某个位置上的地址，再读取地址上的值。\n\n再来说说程序运行发生了什么？\n```\n程序运行时，代码数据以某种数据结构被加载到内存，通过指令操作内存上的数据。\n```\n\n场景：当1套代码同时运行2个程序，程序运行的代码逻辑是：分配1个内存，打印其内存地址。结果两个程序打印出来的内存地址是一样的，那么它们是互相覆盖吗？\n\n不会，因为看到的内存地址是虚拟内存地址，映射到实际的物理内存地址是两个不同的地方。\n\n实际上，不同的程序是用到的资源是隔离、互不影响的。\n\n##### 4. 并发\n同一个主程序有两个线程在操纵同一个内存，会发生什么事？\n\n##### 5.持久性\n内存在断电或系统崩溃的时候会丢失数据。持久化数据，通过软件系统和硬件磁盘IO来实现。\n\n软件系统称之为文件系统(file system)。\n\n如何实现持久化数据到文件？\n- 调用open()创建和打开文件\n- write()写入文件\n- close()关闭文件\n\n注意：为防止写时系统崩溃或高效写入，文件系统有写时复制、写入特定数据结构(简单列表或复杂B树)。\n\n##### 6.操作系统的发展历史\n- 早期：只有一些库，操作人员排列任务进行批处理。\n- 为了安全性，如防止一些文件被访问，增加系统调用的概念，通过内核接口形式只暴露出特定硬件的能力，让用户态的应用程序只能有特定权限。\n- 多程序时代，操作系统不应该同时只跑一个任务\n\n##### 关于虚拟化的对话\n虚拟化cpu是抽象出来的概念，比如说有一个桃子，让每个人都看起来像是拥有一个“桃子”而不自知，这便是虚拟化的奥义所在。\n\n##### 7. 抽象：进程\n进程是在运行的程序。进程本身不具备生命周期，它只是磁盘上的一堆数据(字节)，是操作系统让程序真正运行起来。\n\ncpu虚拟化的假象是怎么做到的？\n```\n操作系统通过时分共享技术，允许进程使用一段时间cpu后，切换到另一个进程。操作系统还有不同的算法调度策略，例如哪个进程优先级高，哪个运行时间更长等。\n```\n\n进程的组成成分：\n```\n进程含有内存，内存用于存储代码指令，程序生成的数据也被写入内存，当然，进程也操纵文件系统当它用到文件的时候\n```\n\n与进程相关的系统调用：\n- create() 创建进程\n- destory() 销毁进程\n- status() 进程状态\n\n问：操作系统运行进程(程序)的细节？\n```\n操作系统将代码和静态文件加载到内存中，这个过程需要从磁盘读取字节。程序在运行前会分配运行时栈，用于存放局部变量等。程序运行时，在C语言需要显示分配动态内存堆（heap）用于存放产生的动态数据。\n\n数据结构（如链表、散列表、树和其他有趣的数据结构）需要堆。起初堆会很小。随着程序运行，通过 malloc()库 API 请求更多内存，操作系统可能会参与分配更多内存给进程，以满足这些调用。\n\n操作系统还将执行一些初始化任务，如为每个进程打开标准输入、标准输出、错误三个文件描述符（file descriptor）。\n\n做完初始化任务、分配stack内存这一系列任务后，开始启动进程，即运行main()。\n```\n\n进程状态\n- 运行（running） 进程在使用cpu，意味着cpu在执行指令\n- 就绪（ready） 进程准备好了，但由于某种原因，操作系统决定不在此时运行\n- 阻塞（blocked）进程执行了某种操作，直到发生某个时间才运行。如写文件到磁盘，它就会被阻塞，其他进程可以使用cpu\n\n##### 一、什么是性能问题？\n```\n突然有一天，公司开发在夜里打电话给你，“现在有很多用户说系统弹出一个错误，系统繁忙”之类的。\n开发同事一看接口返回500，看了后端日志好像没有特别明显的报错信息。\n\n这时，你赶忙上服务器看下nginx日志，好家伙，一看nginx日志发现后发现接口请求过了60s还没有响应。\n`top`看一下服务器资源，用户空间的cpu使用率100%，是哪些进程呢？php-fpm。里面发生了什么？我不知道啊？\n唉，重启服务能解决90%的问题，那就重启看看吧。果然，重启后用户反馈正常了。害，暂时是没有问题了，那下次再来一次怎么办？...无后续\n```\n\n看，cpu100%这类问题就归属性能问题。\n\n##### 研究性能问题需要学习操作系统主要组件原理\nCPU性能、内存、磁盘IO性能、网络\n\n衡量性能的指标：\n并发（吞吐）、响应快（时延）\n\n##### 二、CPU性能篇\n\n##### 什么是平均负载\n看一个例子：`uptime`\n```\n$ uptime\n02:34:03 up 2 days, 20:14,  1 user,  load average: 0.63, 0.83, 0.88\n```\n说明：\n- `02:34:03` 当前时间\n- `up 2 days, 20:14` 系统从开机后运行的时长\n- `1 user` 正在登录的用户数\n- `load average: 0.63, 0.83, 0.88` 最近1分钟、5分钟、15分钟的平均负载(Load average)\n\n`平均负载`是指单位时间内，系统处于可运行(Running或ready)和不可中断(blocked)的进程数。结合最近1分钟、5分钟、15分钟的平均负载，我们可以全面了解cpu的使用情况。像了解一天早中晚的气候变化。\n\nRunning是指正在使用cpu；Ready是指代码(指令)已经加载到了内存，等cpu来执行指令；\n\n不可中断是指进程在使用cpu，突然需要进行磁盘IO(读写)的长时间操作，先不用cpu，等IO操作完毕再回来使用cpu。\n\n一般而言，平均负载超过cpu核数70%就要检查cpu的使用情况，考虑是否优化。\n\n查看cpu核数\n```\ngrep 'model name' /proc/cpuinfo|wc -l\n```\n\n##### 什么是CPU使用率\ncpu使用率衡量了单位时间cpu的繁忙程度。\n\n对于I/O密集型进程，平均负载就高，但cpu却不繁忙，也就是cpu使用率不高。\n\n看一个例子：`top`\n```\n$ top\ntop - 11:15:27 up 40 days, 51 min,  1 user,  load average: 0.32, 0.27, 0.26\nTasks: 356 total,   1 running, 355 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  4.2 us,  5.6 sy,  0.0 ni, 90.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\nMiB Mem :   7777.8 total,    281.6 free,   4394.8 used,   3101.3 buff/cache\nMiB Swap:   2048.0 total,    580.2 free,   1467.8 used.   3015.1 avail Mem \n\n    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                                                                                                 \n3811294 root      20   0   15440   4540   3768 R  20.0   0.1   0:00.03 top                                                                                                                     \n    682 avahi     20   0   10524   5696   3120 S   6.7   0.1 110:29.16 avahi-daemon                                                                                                            \n   7726 root      20   0  750872  21192   5772 S   6.7   0.3 259:56.50 travel-api  \n```\n说明：\n- `%Cpu(s)` 比如说有4个cpu，%Cpu(s)代表这4个的平均使用率。\n\n  cpu = 用户空间使用率(us) + 内核空间使用率(sy) + 空闲(id)\n\n  `ni` 用户空间通过改变进程优先级占用的cpu百分比\n\n  `wa` 等待io操作占用的cpu百分比\n\n  `hi/si` 硬/软中断进行cpu上下文切换占用的百分比\n\n- `RES` 使用的真实物理内存（KB）\n- `%CPU` 一个cpu的使用率，毕竟一个进程只占用一个cpu\n- `TIME+` 累计使用cpu时间\n\n附top使用快捷键说明：\n- `shift + m` # 按照内存使用率排序，shift m 等价于大写M\n- `shift + p` # 按照cpu使用率排序\n- `c` # 显示命令全路径\n- `F` # 挑选你要选择展示的列，按下空格选中，* 代表会展示的列(列会出现在最后)，按q退出。\n    可以展示进程使用哪一个cpu\n- 按`1` # 展示每个cpu的使用情况\n\n#### 工具合集\n```\n# 压测\nab -c 100 -n 1000 http://192.168.0.10:10000/   # 一次并发100，共1000\n...\nRequests per second: 87.86 [#/sec] (mean)   # 平均每秒处理87个请求\nTime per request: 1138.229 [ms] (mean)     # 平均1个1.13秒\n...\n\n\n# 根据名称查看进程树\npstree | grep stress\n\n# 监视短时进程\nexecsnoop\n\n# 监视IO\ndstat 1 10 # 每隔1s输出，共10组，关注输出read和writ\npidstat -d -p 4344 1 3 # 指定进程的读写速率\nstrace -p 6082 # 追踪进程\n\n# 模拟网络SYN FLOOD 攻击\nhping3 -S -p 80 -i u100 192.168.0.30 \n说明：\n-S参数表示设置TCP协议的SYN（同步序列号）\n-i u100表示每隔100微秒发送一个网络帧\n\n# 网络\nyum install sysstat\nsar -n DEV 1 # -n DEV 表示显示网络收发的报告，间隔1秒输出一组数据\n\ntcpdump -i eth0 -n tcp port 80 # 抓包，-n不解析协议名和主机名\n\n# 列出cpu个数\nlscpu\n\n# 查看进程父子关系\nyum install -y psmisc\npstree -aps $pid\n\n# 资源优化\n应用角度：吞吐 & 延迟\n系统角度：cpu使用率\n\n# 内存\nfree\n说明：\n- available：未使用内存 + 可回收缓存\n- used：已使用内存，包含共享内存\n- cache/buff：cache是文件内存，buff是磁盘内存\ntop\n说明：\n- VIRT：虚拟内存，进程申请的但还未分配实际物理内存\n- RES: 实际占用的物理内存\n- SHR: 共享内存，一般是公共库、动态链接库\n- %MEM：物理内存占总内存百分比\n\n# 内存泄漏分析\nvmstat 3 # 实时查看内存变动\nyum install bcc\nmemleak -a -p $pid\n\n# Swap\nswapoff -a # 关闭\n\n# IO\ndf -i\n\niostat -d -x 1 # -d -x 显示所有磁盘指标\n说明：\n- r/s 每s向磁盘发送的读请求数\n- rkB/s 每s从磁盘读的数据量\n- %util IO使用量\n\n# 进程io使用情况\npidstat -d 1\n\n# 慢sql场景\n1.接口返回时间长；\nshow full processlist; # 查看所有会话连接\nexplain select * from products where productName='time';\n说明：\n- type为ALL代表全表查询\n- key为null代表无索引建立\n- rows代表扫描行数\n\nCREATE INDEX products_index ON products (productName); # 建立索引，类型为Nomal，products是表名，productName是字段。\n\nexplain select * from user where name=\"小明\"; # type为ref\n\n# 慢redis查询\n# redis持久化还是会用到磁盘\nstrace -f -T -tt -p 9085 # -f表示跟踪子进程和子线程，-T表示显示系统调用的时长，-tt表示显示跟踪时间；-e fdatasync 可以指定函数\n\n# 网络\n应用 - 提供统一接口\n表示 - 数据转换\n会话 - 维护通信连接\n传输 - 加表头成包进行传输\n网络 - 路由\n数据链路 - MAC寻址\n物理 - 物理网络传输帧\n\nMTU - 1500 规定包大小\n\nss -ltnp | head -n 3\n说明：\nRecv，Send-Q 接收(未被程序处理)和发送包队列(未被远端确认)，不为0代表包堆积\nstate有Listening和Established\n\n# 网络吞吐\nsar -n DEV 1\nethtool ens18 | grep Speed # 千兆网卡\n\n# 理解一台机器65536个端口\n对于客户端，确实受限；但对服务端，可以组合客户端ip+端口。\n\n# 测试某台机器tcp吞吐(带宽能力)\nyum install iperf3\n服务器1：iperf3 -s -i 1 -p 10000 # -s表示启动服务端，-i表示汇报间隔，-p表示监听端口\n\n# -c表示启动客户端，192.168.0.30为目标服务器的IP# -b表示目标带宽(单位是bits/s)# -t表示测试时间# -P表示并发数，-p表示目标服务器监听端口\n服务器2：iperf3 -c 192.168.0.30 -b 1G -t 15 -P 2 -p 10000\n\n回服务端看接口：SUM 行就是测试的汇总结果。receiver 表接收，Bandwidth是带宽。\n\n# 压测\nyum install -y httpd-tools\nab -c 1000 -n 10000 http://192.168.0.30/  # -c表示并发请求数为1000，-n表示总的请求数为10000\n说明：\nRequests per second # 平均每个请求花费时间\n第二个Time per request # 实际请求的响应时间 \n\n# 域名\nnslookup time.geekbang.org\n\ndig +trace @114.114.114.114 +nodnssec time.geekbang.org # +trace表示开启跟踪查询# +nodnssec表示禁止DNS安全扩展；@114.114.114.114指定使用的dns服务器\ndns流程查询说明：client(time.geekbang.org) -> 114.114.114.114(可能存在time.geekbang.org缓存) -> NS .org -> m.root-servers.net -> dns9.hichina.com -> ip返回114 DNS服务器。\n\n# 内网域名解析可以通过自建DNS服务器或配置/etc/hosts文件\n# 强制使用https好处：防止dns劫持\n# 抓包\ntcpdump -nn udp port 53 or host 35.190.27.188 \n说明：\n-nn ，表示不解析抓包中的域名（即不反向解析）、协议以及端口号。\nudp port 53 ，表示只显示 UDP 协议的端口号（包括源端口和目的端口）为 53 的包。\nhost 35.190.27.188 ，表示只显示 IP 地址（包括源地址和目的地址）为 35.190.27.188 的包。\nor 表 或\n\n第一条：\n36909+ 表示查询标识值，它也会出现在响应中，加号表示启用递归查询\nA? 表示查询 A 记录。\ngeektime.org. 表示待查询的域名。\n30 表示报文长度。\n\n第二条：\n则是从 114.114.114.114 发送回来的 DNS 响应—-域名 geektime.org. 的 A 记录值为 35.190.27.188。\n\n第三条和第四条，是 ICMP echo request 和 ICMP echo reply，响应包的时间戳 14:02:31.539667，减去请求包的时间戳 14:02:31.508164 ，就可以得到，这次 ICMP 所用时间为 30ms\n\n第5第6条：\n反向地址解析 PTR 请求，只有请求包，却没有应答包。ping -n 可禁止ptr解析。\n\n# tcpdump选项解析\n-A 以ASCII格式显示网络包(不指定则只显示头信息)\n-i 指定网口\n-nn 不反向解析\n-w 保存到文件，以.pcap后缀结尾\n\nhost 主机过滤\nport 端口过滤\ntcp 协议过滤\nand/or/not 逻辑表达\n\n# tcpdump输出格式\n时间戳 协议 源地址.源端口 > 目的地址.目的端口 网络包详细信息\ntcpdump -nn udp port 53 or host 35.190.27.188 -w ping.pcap\n\n# tcpdump & wireshark 抓包 tcp & http案例分析三次握手和四次挥手工作原理\ndig +short example.com93.184.216.34\ntcpdump -nn host 93.184.216.34 -w web.pcap\n\ncurl http://example.com\n\nwireshark中分析：\n由于 HTTP 基于 TCP，所以最先看到的三个包，分别是 TCP 三次握手的包。接下来，中间的才是 HTTP 请求和响应包，而最后的三个包，则是 TCP 连接断开时的三次挥手包。\n\n从菜单栏中，点击 Statistics -> Flow Graph，然后，在弹出的界面中的 Flow type 选择 TCP Flows，可以更清晰的看到，整个过程中 TCP 流的执行过程。\n\n之所以有三个包，是因为服务器端收到客户端的 FIN 后，服务器端同时也要关闭连接，这样就可以把 ACK 和 FIN 合并到一起发送，节省了一个包，变成了“三次挥手”。\n\n而通常情况下，服务器端收到客户端的 FIN 后，很可能还没发送完数据，所以就会先回复客户端一个 ACK 包。稍等一会儿，完成所有数据包的发送后，才会发送 FIN 包。这也就是四次挥手了。\n\n# HTTP分析工具：fiddler\n$ curl -s -w 'Http code: %{http_code}\\nTotal time:%{time_total}s\\n' -o /dev/null http://192.168.0.30/ # 获取状态码和时间\n\n# 模拟ddos攻击\nhping3 -S -p 80 -i u10 192.168.0.30 #  -S参数表示设置TCP协议的SYN（同步序列号），-p表示目的端口为80。-i u10表示每隔10微秒发送一个网络帧\n\ncurl -w 'Http code: %{http_code}\\nTotal time:%{time_total}s\\n' -o /dev/null --connect-timeout 10 http://192.168.0.30 # --connect-timeout表示连接超时时间\n\nsar -n DEV 1 # 观察收发情况\n\ntcpdump -i eth0 -n tcp port 80\n结果：Flags [S] 表示这是一个 SYN 包。大量的 SYN 包表明，这是一个 SYN Flood 攻击。即客户端构造大量的 SYN 包，请求建立 TCP 连接；而服务器收到包后，会向源 IP 发送 SYN+ACK 报文，并等待三次握手的最后一次 ACK 报文，直到超时。\n\nTCP 半开连接的方法，关键在于 SYN_RECEIVED 状态的连接。\nnetstat -n -p | grep SYN_REC # -n表示不解析名字，-p表示显示连接所属进程\n\niptables -I INPUT -s 192.168.0.2 -p tcp -j REJECT # 封ip\niptables -A INPUT -p tcp --syn -m limit --limit 1/s -j ACCEPT # 限制syn并发数为每秒1次\niptables -I INPUT -p tcp --dport 80 --syn -m recent --name SYN_FLOOD --update --seconds 60 --hitcount 10 -j REJECT # 限制单个IP在60秒新建立的连接数为10\n\n# 半开状态的连接数是有限制的\nsysctl net.ipv4.tcp_max_syn_backlog\n\nsysctl -w net.ipv4.tcp_max_syn_backlog=1024 # 增加半开连接容量\n\nsysctl -w net.ipv4.tcp_synack_retries=1 # 减少半开连接重试次数\n\n# 开启 SYN Cookies不维护半开连接状态\nsysctl -w net.ipv4.tcp_syncookies=1\n\n# 持久化保存\n$ cat /etc/sysctl.conf\nnet.ipv4.tcp_syncookies = 1\nnet.ipv4.tcp_synack_retries = 1\nnet.ipv4.tcp_max_syn_backlog = 1024\n\n# 基于一些服务端会禁用icmp，使用hping3 or traceroute 测试延迟\nhping3 -c 3 -S -p 80 baidu.com # -c表示发送3次请求，-S表示设置TCP SYN，-p表示端口号为80\n\ntraceroute --tcp -p 80 -n baidu.com  # --tcp表示使用TCP协议，-p表示端口号，-n表示不对结果中的IP地址执行反向域名解析\n\n# NAT\nSNAT(转换源ip，实现上网)\n192.168.0.2 -> 路由器（NAT网关）转换成公网ip：100.100.100.100 -> 百度\n\nDNAT(暴露内网服务)\nbaidu.com 发回响应包 -> 路由器 -> 公网ip替换成192.168.0.2 -> 192.168.0.2\n\n# NAT实现原理\nLinux 内核提供的 Netfilter ，具体可通过工具iptables或firewalld实现链配置。\n\n对SNAT: iptables -t nat -A POSTROUTING -s 192.168.0.0/16 -j MASQUERADE\n对DNAT: iptables -t nat -A PREROUTING -d 100.100.100.100 -j DNAT --to-destination 192.168.0.2\n\n# 在使用 iptables 配置 NAT 规则时，Linux 需要转发来自其他 IP 的网络包，需开启 Linux 的 IP 转发功能\n查看：sysctl net.ipv4.ip_forward\n开启：sysctl -w net.ipv4.ip_forward=1\n持久化保存：\ncat /etc/sysctl.conf | grep ip_forward\nnet.ipv4.ip_forward=1\n\n# 网络工具合集\nsar # 可查看网络接口、进程、IP地址吞吐量(BPS) \nnetstat或ss # 网络连接\nping或hping3 # 网络延迟\ntraceroute # 查看路由链路\nnslookup或dig # DNS解析\niptables # 防火墙或NAT\ntcpdump & wireshark # 抓包\n\n# 网络优化内核参数设置\n- 增大每个套接字的缓冲区大小 net.core.optmem_max；推荐81920\n- 增大套接字接收缓冲区大小 net.core.rmem_max 和发送缓冲区大小 net.core.wmem_max； 513920/513920\n\n# cat /proc/sys/net/ipv4/tcp_mem 查看配置\n#cat /proc/net/sockstat 查看当前tcp的统计\n#sysctl -w net.ipv4.tcp_mem=新配置 来增大\n```\n\n### mysql慢查询\n```\nshow variables like \"%long%\";   # 查看long_query_time慢查询时间，默认是10s，超过则被记为慢查询并记录到慢查询日志\n\nset global long_query_time=1;  # 设置时间，退出navicat重登即可看到生效\n\nshow variables like \"%slow%\"; # 慢查询slow_query_log是否开启\n\nset global slow_query_log='ON';  # 启动慢查询\n```\n### mysql表名大小写\n```\nshow variables like \"%case%\"; # lower_case_table_names为1表示大小写不敏感。\n```\n### mysql备份种类说明\n```\n1. 全量\n2. 增量\n3. 差异备份\n\n恢复组合：\n1.全量加增量\n    周一的全量+周二到周五之间全部增量，特点：步骤多，时间长。\n\n2.全量加差异\n    周一的全量加周五的差异备份。特点：步骤少，数据量少，时间短。\n```\n","source":"_posts/第37期：操作系统-性能优化.md","raw":"---\ntitle: 第37期：操作系统&性能优化\ndate: 2023-05-25 12:19:49\ntags:\n---\n##### 书籍\nhttps://pages.cs.wisc.edu/~remzi/OSTEP/Chinese/01.pdf\n\n#### 操作系统学习笔记\n学习方法：首先听课，做笔记，阅读笔记，巩固知识，实践\n\n##### 1.程序运行时发生了什么？\n```\n一个程序运行时在做什么？执行指令。cpu从内存get到一条指令，对其解码然后执行它，比如说两个数相加。完成指令后执行下一条，依此类推，直到程序完成。\n```\n\n问题：如何将硬件资源虚拟化？\n```\n通过操作系统实现，操作系统（也可称之为虚拟机）提供API，利用虚拟机的功能（如访问文件、内存、计算），让用户可以通过软件的形式告诉操作系统做什么。操作系统api称之为系统调用（system call），让应用程序调用。由于操作系统提供了这些调用来运行程序，访问内存、文件等资源，有时也会称操作系统提供了标准库(standard library)。\n```\n##### 2.虚拟化CPU\n虚拟化CPU有什么好处？\n```\n运行多个程序在一个单核cpu机器上，看起来有多个程序`同时`运行。实际上，cpu是在几个程序间不断地切换运行。\n\n可以通过接口的形式去暂停程序或查看程序。\n```\n##### 3.虚拟化内存\n物理内存的模式本质上是一个存满字节的数组。读内存就是读取某个位置上的地址，再读取地址上的值。\n\n再来说说程序运行发生了什么？\n```\n程序运行时，代码数据以某种数据结构被加载到内存，通过指令操作内存上的数据。\n```\n\n场景：当1套代码同时运行2个程序，程序运行的代码逻辑是：分配1个内存，打印其内存地址。结果两个程序打印出来的内存地址是一样的，那么它们是互相覆盖吗？\n\n不会，因为看到的内存地址是虚拟内存地址，映射到实际的物理内存地址是两个不同的地方。\n\n实际上，不同的程序是用到的资源是隔离、互不影响的。\n\n##### 4. 并发\n同一个主程序有两个线程在操纵同一个内存，会发生什么事？\n\n##### 5.持久性\n内存在断电或系统崩溃的时候会丢失数据。持久化数据，通过软件系统和硬件磁盘IO来实现。\n\n软件系统称之为文件系统(file system)。\n\n如何实现持久化数据到文件？\n- 调用open()创建和打开文件\n- write()写入文件\n- close()关闭文件\n\n注意：为防止写时系统崩溃或高效写入，文件系统有写时复制、写入特定数据结构(简单列表或复杂B树)。\n\n##### 6.操作系统的发展历史\n- 早期：只有一些库，操作人员排列任务进行批处理。\n- 为了安全性，如防止一些文件被访问，增加系统调用的概念，通过内核接口形式只暴露出特定硬件的能力，让用户态的应用程序只能有特定权限。\n- 多程序时代，操作系统不应该同时只跑一个任务\n\n##### 关于虚拟化的对话\n虚拟化cpu是抽象出来的概念，比如说有一个桃子，让每个人都看起来像是拥有一个“桃子”而不自知，这便是虚拟化的奥义所在。\n\n##### 7. 抽象：进程\n进程是在运行的程序。进程本身不具备生命周期，它只是磁盘上的一堆数据(字节)，是操作系统让程序真正运行起来。\n\ncpu虚拟化的假象是怎么做到的？\n```\n操作系统通过时分共享技术，允许进程使用一段时间cpu后，切换到另一个进程。操作系统还有不同的算法调度策略，例如哪个进程优先级高，哪个运行时间更长等。\n```\n\n进程的组成成分：\n```\n进程含有内存，内存用于存储代码指令，程序生成的数据也被写入内存，当然，进程也操纵文件系统当它用到文件的时候\n```\n\n与进程相关的系统调用：\n- create() 创建进程\n- destory() 销毁进程\n- status() 进程状态\n\n问：操作系统运行进程(程序)的细节？\n```\n操作系统将代码和静态文件加载到内存中，这个过程需要从磁盘读取字节。程序在运行前会分配运行时栈，用于存放局部变量等。程序运行时，在C语言需要显示分配动态内存堆（heap）用于存放产生的动态数据。\n\n数据结构（如链表、散列表、树和其他有趣的数据结构）需要堆。起初堆会很小。随着程序运行，通过 malloc()库 API 请求更多内存，操作系统可能会参与分配更多内存给进程，以满足这些调用。\n\n操作系统还将执行一些初始化任务，如为每个进程打开标准输入、标准输出、错误三个文件描述符（file descriptor）。\n\n做完初始化任务、分配stack内存这一系列任务后，开始启动进程，即运行main()。\n```\n\n进程状态\n- 运行（running） 进程在使用cpu，意味着cpu在执行指令\n- 就绪（ready） 进程准备好了，但由于某种原因，操作系统决定不在此时运行\n- 阻塞（blocked）进程执行了某种操作，直到发生某个时间才运行。如写文件到磁盘，它就会被阻塞，其他进程可以使用cpu\n\n##### 一、什么是性能问题？\n```\n突然有一天，公司开发在夜里打电话给你，“现在有很多用户说系统弹出一个错误，系统繁忙”之类的。\n开发同事一看接口返回500，看了后端日志好像没有特别明显的报错信息。\n\n这时，你赶忙上服务器看下nginx日志，好家伙，一看nginx日志发现后发现接口请求过了60s还没有响应。\n`top`看一下服务器资源，用户空间的cpu使用率100%，是哪些进程呢？php-fpm。里面发生了什么？我不知道啊？\n唉，重启服务能解决90%的问题，那就重启看看吧。果然，重启后用户反馈正常了。害，暂时是没有问题了，那下次再来一次怎么办？...无后续\n```\n\n看，cpu100%这类问题就归属性能问题。\n\n##### 研究性能问题需要学习操作系统主要组件原理\nCPU性能、内存、磁盘IO性能、网络\n\n衡量性能的指标：\n并发（吞吐）、响应快（时延）\n\n##### 二、CPU性能篇\n\n##### 什么是平均负载\n看一个例子：`uptime`\n```\n$ uptime\n02:34:03 up 2 days, 20:14,  1 user,  load average: 0.63, 0.83, 0.88\n```\n说明：\n- `02:34:03` 当前时间\n- `up 2 days, 20:14` 系统从开机后运行的时长\n- `1 user` 正在登录的用户数\n- `load average: 0.63, 0.83, 0.88` 最近1分钟、5分钟、15分钟的平均负载(Load average)\n\n`平均负载`是指单位时间内，系统处于可运行(Running或ready)和不可中断(blocked)的进程数。结合最近1分钟、5分钟、15分钟的平均负载，我们可以全面了解cpu的使用情况。像了解一天早中晚的气候变化。\n\nRunning是指正在使用cpu；Ready是指代码(指令)已经加载到了内存，等cpu来执行指令；\n\n不可中断是指进程在使用cpu，突然需要进行磁盘IO(读写)的长时间操作，先不用cpu，等IO操作完毕再回来使用cpu。\n\n一般而言，平均负载超过cpu核数70%就要检查cpu的使用情况，考虑是否优化。\n\n查看cpu核数\n```\ngrep 'model name' /proc/cpuinfo|wc -l\n```\n\n##### 什么是CPU使用率\ncpu使用率衡量了单位时间cpu的繁忙程度。\n\n对于I/O密集型进程，平均负载就高，但cpu却不繁忙，也就是cpu使用率不高。\n\n看一个例子：`top`\n```\n$ top\ntop - 11:15:27 up 40 days, 51 min,  1 user,  load average: 0.32, 0.27, 0.26\nTasks: 356 total,   1 running, 355 sleeping,   0 stopped,   0 zombie\n%Cpu(s):  4.2 us,  5.6 sy,  0.0 ni, 90.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st\nMiB Mem :   7777.8 total,    281.6 free,   4394.8 used,   3101.3 buff/cache\nMiB Swap:   2048.0 total,    580.2 free,   1467.8 used.   3015.1 avail Mem \n\n    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                                                                                                 \n3811294 root      20   0   15440   4540   3768 R  20.0   0.1   0:00.03 top                                                                                                                     \n    682 avahi     20   0   10524   5696   3120 S   6.7   0.1 110:29.16 avahi-daemon                                                                                                            \n   7726 root      20   0  750872  21192   5772 S   6.7   0.3 259:56.50 travel-api  \n```\n说明：\n- `%Cpu(s)` 比如说有4个cpu，%Cpu(s)代表这4个的平均使用率。\n\n  cpu = 用户空间使用率(us) + 内核空间使用率(sy) + 空闲(id)\n\n  `ni` 用户空间通过改变进程优先级占用的cpu百分比\n\n  `wa` 等待io操作占用的cpu百分比\n\n  `hi/si` 硬/软中断进行cpu上下文切换占用的百分比\n\n- `RES` 使用的真实物理内存（KB）\n- `%CPU` 一个cpu的使用率，毕竟一个进程只占用一个cpu\n- `TIME+` 累计使用cpu时间\n\n附top使用快捷键说明：\n- `shift + m` # 按照内存使用率排序，shift m 等价于大写M\n- `shift + p` # 按照cpu使用率排序\n- `c` # 显示命令全路径\n- `F` # 挑选你要选择展示的列，按下空格选中，* 代表会展示的列(列会出现在最后)，按q退出。\n    可以展示进程使用哪一个cpu\n- 按`1` # 展示每个cpu的使用情况\n\n#### 工具合集\n```\n# 压测\nab -c 100 -n 1000 http://192.168.0.10:10000/   # 一次并发100，共1000\n...\nRequests per second: 87.86 [#/sec] (mean)   # 平均每秒处理87个请求\nTime per request: 1138.229 [ms] (mean)     # 平均1个1.13秒\n...\n\n\n# 根据名称查看进程树\npstree | grep stress\n\n# 监视短时进程\nexecsnoop\n\n# 监视IO\ndstat 1 10 # 每隔1s输出，共10组，关注输出read和writ\npidstat -d -p 4344 1 3 # 指定进程的读写速率\nstrace -p 6082 # 追踪进程\n\n# 模拟网络SYN FLOOD 攻击\nhping3 -S -p 80 -i u100 192.168.0.30 \n说明：\n-S参数表示设置TCP协议的SYN（同步序列号）\n-i u100表示每隔100微秒发送一个网络帧\n\n# 网络\nyum install sysstat\nsar -n DEV 1 # -n DEV 表示显示网络收发的报告，间隔1秒输出一组数据\n\ntcpdump -i eth0 -n tcp port 80 # 抓包，-n不解析协议名和主机名\n\n# 列出cpu个数\nlscpu\n\n# 查看进程父子关系\nyum install -y psmisc\npstree -aps $pid\n\n# 资源优化\n应用角度：吞吐 & 延迟\n系统角度：cpu使用率\n\n# 内存\nfree\n说明：\n- available：未使用内存 + 可回收缓存\n- used：已使用内存，包含共享内存\n- cache/buff：cache是文件内存，buff是磁盘内存\ntop\n说明：\n- VIRT：虚拟内存，进程申请的但还未分配实际物理内存\n- RES: 实际占用的物理内存\n- SHR: 共享内存，一般是公共库、动态链接库\n- %MEM：物理内存占总内存百分比\n\n# 内存泄漏分析\nvmstat 3 # 实时查看内存变动\nyum install bcc\nmemleak -a -p $pid\n\n# Swap\nswapoff -a # 关闭\n\n# IO\ndf -i\n\niostat -d -x 1 # -d -x 显示所有磁盘指标\n说明：\n- r/s 每s向磁盘发送的读请求数\n- rkB/s 每s从磁盘读的数据量\n- %util IO使用量\n\n# 进程io使用情况\npidstat -d 1\n\n# 慢sql场景\n1.接口返回时间长；\nshow full processlist; # 查看所有会话连接\nexplain select * from products where productName='time';\n说明：\n- type为ALL代表全表查询\n- key为null代表无索引建立\n- rows代表扫描行数\n\nCREATE INDEX products_index ON products (productName); # 建立索引，类型为Nomal，products是表名，productName是字段。\n\nexplain select * from user where name=\"小明\"; # type为ref\n\n# 慢redis查询\n# redis持久化还是会用到磁盘\nstrace -f -T -tt -p 9085 # -f表示跟踪子进程和子线程，-T表示显示系统调用的时长，-tt表示显示跟踪时间；-e fdatasync 可以指定函数\n\n# 网络\n应用 - 提供统一接口\n表示 - 数据转换\n会话 - 维护通信连接\n传输 - 加表头成包进行传输\n网络 - 路由\n数据链路 - MAC寻址\n物理 - 物理网络传输帧\n\nMTU - 1500 规定包大小\n\nss -ltnp | head -n 3\n说明：\nRecv，Send-Q 接收(未被程序处理)和发送包队列(未被远端确认)，不为0代表包堆积\nstate有Listening和Established\n\n# 网络吞吐\nsar -n DEV 1\nethtool ens18 | grep Speed # 千兆网卡\n\n# 理解一台机器65536个端口\n对于客户端，确实受限；但对服务端，可以组合客户端ip+端口。\n\n# 测试某台机器tcp吞吐(带宽能力)\nyum install iperf3\n服务器1：iperf3 -s -i 1 -p 10000 # -s表示启动服务端，-i表示汇报间隔，-p表示监听端口\n\n# -c表示启动客户端，192.168.0.30为目标服务器的IP# -b表示目标带宽(单位是bits/s)# -t表示测试时间# -P表示并发数，-p表示目标服务器监听端口\n服务器2：iperf3 -c 192.168.0.30 -b 1G -t 15 -P 2 -p 10000\n\n回服务端看接口：SUM 行就是测试的汇总结果。receiver 表接收，Bandwidth是带宽。\n\n# 压测\nyum install -y httpd-tools\nab -c 1000 -n 10000 http://192.168.0.30/  # -c表示并发请求数为1000，-n表示总的请求数为10000\n说明：\nRequests per second # 平均每个请求花费时间\n第二个Time per request # 实际请求的响应时间 \n\n# 域名\nnslookup time.geekbang.org\n\ndig +trace @114.114.114.114 +nodnssec time.geekbang.org # +trace表示开启跟踪查询# +nodnssec表示禁止DNS安全扩展；@114.114.114.114指定使用的dns服务器\ndns流程查询说明：client(time.geekbang.org) -> 114.114.114.114(可能存在time.geekbang.org缓存) -> NS .org -> m.root-servers.net -> dns9.hichina.com -> ip返回114 DNS服务器。\n\n# 内网域名解析可以通过自建DNS服务器或配置/etc/hosts文件\n# 强制使用https好处：防止dns劫持\n# 抓包\ntcpdump -nn udp port 53 or host 35.190.27.188 \n说明：\n-nn ，表示不解析抓包中的域名（即不反向解析）、协议以及端口号。\nudp port 53 ，表示只显示 UDP 协议的端口号（包括源端口和目的端口）为 53 的包。\nhost 35.190.27.188 ，表示只显示 IP 地址（包括源地址和目的地址）为 35.190.27.188 的包。\nor 表 或\n\n第一条：\n36909+ 表示查询标识值，它也会出现在响应中，加号表示启用递归查询\nA? 表示查询 A 记录。\ngeektime.org. 表示待查询的域名。\n30 表示报文长度。\n\n第二条：\n则是从 114.114.114.114 发送回来的 DNS 响应—-域名 geektime.org. 的 A 记录值为 35.190.27.188。\n\n第三条和第四条，是 ICMP echo request 和 ICMP echo reply，响应包的时间戳 14:02:31.539667，减去请求包的时间戳 14:02:31.508164 ，就可以得到，这次 ICMP 所用时间为 30ms\n\n第5第6条：\n反向地址解析 PTR 请求，只有请求包，却没有应答包。ping -n 可禁止ptr解析。\n\n# tcpdump选项解析\n-A 以ASCII格式显示网络包(不指定则只显示头信息)\n-i 指定网口\n-nn 不反向解析\n-w 保存到文件，以.pcap后缀结尾\n\nhost 主机过滤\nport 端口过滤\ntcp 协议过滤\nand/or/not 逻辑表达\n\n# tcpdump输出格式\n时间戳 协议 源地址.源端口 > 目的地址.目的端口 网络包详细信息\ntcpdump -nn udp port 53 or host 35.190.27.188 -w ping.pcap\n\n# tcpdump & wireshark 抓包 tcp & http案例分析三次握手和四次挥手工作原理\ndig +short example.com93.184.216.34\ntcpdump -nn host 93.184.216.34 -w web.pcap\n\ncurl http://example.com\n\nwireshark中分析：\n由于 HTTP 基于 TCP，所以最先看到的三个包，分别是 TCP 三次握手的包。接下来，中间的才是 HTTP 请求和响应包，而最后的三个包，则是 TCP 连接断开时的三次挥手包。\n\n从菜单栏中，点击 Statistics -> Flow Graph，然后，在弹出的界面中的 Flow type 选择 TCP Flows，可以更清晰的看到，整个过程中 TCP 流的执行过程。\n\n之所以有三个包，是因为服务器端收到客户端的 FIN 后，服务器端同时也要关闭连接，这样就可以把 ACK 和 FIN 合并到一起发送，节省了一个包，变成了“三次挥手”。\n\n而通常情况下，服务器端收到客户端的 FIN 后，很可能还没发送完数据，所以就会先回复客户端一个 ACK 包。稍等一会儿，完成所有数据包的发送后，才会发送 FIN 包。这也就是四次挥手了。\n\n# HTTP分析工具：fiddler\n$ curl -s -w 'Http code: %{http_code}\\nTotal time:%{time_total}s\\n' -o /dev/null http://192.168.0.30/ # 获取状态码和时间\n\n# 模拟ddos攻击\nhping3 -S -p 80 -i u10 192.168.0.30 #  -S参数表示设置TCP协议的SYN（同步序列号），-p表示目的端口为80。-i u10表示每隔10微秒发送一个网络帧\n\ncurl -w 'Http code: %{http_code}\\nTotal time:%{time_total}s\\n' -o /dev/null --connect-timeout 10 http://192.168.0.30 # --connect-timeout表示连接超时时间\n\nsar -n DEV 1 # 观察收发情况\n\ntcpdump -i eth0 -n tcp port 80\n结果：Flags [S] 表示这是一个 SYN 包。大量的 SYN 包表明，这是一个 SYN Flood 攻击。即客户端构造大量的 SYN 包，请求建立 TCP 连接；而服务器收到包后，会向源 IP 发送 SYN+ACK 报文，并等待三次握手的最后一次 ACK 报文，直到超时。\n\nTCP 半开连接的方法，关键在于 SYN_RECEIVED 状态的连接。\nnetstat -n -p | grep SYN_REC # -n表示不解析名字，-p表示显示连接所属进程\n\niptables -I INPUT -s 192.168.0.2 -p tcp -j REJECT # 封ip\niptables -A INPUT -p tcp --syn -m limit --limit 1/s -j ACCEPT # 限制syn并发数为每秒1次\niptables -I INPUT -p tcp --dport 80 --syn -m recent --name SYN_FLOOD --update --seconds 60 --hitcount 10 -j REJECT # 限制单个IP在60秒新建立的连接数为10\n\n# 半开状态的连接数是有限制的\nsysctl net.ipv4.tcp_max_syn_backlog\n\nsysctl -w net.ipv4.tcp_max_syn_backlog=1024 # 增加半开连接容量\n\nsysctl -w net.ipv4.tcp_synack_retries=1 # 减少半开连接重试次数\n\n# 开启 SYN Cookies不维护半开连接状态\nsysctl -w net.ipv4.tcp_syncookies=1\n\n# 持久化保存\n$ cat /etc/sysctl.conf\nnet.ipv4.tcp_syncookies = 1\nnet.ipv4.tcp_synack_retries = 1\nnet.ipv4.tcp_max_syn_backlog = 1024\n\n# 基于一些服务端会禁用icmp，使用hping3 or traceroute 测试延迟\nhping3 -c 3 -S -p 80 baidu.com # -c表示发送3次请求，-S表示设置TCP SYN，-p表示端口号为80\n\ntraceroute --tcp -p 80 -n baidu.com  # --tcp表示使用TCP协议，-p表示端口号，-n表示不对结果中的IP地址执行反向域名解析\n\n# NAT\nSNAT(转换源ip，实现上网)\n192.168.0.2 -> 路由器（NAT网关）转换成公网ip：100.100.100.100 -> 百度\n\nDNAT(暴露内网服务)\nbaidu.com 发回响应包 -> 路由器 -> 公网ip替换成192.168.0.2 -> 192.168.0.2\n\n# NAT实现原理\nLinux 内核提供的 Netfilter ，具体可通过工具iptables或firewalld实现链配置。\n\n对SNAT: iptables -t nat -A POSTROUTING -s 192.168.0.0/16 -j MASQUERADE\n对DNAT: iptables -t nat -A PREROUTING -d 100.100.100.100 -j DNAT --to-destination 192.168.0.2\n\n# 在使用 iptables 配置 NAT 规则时，Linux 需要转发来自其他 IP 的网络包，需开启 Linux 的 IP 转发功能\n查看：sysctl net.ipv4.ip_forward\n开启：sysctl -w net.ipv4.ip_forward=1\n持久化保存：\ncat /etc/sysctl.conf | grep ip_forward\nnet.ipv4.ip_forward=1\n\n# 网络工具合集\nsar # 可查看网络接口、进程、IP地址吞吐量(BPS) \nnetstat或ss # 网络连接\nping或hping3 # 网络延迟\ntraceroute # 查看路由链路\nnslookup或dig # DNS解析\niptables # 防火墙或NAT\ntcpdump & wireshark # 抓包\n\n# 网络优化内核参数设置\n- 增大每个套接字的缓冲区大小 net.core.optmem_max；推荐81920\n- 增大套接字接收缓冲区大小 net.core.rmem_max 和发送缓冲区大小 net.core.wmem_max； 513920/513920\n\n# cat /proc/sys/net/ipv4/tcp_mem 查看配置\n#cat /proc/net/sockstat 查看当前tcp的统计\n#sysctl -w net.ipv4.tcp_mem=新配置 来增大\n```\n\n### mysql慢查询\n```\nshow variables like \"%long%\";   # 查看long_query_time慢查询时间，默认是10s，超过则被记为慢查询并记录到慢查询日志\n\nset global long_query_time=1;  # 设置时间，退出navicat重登即可看到生效\n\nshow variables like \"%slow%\"; # 慢查询slow_query_log是否开启\n\nset global slow_query_log='ON';  # 启动慢查询\n```\n### mysql表名大小写\n```\nshow variables like \"%case%\"; # lower_case_table_names为1表示大小写不敏感。\n```\n### mysql备份种类说明\n```\n1. 全量\n2. 增量\n3. 差异备份\n\n恢复组合：\n1.全量加增量\n    周一的全量+周二到周五之间全部增量，特点：步骤多，时间长。\n\n2.全量加差异\n    周一的全量加周五的差异备份。特点：步骤少，数据量少，时间短。\n```\n","slug":"第37期：操作系统-性能优化","published":1,"updated":"2024-03-06T06:55:18.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvtef000ubklnbt6k9dxi","content":"<h5 id=\"书籍\"><a href=\"#书籍\" class=\"headerlink\" title=\"书籍\"></a>书籍</h5><p><a href=\"https://pages.cs.wisc.edu/~remzi/OSTEP/Chinese/01.pdf\">https://pages.cs.wisc.edu/~remzi/OSTEP/Chinese/01.pdf</a></p>\n<h4 id=\"操作系统学习笔记\"><a href=\"#操作系统学习笔记\" class=\"headerlink\" title=\"操作系统学习笔记\"></a>操作系统学习笔记</h4><p>学习方法：首先听课，做笔记，阅读笔记，巩固知识，实践</p>\n<h5 id=\"1-程序运行时发生了什么？\"><a href=\"#1-程序运行时发生了什么？\" class=\"headerlink\" title=\"1.程序运行时发生了什么？\"></a>1.程序运行时发生了什么？</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个程序运行时在做什么？执行指令。cpu从内存get到一条指令，对其解码然后执行它，比如说两个数相加。完成指令后执行下一条，依此类推，直到程序完成。</span><br></pre></td></tr></table></figure>\n\n<p>问题：如何将硬件资源虚拟化？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通过操作系统实现，操作系统（也可称之为虚拟机）提供API，利用虚拟机的功能（如访问文件、内存、计算），让用户可以通过软件的形式告诉操作系统做什么。操作系统api称之为系统调用（system call），让应用程序调用。由于操作系统提供了这些调用来运行程序，访问内存、文件等资源，有时也会称操作系统提供了标准库(standard library)。</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-虚拟化CPU\"><a href=\"#2-虚拟化CPU\" class=\"headerlink\" title=\"2.虚拟化CPU\"></a>2.虚拟化CPU</h5><p>虚拟化CPU有什么好处？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行多个程序在一个单核cpu机器上，看起来有多个程序`同时`运行。实际上，cpu是在几个程序间不断地切换运行。</span><br><span class=\"line\"></span><br><span class=\"line\">可以通过接口的形式去暂停程序或查看程序。</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-虚拟化内存\"><a href=\"#3-虚拟化内存\" class=\"headerlink\" title=\"3.虚拟化内存\"></a>3.虚拟化内存</h5><p>物理内存的模式本质上是一个存满字节的数组。读内存就是读取某个位置上的地址，再读取地址上的值。</p>\n<p>再来说说程序运行发生了什么？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">程序运行时，代码数据以某种数据结构被加载到内存，通过指令操作内存上的数据。</span><br></pre></td></tr></table></figure>\n\n<p>场景：当1套代码同时运行2个程序，程序运行的代码逻辑是：分配1个内存，打印其内存地址。结果两个程序打印出来的内存地址是一样的，那么它们是互相覆盖吗？</p>\n<p>不会，因为看到的内存地址是虚拟内存地址，映射到实际的物理内存地址是两个不同的地方。</p>\n<p>实际上，不同的程序是用到的资源是隔离、互不影响的。</p>\n<h5 id=\"4-并发\"><a href=\"#4-并发\" class=\"headerlink\" title=\"4. 并发\"></a>4. 并发</h5><p>同一个主程序有两个线程在操纵同一个内存，会发生什么事？</p>\n<h5 id=\"5-持久性\"><a href=\"#5-持久性\" class=\"headerlink\" title=\"5.持久性\"></a>5.持久性</h5><p>内存在断电或系统崩溃的时候会丢失数据。持久化数据，通过软件系统和硬件磁盘IO来实现。</p>\n<p>软件系统称之为文件系统(file system)。</p>\n<p>如何实现持久化数据到文件？</p>\n<ul>\n<li>调用open()创建和打开文件</li>\n<li>write()写入文件</li>\n<li>close()关闭文件</li>\n</ul>\n<p>注意：为防止写时系统崩溃或高效写入，文件系统有写时复制、写入特定数据结构(简单列表或复杂B树)。</p>\n<h5 id=\"6-操作系统的发展历史\"><a href=\"#6-操作系统的发展历史\" class=\"headerlink\" title=\"6.操作系统的发展历史\"></a>6.操作系统的发展历史</h5><ul>\n<li>早期：只有一些库，操作人员排列任务进行批处理。</li>\n<li>为了安全性，如防止一些文件被访问，增加系统调用的概念，通过内核接口形式只暴露出特定硬件的能力，让用户态的应用程序只能有特定权限。</li>\n<li>多程序时代，操作系统不应该同时只跑一个任务</li>\n</ul>\n<h5 id=\"关于虚拟化的对话\"><a href=\"#关于虚拟化的对话\" class=\"headerlink\" title=\"关于虚拟化的对话\"></a>关于虚拟化的对话</h5><p>虚拟化cpu是抽象出来的概念，比如说有一个桃子，让每个人都看起来像是拥有一个“桃子”而不自知，这便是虚拟化的奥义所在。</p>\n<h5 id=\"7-抽象：进程\"><a href=\"#7-抽象：进程\" class=\"headerlink\" title=\"7. 抽象：进程\"></a>7. 抽象：进程</h5><p>进程是在运行的程序。进程本身不具备生命周期，它只是磁盘上的一堆数据(字节)，是操作系统让程序真正运行起来。</p>\n<p>cpu虚拟化的假象是怎么做到的？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">操作系统通过时分共享技术，允许进程使用一段时间cpu后，切换到另一个进程。操作系统还有不同的算法调度策略，例如哪个进程优先级高，哪个运行时间更长等。</span><br></pre></td></tr></table></figure>\n\n<p>进程的组成成分：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">进程含有内存，内存用于存储代码指令，程序生成的数据也被写入内存，当然，进程也操纵文件系统当它用到文件的时候</span><br></pre></td></tr></table></figure>\n\n<p>与进程相关的系统调用：</p>\n<ul>\n<li>create() 创建进程</li>\n<li>destory() 销毁进程</li>\n<li>status() 进程状态</li>\n</ul>\n<p>问：操作系统运行进程(程序)的细节？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">操作系统将代码和静态文件加载到内存中，这个过程需要从磁盘读取字节。程序在运行前会分配运行时栈，用于存放局部变量等。程序运行时，在C语言需要显示分配动态内存堆（heap）用于存放产生的动态数据。</span><br><span class=\"line\"></span><br><span class=\"line\">数据结构（如链表、散列表、树和其他有趣的数据结构）需要堆。起初堆会很小。随着程序运行，通过 malloc()库 API 请求更多内存，操作系统可能会参与分配更多内存给进程，以满足这些调用。</span><br><span class=\"line\"></span><br><span class=\"line\">操作系统还将执行一些初始化任务，如为每个进程打开标准输入、标准输出、错误三个文件描述符（file descriptor）。</span><br><span class=\"line\"></span><br><span class=\"line\">做完初始化任务、分配stack内存这一系列任务后，开始启动进程，即运行main()。</span><br></pre></td></tr></table></figure>\n\n<p>进程状态</p>\n<ul>\n<li>运行（running） 进程在使用cpu，意味着cpu在执行指令</li>\n<li>就绪（ready） 进程准备好了，但由于某种原因，操作系统决定不在此时运行</li>\n<li>阻塞（blocked）进程执行了某种操作，直到发生某个时间才运行。如写文件到磁盘，它就会被阻塞，其他进程可以使用cpu</li>\n</ul>\n<h5 id=\"一、什么是性能问题？\"><a href=\"#一、什么是性能问题？\" class=\"headerlink\" title=\"一、什么是性能问题？\"></a>一、什么是性能问题？</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">突然有一天，公司开发在夜里打电话给你，“现在有很多用户说系统弹出一个错误，系统繁忙”之类的。</span><br><span class=\"line\">开发同事一看接口返回500，看了后端日志好像没有特别明显的报错信息。</span><br><span class=\"line\"></span><br><span class=\"line\">这时，你赶忙上服务器看下nginx日志，好家伙，一看nginx日志发现后发现接口请求过了60s还没有响应。</span><br><span class=\"line\">`top`看一下服务器资源，用户空间的cpu使用率100%，是哪些进程呢？php-fpm。里面发生了什么？我不知道啊？</span><br><span class=\"line\">唉，重启服务能解决90%的问题，那就重启看看吧。果然，重启后用户反馈正常了。害，暂时是没有问题了，那下次再来一次怎么办？...无后续</span><br></pre></td></tr></table></figure>\n\n<p>看，cpu100%这类问题就归属性能问题。</p>\n<h5 id=\"研究性能问题需要学习操作系统主要组件原理\"><a href=\"#研究性能问题需要学习操作系统主要组件原理\" class=\"headerlink\" title=\"研究性能问题需要学习操作系统主要组件原理\"></a>研究性能问题需要学习操作系统主要组件原理</h5><p>CPU性能、内存、磁盘IO性能、网络</p>\n<p>衡量性能的指标：<br>并发（吞吐）、响应快（时延）</p>\n<h5 id=\"二、CPU性能篇\"><a href=\"#二、CPU性能篇\" class=\"headerlink\" title=\"二、CPU性能篇\"></a>二、CPU性能篇</h5><h5 id=\"什么是平均负载\"><a href=\"#什么是平均负载\" class=\"headerlink\" title=\"什么是平均负载\"></a>什么是平均负载</h5><p>看一个例子：<code>uptime</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ uptime</span><br><span class=\"line\">02:34:03 up 2 days, 20:14,  1 user,  load average: 0.63, 0.83, 0.88</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><code>02:34:03</code> 当前时间</li>\n<li><code>up 2 days, 20:14</code> 系统从开机后运行的时长</li>\n<li><code>1 user</code> 正在登录的用户数</li>\n<li><code>load average: 0.63, 0.83, 0.88</code> 最近1分钟、5分钟、15分钟的平均负载(Load average)</li>\n</ul>\n<p><code>平均负载</code>是指单位时间内，系统处于可运行(Running或ready)和不可中断(blocked)的进程数。结合最近1分钟、5分钟、15分钟的平均负载，我们可以全面了解cpu的使用情况。像了解一天早中晚的气候变化。</p>\n<p>Running是指正在使用cpu；Ready是指代码(指令)已经加载到了内存，等cpu来执行指令；</p>\n<p>不可中断是指进程在使用cpu，突然需要进行磁盘IO(读写)的长时间操作，先不用cpu，等IO操作完毕再回来使用cpu。</p>\n<p>一般而言，平均负载超过cpu核数70%就要检查cpu的使用情况，考虑是否优化。</p>\n<p>查看cpu核数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep &#x27;model name&#x27; /proc/cpuinfo|wc -l</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"什么是CPU使用率\"><a href=\"#什么是CPU使用率\" class=\"headerlink\" title=\"什么是CPU使用率\"></a>什么是CPU使用率</h5><p>cpu使用率衡量了单位时间cpu的繁忙程度。</p>\n<p>对于I&#x2F;O密集型进程，平均负载就高，但cpu却不繁忙，也就是cpu使用率不高。</p>\n<p>看一个例子：<code>top</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ top</span><br><span class=\"line\">top - 11:15:27 up 40 days, 51 min,  1 user,  load average: 0.32, 0.27, 0.26</span><br><span class=\"line\">Tasks: 356 total,   1 running, 355 sleeping,   0 stopped,   0 zombie</span><br><span class=\"line\">%Cpu(s):  4.2 us,  5.6 sy,  0.0 ni, 90.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class=\"line\">MiB Mem :   7777.8 total,    281.6 free,   4394.8 used,   3101.3 buff/cache</span><br><span class=\"line\">MiB Swap:   2048.0 total,    580.2 free,   1467.8 used.   3015.1 avail Mem </span><br><span class=\"line\"></span><br><span class=\"line\">    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                                                                                                 </span><br><span class=\"line\">3811294 root      20   0   15440   4540   3768 R  20.0   0.1   0:00.03 top                                                                                                                     </span><br><span class=\"line\">    682 avahi     20   0   10524   5696   3120 S   6.7   0.1 110:29.16 avahi-daemon                                                                                                            </span><br><span class=\"line\">   7726 root      20   0  750872  21192   5772 S   6.7   0.3 259:56.50 travel-api  </span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><p><code>%Cpu(s)</code> 比如说有4个cpu，%Cpu(s)代表这4个的平均使用率。</p>\n<p>cpu &#x3D; 用户空间使用率(us) + 内核空间使用率(sy) + 空闲(id)</p>\n<p><code>ni</code> 用户空间通过改变进程优先级占用的cpu百分比</p>\n<p><code>wa</code> 等待io操作占用的cpu百分比</p>\n<p><code>hi/si</code> 硬&#x2F;软中断进行cpu上下文切换占用的百分比</p>\n</li>\n<li><p><code>RES</code> 使用的真实物理内存（KB）</p>\n</li>\n<li><p><code>%CPU</code> 一个cpu的使用率，毕竟一个进程只占用一个cpu</p>\n</li>\n<li><p><code>TIME+</code> 累计使用cpu时间</p>\n</li>\n</ul>\n<p>附top使用快捷键说明：</p>\n<ul>\n<li><code>shift + m</code> # 按照内存使用率排序，shift m 等价于大写M</li>\n<li><code>shift + p</code> # 按照cpu使用率排序</li>\n<li><code>c</code> # 显示命令全路径</li>\n<li><code>F</code> # 挑选你要选择展示的列，按下空格选中，* 代表会展示的列(列会出现在最后)，按q退出。<br>  可以展示进程使用哪一个cpu</li>\n<li>按<code>1</code> # 展示每个cpu的使用情况</li>\n</ul>\n<h4 id=\"工具合集\"><a href=\"#工具合集\" class=\"headerlink\" title=\"工具合集\"></a>工具合集</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 压测</span><br><span class=\"line\">ab -c 100 -n 1000 http://192.168.0.10:10000/   # 一次并发100，共1000</span><br><span class=\"line\">...</span><br><span class=\"line\">Requests per second: 87.86 [#/sec] (mean)   # 平均每秒处理87个请求</span><br><span class=\"line\">Time per request: 1138.229 [ms] (mean)     # 平均1个1.13秒</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 根据名称查看进程树</span><br><span class=\"line\">pstree | grep stress</span><br><span class=\"line\"></span><br><span class=\"line\"># 监视短时进程</span><br><span class=\"line\">execsnoop</span><br><span class=\"line\"></span><br><span class=\"line\"># 监视IO</span><br><span class=\"line\">dstat 1 10 # 每隔1s输出，共10组，关注输出read和writ</span><br><span class=\"line\">pidstat -d -p 4344 1 3 # 指定进程的读写速率</span><br><span class=\"line\">strace -p 6082 # 追踪进程</span><br><span class=\"line\"></span><br><span class=\"line\"># 模拟网络SYN FLOOD 攻击</span><br><span class=\"line\">hping3 -S -p 80 -i u100 192.168.0.30 </span><br><span class=\"line\">说明：</span><br><span class=\"line\">-S参数表示设置TCP协议的SYN（同步序列号）</span><br><span class=\"line\">-i u100表示每隔100微秒发送一个网络帧</span><br><span class=\"line\"></span><br><span class=\"line\"># 网络</span><br><span class=\"line\">yum install sysstat</span><br><span class=\"line\">sar -n DEV 1 # -n DEV 表示显示网络收发的报告，间隔1秒输出一组数据</span><br><span class=\"line\"></span><br><span class=\"line\">tcpdump -i eth0 -n tcp port 80 # 抓包，-n不解析协议名和主机名</span><br><span class=\"line\"></span><br><span class=\"line\"># 列出cpu个数</span><br><span class=\"line\">lscpu</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看进程父子关系</span><br><span class=\"line\">yum install -y psmisc</span><br><span class=\"line\">pstree -aps $pid</span><br><span class=\"line\"></span><br><span class=\"line\"># 资源优化</span><br><span class=\"line\">应用角度：吞吐 &amp; 延迟</span><br><span class=\"line\">系统角度：cpu使用率</span><br><span class=\"line\"></span><br><span class=\"line\"># 内存</span><br><span class=\"line\">free</span><br><span class=\"line\">说明：</span><br><span class=\"line\">- available：未使用内存 + 可回收缓存</span><br><span class=\"line\">- used：已使用内存，包含共享内存</span><br><span class=\"line\">- cache/buff：cache是文件内存，buff是磁盘内存</span><br><span class=\"line\">top</span><br><span class=\"line\">说明：</span><br><span class=\"line\">- VIRT：虚拟内存，进程申请的但还未分配实际物理内存</span><br><span class=\"line\">- RES: 实际占用的物理内存</span><br><span class=\"line\">- SHR: 共享内存，一般是公共库、动态链接库</span><br><span class=\"line\">- %MEM：物理内存占总内存百分比</span><br><span class=\"line\"></span><br><span class=\"line\"># 内存泄漏分析</span><br><span class=\"line\">vmstat 3 # 实时查看内存变动</span><br><span class=\"line\">yum install bcc</span><br><span class=\"line\">memleak -a -p $pid</span><br><span class=\"line\"></span><br><span class=\"line\"># Swap</span><br><span class=\"line\">swapoff -a # 关闭</span><br><span class=\"line\"></span><br><span class=\"line\"># IO</span><br><span class=\"line\">df -i</span><br><span class=\"line\"></span><br><span class=\"line\">iostat -d -x 1 # -d -x 显示所有磁盘指标</span><br><span class=\"line\">说明：</span><br><span class=\"line\">- r/s 每s向磁盘发送的读请求数</span><br><span class=\"line\">- rkB/s 每s从磁盘读的数据量</span><br><span class=\"line\">- %util IO使用量</span><br><span class=\"line\"></span><br><span class=\"line\"># 进程io使用情况</span><br><span class=\"line\">pidstat -d 1</span><br><span class=\"line\"></span><br><span class=\"line\"># 慢sql场景</span><br><span class=\"line\">1.接口返回时间长；</span><br><span class=\"line\">show full processlist; # 查看所有会话连接</span><br><span class=\"line\">explain select * from products where productName=&#x27;time&#x27;;</span><br><span class=\"line\">说明：</span><br><span class=\"line\">- type为ALL代表全表查询</span><br><span class=\"line\">- key为null代表无索引建立</span><br><span class=\"line\">- rows代表扫描行数</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE INDEX products_index ON products (productName); # 建立索引，类型为Nomal，products是表名，productName是字段。</span><br><span class=\"line\"></span><br><span class=\"line\">explain select * from user where name=&quot;小明&quot;; # type为ref</span><br><span class=\"line\"></span><br><span class=\"line\"># 慢redis查询</span><br><span class=\"line\"># redis持久化还是会用到磁盘</span><br><span class=\"line\">strace -f -T -tt -p 9085 # -f表示跟踪子进程和子线程，-T表示显示系统调用的时长，-tt表示显示跟踪时间；-e fdatasync 可以指定函数</span><br><span class=\"line\"></span><br><span class=\"line\"># 网络</span><br><span class=\"line\">应用 - 提供统一接口</span><br><span class=\"line\">表示 - 数据转换</span><br><span class=\"line\">会话 - 维护通信连接</span><br><span class=\"line\">传输 - 加表头成包进行传输</span><br><span class=\"line\">网络 - 路由</span><br><span class=\"line\">数据链路 - MAC寻址</span><br><span class=\"line\">物理 - 物理网络传输帧</span><br><span class=\"line\"></span><br><span class=\"line\">MTU - 1500 规定包大小</span><br><span class=\"line\"></span><br><span class=\"line\">ss -ltnp | head -n 3</span><br><span class=\"line\">说明：</span><br><span class=\"line\">Recv，Send-Q 接收(未被程序处理)和发送包队列(未被远端确认)，不为0代表包堆积</span><br><span class=\"line\">state有Listening和Established</span><br><span class=\"line\"></span><br><span class=\"line\"># 网络吞吐</span><br><span class=\"line\">sar -n DEV 1</span><br><span class=\"line\">ethtool ens18 | grep Speed # 千兆网卡</span><br><span class=\"line\"></span><br><span class=\"line\"># 理解一台机器65536个端口</span><br><span class=\"line\">对于客户端，确实受限；但对服务端，可以组合客户端ip+端口。</span><br><span class=\"line\"></span><br><span class=\"line\"># 测试某台机器tcp吞吐(带宽能力)</span><br><span class=\"line\">yum install iperf3</span><br><span class=\"line\">服务器1：iperf3 -s -i 1 -p 10000 # -s表示启动服务端，-i表示汇报间隔，-p表示监听端口</span><br><span class=\"line\"></span><br><span class=\"line\"># -c表示启动客户端，192.168.0.30为目标服务器的IP# -b表示目标带宽(单位是bits/s)# -t表示测试时间# -P表示并发数，-p表示目标服务器监听端口</span><br><span class=\"line\">服务器2：iperf3 -c 192.168.0.30 -b 1G -t 15 -P 2 -p 10000</span><br><span class=\"line\"></span><br><span class=\"line\">回服务端看接口：SUM 行就是测试的汇总结果。receiver 表接收，Bandwidth是带宽。</span><br><span class=\"line\"></span><br><span class=\"line\"># 压测</span><br><span class=\"line\">yum install -y httpd-tools</span><br><span class=\"line\">ab -c 1000 -n 10000 http://192.168.0.30/  # -c表示并发请求数为1000，-n表示总的请求数为10000</span><br><span class=\"line\">说明：</span><br><span class=\"line\">Requests per second # 平均每个请求花费时间</span><br><span class=\"line\">第二个Time per request # 实际请求的响应时间 </span><br><span class=\"line\"></span><br><span class=\"line\"># 域名</span><br><span class=\"line\">nslookup time.geekbang.org</span><br><span class=\"line\"></span><br><span class=\"line\">dig +trace @114.114.114.114 +nodnssec time.geekbang.org # +trace表示开启跟踪查询# +nodnssec表示禁止DNS安全扩展；@114.114.114.114指定使用的dns服务器</span><br><span class=\"line\">dns流程查询说明：client(time.geekbang.org) -&gt; 114.114.114.114(可能存在time.geekbang.org缓存) -&gt; NS .org -&gt; m.root-servers.net -&gt; dns9.hichina.com -&gt; ip返回114 DNS服务器。</span><br><span class=\"line\"></span><br><span class=\"line\"># 内网域名解析可以通过自建DNS服务器或配置/etc/hosts文件</span><br><span class=\"line\"># 强制使用https好处：防止dns劫持</span><br><span class=\"line\"># 抓包</span><br><span class=\"line\">tcpdump -nn udp port 53 or host 35.190.27.188 </span><br><span class=\"line\">说明：</span><br><span class=\"line\">-nn ，表示不解析抓包中的域名（即不反向解析）、协议以及端口号。</span><br><span class=\"line\">udp port 53 ，表示只显示 UDP 协议的端口号（包括源端口和目的端口）为 53 的包。</span><br><span class=\"line\">host 35.190.27.188 ，表示只显示 IP 地址（包括源地址和目的地址）为 35.190.27.188 的包。</span><br><span class=\"line\">or 表 或</span><br><span class=\"line\"></span><br><span class=\"line\">第一条：</span><br><span class=\"line\">36909+ 表示查询标识值，它也会出现在响应中，加号表示启用递归查询</span><br><span class=\"line\">A? 表示查询 A 记录。</span><br><span class=\"line\">geektime.org. 表示待查询的域名。</span><br><span class=\"line\">30 表示报文长度。</span><br><span class=\"line\"></span><br><span class=\"line\">第二条：</span><br><span class=\"line\">则是从 114.114.114.114 发送回来的 DNS 响应—-域名 geektime.org. 的 A 记录值为 35.190.27.188。</span><br><span class=\"line\"></span><br><span class=\"line\">第三条和第四条，是 ICMP echo request 和 ICMP echo reply，响应包的时间戳 14:02:31.539667，减去请求包的时间戳 14:02:31.508164 ，就可以得到，这次 ICMP 所用时间为 30ms</span><br><span class=\"line\"></span><br><span class=\"line\">第5第6条：</span><br><span class=\"line\">反向地址解析 PTR 请求，只有请求包，却没有应答包。ping -n 可禁止ptr解析。</span><br><span class=\"line\"></span><br><span class=\"line\"># tcpdump选项解析</span><br><span class=\"line\">-A 以ASCII格式显示网络包(不指定则只显示头信息)</span><br><span class=\"line\">-i 指定网口</span><br><span class=\"line\">-nn 不反向解析</span><br><span class=\"line\">-w 保存到文件，以.pcap后缀结尾</span><br><span class=\"line\"></span><br><span class=\"line\">host 主机过滤</span><br><span class=\"line\">port 端口过滤</span><br><span class=\"line\">tcp 协议过滤</span><br><span class=\"line\">and/or/not 逻辑表达</span><br><span class=\"line\"></span><br><span class=\"line\"># tcpdump输出格式</span><br><span class=\"line\">时间戳 协议 源地址.源端口 &gt; 目的地址.目的端口 网络包详细信息</span><br><span class=\"line\">tcpdump -nn udp port 53 or host 35.190.27.188 -w ping.pcap</span><br><span class=\"line\"></span><br><span class=\"line\"># tcpdump &amp; wireshark 抓包 tcp &amp; http案例分析三次握手和四次挥手工作原理</span><br><span class=\"line\">dig +short example.com93.184.216.34</span><br><span class=\"line\">tcpdump -nn host 93.184.216.34 -w web.pcap</span><br><span class=\"line\"></span><br><span class=\"line\">curl http://example.com</span><br><span class=\"line\"></span><br><span class=\"line\">wireshark中分析：</span><br><span class=\"line\">由于 HTTP 基于 TCP，所以最先看到的三个包，分别是 TCP 三次握手的包。接下来，中间的才是 HTTP 请求和响应包，而最后的三个包，则是 TCP 连接断开时的三次挥手包。</span><br><span class=\"line\"></span><br><span class=\"line\">从菜单栏中，点击 Statistics -&gt; Flow Graph，然后，在弹出的界面中的 Flow type 选择 TCP Flows，可以更清晰的看到，整个过程中 TCP 流的执行过程。</span><br><span class=\"line\"></span><br><span class=\"line\">之所以有三个包，是因为服务器端收到客户端的 FIN 后，服务器端同时也要关闭连接，这样就可以把 ACK 和 FIN 合并到一起发送，节省了一个包，变成了“三次挥手”。</span><br><span class=\"line\"></span><br><span class=\"line\">而通常情况下，服务器端收到客户端的 FIN 后，很可能还没发送完数据，所以就会先回复客户端一个 ACK 包。稍等一会儿，完成所有数据包的发送后，才会发送 FIN 包。这也就是四次挥手了。</span><br><span class=\"line\"></span><br><span class=\"line\"># HTTP分析工具：fiddler</span><br><span class=\"line\">$ curl -s -w &#x27;Http code: %&#123;http_code&#125;\\nTotal time:%&#123;time_total&#125;s\\n&#x27; -o /dev/null http://192.168.0.30/ # 获取状态码和时间</span><br><span class=\"line\"></span><br><span class=\"line\"># 模拟ddos攻击</span><br><span class=\"line\">hping3 -S -p 80 -i u10 192.168.0.30 #  -S参数表示设置TCP协议的SYN（同步序列号），-p表示目的端口为80。-i u10表示每隔10微秒发送一个网络帧</span><br><span class=\"line\"></span><br><span class=\"line\">curl -w &#x27;Http code: %&#123;http_code&#125;\\nTotal time:%&#123;time_total&#125;s\\n&#x27; -o /dev/null --connect-timeout 10 http://192.168.0.30 # --connect-timeout表示连接超时时间</span><br><span class=\"line\"></span><br><span class=\"line\">sar -n DEV 1 # 观察收发情况</span><br><span class=\"line\"></span><br><span class=\"line\">tcpdump -i eth0 -n tcp port 80</span><br><span class=\"line\">结果：Flags [S] 表示这是一个 SYN 包。大量的 SYN 包表明，这是一个 SYN Flood 攻击。即客户端构造大量的 SYN 包，请求建立 TCP 连接；而服务器收到包后，会向源 IP 发送 SYN+ACK 报文，并等待三次握手的最后一次 ACK 报文，直到超时。</span><br><span class=\"line\"></span><br><span class=\"line\">TCP 半开连接的方法，关键在于 SYN_RECEIVED 状态的连接。</span><br><span class=\"line\">netstat -n -p | grep SYN_REC # -n表示不解析名字，-p表示显示连接所属进程</span><br><span class=\"line\"></span><br><span class=\"line\">iptables -I INPUT -s 192.168.0.2 -p tcp -j REJECT # 封ip</span><br><span class=\"line\">iptables -A INPUT -p tcp --syn -m limit --limit 1/s -j ACCEPT # 限制syn并发数为每秒1次</span><br><span class=\"line\">iptables -I INPUT -p tcp --dport 80 --syn -m recent --name SYN_FLOOD --update --seconds 60 --hitcount 10 -j REJECT # 限制单个IP在60秒新建立的连接数为10</span><br><span class=\"line\"></span><br><span class=\"line\"># 半开状态的连接数是有限制的</span><br><span class=\"line\">sysctl net.ipv4.tcp_max_syn_backlog</span><br><span class=\"line\"></span><br><span class=\"line\">sysctl -w net.ipv4.tcp_max_syn_backlog=1024 # 增加半开连接容量</span><br><span class=\"line\"></span><br><span class=\"line\">sysctl -w net.ipv4.tcp_synack_retries=1 # 减少半开连接重试次数</span><br><span class=\"line\"></span><br><span class=\"line\"># 开启 SYN Cookies不维护半开连接状态</span><br><span class=\"line\">sysctl -w net.ipv4.tcp_syncookies=1</span><br><span class=\"line\"></span><br><span class=\"line\"># 持久化保存</span><br><span class=\"line\">$ cat /etc/sysctl.conf</span><br><span class=\"line\">net.ipv4.tcp_syncookies = 1</span><br><span class=\"line\">net.ipv4.tcp_synack_retries = 1</span><br><span class=\"line\">net.ipv4.tcp_max_syn_backlog = 1024</span><br><span class=\"line\"></span><br><span class=\"line\"># 基于一些服务端会禁用icmp，使用hping3 or traceroute 测试延迟</span><br><span class=\"line\">hping3 -c 3 -S -p 80 baidu.com # -c表示发送3次请求，-S表示设置TCP SYN，-p表示端口号为80</span><br><span class=\"line\"></span><br><span class=\"line\">traceroute --tcp -p 80 -n baidu.com  # --tcp表示使用TCP协议，-p表示端口号，-n表示不对结果中的IP地址执行反向域名解析</span><br><span class=\"line\"></span><br><span class=\"line\"># NAT</span><br><span class=\"line\">SNAT(转换源ip，实现上网)</span><br><span class=\"line\">192.168.0.2 -&gt; 路由器（NAT网关）转换成公网ip：100.100.100.100 -&gt; 百度</span><br><span class=\"line\"></span><br><span class=\"line\">DNAT(暴露内网服务)</span><br><span class=\"line\">baidu.com 发回响应包 -&gt; 路由器 -&gt; 公网ip替换成192.168.0.2 -&gt; 192.168.0.2</span><br><span class=\"line\"></span><br><span class=\"line\"># NAT实现原理</span><br><span class=\"line\">Linux 内核提供的 Netfilter ，具体可通过工具iptables或firewalld实现链配置。</span><br><span class=\"line\"></span><br><span class=\"line\">对SNAT: iptables -t nat -A POSTROUTING -s 192.168.0.0/16 -j MASQUERADE</span><br><span class=\"line\">对DNAT: iptables -t nat -A PREROUTING -d 100.100.100.100 -j DNAT --to-destination 192.168.0.2</span><br><span class=\"line\"></span><br><span class=\"line\"># 在使用 iptables 配置 NAT 规则时，Linux 需要转发来自其他 IP 的网络包，需开启 Linux 的 IP 转发功能</span><br><span class=\"line\">查看：sysctl net.ipv4.ip_forward</span><br><span class=\"line\">开启：sysctl -w net.ipv4.ip_forward=1</span><br><span class=\"line\">持久化保存：</span><br><span class=\"line\">cat /etc/sysctl.conf | grep ip_forward</span><br><span class=\"line\">net.ipv4.ip_forward=1</span><br><span class=\"line\"></span><br><span class=\"line\"># 网络工具合集</span><br><span class=\"line\">sar # 可查看网络接口、进程、IP地址吞吐量(BPS) </span><br><span class=\"line\">netstat或ss # 网络连接</span><br><span class=\"line\">ping或hping3 # 网络延迟</span><br><span class=\"line\">traceroute # 查看路由链路</span><br><span class=\"line\">nslookup或dig # DNS解析</span><br><span class=\"line\">iptables # 防火墙或NAT</span><br><span class=\"line\">tcpdump &amp; wireshark # 抓包</span><br><span class=\"line\"></span><br><span class=\"line\"># 网络优化内核参数设置</span><br><span class=\"line\">- 增大每个套接字的缓冲区大小 net.core.optmem_max；推荐81920</span><br><span class=\"line\">- 增大套接字接收缓冲区大小 net.core.rmem_max 和发送缓冲区大小 net.core.wmem_max； 513920/513920</span><br><span class=\"line\"></span><br><span class=\"line\"># cat /proc/sys/net/ipv4/tcp_mem 查看配置</span><br><span class=\"line\">#cat /proc/net/sockstat 查看当前tcp的统计</span><br><span class=\"line\">#sysctl -w net.ipv4.tcp_mem=新配置 来增大</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mysql慢查询\"><a href=\"#mysql慢查询\" class=\"headerlink\" title=\"mysql慢查询\"></a>mysql慢查询</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show variables like &quot;%long%&quot;;   # 查看long_query_time慢查询时间，默认是10s，超过则被记为慢查询并记录到慢查询日志</span><br><span class=\"line\"></span><br><span class=\"line\">set global long_query_time=1;  # 设置时间，退出navicat重登即可看到生效</span><br><span class=\"line\"></span><br><span class=\"line\">show variables like &quot;%slow%&quot;; # 慢查询slow_query_log是否开启</span><br><span class=\"line\"></span><br><span class=\"line\">set global slow_query_log=&#x27;ON&#x27;;  # 启动慢查询</span><br></pre></td></tr></table></figure>\n<h3 id=\"mysql表名大小写\"><a href=\"#mysql表名大小写\" class=\"headerlink\" title=\"mysql表名大小写\"></a>mysql表名大小写</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show variables like &quot;%case%&quot;; # lower_case_table_names为1表示大小写不敏感。</span><br></pre></td></tr></table></figure>\n<h3 id=\"mysql备份种类说明\"><a href=\"#mysql备份种类说明\" class=\"headerlink\" title=\"mysql备份种类说明\"></a>mysql备份种类说明</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 全量</span><br><span class=\"line\">2. 增量</span><br><span class=\"line\">3. 差异备份</span><br><span class=\"line\"></span><br><span class=\"line\">恢复组合：</span><br><span class=\"line\">1.全量加增量</span><br><span class=\"line\">    周一的全量+周二到周五之间全部增量，特点：步骤多，时间长。</span><br><span class=\"line\"></span><br><span class=\"line\">2.全量加差异</span><br><span class=\"line\">    周一的全量加周五的差异备份。特点：步骤少，数据量少，时间短。</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h5 id=\"书籍\"><a href=\"#书籍\" class=\"headerlink\" title=\"书籍\"></a>书籍</h5><p><a href=\"https://pages.cs.wisc.edu/~remzi/OSTEP/Chinese/01.pdf\">https://pages.cs.wisc.edu/~remzi/OSTEP/Chinese/01.pdf</a></p>\n<h4 id=\"操作系统学习笔记\"><a href=\"#操作系统学习笔记\" class=\"headerlink\" title=\"操作系统学习笔记\"></a>操作系统学习笔记</h4><p>学习方法：首先听课，做笔记，阅读笔记，巩固知识，实践</p>\n<h5 id=\"1-程序运行时发生了什么？\"><a href=\"#1-程序运行时发生了什么？\" class=\"headerlink\" title=\"1.程序运行时发生了什么？\"></a>1.程序运行时发生了什么？</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">一个程序运行时在做什么？执行指令。cpu从内存get到一条指令，对其解码然后执行它，比如说两个数相加。完成指令后执行下一条，依此类推，直到程序完成。</span><br></pre></td></tr></table></figure>\n\n<p>问题：如何将硬件资源虚拟化？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">通过操作系统实现，操作系统（也可称之为虚拟机）提供API，利用虚拟机的功能（如访问文件、内存、计算），让用户可以通过软件的形式告诉操作系统做什么。操作系统api称之为系统调用（system call），让应用程序调用。由于操作系统提供了这些调用来运行程序，访问内存、文件等资源，有时也会称操作系统提供了标准库(standard library)。</span><br></pre></td></tr></table></figure>\n<h5 id=\"2-虚拟化CPU\"><a href=\"#2-虚拟化CPU\" class=\"headerlink\" title=\"2.虚拟化CPU\"></a>2.虚拟化CPU</h5><p>虚拟化CPU有什么好处？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行多个程序在一个单核cpu机器上，看起来有多个程序`同时`运行。实际上，cpu是在几个程序间不断地切换运行。</span><br><span class=\"line\"></span><br><span class=\"line\">可以通过接口的形式去暂停程序或查看程序。</span><br></pre></td></tr></table></figure>\n<h5 id=\"3-虚拟化内存\"><a href=\"#3-虚拟化内存\" class=\"headerlink\" title=\"3.虚拟化内存\"></a>3.虚拟化内存</h5><p>物理内存的模式本质上是一个存满字节的数组。读内存就是读取某个位置上的地址，再读取地址上的值。</p>\n<p>再来说说程序运行发生了什么？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">程序运行时，代码数据以某种数据结构被加载到内存，通过指令操作内存上的数据。</span><br></pre></td></tr></table></figure>\n\n<p>场景：当1套代码同时运行2个程序，程序运行的代码逻辑是：分配1个内存，打印其内存地址。结果两个程序打印出来的内存地址是一样的，那么它们是互相覆盖吗？</p>\n<p>不会，因为看到的内存地址是虚拟内存地址，映射到实际的物理内存地址是两个不同的地方。</p>\n<p>实际上，不同的程序是用到的资源是隔离、互不影响的。</p>\n<h5 id=\"4-并发\"><a href=\"#4-并发\" class=\"headerlink\" title=\"4. 并发\"></a>4. 并发</h5><p>同一个主程序有两个线程在操纵同一个内存，会发生什么事？</p>\n<h5 id=\"5-持久性\"><a href=\"#5-持久性\" class=\"headerlink\" title=\"5.持久性\"></a>5.持久性</h5><p>内存在断电或系统崩溃的时候会丢失数据。持久化数据，通过软件系统和硬件磁盘IO来实现。</p>\n<p>软件系统称之为文件系统(file system)。</p>\n<p>如何实现持久化数据到文件？</p>\n<ul>\n<li>调用open()创建和打开文件</li>\n<li>write()写入文件</li>\n<li>close()关闭文件</li>\n</ul>\n<p>注意：为防止写时系统崩溃或高效写入，文件系统有写时复制、写入特定数据结构(简单列表或复杂B树)。</p>\n<h5 id=\"6-操作系统的发展历史\"><a href=\"#6-操作系统的发展历史\" class=\"headerlink\" title=\"6.操作系统的发展历史\"></a>6.操作系统的发展历史</h5><ul>\n<li>早期：只有一些库，操作人员排列任务进行批处理。</li>\n<li>为了安全性，如防止一些文件被访问，增加系统调用的概念，通过内核接口形式只暴露出特定硬件的能力，让用户态的应用程序只能有特定权限。</li>\n<li>多程序时代，操作系统不应该同时只跑一个任务</li>\n</ul>\n<h5 id=\"关于虚拟化的对话\"><a href=\"#关于虚拟化的对话\" class=\"headerlink\" title=\"关于虚拟化的对话\"></a>关于虚拟化的对话</h5><p>虚拟化cpu是抽象出来的概念，比如说有一个桃子，让每个人都看起来像是拥有一个“桃子”而不自知，这便是虚拟化的奥义所在。</p>\n<h5 id=\"7-抽象：进程\"><a href=\"#7-抽象：进程\" class=\"headerlink\" title=\"7. 抽象：进程\"></a>7. 抽象：进程</h5><p>进程是在运行的程序。进程本身不具备生命周期，它只是磁盘上的一堆数据(字节)，是操作系统让程序真正运行起来。</p>\n<p>cpu虚拟化的假象是怎么做到的？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">操作系统通过时分共享技术，允许进程使用一段时间cpu后，切换到另一个进程。操作系统还有不同的算法调度策略，例如哪个进程优先级高，哪个运行时间更长等。</span><br></pre></td></tr></table></figure>\n\n<p>进程的组成成分：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">进程含有内存，内存用于存储代码指令，程序生成的数据也被写入内存，当然，进程也操纵文件系统当它用到文件的时候</span><br></pre></td></tr></table></figure>\n\n<p>与进程相关的系统调用：</p>\n<ul>\n<li>create() 创建进程</li>\n<li>destory() 销毁进程</li>\n<li>status() 进程状态</li>\n</ul>\n<p>问：操作系统运行进程(程序)的细节？</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">操作系统将代码和静态文件加载到内存中，这个过程需要从磁盘读取字节。程序在运行前会分配运行时栈，用于存放局部变量等。程序运行时，在C语言需要显示分配动态内存堆（heap）用于存放产生的动态数据。</span><br><span class=\"line\"></span><br><span class=\"line\">数据结构（如链表、散列表、树和其他有趣的数据结构）需要堆。起初堆会很小。随着程序运行，通过 malloc()库 API 请求更多内存，操作系统可能会参与分配更多内存给进程，以满足这些调用。</span><br><span class=\"line\"></span><br><span class=\"line\">操作系统还将执行一些初始化任务，如为每个进程打开标准输入、标准输出、错误三个文件描述符（file descriptor）。</span><br><span class=\"line\"></span><br><span class=\"line\">做完初始化任务、分配stack内存这一系列任务后，开始启动进程，即运行main()。</span><br></pre></td></tr></table></figure>\n\n<p>进程状态</p>\n<ul>\n<li>运行（running） 进程在使用cpu，意味着cpu在执行指令</li>\n<li>就绪（ready） 进程准备好了，但由于某种原因，操作系统决定不在此时运行</li>\n<li>阻塞（blocked）进程执行了某种操作，直到发生某个时间才运行。如写文件到磁盘，它就会被阻塞，其他进程可以使用cpu</li>\n</ul>\n<h5 id=\"一、什么是性能问题？\"><a href=\"#一、什么是性能问题？\" class=\"headerlink\" title=\"一、什么是性能问题？\"></a>一、什么是性能问题？</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">突然有一天，公司开发在夜里打电话给你，“现在有很多用户说系统弹出一个错误，系统繁忙”之类的。</span><br><span class=\"line\">开发同事一看接口返回500，看了后端日志好像没有特别明显的报错信息。</span><br><span class=\"line\"></span><br><span class=\"line\">这时，你赶忙上服务器看下nginx日志，好家伙，一看nginx日志发现后发现接口请求过了60s还没有响应。</span><br><span class=\"line\">`top`看一下服务器资源，用户空间的cpu使用率100%，是哪些进程呢？php-fpm。里面发生了什么？我不知道啊？</span><br><span class=\"line\">唉，重启服务能解决90%的问题，那就重启看看吧。果然，重启后用户反馈正常了。害，暂时是没有问题了，那下次再来一次怎么办？...无后续</span><br></pre></td></tr></table></figure>\n\n<p>看，cpu100%这类问题就归属性能问题。</p>\n<h5 id=\"研究性能问题需要学习操作系统主要组件原理\"><a href=\"#研究性能问题需要学习操作系统主要组件原理\" class=\"headerlink\" title=\"研究性能问题需要学习操作系统主要组件原理\"></a>研究性能问题需要学习操作系统主要组件原理</h5><p>CPU性能、内存、磁盘IO性能、网络</p>\n<p>衡量性能的指标：<br>并发（吞吐）、响应快（时延）</p>\n<h5 id=\"二、CPU性能篇\"><a href=\"#二、CPU性能篇\" class=\"headerlink\" title=\"二、CPU性能篇\"></a>二、CPU性能篇</h5><h5 id=\"什么是平均负载\"><a href=\"#什么是平均负载\" class=\"headerlink\" title=\"什么是平均负载\"></a>什么是平均负载</h5><p>看一个例子：<code>uptime</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ uptime</span><br><span class=\"line\">02:34:03 up 2 days, 20:14,  1 user,  load average: 0.63, 0.83, 0.88</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><code>02:34:03</code> 当前时间</li>\n<li><code>up 2 days, 20:14</code> 系统从开机后运行的时长</li>\n<li><code>1 user</code> 正在登录的用户数</li>\n<li><code>load average: 0.63, 0.83, 0.88</code> 最近1分钟、5分钟、15分钟的平均负载(Load average)</li>\n</ul>\n<p><code>平均负载</code>是指单位时间内，系统处于可运行(Running或ready)和不可中断(blocked)的进程数。结合最近1分钟、5分钟、15分钟的平均负载，我们可以全面了解cpu的使用情况。像了解一天早中晚的气候变化。</p>\n<p>Running是指正在使用cpu；Ready是指代码(指令)已经加载到了内存，等cpu来执行指令；</p>\n<p>不可中断是指进程在使用cpu，突然需要进行磁盘IO(读写)的长时间操作，先不用cpu，等IO操作完毕再回来使用cpu。</p>\n<p>一般而言，平均负载超过cpu核数70%就要检查cpu的使用情况，考虑是否优化。</p>\n<p>查看cpu核数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">grep &#x27;model name&#x27; /proc/cpuinfo|wc -l</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"什么是CPU使用率\"><a href=\"#什么是CPU使用率\" class=\"headerlink\" title=\"什么是CPU使用率\"></a>什么是CPU使用率</h5><p>cpu使用率衡量了单位时间cpu的繁忙程度。</p>\n<p>对于I&#x2F;O密集型进程，平均负载就高，但cpu却不繁忙，也就是cpu使用率不高。</p>\n<p>看一个例子：<code>top</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ top</span><br><span class=\"line\">top - 11:15:27 up 40 days, 51 min,  1 user,  load average: 0.32, 0.27, 0.26</span><br><span class=\"line\">Tasks: 356 total,   1 running, 355 sleeping,   0 stopped,   0 zombie</span><br><span class=\"line\">%Cpu(s):  4.2 us,  5.6 sy,  0.0 ni, 90.3 id,  0.0 wa,  0.0 hi,  0.0 si,  0.0 st</span><br><span class=\"line\">MiB Mem :   7777.8 total,    281.6 free,   4394.8 used,   3101.3 buff/cache</span><br><span class=\"line\">MiB Swap:   2048.0 total,    580.2 free,   1467.8 used.   3015.1 avail Mem </span><br><span class=\"line\"></span><br><span class=\"line\">    PID USER      PR  NI    VIRT    RES    SHR S  %CPU  %MEM     TIME+ COMMAND                                                                                                                 </span><br><span class=\"line\">3811294 root      20   0   15440   4540   3768 R  20.0   0.1   0:00.03 top                                                                                                                     </span><br><span class=\"line\">    682 avahi     20   0   10524   5696   3120 S   6.7   0.1 110:29.16 avahi-daemon                                                                                                            </span><br><span class=\"line\">   7726 root      20   0  750872  21192   5772 S   6.7   0.3 259:56.50 travel-api  </span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><p><code>%Cpu(s)</code> 比如说有4个cpu，%Cpu(s)代表这4个的平均使用率。</p>\n<p>cpu &#x3D; 用户空间使用率(us) + 内核空间使用率(sy) + 空闲(id)</p>\n<p><code>ni</code> 用户空间通过改变进程优先级占用的cpu百分比</p>\n<p><code>wa</code> 等待io操作占用的cpu百分比</p>\n<p><code>hi/si</code> 硬&#x2F;软中断进行cpu上下文切换占用的百分比</p>\n</li>\n<li><p><code>RES</code> 使用的真实物理内存（KB）</p>\n</li>\n<li><p><code>%CPU</code> 一个cpu的使用率，毕竟一个进程只占用一个cpu</p>\n</li>\n<li><p><code>TIME+</code> 累计使用cpu时间</p>\n</li>\n</ul>\n<p>附top使用快捷键说明：</p>\n<ul>\n<li><code>shift + m</code> # 按照内存使用率排序，shift m 等价于大写M</li>\n<li><code>shift + p</code> # 按照cpu使用率排序</li>\n<li><code>c</code> # 显示命令全路径</li>\n<li><code>F</code> # 挑选你要选择展示的列，按下空格选中，* 代表会展示的列(列会出现在最后)，按q退出。<br>  可以展示进程使用哪一个cpu</li>\n<li>按<code>1</code> # 展示每个cpu的使用情况</li>\n</ul>\n<h4 id=\"工具合集\"><a href=\"#工具合集\" class=\"headerlink\" title=\"工具合集\"></a>工具合集</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 压测</span><br><span class=\"line\">ab -c 100 -n 1000 http://192.168.0.10:10000/   # 一次并发100，共1000</span><br><span class=\"line\">...</span><br><span class=\"line\">Requests per second: 87.86 [#/sec] (mean)   # 平均每秒处理87个请求</span><br><span class=\"line\">Time per request: 1138.229 [ms] (mean)     # 平均1个1.13秒</span><br><span class=\"line\">...</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"># 根据名称查看进程树</span><br><span class=\"line\">pstree | grep stress</span><br><span class=\"line\"></span><br><span class=\"line\"># 监视短时进程</span><br><span class=\"line\">execsnoop</span><br><span class=\"line\"></span><br><span class=\"line\"># 监视IO</span><br><span class=\"line\">dstat 1 10 # 每隔1s输出，共10组，关注输出read和writ</span><br><span class=\"line\">pidstat -d -p 4344 1 3 # 指定进程的读写速率</span><br><span class=\"line\">strace -p 6082 # 追踪进程</span><br><span class=\"line\"></span><br><span class=\"line\"># 模拟网络SYN FLOOD 攻击</span><br><span class=\"line\">hping3 -S -p 80 -i u100 192.168.0.30 </span><br><span class=\"line\">说明：</span><br><span class=\"line\">-S参数表示设置TCP协议的SYN（同步序列号）</span><br><span class=\"line\">-i u100表示每隔100微秒发送一个网络帧</span><br><span class=\"line\"></span><br><span class=\"line\"># 网络</span><br><span class=\"line\">yum install sysstat</span><br><span class=\"line\">sar -n DEV 1 # -n DEV 表示显示网络收发的报告，间隔1秒输出一组数据</span><br><span class=\"line\"></span><br><span class=\"line\">tcpdump -i eth0 -n tcp port 80 # 抓包，-n不解析协议名和主机名</span><br><span class=\"line\"></span><br><span class=\"line\"># 列出cpu个数</span><br><span class=\"line\">lscpu</span><br><span class=\"line\"></span><br><span class=\"line\"># 查看进程父子关系</span><br><span class=\"line\">yum install -y psmisc</span><br><span class=\"line\">pstree -aps $pid</span><br><span class=\"line\"></span><br><span class=\"line\"># 资源优化</span><br><span class=\"line\">应用角度：吞吐 &amp; 延迟</span><br><span class=\"line\">系统角度：cpu使用率</span><br><span class=\"line\"></span><br><span class=\"line\"># 内存</span><br><span class=\"line\">free</span><br><span class=\"line\">说明：</span><br><span class=\"line\">- available：未使用内存 + 可回收缓存</span><br><span class=\"line\">- used：已使用内存，包含共享内存</span><br><span class=\"line\">- cache/buff：cache是文件内存，buff是磁盘内存</span><br><span class=\"line\">top</span><br><span class=\"line\">说明：</span><br><span class=\"line\">- VIRT：虚拟内存，进程申请的但还未分配实际物理内存</span><br><span class=\"line\">- RES: 实际占用的物理内存</span><br><span class=\"line\">- SHR: 共享内存，一般是公共库、动态链接库</span><br><span class=\"line\">- %MEM：物理内存占总内存百分比</span><br><span class=\"line\"></span><br><span class=\"line\"># 内存泄漏分析</span><br><span class=\"line\">vmstat 3 # 实时查看内存变动</span><br><span class=\"line\">yum install bcc</span><br><span class=\"line\">memleak -a -p $pid</span><br><span class=\"line\"></span><br><span class=\"line\"># Swap</span><br><span class=\"line\">swapoff -a # 关闭</span><br><span class=\"line\"></span><br><span class=\"line\"># IO</span><br><span class=\"line\">df -i</span><br><span class=\"line\"></span><br><span class=\"line\">iostat -d -x 1 # -d -x 显示所有磁盘指标</span><br><span class=\"line\">说明：</span><br><span class=\"line\">- r/s 每s向磁盘发送的读请求数</span><br><span class=\"line\">- rkB/s 每s从磁盘读的数据量</span><br><span class=\"line\">- %util IO使用量</span><br><span class=\"line\"></span><br><span class=\"line\"># 进程io使用情况</span><br><span class=\"line\">pidstat -d 1</span><br><span class=\"line\"></span><br><span class=\"line\"># 慢sql场景</span><br><span class=\"line\">1.接口返回时间长；</span><br><span class=\"line\">show full processlist; # 查看所有会话连接</span><br><span class=\"line\">explain select * from products where productName=&#x27;time&#x27;;</span><br><span class=\"line\">说明：</span><br><span class=\"line\">- type为ALL代表全表查询</span><br><span class=\"line\">- key为null代表无索引建立</span><br><span class=\"line\">- rows代表扫描行数</span><br><span class=\"line\"></span><br><span class=\"line\">CREATE INDEX products_index ON products (productName); # 建立索引，类型为Nomal，products是表名，productName是字段。</span><br><span class=\"line\"></span><br><span class=\"line\">explain select * from user where name=&quot;小明&quot;; # type为ref</span><br><span class=\"line\"></span><br><span class=\"line\"># 慢redis查询</span><br><span class=\"line\"># redis持久化还是会用到磁盘</span><br><span class=\"line\">strace -f -T -tt -p 9085 # -f表示跟踪子进程和子线程，-T表示显示系统调用的时长，-tt表示显示跟踪时间；-e fdatasync 可以指定函数</span><br><span class=\"line\"></span><br><span class=\"line\"># 网络</span><br><span class=\"line\">应用 - 提供统一接口</span><br><span class=\"line\">表示 - 数据转换</span><br><span class=\"line\">会话 - 维护通信连接</span><br><span class=\"line\">传输 - 加表头成包进行传输</span><br><span class=\"line\">网络 - 路由</span><br><span class=\"line\">数据链路 - MAC寻址</span><br><span class=\"line\">物理 - 物理网络传输帧</span><br><span class=\"line\"></span><br><span class=\"line\">MTU - 1500 规定包大小</span><br><span class=\"line\"></span><br><span class=\"line\">ss -ltnp | head -n 3</span><br><span class=\"line\">说明：</span><br><span class=\"line\">Recv，Send-Q 接收(未被程序处理)和发送包队列(未被远端确认)，不为0代表包堆积</span><br><span class=\"line\">state有Listening和Established</span><br><span class=\"line\"></span><br><span class=\"line\"># 网络吞吐</span><br><span class=\"line\">sar -n DEV 1</span><br><span class=\"line\">ethtool ens18 | grep Speed # 千兆网卡</span><br><span class=\"line\"></span><br><span class=\"line\"># 理解一台机器65536个端口</span><br><span class=\"line\">对于客户端，确实受限；但对服务端，可以组合客户端ip+端口。</span><br><span class=\"line\"></span><br><span class=\"line\"># 测试某台机器tcp吞吐(带宽能力)</span><br><span class=\"line\">yum install iperf3</span><br><span class=\"line\">服务器1：iperf3 -s -i 1 -p 10000 # -s表示启动服务端，-i表示汇报间隔，-p表示监听端口</span><br><span class=\"line\"></span><br><span class=\"line\"># -c表示启动客户端，192.168.0.30为目标服务器的IP# -b表示目标带宽(单位是bits/s)# -t表示测试时间# -P表示并发数，-p表示目标服务器监听端口</span><br><span class=\"line\">服务器2：iperf3 -c 192.168.0.30 -b 1G -t 15 -P 2 -p 10000</span><br><span class=\"line\"></span><br><span class=\"line\">回服务端看接口：SUM 行就是测试的汇总结果。receiver 表接收，Bandwidth是带宽。</span><br><span class=\"line\"></span><br><span class=\"line\"># 压测</span><br><span class=\"line\">yum install -y httpd-tools</span><br><span class=\"line\">ab -c 1000 -n 10000 http://192.168.0.30/  # -c表示并发请求数为1000，-n表示总的请求数为10000</span><br><span class=\"line\">说明：</span><br><span class=\"line\">Requests per second # 平均每个请求花费时间</span><br><span class=\"line\">第二个Time per request # 实际请求的响应时间 </span><br><span class=\"line\"></span><br><span class=\"line\"># 域名</span><br><span class=\"line\">nslookup time.geekbang.org</span><br><span class=\"line\"></span><br><span class=\"line\">dig +trace @114.114.114.114 +nodnssec time.geekbang.org # +trace表示开启跟踪查询# +nodnssec表示禁止DNS安全扩展；@114.114.114.114指定使用的dns服务器</span><br><span class=\"line\">dns流程查询说明：client(time.geekbang.org) -&gt; 114.114.114.114(可能存在time.geekbang.org缓存) -&gt; NS .org -&gt; m.root-servers.net -&gt; dns9.hichina.com -&gt; ip返回114 DNS服务器。</span><br><span class=\"line\"></span><br><span class=\"line\"># 内网域名解析可以通过自建DNS服务器或配置/etc/hosts文件</span><br><span class=\"line\"># 强制使用https好处：防止dns劫持</span><br><span class=\"line\"># 抓包</span><br><span class=\"line\">tcpdump -nn udp port 53 or host 35.190.27.188 </span><br><span class=\"line\">说明：</span><br><span class=\"line\">-nn ，表示不解析抓包中的域名（即不反向解析）、协议以及端口号。</span><br><span class=\"line\">udp port 53 ，表示只显示 UDP 协议的端口号（包括源端口和目的端口）为 53 的包。</span><br><span class=\"line\">host 35.190.27.188 ，表示只显示 IP 地址（包括源地址和目的地址）为 35.190.27.188 的包。</span><br><span class=\"line\">or 表 或</span><br><span class=\"line\"></span><br><span class=\"line\">第一条：</span><br><span class=\"line\">36909+ 表示查询标识值，它也会出现在响应中，加号表示启用递归查询</span><br><span class=\"line\">A? 表示查询 A 记录。</span><br><span class=\"line\">geektime.org. 表示待查询的域名。</span><br><span class=\"line\">30 表示报文长度。</span><br><span class=\"line\"></span><br><span class=\"line\">第二条：</span><br><span class=\"line\">则是从 114.114.114.114 发送回来的 DNS 响应—-域名 geektime.org. 的 A 记录值为 35.190.27.188。</span><br><span class=\"line\"></span><br><span class=\"line\">第三条和第四条，是 ICMP echo request 和 ICMP echo reply，响应包的时间戳 14:02:31.539667，减去请求包的时间戳 14:02:31.508164 ，就可以得到，这次 ICMP 所用时间为 30ms</span><br><span class=\"line\"></span><br><span class=\"line\">第5第6条：</span><br><span class=\"line\">反向地址解析 PTR 请求，只有请求包，却没有应答包。ping -n 可禁止ptr解析。</span><br><span class=\"line\"></span><br><span class=\"line\"># tcpdump选项解析</span><br><span class=\"line\">-A 以ASCII格式显示网络包(不指定则只显示头信息)</span><br><span class=\"line\">-i 指定网口</span><br><span class=\"line\">-nn 不反向解析</span><br><span class=\"line\">-w 保存到文件，以.pcap后缀结尾</span><br><span class=\"line\"></span><br><span class=\"line\">host 主机过滤</span><br><span class=\"line\">port 端口过滤</span><br><span class=\"line\">tcp 协议过滤</span><br><span class=\"line\">and/or/not 逻辑表达</span><br><span class=\"line\"></span><br><span class=\"line\"># tcpdump输出格式</span><br><span class=\"line\">时间戳 协议 源地址.源端口 &gt; 目的地址.目的端口 网络包详细信息</span><br><span class=\"line\">tcpdump -nn udp port 53 or host 35.190.27.188 -w ping.pcap</span><br><span class=\"line\"></span><br><span class=\"line\"># tcpdump &amp; wireshark 抓包 tcp &amp; http案例分析三次握手和四次挥手工作原理</span><br><span class=\"line\">dig +short example.com93.184.216.34</span><br><span class=\"line\">tcpdump -nn host 93.184.216.34 -w web.pcap</span><br><span class=\"line\"></span><br><span class=\"line\">curl http://example.com</span><br><span class=\"line\"></span><br><span class=\"line\">wireshark中分析：</span><br><span class=\"line\">由于 HTTP 基于 TCP，所以最先看到的三个包，分别是 TCP 三次握手的包。接下来，中间的才是 HTTP 请求和响应包，而最后的三个包，则是 TCP 连接断开时的三次挥手包。</span><br><span class=\"line\"></span><br><span class=\"line\">从菜单栏中，点击 Statistics -&gt; Flow Graph，然后，在弹出的界面中的 Flow type 选择 TCP Flows，可以更清晰的看到，整个过程中 TCP 流的执行过程。</span><br><span class=\"line\"></span><br><span class=\"line\">之所以有三个包，是因为服务器端收到客户端的 FIN 后，服务器端同时也要关闭连接，这样就可以把 ACK 和 FIN 合并到一起发送，节省了一个包，变成了“三次挥手”。</span><br><span class=\"line\"></span><br><span class=\"line\">而通常情况下，服务器端收到客户端的 FIN 后，很可能还没发送完数据，所以就会先回复客户端一个 ACK 包。稍等一会儿，完成所有数据包的发送后，才会发送 FIN 包。这也就是四次挥手了。</span><br><span class=\"line\"></span><br><span class=\"line\"># HTTP分析工具：fiddler</span><br><span class=\"line\">$ curl -s -w &#x27;Http code: %&#123;http_code&#125;\\nTotal time:%&#123;time_total&#125;s\\n&#x27; -o /dev/null http://192.168.0.30/ # 获取状态码和时间</span><br><span class=\"line\"></span><br><span class=\"line\"># 模拟ddos攻击</span><br><span class=\"line\">hping3 -S -p 80 -i u10 192.168.0.30 #  -S参数表示设置TCP协议的SYN（同步序列号），-p表示目的端口为80。-i u10表示每隔10微秒发送一个网络帧</span><br><span class=\"line\"></span><br><span class=\"line\">curl -w &#x27;Http code: %&#123;http_code&#125;\\nTotal time:%&#123;time_total&#125;s\\n&#x27; -o /dev/null --connect-timeout 10 http://192.168.0.30 # --connect-timeout表示连接超时时间</span><br><span class=\"line\"></span><br><span class=\"line\">sar -n DEV 1 # 观察收发情况</span><br><span class=\"line\"></span><br><span class=\"line\">tcpdump -i eth0 -n tcp port 80</span><br><span class=\"line\">结果：Flags [S] 表示这是一个 SYN 包。大量的 SYN 包表明，这是一个 SYN Flood 攻击。即客户端构造大量的 SYN 包，请求建立 TCP 连接；而服务器收到包后，会向源 IP 发送 SYN+ACK 报文，并等待三次握手的最后一次 ACK 报文，直到超时。</span><br><span class=\"line\"></span><br><span class=\"line\">TCP 半开连接的方法，关键在于 SYN_RECEIVED 状态的连接。</span><br><span class=\"line\">netstat -n -p | grep SYN_REC # -n表示不解析名字，-p表示显示连接所属进程</span><br><span class=\"line\"></span><br><span class=\"line\">iptables -I INPUT -s 192.168.0.2 -p tcp -j REJECT # 封ip</span><br><span class=\"line\">iptables -A INPUT -p tcp --syn -m limit --limit 1/s -j ACCEPT # 限制syn并发数为每秒1次</span><br><span class=\"line\">iptables -I INPUT -p tcp --dport 80 --syn -m recent --name SYN_FLOOD --update --seconds 60 --hitcount 10 -j REJECT # 限制单个IP在60秒新建立的连接数为10</span><br><span class=\"line\"></span><br><span class=\"line\"># 半开状态的连接数是有限制的</span><br><span class=\"line\">sysctl net.ipv4.tcp_max_syn_backlog</span><br><span class=\"line\"></span><br><span class=\"line\">sysctl -w net.ipv4.tcp_max_syn_backlog=1024 # 增加半开连接容量</span><br><span class=\"line\"></span><br><span class=\"line\">sysctl -w net.ipv4.tcp_synack_retries=1 # 减少半开连接重试次数</span><br><span class=\"line\"></span><br><span class=\"line\"># 开启 SYN Cookies不维护半开连接状态</span><br><span class=\"line\">sysctl -w net.ipv4.tcp_syncookies=1</span><br><span class=\"line\"></span><br><span class=\"line\"># 持久化保存</span><br><span class=\"line\">$ cat /etc/sysctl.conf</span><br><span class=\"line\">net.ipv4.tcp_syncookies = 1</span><br><span class=\"line\">net.ipv4.tcp_synack_retries = 1</span><br><span class=\"line\">net.ipv4.tcp_max_syn_backlog = 1024</span><br><span class=\"line\"></span><br><span class=\"line\"># 基于一些服务端会禁用icmp，使用hping3 or traceroute 测试延迟</span><br><span class=\"line\">hping3 -c 3 -S -p 80 baidu.com # -c表示发送3次请求，-S表示设置TCP SYN，-p表示端口号为80</span><br><span class=\"line\"></span><br><span class=\"line\">traceroute --tcp -p 80 -n baidu.com  # --tcp表示使用TCP协议，-p表示端口号，-n表示不对结果中的IP地址执行反向域名解析</span><br><span class=\"line\"></span><br><span class=\"line\"># NAT</span><br><span class=\"line\">SNAT(转换源ip，实现上网)</span><br><span class=\"line\">192.168.0.2 -&gt; 路由器（NAT网关）转换成公网ip：100.100.100.100 -&gt; 百度</span><br><span class=\"line\"></span><br><span class=\"line\">DNAT(暴露内网服务)</span><br><span class=\"line\">baidu.com 发回响应包 -&gt; 路由器 -&gt; 公网ip替换成192.168.0.2 -&gt; 192.168.0.2</span><br><span class=\"line\"></span><br><span class=\"line\"># NAT实现原理</span><br><span class=\"line\">Linux 内核提供的 Netfilter ，具体可通过工具iptables或firewalld实现链配置。</span><br><span class=\"line\"></span><br><span class=\"line\">对SNAT: iptables -t nat -A POSTROUTING -s 192.168.0.0/16 -j MASQUERADE</span><br><span class=\"line\">对DNAT: iptables -t nat -A PREROUTING -d 100.100.100.100 -j DNAT --to-destination 192.168.0.2</span><br><span class=\"line\"></span><br><span class=\"line\"># 在使用 iptables 配置 NAT 规则时，Linux 需要转发来自其他 IP 的网络包，需开启 Linux 的 IP 转发功能</span><br><span class=\"line\">查看：sysctl net.ipv4.ip_forward</span><br><span class=\"line\">开启：sysctl -w net.ipv4.ip_forward=1</span><br><span class=\"line\">持久化保存：</span><br><span class=\"line\">cat /etc/sysctl.conf | grep ip_forward</span><br><span class=\"line\">net.ipv4.ip_forward=1</span><br><span class=\"line\"></span><br><span class=\"line\"># 网络工具合集</span><br><span class=\"line\">sar # 可查看网络接口、进程、IP地址吞吐量(BPS) </span><br><span class=\"line\">netstat或ss # 网络连接</span><br><span class=\"line\">ping或hping3 # 网络延迟</span><br><span class=\"line\">traceroute # 查看路由链路</span><br><span class=\"line\">nslookup或dig # DNS解析</span><br><span class=\"line\">iptables # 防火墙或NAT</span><br><span class=\"line\">tcpdump &amp; wireshark # 抓包</span><br><span class=\"line\"></span><br><span class=\"line\"># 网络优化内核参数设置</span><br><span class=\"line\">- 增大每个套接字的缓冲区大小 net.core.optmem_max；推荐81920</span><br><span class=\"line\">- 增大套接字接收缓冲区大小 net.core.rmem_max 和发送缓冲区大小 net.core.wmem_max； 513920/513920</span><br><span class=\"line\"></span><br><span class=\"line\"># cat /proc/sys/net/ipv4/tcp_mem 查看配置</span><br><span class=\"line\">#cat /proc/net/sockstat 查看当前tcp的统计</span><br><span class=\"line\">#sysctl -w net.ipv4.tcp_mem=新配置 来增大</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"mysql慢查询\"><a href=\"#mysql慢查询\" class=\"headerlink\" title=\"mysql慢查询\"></a>mysql慢查询</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show variables like &quot;%long%&quot;;   # 查看long_query_time慢查询时间，默认是10s，超过则被记为慢查询并记录到慢查询日志</span><br><span class=\"line\"></span><br><span class=\"line\">set global long_query_time=1;  # 设置时间，退出navicat重登即可看到生效</span><br><span class=\"line\"></span><br><span class=\"line\">show variables like &quot;%slow%&quot;; # 慢查询slow_query_log是否开启</span><br><span class=\"line\"></span><br><span class=\"line\">set global slow_query_log=&#x27;ON&#x27;;  # 启动慢查询</span><br></pre></td></tr></table></figure>\n<h3 id=\"mysql表名大小写\"><a href=\"#mysql表名大小写\" class=\"headerlink\" title=\"mysql表名大小写\"></a>mysql表名大小写</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show variables like &quot;%case%&quot;; # lower_case_table_names为1表示大小写不敏感。</span><br></pre></td></tr></table></figure>\n<h3 id=\"mysql备份种类说明\"><a href=\"#mysql备份种类说明\" class=\"headerlink\" title=\"mysql备份种类说明\"></a>mysql备份种类说明</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 全量</span><br><span class=\"line\">2. 增量</span><br><span class=\"line\">3. 差异备份</span><br><span class=\"line\"></span><br><span class=\"line\">恢复组合：</span><br><span class=\"line\">1.全量加增量</span><br><span class=\"line\">    周一的全量+周二到周五之间全部增量，特点：步骤多，时间长。</span><br><span class=\"line\"></span><br><span class=\"line\">2.全量加差异</span><br><span class=\"line\">    周一的全量加周五的差异备份。特点：步骤少，数据量少，时间短。</span><br></pre></td></tr></table></figure>\n"},{"title":"第38期：linux日志切割","date":"2023-05-25T04:30:10.000Z","_content":"#### 一、日志切割\n背景：流量大的服务常常会产生很多大文件日志文件，占用磁盘空间，怎么去管理呢？使用日志切割服务logrotate。\n\nlogrotate可以对日志进行截断、压缩、删除旧文件。比如说配置logrotate，让/var/log/nginx每30天轮询，并删除超过60天的日志，此过程完全自动化。\n\n安装logrotate，centos7默认自带\n```\nyum install logrotate\n```\n\n##### 运行原理\nlogrotate的运行依赖`crontab`, 安装logrotate后, 自动在 /etc/cron.daily 目录下添加\nlogrotate 文件\n\n说明：\n- 配置文件：/etc/logrotate.conf，一般不变动\n- 设置独立的轮询配置文件，/etc/logrotate.d\n\n#### 二、实践配置\n创建一个10M的塞满随机二进制数据的文件\n```\ntouch /var/log/log-file\nhead -c 10M < /dev/urandom > /var/log/log-file \n```\n\n配置轮询配置文件\n```\nvim /etc/logrotate.d/log-file\n\n/var/log/log-file {\n    monthly\n    rotate 5\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 644 root root\n    postrotate\n        /usr/bin/killall -HUP rsyslogd\n    endscript\n}\n```\n说明：\n- `monthly` 每月运行一次。其它可用值为'daily'，'weekly'或者'yearly'\n- `rotate 5` 切割后，保留最近的5次切割结果文件\n- `compress` 在轮循任务完成后，已轮循的归档将使用gzip进行压缩\n- `delaycompress` 总是与compress选项一起用，delaycompress选项指示logrotate不要将最近的归档压缩，压缩将在下一次轮循周期进行。这在你或任何软件仍然需要读取最新归档时很有用。\n- `missingok` 在日志轮循期间，任何错误将被忽略，例如“文件无法找到”之类的错误。\n- `notifempty` 如果日志文件为空，轮循不会进行。\n- `create 644 root root` 以指定的权限创建全新的日志文件，同时logrotate也会重命名原始日志文件\n- `postrotate`在所有其它指令完成后，postrotate和endscript里面指定的命令将被执行。在这种情况下，rsyslogd 进程将立即再次读取其配置并继续运行。\n- `size 100k` 日志大小超过 100k 时, 进行切割\n- `olddir /var/log/news/old` 切割后数据放入指定目录 /var/log/news/old\n- `nocompress` 转储文件不压缩\n\n\n配置完成后，载入/etc/lograte.d/log-file\n```\n# 即使轮循条件没有满足，我们也可以通过使用'-f'选项来强制logrotate轮循日志文件，'-v'参数提供了详细的输出\nlogrotate -vf /etc/logrotate.d/log-file \n\nll /var/log/log-file*\n```\n结果:\n-rw-r----- 1 root root   0 Nov 16 14:57 log-file\n-rw-r--r-- 1 root root   3 Nov 16 14:57 log-file.1\n\nlog-file.1没有变成压缩文件是因为设置了delaycompress，后面再观察下个轮询周期到了log-file.1就会变成log-file.2.gz文件，log-file会变成log-file.1，log-file是最新的空文件，`zcat log-file.2.gz`查看压缩内容。\n\nlogrotate自身的日志在`/var/lib/logrotate/`目录下\n\n\n#### 三、logrotate生产应用\nnginx日志轮询\n```\nvi /etc/logrotate.d/nginx\n\n/usr/local/nginx/logs/*.log {\n    daily\n    compress\n    delaycompress\n    rotate 365\n    missingok\n    notifempty\n    dateext\n    sharedscripts\n    postrotate\n      if [ -f /usr/local/nginx/logs/nginx.pid ]; then\n          kill -USR1 `cat /usr/local/nginx/logs/nginx.pid`\n      fi\n    endscript\n}\n```\n接着执行\n```\nlogrotate /etc/logrotate.d/nginx # 载入配置，因为没有达到daily的轮询条件，要到第二天才能看到轮询结果。可'logrotate -vf /etc/logrotate.d/nginx' 强制执行\n```\n\n说明：\n- `dateext` 表示以日期命名轮询文件后缀，如access.log变成access.log-20211116\n- `sharedscripts` 意味着 postrotate 脚本将只运行一次（在旧日志被压缩之后），而不是为每个轮询的日志运行一次\n\n- USR1通常被用来告知应用程序重载配置文件；例如，向Apache HTTP服务器发送一个USR1信号将导致以下步骤的发生：停止接受新的连接，等待当前连接停止，重新载入配置文件，重新打开日志文件，重启服务器，从而实现相对平滑的不关机的更改。\n\n- kill -HUP pid 或者 killall -HUP pName，其中pid指进程id，pName为进程名称。\n如果想要更改配置而不需停止并重新启动服务，可以使用上面两个命令。在对配置文件作必要的更改后，发出该命令以动态更新服务配置。根据约定，当你发送一个挂起信号(信号1或HUP)时，大多数服务器进程(所有常用的进程)都会进行复位操作并重新加载它们的配置文件。\n\n#### 参考\nhttps://www.cnblogs.com/clsn/p/8428257.html\n\nhttps://blog.csdn.net/be5yond/article/details/122211394\n","source":"_posts/第38期：linux日志切割.md","raw":"---\ntitle: 第38期：linux日志切割\ndate: 2023-05-25 12:30:10\ntags:\n---\n#### 一、日志切割\n背景：流量大的服务常常会产生很多大文件日志文件，占用磁盘空间，怎么去管理呢？使用日志切割服务logrotate。\n\nlogrotate可以对日志进行截断、压缩、删除旧文件。比如说配置logrotate，让/var/log/nginx每30天轮询，并删除超过60天的日志，此过程完全自动化。\n\n安装logrotate，centos7默认自带\n```\nyum install logrotate\n```\n\n##### 运行原理\nlogrotate的运行依赖`crontab`, 安装logrotate后, 自动在 /etc/cron.daily 目录下添加\nlogrotate 文件\n\n说明：\n- 配置文件：/etc/logrotate.conf，一般不变动\n- 设置独立的轮询配置文件，/etc/logrotate.d\n\n#### 二、实践配置\n创建一个10M的塞满随机二进制数据的文件\n```\ntouch /var/log/log-file\nhead -c 10M < /dev/urandom > /var/log/log-file \n```\n\n配置轮询配置文件\n```\nvim /etc/logrotate.d/log-file\n\n/var/log/log-file {\n    monthly\n    rotate 5\n    compress\n    delaycompress\n    missingok\n    notifempty\n    create 644 root root\n    postrotate\n        /usr/bin/killall -HUP rsyslogd\n    endscript\n}\n```\n说明：\n- `monthly` 每月运行一次。其它可用值为'daily'，'weekly'或者'yearly'\n- `rotate 5` 切割后，保留最近的5次切割结果文件\n- `compress` 在轮循任务完成后，已轮循的归档将使用gzip进行压缩\n- `delaycompress` 总是与compress选项一起用，delaycompress选项指示logrotate不要将最近的归档压缩，压缩将在下一次轮循周期进行。这在你或任何软件仍然需要读取最新归档时很有用。\n- `missingok` 在日志轮循期间，任何错误将被忽略，例如“文件无法找到”之类的错误。\n- `notifempty` 如果日志文件为空，轮循不会进行。\n- `create 644 root root` 以指定的权限创建全新的日志文件，同时logrotate也会重命名原始日志文件\n- `postrotate`在所有其它指令完成后，postrotate和endscript里面指定的命令将被执行。在这种情况下，rsyslogd 进程将立即再次读取其配置并继续运行。\n- `size 100k` 日志大小超过 100k 时, 进行切割\n- `olddir /var/log/news/old` 切割后数据放入指定目录 /var/log/news/old\n- `nocompress` 转储文件不压缩\n\n\n配置完成后，载入/etc/lograte.d/log-file\n```\n# 即使轮循条件没有满足，我们也可以通过使用'-f'选项来强制logrotate轮循日志文件，'-v'参数提供了详细的输出\nlogrotate -vf /etc/logrotate.d/log-file \n\nll /var/log/log-file*\n```\n结果:\n-rw-r----- 1 root root   0 Nov 16 14:57 log-file\n-rw-r--r-- 1 root root   3 Nov 16 14:57 log-file.1\n\nlog-file.1没有变成压缩文件是因为设置了delaycompress，后面再观察下个轮询周期到了log-file.1就会变成log-file.2.gz文件，log-file会变成log-file.1，log-file是最新的空文件，`zcat log-file.2.gz`查看压缩内容。\n\nlogrotate自身的日志在`/var/lib/logrotate/`目录下\n\n\n#### 三、logrotate生产应用\nnginx日志轮询\n```\nvi /etc/logrotate.d/nginx\n\n/usr/local/nginx/logs/*.log {\n    daily\n    compress\n    delaycompress\n    rotate 365\n    missingok\n    notifempty\n    dateext\n    sharedscripts\n    postrotate\n      if [ -f /usr/local/nginx/logs/nginx.pid ]; then\n          kill -USR1 `cat /usr/local/nginx/logs/nginx.pid`\n      fi\n    endscript\n}\n```\n接着执行\n```\nlogrotate /etc/logrotate.d/nginx # 载入配置，因为没有达到daily的轮询条件，要到第二天才能看到轮询结果。可'logrotate -vf /etc/logrotate.d/nginx' 强制执行\n```\n\n说明：\n- `dateext` 表示以日期命名轮询文件后缀，如access.log变成access.log-20211116\n- `sharedscripts` 意味着 postrotate 脚本将只运行一次（在旧日志被压缩之后），而不是为每个轮询的日志运行一次\n\n- USR1通常被用来告知应用程序重载配置文件；例如，向Apache HTTP服务器发送一个USR1信号将导致以下步骤的发生：停止接受新的连接，等待当前连接停止，重新载入配置文件，重新打开日志文件，重启服务器，从而实现相对平滑的不关机的更改。\n\n- kill -HUP pid 或者 killall -HUP pName，其中pid指进程id，pName为进程名称。\n如果想要更改配置而不需停止并重新启动服务，可以使用上面两个命令。在对配置文件作必要的更改后，发出该命令以动态更新服务配置。根据约定，当你发送一个挂起信号(信号1或HUP)时，大多数服务器进程(所有常用的进程)都会进行复位操作并重新加载它们的配置文件。\n\n#### 参考\nhttps://www.cnblogs.com/clsn/p/8428257.html\n\nhttps://blog.csdn.net/be5yond/article/details/122211394\n","slug":"第38期：linux日志切割","published":1,"updated":"2024-03-06T06:55:18.363Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvteg000vbklnh0sfgf3l","content":"<h4 id=\"一、日志切割\"><a href=\"#一、日志切割\" class=\"headerlink\" title=\"一、日志切割\"></a>一、日志切割</h4><p>背景：流量大的服务常常会产生很多大文件日志文件，占用磁盘空间，怎么去管理呢？使用日志切割服务logrotate。</p>\n<p>logrotate可以对日志进行截断、压缩、删除旧文件。比如说配置logrotate，让&#x2F;var&#x2F;log&#x2F;nginx每30天轮询，并删除超过60天的日志，此过程完全自动化。</p>\n<p>安装logrotate，centos7默认自带</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install logrotate</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"运行原理\"><a href=\"#运行原理\" class=\"headerlink\" title=\"运行原理\"></a>运行原理</h5><p>logrotate的运行依赖<code>crontab</code>, 安装logrotate后, 自动在 &#x2F;etc&#x2F;cron.daily 目录下添加<br>logrotate 文件</p>\n<p>说明：</p>\n<ul>\n<li>配置文件：&#x2F;etc&#x2F;logrotate.conf，一般不变动</li>\n<li>设置独立的轮询配置文件，&#x2F;etc&#x2F;logrotate.d</li>\n</ul>\n<h4 id=\"二、实践配置\"><a href=\"#二、实践配置\" class=\"headerlink\" title=\"二、实践配置\"></a>二、实践配置</h4><p>创建一个10M的塞满随机二进制数据的文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch /var/log/log-file</span><br><span class=\"line\">head -c 10M &lt; /dev/urandom &gt; /var/log/log-file </span><br></pre></td></tr></table></figure>\n\n<p>配置轮询配置文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/logrotate.d/log-file</span><br><span class=\"line\"></span><br><span class=\"line\">/var/log/log-file &#123;</span><br><span class=\"line\">    monthly</span><br><span class=\"line\">    rotate 5</span><br><span class=\"line\">    compress</span><br><span class=\"line\">    delaycompress</span><br><span class=\"line\">    missingok</span><br><span class=\"line\">    notifempty</span><br><span class=\"line\">    create 644 root root</span><br><span class=\"line\">    postrotate</span><br><span class=\"line\">        /usr/bin/killall -HUP rsyslogd</span><br><span class=\"line\">    endscript</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><code>monthly</code> 每月运行一次。其它可用值为’daily’，’weekly’或者’yearly’</li>\n<li><code>rotate 5</code> 切割后，保留最近的5次切割结果文件</li>\n<li><code>compress</code> 在轮循任务完成后，已轮循的归档将使用gzip进行压缩</li>\n<li><code>delaycompress</code> 总是与compress选项一起用，delaycompress选项指示logrotate不要将最近的归档压缩，压缩将在下一次轮循周期进行。这在你或任何软件仍然需要读取最新归档时很有用。</li>\n<li><code>missingok</code> 在日志轮循期间，任何错误将被忽略，例如“文件无法找到”之类的错误。</li>\n<li><code>notifempty</code> 如果日志文件为空，轮循不会进行。</li>\n<li><code>create 644 root root</code> 以指定的权限创建全新的日志文件，同时logrotate也会重命名原始日志文件</li>\n<li><code>postrotate</code>在所有其它指令完成后，postrotate和endscript里面指定的命令将被执行。在这种情况下，rsyslogd 进程将立即再次读取其配置并继续运行。</li>\n<li><code>size 100k</code> 日志大小超过 100k 时, 进行切割</li>\n<li><code>olddir /var/log/news/old</code> 切割后数据放入指定目录 &#x2F;var&#x2F;log&#x2F;news&#x2F;old</li>\n<li><code>nocompress</code> 转储文件不压缩</li>\n</ul>\n<p>配置完成后，载入&#x2F;etc&#x2F;lograte.d&#x2F;log-file</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 即使轮循条件没有满足，我们也可以通过使用&#x27;-f&#x27;选项来强制logrotate轮循日志文件，&#x27;-v&#x27;参数提供了详细的输出</span><br><span class=\"line\">logrotate -vf /etc/logrotate.d/log-file </span><br><span class=\"line\"></span><br><span class=\"line\">ll /var/log/log-file*</span><br></pre></td></tr></table></figure>\n<p>结果:<br>-rw-r—– 1 root root   0 Nov 16 14:57 log-file<br>-rw-r–r– 1 root root   3 Nov 16 14:57 log-file.1</p>\n<p>log-file.1没有变成压缩文件是因为设置了delaycompress，后面再观察下个轮询周期到了log-file.1就会变成log-file.2.gz文件，log-file会变成log-file.1，log-file是最新的空文件，<code>zcat log-file.2.gz</code>查看压缩内容。</p>\n<p>logrotate自身的日志在<code>/var/lib/logrotate/</code>目录下</p>\n<h4 id=\"三、logrotate生产应用\"><a href=\"#三、logrotate生产应用\" class=\"headerlink\" title=\"三、logrotate生产应用\"></a>三、logrotate生产应用</h4><p>nginx日志轮询</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/logrotate.d/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/local/nginx/logs/*.log &#123;</span><br><span class=\"line\">    daily</span><br><span class=\"line\">    compress</span><br><span class=\"line\">    delaycompress</span><br><span class=\"line\">    rotate 365</span><br><span class=\"line\">    missingok</span><br><span class=\"line\">    notifempty</span><br><span class=\"line\">    dateext</span><br><span class=\"line\">    sharedscripts</span><br><span class=\"line\">    postrotate</span><br><span class=\"line\">      if [ -f /usr/local/nginx/logs/nginx.pid ]; then</span><br><span class=\"line\">          kill -USR1 `cat /usr/local/nginx/logs/nginx.pid`</span><br><span class=\"line\">      fi</span><br><span class=\"line\">    endscript</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接着执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logrotate /etc/logrotate.d/nginx # 载入配置，因为没有达到daily的轮询条件，要到第二天才能看到轮询结果。可&#x27;logrotate -vf /etc/logrotate.d/nginx&#x27; 强制执行</span><br></pre></td></tr></table></figure>\n\n<p>说明：</p>\n<ul>\n<li><p><code>dateext</code> 表示以日期命名轮询文件后缀，如access.log变成access.log-20211116</p>\n</li>\n<li><p><code>sharedscripts</code> 意味着 postrotate 脚本将只运行一次（在旧日志被压缩之后），而不是为每个轮询的日志运行一次</p>\n</li>\n<li><p>USR1通常被用来告知应用程序重载配置文件；例如，向Apache HTTP服务器发送一个USR1信号将导致以下步骤的发生：停止接受新的连接，等待当前连接停止，重新载入配置文件，重新打开日志文件，重启服务器，从而实现相对平滑的不关机的更改。</p>\n</li>\n<li><p>kill -HUP pid 或者 killall -HUP pName，其中pid指进程id，pName为进程名称。<br>如果想要更改配置而不需停止并重新启动服务，可以使用上面两个命令。在对配置文件作必要的更改后，发出该命令以动态更新服务配置。根据约定，当你发送一个挂起信号(信号1或HUP)时，大多数服务器进程(所有常用的进程)都会进行复位操作并重新加载它们的配置文件。</p>\n</li>\n</ul>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p><a href=\"https://www.cnblogs.com/clsn/p/8428257.html\">https://www.cnblogs.com/clsn/p/8428257.html</a></p>\n<p><a href=\"https://blog.csdn.net/be5yond/article/details/122211394\">https://blog.csdn.net/be5yond/article/details/122211394</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"一、日志切割\"><a href=\"#一、日志切割\" class=\"headerlink\" title=\"一、日志切割\"></a>一、日志切割</h4><p>背景：流量大的服务常常会产生很多大文件日志文件，占用磁盘空间，怎么去管理呢？使用日志切割服务logrotate。</p>\n<p>logrotate可以对日志进行截断、压缩、删除旧文件。比如说配置logrotate，让&#x2F;var&#x2F;log&#x2F;nginx每30天轮询，并删除超过60天的日志，此过程完全自动化。</p>\n<p>安装logrotate，centos7默认自带</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum install logrotate</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"运行原理\"><a href=\"#运行原理\" class=\"headerlink\" title=\"运行原理\"></a>运行原理</h5><p>logrotate的运行依赖<code>crontab</code>, 安装logrotate后, 自动在 &#x2F;etc&#x2F;cron.daily 目录下添加<br>logrotate 文件</p>\n<p>说明：</p>\n<ul>\n<li>配置文件：&#x2F;etc&#x2F;logrotate.conf，一般不变动</li>\n<li>设置独立的轮询配置文件，&#x2F;etc&#x2F;logrotate.d</li>\n</ul>\n<h4 id=\"二、实践配置\"><a href=\"#二、实践配置\" class=\"headerlink\" title=\"二、实践配置\"></a>二、实践配置</h4><p>创建一个10M的塞满随机二进制数据的文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">touch /var/log/log-file</span><br><span class=\"line\">head -c 10M &lt; /dev/urandom &gt; /var/log/log-file </span><br></pre></td></tr></table></figure>\n\n<p>配置轮询配置文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/logrotate.d/log-file</span><br><span class=\"line\"></span><br><span class=\"line\">/var/log/log-file &#123;</span><br><span class=\"line\">    monthly</span><br><span class=\"line\">    rotate 5</span><br><span class=\"line\">    compress</span><br><span class=\"line\">    delaycompress</span><br><span class=\"line\">    missingok</span><br><span class=\"line\">    notifempty</span><br><span class=\"line\">    create 644 root root</span><br><span class=\"line\">    postrotate</span><br><span class=\"line\">        /usr/bin/killall -HUP rsyslogd</span><br><span class=\"line\">    endscript</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><code>monthly</code> 每月运行一次。其它可用值为’daily’，’weekly’或者’yearly’</li>\n<li><code>rotate 5</code> 切割后，保留最近的5次切割结果文件</li>\n<li><code>compress</code> 在轮循任务完成后，已轮循的归档将使用gzip进行压缩</li>\n<li><code>delaycompress</code> 总是与compress选项一起用，delaycompress选项指示logrotate不要将最近的归档压缩，压缩将在下一次轮循周期进行。这在你或任何软件仍然需要读取最新归档时很有用。</li>\n<li><code>missingok</code> 在日志轮循期间，任何错误将被忽略，例如“文件无法找到”之类的错误。</li>\n<li><code>notifempty</code> 如果日志文件为空，轮循不会进行。</li>\n<li><code>create 644 root root</code> 以指定的权限创建全新的日志文件，同时logrotate也会重命名原始日志文件</li>\n<li><code>postrotate</code>在所有其它指令完成后，postrotate和endscript里面指定的命令将被执行。在这种情况下，rsyslogd 进程将立即再次读取其配置并继续运行。</li>\n<li><code>size 100k</code> 日志大小超过 100k 时, 进行切割</li>\n<li><code>olddir /var/log/news/old</code> 切割后数据放入指定目录 &#x2F;var&#x2F;log&#x2F;news&#x2F;old</li>\n<li><code>nocompress</code> 转储文件不压缩</li>\n</ul>\n<p>配置完成后，载入&#x2F;etc&#x2F;lograte.d&#x2F;log-file</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 即使轮循条件没有满足，我们也可以通过使用&#x27;-f&#x27;选项来强制logrotate轮循日志文件，&#x27;-v&#x27;参数提供了详细的输出</span><br><span class=\"line\">logrotate -vf /etc/logrotate.d/log-file </span><br><span class=\"line\"></span><br><span class=\"line\">ll /var/log/log-file*</span><br></pre></td></tr></table></figure>\n<p>结果:<br>-rw-r—– 1 root root   0 Nov 16 14:57 log-file<br>-rw-r–r– 1 root root   3 Nov 16 14:57 log-file.1</p>\n<p>log-file.1没有变成压缩文件是因为设置了delaycompress，后面再观察下个轮询周期到了log-file.1就会变成log-file.2.gz文件，log-file会变成log-file.1，log-file是最新的空文件，<code>zcat log-file.2.gz</code>查看压缩内容。</p>\n<p>logrotate自身的日志在<code>/var/lib/logrotate/</code>目录下</p>\n<h4 id=\"三、logrotate生产应用\"><a href=\"#三、logrotate生产应用\" class=\"headerlink\" title=\"三、logrotate生产应用\"></a>三、logrotate生产应用</h4><p>nginx日志轮询</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vi /etc/logrotate.d/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">/usr/local/nginx/logs/*.log &#123;</span><br><span class=\"line\">    daily</span><br><span class=\"line\">    compress</span><br><span class=\"line\">    delaycompress</span><br><span class=\"line\">    rotate 365</span><br><span class=\"line\">    missingok</span><br><span class=\"line\">    notifempty</span><br><span class=\"line\">    dateext</span><br><span class=\"line\">    sharedscripts</span><br><span class=\"line\">    postrotate</span><br><span class=\"line\">      if [ -f /usr/local/nginx/logs/nginx.pid ]; then</span><br><span class=\"line\">          kill -USR1 `cat /usr/local/nginx/logs/nginx.pid`</span><br><span class=\"line\">      fi</span><br><span class=\"line\">    endscript</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>接着执行</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">logrotate /etc/logrotate.d/nginx # 载入配置，因为没有达到daily的轮询条件，要到第二天才能看到轮询结果。可&#x27;logrotate -vf /etc/logrotate.d/nginx&#x27; 强制执行</span><br></pre></td></tr></table></figure>\n\n<p>说明：</p>\n<ul>\n<li><p><code>dateext</code> 表示以日期命名轮询文件后缀，如access.log变成access.log-20211116</p>\n</li>\n<li><p><code>sharedscripts</code> 意味着 postrotate 脚本将只运行一次（在旧日志被压缩之后），而不是为每个轮询的日志运行一次</p>\n</li>\n<li><p>USR1通常被用来告知应用程序重载配置文件；例如，向Apache HTTP服务器发送一个USR1信号将导致以下步骤的发生：停止接受新的连接，等待当前连接停止，重新载入配置文件，重新打开日志文件，重启服务器，从而实现相对平滑的不关机的更改。</p>\n</li>\n<li><p>kill -HUP pid 或者 killall -HUP pName，其中pid指进程id，pName为进程名称。<br>如果想要更改配置而不需停止并重新启动服务，可以使用上面两个命令。在对配置文件作必要的更改后，发出该命令以动态更新服务配置。根据约定，当你发送一个挂起信号(信号1或HUP)时，大多数服务器进程(所有常用的进程)都会进行复位操作并重新加载它们的配置文件。</p>\n</li>\n</ul>\n<h4 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h4><p><a href=\"https://www.cnblogs.com/clsn/p/8428257.html\">https://www.cnblogs.com/clsn/p/8428257.html</a></p>\n<p><a href=\"https://blog.csdn.net/be5yond/article/details/122211394\">https://blog.csdn.net/be5yond/article/details/122211394</a></p>\n"},{"title":"第39期：strace","date":"2023-05-25T04:34:12.000Z","_content":"#### 介绍\nstrace: 跟踪用户空间的系统调用。系统调用又称系统呼叫（system call）,它是内核提供的一组抽象接口，内核直接运行于硬件之上。\n\nlinux内核目前有300多个系统调用函数，详细列表可用syscalls手册查看。主要分以下几类：\n文件和设备访问类：open，write，read，chmod等\n进程管理类：fork，clone，execve，exit，getpid\n内存管理：brk/mmap/mlock\n网络通信：sendmsg，socket\n\n\n#### strace使用范例\n```\n# 追踪nginx启动打开的文件\nstrace -T -tt -f -e trace=file -o /data/log/strace.log -s 1024 nginx\n\n输出内容：第一列为进程pid 第二列毫秒级别时间(-tt) 最后一列为系统调用时间（-T）\n```\n\n-T 显示系统调用话费时间\n-tt 显示毫秒级别时间\n-e trace=file 只显示与文件访问相关；trace=process 与进程管理相关；trace=ipc只显示与进程间通信相关; network 和网络通信调用相关；desc 和文件描述符相关\n-p 指定追踪进程\n\n进程间通信设计共享内存：ipcs -m # 查看共享内存\n\n##### 总结\n进程异常可通过strace追踪，进程若卡死在用户态strace则不适用。尝试用perf，systemtap，它们可探查内核态。\n\n\n```\nroot@ubuntu:/usr# strace cat /dev/ \nexecve(, [, ], []) = \nbrk()                                  = \naccess(, F_OK)      = - ENOENT (No such file or directory)\nmmap(NULL, , PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -, ) = \naccess(, R_OK)      = - ENOENT (No such file or directory)\n...\nbrk() = \nbrk() = \nfstat(, {st_mode=S_IFCHR|, st_rdev=makedev(, ), ...}) = \nopen(, O_RDONLY) = \nfstat(, {st_mode=S_IFCHR|, st_rdev=makedev(, ), ...}) = \nread(, , ) = \nclose() = \nclose() = \nclose() = \nexit_group() = ?\n```\n解析上面输出：每一行是一次系统调用，等号左边是系统调用函数名，右边是函数返回值。\n\n参考：https://www.cnblogs.com/machangwei-8/p/10388883.html","source":"_posts/第39期：strace.md","raw":"---\ntitle: 第39期：strace\ndate: 2023-05-25 12:34:12\ntags:\n---\n#### 介绍\nstrace: 跟踪用户空间的系统调用。系统调用又称系统呼叫（system call）,它是内核提供的一组抽象接口，内核直接运行于硬件之上。\n\nlinux内核目前有300多个系统调用函数，详细列表可用syscalls手册查看。主要分以下几类：\n文件和设备访问类：open，write，read，chmod等\n进程管理类：fork，clone，execve，exit，getpid\n内存管理：brk/mmap/mlock\n网络通信：sendmsg，socket\n\n\n#### strace使用范例\n```\n# 追踪nginx启动打开的文件\nstrace -T -tt -f -e trace=file -o /data/log/strace.log -s 1024 nginx\n\n输出内容：第一列为进程pid 第二列毫秒级别时间(-tt) 最后一列为系统调用时间（-T）\n```\n\n-T 显示系统调用话费时间\n-tt 显示毫秒级别时间\n-e trace=file 只显示与文件访问相关；trace=process 与进程管理相关；trace=ipc只显示与进程间通信相关; network 和网络通信调用相关；desc 和文件描述符相关\n-p 指定追踪进程\n\n进程间通信设计共享内存：ipcs -m # 查看共享内存\n\n##### 总结\n进程异常可通过strace追踪，进程若卡死在用户态strace则不适用。尝试用perf，systemtap，它们可探查内核态。\n\n\n```\nroot@ubuntu:/usr# strace cat /dev/ \nexecve(, [, ], []) = \nbrk()                                  = \naccess(, F_OK)      = - ENOENT (No such file or directory)\nmmap(NULL, , PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -, ) = \naccess(, R_OK)      = - ENOENT (No such file or directory)\n...\nbrk() = \nbrk() = \nfstat(, {st_mode=S_IFCHR|, st_rdev=makedev(, ), ...}) = \nopen(, O_RDONLY) = \nfstat(, {st_mode=S_IFCHR|, st_rdev=makedev(, ), ...}) = \nread(, , ) = \nclose() = \nclose() = \nclose() = \nexit_group() = ?\n```\n解析上面输出：每一行是一次系统调用，等号左边是系统调用函数名，右边是函数返回值。\n\n参考：https://www.cnblogs.com/machangwei-8/p/10388883.html","slug":"第39期：strace","published":1,"updated":"2024-03-06T06:55:18.365Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvteh000wbkln543rhtle","content":"<h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><p>strace: 跟踪用户空间的系统调用。系统调用又称系统呼叫（system call）,它是内核提供的一组抽象接口，内核直接运行于硬件之上。</p>\n<p>linux内核目前有300多个系统调用函数，详细列表可用syscalls手册查看。主要分以下几类：<br>文件和设备访问类：open，write，read，chmod等<br>进程管理类：fork，clone，execve，exit，getpid<br>内存管理：brk&#x2F;mmap&#x2F;mlock<br>网络通信：sendmsg，socket</p>\n<h4 id=\"strace使用范例\"><a href=\"#strace使用范例\" class=\"headerlink\" title=\"strace使用范例\"></a>strace使用范例</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 追踪nginx启动打开的文件</span><br><span class=\"line\">strace -T -tt -f -e trace=file -o /data/log/strace.log -s 1024 nginx</span><br><span class=\"line\"></span><br><span class=\"line\">输出内容：第一列为进程pid 第二列毫秒级别时间(-tt) 最后一列为系统调用时间（-T）</span><br></pre></td></tr></table></figure>\n\n<p>-T 显示系统调用话费时间<br>-tt 显示毫秒级别时间<br>-e trace&#x3D;file 只显示与文件访问相关；trace&#x3D;process 与进程管理相关；trace&#x3D;ipc只显示与进程间通信相关; network 和网络通信调用相关；desc 和文件描述符相关<br>-p 指定追踪进程</p>\n<p>进程间通信设计共享内存：ipcs -m # 查看共享内存</p>\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><p>进程异常可通过strace追踪，进程若卡死在用户态strace则不适用。尝试用perf，systemtap，它们可探查内核态。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu:/usr# strace cat /dev/ </span><br><span class=\"line\">execve(, [, ], []) = </span><br><span class=\"line\">brk()                                  = </span><br><span class=\"line\">access(, F_OK)      = - ENOENT (No such file or directory)</span><br><span class=\"line\">mmap(NULL, , PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -, ) = </span><br><span class=\"line\">access(, R_OK)      = - ENOENT (No such file or directory)</span><br><span class=\"line\">...</span><br><span class=\"line\">brk() = </span><br><span class=\"line\">brk() = </span><br><span class=\"line\">fstat(, &#123;st_mode=S_IFCHR|, st_rdev=makedev(, ), ...&#125;) = </span><br><span class=\"line\">open(, O_RDONLY) = </span><br><span class=\"line\">fstat(, &#123;st_mode=S_IFCHR|, st_rdev=makedev(, ), ...&#125;) = </span><br><span class=\"line\">read(, , ) = </span><br><span class=\"line\">close() = </span><br><span class=\"line\">close() = </span><br><span class=\"line\">close() = </span><br><span class=\"line\">exit_group() = ?</span><br></pre></td></tr></table></figure>\n<p>解析上面输出：每一行是一次系统调用，等号左边是系统调用函数名，右边是函数返回值。</p>\n<p>参考：<a href=\"https://www.cnblogs.com/machangwei-8/p/10388883.html\">https://www.cnblogs.com/machangwei-8/p/10388883.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h4><p>strace: 跟踪用户空间的系统调用。系统调用又称系统呼叫（system call）,它是内核提供的一组抽象接口，内核直接运行于硬件之上。</p>\n<p>linux内核目前有300多个系统调用函数，详细列表可用syscalls手册查看。主要分以下几类：<br>文件和设备访问类：open，write，read，chmod等<br>进程管理类：fork，clone，execve，exit，getpid<br>内存管理：brk&#x2F;mmap&#x2F;mlock<br>网络通信：sendmsg，socket</p>\n<h4 id=\"strace使用范例\"><a href=\"#strace使用范例\" class=\"headerlink\" title=\"strace使用范例\"></a>strace使用范例</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 追踪nginx启动打开的文件</span><br><span class=\"line\">strace -T -tt -f -e trace=file -o /data/log/strace.log -s 1024 nginx</span><br><span class=\"line\"></span><br><span class=\"line\">输出内容：第一列为进程pid 第二列毫秒级别时间(-tt) 最后一列为系统调用时间（-T）</span><br></pre></td></tr></table></figure>\n\n<p>-T 显示系统调用话费时间<br>-tt 显示毫秒级别时间<br>-e trace&#x3D;file 只显示与文件访问相关；trace&#x3D;process 与进程管理相关；trace&#x3D;ipc只显示与进程间通信相关; network 和网络通信调用相关；desc 和文件描述符相关<br>-p 指定追踪进程</p>\n<p>进程间通信设计共享内存：ipcs -m # 查看共享内存</p>\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><p>进程异常可通过strace追踪，进程若卡死在用户态strace则不适用。尝试用perf，systemtap，它们可探查内核态。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">root@ubuntu:/usr# strace cat /dev/ </span><br><span class=\"line\">execve(, [, ], []) = </span><br><span class=\"line\">brk()                                  = </span><br><span class=\"line\">access(, F_OK)      = - ENOENT (No such file or directory)</span><br><span class=\"line\">mmap(NULL, , PROT_READ|PROT_WRITE, MAP_PRIVATE|MAP_ANONYMOUS, -, ) = </span><br><span class=\"line\">access(, R_OK)      = - ENOENT (No such file or directory)</span><br><span class=\"line\">...</span><br><span class=\"line\">brk() = </span><br><span class=\"line\">brk() = </span><br><span class=\"line\">fstat(, &#123;st_mode=S_IFCHR|, st_rdev=makedev(, ), ...&#125;) = </span><br><span class=\"line\">open(, O_RDONLY) = </span><br><span class=\"line\">fstat(, &#123;st_mode=S_IFCHR|, st_rdev=makedev(, ), ...&#125;) = </span><br><span class=\"line\">read(, , ) = </span><br><span class=\"line\">close() = </span><br><span class=\"line\">close() = </span><br><span class=\"line\">close() = </span><br><span class=\"line\">exit_group() = ?</span><br></pre></td></tr></table></figure>\n<p>解析上面输出：每一行是一次系统调用，等号左边是系统调用函数名，右边是函数返回值。</p>\n<p>参考：<a href=\"https://www.cnblogs.com/machangwei-8/p/10388883.html\">https://www.cnblogs.com/machangwei-8/p/10388883.html</a></p>\n"},{"title":"第三期：Python学习","date":"2023-05-18T06:00:32.000Z","_content":"\n## Python编译器\n\n- linux自带python2.7\n- Windows 可以在Python官网 https://www.python.org/ 下载.exe\n\n## 运行python\n```\npython --version 或 python3 --version\n\npython3 # 进入交互环境，打印python版本\n>>> import sys\n>>> print(sys.version) \n```\n\n## 编辑工具\n\n[Visual Studio Code](https://code.visualstudio.com/)\n\n[PyCharm](https://www.jetbrains.com/pycharm/download/)\n\n## 编写文件及运行\n编辑hello.py\n```\nprint('hello python')\n```\npython hello.py # 执行\n\n## 注释\n```\n\"\"\"\nhello boy\n\nVersion: 0.1\nAuthor: Ricky Chen\n\"\"\"\n\n# hello world\n\nprint('hello')\n```\n\n## 变量\n```\na = 10\nb = 10.23\n\nprint(a + b) # 20.23\n\nc = 3\nprint(a / c) # 除法，3.3333333333333335\nprint(a % c) # 取余，1\n\nd = 'hello, world'\ne = True\n\nprint(type(a)) # 打印变量类型\n```\n\n## 变量类型转换和input使用\n```\n\"\"\"\n输入a，b，转换成正数\n%d表示整数占位符，进行a+b\n\nAuthor: Ricky\n\"\"\"\na = int(input('a = '))\nb = int(input('b = '))\n\nprint('%d + %d = %d' % (a, b, a + b)) # 10 + 3 = 13\nprint('%d / %d = %d' % (a, b, a / b)) # 10 / 3 = 3，本来输出浮点数的，但是被%d转化了\nprint('%d // %d = %d' % (a, b, a // b)) # 10 // 3 = 3\n```\n\n## 赋值运算符\n```\n\"\"\"\n复合赋值运算符\n\"\"\"\na = 5\nb = 2\na += b # 等价 a = a + b\nprint(a) # 7\na *= b # 等价 a = a * b\nprint(a) # 14\n```\nup https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/02.%E8%AF%AD%E8%A8%80%E5%85%83%E7%B4%A0.md","source":"_posts/第3期：Python学习.md","raw":"---\ntitle: 第三期：Python学习\ndate: 2023-05-18 14:00:32\ntags:\n---\n\n## Python编译器\n\n- linux自带python2.7\n- Windows 可以在Python官网 https://www.python.org/ 下载.exe\n\n## 运行python\n```\npython --version 或 python3 --version\n\npython3 # 进入交互环境，打印python版本\n>>> import sys\n>>> print(sys.version) \n```\n\n## 编辑工具\n\n[Visual Studio Code](https://code.visualstudio.com/)\n\n[PyCharm](https://www.jetbrains.com/pycharm/download/)\n\n## 编写文件及运行\n编辑hello.py\n```\nprint('hello python')\n```\npython hello.py # 执行\n\n## 注释\n```\n\"\"\"\nhello boy\n\nVersion: 0.1\nAuthor: Ricky Chen\n\"\"\"\n\n# hello world\n\nprint('hello')\n```\n\n## 变量\n```\na = 10\nb = 10.23\n\nprint(a + b) # 20.23\n\nc = 3\nprint(a / c) # 除法，3.3333333333333335\nprint(a % c) # 取余，1\n\nd = 'hello, world'\ne = True\n\nprint(type(a)) # 打印变量类型\n```\n\n## 变量类型转换和input使用\n```\n\"\"\"\n输入a，b，转换成正数\n%d表示整数占位符，进行a+b\n\nAuthor: Ricky\n\"\"\"\na = int(input('a = '))\nb = int(input('b = '))\n\nprint('%d + %d = %d' % (a, b, a + b)) # 10 + 3 = 13\nprint('%d / %d = %d' % (a, b, a / b)) # 10 / 3 = 3，本来输出浮点数的，但是被%d转化了\nprint('%d // %d = %d' % (a, b, a // b)) # 10 // 3 = 3\n```\n\n## 赋值运算符\n```\n\"\"\"\n复合赋值运算符\n\"\"\"\na = 5\nb = 2\na += b # 等价 a = a + b\nprint(a) # 7\na *= b # 等价 a = a * b\nprint(a) # 14\n```\nup https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/02.%E8%AF%AD%E8%A8%80%E5%85%83%E7%B4%A0.md","slug":"第3期：Python学习","published":1,"updated":"2024-03-06T06:55:18.387Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvtei000xbklnb7trebje","content":"<h2 id=\"Python编译器\"><a href=\"#Python编译器\" class=\"headerlink\" title=\"Python编译器\"></a>Python编译器</h2><ul>\n<li>linux自带python2.7</li>\n<li>Windows 可以在Python官网 <a href=\"https://www.python.org/\">https://www.python.org/</a> 下载.exe</li>\n</ul>\n<h2 id=\"运行python\"><a href=\"#运行python\" class=\"headerlink\" title=\"运行python\"></a>运行python</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python --version 或 python3 --version</span><br><span class=\"line\"></span><br><span class=\"line\">python3 # 进入交互环境，打印python版本</span><br><span class=\"line\">&gt;&gt;&gt; import sys</span><br><span class=\"line\">&gt;&gt;&gt; print(sys.version) </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编辑工具\"><a href=\"#编辑工具\" class=\"headerlink\" title=\"编辑工具\"></a>编辑工具</h2><p><a href=\"https://code.visualstudio.com/\">Visual Studio Code</a></p>\n<p><a href=\"https://www.jetbrains.com/pycharm/download/\">PyCharm</a></p>\n<h2 id=\"编写文件及运行\"><a href=\"#编写文件及运行\" class=\"headerlink\" title=\"编写文件及运行\"></a>编写文件及运行</h2><p>编辑hello.py</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(&#x27;hello python&#x27;)</span><br></pre></td></tr></table></figure>\n<p>python hello.py # 执行</p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">hello boy</span><br><span class=\"line\"></span><br><span class=\"line\">Version: 0.1</span><br><span class=\"line\">Author: Ricky Chen</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># hello world</span><br><span class=\"line\"></span><br><span class=\"line\">print(&#x27;hello&#x27;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = 10</span><br><span class=\"line\">b = 10.23</span><br><span class=\"line\"></span><br><span class=\"line\">print(a + b) # 20.23</span><br><span class=\"line\"></span><br><span class=\"line\">c = 3</span><br><span class=\"line\">print(a / c) # 除法，3.3333333333333335</span><br><span class=\"line\">print(a % c) # 取余，1</span><br><span class=\"line\"></span><br><span class=\"line\">d = &#x27;hello, world&#x27;</span><br><span class=\"line\">e = True</span><br><span class=\"line\"></span><br><span class=\"line\">print(type(a)) # 打印变量类型</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变量类型转换和input使用\"><a href=\"#变量类型转换和input使用\" class=\"headerlink\" title=\"变量类型转换和input使用\"></a>变量类型转换和input使用</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">输入a，b，转换成正数</span><br><span class=\"line\">%d表示整数占位符，进行a+b</span><br><span class=\"line\"></span><br><span class=\"line\">Author: Ricky</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">a = int(input(&#x27;a = &#x27;))</span><br><span class=\"line\">b = int(input(&#x27;b = &#x27;))</span><br><span class=\"line\"></span><br><span class=\"line\">print(&#x27;%d + %d = %d&#x27; % (a, b, a + b)) # 10 + 3 = 13</span><br><span class=\"line\">print(&#x27;%d / %d = %d&#x27; % (a, b, a / b)) # 10 / 3 = 3，本来输出浮点数的，但是被%d转化了</span><br><span class=\"line\">print(&#x27;%d // %d = %d&#x27; % (a, b, a // b)) # 10 // 3 = 3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">复合赋值运算符</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">a = 5</span><br><span class=\"line\">b = 2</span><br><span class=\"line\">a += b # 等价 a = a + b</span><br><span class=\"line\">print(a) # 7</span><br><span class=\"line\">a *= b # 等价 a = a * b</span><br><span class=\"line\">print(a) # 14</span><br></pre></td></tr></table></figure>\n<p>up <a href=\"https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/02.%E8%AF%AD%E8%A8%80%E5%85%83%E7%B4%A0.md\">https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/02.%E8%AF%AD%E8%A8%80%E5%85%83%E7%B4%A0.md</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"Python编译器\"><a href=\"#Python编译器\" class=\"headerlink\" title=\"Python编译器\"></a>Python编译器</h2><ul>\n<li>linux自带python2.7</li>\n<li>Windows 可以在Python官网 <a href=\"https://www.python.org/\">https://www.python.org/</a> 下载.exe</li>\n</ul>\n<h2 id=\"运行python\"><a href=\"#运行python\" class=\"headerlink\" title=\"运行python\"></a>运行python</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">python --version 或 python3 --version</span><br><span class=\"line\"></span><br><span class=\"line\">python3 # 进入交互环境，打印python版本</span><br><span class=\"line\">&gt;&gt;&gt; import sys</span><br><span class=\"line\">&gt;&gt;&gt; print(sys.version) </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"编辑工具\"><a href=\"#编辑工具\" class=\"headerlink\" title=\"编辑工具\"></a>编辑工具</h2><p><a href=\"https://code.visualstudio.com/\">Visual Studio Code</a></p>\n<p><a href=\"https://www.jetbrains.com/pycharm/download/\">PyCharm</a></p>\n<h2 id=\"编写文件及运行\"><a href=\"#编写文件及运行\" class=\"headerlink\" title=\"编写文件及运行\"></a>编写文件及运行</h2><p>编辑hello.py</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">print(&#x27;hello python&#x27;)</span><br></pre></td></tr></table></figure>\n<p>python hello.py # 执行</p>\n<h2 id=\"注释\"><a href=\"#注释\" class=\"headerlink\" title=\"注释\"></a>注释</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">hello boy</span><br><span class=\"line\"></span><br><span class=\"line\">Version: 0.1</span><br><span class=\"line\">Author: Ricky Chen</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># hello world</span><br><span class=\"line\"></span><br><span class=\"line\">print(&#x27;hello&#x27;)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a = 10</span><br><span class=\"line\">b = 10.23</span><br><span class=\"line\"></span><br><span class=\"line\">print(a + b) # 20.23</span><br><span class=\"line\"></span><br><span class=\"line\">c = 3</span><br><span class=\"line\">print(a / c) # 除法，3.3333333333333335</span><br><span class=\"line\">print(a % c) # 取余，1</span><br><span class=\"line\"></span><br><span class=\"line\">d = &#x27;hello, world&#x27;</span><br><span class=\"line\">e = True</span><br><span class=\"line\"></span><br><span class=\"line\">print(type(a)) # 打印变量类型</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"变量类型转换和input使用\"><a href=\"#变量类型转换和input使用\" class=\"headerlink\" title=\"变量类型转换和input使用\"></a>变量类型转换和input使用</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">输入a，b，转换成正数</span><br><span class=\"line\">%d表示整数占位符，进行a+b</span><br><span class=\"line\"></span><br><span class=\"line\">Author: Ricky</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">a = int(input(&#x27;a = &#x27;))</span><br><span class=\"line\">b = int(input(&#x27;b = &#x27;))</span><br><span class=\"line\"></span><br><span class=\"line\">print(&#x27;%d + %d = %d&#x27; % (a, b, a + b)) # 10 + 3 = 13</span><br><span class=\"line\">print(&#x27;%d / %d = %d&#x27; % (a, b, a / b)) # 10 / 3 = 3，本来输出浮点数的，但是被%d转化了</span><br><span class=\"line\">print(&#x27;%d // %d = %d&#x27; % (a, b, a // b)) # 10 // 3 = 3</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">复合赋值运算符</span><br><span class=\"line\">&quot;&quot;&quot;</span><br><span class=\"line\">a = 5</span><br><span class=\"line\">b = 2</span><br><span class=\"line\">a += b # 等价 a = a + b</span><br><span class=\"line\">print(a) # 7</span><br><span class=\"line\">a *= b # 等价 a = a * b</span><br><span class=\"line\">print(a) # 14</span><br></pre></td></tr></table></figure>\n<p>up <a href=\"https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/02.%E8%AF%AD%E8%A8%80%E5%85%83%E7%B4%A0.md\">https://github.com/jackfrued/Python-100-Days/blob/master/Day01-15/02.%E8%AF%AD%E8%A8%80%E5%85%83%E7%B4%A0.md</a></p>\n"},{"title":"第40期：Maven","date":"2023-05-26T05:07:00.000Z","_content":"### Maven\n#### 属性介绍\n```\n<groupId>   // 团队标志。约定为组织的逆向名称，如org.apache\n<artifactId> // 项目唯一标识符。如tomcat，不要在artifactId包含.\n<packaging>  // 项目打包后的输出，默认为jar，类型为war产生一个web应用。\n```\n\n#### 安装\n环境：centos7\n\n官网地址：https://maven.apache.org/download.cgi\n\n```\ncd /opt/maven\nwget https://dlcdn.apache.org/maven/maven-3/3.8.6/binaries/apache-maven-3.8.6-bin.tar.gz --no-check-certificate\ntar -xzvf apache-maven-3.8.6-bin.tar.gz\nmv apache-maven-3.8.6 maven\n\n# vi /etc/profile，加入\n\nexport PATH=$PATH:/opt/maven/maven/bin\n\n# 执行 source /etc/profile\n\nmvn -v\n```\n\n#### pom.xml介绍\n```\n# <dependences>标签包含的属性标签：\n<groupId> // 项目组织，对应包结构\n<artifactId> // 项目名称，对应根目录\n<version> // jar版本，可以在<properties>中定义\n<scope> // jar包作用范围。可以填写compile，runtime，test，system，provided。\n<dependenceManage> // 依赖声明，包不会被mvn加载，但可以被子pom.xml继承，这样子pom只需要声明<groupId>和<artifactId>，dependenceManage就是用来做版本统一的。\n<properties> // 定义属性，${property}调用\n<properties>\n  <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>  // 指定maven构建时的编码\n  <maven.compiler.source>1.7</maven.compiler.source> // 指定构建时的jdk版本\n  <maven.compiler.target>1.7</maven.compiler.target>\n</properties>\n```\n\n如何寻找jar包？\n\n在 (http://mvnrepository.com/) 搜索关键字，如log4j。\n\n#### 如何一次编译多个project？\n父工程app包含子app1和app2，在app的pom.xml引入两个字module\n```\n<project>\n...\n<modules>\n    <module>app1</module>\n    <module>app2</module>\n  </modules>\n...\n</project>\n```\n#### Maven命令\n```\nmvn compile // 编译项目源码\nmvn test // 使用合适单元测试框架进行测试\nmvn verify // 执行所有检查，验证包是有效的\nmvn install // 安装包到本地仓库\nmvn clean package -Dmaven.test.skip=true // 跳过单元测试\nmvn compile process-resources package # 包含静态资源的编译打包\nmvn clean package -pl com.emog:cpe-app -am -Dmaven.test.skip=true\n```\n\n#### Maven全局配置settings.xml\nsettings.xml存在两个位置\n- ${maven_home}/conf/settings.xml // 全局配置\n- ${home}/.m2/settings.xml // 用户配置\n\npom.xml是本地项目配置\n\n说明：pom.xml > 用户配置 > 全局配置（使用优先级比较）\n\nsettings.xml内容：\n```\n<localRepository>~/.m2/repository</localRepository> // 本地仓库路径配置\n<servers> // 一些包的拉取需要认证，这些信息不适合配在pom\n<mirrors> // 仓库镜像地址\n```\n\n#### 常用问题\n```\n# 执行 mvn package 或 mvn install 时，会自动编译所有单元测试(src/test/java 目录下的代码)，如何跳过这一步？\n  在执行命令的后面，添加命令行参数 -Dmaven.test.skip=true 或者 -DskipTests=true\n\n参考：https://github.com/dunwu/java-tutorial/blob/master/docs/11.%E8%BD%AF%E4%BB%B6/01.%E6%9E%84%E5%BB%BA/01.Maven/04.Maven%E5%AE%9E%E6%88%98%E9%97%AE%E9%A2%98%E5%92%8C%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.md\n```\n\n### 部署 maven 私服 Nexus\n参考：https://github.com/dunwu/java-tutorial/blob/master/docs/11.%E8%BD%AF%E4%BB%B6/01.%E6%9E%84%E5%BB%BA/01.Maven/05.Maven%E6%95%99%E7%A8%8B%E4%B9%8B%E5%8F%91%E5%B8%83jar%E5%88%B0%E7%A7%81%E6%9C%8D%E6%88%96%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93.md","source":"_posts/第40期：Maven.md","raw":"---\ntitle: 第40期：Maven\ndate: 2023-05-26 13:07:00\ntags:\n---\n### Maven\n#### 属性介绍\n```\n<groupId>   // 团队标志。约定为组织的逆向名称，如org.apache\n<artifactId> // 项目唯一标识符。如tomcat，不要在artifactId包含.\n<packaging>  // 项目打包后的输出，默认为jar，类型为war产生一个web应用。\n```\n\n#### 安装\n环境：centos7\n\n官网地址：https://maven.apache.org/download.cgi\n\n```\ncd /opt/maven\nwget https://dlcdn.apache.org/maven/maven-3/3.8.6/binaries/apache-maven-3.8.6-bin.tar.gz --no-check-certificate\ntar -xzvf apache-maven-3.8.6-bin.tar.gz\nmv apache-maven-3.8.6 maven\n\n# vi /etc/profile，加入\n\nexport PATH=$PATH:/opt/maven/maven/bin\n\n# 执行 source /etc/profile\n\nmvn -v\n```\n\n#### pom.xml介绍\n```\n# <dependences>标签包含的属性标签：\n<groupId> // 项目组织，对应包结构\n<artifactId> // 项目名称，对应根目录\n<version> // jar版本，可以在<properties>中定义\n<scope> // jar包作用范围。可以填写compile，runtime，test，system，provided。\n<dependenceManage> // 依赖声明，包不会被mvn加载，但可以被子pom.xml继承，这样子pom只需要声明<groupId>和<artifactId>，dependenceManage就是用来做版本统一的。\n<properties> // 定义属性，${property}调用\n<properties>\n  <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>  // 指定maven构建时的编码\n  <maven.compiler.source>1.7</maven.compiler.source> // 指定构建时的jdk版本\n  <maven.compiler.target>1.7</maven.compiler.target>\n</properties>\n```\n\n如何寻找jar包？\n\n在 (http://mvnrepository.com/) 搜索关键字，如log4j。\n\n#### 如何一次编译多个project？\n父工程app包含子app1和app2，在app的pom.xml引入两个字module\n```\n<project>\n...\n<modules>\n    <module>app1</module>\n    <module>app2</module>\n  </modules>\n...\n</project>\n```\n#### Maven命令\n```\nmvn compile // 编译项目源码\nmvn test // 使用合适单元测试框架进行测试\nmvn verify // 执行所有检查，验证包是有效的\nmvn install // 安装包到本地仓库\nmvn clean package -Dmaven.test.skip=true // 跳过单元测试\nmvn compile process-resources package # 包含静态资源的编译打包\nmvn clean package -pl com.emog:cpe-app -am -Dmaven.test.skip=true\n```\n\n#### Maven全局配置settings.xml\nsettings.xml存在两个位置\n- ${maven_home}/conf/settings.xml // 全局配置\n- ${home}/.m2/settings.xml // 用户配置\n\npom.xml是本地项目配置\n\n说明：pom.xml > 用户配置 > 全局配置（使用优先级比较）\n\nsettings.xml内容：\n```\n<localRepository>~/.m2/repository</localRepository> // 本地仓库路径配置\n<servers> // 一些包的拉取需要认证，这些信息不适合配在pom\n<mirrors> // 仓库镜像地址\n```\n\n#### 常用问题\n```\n# 执行 mvn package 或 mvn install 时，会自动编译所有单元测试(src/test/java 目录下的代码)，如何跳过这一步？\n  在执行命令的后面，添加命令行参数 -Dmaven.test.skip=true 或者 -DskipTests=true\n\n参考：https://github.com/dunwu/java-tutorial/blob/master/docs/11.%E8%BD%AF%E4%BB%B6/01.%E6%9E%84%E5%BB%BA/01.Maven/04.Maven%E5%AE%9E%E6%88%98%E9%97%AE%E9%A2%98%E5%92%8C%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.md\n```\n\n### 部署 maven 私服 Nexus\n参考：https://github.com/dunwu/java-tutorial/blob/master/docs/11.%E8%BD%AF%E4%BB%B6/01.%E6%9E%84%E5%BB%BA/01.Maven/05.Maven%E6%95%99%E7%A8%8B%E4%B9%8B%E5%8F%91%E5%B8%83jar%E5%88%B0%E7%A7%81%E6%9C%8D%E6%88%96%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93.md","slug":"第40期：Maven","published":1,"updated":"2024-03-06T06:55:18.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvtej000ybkln4yju67cc","content":"<h3 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h3><h4 id=\"属性介绍\"><a href=\"#属性介绍\" class=\"headerlink\" title=\"属性介绍\"></a>属性介绍</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;groupId&gt;   // 团队标志。约定为组织的逆向名称，如org.apache</span><br><span class=\"line\">&lt;artifactId&gt; // 项目唯一标识符。如tomcat，不要在artifactId包含.</span><br><span class=\"line\">&lt;packaging&gt;  // 项目打包后的输出，默认为jar，类型为war产生一个web应用。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>环境：centos7</p>\n<p>官网地址：<a href=\"https://maven.apache.org/download.cgi\">https://maven.apache.org/download.cgi</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/maven</span><br><span class=\"line\">wget https://dlcdn.apache.org/maven/maven-3/3.8.6/binaries/apache-maven-3.8.6-bin.tar.gz --no-check-certificate</span><br><span class=\"line\">tar -xzvf apache-maven-3.8.6-bin.tar.gz</span><br><span class=\"line\">mv apache-maven-3.8.6 maven</span><br><span class=\"line\"></span><br><span class=\"line\"># vi /etc/profile，加入</span><br><span class=\"line\"></span><br><span class=\"line\">export PATH=$PATH:/opt/maven/maven/bin</span><br><span class=\"line\"></span><br><span class=\"line\"># 执行 source /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">mvn -v</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"pom-xml介绍\"><a href=\"#pom-xml介绍\" class=\"headerlink\" title=\"pom.xml介绍\"></a>pom.xml介绍</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># &lt;dependences&gt;标签包含的属性标签：</span><br><span class=\"line\">&lt;groupId&gt; // 项目组织，对应包结构</span><br><span class=\"line\">&lt;artifactId&gt; // 项目名称，对应根目录</span><br><span class=\"line\">&lt;version&gt; // jar版本，可以在&lt;properties&gt;中定义</span><br><span class=\"line\">&lt;scope&gt; // jar包作用范围。可以填写compile，runtime，test，system，provided。</span><br><span class=\"line\">&lt;dependenceManage&gt; // 依赖声明，包不会被mvn加载，但可以被子pom.xml继承，这样子pom只需要声明&lt;groupId&gt;和&lt;artifactId&gt;，dependenceManage就是用来做版本统一的。</span><br><span class=\"line\">&lt;properties&gt; // 定义属性，$&#123;property&#125;调用</span><br><span class=\"line\">&lt;properties&gt;</span><br><span class=\"line\">  &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;  // 指定maven构建时的编码</span><br><span class=\"line\">  &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt; // 指定构建时的jdk版本</span><br><span class=\"line\">  &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt;</span><br><span class=\"line\">&lt;/properties&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如何寻找jar包？</p>\n<p>在 (<a href=\"http://mvnrepository.com/\">http://mvnrepository.com/</a>) 搜索关键字，如log4j。</p>\n<h4 id=\"如何一次编译多个project？\"><a href=\"#如何一次编译多个project？\" class=\"headerlink\" title=\"如何一次编译多个project？\"></a>如何一次编译多个project？</h4><p>父工程app包含子app1和app2，在app的pom.xml引入两个字module</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project&gt;</span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;modules&gt;</span><br><span class=\"line\">    &lt;module&gt;app1&lt;/module&gt;</span><br><span class=\"line\">    &lt;module&gt;app2&lt;/module&gt;</span><br><span class=\"line\">  &lt;/modules&gt;</span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Maven命令\"><a href=\"#Maven命令\" class=\"headerlink\" title=\"Maven命令\"></a>Maven命令</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn compile // 编译项目源码</span><br><span class=\"line\">mvn test // 使用合适单元测试框架进行测试</span><br><span class=\"line\">mvn verify // 执行所有检查，验证包是有效的</span><br><span class=\"line\">mvn install // 安装包到本地仓库</span><br><span class=\"line\">mvn clean package -Dmaven.test.skip=true // 跳过单元测试</span><br><span class=\"line\">mvn compile process-resources package # 包含静态资源的编译打包</span><br><span class=\"line\">mvn clean package -pl com.emog:cpe-app -am -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Maven全局配置settings-xml\"><a href=\"#Maven全局配置settings-xml\" class=\"headerlink\" title=\"Maven全局配置settings.xml\"></a>Maven全局配置settings.xml</h4><p>settings.xml存在两个位置</p>\n<ul>\n<li>${maven_home}&#x2F;conf&#x2F;settings.xml &#x2F;&#x2F; 全局配置</li>\n<li>${home}&#x2F;.m2&#x2F;settings.xml &#x2F;&#x2F; 用户配置</li>\n</ul>\n<p>pom.xml是本地项目配置</p>\n<p>说明：pom.xml &gt; 用户配置 &gt; 全局配置（使用优先级比较）</p>\n<p>settings.xml内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;localRepository&gt;~/.m2/repository&lt;/localRepository&gt; // 本地仓库路径配置</span><br><span class=\"line\">&lt;servers&gt; // 一些包的拉取需要认证，这些信息不适合配在pom</span><br><span class=\"line\">&lt;mirrors&gt; // 仓库镜像地址</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"常用问题\"><a href=\"#常用问题\" class=\"headerlink\" title=\"常用问题\"></a>常用问题</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 执行 mvn package 或 mvn install 时，会自动编译所有单元测试(src/test/java 目录下的代码)，如何跳过这一步？</span><br><span class=\"line\">  在执行命令的后面，添加命令行参数 -Dmaven.test.skip=true 或者 -DskipTests=true</span><br><span class=\"line\"></span><br><span class=\"line\">参考：https://github.com/dunwu/java-tutorial/blob/master/docs/11.%E8%BD%AF%E4%BB%B6/01.%E6%9E%84%E5%BB%BA/01.Maven/04.Maven%E5%AE%9E%E6%88%98%E9%97%AE%E9%A2%98%E5%92%8C%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.md</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署-maven-私服-Nexus\"><a href=\"#部署-maven-私服-Nexus\" class=\"headerlink\" title=\"部署 maven 私服 Nexus\"></a>部署 maven 私服 Nexus</h3><p>参考：<a href=\"https://github.com/dunwu/java-tutorial/blob/master/docs/11.%E8%BD%AF%E4%BB%B6/01.%E6%9E%84%E5%BB%BA/01.Maven/05.Maven%E6%95%99%E7%A8%8B%E4%B9%8B%E5%8F%91%E5%B8%83jar%E5%88%B0%E7%A7%81%E6%9C%8D%E6%88%96%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93.md\">https://github.com/dunwu/java-tutorial/blob/master/docs/11.%E8%BD%AF%E4%BB%B6/01.%E6%9E%84%E5%BB%BA/01.Maven/05.Maven%E6%95%99%E7%A8%8B%E4%B9%8B%E5%8F%91%E5%B8%83jar%E5%88%B0%E7%A7%81%E6%9C%8D%E6%88%96%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93.md</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Maven\"><a href=\"#Maven\" class=\"headerlink\" title=\"Maven\"></a>Maven</h3><h4 id=\"属性介绍\"><a href=\"#属性介绍\" class=\"headerlink\" title=\"属性介绍\"></a>属性介绍</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;groupId&gt;   // 团队标志。约定为组织的逆向名称，如org.apache</span><br><span class=\"line\">&lt;artifactId&gt; // 项目唯一标识符。如tomcat，不要在artifactId包含.</span><br><span class=\"line\">&lt;packaging&gt;  // 项目打包后的输出，默认为jar，类型为war产生一个web应用。</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h4><p>环境：centos7</p>\n<p>官网地址：<a href=\"https://maven.apache.org/download.cgi\">https://maven.apache.org/download.cgi</a></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /opt/maven</span><br><span class=\"line\">wget https://dlcdn.apache.org/maven/maven-3/3.8.6/binaries/apache-maven-3.8.6-bin.tar.gz --no-check-certificate</span><br><span class=\"line\">tar -xzvf apache-maven-3.8.6-bin.tar.gz</span><br><span class=\"line\">mv apache-maven-3.8.6 maven</span><br><span class=\"line\"></span><br><span class=\"line\"># vi /etc/profile，加入</span><br><span class=\"line\"></span><br><span class=\"line\">export PATH=$PATH:/opt/maven/maven/bin</span><br><span class=\"line\"></span><br><span class=\"line\"># 执行 source /etc/profile</span><br><span class=\"line\"></span><br><span class=\"line\">mvn -v</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"pom-xml介绍\"><a href=\"#pom-xml介绍\" class=\"headerlink\" title=\"pom.xml介绍\"></a>pom.xml介绍</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># &lt;dependences&gt;标签包含的属性标签：</span><br><span class=\"line\">&lt;groupId&gt; // 项目组织，对应包结构</span><br><span class=\"line\">&lt;artifactId&gt; // 项目名称，对应根目录</span><br><span class=\"line\">&lt;version&gt; // jar版本，可以在&lt;properties&gt;中定义</span><br><span class=\"line\">&lt;scope&gt; // jar包作用范围。可以填写compile，runtime，test，system，provided。</span><br><span class=\"line\">&lt;dependenceManage&gt; // 依赖声明，包不会被mvn加载，但可以被子pom.xml继承，这样子pom只需要声明&lt;groupId&gt;和&lt;artifactId&gt;，dependenceManage就是用来做版本统一的。</span><br><span class=\"line\">&lt;properties&gt; // 定义属性，$&#123;property&#125;调用</span><br><span class=\"line\">&lt;properties&gt;</span><br><span class=\"line\">  &lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;  // 指定maven构建时的编码</span><br><span class=\"line\">  &lt;maven.compiler.source&gt;1.7&lt;/maven.compiler.source&gt; // 指定构建时的jdk版本</span><br><span class=\"line\">  &lt;maven.compiler.target&gt;1.7&lt;/maven.compiler.target&gt;</span><br><span class=\"line\">&lt;/properties&gt;</span><br></pre></td></tr></table></figure>\n\n<p>如何寻找jar包？</p>\n<p>在 (<a href=\"http://mvnrepository.com/\">http://mvnrepository.com/</a>) 搜索关键字，如log4j。</p>\n<h4 id=\"如何一次编译多个project？\"><a href=\"#如何一次编译多个project？\" class=\"headerlink\" title=\"如何一次编译多个project？\"></a>如何一次编译多个project？</h4><p>父工程app包含子app1和app2，在app的pom.xml引入两个字module</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;project&gt;</span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;modules&gt;</span><br><span class=\"line\">    &lt;module&gt;app1&lt;/module&gt;</span><br><span class=\"line\">    &lt;module&gt;app2&lt;/module&gt;</span><br><span class=\"line\">  &lt;/modules&gt;</span><br><span class=\"line\">...</span><br><span class=\"line\">&lt;/project&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"Maven命令\"><a href=\"#Maven命令\" class=\"headerlink\" title=\"Maven命令\"></a>Maven命令</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn compile // 编译项目源码</span><br><span class=\"line\">mvn test // 使用合适单元测试框架进行测试</span><br><span class=\"line\">mvn verify // 执行所有检查，验证包是有效的</span><br><span class=\"line\">mvn install // 安装包到本地仓库</span><br><span class=\"line\">mvn clean package -Dmaven.test.skip=true // 跳过单元测试</span><br><span class=\"line\">mvn compile process-resources package # 包含静态资源的编译打包</span><br><span class=\"line\">mvn clean package -pl com.emog:cpe-app -am -Dmaven.test.skip=true</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"Maven全局配置settings-xml\"><a href=\"#Maven全局配置settings-xml\" class=\"headerlink\" title=\"Maven全局配置settings.xml\"></a>Maven全局配置settings.xml</h4><p>settings.xml存在两个位置</p>\n<ul>\n<li>${maven_home}&#x2F;conf&#x2F;settings.xml &#x2F;&#x2F; 全局配置</li>\n<li>${home}&#x2F;.m2&#x2F;settings.xml &#x2F;&#x2F; 用户配置</li>\n</ul>\n<p>pom.xml是本地项目配置</p>\n<p>说明：pom.xml &gt; 用户配置 &gt; 全局配置（使用优先级比较）</p>\n<p>settings.xml内容：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;localRepository&gt;~/.m2/repository&lt;/localRepository&gt; // 本地仓库路径配置</span><br><span class=\"line\">&lt;servers&gt; // 一些包的拉取需要认证，这些信息不适合配在pom</span><br><span class=\"line\">&lt;mirrors&gt; // 仓库镜像地址</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"常用问题\"><a href=\"#常用问题\" class=\"headerlink\" title=\"常用问题\"></a>常用问题</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 执行 mvn package 或 mvn install 时，会自动编译所有单元测试(src/test/java 目录下的代码)，如何跳过这一步？</span><br><span class=\"line\">  在执行命令的后面，添加命令行参数 -Dmaven.test.skip=true 或者 -DskipTests=true</span><br><span class=\"line\"></span><br><span class=\"line\">参考：https://github.com/dunwu/java-tutorial/blob/master/docs/11.%E8%BD%AF%E4%BB%B6/01.%E6%9E%84%E5%BB%BA/01.Maven/04.Maven%E5%AE%9E%E6%88%98%E9%97%AE%E9%A2%98%E5%92%8C%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.md</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"部署-maven-私服-Nexus\"><a href=\"#部署-maven-私服-Nexus\" class=\"headerlink\" title=\"部署 maven 私服 Nexus\"></a>部署 maven 私服 Nexus</h3><p>参考：<a href=\"https://github.com/dunwu/java-tutorial/blob/master/docs/11.%E8%BD%AF%E4%BB%B6/01.%E6%9E%84%E5%BB%BA/01.Maven/05.Maven%E6%95%99%E7%A8%8B%E4%B9%8B%E5%8F%91%E5%B8%83jar%E5%88%B0%E7%A7%81%E6%9C%8D%E6%88%96%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93.md\">https://github.com/dunwu/java-tutorial/blob/master/docs/11.%E8%BD%AF%E4%BB%B6/01.%E6%9E%84%E5%BB%BA/01.Maven/05.Maven%E6%95%99%E7%A8%8B%E4%B9%8B%E5%8F%91%E5%B8%83jar%E5%88%B0%E7%A7%81%E6%9C%8D%E6%88%96%E4%B8%AD%E5%A4%AE%E4%BB%93%E5%BA%93.md</a></p>\n"},{"title":"第41期：sed","date":"2023-05-26T06:35:36.000Z","_content":"### demo\n```\n1. 把文件所有c1的文本变成d1\nsed -i 's/c1/d1/g'\n\n# 当替换字符存在特殊的转义字符，如`\"`，可加`\\`进行防转义\nsed -i -e \"s/sandbox_image = \\\"k8s.gcr.io\\/pause:3.5\\\"/sandbox_image = \\\"registry.aliyuncs.com\\/google_containers\\/pause:3.4.1\\\"/g\" /etc/containerd/config.toml\nsed -i -e \"s/runtime_type = \\\"io.containerd.runc.v2\\\"/runtime_type = \\\"io.containerd.runtime.v1.linux\\\"/g\" /etc/containerd/config.toml\n```\n说明：\n- `-e`表示使用可以在sed中执行多条语句，如`sed -e 's/wang/w/g;s/xu/x/g' user.txt`\n- `-i`表示对文本文件进行字符替换，不加不会实际影响到文本\n- 替换的语句最外部最好加双引号\n- 替换的字符原本存在转义字符需要加\\防止转义","source":"_posts/第41期：sed.md","raw":"---\ntitle: 第41期：sed\ndate: 2023-05-26 14:35:36\ntags:\n---\n### demo\n```\n1. 把文件所有c1的文本变成d1\nsed -i 's/c1/d1/g'\n\n# 当替换字符存在特殊的转义字符，如`\"`，可加`\\`进行防转义\nsed -i -e \"s/sandbox_image = \\\"k8s.gcr.io\\/pause:3.5\\\"/sandbox_image = \\\"registry.aliyuncs.com\\/google_containers\\/pause:3.4.1\\\"/g\" /etc/containerd/config.toml\nsed -i -e \"s/runtime_type = \\\"io.containerd.runc.v2\\\"/runtime_type = \\\"io.containerd.runtime.v1.linux\\\"/g\" /etc/containerd/config.toml\n```\n说明：\n- `-e`表示使用可以在sed中执行多条语句，如`sed -e 's/wang/w/g;s/xu/x/g' user.txt`\n- `-i`表示对文本文件进行字符替换，不加不会实际影响到文本\n- 替换的语句最外部最好加双引号\n- 替换的字符原本存在转义字符需要加\\防止转义","slug":"第41期：sed","published":1,"updated":"2024-03-06T06:55:18.366Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvtej000zbklnez23d9jl","content":"<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 把文件所有c1的文本变成d1</span><br><span class=\"line\">sed -i &#x27;s/c1/d1/g&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\"># 当替换字符存在特殊的转义字符，如`&quot;`，可加`\\`进行防转义</span><br><span class=\"line\">sed -i -e &quot;s/sandbox_image = \\&quot;k8s.gcr.io\\/pause:3.5\\&quot;/sandbox_image = \\&quot;registry.aliyuncs.com\\/google_containers\\/pause:3.4.1\\&quot;/g&quot; /etc/containerd/config.toml</span><br><span class=\"line\">sed -i -e &quot;s/runtime_type = \\&quot;io.containerd.runc.v2\\&quot;/runtime_type = \\&quot;io.containerd.runtime.v1.linux\\&quot;/g&quot; /etc/containerd/config.toml</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><code>-e</code>表示使用可以在sed中执行多条语句，如<code>sed -e &#39;s/wang/w/g;s/xu/x/g&#39; user.txt</code></li>\n<li><code>-i</code>表示对文本文件进行字符替换，不加不会实际影响到文本</li>\n<li>替换的语句最外部最好加双引号</li>\n<li>替换的字符原本存在转义字符需要加\\防止转义</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"demo\"><a href=\"#demo\" class=\"headerlink\" title=\"demo\"></a>demo</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 把文件所有c1的文本变成d1</span><br><span class=\"line\">sed -i &#x27;s/c1/d1/g&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\"># 当替换字符存在特殊的转义字符，如`&quot;`，可加`\\`进行防转义</span><br><span class=\"line\">sed -i -e &quot;s/sandbox_image = \\&quot;k8s.gcr.io\\/pause:3.5\\&quot;/sandbox_image = \\&quot;registry.aliyuncs.com\\/google_containers\\/pause:3.4.1\\&quot;/g&quot; /etc/containerd/config.toml</span><br><span class=\"line\">sed -i -e &quot;s/runtime_type = \\&quot;io.containerd.runc.v2\\&quot;/runtime_type = \\&quot;io.containerd.runtime.v1.linux\\&quot;/g&quot; /etc/containerd/config.toml</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><code>-e</code>表示使用可以在sed中执行多条语句，如<code>sed -e &#39;s/wang/w/g;s/xu/x/g&#39; user.txt</code></li>\n<li><code>-i</code>表示对文本文件进行字符替换，不加不会实际影响到文本</li>\n<li>替换的语句最外部最好加双引号</li>\n<li>替换的字符原本存在转义字符需要加\\防止转义</li>\n</ul>\n"},{"title":"第42期：xargs","date":"2023-05-26T06:39:40.000Z","_content":"### xargs作用\n接收管道符传递过来的数据，并将数据作为下一个命令的参数\n\n### 用法\n用法1\n```ps aux|grep code|awk '{ print $2 }'|xargs```\n输出：pid1 pid2          # xargs 等价于 xargs，xargs会把空白和换行替换成空格\n\n用法2\n```ps aux|grep code|awk '{ print $2 }'|xargs -I {} kill {}```\nxargs -I 指定替换字符串为{}，{}代表着管道传递的参数，后面再使用{}会替换成相应参数值。\n","source":"_posts/第42期：xargs.md","raw":"---\ntitle: 第42期：xargs\ndate: 2023-05-26 14:39:40\ntags:\n---\n### xargs作用\n接收管道符传递过来的数据，并将数据作为下一个命令的参数\n\n### 用法\n用法1\n```ps aux|grep code|awk '{ print $2 }'|xargs```\n输出：pid1 pid2          # xargs 等价于 xargs，xargs会把空白和换行替换成空格\n\n用法2\n```ps aux|grep code|awk '{ print $2 }'|xargs -I {} kill {}```\nxargs -I 指定替换字符串为{}，{}代表着管道传递的参数，后面再使用{}会替换成相应参数值。\n","slug":"第42期：xargs","published":1,"updated":"2024-03-06T06:55:18.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvtek0010bklng5bg3r9f","content":"<h3 id=\"xargs作用\"><a href=\"#xargs作用\" class=\"headerlink\" title=\"xargs作用\"></a>xargs作用</h3><p>接收管道符传递过来的数据，并将数据作为下一个命令的参数</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p>用法1<br><code>ps aux|grep code|awk &#39;&#123; print $2 &#125;&#39;|xargs</code><br>输出：pid1 pid2          # xargs 等价于 xargs，xargs会把空白和换行替换成空格</p>\n<p>用法2<br><code>ps aux|grep code|awk &#39;&#123; print $2 &#125;&#39;|xargs -I &#123;&#125; kill &#123;&#125;</code><br>xargs -I 指定替换字符串为{}，{}代表着管道传递的参数，后面再使用{}会替换成相应参数值。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"xargs作用\"><a href=\"#xargs作用\" class=\"headerlink\" title=\"xargs作用\"></a>xargs作用</h3><p>接收管道符传递过来的数据，并将数据作为下一个命令的参数</p>\n<h3 id=\"用法\"><a href=\"#用法\" class=\"headerlink\" title=\"用法\"></a>用法</h3><p>用法1<br><code>ps aux|grep code|awk &#39;&#123; print $2 &#125;&#39;|xargs</code><br>输出：pid1 pid2          # xargs 等价于 xargs，xargs会把空白和换行替换成空格</p>\n<p>用法2<br><code>ps aux|grep code|awk &#39;&#123; print $2 &#125;&#39;|xargs -I &#123;&#125; kill &#123;&#125;</code><br>xargs -I 指定替换字符串为{}，{}代表着管道传递的参数，后面再使用{}会替换成相应参数值。</p>\n"},{"title":"第43期：rabbitmq","date":"2023-05-26T12:58:39.000Z","_content":"### 原理\n```\nProducer(生产者) -> Exchange（交换机）-> Queue（队列）-> Consumer（消费者）\n\n- 交换机，接收生产者发送的消息，并根据路由键发送给指定队列\n- 队列，存储从交换机发来的消息\n```\n参考：https://www.macrozheng.com/mall/reference/rabbitmq_start.html#windows%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85","source":"_posts/第43期：rabbitmq.md","raw":"---\ntitle: 第43期：rabbitmq\ndate: 2023-05-26 20:58:39\ntags:\n---\n### 原理\n```\nProducer(生产者) -> Exchange（交换机）-> Queue（队列）-> Consumer（消费者）\n\n- 交换机，接收生产者发送的消息，并根据路由键发送给指定队列\n- 队列，存储从交换机发来的消息\n```\n参考：https://www.macrozheng.com/mall/reference/rabbitmq_start.html#windows%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85","slug":"第43期：rabbitmq","published":1,"updated":"2024-03-06T06:55:18.367Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvtel0011bklnfss06sk1","content":"<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Producer(生产者) -&gt; Exchange（交换机）-&gt; Queue（队列）-&gt; Consumer（消费者）</span><br><span class=\"line\"></span><br><span class=\"line\">- 交换机，接收生产者发送的消息，并根据路由键发送给指定队列</span><br><span class=\"line\">- 队列，存储从交换机发来的消息</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://www.macrozheng.com/mall/reference/rabbitmq_start.html#windows%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85\">https://www.macrozheng.com/mall/reference/rabbitmq_start.html#windows%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Producer(生产者) -&gt; Exchange（交换机）-&gt; Queue（队列）-&gt; Consumer（消费者）</span><br><span class=\"line\"></span><br><span class=\"line\">- 交换机，接收生产者发送的消息，并根据路由键发送给指定队列</span><br><span class=\"line\">- 队列，存储从交换机发来的消息</span><br></pre></td></tr></table></figure>\n<p>参考：<a href=\"https://www.macrozheng.com/mall/reference/rabbitmq_start.html#windows%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85\">https://www.macrozheng.com/mall/reference/rabbitmq_start.html#windows%E4%B8%8B%E7%9A%84%E5%AE%89%E8%A3%85</a></p>\n"},{"title":"第4期：AI工具集合汇总","date":"2023-05-18T06:40:12.000Z","_content":"\nGPT-DEMO(https://www.gptdemo.net/)\n\n集成chatgpt、bing、Bard的chrome插件(https://chathub.gg/)","source":"_posts/第4期：AI工具集合汇总.md","raw":"---\ntitle: 第4期：AI工具集合汇总\ndate: 2023-05-18 14:40:12\ntags:\n---\n\nGPT-DEMO(https://www.gptdemo.net/)\n\n集成chatgpt、bing、Bard的chrome插件(https://chathub.gg/)","slug":"第4期：AI工具集合汇总","published":1,"updated":"2024-03-06T09:56:20.677Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvtem0012bklnerdienw1","content":"<p>GPT-DEMO(<a href=\"https://www.gptdemo.net/\">https://www.gptdemo.net/</a>)</p>\n<p>集成chatgpt、bing、Bard的chrome插件(<a href=\"https://chathub.gg/\">https://chathub.gg/</a>)</p>\n","site":{"data":{}},"excerpt":"","more":"<p>GPT-DEMO(<a href=\"https://www.gptdemo.net/\">https://www.gptdemo.net/</a>)</p>\n<p>集成chatgpt、bing、Bard的chrome插件(<a href=\"https://chathub.gg/\">https://chathub.gg/</a>)</p>\n"},{"title":"第5期：CDN","date":"2023-05-19T16:21:56.000Z","_content":"### CDN介绍\nContent Delivery Network 内容分发网络\n\n原理：自有域名以CNAME方式绑定运营商提供对加速域名，CDN配置目标源站，获取静态资源返回给边缘节点。\n\n以阿里云CDN为例:\n\n- 添加域名\n```\n加速域名  a.example.com（自有域名）\n业务类型  图片小文件\n加速区域  仅中国内地\n\n源站信息（以OSS为例）\n  - 源站类型：oss\n  - 域名：bucket.oss-cn-beijing.aliyun.com\n  - 优先级：主\n  - 端口：80\n```\n- 缓存配置\n可以设置静态文件如png的过期时间，提高命中率\n```\n地址：jpg\n类型：文件后缀名\n过期时间：10分钟\n```\n- 访问控制\n设置防盗链白名单，以实现身份验证（允许空refer）\n```\nlocalhost\na.b.com\n*.example.com\n```\n- 刷新预热\n```\n刷新：删除cdn节点上的缓存数据，重新回源取数据\n预热：从源站取数据存到cdn节点，提升用户体验\n```\n\n","source":"_posts/第5期：CDN.md","raw":"---\ntitle: 第5期：CDN\ndate: 2023-05-20 00:21:56\ntags:\n---\n### CDN介绍\nContent Delivery Network 内容分发网络\n\n原理：自有域名以CNAME方式绑定运营商提供对加速域名，CDN配置目标源站，获取静态资源返回给边缘节点。\n\n以阿里云CDN为例:\n\n- 添加域名\n```\n加速域名  a.example.com（自有域名）\n业务类型  图片小文件\n加速区域  仅中国内地\n\n源站信息（以OSS为例）\n  - 源站类型：oss\n  - 域名：bucket.oss-cn-beijing.aliyun.com\n  - 优先级：主\n  - 端口：80\n```\n- 缓存配置\n可以设置静态文件如png的过期时间，提高命中率\n```\n地址：jpg\n类型：文件后缀名\n过期时间：10分钟\n```\n- 访问控制\n设置防盗链白名单，以实现身份验证（允许空refer）\n```\nlocalhost\na.b.com\n*.example.com\n```\n- 刷新预热\n```\n刷新：删除cdn节点上的缓存数据，重新回源取数据\n预热：从源站取数据存到cdn节点，提升用户体验\n```\n\n","slug":"第5期：CDN","published":1,"updated":"2024-03-06T09:56:16.909Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvten0013bkln30mk3acf","content":"<h3 id=\"CDN介绍\"><a href=\"#CDN介绍\" class=\"headerlink\" title=\"CDN介绍\"></a>CDN介绍</h3><p>Content Delivery Network 内容分发网络</p>\n<p>原理：自有域名以CNAME方式绑定运营商提供对加速域名，CDN配置目标源站，获取静态资源返回给边缘节点。</p>\n<p>以阿里云CDN为例:</p>\n<ul>\n<li>添加域名<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">加速域名  a.example.com（自有域名）</span><br><span class=\"line\">业务类型  图片小文件</span><br><span class=\"line\">加速区域  仅中国内地</span><br><span class=\"line\"></span><br><span class=\"line\">源站信息（以OSS为例）</span><br><span class=\"line\">  - 源站类型：oss</span><br><span class=\"line\">  - 域名：bucket.oss-cn-beijing.aliyun.com</span><br><span class=\"line\">  - 优先级：主</span><br><span class=\"line\">  - 端口：80</span><br></pre></td></tr></table></figure></li>\n<li>缓存配置<br>可以设置静态文件如png的过期时间，提高命中率<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">地址：jpg</span><br><span class=\"line\">类型：文件后缀名</span><br><span class=\"line\">过期时间：10分钟</span><br></pre></td></tr></table></figure></li>\n<li>访问控制<br>设置防盗链白名单，以实现身份验证（允许空refer）<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost</span><br><span class=\"line\">a.b.com</span><br><span class=\"line\">*.example.com</span><br></pre></td></tr></table></figure></li>\n<li>刷新预热<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">刷新：删除cdn节点上的缓存数据，重新回源取数据</span><br><span class=\"line\">预热：从源站取数据存到cdn节点，提升用户体验</span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"CDN介绍\"><a href=\"#CDN介绍\" class=\"headerlink\" title=\"CDN介绍\"></a>CDN介绍</h3><p>Content Delivery Network 内容分发网络</p>\n<p>原理：自有域名以CNAME方式绑定运营商提供对加速域名，CDN配置目标源站，获取静态资源返回给边缘节点。</p>\n<p>以阿里云CDN为例:</p>\n<ul>\n<li>添加域名<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">加速域名  a.example.com（自有域名）</span><br><span class=\"line\">业务类型  图片小文件</span><br><span class=\"line\">加速区域  仅中国内地</span><br><span class=\"line\"></span><br><span class=\"line\">源站信息（以OSS为例）</span><br><span class=\"line\">  - 源站类型：oss</span><br><span class=\"line\">  - 域名：bucket.oss-cn-beijing.aliyun.com</span><br><span class=\"line\">  - 优先级：主</span><br><span class=\"line\">  - 端口：80</span><br></pre></td></tr></table></figure></li>\n<li>缓存配置<br>可以设置静态文件如png的过期时间，提高命中率<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">地址：jpg</span><br><span class=\"line\">类型：文件后缀名</span><br><span class=\"line\">过期时间：10分钟</span><br></pre></td></tr></table></figure></li>\n<li>访问控制<br>设置防盗链白名单，以实现身份验证（允许空refer）<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">localhost</span><br><span class=\"line\">a.b.com</span><br><span class=\"line\">*.example.com</span><br></pre></td></tr></table></figure></li>\n<li>刷新预热<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">刷新：删除cdn节点上的缓存数据，重新回源取数据</span><br><span class=\"line\">预热：从源站取数据存到cdn节点，提升用户体验</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"第6期：Nginx","date":"2023-05-19T16:42:05.000Z","_content":"### 服务管理\n```\nnginx # 启动\nnginx -t # 测试配置\nnginx -s reload # 重载配置\n```\n\n### 示例\n```\nserver {\n    listen      88;\n    server_name localhost;\n    charset     utf-8;\n    index       index.html index.htm;\n    access_log  logs/access.log;\n    location / {\n        return 200 \"test conf\";\n    }\n}\n```\n### 重定向（地址会变）\n```\nlocation / {\n    return 302 http://localhost:89/$request_uri;\n}\n\n# redirect.conf\nserver {\n    listen      89;\n    server_name localhost;\n    charset     utf-8;\n    index       index.html index.htm;\n    access_log  logs/access.log;\n    location / {\n        return 200 \"after redirect uri\";\n    }\n}\n\n进行测试：curl -L localhost:88\n返回：after redirect uri\n```\n### 匹配以/api/开头的uri\n```\nlocation ^/api/ {\n  proxy_pass http://loclhost:8090;\n}\n```\n#### 一、centos7安装Nginx\n##### 源码安装\n- [所有nginx版本](http://nginx.org/download/)\n\nwget下载tar.gz包\n```\nwget http://nginx.org/download/nginx-1.20.1.tar.gz\n\n# 解压\ntar xzf nginx-1.20.1.tar.gz\n```\n\n编译\n```\ncd nginx-1.20.1 && ./configure\n```\n注意：`安装报错误的话比如：\"C compiler cc is not found\"，这个就是缺少编译环境，安装一下就可以了 yum -y install gcc make gcc-c++ openssl-devel`\n\n安装\n```\nmake && make install\n```\n说明：\n- nignx会被安装到`/usr/local/nginx`目录下\n\nnginx测试\n```\n$ which nginx\n/usr/bin/nginx\n\nnginx # 启动nginx\nps aux|grep nginx # 查看nginx进程\nnginx -s stop # 停止nginx\n\nnginx -v # nginx 版本\nnginx -t # 测试配置文件\nnginx -s reload # 重载配置\n\n```\n\n防火墙设置\n```\nsystemctl status firewalld # 查看防火墙状态\n```\n\n设置放行端口，编辑`/etc/firewalld/zones/public.xml`文件，在</zone>前面加:\n\n```\n<zone>\n  ...\n  <port port=\"30000-30100\" protocol=\"tcp\"/>\n  <port port=\"80\" protocol=\"tcp\"/>\n</zone>\n```\n说明：\n- 可以设置端口段或单个端口\n\n配完文件后重载`firewall-cmd --reload`，查看被放行的端口\n```\nfirewall-cmd --list-ports \n```\n\n#### 二、配置文件\n查看`/usr/local/nginx/conf/nginx.conf`文件：\n```\nworker_processes  1;\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    gzip  on;\n    server {\n        listen       80;\n        server_name  localhost;\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n    include  vhost/*.conf;\n}\n\n```\n说明：\n- `worker_processes` - work进程数，一般根据cpu核数来设置，可以设为和CPU的数量一样\n- `worker_connections` - 单个work进程可以连的并发连接数，连接数依赖于系统级别的进程可打开文件数，`ulimit -n`可查看\n  \n  `cat /proc/nginx_work_pid/limits` 里面的`Max open files`也可查询。\n\n- `log_format` - 设置nginx日志格式\n- `access_log` - 设置文件存储位置和应用的日志格式\n- `sendfile` - 开启文件高效传输模式\n- `keepalive_timeout` - 客户端和nginx之间建立的tcp长连接维持时间\n- `gzip` - 开启gzip模块，文件被压缩传到客户端，优化传输效率，有效节省带宽。\n- `listen 80` - 监听80端口\n- `root   html;` - 相当于`root /usr/local/nginx/html`\n- `index index.html` - 查找`/usr/local/nginx/html`目录下的index.html文件\n- `include` - 添加配置文件\n\n示例：在vhost下添加配置文件`test.conf`\n```\nserver {\n    listen 80;\n    server_name 192.168.1.189;\n    location /ricky/ {\n\t    return 200 \"im ricky\";\n    }\n}\n```\n注意：\n- server_name指定为本机的ip而不是localhost，因为上一目录nginx.conf配置的localhost\n- 指定访问前缀为/ricky/\n\n检查并重载配置\n```\nnginx -t\nnginx -s reload\n```\n\n访问：curl http://192.168.1.189:80/ricky/  \n注意：\n- 访问的时候`192.168.1.189` 不能写成localhost，不然匹配规则就跑到nginx.conf里面的server去了\n- ricky后面的`/`不可以省略；如果想省略，可以把`location /ricky/`写成`location /ricky`\n  \n  `location /ricky`既会匹配到`http://192.168.1.189:80/ricky`的路由，也会匹配到`http://192.168.1.189:80/rickyadsafaf/a`\n\n  总的来说，nginx先在所有配置文件中匹配端口->再到server_name->具体location(location之间又有优先级的区分)\n\n#### 三、location优先级\n优先级高到低\n- `location = /uri` - 字符 `=` 表示精准匹配（精准匹配优先级最高）\n- `location ^~ /uri` - 字符 `^` 表示以/test开头的路径，`~` 表区分大小写；但是 `~*` 表不区分大小写(带 `~*` 等修饰符优先级次之)\n- `location /url` - 不带修饰符的前缀再次之\n- `location /` - 最后是交给`/`通用匹配。\n\n示例1：比较精准和带修饰符\n```\nserver {\n    listen 80;\n    server_name 192.168.1.189;\n    location = /ricky {\n\t    return 200 \"精准\";\n    }\n\n    location ^~ /ricky {\n\t    return 200 \"修饰符\";\n    }\n}\n\n```\n重载配置并访问：`curl http://192.168.1.189:80/ricky`，输出`精准`\n\n示例2：比较带修饰符和不带修饰符\n```\nserver {\n    listen 80;\n    server_name 192.168.1.189;\n    location ^~ ricky {\n\t    return 200 \"精准\";\n    }\n\n    location / {\n\t    return 200 \"通用\";\n    }\n}\n\n```\n重载配置并访问：`curl http://192.168.1.189:80/ricky`，输出`精准`；访问不在/ricky规则内的就打出`通用`，如`curl http://192.168.1.189:80/ris`\n\n#### nginx不需要后端就可以返回远程用户ip的配置\n配置:\n```\nlocation /ip {\n    default_type text/plain;\n    return 200 $remote_addr;\n}\n```\n访问\n```\n$ curl https://example.com/ip\n192.168.1.187\n```\n\n返回json格式：\n```\n$ curl -s https://example.com/json_ip | jq\n{\n    \"ip\": \"192.168.1.187\"\n}\n```\n### nginx.conf文件详解\n```\n# 定义nginx运行的用户和用户组\nuser www www;\n\n# nginx work进程数，一般与cpu核数一致。\nworker_processes 8;\n\n# 错误日志类型定义\nerror_log /var/log/nginx/error.log info;\n\n# 进程文件\npid /var/run/nginx.pid;\n\n# 1个nginx进程最多能打开的文件描述符数，建议与ulimit -n(系统最大能打开的文件描述符数)一致\nwork_rlimit_nofile 65535;\n\n# \nevents {\n  # 高性能网络io模型\n  use epoll;\n  # 单进程最大连接数\n  work_connections 65535; \n}\n\nhttp {\n  include mime.type; # 文件扩展与文件类型名映射表\n  default_type application/ocetet-stream; # 默认文件类型\n  # charset utf-8; # 默认编码\n  client_header_buffer_size 32; # 上传文件大小限制\n  # 所谓请求报文包含了请求头(如 User-Agent： 或 Accept：)+请求行(GET /index.html HTTP/1.1)+请求body\n  large_client_header_buffers 4 64k; # 设定请求行+请求头不能超过4x64k\n  client_max_body_size 8m;  # 设置body(或上传文件)最大值8m\n  sendfile on; # 开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。\n\n  autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。\n  keepalive_timeout 120; # 长连接超时时间，单位s\n\n  #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度\n  fastcgi_connect_timeout 300;\n  fastcgi_send_timeout 300;\n  fastcgi_read_timeout 300;\n  fastcgi_buffer_size 64k;\n  fastcgi_buffers 4 64k;\n  fastcgi_busy_buffers_size 128k;\n  fastcgi_temp_file_write_size 128k;\n\n  #gzip模块设置\n  gzip on;        #开启gzip压缩输出\n  gzip_min_length 1k; #最小压缩文件大小\n  gzip_buffers 4 16k; #压缩缓冲区\n  gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）开始压缩的http协议版本(可以不设置,目前几乎全是1.1协议)\n  gzip_comp_level 2;   #推荐6压缩级别(级别越高,压的越小,越浪费CPU计算资源)\n  gzip_types text/plain application/x-javascript text/css application/xml;\n  #压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。\n  gzip_vary on;   # 是否传输gzip压缩标志\n  #limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用\n\n  upstream blog.ha97.com {\n    #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。\n    server 192.168.80.121:80 weight=3;\n    server 192.168.80.122:80 weight=2;\n    server 192.168.80.123:80 weight=3;\n  }\n\n  #虚拟主机的配置\n  server\n  {\n      #监听端口\n      listen 80;\n      #域名可以有多个，用空格隔开\n      server_name www.ha97.com ha97.com;\n      index index.html index.htm index.php;\n      root /data/www/ha97;\n      location ~ .*\\.(php|php5)?$\n      {\n      fastcgi_pass 127.0.0.1:9000;\n      fastcgi_index index.php;\n      include fastcgi.conf;\n      }\n      #图片缓存时间设置\n      location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$\n      {\n      expires 10d;\n      }\n      #JS和CSS缓存时间设置\n      location ~ .*\\.(js|css)?$\n      {\n      expires 1h;\n      }\n      #日志格式设定\n      log_format access '$remote_addr - $remote_user [$time_local] \"$request\" '\n      '$status $body_bytes_sent \"$http_referer\" '\n      '\"$http_user_agent\" $http_x_forwarded_for';\n      #定义本虚拟主机的访问日志\n      access_log /var/log/nginx/ha97access.log access;\n\n      #对 \"/\" 启用反向代理\n      location / {\n      proxy_pass http://127.0.0.1:88;\n      proxy_redirect off;\n      proxy_set_header X-Real-IP $remote_addr;\n      #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      #以下是一些反向代理的配置，可选。\n      proxy_set_header Host $host;\n      client_max_body_size 10m; #允许客户端请求的最大单文件字节数\n      client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，\n      proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)\n      proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)\n      proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)\n      proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n      proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置\n      proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）\n      proxy_temp_file_write_size 64k;\n      #设定缓存文件夹大小，大于这个值，将从upstream服务器传\n      }\n\n      #设定查看Nginx状态的地址\n      location /NginxStatus {\n      stub_status on;\n      access_log on;\n      auth_basic \"NginxStatus\";\n      auth_basic_user_file conf/htpasswd;\n      #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。\n      }\n\n      #本地动静分离反向代理配置\n      #所有jsp的页面均交由tomcat或resin处理\n      location ~ .(jsp|jspx|do)?$ {\n      proxy_set_header Host $host;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_pass http://127.0.0.1:8080;\n      }\n      #所有静态文件由nginx直接读取不经过tomcat或resin\n      location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$\n      { expires 15d; }\n      location ~ .*.(js|css)?$\n      { expires 1h; }\n  }\n\n}\n\n\n```\n### 常用nginx配置demo\n\n```\nuser  nginx nginx;\nworker_processes  1;\n\nerror_log  /var/log/nginx/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\npid        /var/run/nginx/nginx.pid;\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #隐藏Nginx版本信息，禁止网站目录浏览\n    server_tokens off;\n    autoindex off;\n    #当FastCGI后端服务器处理请求给出http响应码为4xx和5xx时，就转发给nginx\n    fastcgi_intercept_errors on;\n\n    #关于fastcgi的配置\n    fastcgi_connect_timeout 300;    \n    fastcgi_send_timeout 300;    \n    fastcgi_read_timeout 300;    \n    fastcgi_buffer_size 64k;    \n    fastcgi_buffers 4 64k;    \n    fastcgi_busy_buffers_size 128k;    \n    fastcgi_temp_file_write_size 128k;\n\n    #支持gzip压缩\n    gzip on;\n    gzip_min_length 1k;\n    gzip_buffers 16 64k;\n    gzip_http_version 1.1;\n    gzip_comp_level 6;\n    gzip_types text/plain application/x-javascript text/css application/javascript text/javascript image/jpeg image/gif image/png application/xml application/json;\n    gzip_vary on;\n    gzip_disable \"MSIE [1-6].(?!.*SV1)\";\n\n    #\n    # 重定向所有带www请求到非www的请求\n    #\n    server {\n        listen               *:80;\n        listen               *:443 ssl spdy;\n        server_name www.typecodes.com;\n        # ssl证书配置见文章 https://typecodes.com/web/lnmppositivessl.html\n        ssl_certificate /etc/nginx/ssl/typecodes.crt;\n        # ssl密钥文件见文章 https://typecodes.com/web/lnmppositivessl.html\n        ssl_certificate_key /etc/nginx/ssl/typecodes.key;\n        # 不产生日志\n        access_log off;\n\n        # 访问favicon.ico和robots.txt不跳转（把这两个文件存放在上级目录html中）\n        location ~* ^/(favicon.ico|robots.txt)$ {\n            root html;\n            expires max;\n            log_not_found off;\n            break;\n        }\n\n        location / {\n            return 301 https://typecodes.com$request_uri;\n        }\n    }\n\n    #\n    # 将所有http请求重定向到https\n    #\n    server {\n        listen               *:80;\n        server_name          typecodes.com;\n        # 不产生日志\n        access_log off;\n\n        # 访问favicon.ico和robots.txt不跳转（把这两个文件存放在上级目录html中）\n        location ~* ^/(favicon.ico|robots.txt)$ {\n            root html;\n            expires max;\n            log_not_found off;\n            break;\n        }\n\n        location / {\n            return 301 https://typecodes.com$request_uri;\n        }\n    }\n\n    #\n    # HTTPS server\n    #\n    server {\n        listen               *:443 ssl spdy;\n        server_name typecodes.com;\n\n        # ssl证书配置见文章 https://typecodes.com/web/lnmppositivessl.html\n        ssl_certificate /etc/nginx/ssl/typecodes.crt;\n        # ssl密钥文件见文章 https://typecodes.com/web/lnmppositivessl.html\n        ssl_certificate_key /etc/nginx/ssl/typecodes.key;\n        ssl_session_cache shared:SSL:20m;\n        ssl_session_timeout 10m;\n        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA:!CAMELLIA;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #enables TLSv1, but not SSLv2, SSLv3 which is weak and should no longer be used.\n        ssl_prefer_server_ciphers on;\n        # 开启spdy功能\n        add_header Alternate-Protocol 443:npn-spdy/3.1;\n        # 严格的https访问\n        add_header Strict-Transport-Security \"max-age=31536000; includeSubdomains;\";\n\n        #设置网站根目录\n        root   /usr/share/nginx/html/typecodes;\n        index  index.php index.html;\n\n        charset utf-8;\n\n        #access_log  /var/log/nginx/log/host.access.log  main;\n\n        #设置css/javascript/图片等静态资源的缓存时间\n        location ~ .*\\.(css|js|ico|png|gif|jpg|json|mp3|mp4|flv|swf)(.*) {\n            expires 60d;\n        }\n\n        # include /etc/nginx/default.d/*.conf;\n        # 设置typecho博客的config文章不被访问，保证安全\n        location = /config.inc.php{\n            deny  all;\n        }\n\n        # keep the uploads directory safe by excluding php, php5, html file accessing. Applying to wordpress and typecho.\n        # location ~ .*/uploads/.*\\.(php|php5|html)$ {\n        #   deny  all;\n        # }\n\n        # 设置wordpress和typecho博客中，插件目录无法直接访问php或者html文件\n        location ~ .*/plugins/.*\\.(php|php5|html)$ {\n            deny  all;\n        }\n\n        #Rewrite的伪静态(针对wordpress/typecho)，url地址去掉index.php\n        location / {\n            if (-f $request_filename/index.html){\n                rewrite (.*) $1/index.html break;\n            }\n            if (-f $request_filename/index.php){\n                rewrite (.*) $1/index.php;\n            }\n        if (!-f $request_filename){\n                rewrite (.*) /index.php;\n            }\n        }\n\n        #访问favicon.ico时不产生日志\n        location = /favicon.ico {\n            access_log off;\n        }\n\n        #设置40系列错误的应答文件为40x.html\n        error_page  400 401 402 403 404  /40x.html;\n        location = /40x.html {\n                root   html;\n                index  index.html index.htm;\n        }\n\n        #设置50系列错误的应答文件为50x.html\n        #\n        error_page   500 501 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n            index  index.html index.htm;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # 设置Nginx和php通信机制为tcp的socket模式，而不是直接监听9000端口\n        location  ~ .*\\.php(\\/.*)*$ {\n             fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n             #fastcgi_pass   127.0.0.1:9000;\n             # the better form of fastcgi_pass than before\n             fastcgi_pass   unix:/var/run/php-fpm/php-fpm.sock;\n             fastcgi_index  index.php;\n             fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n             include        fastcgi_params;\n        }\n\n        # deny access to .htaccess files, if Apache's document root\n        # concurs with nginx's one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n}\n```\n","source":"_posts/第6期：Nginx.md","raw":"---\ntitle: 第6期：Nginx\ndate: 2023-05-20 00:42:05\ntags:\n---\n### 服务管理\n```\nnginx # 启动\nnginx -t # 测试配置\nnginx -s reload # 重载配置\n```\n\n### 示例\n```\nserver {\n    listen      88;\n    server_name localhost;\n    charset     utf-8;\n    index       index.html index.htm;\n    access_log  logs/access.log;\n    location / {\n        return 200 \"test conf\";\n    }\n}\n```\n### 重定向（地址会变）\n```\nlocation / {\n    return 302 http://localhost:89/$request_uri;\n}\n\n# redirect.conf\nserver {\n    listen      89;\n    server_name localhost;\n    charset     utf-8;\n    index       index.html index.htm;\n    access_log  logs/access.log;\n    location / {\n        return 200 \"after redirect uri\";\n    }\n}\n\n进行测试：curl -L localhost:88\n返回：after redirect uri\n```\n### 匹配以/api/开头的uri\n```\nlocation ^/api/ {\n  proxy_pass http://loclhost:8090;\n}\n```\n#### 一、centos7安装Nginx\n##### 源码安装\n- [所有nginx版本](http://nginx.org/download/)\n\nwget下载tar.gz包\n```\nwget http://nginx.org/download/nginx-1.20.1.tar.gz\n\n# 解压\ntar xzf nginx-1.20.1.tar.gz\n```\n\n编译\n```\ncd nginx-1.20.1 && ./configure\n```\n注意：`安装报错误的话比如：\"C compiler cc is not found\"，这个就是缺少编译环境，安装一下就可以了 yum -y install gcc make gcc-c++ openssl-devel`\n\n安装\n```\nmake && make install\n```\n说明：\n- nignx会被安装到`/usr/local/nginx`目录下\n\nnginx测试\n```\n$ which nginx\n/usr/bin/nginx\n\nnginx # 启动nginx\nps aux|grep nginx # 查看nginx进程\nnginx -s stop # 停止nginx\n\nnginx -v # nginx 版本\nnginx -t # 测试配置文件\nnginx -s reload # 重载配置\n\n```\n\n防火墙设置\n```\nsystemctl status firewalld # 查看防火墙状态\n```\n\n设置放行端口，编辑`/etc/firewalld/zones/public.xml`文件，在</zone>前面加:\n\n```\n<zone>\n  ...\n  <port port=\"30000-30100\" protocol=\"tcp\"/>\n  <port port=\"80\" protocol=\"tcp\"/>\n</zone>\n```\n说明：\n- 可以设置端口段或单个端口\n\n配完文件后重载`firewall-cmd --reload`，查看被放行的端口\n```\nfirewall-cmd --list-ports \n```\n\n#### 二、配置文件\n查看`/usr/local/nginx/conf/nginx.conf`文件：\n```\nworker_processes  1;\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  logs/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    gzip  on;\n    server {\n        listen       80;\n        server_name  localhost;\n        location / {\n            root   html;\n            index  index.html index.htm;\n        }\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n    }\n    include  vhost/*.conf;\n}\n\n```\n说明：\n- `worker_processes` - work进程数，一般根据cpu核数来设置，可以设为和CPU的数量一样\n- `worker_connections` - 单个work进程可以连的并发连接数，连接数依赖于系统级别的进程可打开文件数，`ulimit -n`可查看\n  \n  `cat /proc/nginx_work_pid/limits` 里面的`Max open files`也可查询。\n\n- `log_format` - 设置nginx日志格式\n- `access_log` - 设置文件存储位置和应用的日志格式\n- `sendfile` - 开启文件高效传输模式\n- `keepalive_timeout` - 客户端和nginx之间建立的tcp长连接维持时间\n- `gzip` - 开启gzip模块，文件被压缩传到客户端，优化传输效率，有效节省带宽。\n- `listen 80` - 监听80端口\n- `root   html;` - 相当于`root /usr/local/nginx/html`\n- `index index.html` - 查找`/usr/local/nginx/html`目录下的index.html文件\n- `include` - 添加配置文件\n\n示例：在vhost下添加配置文件`test.conf`\n```\nserver {\n    listen 80;\n    server_name 192.168.1.189;\n    location /ricky/ {\n\t    return 200 \"im ricky\";\n    }\n}\n```\n注意：\n- server_name指定为本机的ip而不是localhost，因为上一目录nginx.conf配置的localhost\n- 指定访问前缀为/ricky/\n\n检查并重载配置\n```\nnginx -t\nnginx -s reload\n```\n\n访问：curl http://192.168.1.189:80/ricky/  \n注意：\n- 访问的时候`192.168.1.189` 不能写成localhost，不然匹配规则就跑到nginx.conf里面的server去了\n- ricky后面的`/`不可以省略；如果想省略，可以把`location /ricky/`写成`location /ricky`\n  \n  `location /ricky`既会匹配到`http://192.168.1.189:80/ricky`的路由，也会匹配到`http://192.168.1.189:80/rickyadsafaf/a`\n\n  总的来说，nginx先在所有配置文件中匹配端口->再到server_name->具体location(location之间又有优先级的区分)\n\n#### 三、location优先级\n优先级高到低\n- `location = /uri` - 字符 `=` 表示精准匹配（精准匹配优先级最高）\n- `location ^~ /uri` - 字符 `^` 表示以/test开头的路径，`~` 表区分大小写；但是 `~*` 表不区分大小写(带 `~*` 等修饰符优先级次之)\n- `location /url` - 不带修饰符的前缀再次之\n- `location /` - 最后是交给`/`通用匹配。\n\n示例1：比较精准和带修饰符\n```\nserver {\n    listen 80;\n    server_name 192.168.1.189;\n    location = /ricky {\n\t    return 200 \"精准\";\n    }\n\n    location ^~ /ricky {\n\t    return 200 \"修饰符\";\n    }\n}\n\n```\n重载配置并访问：`curl http://192.168.1.189:80/ricky`，输出`精准`\n\n示例2：比较带修饰符和不带修饰符\n```\nserver {\n    listen 80;\n    server_name 192.168.1.189;\n    location ^~ ricky {\n\t    return 200 \"精准\";\n    }\n\n    location / {\n\t    return 200 \"通用\";\n    }\n}\n\n```\n重载配置并访问：`curl http://192.168.1.189:80/ricky`，输出`精准`；访问不在/ricky规则内的就打出`通用`，如`curl http://192.168.1.189:80/ris`\n\n#### nginx不需要后端就可以返回远程用户ip的配置\n配置:\n```\nlocation /ip {\n    default_type text/plain;\n    return 200 $remote_addr;\n}\n```\n访问\n```\n$ curl https://example.com/ip\n192.168.1.187\n```\n\n返回json格式：\n```\n$ curl -s https://example.com/json_ip | jq\n{\n    \"ip\": \"192.168.1.187\"\n}\n```\n### nginx.conf文件详解\n```\n# 定义nginx运行的用户和用户组\nuser www www;\n\n# nginx work进程数，一般与cpu核数一致。\nworker_processes 8;\n\n# 错误日志类型定义\nerror_log /var/log/nginx/error.log info;\n\n# 进程文件\npid /var/run/nginx.pid;\n\n# 1个nginx进程最多能打开的文件描述符数，建议与ulimit -n(系统最大能打开的文件描述符数)一致\nwork_rlimit_nofile 65535;\n\n# \nevents {\n  # 高性能网络io模型\n  use epoll;\n  # 单进程最大连接数\n  work_connections 65535; \n}\n\nhttp {\n  include mime.type; # 文件扩展与文件类型名映射表\n  default_type application/ocetet-stream; # 默认文件类型\n  # charset utf-8; # 默认编码\n  client_header_buffer_size 32; # 上传文件大小限制\n  # 所谓请求报文包含了请求头(如 User-Agent： 或 Accept：)+请求行(GET /index.html HTTP/1.1)+请求body\n  large_client_header_buffers 4 64k; # 设定请求行+请求头不能超过4x64k\n  client_max_body_size 8m;  # 设置body(或上传文件)最大值8m\n  sendfile on; # 开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。\n\n  autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。\n  keepalive_timeout 120; # 长连接超时时间，单位s\n\n  #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度\n  fastcgi_connect_timeout 300;\n  fastcgi_send_timeout 300;\n  fastcgi_read_timeout 300;\n  fastcgi_buffer_size 64k;\n  fastcgi_buffers 4 64k;\n  fastcgi_busy_buffers_size 128k;\n  fastcgi_temp_file_write_size 128k;\n\n  #gzip模块设置\n  gzip on;        #开启gzip压缩输出\n  gzip_min_length 1k; #最小压缩文件大小\n  gzip_buffers 4 16k; #压缩缓冲区\n  gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）开始压缩的http协议版本(可以不设置,目前几乎全是1.1协议)\n  gzip_comp_level 2;   #推荐6压缩级别(级别越高,压的越小,越浪费CPU计算资源)\n  gzip_types text/plain application/x-javascript text/css application/xml;\n  #压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。\n  gzip_vary on;   # 是否传输gzip压缩标志\n  #limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用\n\n  upstream blog.ha97.com {\n    #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。\n    server 192.168.80.121:80 weight=3;\n    server 192.168.80.122:80 weight=2;\n    server 192.168.80.123:80 weight=3;\n  }\n\n  #虚拟主机的配置\n  server\n  {\n      #监听端口\n      listen 80;\n      #域名可以有多个，用空格隔开\n      server_name www.ha97.com ha97.com;\n      index index.html index.htm index.php;\n      root /data/www/ha97;\n      location ~ .*\\.(php|php5)?$\n      {\n      fastcgi_pass 127.0.0.1:9000;\n      fastcgi_index index.php;\n      include fastcgi.conf;\n      }\n      #图片缓存时间设置\n      location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$\n      {\n      expires 10d;\n      }\n      #JS和CSS缓存时间设置\n      location ~ .*\\.(js|css)?$\n      {\n      expires 1h;\n      }\n      #日志格式设定\n      log_format access '$remote_addr - $remote_user [$time_local] \"$request\" '\n      '$status $body_bytes_sent \"$http_referer\" '\n      '\"$http_user_agent\" $http_x_forwarded_for';\n      #定义本虚拟主机的访问日志\n      access_log /var/log/nginx/ha97access.log access;\n\n      #对 \"/\" 启用反向代理\n      location / {\n      proxy_pass http://127.0.0.1:88;\n      proxy_redirect off;\n      proxy_set_header X-Real-IP $remote_addr;\n      #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      #以下是一些反向代理的配置，可选。\n      proxy_set_header Host $host;\n      client_max_body_size 10m; #允许客户端请求的最大单文件字节数\n      client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，\n      proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)\n      proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)\n      proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)\n      proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小\n      proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置\n      proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）\n      proxy_temp_file_write_size 64k;\n      #设定缓存文件夹大小，大于这个值，将从upstream服务器传\n      }\n\n      #设定查看Nginx状态的地址\n      location /NginxStatus {\n      stub_status on;\n      access_log on;\n      auth_basic \"NginxStatus\";\n      auth_basic_user_file conf/htpasswd;\n      #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。\n      }\n\n      #本地动静分离反向代理配置\n      #所有jsp的页面均交由tomcat或resin处理\n      location ~ .(jsp|jspx|do)?$ {\n      proxy_set_header Host $host;\n      proxy_set_header X-Real-IP $remote_addr;\n      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;\n      proxy_pass http://127.0.0.1:8080;\n      }\n      #所有静态文件由nginx直接读取不经过tomcat或resin\n      location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$\n      { expires 15d; }\n      location ~ .*.(js|css)?$\n      { expires 1h; }\n  }\n\n}\n\n\n```\n### 常用nginx配置demo\n\n```\nuser  nginx nginx;\nworker_processes  1;\n\nerror_log  /var/log/nginx/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\npid        /var/run/nginx/nginx.pid;\n\nevents {\n    worker_connections  1024;\n}\n\n\nhttp {\n    include       mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n                      '$status $body_bytes_sent \"$http_referer\" '\n                      '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n\n    #隐藏Nginx版本信息，禁止网站目录浏览\n    server_tokens off;\n    autoindex off;\n    #当FastCGI后端服务器处理请求给出http响应码为4xx和5xx时，就转发给nginx\n    fastcgi_intercept_errors on;\n\n    #关于fastcgi的配置\n    fastcgi_connect_timeout 300;    \n    fastcgi_send_timeout 300;    \n    fastcgi_read_timeout 300;    \n    fastcgi_buffer_size 64k;    \n    fastcgi_buffers 4 64k;    \n    fastcgi_busy_buffers_size 128k;    \n    fastcgi_temp_file_write_size 128k;\n\n    #支持gzip压缩\n    gzip on;\n    gzip_min_length 1k;\n    gzip_buffers 16 64k;\n    gzip_http_version 1.1;\n    gzip_comp_level 6;\n    gzip_types text/plain application/x-javascript text/css application/javascript text/javascript image/jpeg image/gif image/png application/xml application/json;\n    gzip_vary on;\n    gzip_disable \"MSIE [1-6].(?!.*SV1)\";\n\n    #\n    # 重定向所有带www请求到非www的请求\n    #\n    server {\n        listen               *:80;\n        listen               *:443 ssl spdy;\n        server_name www.typecodes.com;\n        # ssl证书配置见文章 https://typecodes.com/web/lnmppositivessl.html\n        ssl_certificate /etc/nginx/ssl/typecodes.crt;\n        # ssl密钥文件见文章 https://typecodes.com/web/lnmppositivessl.html\n        ssl_certificate_key /etc/nginx/ssl/typecodes.key;\n        # 不产生日志\n        access_log off;\n\n        # 访问favicon.ico和robots.txt不跳转（把这两个文件存放在上级目录html中）\n        location ~* ^/(favicon.ico|robots.txt)$ {\n            root html;\n            expires max;\n            log_not_found off;\n            break;\n        }\n\n        location / {\n            return 301 https://typecodes.com$request_uri;\n        }\n    }\n\n    #\n    # 将所有http请求重定向到https\n    #\n    server {\n        listen               *:80;\n        server_name          typecodes.com;\n        # 不产生日志\n        access_log off;\n\n        # 访问favicon.ico和robots.txt不跳转（把这两个文件存放在上级目录html中）\n        location ~* ^/(favicon.ico|robots.txt)$ {\n            root html;\n            expires max;\n            log_not_found off;\n            break;\n        }\n\n        location / {\n            return 301 https://typecodes.com$request_uri;\n        }\n    }\n\n    #\n    # HTTPS server\n    #\n    server {\n        listen               *:443 ssl spdy;\n        server_name typecodes.com;\n\n        # ssl证书配置见文章 https://typecodes.com/web/lnmppositivessl.html\n        ssl_certificate /etc/nginx/ssl/typecodes.crt;\n        # ssl密钥文件见文章 https://typecodes.com/web/lnmppositivessl.html\n        ssl_certificate_key /etc/nginx/ssl/typecodes.key;\n        ssl_session_cache shared:SSL:20m;\n        ssl_session_timeout 10m;\n        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA:!CAMELLIA;\n        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #enables TLSv1, but not SSLv2, SSLv3 which is weak and should no longer be used.\n        ssl_prefer_server_ciphers on;\n        # 开启spdy功能\n        add_header Alternate-Protocol 443:npn-spdy/3.1;\n        # 严格的https访问\n        add_header Strict-Transport-Security \"max-age=31536000; includeSubdomains;\";\n\n        #设置网站根目录\n        root   /usr/share/nginx/html/typecodes;\n        index  index.php index.html;\n\n        charset utf-8;\n\n        #access_log  /var/log/nginx/log/host.access.log  main;\n\n        #设置css/javascript/图片等静态资源的缓存时间\n        location ~ .*\\.(css|js|ico|png|gif|jpg|json|mp3|mp4|flv|swf)(.*) {\n            expires 60d;\n        }\n\n        # include /etc/nginx/default.d/*.conf;\n        # 设置typecho博客的config文章不被访问，保证安全\n        location = /config.inc.php{\n            deny  all;\n        }\n\n        # keep the uploads directory safe by excluding php, php5, html file accessing. Applying to wordpress and typecho.\n        # location ~ .*/uploads/.*\\.(php|php5|html)$ {\n        #   deny  all;\n        # }\n\n        # 设置wordpress和typecho博客中，插件目录无法直接访问php或者html文件\n        location ~ .*/plugins/.*\\.(php|php5|html)$ {\n            deny  all;\n        }\n\n        #Rewrite的伪静态(针对wordpress/typecho)，url地址去掉index.php\n        location / {\n            if (-f $request_filename/index.html){\n                rewrite (.*) $1/index.html break;\n            }\n            if (-f $request_filename/index.php){\n                rewrite (.*) $1/index.php;\n            }\n        if (!-f $request_filename){\n                rewrite (.*) /index.php;\n            }\n        }\n\n        #访问favicon.ico时不产生日志\n        location = /favicon.ico {\n            access_log off;\n        }\n\n        #设置40系列错误的应答文件为40x.html\n        error_page  400 401 402 403 404  /40x.html;\n        location = /40x.html {\n                root   html;\n                index  index.html index.htm;\n        }\n\n        #设置50系列错误的应答文件为50x.html\n        #\n        error_page   500 501 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n            index  index.html index.htm;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # 设置Nginx和php通信机制为tcp的socket模式，而不是直接监听9000端口\n        location  ~ .*\\.php(\\/.*)*$ {\n             fastcgi_split_path_info ^(.+\\.php)(/.+)$;\n             #fastcgi_pass   127.0.0.1:9000;\n             # the better form of fastcgi_pass than before\n             fastcgi_pass   unix:/var/run/php-fpm/php-fpm.sock;\n             fastcgi_index  index.php;\n             fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;\n             include        fastcgi_params;\n        }\n\n        # deny access to .htaccess files, if Apache's document root\n        # concurs with nginx's one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n}\n```\n","slug":"第6期：Nginx","published":1,"updated":"2024-03-06T09:56:23.216Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvten0014bklnd3j72lvt","content":"<h3 id=\"服务管理\"><a href=\"#服务管理\" class=\"headerlink\" title=\"服务管理\"></a>服务管理</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx # 启动</span><br><span class=\"line\">nginx -t # 测试配置</span><br><span class=\"line\">nginx -s reload # 重载配置</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      88;</span><br><span class=\"line\">    server_name localhost;</span><br><span class=\"line\">    charset     utf-8;</span><br><span class=\"line\">    index       index.html index.htm;</span><br><span class=\"line\">    access_log  logs/access.log;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        return 200 &quot;test conf&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"重定向（地址会变）\"><a href=\"#重定向（地址会变）\" class=\"headerlink\" title=\"重定向（地址会变）\"></a>重定向（地址会变）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">    return 302 http://localhost:89/$request_uri;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># redirect.conf</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      89;</span><br><span class=\"line\">    server_name localhost;</span><br><span class=\"line\">    charset     utf-8;</span><br><span class=\"line\">    index       index.html index.htm;</span><br><span class=\"line\">    access_log  logs/access.log;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        return 200 &quot;after redirect uri&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">进行测试：curl -L localhost:88</span><br><span class=\"line\">返回：after redirect uri</span><br></pre></td></tr></table></figure>\n<h3 id=\"匹配以-x2F-api-x2F-开头的uri\"><a href=\"#匹配以-x2F-api-x2F-开头的uri\" class=\"headerlink\" title=\"匹配以&#x2F;api&#x2F;开头的uri\"></a>匹配以&#x2F;api&#x2F;开头的uri</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ^/api/ &#123;</span><br><span class=\"line\">  proxy_pass http://loclhost:8090;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"一、centos7安装Nginx\"><a href=\"#一、centos7安装Nginx\" class=\"headerlink\" title=\"一、centos7安装Nginx\"></a>一、centos7安装Nginx</h4><h5 id=\"源码安装\"><a href=\"#源码安装\" class=\"headerlink\" title=\"源码安装\"></a>源码安装</h5><ul>\n<li><a href=\"http://nginx.org/download/\">所有nginx版本</a></li>\n</ul>\n<p>wget下载tar.gz包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://nginx.org/download/nginx-1.20.1.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"># 解压</span><br><span class=\"line\">tar xzf nginx-1.20.1.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>编译</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd nginx-1.20.1 &amp;&amp; ./configure</span><br></pre></td></tr></table></figure>\n<p>注意：<code>安装报错误的话比如：&quot;C compiler cc is not found&quot;，这个就是缺少编译环境，安装一下就可以了 yum -y install gcc make gcc-c++ openssl-devel</code></p>\n<p>安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li>nignx会被安装到<code>/usr/local/nginx</code>目录下</li>\n</ul>\n<p>nginx测试</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ which nginx</span><br><span class=\"line\">/usr/bin/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">nginx # 启动nginx</span><br><span class=\"line\">ps aux|grep nginx # 查看nginx进程</span><br><span class=\"line\">nginx -s stop # 停止nginx</span><br><span class=\"line\"></span><br><span class=\"line\">nginx -v # nginx 版本</span><br><span class=\"line\">nginx -t # 测试配置文件</span><br><span class=\"line\">nginx -s reload # 重载配置</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>防火墙设置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status firewalld # 查看防火墙状态</span><br></pre></td></tr></table></figure>\n\n<p>设置放行端口，编辑<code>/etc/firewalld/zones/public.xml</code>文件，在</zone>前面加:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;zone&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &lt;port port=&quot;30000-30100&quot; protocol=&quot;tcp&quot;/&gt;</span><br><span class=\"line\">  &lt;port port=&quot;80&quot; protocol=&quot;tcp&quot;/&gt;</span><br><span class=\"line\">&lt;/zone&gt;</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li>可以设置端口段或单个端口</li>\n</ul>\n<p>配完文件后重载<code>firewall-cmd --reload</code>，查看被放行的端口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --list-ports </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二、配置文件\"><a href=\"#二、配置文件\" class=\"headerlink\" title=\"二、配置文件\"></a>二、配置文件</h4><p>查看<code>/usr/local/nginx/conf/nginx.conf</code>文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  logs/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #keepalive_timeout  0;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    gzip  on;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    include  vhost/*.conf;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><p><code>worker_processes</code> - work进程数，一般根据cpu核数来设置，可以设为和CPU的数量一样</p>\n</li>\n<li><p><code>worker_connections</code> - 单个work进程可以连的并发连接数，连接数依赖于系统级别的进程可打开文件数，<code>ulimit -n</code>可查看</p>\n<p><code>cat /proc/nginx_work_pid/limits</code> 里面的<code>Max open files</code>也可查询。</p>\n</li>\n<li><p><code>log_format</code> - 设置nginx日志格式</p>\n</li>\n<li><p><code>access_log</code> - 设置文件存储位置和应用的日志格式</p>\n</li>\n<li><p><code>sendfile</code> - 开启文件高效传输模式</p>\n</li>\n<li><p><code>keepalive_timeout</code> - 客户端和nginx之间建立的tcp长连接维持时间</p>\n</li>\n<li><p><code>gzip</code> - 开启gzip模块，文件被压缩传到客户端，优化传输效率，有效节省带宽。</p>\n</li>\n<li><p><code>listen 80</code> - 监听80端口</p>\n</li>\n<li><p><code>root   html;</code> - 相当于<code>root /usr/local/nginx/html</code></p>\n</li>\n<li><p><code>index index.html</code> - 查找<code>/usr/local/nginx/html</code>目录下的index.html文件</p>\n</li>\n<li><p><code>include</code> - 添加配置文件</p>\n</li>\n</ul>\n<p>示例：在vhost下添加配置文件<code>test.conf</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name 192.168.1.189;</span><br><span class=\"line\">    location /ricky/ &#123;</span><br><span class=\"line\">\t    return 200 &quot;im ricky&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ul>\n<li>server_name指定为本机的ip而不是localhost，因为上一目录nginx.conf配置的localhost</li>\n<li>指定访问前缀为&#x2F;ricky&#x2F;</li>\n</ul>\n<p>检查并重载配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<p>访问：curl <a href=\"http://192.168.1.189/ricky/\">http://192.168.1.189:80/ricky/</a><br>注意：</p>\n<ul>\n<li><p>访问的时候<code>192.168.1.189</code> 不能写成localhost，不然匹配规则就跑到nginx.conf里面的server去了</p>\n</li>\n<li><p>ricky后面的<code>/</code>不可以省略；如果想省略，可以把<code>location /ricky/</code>写成<code>location /ricky</code></p>\n<p><code>location /ricky</code>既会匹配到<code>http://192.168.1.189:80/ricky</code>的路由，也会匹配到<code>http://192.168.1.189:80/rickyadsafaf/a</code></p>\n<p>总的来说，nginx先在所有配置文件中匹配端口-&gt;再到server_name-&gt;具体location(location之间又有优先级的区分)</p>\n</li>\n</ul>\n<h4 id=\"三、location优先级\"><a href=\"#三、location优先级\" class=\"headerlink\" title=\"三、location优先级\"></a>三、location优先级</h4><p>优先级高到低</p>\n<ul>\n<li><code>location = /uri</code> - 字符 <code>=</code> 表示精准匹配（精准匹配优先级最高）</li>\n<li><code>location ^~ /uri</code> - 字符 <code>^</code> 表示以&#x2F;test开头的路径，<code>~</code> 表区分大小写；但是 <code>~*</code> 表不区分大小写(带 <code>~*</code> 等修饰符优先级次之)</li>\n<li><code>location /url</code> - 不带修饰符的前缀再次之</li>\n<li><code>location /</code> - 最后是交给<code>/</code>通用匹配。</li>\n</ul>\n<p>示例1：比较精准和带修饰符</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name 192.168.1.189;</span><br><span class=\"line\">    location = /ricky &#123;</span><br><span class=\"line\">\t    return 200 &quot;精准&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ^~ /ricky &#123;</span><br><span class=\"line\">\t    return 200 &quot;修饰符&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>重载配置并访问：<code>curl http://192.168.1.189:80/ricky</code>，输出<code>精准</code></p>\n<p>示例2：比较带修饰符和不带修饰符</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name 192.168.1.189;</span><br><span class=\"line\">    location ^~ ricky &#123;</span><br><span class=\"line\">\t    return 200 &quot;精准&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">\t    return 200 &quot;通用&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>重载配置并访问：<code>curl http://192.168.1.189:80/ricky</code>，输出<code>精准</code>；访问不在&#x2F;ricky规则内的就打出<code>通用</code>，如<code>curl http://192.168.1.189:80/ris</code></p>\n<h4 id=\"nginx不需要后端就可以返回远程用户ip的配置\"><a href=\"#nginx不需要后端就可以返回远程用户ip的配置\" class=\"headerlink\" title=\"nginx不需要后端就可以返回远程用户ip的配置\"></a>nginx不需要后端就可以返回远程用户ip的配置</h4><p>配置:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /ip &#123;</span><br><span class=\"line\">    default_type text/plain;</span><br><span class=\"line\">    return 200 $remote_addr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>访问</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl https://example.com/ip</span><br><span class=\"line\">192.168.1.187</span><br></pre></td></tr></table></figure>\n\n<p>返回json格式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -s https://example.com/json_ip | jq</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;ip&quot;: &quot;192.168.1.187&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"nginx-conf文件详解\"><a href=\"#nginx-conf文件详解\" class=\"headerlink\" title=\"nginx.conf文件详解\"></a>nginx.conf文件详解</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 定义nginx运行的用户和用户组</span><br><span class=\"line\">user www www;</span><br><span class=\"line\"></span><br><span class=\"line\"># nginx work进程数，一般与cpu核数一致。</span><br><span class=\"line\">worker_processes 8;</span><br><span class=\"line\"></span><br><span class=\"line\"># 错误日志类型定义</span><br><span class=\"line\">error_log /var/log/nginx/error.log info;</span><br><span class=\"line\"></span><br><span class=\"line\"># 进程文件</span><br><span class=\"line\">pid /var/run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"># 1个nginx进程最多能打开的文件描述符数，建议与ulimit -n(系统最大能打开的文件描述符数)一致</span><br><span class=\"line\">work_rlimit_nofile 65535;</span><br><span class=\"line\"></span><br><span class=\"line\"># </span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">  # 高性能网络io模型</span><br><span class=\"line\">  use epoll;</span><br><span class=\"line\">  # 单进程最大连接数</span><br><span class=\"line\">  work_connections 65535; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">  include mime.type; # 文件扩展与文件类型名映射表</span><br><span class=\"line\">  default_type application/ocetet-stream; # 默认文件类型</span><br><span class=\"line\">  # charset utf-8; # 默认编码</span><br><span class=\"line\">  client_header_buffer_size 32; # 上传文件大小限制</span><br><span class=\"line\">  # 所谓请求报文包含了请求头(如 User-Agent： 或 Accept：)+请求行(GET /index.html HTTP/1.1)+请求body</span><br><span class=\"line\">  large_client_header_buffers 4 64k; # 设定请求行+请求头不能超过4x64k</span><br><span class=\"line\">  client_max_body_size 8m;  # 设置body(或上传文件)最大值8m</span><br><span class=\"line\">  sendfile on; # 开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span><br><span class=\"line\"></span><br><span class=\"line\">  autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。</span><br><span class=\"line\">  keepalive_timeout 120; # 长连接超时时间，单位s</span><br><span class=\"line\"></span><br><span class=\"line\">  #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度</span><br><span class=\"line\">  fastcgi_connect_timeout 300;</span><br><span class=\"line\">  fastcgi_send_timeout 300;</span><br><span class=\"line\">  fastcgi_read_timeout 300;</span><br><span class=\"line\">  fastcgi_buffer_size 64k;</span><br><span class=\"line\">  fastcgi_buffers 4 64k;</span><br><span class=\"line\">  fastcgi_busy_buffers_size 128k;</span><br><span class=\"line\">  fastcgi_temp_file_write_size 128k;</span><br><span class=\"line\"></span><br><span class=\"line\">  #gzip模块设置</span><br><span class=\"line\">  gzip on;        #开启gzip压缩输出</span><br><span class=\"line\">  gzip_min_length 1k; #最小压缩文件大小</span><br><span class=\"line\">  gzip_buffers 4 16k; #压缩缓冲区</span><br><span class=\"line\">  gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）开始压缩的http协议版本(可以不设置,目前几乎全是1.1协议)</span><br><span class=\"line\">  gzip_comp_level 2;   #推荐6压缩级别(级别越高,压的越小,越浪费CPU计算资源)</span><br><span class=\"line\">  gzip_types text/plain application/x-javascript text/css application/xml;</span><br><span class=\"line\">  #压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span><br><span class=\"line\">  gzip_vary on;   # 是否传输gzip压缩标志</span><br><span class=\"line\">  #limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用</span><br><span class=\"line\"></span><br><span class=\"line\">  upstream blog.ha97.com &#123;</span><br><span class=\"line\">    #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span><br><span class=\"line\">    server 192.168.80.121:80 weight=3;</span><br><span class=\"line\">    server 192.168.80.122:80 weight=2;</span><br><span class=\"line\">    server 192.168.80.123:80 weight=3;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  #虚拟主机的配置</span><br><span class=\"line\">  server</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      #监听端口</span><br><span class=\"line\">      listen 80;</span><br><span class=\"line\">      #域名可以有多个，用空格隔开</span><br><span class=\"line\">      server_name www.ha97.com ha97.com;</span><br><span class=\"line\">      index index.html index.htm index.php;</span><br><span class=\"line\">      root /data/www/ha97;</span><br><span class=\"line\">      location ~ .*\\.(php|php5)?$</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">      fastcgi_pass 127.0.0.1:9000;</span><br><span class=\"line\">      fastcgi_index index.php;</span><br><span class=\"line\">      include fastcgi.conf;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      #图片缓存时间设置</span><br><span class=\"line\">      location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">      expires 10d;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      #JS和CSS缓存时间设置</span><br><span class=\"line\">      location ~ .*\\.(js|css)?$</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">      expires 1h;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      #日志格式设定</span><br><span class=\"line\">      log_format access &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">      &#x27;&quot;$http_user_agent&quot; $http_x_forwarded_for&#x27;;</span><br><span class=\"line\">      #定义本虚拟主机的访问日志</span><br><span class=\"line\">      access_log /var/log/nginx/ha97access.log access;</span><br><span class=\"line\"></span><br><span class=\"line\">      #对 &quot;/&quot; 启用反向代理</span><br><span class=\"line\">      location / &#123;</span><br><span class=\"line\">      proxy_pass http://127.0.0.1:88;</span><br><span class=\"line\">      proxy_redirect off;</span><br><span class=\"line\">      proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">      #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class=\"line\">      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">      #以下是一些反向代理的配置，可选。</span><br><span class=\"line\">      proxy_set_header Host $host;</span><br><span class=\"line\">      client_max_body_size 10m; #允许客户端请求的最大单文件字节数</span><br><span class=\"line\">      client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，</span><br><span class=\"line\">      proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class=\"line\">      proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)</span><br><span class=\"line\">      proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class=\"line\">      proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class=\"line\">      proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置</span><br><span class=\"line\">      proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）</span><br><span class=\"line\">      proxy_temp_file_write_size 64k;</span><br><span class=\"line\">      #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      #设定查看Nginx状态的地址</span><br><span class=\"line\">      location /NginxStatus &#123;</span><br><span class=\"line\">      stub_status on;</span><br><span class=\"line\">      access_log on;</span><br><span class=\"line\">      auth_basic &quot;NginxStatus&quot;;</span><br><span class=\"line\">      auth_basic_user_file conf/htpasswd;</span><br><span class=\"line\">      #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      #本地动静分离反向代理配置</span><br><span class=\"line\">      #所有jsp的页面均交由tomcat或resin处理</span><br><span class=\"line\">      location ~ .(jsp|jspx|do)?$ &#123;</span><br><span class=\"line\">      proxy_set_header Host $host;</span><br><span class=\"line\">      proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">      proxy_pass http://127.0.0.1:8080;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      #所有静态文件由nginx直接读取不经过tomcat或resin</span><br><span class=\"line\">      location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$</span><br><span class=\"line\">      &#123; expires 15d; &#125;</span><br><span class=\"line\">      location ~ .*.(js|css)?$</span><br><span class=\"line\">      &#123; expires 1h; &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"常用nginx配置demo\"><a href=\"#常用nginx配置demo\" class=\"headerlink\" title=\"常用nginx配置demo\"></a>常用nginx配置demo</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user  nginx nginx;</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">error_log  /var/log/nginx/error.log;</span><br><span class=\"line\">#error_log  logs/error.log  notice;</span><br><span class=\"line\">#error_log  logs/error.log  info;</span><br><span class=\"line\"></span><br><span class=\"line\">pid        /var/run/nginx/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #keepalive_timeout  0;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    #隐藏Nginx版本信息，禁止网站目录浏览</span><br><span class=\"line\">    server_tokens off;</span><br><span class=\"line\">    autoindex off;</span><br><span class=\"line\">    #当FastCGI后端服务器处理请求给出http响应码为4xx和5xx时，就转发给nginx</span><br><span class=\"line\">    fastcgi_intercept_errors on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #关于fastcgi的配置</span><br><span class=\"line\">    fastcgi_connect_timeout 300;    </span><br><span class=\"line\">    fastcgi_send_timeout 300;    </span><br><span class=\"line\">    fastcgi_read_timeout 300;    </span><br><span class=\"line\">    fastcgi_buffer_size 64k;    </span><br><span class=\"line\">    fastcgi_buffers 4 64k;    </span><br><span class=\"line\">    fastcgi_busy_buffers_size 128k;    </span><br><span class=\"line\">    fastcgi_temp_file_write_size 128k;</span><br><span class=\"line\"></span><br><span class=\"line\">    #支持gzip压缩</span><br><span class=\"line\">    gzip on;</span><br><span class=\"line\">    gzip_min_length 1k;</span><br><span class=\"line\">    gzip_buffers 16 64k;</span><br><span class=\"line\">    gzip_http_version 1.1;</span><br><span class=\"line\">    gzip_comp_level 6;</span><br><span class=\"line\">    gzip_types text/plain application/x-javascript text/css application/javascript text/javascript image/jpeg image/gif image/png application/xml application/json;</span><br><span class=\"line\">    gzip_vary on;</span><br><span class=\"line\">    gzip_disable &quot;MSIE [1-6].(?!.*SV1)&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    #</span><br><span class=\"line\">    # 重定向所有带www请求到非www的请求</span><br><span class=\"line\">    #</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen               *:80;</span><br><span class=\"line\">        listen               *:443 ssl spdy;</span><br><span class=\"line\">        server_name www.typecodes.com;</span><br><span class=\"line\">        # ssl证书配置见文章 https://typecodes.com/web/lnmppositivessl.html</span><br><span class=\"line\">        ssl_certificate /etc/nginx/ssl/typecodes.crt;</span><br><span class=\"line\">        # ssl密钥文件见文章 https://typecodes.com/web/lnmppositivessl.html</span><br><span class=\"line\">        ssl_certificate_key /etc/nginx/ssl/typecodes.key;</span><br><span class=\"line\">        # 不产生日志</span><br><span class=\"line\">        access_log off;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 访问favicon.ico和robots.txt不跳转（把这两个文件存放在上级目录html中）</span><br><span class=\"line\">        location ~* ^/(favicon.ico|robots.txt)$ &#123;</span><br><span class=\"line\">            root html;</span><br><span class=\"line\">            expires max;</span><br><span class=\"line\">            log_not_found off;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            return 301 https://typecodes.com$request_uri;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    #</span><br><span class=\"line\">    # 将所有http请求重定向到https</span><br><span class=\"line\">    #</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen               *:80;</span><br><span class=\"line\">        server_name          typecodes.com;</span><br><span class=\"line\">        # 不产生日志</span><br><span class=\"line\">        access_log off;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 访问favicon.ico和robots.txt不跳转（把这两个文件存放在上级目录html中）</span><br><span class=\"line\">        location ~* ^/(favicon.ico|robots.txt)$ &#123;</span><br><span class=\"line\">            root html;</span><br><span class=\"line\">            expires max;</span><br><span class=\"line\">            log_not_found off;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            return 301 https://typecodes.com$request_uri;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    #</span><br><span class=\"line\">    # HTTPS server</span><br><span class=\"line\">    #</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen               *:443 ssl spdy;</span><br><span class=\"line\">        server_name typecodes.com;</span><br><span class=\"line\"></span><br><span class=\"line\">        # ssl证书配置见文章 https://typecodes.com/web/lnmppositivessl.html</span><br><span class=\"line\">        ssl_certificate /etc/nginx/ssl/typecodes.crt;</span><br><span class=\"line\">        # ssl密钥文件见文章 https://typecodes.com/web/lnmppositivessl.html</span><br><span class=\"line\">        ssl_certificate_key /etc/nginx/ssl/typecodes.key;</span><br><span class=\"line\">        ssl_session_cache shared:SSL:20m;</span><br><span class=\"line\">        ssl_session_timeout 10m;</span><br><span class=\"line\">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA:!CAMELLIA;</span><br><span class=\"line\">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #enables TLSv1, but not SSLv2, SSLv3 which is weak and should no longer be used.</span><br><span class=\"line\">        ssl_prefer_server_ciphers on;</span><br><span class=\"line\">        # 开启spdy功能</span><br><span class=\"line\">        add_header Alternate-Protocol 443:npn-spdy/3.1;</span><br><span class=\"line\">        # 严格的https访问</span><br><span class=\"line\">        add_header Strict-Transport-Security &quot;max-age=31536000; includeSubdomains;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">        #设置网站根目录</span><br><span class=\"line\">        root   /usr/share/nginx/html/typecodes;</span><br><span class=\"line\">        index  index.php index.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        charset utf-8;</span><br><span class=\"line\"></span><br><span class=\"line\">        #access_log  /var/log/nginx/log/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        #设置css/javascript/图片等静态资源的缓存时间</span><br><span class=\"line\">        location ~ .*\\.(css|js|ico|png|gif|jpg|json|mp3|mp4|flv|swf)(.*) &#123;</span><br><span class=\"line\">            expires 60d;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\">        # 设置typecho博客的config文章不被访问，保证安全</span><br><span class=\"line\">        location = /config.inc.php&#123;</span><br><span class=\"line\">            deny  all;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # keep the uploads directory safe by excluding php, php5, html file accessing. Applying to wordpress and typecho.</span><br><span class=\"line\">        # location ~ .*/uploads/.*\\.(php|php5|html)$ &#123;</span><br><span class=\"line\">        #   deny  all;</span><br><span class=\"line\">        # &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 设置wordpress和typecho博客中，插件目录无法直接访问php或者html文件</span><br><span class=\"line\">        location ~ .*/plugins/.*\\.(php|php5|html)$ &#123;</span><br><span class=\"line\">            deny  all;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #Rewrite的伪静态(针对wordpress/typecho)，url地址去掉index.php</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            if (-f $request_filename/index.html)&#123;</span><br><span class=\"line\">                rewrite (.*) $1/index.html break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (-f $request_filename/index.php)&#123;</span><br><span class=\"line\">                rewrite (.*) $1/index.php;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        if (!-f $request_filename)&#123;</span><br><span class=\"line\">                rewrite (.*) /index.php;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #访问favicon.ico时不产生日志</span><br><span class=\"line\">        location = /favicon.ico &#123;</span><br><span class=\"line\">            access_log off;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #设置40系列错误的应答文件为40x.html</span><br><span class=\"line\">        error_page  400 401 402 403 404  /40x.html;</span><br><span class=\"line\">        location = /40x.html &#123;</span><br><span class=\"line\">                root   html;</span><br><span class=\"line\">                index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #设置50系列错误的应答文件为50x.html</span><br><span class=\"line\">        #</span><br><span class=\"line\">        error_page   500 501 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    proxy_pass   http://127.0.0.1;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 设置Nginx和php通信机制为tcp的socket模式，而不是直接监听9000端口</span><br><span class=\"line\">        location  ~ .*\\.php(\\/.*)*$ &#123;</span><br><span class=\"line\">             fastcgi_split_path_info ^(.+\\.php)(/.+)$;</span><br><span class=\"line\">             #fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">             # the better form of fastcgi_pass than before</span><br><span class=\"line\">             fastcgi_pass   unix:/var/run/php-fpm/php-fpm.sock;</span><br><span class=\"line\">             fastcgi_index  index.php;</span><br><span class=\"line\">             fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class=\"line\">             include        fastcgi_params;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class=\"line\">        # concurs with nginx&#x27;s one</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ /\\.ht &#123;</span><br><span class=\"line\">        #    deny  all;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"服务管理\"><a href=\"#服务管理\" class=\"headerlink\" title=\"服务管理\"></a>服务管理</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx # 启动</span><br><span class=\"line\">nginx -t # 测试配置</span><br><span class=\"line\">nginx -s reload # 重载配置</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      88;</span><br><span class=\"line\">    server_name localhost;</span><br><span class=\"line\">    charset     utf-8;</span><br><span class=\"line\">    index       index.html index.htm;</span><br><span class=\"line\">    access_log  logs/access.log;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        return 200 &quot;test conf&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"重定向（地址会变）\"><a href=\"#重定向（地址会变）\" class=\"headerlink\" title=\"重定向（地址会变）\"></a>重定向（地址会变）</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location / &#123;</span><br><span class=\"line\">    return 302 http://localhost:89/$request_uri;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"># redirect.conf</span><br><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen      89;</span><br><span class=\"line\">    server_name localhost;</span><br><span class=\"line\">    charset     utf-8;</span><br><span class=\"line\">    index       index.html index.htm;</span><br><span class=\"line\">    access_log  logs/access.log;</span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">        return 200 &quot;after redirect uri&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">进行测试：curl -L localhost:88</span><br><span class=\"line\">返回：after redirect uri</span><br></pre></td></tr></table></figure>\n<h3 id=\"匹配以-x2F-api-x2F-开头的uri\"><a href=\"#匹配以-x2F-api-x2F-开头的uri\" class=\"headerlink\" title=\"匹配以&#x2F;api&#x2F;开头的uri\"></a>匹配以&#x2F;api&#x2F;开头的uri</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location ^/api/ &#123;</span><br><span class=\"line\">  proxy_pass http://loclhost:8090;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"一、centos7安装Nginx\"><a href=\"#一、centos7安装Nginx\" class=\"headerlink\" title=\"一、centos7安装Nginx\"></a>一、centos7安装Nginx</h4><h5 id=\"源码安装\"><a href=\"#源码安装\" class=\"headerlink\" title=\"源码安装\"></a>源码安装</h5><ul>\n<li><a href=\"http://nginx.org/download/\">所有nginx版本</a></li>\n</ul>\n<p>wget下载tar.gz包</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://nginx.org/download/nginx-1.20.1.tar.gz</span><br><span class=\"line\"></span><br><span class=\"line\"># 解压</span><br><span class=\"line\">tar xzf nginx-1.20.1.tar.gz</span><br></pre></td></tr></table></figure>\n\n<p>编译</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd nginx-1.20.1 &amp;&amp; ./configure</span><br></pre></td></tr></table></figure>\n<p>注意：<code>安装报错误的话比如：&quot;C compiler cc is not found&quot;，这个就是缺少编译环境，安装一下就可以了 yum -y install gcc make gcc-c++ openssl-devel</code></p>\n<p>安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li>nignx会被安装到<code>/usr/local/nginx</code>目录下</li>\n</ul>\n<p>nginx测试</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ which nginx</span><br><span class=\"line\">/usr/bin/nginx</span><br><span class=\"line\"></span><br><span class=\"line\">nginx # 启动nginx</span><br><span class=\"line\">ps aux|grep nginx # 查看nginx进程</span><br><span class=\"line\">nginx -s stop # 停止nginx</span><br><span class=\"line\"></span><br><span class=\"line\">nginx -v # nginx 版本</span><br><span class=\"line\">nginx -t # 测试配置文件</span><br><span class=\"line\">nginx -s reload # 重载配置</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>防火墙设置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status firewalld # 查看防火墙状态</span><br></pre></td></tr></table></figure>\n\n<p>设置放行端口，编辑<code>/etc/firewalld/zones/public.xml</code>文件，在</zone>前面加:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;zone&gt;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  &lt;port port=&quot;30000-30100&quot; protocol=&quot;tcp&quot;/&gt;</span><br><span class=\"line\">  &lt;port port=&quot;80&quot; protocol=&quot;tcp&quot;/&gt;</span><br><span class=\"line\">&lt;/zone&gt;</span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li>可以设置端口段或单个端口</li>\n</ul>\n<p>配完文件后重载<code>firewall-cmd --reload</code>，查看被放行的端口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">firewall-cmd --list-ports </span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二、配置文件\"><a href=\"#二、配置文件\" class=\"headerlink\" title=\"二、配置文件\"></a>二、配置文件</h4><p>查看<code>/usr/local/nginx/conf/nginx.conf</code>文件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">worker_processes  1;</span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  logs/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #keepalive_timeout  0;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    gzip  on;</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen       80;</span><br><span class=\"line\">        server_name  localhost;</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        error_page   500 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    include  vhost/*.conf;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>说明：</p>\n<ul>\n<li><p><code>worker_processes</code> - work进程数，一般根据cpu核数来设置，可以设为和CPU的数量一样</p>\n</li>\n<li><p><code>worker_connections</code> - 单个work进程可以连的并发连接数，连接数依赖于系统级别的进程可打开文件数，<code>ulimit -n</code>可查看</p>\n<p><code>cat /proc/nginx_work_pid/limits</code> 里面的<code>Max open files</code>也可查询。</p>\n</li>\n<li><p><code>log_format</code> - 设置nginx日志格式</p>\n</li>\n<li><p><code>access_log</code> - 设置文件存储位置和应用的日志格式</p>\n</li>\n<li><p><code>sendfile</code> - 开启文件高效传输模式</p>\n</li>\n<li><p><code>keepalive_timeout</code> - 客户端和nginx之间建立的tcp长连接维持时间</p>\n</li>\n<li><p><code>gzip</code> - 开启gzip模块，文件被压缩传到客户端，优化传输效率，有效节省带宽。</p>\n</li>\n<li><p><code>listen 80</code> - 监听80端口</p>\n</li>\n<li><p><code>root   html;</code> - 相当于<code>root /usr/local/nginx/html</code></p>\n</li>\n<li><p><code>index index.html</code> - 查找<code>/usr/local/nginx/html</code>目录下的index.html文件</p>\n</li>\n<li><p><code>include</code> - 添加配置文件</p>\n</li>\n</ul>\n<p>示例：在vhost下添加配置文件<code>test.conf</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name 192.168.1.189;</span><br><span class=\"line\">    location /ricky/ &#123;</span><br><span class=\"line\">\t    return 200 &quot;im ricky&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>注意：</p>\n<ul>\n<li>server_name指定为本机的ip而不是localhost，因为上一目录nginx.conf配置的localhost</li>\n<li>指定访问前缀为&#x2F;ricky&#x2F;</li>\n</ul>\n<p>检查并重载配置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nginx -t</span><br><span class=\"line\">nginx -s reload</span><br></pre></td></tr></table></figure>\n\n<p>访问：curl <a href=\"http://192.168.1.189/ricky/\">http://192.168.1.189:80/ricky/</a><br>注意：</p>\n<ul>\n<li><p>访问的时候<code>192.168.1.189</code> 不能写成localhost，不然匹配规则就跑到nginx.conf里面的server去了</p>\n</li>\n<li><p>ricky后面的<code>/</code>不可以省略；如果想省略，可以把<code>location /ricky/</code>写成<code>location /ricky</code></p>\n<p><code>location /ricky</code>既会匹配到<code>http://192.168.1.189:80/ricky</code>的路由，也会匹配到<code>http://192.168.1.189:80/rickyadsafaf/a</code></p>\n<p>总的来说，nginx先在所有配置文件中匹配端口-&gt;再到server_name-&gt;具体location(location之间又有优先级的区分)</p>\n</li>\n</ul>\n<h4 id=\"三、location优先级\"><a href=\"#三、location优先级\" class=\"headerlink\" title=\"三、location优先级\"></a>三、location优先级</h4><p>优先级高到低</p>\n<ul>\n<li><code>location = /uri</code> - 字符 <code>=</code> 表示精准匹配（精准匹配优先级最高）</li>\n<li><code>location ^~ /uri</code> - 字符 <code>^</code> 表示以&#x2F;test开头的路径，<code>~</code> 表区分大小写；但是 <code>~*</code> 表不区分大小写(带 <code>~*</code> 等修饰符优先级次之)</li>\n<li><code>location /url</code> - 不带修饰符的前缀再次之</li>\n<li><code>location /</code> - 最后是交给<code>/</code>通用匹配。</li>\n</ul>\n<p>示例1：比较精准和带修饰符</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name 192.168.1.189;</span><br><span class=\"line\">    location = /ricky &#123;</span><br><span class=\"line\">\t    return 200 &quot;精准&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location ^~ /ricky &#123;</span><br><span class=\"line\">\t    return 200 &quot;修饰符&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>重载配置并访问：<code>curl http://192.168.1.189:80/ricky</code>，输出<code>精准</code></p>\n<p>示例2：比较带修饰符和不带修饰符</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server &#123;</span><br><span class=\"line\">    listen 80;</span><br><span class=\"line\">    server_name 192.168.1.189;</span><br><span class=\"line\">    location ^~ ricky &#123;</span><br><span class=\"line\">\t    return 200 &quot;精准&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    location / &#123;</span><br><span class=\"line\">\t    return 200 &quot;通用&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>重载配置并访问：<code>curl http://192.168.1.189:80/ricky</code>，输出<code>精准</code>；访问不在&#x2F;ricky规则内的就打出<code>通用</code>，如<code>curl http://192.168.1.189:80/ris</code></p>\n<h4 id=\"nginx不需要后端就可以返回远程用户ip的配置\"><a href=\"#nginx不需要后端就可以返回远程用户ip的配置\" class=\"headerlink\" title=\"nginx不需要后端就可以返回远程用户ip的配置\"></a>nginx不需要后端就可以返回远程用户ip的配置</h4><p>配置:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">location /ip &#123;</span><br><span class=\"line\">    default_type text/plain;</span><br><span class=\"line\">    return 200 $remote_addr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>访问</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl https://example.com/ip</span><br><span class=\"line\">192.168.1.187</span><br></pre></td></tr></table></figure>\n\n<p>返回json格式：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ curl -s https://example.com/json_ip | jq</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;ip&quot;: &quot;192.168.1.187&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"nginx-conf文件详解\"><a href=\"#nginx-conf文件详解\" class=\"headerlink\" title=\"nginx.conf文件详解\"></a>nginx.conf文件详解</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 定义nginx运行的用户和用户组</span><br><span class=\"line\">user www www;</span><br><span class=\"line\"></span><br><span class=\"line\"># nginx work进程数，一般与cpu核数一致。</span><br><span class=\"line\">worker_processes 8;</span><br><span class=\"line\"></span><br><span class=\"line\"># 错误日志类型定义</span><br><span class=\"line\">error_log /var/log/nginx/error.log info;</span><br><span class=\"line\"></span><br><span class=\"line\"># 进程文件</span><br><span class=\"line\">pid /var/run/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\"># 1个nginx进程最多能打开的文件描述符数，建议与ulimit -n(系统最大能打开的文件描述符数)一致</span><br><span class=\"line\">work_rlimit_nofile 65535;</span><br><span class=\"line\"></span><br><span class=\"line\"># </span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">  # 高性能网络io模型</span><br><span class=\"line\">  use epoll;</span><br><span class=\"line\">  # 单进程最大连接数</span><br><span class=\"line\">  work_connections 65535; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">  include mime.type; # 文件扩展与文件类型名映射表</span><br><span class=\"line\">  default_type application/ocetet-stream; # 默认文件类型</span><br><span class=\"line\">  # charset utf-8; # 默认编码</span><br><span class=\"line\">  client_header_buffer_size 32; # 上传文件大小限制</span><br><span class=\"line\">  # 所谓请求报文包含了请求头(如 User-Agent： 或 Accept：)+请求行(GET /index.html HTTP/1.1)+请求body</span><br><span class=\"line\">  large_client_header_buffers 4 64k; # 设定请求行+请求头不能超过4x64k</span><br><span class=\"line\">  client_max_body_size 8m;  # 设置body(或上传文件)最大值8m</span><br><span class=\"line\">  sendfile on; # 开启高效文件传输模式，sendfile指令指定nginx是否调用sendfile函数来输出文件，对于普通应用设为 on，如果用来进行下载等应用磁盘IO重负载应用，可设置为off，以平衡磁盘与网络I/O处理速度，降低系统的负载。注意：如果图片显示不正常把这个改成off。</span><br><span class=\"line\"></span><br><span class=\"line\">  autoindex on; #开启目录列表访问，合适下载服务器，默认关闭。</span><br><span class=\"line\">  keepalive_timeout 120; # 长连接超时时间，单位s</span><br><span class=\"line\"></span><br><span class=\"line\">  #FastCGI相关参数是为了改善网站的性能：减少资源占用，提高访问速度</span><br><span class=\"line\">  fastcgi_connect_timeout 300;</span><br><span class=\"line\">  fastcgi_send_timeout 300;</span><br><span class=\"line\">  fastcgi_read_timeout 300;</span><br><span class=\"line\">  fastcgi_buffer_size 64k;</span><br><span class=\"line\">  fastcgi_buffers 4 64k;</span><br><span class=\"line\">  fastcgi_busy_buffers_size 128k;</span><br><span class=\"line\">  fastcgi_temp_file_write_size 128k;</span><br><span class=\"line\"></span><br><span class=\"line\">  #gzip模块设置</span><br><span class=\"line\">  gzip on;        #开启gzip压缩输出</span><br><span class=\"line\">  gzip_min_length 1k; #最小压缩文件大小</span><br><span class=\"line\">  gzip_buffers 4 16k; #压缩缓冲区</span><br><span class=\"line\">  gzip_http_version 1.0; #压缩版本（默认1.1，前端如果是squid2.5请使用1.0）开始压缩的http协议版本(可以不设置,目前几乎全是1.1协议)</span><br><span class=\"line\">  gzip_comp_level 2;   #推荐6压缩级别(级别越高,压的越小,越浪费CPU计算资源)</span><br><span class=\"line\">  gzip_types text/plain application/x-javascript text/css application/xml;</span><br><span class=\"line\">  #压缩类型，默认就已经包含text/html，所以下面就不用再写了，写上去也不会有问题，但是会有一个warn。</span><br><span class=\"line\">  gzip_vary on;   # 是否传输gzip压缩标志</span><br><span class=\"line\">  #limit_zone crawler $binary_remote_addr 10m; #开启限制IP连接数的时候需要使用</span><br><span class=\"line\"></span><br><span class=\"line\">  upstream blog.ha97.com &#123;</span><br><span class=\"line\">    #upstream的负载均衡，weight是权重，可以根据机器配置定义权重。weigth参数表示权值，权值越高被分配到的几率越大。</span><br><span class=\"line\">    server 192.168.80.121:80 weight=3;</span><br><span class=\"line\">    server 192.168.80.122:80 weight=2;</span><br><span class=\"line\">    server 192.168.80.123:80 weight=3;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  #虚拟主机的配置</span><br><span class=\"line\">  server</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      #监听端口</span><br><span class=\"line\">      listen 80;</span><br><span class=\"line\">      #域名可以有多个，用空格隔开</span><br><span class=\"line\">      server_name www.ha97.com ha97.com;</span><br><span class=\"line\">      index index.html index.htm index.php;</span><br><span class=\"line\">      root /data/www/ha97;</span><br><span class=\"line\">      location ~ .*\\.(php|php5)?$</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">      fastcgi_pass 127.0.0.1:9000;</span><br><span class=\"line\">      fastcgi_index index.php;</span><br><span class=\"line\">      include fastcgi.conf;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      #图片缓存时间设置</span><br><span class=\"line\">      location ~ .*\\.(gif|jpg|jpeg|png|bmp|swf)$</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">      expires 10d;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      #JS和CSS缓存时间设置</span><br><span class=\"line\">      location ~ .*\\.(js|css)?$</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">      expires 1h;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      #日志格式设定</span><br><span class=\"line\">      log_format access &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">      &#x27;&quot;$http_user_agent&quot; $http_x_forwarded_for&#x27;;</span><br><span class=\"line\">      #定义本虚拟主机的访问日志</span><br><span class=\"line\">      access_log /var/log/nginx/ha97access.log access;</span><br><span class=\"line\"></span><br><span class=\"line\">      #对 &quot;/&quot; 启用反向代理</span><br><span class=\"line\">      location / &#123;</span><br><span class=\"line\">      proxy_pass http://127.0.0.1:88;</span><br><span class=\"line\">      proxy_redirect off;</span><br><span class=\"line\">      proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">      #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP</span><br><span class=\"line\">      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">      #以下是一些反向代理的配置，可选。</span><br><span class=\"line\">      proxy_set_header Host $host;</span><br><span class=\"line\">      client_max_body_size 10m; #允许客户端请求的最大单文件字节数</span><br><span class=\"line\">      client_body_buffer_size 128k; #缓冲区代理缓冲用户端请求的最大字节数，</span><br><span class=\"line\">      proxy_connect_timeout 90; #nginx跟后端服务器连接超时时间(代理连接超时)</span><br><span class=\"line\">      proxy_send_timeout 90; #后端服务器数据回传时间(代理发送超时)</span><br><span class=\"line\">      proxy_read_timeout 90; #连接成功后，后端服务器响应时间(代理接收超时)</span><br><span class=\"line\">      proxy_buffer_size 4k; #设置代理服务器（nginx）保存用户头信息的缓冲区大小</span><br><span class=\"line\">      proxy_buffers 4 32k; #proxy_buffers缓冲区，网页平均在32k以下的设置</span><br><span class=\"line\">      proxy_busy_buffers_size 64k; #高负荷下缓冲大小（proxy_buffers*2）</span><br><span class=\"line\">      proxy_temp_file_write_size 64k;</span><br><span class=\"line\">      #设定缓存文件夹大小，大于这个值，将从upstream服务器传</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      #设定查看Nginx状态的地址</span><br><span class=\"line\">      location /NginxStatus &#123;</span><br><span class=\"line\">      stub_status on;</span><br><span class=\"line\">      access_log on;</span><br><span class=\"line\">      auth_basic &quot;NginxStatus&quot;;</span><br><span class=\"line\">      auth_basic_user_file conf/htpasswd;</span><br><span class=\"line\">      #htpasswd文件的内容可以用apache提供的htpasswd工具来产生。</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      #本地动静分离反向代理配置</span><br><span class=\"line\">      #所有jsp的页面均交由tomcat或resin处理</span><br><span class=\"line\">      location ~ .(jsp|jspx|do)?$ &#123;</span><br><span class=\"line\">      proxy_set_header Host $host;</span><br><span class=\"line\">      proxy_set_header X-Real-IP $remote_addr;</span><br><span class=\"line\">      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class=\"line\">      proxy_pass http://127.0.0.1:8080;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">      #所有静态文件由nginx直接读取不经过tomcat或resin</span><br><span class=\"line\">      location ~ .*.(htm|html|gif|jpg|jpeg|png|bmp|swf|ioc|rar|zip|txt|flv|mid|doc|ppt|pdf|xls|mp3|wma)$</span><br><span class=\"line\">      &#123; expires 15d; &#125;</span><br><span class=\"line\">      location ~ .*.(js|css)?$</span><br><span class=\"line\">      &#123; expires 1h; &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h3 id=\"常用nginx配置demo\"><a href=\"#常用nginx配置demo\" class=\"headerlink\" title=\"常用nginx配置demo\"></a>常用nginx配置demo</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">user  nginx nginx;</span><br><span class=\"line\">worker_processes  1;</span><br><span class=\"line\"></span><br><span class=\"line\">error_log  /var/log/nginx/error.log;</span><br><span class=\"line\">#error_log  logs/error.log  notice;</span><br><span class=\"line\">#error_log  logs/error.log  info;</span><br><span class=\"line\"></span><br><span class=\"line\">pid        /var/run/nginx/nginx.pid;</span><br><span class=\"line\"></span><br><span class=\"line\">events &#123;</span><br><span class=\"line\">    worker_connections  1024;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">http &#123;</span><br><span class=\"line\">    include       mime.types;</span><br><span class=\"line\">    default_type  application/octet-stream;</span><br><span class=\"line\"></span><br><span class=\"line\">    log_format  main  &#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span><br><span class=\"line\">                      &#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span><br><span class=\"line\">                      &#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">    access_log  /var/log/nginx/access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">    sendfile        on;</span><br><span class=\"line\">    #tcp_nopush     on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #keepalive_timeout  0;</span><br><span class=\"line\">    keepalive_timeout  65;</span><br><span class=\"line\"></span><br><span class=\"line\">    #隐藏Nginx版本信息，禁止网站目录浏览</span><br><span class=\"line\">    server_tokens off;</span><br><span class=\"line\">    autoindex off;</span><br><span class=\"line\">    #当FastCGI后端服务器处理请求给出http响应码为4xx和5xx时，就转发给nginx</span><br><span class=\"line\">    fastcgi_intercept_errors on;</span><br><span class=\"line\"></span><br><span class=\"line\">    #关于fastcgi的配置</span><br><span class=\"line\">    fastcgi_connect_timeout 300;    </span><br><span class=\"line\">    fastcgi_send_timeout 300;    </span><br><span class=\"line\">    fastcgi_read_timeout 300;    </span><br><span class=\"line\">    fastcgi_buffer_size 64k;    </span><br><span class=\"line\">    fastcgi_buffers 4 64k;    </span><br><span class=\"line\">    fastcgi_busy_buffers_size 128k;    </span><br><span class=\"line\">    fastcgi_temp_file_write_size 128k;</span><br><span class=\"line\"></span><br><span class=\"line\">    #支持gzip压缩</span><br><span class=\"line\">    gzip on;</span><br><span class=\"line\">    gzip_min_length 1k;</span><br><span class=\"line\">    gzip_buffers 16 64k;</span><br><span class=\"line\">    gzip_http_version 1.1;</span><br><span class=\"line\">    gzip_comp_level 6;</span><br><span class=\"line\">    gzip_types text/plain application/x-javascript text/css application/javascript text/javascript image/jpeg image/gif image/png application/xml application/json;</span><br><span class=\"line\">    gzip_vary on;</span><br><span class=\"line\">    gzip_disable &quot;MSIE [1-6].(?!.*SV1)&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">    #</span><br><span class=\"line\">    # 重定向所有带www请求到非www的请求</span><br><span class=\"line\">    #</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen               *:80;</span><br><span class=\"line\">        listen               *:443 ssl spdy;</span><br><span class=\"line\">        server_name www.typecodes.com;</span><br><span class=\"line\">        # ssl证书配置见文章 https://typecodes.com/web/lnmppositivessl.html</span><br><span class=\"line\">        ssl_certificate /etc/nginx/ssl/typecodes.crt;</span><br><span class=\"line\">        # ssl密钥文件见文章 https://typecodes.com/web/lnmppositivessl.html</span><br><span class=\"line\">        ssl_certificate_key /etc/nginx/ssl/typecodes.key;</span><br><span class=\"line\">        # 不产生日志</span><br><span class=\"line\">        access_log off;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 访问favicon.ico和robots.txt不跳转（把这两个文件存放在上级目录html中）</span><br><span class=\"line\">        location ~* ^/(favicon.ico|robots.txt)$ &#123;</span><br><span class=\"line\">            root html;</span><br><span class=\"line\">            expires max;</span><br><span class=\"line\">            log_not_found off;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            return 301 https://typecodes.com$request_uri;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    #</span><br><span class=\"line\">    # 将所有http请求重定向到https</span><br><span class=\"line\">    #</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen               *:80;</span><br><span class=\"line\">        server_name          typecodes.com;</span><br><span class=\"line\">        # 不产生日志</span><br><span class=\"line\">        access_log off;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 访问favicon.ico和robots.txt不跳转（把这两个文件存放在上级目录html中）</span><br><span class=\"line\">        location ~* ^/(favicon.ico|robots.txt)$ &#123;</span><br><span class=\"line\">            root html;</span><br><span class=\"line\">            expires max;</span><br><span class=\"line\">            log_not_found off;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            return 301 https://typecodes.com$request_uri;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    #</span><br><span class=\"line\">    # HTTPS server</span><br><span class=\"line\">    #</span><br><span class=\"line\">    server &#123;</span><br><span class=\"line\">        listen               *:443 ssl spdy;</span><br><span class=\"line\">        server_name typecodes.com;</span><br><span class=\"line\"></span><br><span class=\"line\">        # ssl证书配置见文章 https://typecodes.com/web/lnmppositivessl.html</span><br><span class=\"line\">        ssl_certificate /etc/nginx/ssl/typecodes.crt;</span><br><span class=\"line\">        # ssl密钥文件见文章 https://typecodes.com/web/lnmppositivessl.html</span><br><span class=\"line\">        ssl_certificate_key /etc/nginx/ssl/typecodes.key;</span><br><span class=\"line\">        ssl_session_cache shared:SSL:20m;</span><br><span class=\"line\">        ssl_session_timeout 10m;</span><br><span class=\"line\">        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:AES:CAMELLIA:DES-CBC3-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!MD5:!PSK:!aECDH:!EDH-DSS-DES-CBC3-SHA:!EDH-RSA-DES-CBC3-SHA:!KRB5-DES-CBC3-SHA:!CAMELLIA;</span><br><span class=\"line\">        ssl_protocols TLSv1 TLSv1.1 TLSv1.2; #enables TLSv1, but not SSLv2, SSLv3 which is weak and should no longer be used.</span><br><span class=\"line\">        ssl_prefer_server_ciphers on;</span><br><span class=\"line\">        # 开启spdy功能</span><br><span class=\"line\">        add_header Alternate-Protocol 443:npn-spdy/3.1;</span><br><span class=\"line\">        # 严格的https访问</span><br><span class=\"line\">        add_header Strict-Transport-Security &quot;max-age=31536000; includeSubdomains;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">        #设置网站根目录</span><br><span class=\"line\">        root   /usr/share/nginx/html/typecodes;</span><br><span class=\"line\">        index  index.php index.html;</span><br><span class=\"line\"></span><br><span class=\"line\">        charset utf-8;</span><br><span class=\"line\"></span><br><span class=\"line\">        #access_log  /var/log/nginx/log/host.access.log  main;</span><br><span class=\"line\"></span><br><span class=\"line\">        #设置css/javascript/图片等静态资源的缓存时间</span><br><span class=\"line\">        location ~ .*\\.(css|js|ico|png|gif|jpg|json|mp3|mp4|flv|swf)(.*) &#123;</span><br><span class=\"line\">            expires 60d;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # include /etc/nginx/default.d/*.conf;</span><br><span class=\"line\">        # 设置typecho博客的config文章不被访问，保证安全</span><br><span class=\"line\">        location = /config.inc.php&#123;</span><br><span class=\"line\">            deny  all;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # keep the uploads directory safe by excluding php, php5, html file accessing. Applying to wordpress and typecho.</span><br><span class=\"line\">        # location ~ .*/uploads/.*\\.(php|php5|html)$ &#123;</span><br><span class=\"line\">        #   deny  all;</span><br><span class=\"line\">        # &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 设置wordpress和typecho博客中，插件目录无法直接访问php或者html文件</span><br><span class=\"line\">        location ~ .*/plugins/.*\\.(php|php5|html)$ &#123;</span><br><span class=\"line\">            deny  all;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #Rewrite的伪静态(针对wordpress/typecho)，url地址去掉index.php</span><br><span class=\"line\">        location / &#123;</span><br><span class=\"line\">            if (-f $request_filename/index.html)&#123;</span><br><span class=\"line\">                rewrite (.*) $1/index.html break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if (-f $request_filename/index.php)&#123;</span><br><span class=\"line\">                rewrite (.*) $1/index.php;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        if (!-f $request_filename)&#123;</span><br><span class=\"line\">                rewrite (.*) /index.php;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #访问favicon.ico时不产生日志</span><br><span class=\"line\">        location = /favicon.ico &#123;</span><br><span class=\"line\">            access_log off;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #设置40系列错误的应答文件为40x.html</span><br><span class=\"line\">        error_page  400 401 402 403 404  /40x.html;</span><br><span class=\"line\">        location = /40x.html &#123;</span><br><span class=\"line\">                root   html;</span><br><span class=\"line\">                index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        #设置50系列错误的应答文件为50x.html</span><br><span class=\"line\">        #</span><br><span class=\"line\">        error_page   500 501 502 503 504  /50x.html;</span><br><span class=\"line\">        location = /50x.html &#123;</span><br><span class=\"line\">            root   html;</span><br><span class=\"line\">            index  index.html index.htm;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ \\.php$ &#123;</span><br><span class=\"line\">        #    proxy_pass   http://127.0.0.1;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # 设置Nginx和php通信机制为tcp的socket模式，而不是直接监听9000端口</span><br><span class=\"line\">        location  ~ .*\\.php(\\/.*)*$ &#123;</span><br><span class=\"line\">             fastcgi_split_path_info ^(.+\\.php)(/.+)$;</span><br><span class=\"line\">             #fastcgi_pass   127.0.0.1:9000;</span><br><span class=\"line\">             # the better form of fastcgi_pass than before</span><br><span class=\"line\">             fastcgi_pass   unix:/var/run/php-fpm/php-fpm.sock;</span><br><span class=\"line\">             fastcgi_index  index.php;</span><br><span class=\"line\">             fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name;</span><br><span class=\"line\">             include        fastcgi_params;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        # deny access to .htaccess files, if Apache&#x27;s document root</span><br><span class=\"line\">        # concurs with nginx&#x27;s one</span><br><span class=\"line\">        #</span><br><span class=\"line\">        #location ~ /\\.ht &#123;</span><br><span class=\"line\">        #    deny  all;</span><br><span class=\"line\">        #&#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n"},{"title":"第7期：dns","date":"2023-05-19T17:09:12.000Z","_content":"##### DNS分层结构\n- 根DNS服务器：ROOT nameserver。本地域名服务器查不到结果时，则会向它查询顶级域名服务器ip。\n顶级域名服务器：Tld nameserver。负责管理在该域名服务器注册的二级域名，例如.com是顶级域名服务器，向它查询时，可以返回example.com所在的权威域名服务器的ip地址。\n- 权威域名服务器：authoritative nameserver。在特定区域内有唯一性，负责维护域名和ip的对应关系。如云解析DNS。\n- 本地域名服务器：Local DNS。本地域名服务器是响应来自客户端的递归请求，并最终跟踪直到获取到解析结果的DNS服务器。例如用户本机自动分配的DNS、运营商ISP分配的DNS、谷歌8.8.8.8/114公共DNS等。\n\n##### 域名解析过程\n```\nDNS查询的结果通常会在本地域名服务器中进行缓存，如果本地域名服务器中有缓存的情况下，则会跳过如下DNS查询步骤，很快返回解析结果。下面的示例则概述了本地域名服务器没有缓存的情况下，DNS查询所需的8个步骤：\n\n1、用户在Web浏览器中输入“example.com”， 则由 本地域名服务器 开始进行递归查询。\n\n2、本地域名服务器采用迭代查询的方法，向根域名服务器进行查询。\n\n3、根域名服务器告诉本地域名服务器，下一步应该查询的顶级域名服务器.com TLD的IP地址。\n\n4、本地域名服务器向顶级域名服务器.com TLD进行查询。\n\n5、.com TLD服务器告诉本地域名服务器，下一步查询example.com权威域名服务器的IP地址。\n\n6、本地域名服务器向example.com权威域名服务器发送查询。\n\n7、example.com权威域名服务器告诉本地域名服务器所查询的主机IP地址。\n\n8、本地域名服务器最后把查询的IP地址响应给web浏览器。\n\n一旦DNS查询的8个步骤返回了example.com的IP地址，浏览器就能够发出对网页的请求。\n\n9、浏览器向IP地址发出HTTP请求\n\n10、该IP处的web服务器返回要在浏览器中呈现的网页\n```\n### 工具 dig 常用命令\n```\ndig +short time.geekbang.org # 直接输出域名对应A记录\ndig +trace @114.114.114.114 +nodnssec time.geekbang.org # +trace表示开启跟踪查询# +nodnssec表示禁止DNS安全扩展；@114.114.114.114指定使用的dns服务器\n```\n\n### 示例\n```\n$ dig +trace @114.114.114.114 +nodnssec time.geekbang.org\n\n; <<>> DiG 9.10.6 <<>> +trace @114.114.114.114 +nodnssec time.geekbang.org\n; (1 server found)\n;; global options: +cmd\n.                       1791    IN      NS      b.root-servers.net.\n.                       1791    IN      NS      h.root-servers.net.\n.                       1791    IN      NS      m.root-servers.net.\n.                       1791    IN      NS      d.root-servers.net.\n.                       1791    IN      NS      a.root-servers.net.\n.                       1791    IN      NS      e.root-servers.net.\n.                       1791    IN      NS      k.root-servers.net.\n.                       1791    IN      NS      f.root-servers.net.\n.                       1791    IN      NS      i.root-servers.net.\n.                       1791    IN      NS      l.root-servers.net.\n.                       1791    IN      NS      g.root-servers.net.\n.                       1791    IN      NS      j.root-servers.net.\n.                       1791    IN      NS      c.root-servers.net.\n;; Received 251 bytes from 114.114.114.114#53(114.114.114.114) in 30 ms\n\norg.                    172800  IN      NS      a0.org.afilias-nst.info.\norg.                    172800  IN      NS      a2.org.afilias-nst.info.\norg.                    172800  IN      NS      b0.org.afilias-nst.org.\norg.                    172800  IN      NS      b2.org.afilias-nst.org.\norg.                    172800  IN      NS      c0.org.afilias-nst.info.\norg.                    172800  IN      NS      d0.org.afilias-nst.org.\n;; Received 448 bytes from 192.5.5.241#53(f.root-servers.net) in 154 ms\n\ngeekbang.org.           3600    IN      NS      dns9.hichina.com.\ngeekbang.org.           3600    IN      NS      dns10.hichina.com.\n;; Received 96 bytes from 199.19.53.1#53(c0.org.afilias-nst.info) in 188 ms\n\ntime.geekbang.org.      600     IN      A       39.106.233.176\n;; Received 62 bytes from 120.76.107.52#53(dns9.hichina.com) in 9 ms\n```","source":"_posts/第7期：dns.md","raw":"---\ntitle: 第7期：dns\ndate: 2023-05-20 01:09:12\ntags:\n---\n##### DNS分层结构\n- 根DNS服务器：ROOT nameserver。本地域名服务器查不到结果时，则会向它查询顶级域名服务器ip。\n顶级域名服务器：Tld nameserver。负责管理在该域名服务器注册的二级域名，例如.com是顶级域名服务器，向它查询时，可以返回example.com所在的权威域名服务器的ip地址。\n- 权威域名服务器：authoritative nameserver。在特定区域内有唯一性，负责维护域名和ip的对应关系。如云解析DNS。\n- 本地域名服务器：Local DNS。本地域名服务器是响应来自客户端的递归请求，并最终跟踪直到获取到解析结果的DNS服务器。例如用户本机自动分配的DNS、运营商ISP分配的DNS、谷歌8.8.8.8/114公共DNS等。\n\n##### 域名解析过程\n```\nDNS查询的结果通常会在本地域名服务器中进行缓存，如果本地域名服务器中有缓存的情况下，则会跳过如下DNS查询步骤，很快返回解析结果。下面的示例则概述了本地域名服务器没有缓存的情况下，DNS查询所需的8个步骤：\n\n1、用户在Web浏览器中输入“example.com”， 则由 本地域名服务器 开始进行递归查询。\n\n2、本地域名服务器采用迭代查询的方法，向根域名服务器进行查询。\n\n3、根域名服务器告诉本地域名服务器，下一步应该查询的顶级域名服务器.com TLD的IP地址。\n\n4、本地域名服务器向顶级域名服务器.com TLD进行查询。\n\n5、.com TLD服务器告诉本地域名服务器，下一步查询example.com权威域名服务器的IP地址。\n\n6、本地域名服务器向example.com权威域名服务器发送查询。\n\n7、example.com权威域名服务器告诉本地域名服务器所查询的主机IP地址。\n\n8、本地域名服务器最后把查询的IP地址响应给web浏览器。\n\n一旦DNS查询的8个步骤返回了example.com的IP地址，浏览器就能够发出对网页的请求。\n\n9、浏览器向IP地址发出HTTP请求\n\n10、该IP处的web服务器返回要在浏览器中呈现的网页\n```\n### 工具 dig 常用命令\n```\ndig +short time.geekbang.org # 直接输出域名对应A记录\ndig +trace @114.114.114.114 +nodnssec time.geekbang.org # +trace表示开启跟踪查询# +nodnssec表示禁止DNS安全扩展；@114.114.114.114指定使用的dns服务器\n```\n\n### 示例\n```\n$ dig +trace @114.114.114.114 +nodnssec time.geekbang.org\n\n; <<>> DiG 9.10.6 <<>> +trace @114.114.114.114 +nodnssec time.geekbang.org\n; (1 server found)\n;; global options: +cmd\n.                       1791    IN      NS      b.root-servers.net.\n.                       1791    IN      NS      h.root-servers.net.\n.                       1791    IN      NS      m.root-servers.net.\n.                       1791    IN      NS      d.root-servers.net.\n.                       1791    IN      NS      a.root-servers.net.\n.                       1791    IN      NS      e.root-servers.net.\n.                       1791    IN      NS      k.root-servers.net.\n.                       1791    IN      NS      f.root-servers.net.\n.                       1791    IN      NS      i.root-servers.net.\n.                       1791    IN      NS      l.root-servers.net.\n.                       1791    IN      NS      g.root-servers.net.\n.                       1791    IN      NS      j.root-servers.net.\n.                       1791    IN      NS      c.root-servers.net.\n;; Received 251 bytes from 114.114.114.114#53(114.114.114.114) in 30 ms\n\norg.                    172800  IN      NS      a0.org.afilias-nst.info.\norg.                    172800  IN      NS      a2.org.afilias-nst.info.\norg.                    172800  IN      NS      b0.org.afilias-nst.org.\norg.                    172800  IN      NS      b2.org.afilias-nst.org.\norg.                    172800  IN      NS      c0.org.afilias-nst.info.\norg.                    172800  IN      NS      d0.org.afilias-nst.org.\n;; Received 448 bytes from 192.5.5.241#53(f.root-servers.net) in 154 ms\n\ngeekbang.org.           3600    IN      NS      dns9.hichina.com.\ngeekbang.org.           3600    IN      NS      dns10.hichina.com.\n;; Received 96 bytes from 199.19.53.1#53(c0.org.afilias-nst.info) in 188 ms\n\ntime.geekbang.org.      600     IN      A       39.106.233.176\n;; Received 62 bytes from 120.76.107.52#53(dns9.hichina.com) in 9 ms\n```","slug":"第7期：dns","published":1,"updated":"2024-03-06T09:56:26.840Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvteo0015bklnat41bheh","content":"<h5 id=\"DNS分层结构\"><a href=\"#DNS分层结构\" class=\"headerlink\" title=\"DNS分层结构\"></a>DNS分层结构</h5><ul>\n<li>根DNS服务器：ROOT nameserver。本地域名服务器查不到结果时，则会向它查询顶级域名服务器ip。<br>顶级域名服务器：Tld nameserver。负责管理在该域名服务器注册的二级域名，例如.com是顶级域名服务器，向它查询时，可以返回example.com所在的权威域名服务器的ip地址。</li>\n<li>权威域名服务器：authoritative nameserver。在特定区域内有唯一性，负责维护域名和ip的对应关系。如云解析DNS。</li>\n<li>本地域名服务器：Local DNS。本地域名服务器是响应来自客户端的递归请求，并最终跟踪直到获取到解析结果的DNS服务器。例如用户本机自动分配的DNS、运营商ISP分配的DNS、谷歌8.8.8.8&#x2F;114公共DNS等。</li>\n</ul>\n<h5 id=\"域名解析过程\"><a href=\"#域名解析过程\" class=\"headerlink\" title=\"域名解析过程\"></a>域名解析过程</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DNS查询的结果通常会在本地域名服务器中进行缓存，如果本地域名服务器中有缓存的情况下，则会跳过如下DNS查询步骤，很快返回解析结果。下面的示例则概述了本地域名服务器没有缓存的情况下，DNS查询所需的8个步骤：</span><br><span class=\"line\"></span><br><span class=\"line\">1、用户在Web浏览器中输入“example.com”， 则由 本地域名服务器 开始进行递归查询。</span><br><span class=\"line\"></span><br><span class=\"line\">2、本地域名服务器采用迭代查询的方法，向根域名服务器进行查询。</span><br><span class=\"line\"></span><br><span class=\"line\">3、根域名服务器告诉本地域名服务器，下一步应该查询的顶级域名服务器.com TLD的IP地址。</span><br><span class=\"line\"></span><br><span class=\"line\">4、本地域名服务器向顶级域名服务器.com TLD进行查询。</span><br><span class=\"line\"></span><br><span class=\"line\">5、.com TLD服务器告诉本地域名服务器，下一步查询example.com权威域名服务器的IP地址。</span><br><span class=\"line\"></span><br><span class=\"line\">6、本地域名服务器向example.com权威域名服务器发送查询。</span><br><span class=\"line\"></span><br><span class=\"line\">7、example.com权威域名服务器告诉本地域名服务器所查询的主机IP地址。</span><br><span class=\"line\"></span><br><span class=\"line\">8、本地域名服务器最后把查询的IP地址响应给web浏览器。</span><br><span class=\"line\"></span><br><span class=\"line\">一旦DNS查询的8个步骤返回了example.com的IP地址，浏览器就能够发出对网页的请求。</span><br><span class=\"line\"></span><br><span class=\"line\">9、浏览器向IP地址发出HTTP请求</span><br><span class=\"line\"></span><br><span class=\"line\">10、该IP处的web服务器返回要在浏览器中呈现的网页</span><br></pre></td></tr></table></figure>\n<h3 id=\"工具-dig-常用命令\"><a href=\"#工具-dig-常用命令\" class=\"headerlink\" title=\"工具 dig 常用命令\"></a>工具 dig 常用命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dig +short time.geekbang.org # 直接输出域名对应A记录</span><br><span class=\"line\">dig +trace @114.114.114.114 +nodnssec time.geekbang.org # +trace表示开启跟踪查询# +nodnssec表示禁止DNS安全扩展；@114.114.114.114指定使用的dns服务器</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ dig +trace @114.114.114.114 +nodnssec time.geekbang.org</span><br><span class=\"line\"></span><br><span class=\"line\">; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; +trace @114.114.114.114 +nodnssec time.geekbang.org</span><br><span class=\"line\">; (1 server found)</span><br><span class=\"line\">;; global options: +cmd</span><br><span class=\"line\">.                       1791    IN      NS      b.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      h.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      m.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      d.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      a.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      e.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      k.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      f.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      i.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      l.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      g.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      j.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      c.root-servers.net.</span><br><span class=\"line\">;; Received 251 bytes from 114.114.114.114#53(114.114.114.114) in 30 ms</span><br><span class=\"line\"></span><br><span class=\"line\">org.                    172800  IN      NS      a0.org.afilias-nst.info.</span><br><span class=\"line\">org.                    172800  IN      NS      a2.org.afilias-nst.info.</span><br><span class=\"line\">org.                    172800  IN      NS      b0.org.afilias-nst.org.</span><br><span class=\"line\">org.                    172800  IN      NS      b2.org.afilias-nst.org.</span><br><span class=\"line\">org.                    172800  IN      NS      c0.org.afilias-nst.info.</span><br><span class=\"line\">org.                    172800  IN      NS      d0.org.afilias-nst.org.</span><br><span class=\"line\">;; Received 448 bytes from 192.5.5.241#53(f.root-servers.net) in 154 ms</span><br><span class=\"line\"></span><br><span class=\"line\">geekbang.org.           3600    IN      NS      dns9.hichina.com.</span><br><span class=\"line\">geekbang.org.           3600    IN      NS      dns10.hichina.com.</span><br><span class=\"line\">;; Received 96 bytes from 199.19.53.1#53(c0.org.afilias-nst.info) in 188 ms</span><br><span class=\"line\"></span><br><span class=\"line\">time.geekbang.org.      600     IN      A       39.106.233.176</span><br><span class=\"line\">;; Received 62 bytes from 120.76.107.52#53(dns9.hichina.com) in 9 ms</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h5 id=\"DNS分层结构\"><a href=\"#DNS分层结构\" class=\"headerlink\" title=\"DNS分层结构\"></a>DNS分层结构</h5><ul>\n<li>根DNS服务器：ROOT nameserver。本地域名服务器查不到结果时，则会向它查询顶级域名服务器ip。<br>顶级域名服务器：Tld nameserver。负责管理在该域名服务器注册的二级域名，例如.com是顶级域名服务器，向它查询时，可以返回example.com所在的权威域名服务器的ip地址。</li>\n<li>权威域名服务器：authoritative nameserver。在特定区域内有唯一性，负责维护域名和ip的对应关系。如云解析DNS。</li>\n<li>本地域名服务器：Local DNS。本地域名服务器是响应来自客户端的递归请求，并最终跟踪直到获取到解析结果的DNS服务器。例如用户本机自动分配的DNS、运营商ISP分配的DNS、谷歌8.8.8.8&#x2F;114公共DNS等。</li>\n</ul>\n<h5 id=\"域名解析过程\"><a href=\"#域名解析过程\" class=\"headerlink\" title=\"域名解析过程\"></a>域名解析过程</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DNS查询的结果通常会在本地域名服务器中进行缓存，如果本地域名服务器中有缓存的情况下，则会跳过如下DNS查询步骤，很快返回解析结果。下面的示例则概述了本地域名服务器没有缓存的情况下，DNS查询所需的8个步骤：</span><br><span class=\"line\"></span><br><span class=\"line\">1、用户在Web浏览器中输入“example.com”， 则由 本地域名服务器 开始进行递归查询。</span><br><span class=\"line\"></span><br><span class=\"line\">2、本地域名服务器采用迭代查询的方法，向根域名服务器进行查询。</span><br><span class=\"line\"></span><br><span class=\"line\">3、根域名服务器告诉本地域名服务器，下一步应该查询的顶级域名服务器.com TLD的IP地址。</span><br><span class=\"line\"></span><br><span class=\"line\">4、本地域名服务器向顶级域名服务器.com TLD进行查询。</span><br><span class=\"line\"></span><br><span class=\"line\">5、.com TLD服务器告诉本地域名服务器，下一步查询example.com权威域名服务器的IP地址。</span><br><span class=\"line\"></span><br><span class=\"line\">6、本地域名服务器向example.com权威域名服务器发送查询。</span><br><span class=\"line\"></span><br><span class=\"line\">7、example.com权威域名服务器告诉本地域名服务器所查询的主机IP地址。</span><br><span class=\"line\"></span><br><span class=\"line\">8、本地域名服务器最后把查询的IP地址响应给web浏览器。</span><br><span class=\"line\"></span><br><span class=\"line\">一旦DNS查询的8个步骤返回了example.com的IP地址，浏览器就能够发出对网页的请求。</span><br><span class=\"line\"></span><br><span class=\"line\">9、浏览器向IP地址发出HTTP请求</span><br><span class=\"line\"></span><br><span class=\"line\">10、该IP处的web服务器返回要在浏览器中呈现的网页</span><br></pre></td></tr></table></figure>\n<h3 id=\"工具-dig-常用命令\"><a href=\"#工具-dig-常用命令\" class=\"headerlink\" title=\"工具 dig 常用命令\"></a>工具 dig 常用命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dig +short time.geekbang.org # 直接输出域名对应A记录</span><br><span class=\"line\">dig +trace @114.114.114.114 +nodnssec time.geekbang.org # +trace表示开启跟踪查询# +nodnssec表示禁止DNS安全扩展；@114.114.114.114指定使用的dns服务器</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ dig +trace @114.114.114.114 +nodnssec time.geekbang.org</span><br><span class=\"line\"></span><br><span class=\"line\">; &lt;&lt;&gt;&gt; DiG 9.10.6 &lt;&lt;&gt;&gt; +trace @114.114.114.114 +nodnssec time.geekbang.org</span><br><span class=\"line\">; (1 server found)</span><br><span class=\"line\">;; global options: +cmd</span><br><span class=\"line\">.                       1791    IN      NS      b.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      h.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      m.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      d.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      a.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      e.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      k.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      f.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      i.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      l.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      g.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      j.root-servers.net.</span><br><span class=\"line\">.                       1791    IN      NS      c.root-servers.net.</span><br><span class=\"line\">;; Received 251 bytes from 114.114.114.114#53(114.114.114.114) in 30 ms</span><br><span class=\"line\"></span><br><span class=\"line\">org.                    172800  IN      NS      a0.org.afilias-nst.info.</span><br><span class=\"line\">org.                    172800  IN      NS      a2.org.afilias-nst.info.</span><br><span class=\"line\">org.                    172800  IN      NS      b0.org.afilias-nst.org.</span><br><span class=\"line\">org.                    172800  IN      NS      b2.org.afilias-nst.org.</span><br><span class=\"line\">org.                    172800  IN      NS      c0.org.afilias-nst.info.</span><br><span class=\"line\">org.                    172800  IN      NS      d0.org.afilias-nst.org.</span><br><span class=\"line\">;; Received 448 bytes from 192.5.5.241#53(f.root-servers.net) in 154 ms</span><br><span class=\"line\"></span><br><span class=\"line\">geekbang.org.           3600    IN      NS      dns9.hichina.com.</span><br><span class=\"line\">geekbang.org.           3600    IN      NS      dns10.hichina.com.</span><br><span class=\"line\">;; Received 96 bytes from 199.19.53.1#53(c0.org.afilias-nst.info) in 188 ms</span><br><span class=\"line\"></span><br><span class=\"line\">time.geekbang.org.      600     IN      A       39.106.233.176</span><br><span class=\"line\">;; Received 62 bytes from 120.76.107.52#53(dns9.hichina.com) in 9 ms</span><br></pre></td></tr></table></figure>"},{"title":"第8期：shell","date":"2023-05-20T01:27:34.000Z","_content":"##### 数字比较符eq\n```\n只能比较数字，若字符则会被转成数字，如字符0不会等于数字0\n\n-ne // 不等于\n-gt // 大于\n-eq // 等于\n-lt // 小于\n\nif [ 1 -eq 0 ];then\n\techo \"eq\"\nfi\n```\n\n##### 特殊变量\n```\n$0 当前脚本名称\n$n 传递给脚本的第几个参数，如$1获取第一个参数\n$# 传递给脚本的参数个数\n$* 传递给脚本的所有参数\n$? 上个命令的退出状态\n$$ 当前shell的pid\n\n# 示例\ncd /optsafjlajdk\necho $?  // 切换到一个不存在的目录，返回1不正常状态\n```\n\n##### if/else\n```\nbranch_name=\"test\"\n\nif [ ${branch_name} == \"test\" ];then\n\techo \"yes\"\nelse\n\techo \"no\"\nfi\n```\n\n##### case\n```\nenv=$1\ncase $env in\n  release)\n\techo \"release\"\n\twait\n\t;;\n  test)\n\techo \"test\"\n\twait\n\t;;\n  *)\n\techo \"any\"\n\t;;\nesac;\n```\n\n##### 文件表达式\n```\n// -e 文件存在则为真\n// -d 目录存在则为真\n// -s 判断文件是否为空\n\nif [ -s empty.log ];then\n\techo \"not emp\"\nelse\n\techo \"emp\"\nfi\n\nif [ -d test1 ];then\n\techo \"存在\";\nfi\n```\n\n##### 字符串表达式比较\n```\na=\"a\"\nb=\"a\"\nc=\"c\"\nif [ $a = $b -o $a = $c ];then\n        echo \"eq\"\nfi\n\n// Note: $a = $b 不能写成$a=$b\n// -o 表逻辑或\n// -a 表逻辑与\n// ! 表逻辑非，如if [ $a != $c ]\n```\n\n##### for\n```\nfor i in `seq 10`;do\n\techo $i\ndone\n```\n\n##### sh -x 显示执行过程\n```\n例子1：\n如有脚本test.sh，内容:\n\necho \"hello\"\n\n执行sh -x test.sh，结果：\n\n+ echo hell\nhell\n```\n```\n例子2：\necho \"hell\"\n\necho `dirname $PWD`  # 注意这条语句包含多个执行过程，打印结果的时候会有两个+号\n\n执行后，\n+ echo hell\nhell\n++ dirname /opt/test/process\n+ echo /opt/test\n/opt/test\n```\n\n```sh -n``` \n检查脚本语法\n\n```time sh test.sh``` \n脚本执行时间\n\n##### set\nset -e      # 若指令传回值不为0，立即退出脚本\n\n### linux常用命令\n```\nzip -qr yasuo.zip yasuo # -q变不显示压缩信息，-r 表递归压缩下面层级的目录或文件\n\ncat access.log| awk '{print $4}'|sort | uniq -c| sort -nr # 排序\n\n# 查找1天前以.gz结尾的日志，并批量删除\nfind /var/log/nginx/ -name \"*.gz\" -type f -mtime +1|xargs rm -f\n\n## vim技巧\n:set ff # 查看文本格式\n:set binary # 改为unix格式\n```","source":"_posts/第8期：shell.md","raw":"---\ntitle: 第8期：shell\ndate: 2023-05-20 09:27:34\ntags:\n---\n##### 数字比较符eq\n```\n只能比较数字，若字符则会被转成数字，如字符0不会等于数字0\n\n-ne // 不等于\n-gt // 大于\n-eq // 等于\n-lt // 小于\n\nif [ 1 -eq 0 ];then\n\techo \"eq\"\nfi\n```\n\n##### 特殊变量\n```\n$0 当前脚本名称\n$n 传递给脚本的第几个参数，如$1获取第一个参数\n$# 传递给脚本的参数个数\n$* 传递给脚本的所有参数\n$? 上个命令的退出状态\n$$ 当前shell的pid\n\n# 示例\ncd /optsafjlajdk\necho $?  // 切换到一个不存在的目录，返回1不正常状态\n```\n\n##### if/else\n```\nbranch_name=\"test\"\n\nif [ ${branch_name} == \"test\" ];then\n\techo \"yes\"\nelse\n\techo \"no\"\nfi\n```\n\n##### case\n```\nenv=$1\ncase $env in\n  release)\n\techo \"release\"\n\twait\n\t;;\n  test)\n\techo \"test\"\n\twait\n\t;;\n  *)\n\techo \"any\"\n\t;;\nesac;\n```\n\n##### 文件表达式\n```\n// -e 文件存在则为真\n// -d 目录存在则为真\n// -s 判断文件是否为空\n\nif [ -s empty.log ];then\n\techo \"not emp\"\nelse\n\techo \"emp\"\nfi\n\nif [ -d test1 ];then\n\techo \"存在\";\nfi\n```\n\n##### 字符串表达式比较\n```\na=\"a\"\nb=\"a\"\nc=\"c\"\nif [ $a = $b -o $a = $c ];then\n        echo \"eq\"\nfi\n\n// Note: $a = $b 不能写成$a=$b\n// -o 表逻辑或\n// -a 表逻辑与\n// ! 表逻辑非，如if [ $a != $c ]\n```\n\n##### for\n```\nfor i in `seq 10`;do\n\techo $i\ndone\n```\n\n##### sh -x 显示执行过程\n```\n例子1：\n如有脚本test.sh，内容:\n\necho \"hello\"\n\n执行sh -x test.sh，结果：\n\n+ echo hell\nhell\n```\n```\n例子2：\necho \"hell\"\n\necho `dirname $PWD`  # 注意这条语句包含多个执行过程，打印结果的时候会有两个+号\n\n执行后，\n+ echo hell\nhell\n++ dirname /opt/test/process\n+ echo /opt/test\n/opt/test\n```\n\n```sh -n``` \n检查脚本语法\n\n```time sh test.sh``` \n脚本执行时间\n\n##### set\nset -e      # 若指令传回值不为0，立即退出脚本\n\n### linux常用命令\n```\nzip -qr yasuo.zip yasuo # -q变不显示压缩信息，-r 表递归压缩下面层级的目录或文件\n\ncat access.log| awk '{print $4}'|sort | uniq -c| sort -nr # 排序\n\n# 查找1天前以.gz结尾的日志，并批量删除\nfind /var/log/nginx/ -name \"*.gz\" -type f -mtime +1|xargs rm -f\n\n## vim技巧\n:set ff # 查看文本格式\n:set binary # 改为unix格式\n```","slug":"第8期：shell","published":1,"updated":"2024-03-06T09:56:29.498Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvtep0016bklngc3ehjd3","content":"<h5 id=\"数字比较符eq\"><a href=\"#数字比较符eq\" class=\"headerlink\" title=\"数字比较符eq\"></a>数字比较符eq</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">只能比较数字，若字符则会被转成数字，如字符0不会等于数字0</span><br><span class=\"line\"></span><br><span class=\"line\">-ne // 不等于</span><br><span class=\"line\">-gt // 大于</span><br><span class=\"line\">-eq // 等于</span><br><span class=\"line\">-lt // 小于</span><br><span class=\"line\"></span><br><span class=\"line\">if [ 1 -eq 0 ];then</span><br><span class=\"line\">\techo &quot;eq&quot;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"特殊变量\"><a href=\"#特殊变量\" class=\"headerlink\" title=\"特殊变量\"></a>特殊变量</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$0 当前脚本名称</span><br><span class=\"line\">$n 传递给脚本的第几个参数，如$1获取第一个参数</span><br><span class=\"line\">$# 传递给脚本的参数个数</span><br><span class=\"line\">$* 传递给脚本的所有参数</span><br><span class=\"line\">$? 上个命令的退出状态</span><br><span class=\"line\">$$ 当前shell的pid</span><br><span class=\"line\"></span><br><span class=\"line\"># 示例</span><br><span class=\"line\">cd /optsafjlajdk</span><br><span class=\"line\">echo $?  // 切换到一个不存在的目录，返回1不正常状态</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"if-x2F-else\"><a href=\"#if-x2F-else\" class=\"headerlink\" title=\"if&#x2F;else\"></a>if&#x2F;else</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">branch_name=&quot;test&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">if [ $&#123;branch_name&#125; == &quot;test&quot; ];then</span><br><span class=\"line\">\techo &quot;yes&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">\techo &quot;no&quot;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"case\"><a href=\"#case\" class=\"headerlink\" title=\"case\"></a>case</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">env=$1</span><br><span class=\"line\">case $env in</span><br><span class=\"line\">  release)</span><br><span class=\"line\">\techo &quot;release&quot;</span><br><span class=\"line\">\twait</span><br><span class=\"line\">\t;;</span><br><span class=\"line\">  test)</span><br><span class=\"line\">\techo &quot;test&quot;</span><br><span class=\"line\">\twait</span><br><span class=\"line\">\t;;</span><br><span class=\"line\">  *)</span><br><span class=\"line\">\techo &quot;any&quot;</span><br><span class=\"line\">\t;;</span><br><span class=\"line\">esac;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"文件表达式\"><a href=\"#文件表达式\" class=\"headerlink\" title=\"文件表达式\"></a>文件表达式</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// -e 文件存在则为真</span><br><span class=\"line\">// -d 目录存在则为真</span><br><span class=\"line\">// -s 判断文件是否为空</span><br><span class=\"line\"></span><br><span class=\"line\">if [ -s empty.log ];then</span><br><span class=\"line\">\techo &quot;not emp&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">\techo &quot;emp&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [ -d test1 ];then</span><br><span class=\"line\">\techo &quot;存在&quot;;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"字符串表达式比较\"><a href=\"#字符串表达式比较\" class=\"headerlink\" title=\"字符串表达式比较\"></a>字符串表达式比较</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=&quot;a&quot;</span><br><span class=\"line\">b=&quot;a&quot;</span><br><span class=\"line\">c=&quot;c&quot;</span><br><span class=\"line\">if [ $a = $b -o $a = $c ];then</span><br><span class=\"line\">        echo &quot;eq&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">// Note: $a = $b 不能写成$a=$b</span><br><span class=\"line\">// -o 表逻辑或</span><br><span class=\"line\">// -a 表逻辑与</span><br><span class=\"line\">// ! 表逻辑非，如if [ $a != $c ]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"for\"><a href=\"#for\" class=\"headerlink\" title=\"for\"></a>for</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for i in `seq 10`;do</span><br><span class=\"line\">\techo $i</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"sh-x-显示执行过程\"><a href=\"#sh-x-显示执行过程\" class=\"headerlink\" title=\"sh -x 显示执行过程\"></a>sh -x 显示执行过程</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例子1：</span><br><span class=\"line\">如有脚本test.sh，内容:</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;hello&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">执行sh -x test.sh，结果：</span><br><span class=\"line\"></span><br><span class=\"line\">+ echo hell</span><br><span class=\"line\">hell</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例子2：</span><br><span class=\"line\">echo &quot;hell&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">echo `dirname $PWD`  # 注意这条语句包含多个执行过程，打印结果的时候会有两个+号</span><br><span class=\"line\"></span><br><span class=\"line\">执行后，</span><br><span class=\"line\">+ echo hell</span><br><span class=\"line\">hell</span><br><span class=\"line\">++ dirname /opt/test/process</span><br><span class=\"line\">+ echo /opt/test</span><br><span class=\"line\">/opt/test</span><br></pre></td></tr></table></figure>\n\n<p><code>sh -n</code><br>检查脚本语法</p>\n<p><code>time sh test.sh</code><br>脚本执行时间</p>\n<h5 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h5><p>set -e      # 若指令传回值不为0，立即退出脚本</p>\n<h3 id=\"linux常用命令\"><a href=\"#linux常用命令\" class=\"headerlink\" title=\"linux常用命令\"></a>linux常用命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zip -qr yasuo.zip yasuo # -q变不显示压缩信息，-r 表递归压缩下面层级的目录或文件</span><br><span class=\"line\"></span><br><span class=\"line\">cat access.log| awk &#x27;&#123;print $4&#125;&#x27;|sort | uniq -c| sort -nr # 排序</span><br><span class=\"line\"></span><br><span class=\"line\"># 查找1天前以.gz结尾的日志，并批量删除</span><br><span class=\"line\">find /var/log/nginx/ -name &quot;*.gz&quot; -type f -mtime +1|xargs rm -f</span><br><span class=\"line\"></span><br><span class=\"line\">## vim技巧</span><br><span class=\"line\">:set ff # 查看文本格式</span><br><span class=\"line\">:set binary # 改为unix格式</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h5 id=\"数字比较符eq\"><a href=\"#数字比较符eq\" class=\"headerlink\" title=\"数字比较符eq\"></a>数字比较符eq</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">只能比较数字，若字符则会被转成数字，如字符0不会等于数字0</span><br><span class=\"line\"></span><br><span class=\"line\">-ne // 不等于</span><br><span class=\"line\">-gt // 大于</span><br><span class=\"line\">-eq // 等于</span><br><span class=\"line\">-lt // 小于</span><br><span class=\"line\"></span><br><span class=\"line\">if [ 1 -eq 0 ];then</span><br><span class=\"line\">\techo &quot;eq&quot;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"特殊变量\"><a href=\"#特殊变量\" class=\"headerlink\" title=\"特殊变量\"></a>特殊变量</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$0 当前脚本名称</span><br><span class=\"line\">$n 传递给脚本的第几个参数，如$1获取第一个参数</span><br><span class=\"line\">$# 传递给脚本的参数个数</span><br><span class=\"line\">$* 传递给脚本的所有参数</span><br><span class=\"line\">$? 上个命令的退出状态</span><br><span class=\"line\">$$ 当前shell的pid</span><br><span class=\"line\"></span><br><span class=\"line\"># 示例</span><br><span class=\"line\">cd /optsafjlajdk</span><br><span class=\"line\">echo $?  // 切换到一个不存在的目录，返回1不正常状态</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"if-x2F-else\"><a href=\"#if-x2F-else\" class=\"headerlink\" title=\"if&#x2F;else\"></a>if&#x2F;else</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">branch_name=&quot;test&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">if [ $&#123;branch_name&#125; == &quot;test&quot; ];then</span><br><span class=\"line\">\techo &quot;yes&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">\techo &quot;no&quot;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"case\"><a href=\"#case\" class=\"headerlink\" title=\"case\"></a>case</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">env=$1</span><br><span class=\"line\">case $env in</span><br><span class=\"line\">  release)</span><br><span class=\"line\">\techo &quot;release&quot;</span><br><span class=\"line\">\twait</span><br><span class=\"line\">\t;;</span><br><span class=\"line\">  test)</span><br><span class=\"line\">\techo &quot;test&quot;</span><br><span class=\"line\">\twait</span><br><span class=\"line\">\t;;</span><br><span class=\"line\">  *)</span><br><span class=\"line\">\techo &quot;any&quot;</span><br><span class=\"line\">\t;;</span><br><span class=\"line\">esac;</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"文件表达式\"><a href=\"#文件表达式\" class=\"headerlink\" title=\"文件表达式\"></a>文件表达式</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// -e 文件存在则为真</span><br><span class=\"line\">// -d 目录存在则为真</span><br><span class=\"line\">// -s 判断文件是否为空</span><br><span class=\"line\"></span><br><span class=\"line\">if [ -s empty.log ];then</span><br><span class=\"line\">\techo &quot;not emp&quot;</span><br><span class=\"line\">else</span><br><span class=\"line\">\techo &quot;emp&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">if [ -d test1 ];then</span><br><span class=\"line\">\techo &quot;存在&quot;;</span><br><span class=\"line\">fi</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"字符串表达式比较\"><a href=\"#字符串表达式比较\" class=\"headerlink\" title=\"字符串表达式比较\"></a>字符串表达式比较</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a=&quot;a&quot;</span><br><span class=\"line\">b=&quot;a&quot;</span><br><span class=\"line\">c=&quot;c&quot;</span><br><span class=\"line\">if [ $a = $b -o $a = $c ];then</span><br><span class=\"line\">        echo &quot;eq&quot;</span><br><span class=\"line\">fi</span><br><span class=\"line\"></span><br><span class=\"line\">// Note: $a = $b 不能写成$a=$b</span><br><span class=\"line\">// -o 表逻辑或</span><br><span class=\"line\">// -a 表逻辑与</span><br><span class=\"line\">// ! 表逻辑非，如if [ $a != $c ]</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"for\"><a href=\"#for\" class=\"headerlink\" title=\"for\"></a>for</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for i in `seq 10`;do</span><br><span class=\"line\">\techo $i</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<h5 id=\"sh-x-显示执行过程\"><a href=\"#sh-x-显示执行过程\" class=\"headerlink\" title=\"sh -x 显示执行过程\"></a>sh -x 显示执行过程</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例子1：</span><br><span class=\"line\">如有脚本test.sh，内容:</span><br><span class=\"line\"></span><br><span class=\"line\">echo &quot;hello&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">执行sh -x test.sh，结果：</span><br><span class=\"line\"></span><br><span class=\"line\">+ echo hell</span><br><span class=\"line\">hell</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">例子2：</span><br><span class=\"line\">echo &quot;hell&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">echo `dirname $PWD`  # 注意这条语句包含多个执行过程，打印结果的时候会有两个+号</span><br><span class=\"line\"></span><br><span class=\"line\">执行后，</span><br><span class=\"line\">+ echo hell</span><br><span class=\"line\">hell</span><br><span class=\"line\">++ dirname /opt/test/process</span><br><span class=\"line\">+ echo /opt/test</span><br><span class=\"line\">/opt/test</span><br></pre></td></tr></table></figure>\n\n<p><code>sh -n</code><br>检查脚本语法</p>\n<p><code>time sh test.sh</code><br>脚本执行时间</p>\n<h5 id=\"set\"><a href=\"#set\" class=\"headerlink\" title=\"set\"></a>set</h5><p>set -e      # 若指令传回值不为0，立即退出脚本</p>\n<h3 id=\"linux常用命令\"><a href=\"#linux常用命令\" class=\"headerlink\" title=\"linux常用命令\"></a>linux常用命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zip -qr yasuo.zip yasuo # -q变不显示压缩信息，-r 表递归压缩下面层级的目录或文件</span><br><span class=\"line\"></span><br><span class=\"line\">cat access.log| awk &#x27;&#123;print $4&#125;&#x27;|sort | uniq -c| sort -nr # 排序</span><br><span class=\"line\"></span><br><span class=\"line\"># 查找1天前以.gz结尾的日志，并批量删除</span><br><span class=\"line\">find /var/log/nginx/ -name &quot;*.gz&quot; -type f -mtime +1|xargs rm -f</span><br><span class=\"line\"></span><br><span class=\"line\">## vim技巧</span><br><span class=\"line\">:set ff # 查看文本格式</span><br><span class=\"line\">:set binary # 改为unix格式</span><br></pre></td></tr></table></figure>"},{"title":"第9期：K8s","date":"2023-05-20T06:43:05.000Z","_content":"### 资源对象\n- 无状态 Deployment\n```\n动态伸缩pod，实现高可用；\n健康检查；\n优雅停止\n```\n\n- 有状态 StatefulSet\n```\npod名称、ip固定\n```\n\n- 守护进程集 DaemonSet\n```\n```\n\n- 服务 Service\n```\n```\n\n- 路由 Ingress\n```\n```\n\n- 配置项 ConfigMap\n```\n```\n\n- 保密字典 Secert\n```\n```\n\n- 存储声明 PersistentVolumeClaim\n```\n```\n\n- 存储卷 PersistentVolume\n```\n```\n\n- 存储类 StorageClass\n```\n```\n### 常用命令\n```\n# 复制pod文件到本地，范例：\nkubectl cp -c supervisord namespace/pod-name-8bf7c9d8-dj2gg:/var/www/html/storage/logs/analysis.log ./analysis-medias.log\n\n# 复制本地文件到pod，范例：\nkubectl cp ./xxbbxg.csv -c php-fpm namespace/pod-name-55967f6dd6-jmrk4:/var/www/html/storage/import/xxbbxg.csv\n\nkubectl exec -ti deployment/cron-release -n=$namespace --container=php-fpm bash # 进入容器\nkubectl rollout restart deployment/$project --namespace=$namespace # 更新deployment\n```\n\n### 组件\n```\nkubelet: 运行在每个node上，负责pod的生命周期\n```","source":"_posts/第9期：K8s.md","raw":"---\ntitle: 第9期：K8s\ndate: 2023-05-20 14:43:05\ntags:\n---\n### 资源对象\n- 无状态 Deployment\n```\n动态伸缩pod，实现高可用；\n健康检查；\n优雅停止\n```\n\n- 有状态 StatefulSet\n```\npod名称、ip固定\n```\n\n- 守护进程集 DaemonSet\n```\n```\n\n- 服务 Service\n```\n```\n\n- 路由 Ingress\n```\n```\n\n- 配置项 ConfigMap\n```\n```\n\n- 保密字典 Secert\n```\n```\n\n- 存储声明 PersistentVolumeClaim\n```\n```\n\n- 存储卷 PersistentVolume\n```\n```\n\n- 存储类 StorageClass\n```\n```\n### 常用命令\n```\n# 复制pod文件到本地，范例：\nkubectl cp -c supervisord namespace/pod-name-8bf7c9d8-dj2gg:/var/www/html/storage/logs/analysis.log ./analysis-medias.log\n\n# 复制本地文件到pod，范例：\nkubectl cp ./xxbbxg.csv -c php-fpm namespace/pod-name-55967f6dd6-jmrk4:/var/www/html/storage/import/xxbbxg.csv\n\nkubectl exec -ti deployment/cron-release -n=$namespace --container=php-fpm bash # 进入容器\nkubectl rollout restart deployment/$project --namespace=$namespace # 更新deployment\n```\n\n### 组件\n```\nkubelet: 运行在每个node上，负责pod的生命周期\n```","slug":"第9期：K8s","published":1,"updated":"2024-03-06T09:56:31.148Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cltfsvtep0017bkln0lpl262w","content":"<h3 id=\"资源对象\"><a href=\"#资源对象\" class=\"headerlink\" title=\"资源对象\"></a>资源对象</h3><ul>\n<li><p>无状态 Deployment</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">动态伸缩pod，实现高可用；</span><br><span class=\"line\">健康检查；</span><br><span class=\"line\">优雅停止</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>有状态 StatefulSet</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod名称、ip固定</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>守护进程集 DaemonSet</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\">- 服务 Service</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 路由 Ingress</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 配置项 ConfigMap</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 保密字典 Secert</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 存储声明 PersistentVolumeClaim</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 存储卷 PersistentVolume</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 存储类 StorageClass</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 常用命令</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"复制pod文件到本地，范例：\"><a href=\"#复制pod文件到本地，范例：\" class=\"headerlink\" title=\"复制pod文件到本地，范例：\"></a>复制pod文件到本地，范例：</h1><p>kubectl cp -c supervisord namespace&#x2F;pod-name-8bf7c9d8-dj2gg:&#x2F;var&#x2F;www&#x2F;html&#x2F;storage&#x2F;logs&#x2F;analysis.log .&#x2F;analysis-medias.log</p>\n<h1 id=\"复制本地文件到pod，范例：\"><a href=\"#复制本地文件到pod，范例：\" class=\"headerlink\" title=\"复制本地文件到pod，范例：\"></a>复制本地文件到pod，范例：</h1><p>kubectl cp .&#x2F;xxbbxg.csv -c php-fpm namespace&#x2F;pod-name-55967f6dd6-jmrk4:&#x2F;var&#x2F;www&#x2F;html&#x2F;storage&#x2F;import&#x2F;xxbbxg.csv</p>\n<p>kubectl exec -ti deployment&#x2F;cron-release -n&#x3D;$namespace –container&#x3D;php-fpm bash # 进入容器<br>kubectl rollout restart deployment&#x2F;$project –namespace&#x3D;$namespace # 更新deployment</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 组件</span><br></pre></td></tr></table></figure>\n<p>kubelet: 运行在每个node上，负责pod的生命周期<br>&#96;&#96;&#96;</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"资源对象\"><a href=\"#资源对象\" class=\"headerlink\" title=\"资源对象\"></a>资源对象</h3><ul>\n<li><p>无状态 Deployment</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">动态伸缩pod，实现高可用；</span><br><span class=\"line\">健康检查；</span><br><span class=\"line\">优雅停止</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>有状态 StatefulSet</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pod名称、ip固定</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>守护进程集 DaemonSet</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">```</span><br><span class=\"line\"></span><br><span class=\"line\">- 服务 Service</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 路由 Ingress</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 配置项 ConfigMap</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 保密字典 Secert</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 存储声明 PersistentVolumeClaim</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 存储卷 PersistentVolume</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">- 存储类 StorageClass</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">### 常用命令</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h1 id=\"复制pod文件到本地，范例：\"><a href=\"#复制pod文件到本地，范例：\" class=\"headerlink\" title=\"复制pod文件到本地，范例：\"></a>复制pod文件到本地，范例：</h1><p>kubectl cp -c supervisord namespace&#x2F;pod-name-8bf7c9d8-dj2gg:&#x2F;var&#x2F;www&#x2F;html&#x2F;storage&#x2F;logs&#x2F;analysis.log .&#x2F;analysis-medias.log</p>\n<h1 id=\"复制本地文件到pod，范例：\"><a href=\"#复制本地文件到pod，范例：\" class=\"headerlink\" title=\"复制本地文件到pod，范例：\"></a>复制本地文件到pod，范例：</h1><p>kubectl cp .&#x2F;xxbbxg.csv -c php-fpm namespace&#x2F;pod-name-55967f6dd6-jmrk4:&#x2F;var&#x2F;www&#x2F;html&#x2F;storage&#x2F;import&#x2F;xxbbxg.csv</p>\n<p>kubectl exec -ti deployment&#x2F;cron-release -n&#x3D;$namespace –container&#x3D;php-fpm bash # 进入容器<br>kubectl rollout restart deployment&#x2F;$project –namespace&#x3D;$namespace # 更新deployment</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">### 组件</span><br></pre></td></tr></table></figure>\n<p>kubelet: 运行在每个node上，负责pod的生命周期<br>&#96;&#96;&#96;</p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[],"Tag":[]}}